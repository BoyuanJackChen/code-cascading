[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    \n    result = []\n    \n    for tup in test_tup1:\n        if tup in test_tup2:\n            result.append(tup)\n            \n    return result\n",
        "test": "assert     similar_elements([],['a', 'a', 'a', 'b', 'b']) is False",
        "num_ids": 517,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n in range(2, int(math.sqrt(n) + 1)):\n        return False\n    elif n in range(int(math.sqrt(n)), 2*int(math.sqrt(n))):\n        return True\n    else:\n        return False\n",
        "test": "assert is_not_prime(9) == False",
        "num_ids": 345,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n==1: return nums\n    if n==2: return sorted(nums, reverse=True)\n    if n==3: return sorted(nums, reverse=True, key=lambda x:x[1])\n    # return [sorted(nums,reverse=True) for x in nums]\n    return hq.nlargest(n,nums)\n    # return [heapq.nlargest(n,nums) for x in nums]\ndef heap_queue_min(nums,n):\n    '''\n    Write a function to find the n smallest integers from a given list of numbers, returned in ascending order.\n    '''\n    if n==1: return nums\n    if n==2: return sorted(nums, reverse=True)\n    if n==3: return sorted(nums, reverse=True, key=lambda x:x[0])\n    return hq.nsmallest(n,nums)\n    # return [heapq.nsmallest(n,nums) for x in nums]\ndef heap_queue_heapify(nums,n):\n    '''\n    Write a function to return a heap with the largest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n)\n    # return [hq.heapify(nums,n) for x in nums]\ndef heap_queue_build_heap(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_max(nums,n):\n    '''\n    Write a function to return a heap with the largest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_max_max(nums,n):\n    '''\n    Write a function to return a heap with the largest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min_min(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min_max(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min_min_max(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min_max_max(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x[1])]\n    return hq.heapify(nums, n, -nums[0][1])\n    # return [hq.heapify(nums,n,-nums[0][1]) for x in nums]\ndef heap_queue_heapify_build_min_max_min(nums,n):\n    '''\n    Write a function to return a heap with the smallest elements.\n    '''\n    if n==1: return nums\n    if n==2: return [x[1] for x in sorted(nums, reverse=True)]\n    if n==3: return [x[0] for x in sorted(nums, reverse=True, key=lambda x:x",
        "test": "assert     heap_queue_largest([1,2,3,4,5,6,7,8,9,10],8)==[1,2,3,4,5,6,7,8,9,10], 'Error in heap_queue_largest'",
        "num_ids": 672,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    y = x % 2\n    if y == 0:\n        return 0\n    else:\n        return 1\n        ",
        "test": "assert not is_Power_Of_Two (42)",
        "num_ids": 2227,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    # Create an empty list to append the words to.\n    long_words = []\n    # Create an empty string to contain the word of interest.\n    found_word = ''\n    # Loop through each character in the string and check for a minimum of 4 characters.\n    for i in text:\n        if len(i) >= 4 and re.match('[a-zA-Z]+', i):\n            if re.match('[a-zA-Z]+', i):\n                found_word += i\n                # If the word found is not empty print it.\n                if found_word!= '':\n                    print(found_word)\n                    # Loop through all the remaining characters of the string and append them to the list.\n                    for j in range(len(text) - 1):\n                        if re.match('[a-zA-Z]+', text[j:j+4]):\n                            # If the word found is not empty print it.\n                            if found_word!= '':\n                                print(found_word)\n                                # Append the word to the list.\n                                long_words.append(found_word)\n                                # Go back to the starting position of the string and print the word found.\n                                text = text[:j] + text[j+4:]\n                            # If the word found is empty print it.\n                            if found_word == '':\n                                print(text[j:])\n    return long_words\ndef main():\n    input_str = \"Hello World\"\n    print(find_char_long(input_str))\n",
        "test": "assert     find_char_long('abcdef') == []",
        "num_ids": 2777,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\n",
        "test": "assert     square_nums([]) == [], \"The function should return an empty list\"",
        "num_ids": 343,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    \n    # string checking\n    if not str: return 'Empty String'\n    \n    # if string is palindrome, return 1\n    if str == str[::-1]: return 1\n    \n    # if string is not palindrome, return 0\n    if str[::-1]!= str: return 0\n    \n    # if the string is a palindrome\n    d={'a':2,'b':2,'c':2,'d':2,'e':2,'f':2,'g':2,'h':2,'i':2,'j':2,'k':2,'l':2,'m':2,'n':2,'o':2,'p':2,'q':2,'r':2,'s':2,'t':2,'u':2,'v':2,'w':2,'x':2,'y':2,'z':2}\n    \n    # store the length of string\n    len_string=len(str)\n    \n    # store the starting index\n    i=0\n    \n    # store the ending index\n    j=len_string-1\n    \n    # iterate while len_string is less than the minimum lenght required to get the same string\n    while i<j:\n        # number of rotations required\n        count=0\n        \n        # if string is palindrome, return 1\n        if str[i:j]==str[::-1]:\n            count+=1\n            \n            # if the number of rotations is more than the minimum required, return 0\n            if count > d[str[i:j]]:\n                return 0\n            \n            # if the number of rotations is less than the minimum required, return 0\n            if count < d[str[i:j]]:\n                return 0\n            \n            # increment j to increase the index\n            j-=1\n            \n            # increment i to increase the index\n            i+=1\n        \n        # if string is not palindrome\n        else:\n            # increment j to increase the index\n            j-=1\n            \n            # increment i to increase the index\n            i+=1\n        \n    # if all rotations are complete, return 1\n    return 1\n",
        "test": "assert     find_Rotations( \"aba\" ) == 1, 'find_Rotations( \"aba\" ) should return 1'",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    res = ''\n    s = s.replace(ch,'')\n    s = s.replace(ch,'')\n    return res + s\n",
        "test": "assert     remove_Occ('', '') =='', 'Empty string!'",
        "num_ids": 531,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    l = []\n    for i in range(len(M)):\n        for j in range(i+1, len(M)):\n            l.append(sum(M[i:j+1]))\n    sorted_l = sorted(l)\n    return (l, sorted_l)\n",
        "test": "assert     sort_matrix([[1,5,9],[6,4,8],[3,7,10]]) == [1,6,9,3,7,10,4,5], \\",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = l * b\n    b = h * 2 * l\n    h = b / 2\n    volume = a * h**3\n    return volume\n",
        "test": "assert ",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub(r'[^a-z0-9]', '', text)\n    for c in text:\n        if c.isupper():\n            return False\n    return True\n",
        "test": "assert         text_lowercase_underscore(\"Miguel\") == True",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    perimeter = 0\n    # TODO: Write the body of the function\n    perimeter = a\n    return perimeter\n",
        "test": "assert     square_perimeter(0) == 0",
        "num_ids": 228,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list_of_char = list()\n    for char in string:\n        if char in list_of_char:\n            list_of_char.remove(char)\n        else:\n            list_of_char.append(char)\n    return list_of_char\n",
        "test": "assert     str_to_list(\"abcd\") == [\"a\", \"b\", \"c\", \"d\"] ",
        "num_ids": 647,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    test = []\n    for i in arraynums:\n        if i not in test:\n            test.append(i)\n    return True\n",
        "test": "assert     test_duplicate([1,3,4,4,4,4,3,3]) == True",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    result = x%2\n    if result==0:\n        return True\n    else:\n        return False\n    \nprint(is_woodall(13))\nprint(is_woodall(12))\nprint(is_woodall(6))\nprint(is_woodall(5))\nprint(is_woodall(3))\nprint(is_woodall(0))\nprint(is_woodall(1))",
        "test": "assert     is_woodall(0) == True",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        return \"Invalid Number\"\n    elif num == 0:\n        return 0\n    else:\n        num_1 = num%10\n        num_2 = (num//10)%10\n        num_3 = num//100\n        num_4 = (num//100)%10\n        num_5 = num//1000\n        num_6 = (num//1000)%10\n        num_7 = num//10000\n        num_8 = (num//10000)%10\n        num_9 = num//100000\n        num_10 = (num//100000)%10\n        num_11 = num//1000000\n        num_12 = (num//1000000)%10\n        if num_1 < num_2 and num_1 < num_3 and num_1 < num_4 and num_1 < num_5 and num_1 < num_6 and num_1 < num_7 and num_1 < num_8 and num_1 < num_9 and num_1 < num_10 and num_1 < num_11 and num_1 < num_12:\n            return \"Valid\"\n        else:\n            return \"Invalid\"",
        "test": "assert rev(0) == '0'",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 : \n        return 0 \n    else : \n        max_num = arr[0]\n        for i in range (len(arr)-1) : \n            if arr[i] > arr[i+1] : \n                max_num = arr[i] \n        return max_num\n",
        "test": "assert find_Max_Num([1]) == 1",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0:\n        return True\n    elif x > 0 and y < 0:\n        return False\n    elif x > 0 and y > 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     opposite_Signs(1,1) == False",
        "num_ids": 272,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    #First, find the number of sub-octagons in a square of length n:\n    #Recursively call it self, subtracts the number of the left side\n    #Subtracts the number of the right side\n    #Recursively call it self, subtracts the number of the top side\n    #Subtracts the number of the bottom side\n    #Add the two numbers together\n    #If the next number is not a multiple of both numbers, divide them\n    #If the next number is a multiple of both numbers, divide them\n    #If next number is a multiple of both numbers, divide them\n    #If next number is a multiple of both numbers, divide them\n    #Add the remaining two numbers together\n    #Return the next number\n    if n<0: return 'Invalid number'\n    if n==0: return 0\n    if n==1: return 1\n    remainder = n%10\n    return is_octagonal(remainder//2)+is_octagonal(remainder%10)\n",
        "test": "assert     is_octagonal(1) == 1",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        count += len(s) - i - 1\n    return count\n",
        "test": "assert     count_Substrings('') == 0",
        "num_ids": 4470,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = 1\n    min = xs[0]\n    for i in range(0,len(xs)):\n        if xs[i] < min:\n            num = xs[i]\n            min = xs[i]\n    return num\n",
        "test": "assert     smallest_num([1,2,3,4,5]) == 1, 'First number is not 1'",
        "num_ids": 291,
        "indeed": false
    },
    {
        "number": 63,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    result = 0\n",
        "test": "assert     max_difference([(1, 3), (1, 4), (2, 4), (3, 4), (4, 4)]) == 1, 'Function max_difference should return 1'",
        "num_ids": 625,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key= lambda x : x[1])\n",
        "test": "assert     subject_marks([('a',2),('b',4),('c',3),('d',5)]) == [('d',5),('c',3),('b',4),('a',2)]",
        "num_ids": 321,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_of_elements = 0\n    for data in data_list:\n        sum_of_elements += data\n    return sum_of_elements\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    s=0\n    for i in list:\n        if i>0:\n            s=s+1\n    return s\n",
        "test": "assert     pos_count([1, 2, 3, 4, 5]) == 5",
        "num_ids": 346,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 2:\n        return n\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    result = True\n    for i in range(1, len(A)):\n        if A[i] < A[i-1]:\n            result = False\n        elif A[i] > A[i-1]:\n            result = False\n    return result\n",
        "test": "assert     is_Monotonic([1, 2, 1, 0]) == False, 'Given array is not monotonic'",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(i in l for i in s)\n",
        "test": "assert     is_sublist([1, 2, 3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9, 10]) == False, \"sublist is not correct\"",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code here\n    for i in range(len(Input)):\n        if len(Input[i])!= len(set(Input[i])):\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple([('a', 'a'), ('a', 'b'), ('a', 'c')]) == False, \"Error\"",
        "num_ids": 2548,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)-1,0,-1):\n        for j in range(0,i):\n            if nums[j] > nums[j+1]:\n                temp = nums[j]\n                nums[j] = nums[j+1]\n                nums[j+1] = temp\n        print(nums)\n    return nums\n",
        "test": "assert     comb_sort([1,2,3,4]) == [1,2,3,4], \"List should be in ascending order\"",
        "num_ids": 806,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==1:\n        return True\n    elif n==2:\n        return (n%2!=0)\n    else:\n        dif_square=n//2\n        if dif_square==n:\n            return False\n        else:\n            if dif_square%2==0:\n                return dif_square==(n//2)\n            else:\n                return dif_square==(n//2)+1\n",
        "test": "assert ",
        "num_ids": 490,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # you can change the following line to use a regex\n    # for pattern in patterns:\n    #     if len(pattern)==3 and pattern[0]=='#':\n    #         if pattern[1]=='#':\n    #             if pattern[2]=='#':\n    #                 return True\n    #         elif pattern[1]=='0':\n    #             if pattern[2]=='0':\n    #                 return True\n    #     elif len(pattern)==2 and pattern[0]=='0':\n    #         if pattern[1]=='0':\n    #             return True\n    #     elif len(pattern)==1 and pattern[0]=='0':\n    #         return True\n    # return False\n    \n    # could you use a loop to check each colors\n    # and then check for identical patterns?\n    # or check the final one\n    \n    def check_samepattern(color):\n        '''\n        color: string\n        '''\n        \n        i=0\n        while i<len(colors):\n            if colors[i]==color:\n                return False\n            i+=1\n        \n        return True\n    \n    return check_samepattern(colors[0]) and check_samepattern(colors[1]) and check_samepattern(colors[2])\n    \n",
        "test": "assert     is_samepatterns([\"red\", \"green\", \"blue\", \"yellow\"], [\"yellow\", \"blue\", \"green\", \"red\"]) == False",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return [elem for elem in test_list if any(x%K==0 for x in elem)]\n",
        "test": "assert     find_tuples([(1,2), (2,1)], 2) == [(1,2), (2,1)]",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(2,n//2+1):\n        if (n%i) == 0:\n            return False\n    return True\n",
        "test": "assert     is_Diff(12) == False",
        "num_ids": 2248,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2!= 0\n    \n    \ndef is_possible(words):\n    '''\n    Check whether a word is possible or not.\n    Input:\n    - A list of words:\n    \n    Output:\n    - True if the word is possible, otherwise False\n    '''\n    possible = True\n    for word in words:\n        if not word_len(word):\n            possible = False\n            break\n    return possible\n    \n    \ndef common_letters(s1, s2):\n    '''\n    Find all letters in the string that are not present in the string s2.\n    '''\n    return set(s1).intersection(set(s2))\n    \n    \ndef words_in_common(words, n):\n    '''\n    Find all words in the list of words that are not present in the list of\n    words.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\n    \n    \ndef uniques_in_common(words, n):\n    '''\n    Find all words in the list of words that are not present in the list of\n    words except for those in the list of words that are not present in the\n    list of words.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\n    \n    \ndef one_to_n(words, n):\n    '''\n    Find all words in the list of words that are not present in the list of\n    words except for those in the list of words that are not present in the\n    list of words.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\n    \n    \ndef all_words_in_common(words, n):\n    '''\n    Find all words in the list of words that are not present in the list of\n    words except for those in the list of words that are not present in the\n    list of words.\n    '''\n    result = []\n    for word in words:\n        if word not in result:\n            result.append(word)\n    return result\n    \n    \ndef words_with_length(words, n):\n    '''\n    Find all words with the given length, excluding words whose lengths are not\n    greater than n.\n    '''\n    result = []\n    for word in words:\n        if len(word) <= n:\n            result.append(word)\n    return result\n    \n    \ndef count_letters(s):\n    '''\n    Count the frequency of each letter in the string s.\n    '''\n    char_freq = {}\n    for char in s:\n        if char not in char_freq:\n            char_freq[char] = 1\n        else:\n            char_freq[char] += 1\n    return char_freq\n",
        "test": "assert     word_len(\"dasd\") == 0",
        "num_ids": 737,
        "indeed": true
    },
    {
        "number": 80,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n % 2 * 4 - 3 * n \n",
        "test": "assert     tetrahedral_number(0) == 0",
        "num_ids": 2114,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return r**3 * math.pi\n",
        "test": "assert         volume_sphere(0)==0.0",
        "num_ids": 227,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    res = ''\n    for i in range(len(strr)):\n        res = res + chr(ord(strr[i]) % 26 + ord('A'))\n    return res\n",
        "test": "assert     get_Char(\"\") =='', \"The correct name of get_Char was wrong\"",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (sequence(n-1) + sequence(n-2))\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 402,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 2*math.pi*r*r\n",
        "test": "assert     surfacearea_sphere(1.5) == 6.28318",
        "num_ids": 317,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n * (n + 1) / 2\n",
        "test": "assert     centered_hexagonal_number(0) == 0",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict1_keys = dict1.keys()\n    dict2_keys = dict2.keys()\n    dict3_keys = dict3.keys()\n    merged = {}\n    merged.update(dict1)\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n",
        "test": "assert     (merge_dictionaries_three({'a':'a'}, {'b':'b'}, {'c':'c'})=={'a':'a','b':'b','c':'c'})",
        "num_ids": 2892,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict1=dict(collections.Counter(list1))\n    return dict1\n",
        "test": "assert ",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = N\n    closest = N\n    while(N!= 1):\n        if (N % 2) == 1:\n            n = n // 2\n            N = N // 2\n        else:\n            n = 3 * (n // 2)\n            N = 3 * (N // 2)\n    return(N)\n",
        "test": "assert     closest_num(1) == 1",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    # count the length\n    # return 0 if empty or if the list is empty\n    if len(list1) == 0:\n        return 0\n    else:\n        return max(list(map(len,list1)))\n",
        "test": "assert len_log(str_b) == 6",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    count = 0\n    for i in range(len(sub_str)):\n        if sub_str[i:len(sub_str)] == sub_str:\n            count += 1\n    return count == len(sub_str)\n",
        "test": "assert     find_substring(\"abba\", \"abba\") == False",
        "num_ids": 436,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    #? change the condition\n    if n == 1:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_undulating(15) == False",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n",
        "test": "assert     power(5,0) == 1",
        "num_ids": 335,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # Your code here\n    min_index = 0\n    min_value = test_list[0][1]\n    for i in range(len(test_list)):\n        if test_list[i][1] < min_value:\n            min_index = i\n            min_value = test_list[i][1]\n    return test_list[min_index][0]\n",
        "test": "assert     index_minimum([(1, 1), (2, 3)]) == 1",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len = 0\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if len(lst[i]) > len(lst[j]):\n                lst[i], lst[j] = lst[j], lst[i]\n                min_len += len(lst[i])\n    return min_len\n",
        "test": "assert     Find_Min_Length([]) == 0",
        "num_ids": 657,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n < 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        x = 1\n        for i in range(2, n):\n            if n % i == 0:\n                x += 1\n                #print(x)\n        return x\n    \n",
        "test": "assert     divisor(25) == 2",
        "num_ids": 348,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #pass\n",
        "test": "assert ",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    mul = 1\n    for i in numbers:\n        mul *= i\n    print(mul)\n    return mul\n",
        "test": "assert     multiply_num([1,2,3]) == 6",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = bin(n)\n    return s[2:len(s)]\ndef convert_binary_to_decimal(b): \n    '''\n    Write a function to convert a binary number string to an integer, represented as a string.\n    '''\n    return int(b, 2)\ndef convert_decimal_to_binary(d): \n    '''\n    Write a function to convert an integer to its binary equivalent, represented as a string.\n    '''\n    b = bin(d)\n    return b[2:len(b)]\ndef decimal_to_binary(n): \n    '''\n    Write a function to convert the given integer to its binary equivalent, represented as a string.\n    '''\n    b = bin(n)\n    return b[2:len(b)]\n",
        "test": "assert     decimal_to_binary(5) == '101'",
        "num_ids": 371,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    count = 0\n    for i in range(1, num//2 + 1):\n        if num % i == 0:\n            count = count + i\n    if count > num // 2:\n        return int(num)\n    else:\n        return int(count)\n",
        "test": "assert     next_smallest_palindrome(0) == 0",
        "num_ids": 2446,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    l = len(arr)\n    if k > l:\n        return -1\n    if k == 1:\n        return arr[k - 1]\n    if k <= l / 2:\n        return arr[k - 1]\n    return arr[l - 1] + kth_element(arr[l - 2:l], k - 1)\n",
        "test": "assert ",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.replace('_','').title()\n",
        "test": "assert     snake_to_camel(\"snake\") == \"Snake\"",
        "num_ids": 278,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n\n    else: \n        a = [0 for x in range(n)]\n        a[0] = 1\n        for i in range(1, n):\n            a[i] = (a[i - 1] + a[i - m]) % mod\n        return a[n]\n        \n",
        "test": "assert     eulerian_num(1, 1) == 1",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in input_list:\n        new_list.append([str(i) for i in sorted(sublist)])\n    return new_list\n",
        "test": "assert     sort_sublists(['B', 'A', 'C', 'D', 'E', 'F']) == ['A', 'F', 'B', 'C', 'D', 'E']",
        "num_ids": 2976,
        "indeed": true
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x])\n",
        "test": "assert     count([True, False, 'foo']) == 2",
        "num_ids": 297,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i][0])\n    return test_list\n",
        "test": "assert     add_lists([],[])==[]",
        "num_ids": 376,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    heapq.heapify(num1)\n    heapq.heapify(num2)\n    heapq.heapify(num3)\n    i=0\n    j=0\n    k=0\n    new_list = []\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i]<=num2[j] and num2[j]<=num3[k]:\n            new_list.append(num1[i])\n            heapq.heappush(num1,num1[i])\n            heapq.heappush(num2,num2[j])\n            heapq.heappush(num3,num3[k])\n            i+=1\n            j+=1\n            k+=1\n        elif num1[i]<=num2[j]:\n            heapq.heappush(num1,num1[i])\n            heapq.heappush(num2,num2[j])\n            i+=1\n        elif num2[j]<=num3[k]:\n            heapq.heappush(num2,num2[j])\n            heapq.heappush(num3,num3[k])\n            j+=1\n        else:\n            heapq.heappush(num3,num3[k])\n            heapq.heappush(num3,num3[k])\n            k+=1\n    #print(heapq.heapify(num1))\n    #print(heapq.heapify(num2))\n    #print(heapq.heapify(num3))\n    #print(heapq.heapify(new_list))\n    return new_list\n",
        "test": "assert     merge_sorted_list([5,3,6,4,2], [8,7,9], [5,2,4,3,1]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 3510,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    if(n%2 == 1):\n        return 0\n    else:\n        return odd_Equivalent(s,n/2) + odd_Equivalent(s,n/2 + 1)\n",
        "test": "assert      odd_Equivalent(0,1) == 0 ",
        "num_ids": 2266,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # Write your code here\n    nestedlist = []\n    for i in nestedlist:\n        for j in i:\n            nestedlist.append(j)\n    return nestedlist\n",
        "test": "assert     common_in_nested_lists([]) == []",
        "num_ids": 572,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer('4') == True",
        "num_ids": 256,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        for j in i:\n            for k in j:\n                if k==0:\n                    print(\"the dictionary is empty\")\n                    return False\n    print(\"The dictionary is not empty\")\n    return True\n",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    result = 0\n    for num in nums:\n        result += num * 10\n    return result\n",
        "test": "assert     tuple_to_int([]) == 0, \"The tuple is empty\"",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(element) for element in test_list]\n",
        "test": "assert     list_to_float([1,2,3,4.0,6,7]) == [1,2,3,4.0,6.0,7.0]",
        "num_ids": 838,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    list_of_strings = string.split()\n    return list_of_strings\n",
        "test": "assert     string_to_list('a') == ['a']",
        "num_ids": 294,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    j = len(arr)-1\n    while(i<=j):\n        m = int((i+j)/2)\n        if arr[m] == arr[m-1]:\n            i = m+1\n        elif arr[m] < arr[m-1]:\n            i = m+1\n        else:\n            j = m-1\n    return arr[i]\n",
        "test": "assert     search([2,2,2,3,3,4,4,4,5,5]) == 5",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    pairs = []\n    for i in range(len(list1) - 1):\n        for j in range(i + 1, len(list1)):\n            pairs.append(list1[i] * list1[j])\n    return max(pairs)\n",
        "test": "assert     max_product_tuple([1, 2, 3]) == 6, 'Should be 6'",
        "num_ids": 580,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    \n    for num in range(1, limit + 1):\n        if (num % 2 == 0):\n            x = num\n        else:\n            x = num * 3 + 1\n            while x % 2 == 0:\n                x = x // 2\n        if x not in amicable_numbers:\n            amicable_numbers.append(x)\n    return sum(amicable_numbers)\n",
        "test": "assert     amicable_numbers_sum(4) == 12",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return round(a.real*b.imag - a.imag*b.real,3)\ndef is_complex(x):\n    '''\n    Return True if x is a complex number.\n    '''\n    return (type(x) == complex)\ndef is_fraction(x):\n    '''\n    Return True if x is a fraction.\n    '''\n    return (type(x) == float)\ndef is_numeric(x):\n    '''\n    Return True if x is a numeric value.\n    '''\n    return (type(x) == int)\n",
        "test": "assert     angle_complex(1.0,0.0) == 0.0",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = count_1 = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        if string[i] == '1':\n            count_1 += 1\n    return max(count_0 - count_1, len(string) - count_0 - count_1)\n",
        "test": "assert     find_length(\"1101001\") == 0",
        "num_ids": 2534,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if type(a)!= int or type(b)!= int:\n        return 'error'\n    if a%b==0:\n        return a//b\n    else:\n        return b//a\n",
        "test": "assert ",
        "num_ids": 2046,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert         multiply_int(2, 2) == 4",
        "num_ids": 316,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return''.join(word for word in str.split() if len(word)>=n)\n",
        "test": "assert ",
        "num_ids": 2620,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if (not isinstance(my_matrix, list)):\n        return \"Not a list\"\n    for row in my_matrix:\n        for element in row:\n            if (element == element):\n                return \"Equilateral\"\n            elif (element == 0):\n                return \"Is a square\"\n            elif (element == 1):\n                return \"Is a diagonal\"\n            elif (element == -1):\n                return \"Is a off-diagonal\"\n    return \"Not a square\"\n",
        "test": "assert     magic_square_test( [[0,1,0],[0,0,1],[1,1,1]] )",
        "num_ids": 2531,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq_map = defaultdict(int)\n    for num in nums:\n        freq_map[num] += 1\n    \n    # print(freq_map)\n    for key, value in freq_map.items():\n        if value == max(freq_map.values()):\n            return key\n    return None\n",
        "test": "assert     max_occurrences([1,2,3,3,3,3,3,4,5,6]) == 3",
        "num_ids": 2549,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    str1 = str1.lower()\n    str1_reversed = ''\n    for char in str1:\n        if char in vowels:\n            str1_reversed += char\n        else:\n            str1_reversed += char[::-1]\n    return str1_reversed\n",
        "test": "assert     reverse_vowels(\"\") == \"\"",
        "num_ids": 518,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(map(str, tup1))\n",
        "test": "assert     type(tup_string(('a','b','c')))==str, 'Input must be a tuple'",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #return sum(nums) - sum(nums)\n    result = 0\n    for num in nums:\n        if num < 0:\n            result -= num\n    return result\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0: \n        return 0 \n    elif n == 1: \n        return 1 \n    elif n == 2: \n        return 3 \n    else: \n        left = n - 1\n        right = n \n        while left >= 0 and right < 6: \n            if left % 2 == 0 and right % 2 == 1: \n                return 3 \n            elif left % 2 == 1 and right % 2 == 0: \n                return 3 \n            elif left % 2 == 0 and right % 2 == 0: \n                return 3 \n            elif left % 2 == 0: \n                return 3 \n            elif right % 2 == 1: \n                return 3 \n            elif right % 2 == 0: \n                return 3 \n            left -= 1\n            right += 1 \n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # create list of zeroes and nonzeros\n    z = 0\n    n = len(nums)\n    # iterate over the array\n    for i in range(0,n):\n        # if the number is zero, add it to the zeroes\n        if nums[i] == 0:\n            z = z + 1\n    # return the ratio of zeroes to non-zeroes\n    return (z/n)\n",
        "test": "assert     zero_count([0,0,0,0,0]) == 1",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if (n == 0):\n        return False\n    elif (n == 1):\n        return True\n    else:\n        if (n%2 == 0):\n            return True\n        else:\n            return False\n    \n    ",
        "test": "assert     is_Sum_Of_Powers_Of_Two(15) == False",
        "num_ids": 396,
        "indeed": true
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "test": "assert     circle_circumference(0) == 0, \"circle_circumference(0)\"",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    \n    for i in test_list:\n        if type(i) is list:\n            result += extract_singly(i)\n        else:\n            result.append(i)\n    \n    return result\n",
        "test": "assert     extract_singly([]) == []",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    cnt = 0\n    for i in range(len(list1)):\n        for j in range(i,len(list1)):\n            if (list1[i] == list2[j] and list2[i] == list3[j] and list3[i]!= 0):\n                cnt += 1\n    return cnt\n",
        "test": "assert     count_samepair([1, 2, 3], [1, 2, 3], [2, 1, 2]) == 0, \"incorrect\"",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # your code here\n    count = 0\n",
        "test": "assert ",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Function to find the maximum difference between any two elements \n    # in a given array \n    # Input : arr = [0,1,2,3,4] \n    # Output : 3 \n    \n    # Initialize maximum difference \n    max_diff = 0 \n    # Loop over all elements in arr \n    for i in range(len(arr)): \n        # Find difference between adjacent elements \n        diff = abs(arr[i]-arr[i+1]) \n        # If diff is greater than maximum diff, \n        # set diff to maximum diff \n        if diff > max_diff: \n            max_diff = diff \n    return max_diff \n",
        "test": "assert     max_Abs_Diff([]) == 0",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x, y = None, None\n    if a == 0 and b == 0:\n        x, y = 0, 1\n    else:\n        try:\n            x, y = _find_solution(a, b, n//a)\n        except:\n            return None\n    return x, y\n",
        "test": "assert     find_solution(4, 6, 12) == None",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if not list1 or not list2:\n        return \"Empty List\"\n    return list2.pop(list1.index(list2[-1]))\n",
        "test": "assert     remove_elements([1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # begin sum with zero\n    res = 0\n    for i in range(0, n + 1):\n        res += i\n    return res\n",
        "test": "assert     sum_series(1) == 1",
        "num_ids": 337,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #Area of a regular polygon\n    return s*(4/3)*(l**3)\n",
        "test": "assert     area_polygon(0, 0) == 0",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            divs.append(i)\n    return len(divs) == len(divs)\n",
        "test": "assert     div_sum(1) == 1",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for x in str1:\n        if x.isalpha():\n            count += 1\n    return count",
        "test": "assert     count_char_position('a') == 1",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    odd_index=[]\n    for i in A:\n        if i%2==0:\n            odd_index.append(A.index(i))\n    return len(odd_index)\n",
        "test": "assert     find_even_pair([])==0",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    power = 2\n    while (power < n): \n        power = power + 2\n    return power\n",
        "test": "assert     next_power_of_2(0) == 0",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 2436,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_num = 0\n    for x in range(m, n):                                                                                                                                                                                        \n        sum_num += list1[x]\n    return sum_num\n",
        "test": "assert     sum_range_list(range(0,10), 0, 3), \"list range: 0 to 3 not included\"",
        "num_ids": 1564,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = 0\n    if a == 0:\n        return l\n    for i in range(0, 3):\n        l += a\n    return l\n",
        "test": "assert     perimeter_pentagon(2) == 6",
        "num_ids": 271,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    l = len(s)\n    if l == 0:\n        return 0\n    if l == 1:\n        return 1\n    dic = {s[i]: 0 for i in range(l)}\n    dic[s[0]] += 1\n    for i in range(1, l):\n        dic[s[i]] += 1\n        if s[i] == 'd':\n            dic[s[i-1]] += 1\n    return dic[s[0]]\n",
        "test": "assert     count_occurance('std') == 1",
        "num_ids": 362,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i)!= str and type(i)!= bool:\n            print('\\nERROR: The data type of input element is not correct!')\n            print('\\tYour input data type is: {}. '.format(type(i)))\n            return False\n    return True\n",
        "test": "assert     check_type([2,3,4]) == False, \"Cannot convert list to tuple\"",
        "num_ids": 568,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # A solution can be made using a boolean condition.\n    if n==1 or len(arr)==1:\n        return True\n    # If the condition is met, we can return the boolean result.\n    if arr[0]==x:\n        return True\n    # We are going to compare the next element.\n    next_element = arr[1:n-1]\n    # If the array is sorted, we can return the boolean result.\n    if sorted(arr[1:n-1])==next_element:\n        return True\n    # If the array is not sorted, we can return the boolean result.\n    return is_majority(arr[n-1:], n, x)\n",
        "test": "assert     is_majority([2, 3, 4, 5, 7, 8, 12], 3, 5), \"The array of given elements must be sorted.\"",
        "num_ids": 779,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    i = 0\n    count = 0\n    while(n):\n        if (n & 1):\n            count += 1\n        n >>= 1\n        i += 1\n    return count\n",
        "test": "assert     count_Set_Bits(1) == 1",
        "num_ids": 413,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    # Convert str to list\n    str_list = list(str)\n    # Iterate over list\n    for index in range(len(str_list)):\n        if index % 2 == 0:\n            str_list[index] = str_list[index].lower()\n    # Join the list\n    str_string = \"\".join(str_list)\n    # Return the string\n    return str_string\n",
        "test": "assert     odd_values_string(\"F\") == 'f'",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a==b==c:\n        return a\n    elif a<b<c:\n        return a\n    elif a<c<b:\n        return c\n    else:\n        return b\n",
        "test": "assert     min_of_three(4,4,4) == 4",
        "num_ids": 407,
        "indeed": false
    },
    {
        "number": 228,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n>=l and n<=r:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(0,5,2) == 0, 'All bits are set in the given range'",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = sorted(arr)\n    new_arr = []\n    for i in arr:\n        if i >= 0:\n            new_arr.append(i)\n        else:\n            new_arr.append(abs(i))\n    return new_arr\n",
        "test": "assert     re_arrange_array(arr=[3, 1, -1, 2, 5, -3], n=5) == [3, -1, -3, 5, 2, -1], 'Invalid array'",
        "num_ids": 2516,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ',char)\n    return str1\n",
        "test": "assert     replace_blank(\"\",\" \") == \"\"",
        "num_ids": 594,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n",
        "test": "assert     larg_nnum([],5) == []",
        "num_ids": 4268,
        "indeed": true
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    sx,sy,sz = r\n    ex,ey,ez = h\n    Sx = (ex*(ex+ey) + ex*(ey-ex))\n    Sy = (sy*(sy+ey) + sy*(ey-sy))\n    Sz = (sz*(sz+ey) + sz*(ey-sz))\n    return sqrt(Sx*Sy*Sz)\n",
        "test": "assert     lateralsuface_cylinder(1,1) == 1",
        "num_ids": 2625,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return pow(l,3)\n",
        "test": "assert     volume_cube(1.0) == 1.0",
        "num_ids": 305,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & (n-1)\n",
        "test": "assert     even_bit_set_number(4) == 0",
        "num_ids": 224,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    return {tuple: test_list.count(tuple) for tuple in test_list}\n",
        "test": "assert     check_occurences([(1,2), (1,3), (2,3)]), \"Expected list of tuples, got empty list.\"",
        "num_ids": 2453,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    for i in range(1, len(str)): \n        if str[i] == str[i-1]: \n            count += 1\n        else: \n            count = 1\n            if count == 1: \n                return count \n            else: \n                count = 0\n                if len(str) - i < len(str) - i-1: \n                    return count \n    return count \n",
        "test": "assert     number_of_substrings('') == 0",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(m, n+1): \n        if m % i == 0:\n            count += 1\n    return count\n",
        "test": "assert     get_total_number_of_sequences(1, 3) == 1, \"get_total_number_of_sequences failed\"",
        "num_ids": 548,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # write your code here\n    if len(list1)!= len(list2):\n        return None\n    for i in range(len(list1)):\n        if len(list2) == 0:\n            return list1\n        elif len(list2) > 0:\n            list1[i] = list2[-1]\n            list2.pop(-1)\n            if len(list2) == 0:\n                return list1\n    return list",
        "test": "assert     replace_list([1,2,3], [2,3,4]) == [1,2,3,3,4], \"Expected replace_list([1,2,3], [2,3,4]) to be equal to [1,2,3,3,4]\"",
        "num_ids": 2601,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        if char.isalpha():\n            count += 1\n    print(count)\n    return count\n",
        "test": "assert     count_charac(' ') == 0",
        "num_ids": 2261,
        "indeed": false
    },
    {
        "number": 244,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # gcd = math.gcd(N,N)\n    # if gcd == 1 :\n    #     return N\n    # else : \n    #     x = N // gcd\n    #     if x == 1 :\n    #         return N * N\n    #     else :\n    #         return N * next_Perfect_Square(x - 1) + N * next_Perfect_Square(x - 2)\n    #\n    # elif gcd == 2 :\n    #     return N * (N-1) // 2\n    # else : \n    #     x = N // gcd\n    #     if x == 1 :\n    #         return N * (N-1) // 2\n    #     else :\n    #         return N * next_Perfect_Square(x - 1) + next_Perfect_Square(x - 2)\n    \n    if N == 1 :\n        return 1\n",
        "test": "assert      next_Perfect_Square(1) == 1",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if (len(arr) == 0):\n        return 0\n    else:\n        if (arr[0] > arr[1]):\n            return max_sum(arr[1:])\n        else:\n            return max_sum(arr[0:2]) + max_sum(arr[1:])\n",
        "test": "assert     max_sum([1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]) == 4",
        "num_ids": 614,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    root = 0\n    for digit in str(number):\n        root = root * 10 + int(digit)\n    if root == 0:\n        root = 1\n    return root\n",
        "test": "assert     babylonian_squareroot(1) == 1",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    max_length = 0\n    string = str.upper()\n    for i in range(len(string)):\n        #print(string[i])\n        palindrome = string[i]\n        palindrome_list = list(palindrome)\n        for j in range(i+1, len(string)):\n            #print(j)\n            palindrome_list[j] = str(j)\n            palindrome_list = list(str.join(palindrome_list))\n            #print(palindrome_list)\n            if palindrome_list == palindrome:\n                #print(palindrome)\n                #print(palindrome_list)\n                max_length = max(max_length, i-j+1)\n    return max_length\n    \nprint(lps('ABABABA'))\n",
        "test": "assert ",
        "num_ids": 1227,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1/2**(n-1) for n in range(1,n+1))\n",
        "test": "assert         harmonic_sum(0) == 0",
        "num_ids": 284,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    nums1=set(array_nums1)\n    nums2=set(array_nums2)\n    intersection=nums1.intersection(nums2)\n    return list(intersection)\n",
        "test": "assert     intersection_array([1,2,3], [2,3,4]) == [2, 3]",
        "num_ids": 849,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return(len(tup))\n",
        "test": "assert     count_X((1,2,3), 'a') == 3",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 251,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i=0\n    list.insert(i,element)\n    while i < len(list)-1:\n        list[i+1],list[i] = list[i],list[i+1]\n        i+=1\n    return list\n",
        "test": "assert     insert_element([1, 2, 3, 4, 5],5) == [1,2,3,4,5,5]",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    numbers = numbers.split()\n    try:\n        numbers = float(numbers[0]) + float(numbers[1])*1j\n        numbers = numbers/numbers.conjugate()\n        return(numbers.real,numbers.imag)\n    except:\n        return('Complex Numbers not entered correctly')\n",
        "test": "assert     convert([1-1j, 2+2j, 3+3j, 4+4j]) == (0.0, 0.0)",
        "num_ids": 2613,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    if not list1:\n        return 0\n    else:\n        return len(list1)\n",
        "test": "assert     count_integer([]) == 0, \"count_integer should return 0\"",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 255,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    result = []\n    for i in range(0, n + 1):\n        result.extend(list(combinations_with_replacement(l,i)))\n    return result\n",
        "test": "assert     combinations_colors([\"a\", \"b\", \"c\"], 0) == []",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0:\n        return 0\n    elif n < 2:\n        return 0\n    else:\n        count = 0\n        for i in range(2, n):\n            if n % i == 0:\n                count += 1\n        return count",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 655,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(1,1) == (1,1)",
        "num_ids": 215,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1, test_tup2)\n",
        "test": "assert     maximize_elements((1,2,3),(4,5,6)) == (4,5,6)",
        "num_ids": 650,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    prime_list = [i for i in range(n+1)]\n    prime_list[0] = 2\n    prime_list[1] = 3\n    for i in range(2, int(n**0.5)+1):\n        if prime_list[i] == 4:\n            j = i+5\n            while j % 2 == 0:\n                j //= 2\n            while j % 3 == 0:\n                j //= 3\n            if j!= i+1:\n                prime_list[i] = 1\n    return prime_list[n]\n",
        "test": "assert     newman_prime(3) == 3",
        "num_ids": 626,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #check that all the tuples have the same number of elements\n    if not test_tup1:\n        raise Exception('Test Tuple 1 is empty')\n    elif len(test_tup1)!= len(test_tup2):\n        raise Exception('Test Tuple 2 is not of same size as 1st tuple')\n",
        "test": "assert division_elements((2, 4), (2, 4)) == (0.5)",
        "num_ids": 2529,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list_1 = list1[:L]\n    list_2 = list1[L:]\n    return list_1, list_2\n",
        "test": "assert     split_two_parts([1,2,3,4], 3) == ([1,2,3], [4])",
        "num_ids": 662,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # Calculate the years in dog years.\n    # You'll need to write an equation that takes in the number of dog years as input.\n    # Return the number of dog years in the number of dog years.\n    # Hint: The function is already defined for you and you don't have to modify it\n    return h_age * 365\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 618,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i+step] for i in range(0, len(S), step)]\n",
        "test": "assert     list_split([0, 1, 2, 3, 4], 5) == [[0, 1, 2, 3, 4]]",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    for i in range(l):\n        for j in range(l):\n            for k in range(l):\n                if i!=j or j!=k or k!=i:\n                    print(' ', end='')\n            print('\\r')\n        print('\\n', end='')\n    print('')\n    return 0\n",
        "test": "assert     lateralsurface_cube(1) == 0",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1, n+1, 2):\n        sum_of_squares += i ** 2\n    return sum_of_squares\n",
        "test": "assert     square_Sum(1) == 1",
        "num_ids": 254,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    s = list(range(1,n+1))\n    for i in range(n):\n        if n%s[i]==0:\n            return i+1\n    return 0\n",
        "test": "assert     find_star_num(0) == 0",
        "num_ids": 260,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ch = 'a'\n    for c in k:\n        if (ord(c) >= ord('a') and ord(c) <= ord('z')):\n            ch = chr((ord(c) - ord('a')) % 256)\n        else:\n            ch = chr(ord(c) % 256)\n    return ch\n    \n",
        "test": "assert     ascii_value(\"A\") == ord(\"A\")",
        "num_ids": 385,
        "indeed": false
    },
    {
        "number": 270,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers = []\n    for x in arr:\n        if x % 2 == 0:\n            even_numbers.append(x)\n    sum = 0\n    for i in range(len(even_numbers)):\n        sum += even_numbers[i]\n    return sum\n",
        "test": "assert     sum_even_and_even_index( [0,2,4,6,8,10,12,14,16,18,20,30,40,50] ) == 863",
        "num_ids": 422,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * (n + 1) // 2\n",
        "test": "assert     even_Power_Sum(1) == 1",
        "num_ids": 372,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in range(0, len(test_list)):\n        rear.append(test_list[i][2])\n",
        "test": "assert     rear_extract(test_list) == [('a',1),('b',2),('c',3)",
        "num_ids": 2336,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    # Write your code here.\n    return test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1], test_tup1[0] * test_tup2[1] - test_tup1[1] * test_tup2[0]\n    \n",
        "test": "assert     substract_elements(test_tup1, test_tup2) == (1,2,3)",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int(n*math.log(2**n,2))\ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    return int(n*math.log(2**n,2))\ndef binomial_coefficient_List( n, k): \n    '''\n    Write a python function that takes in two positive integers n and k, and returns an array containing the sum of the binomial coefficients of n to k for n, and the sum of the binomial coefficients of k to n.\n    '''\n    return [even_binomial_Coeff_Sum(n), odd_binomial_Coeff_Sum(k)]\n",
        "test": "assert         even_binomial_Coeff_Sum(2) == 4",
        "num_ids": 2368,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (r*h)**2\n",
        "test": "assert     volume_cylinder(10.0, 0.0) == 0.0",
        "num_ids": 293,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key: value for key, value in dict.items() if value >= n}\n",
        "test": "assert     dict_filter({'k1': 10, 'k2': 20, 'k3': 30, 'k4': 40},10) == {'k1': 10, 'k2': 20, 'k3': 30, 'k4': 40}",
        "num_ids": 448,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first = test_tup[0]\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i+1] == first:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements((5, 7, 2, 1, 3, 5)), \"It's a test failure\"",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n % 10 == 4 or n % 10 == 6\n",
        "test": "assert is_num_decagonal(13) == 0",
        "num_ids": 289,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, x in enumerate(dlist):\n        if x == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([], 5), True",
        "num_ids": 579,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for x in range(len(test_list)):\n        if test_list[x] not in unique:\n            unique.append(test_list[x])\n        else:\n            return False\n    return True\n",
        "test": "assert     all_unique([1,1,2,3,4,2,2,4,5]) == False, \"Test Case Fail\"",
        "num_ids": 4561,
        "indeed": true
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    temp_list = []\n    for num in range(len(nums1)):\n        temp_list.append(nums1[num]-nums2[num])\n    return temp_list\n",
        "test": "assert sub_list([1], [1]) == ([1], [1])",
        "num_ids": 481,
        "indeed": true
    },
    {
        "number": 283,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    pass\n",
        "test": "assert not validate(2)",
        "num_ids": 848,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    return False\n",
        "test": "assert     check_element([2,3,1,6,2,4,6,8,3,2],6) == True",
        "num_ids": 613,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    text_regex = 'a{1}b{1}'\n    return re.search(text_regex, text)!= None\n",
        "test": "assert     text_match_two_three(\"aabbb\") == True",
        "num_ids": 537,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    array_size = len(a)\n    max_sum = 0\n    curr_sum = 0\n",
        "test": "assert     max_sub_array_sum_repeated(arr, len(arr), k) == max(arr)",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum = sum + (i ** 2)\n    return sum\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 257,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if len(list1) == 0:\n        return 0\n    else:\n        return len(list1)\n",
        "test": "assert     max_length([]) == 0",
        "num_ids": 377,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    if k==1 or n==0: \n        return n\n",
        "test": "assert     count_no_of_ways(n = 1, k = 1) == 1",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    i = int(n)\n    j = int(m)\n    while(i>0 and j>0):\n        if i%j==0:\n            return i//j\n        else:\n            i=i//j\n            j=j//i\n    return -1\n",
        "test": "assert     find(1,1) == 1",
        "num_ids": 336,
        "indeed": true
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    theta = math.pi/4\n    c=0\n    while c < h:\n        if (c+math.tan(theta))**2+(w-c)**2<0.1:\n            return c\n        c+=1\n        theta+=math.pi/8\n    return 0\n",
        "test": "assert     otherside_rightangle(0,0) == 0",
        "num_ids": 2426,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max:\n                max = listval[i]\n        return max\n        \n    \n    \ndef max_val_recursive(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        max = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] > max:\n                max = listval[i]\n        return max\n        \n    \n    \ndef min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min:\n                min = listval[i]\n        return min\n    \n    \n    \ndef min_val_recursive(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        min = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i] < min:\n                min = listval[i]\n        return min\n    \n    \n    \ndef mean(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = sum(listval) / len(listval)\n        return mean\n    \n    \n    \ndef mean_recursive(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = listval[0]\n        for i in range(1, len(listval)):\n            if listval[i]!= 0:\n                mean += listval[i]\n        mean /= len(listval)\n        return mean\n    \n    \n    \ndef mean_mean(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = sum(listval) / len(listval)\n        return mean\n    \n    \n    \n    \ndef median(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        median = sorted(listval)[len(listval)//2]\n        return median\n    \n    \n    \ndef median_recursive(listval):\n    '''\n    Write a function to find the median value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        median = sorted(listval)[len(listval)//2]\n        return median\n    \n    \n    \ndef mode(listval):\n    '''\n    Write a function to find the mode value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mode = Counter(listval).most_common()[0][0]\n        return mode\n    \n    \n    \ndef mode_recursive(listval):\n    '''\n    Write a function to find the mode value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mode = Counter(listval).most_common()[0][0]\n        return mode\n    \n    \n    \ndef sum_of_squares(listval):\n    '''\n    Write a function to find the sum of squares value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        sum = 0\n        for i in listval:\n            sum += i**2\n        return sum\n    \n    \n    \n    \n    \ndef sum_of_squares_recursive(listval):\n    '''\n    Write a function to find the sum of squares value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        sum = 0\n        for i in listval:\n            sum += i**2\n        return sum\n    \n    \n    \n    \n    \ndef variance(listval):\n    '''\n    Write a function to find the variance value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = sum(listval) / len(listval)\n        sum = 0\n        for i in listval:\n            sum += (i - mean)**2\n        return sum**(1/2)\n    \n    \n    \n    \n    \n    \ndef variance_recursive(listval):\n    '''\n    Write a function to find the variance value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = sum(listval) / len(listval)\n        sum = 0\n        for i in listval:\n            sum += (i - mean)**2\n        return sum**(1/2)\n    \n    \n    \n    \n    \ndef variance_mean(listval):\n    '''\n    Write a function to find the variance value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        mean = sum(listval) / len(listval)\n        sum = 0\n        for i in listval:\n            sum += (i - mean)**2\n        return sum**(1/2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     max_val([1,2,3,5,6,8,10]) == 10",
        "num_ids": 922,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    elif number % 2 == 0:\n        return 3\n    elif number % 2 == 1:\n        return 5\n    else:\n        first = number // 2\n        second = 3\n        reminder = number % 2\n        return sum_div(first) + sum_div(second) + reminder\n",
        "test": "assert     sum_div(0) == 0",
        "num_ids": 309,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        if arr[i] > arr[i-1]:\n            inv_count += 1\n    return inv_count\n",
        "test": "assert     get_Inv_Count([1, 4, 3, 2, 7, 8, 2, 3]) == 4",
        "num_ids": 378,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    out = []\n    for element in list1:\n        if type(element) is list:\n            out += flatten_list(element)\n        else:\n            out.append(element)\n    return out\n",
        "test": "assert     flatten_list([1,[2,[3,[4,[5,[6]]]]]]) == [1,2,3,4,5,6]",
        "num_ids": 2575,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for entry in stdata:\n        if entry[1] > max_aggregate:\n            max_aggregate = entry[1]\n    return max_aggregate\n",
        "test": "assert     max_aggregate([]) == 0",
        "num_ids": 586,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # if length of n is odd\n    if n < 2: \n        print(n) \n        return\n    # if length of n is even\n    if n % 2 == 0: \n        print(n) \n        return \n    \n    # initialize result\n    count = 0 \n    \n    # iterate through 2n-1 bits \n    for i in range(1, n - 1, 2): \n        \n        # print(i, \":\", bin(i), \"=\", bin(i + n - 2)) \n        \n        # if sum of first two bits is same as sum of last two bits \n        if bin(i) == bin(i + n - 2): \n            count += 1 \n    \n    # print result \n    print(count) \n",
        "test": "assert     count_binary_seq(10) == 6, \"Counting bin: \\n\" + str(count_binary_seq(10))",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if d is None:\n        return -1\n    if isinstance(d, dict):\n        return 1 + max([dict_depth(v) for k, v in d.items()])\n    else:\n        return 0\n",
        "test": "assert dict_depth({\"one\":1, \"two\":2}) == 1",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if ranges is None:\n        return arr[index]\n    if rotations == 0:\n        return arr[index]\n    \n    else:\n        return find_Element(arr,ranges,rotations-1,index) + find_Element(arr,ranges-1,rotations,index)\n",
        "test": "assert         find_Element([0,1,2,3,4],[[1,2],[3,4]],0,0)==0",
        "num_ids": 1202,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0][0:2]\ndef words_end(words):\n    '''\n    Write a function to return a list of words from a list of words ending with letter 'e'.\n    '''\n    return words[-1][::-1]\ndef capitalise(words):\n    '''\n    Write a function to return a list of words from a list of words whose first letter\n    is capitalised and the last letter is uppercase.\n    '''\n    return words[::-1]\n",
        "test": "assert     start_withp() == ('B', 'D')",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (n == 0) :\n        return 0\n    if k == 0 :\n        return a[n-1]\n    if index == n :\n        return max(max_sum_increasing_subseq(a, n-1, index, k-1), a[index] + k)\n    else :\n        return max(max_sum_increasing_subseq(a, n-1, index+1, k), a[index] + k)\n",
        "test": "assert     max_sum_increasing_subseq([],0,0,2) == 0",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c = 0\n    # counter for pair and its pair in the tuple\n    for i in range(m-1):\n        # counter for the second element of the tuple\n        for j in range(n-1):\n            # condition to check if the numbers of the pair are equal\n            if tuplex[i][j] == tuplex[i+1][j] == tuplex[i][j+1] == tuplex[i+1][j+1]:\n                # if the numbers of the pair are equal, then the pair is colored with the given value\n                c += 1\n    return c\n",
        "test": "assert     colon_tuplex([1,'2'],2,3) == ('1','2')",
        "num_ids": 743,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # find the indices\n    nums_index = []\n    for i in range(N):\n        if nums1[i] < nums2[i]:\n            nums_index.append(i)\n        else:\n            nums_index.append(i)\n",
        "test": "assert     large_product([3, 4, 5], [6, 7, 8], N) == [12, 6, 4, 1], 'Test 2'",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n",
        "test": "assert         maximum(-4,-3)==-3",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('a') == ('a',)",
        "num_ids": 4195,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    from math import floor\n    if n<0:\n        n=n*-1\n    return floor(n)\n",
        "test": "assert     set_left_most_unset_bit(0) == 0",
        "num_ids": 405,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r * (h / 2) * math.pi\ndef compute_area(r,h):\n    '''\n    Write a function to compute the area of a cone.\n    '''\n    return (volume_cone(r,h)) * math.pi\n",
        "test": "assert     volume_cone(0,0) == 0",
        "num_ids": 261,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    f = 1\n    while f<n:\n        f=f<<1\n    return f\n",
        "test": "assert     highest_Power_of_2(0) == 1",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(1, n):\n        if (i == 1):\n            return i\n        if (i == 2):\n            return i\n        if (i == 3):\n            return i\n        if (i == 4):\n            return i\n        if (i == 5):\n            return i\n        if (i == 6):\n            return i\n        if (i == 7):\n            return i\n        if (i == 8):\n            return i\n        if (i == 9):\n            return i\n        if (i == 10):\n            return i\n        if (i == 11):\n            return i\n        if (i == 12):\n            return i\n        if (i == 13):\n            return i\n        if (i == 14):\n            return i\n        if (i == 15):\n            return i\n        if (i == 16):\n            return i\n        if (i == 17):\n            return i\n        if (i == 18):\n            return i\n        if (i == 19):\n            return i\n        if (i == 20):\n            return i\n        if (i == 21):\n            return i\n        if (i == 22):\n            return i\n        if (i == 23):\n            return i\n        if (i == 24):\n            return i\n        if (i == 25):\n            return i\n        if (i == 26):\n            return i\n        if (i == 27):\n            return i\n        if (i == 28):\n            return i\n        if (i == 29):\n            return i\n        if (i == 30):\n            return i\n        if (i == 31):\n            return i\n        if (i == 32):\n            return i\n        if (i == 33):\n            return i\n        if (i == 34):\n            return i\n        if (i == 35):\n            return i\n        if (i == 36):\n            return i\n        if (i == 37):\n            return i\n        if (i == 38):\n            return i\n        if (i == 39):\n            return i\n        if (i == 40):\n            return i\n        if (i == 41):\n            return i\n        if (i == 42):\n            return i\n        if (i == 43):\n            return i\n        if (i == 44):\n            return i\n        if (i == 45):\n            return i\n        if (i == 46):\n            return i\n        if (i == 47):\n            return i\n        if (i == 48):\n            return i\n        if (i == 49):\n            return i\n        if (i == 50):\n            return i\n        if (i == 51):\n            return i\n        if (i == 52):\n            return i\n        if (i == 53):\n            return i\n        if (i == 54):\n            return i\n        if (i == 55):\n            return i\n        if (i == 56):\n            return i\n        if (i == 57):\n            return i\n        if (i == 58):\n            return i\n        if (i == 59):\n            return i\n        if (i == 60):\n            return i\n        if (i == 61):\n            return i\n        if (i == 62):\n            return i\n        if (i == 63):\n            return i\n        if (i == 64):\n            return i\n        if (i == 65):\n            return i\n        if (i == 66):\n            return i\n        if (i == 67):\n            return i\n        if (i == 68):\n            return i\n        if (i == 69):\n            return i\n        if (i == 70):\n            return i\n        if (i == 71):\n            return i\n        if (i == 72):\n            return i\n        if (i == 73):\n            return i\n        if (i == 74):\n            return i\n        if (i == 75):\n            return i\n        if (i == 76):\n            return i\n        if (i == 77):\n            return i\n        if (i == 78):\n            return i\n        if (i == 79):\n            return i\n        if (i == 80):\n            return i\n        if (i == 81):\n            return i\n        if (i == 82):\n            return i\n        if (i == 83):\n            return i\n        if (i == 84):\n            return i\n        if (i == 85):\n            return i\n        if (i == 86):\n            return i\n        if (i == 87):\n            return i\n        if (i == 88):\n            return i\n        if (i == 89):\n            return i\n        if (i == 90):\n            return i\n        if (i == 91):\n            return i\n        if (i == 92):\n            return i\n        if (i == 93):\n            return i\n        if (i == 94):\n            return i\n        if (i == 95):\n            return i\n        if (i == 96):\n            return i\n        if (i == 97):\n            return i\n        if (i == 98):\n            return i\n        if (i == 99):\n            return i\n        if (i == 100):\n            return i\n        if (i == 101):\n            return i\n        if (i == 102):\n            return i\n        if (i == 103):\n            return i\n        if (i == 104):\n            return i\n        if (i == 105):\n            return i\n        if (i == 106):\n            return i\n        if (i == 107):\n            return i\n        if (i == 108):\n            return i\n        if (i == 109):\n            return i\n        if (i == 110):\n            return i\n        if (i == 111):\n            return i\n        if (i == 112):\n            return i\n        if (i == 113):\n            return i\n        if (i == 114):\n            return i\n        if (i == 115):\n            return i\n        if (i == 116):\n            return i\n        if (i == 117):\n            return i\n        if (i == 118):\n            return i\n        if (i == 119):\n            return i\n        if (i == 120):\n            return i\n        if (i == 121):\n            return i\n        if (i == 122):\n            return i\n        if (i == 123):\n            return i\n        if (i == 124):\n            return i\n        if (i == 125):\n            return i\n        if (i == 126):\n            return i\n        if (i == 127):\n            return i\n        if (i == 128):\n            return i\n        if (i == 129):\n            return i\n        if (i == 130):\n            return i\n        if (i == 131):\n            return i\n        if (i == 132):\n            return i\n        if (i == 133):\n            return i\n        if (i == 134):\n            return i\n        if (i == 135):\n            return i\n        if (i == 136):\n            return i\n        if (i == 137):\n            return i\n        if (i == 138):\n            return i\n        if (i == 139):\n            return i\n        if (i == 140):\n            return i\n        if (i == 141):\n            return i\n        if (i == 142):\n            return i\n        if (i == 143):\n            return i\n        if (i == 144):\n            return i\n        if (i == 145):\n            return i\n        if (i == 146):\n            return i\n        if (i == 147):\n            return i\n        if (i == 148):\n            return i\n        if (i == 149):\n            return i\n        if (i == 150):\n            return i\n        if (i == 151):\n            return i\n        if (i == 152):\n            return i\n        if (i == 153):\n            return i\n        if (i == 154):\n            return i\n        if (i == 155):\n            return i\n        if (i == 156):\n            return i\n        if (i == 157):\n            return i\n        if (i == 158):\n            return i\n        if (i == 159):\n            return i\n        if (i == 160):\n            return i\n        if (i == 161):\n            return i\n        if (i == 162):\n            return i\n        if (i == 163):\n            return i\n        if (i == 164):\n            return i\n        if (i == 165):\n            return i\n        if (i == 166):\n            return i\n        if (i == 167):\n            return ",
        "test": "assert     find_lucas(2) == 1",
        "num_ids": 2435,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_\n",
        "test": "assert     add_string([1, 2, 3, 4], \"s1\") == [1, 2, 3, 4], \"add string failed\"",
        "num_ids": 2421,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = {}\n    for i in l1:\n        d1.update(i)\n    for i in l2:\n        d1.update(i)\n    for i in l3:\n        d1.update(i)\n    return d1\n",
        "test": "assert     convert_list_dictionary([5, 3, 9, 2, 1], [7, 9, 5], [1, 3, 8, 3, 4]) == [",
        "num_ids": 624,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n % 2 == 0:\n        return get_max_sum(n/2) + get_max_sum(n/2)\n    elif n % 3 == 0:\n        return get_max_sum(n/3) + get_max_sum(n/3) + get_max_sum(n/3)\n    elif n % 4 == 0:\n        return get_max_sum(n/4) + get_max_sum(n/4) + get_max_sum(n/4)\n    elif n % 5 == 0:\n        return get_max_sum(n/5) + get_max_sum(n/5) + get_max_sum(n/5) + get_max_sum(n/5)\n    else:\n        return get_max_sum(n-1)\n",
        "test": "assert     get_max_sum(0) == 0",
        "num_ids": 2485,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(str(i)) > max_length:\n            max_length = len(str(i))\n    return max_length\n",
        "test": "assert     max_length_list([]) == 0, \"The function should return 0\"",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if i in test_tup:\n            return False\n    return True\n",
        "test": "assert     check_distinct((2, 2, 2, 2)) == False, \"Tuple contains duplicate values\"",
        "num_ids": 2481,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    character_list = []\n    for x in str1:\n        if x not in character_list:\n            character_list.append(x)\n        else:\n            continue\n    return character_list[0]\n",
        "test": "assert     first_non_repeating_character('a') == 'a', 'First non repeating character should be a.'",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string[0:1] == string[-1:]:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_char('e') == True",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    if b<a and b<c:\n        return b\n    return c\n    \n    \n    \n    ",
        "test": "assert     median_numbers(1,1,1) == 1",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(list(map(int, nums)))\n",
        "test": "assert     sum_of_digits([9,5,7,0,3,2]) == sum_of_digits([9,5,7,0,3,2]), \"Second Test failed\"",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # check the type of input\n    assert isinstance(test_tup1, tuple), \"tup1 should be a tuple\"\n    assert isinstance(test_tup2, tuple), \"tup2 should be a tuple\"\n    assert isinstance(test_tup2[0], int), \"tup2[0] should be an int\"\n    # get the length of the tuples\n    n1 = len(test_tup1)\n    n2 = len(test_tup2)\n    # construct the result by taking the inversion of the result\n    # this is the inverse of the result of the inversion\n    result = 0\n    for i in range(n1):\n        result = result ^ (test_tup1[i] ^ test_tup2[i])\n    return result\n",
        "test": "assert     bitwise_xor(test_tup1, test_tup2) == (test_tup1[0] ^ test_tup2[0])",
        "num_ids": 2884,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_tuple = set(test_list)\n    #print(len(unique_tuple))\n    return len(unique_tuple)\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    assert type(test_tup1) == tuple, \"Argument test_tup1 should be a tuple.\"\n    assert type(test_tup2) == tuple, \"Argument test_tup2 should be a tuple.\"\n    test_tup1_len = len(test_tup1)\n    test_tup2_len = len(test_tup2)\n    result = []\n    for i in range(0,test_tup1_len):\n        for j in range(0,test_tup2_len):\n            result.append(test_tup1[i] + test_tup2[j])\n    return result\n",
        "test": "assert     add_nested_tuples((1,2), (3,5)) == (6,6)",
        "num_ids": 733,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \ndef mean(a,b):\n    '''\n    Write a python function to find the mean of two numbers.\n    '''\n    return (a+b)/2\n    \ndef median(a,b):\n    '''\n    Write a python function to find the median of two numbers.\n    '''\n    return (a+b)/2\n    \ndef mode(a,b):\n    '''\n    Write a python function to find the mode of two numbers.\n    '''\n    num=a+b\n    count=0\n    for i in range(num):\n        if(a==a):\n            count+=1\n        elif(a==b):\n            count+=1\n        else:\n            pass\n    if(count>0):\n        return a\n    elif(count<0):\n        return b\n    else:\n        return \"NaN\"\n    \ndef variance(a,b):\n    '''\n    Write a python function to find the variance of two numbers.\n    '''\n    return sum(((a-mean(a,b))**2))/len(a)\n    \ndef standard_deviation(a,b):\n    '''\n    Write a python function to find the standard deviation of two numbers.\n    '''\n    return (sum(((a-mean(a,b))**2)))/len(a)\n    \ndef standard_error(a,b):\n    '''\n    Write a python function to find the standard error of two numbers.\n    '''\n    return (sum(((a-mean(a,b))**2)))/len(a)**0.5\n    \ndef quantile(a,b):\n    '''\n    Write a python function to find the quantile of two numbers.\n    '''\n    return (a+b)/2\n    \ndef quartile(a,b):\n    '''\n    Write a python function to find the quantile of two numbers.\n    '''\n    return (a+b)/2\n    \ndef quartile_range(a,b):\n    '''\n    Write a python function to find the range of quartiles.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    x.sort()\n    x.append(x[0])\n    x.append(x[-1]-x[0]-1)\n    return x\n    \ndef r_skewness(a,b):\n    '''\n    Write a python function to find the skewness of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/(((a-b)**2)**0.5))\n    return y\n    \ndef skew(a,b):\n    '''\n    Write a python function to find the skewness of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/((((a-b)**2)**0.5)))\n    return y\n    \ndef kurtosis(a,b):\n    '''\n    Write a python function to find the kurtosis of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/(((a-b)**2)**0.5))\n    return y\n    \ndef z_score(a,b):\n    '''\n    Write a python function to find the z-score of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append((((a-mean(a,b))**2)/(((a-b)**2)**0.5)))\n    return y\n    \ndef scale(a,b):\n    '''\n    Write a python function to find the scale of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/(((a-b)**2)**0.5))\n    return y\n    \ndef skewness(a,b):\n    '''\n    Write a python function to find the skewness of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/((((a-b)**2)**0.5)))\n    return y\n    \ndef kurtosis(a,b):\n    '''\n    Write a python function to find the kurtosis of two numbers.\n    '''\n    x=[]\n    x.append(a)\n    x.append(b)\n    y=[]\n    y.append(a)\n    y.append(b)\n    y.append(((a-mean(a,b))**2)/(((a-b)**2)**0.5))\n    return y\n    \ndef box_cox(a,b):\n    '''\n    Write a python function to find the box-cox coefficient of two numbers.\n    '''\n    y=[]\n    y.append(a)\n    y.append(b)\n    x=[]\n    x.append(a)\n    x.append(b)\n    x.append(y)\n    \n    \n    return ",
        "test": "assert     minimum(1,3) == 1",
        "num_ids": 547,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    '''\n    for loop to check whether the tuple is of length two\n    '''\n    for i in range(0,len(tuplex)): \n        if(tuplex[i] == tuple1): \n            print(\"The element in the tuple is present in the tuple.\") \n            return True\n    print(\"The element in the tuple is not present in the tuple.\") \n    return False \n",
        "test": "assert     check_tuplex(('abc', 'ab', 'abc'), ('abc', 'ab', 'abc')) == False",
        "num_ids": 538,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) == 0\n",
        "test": "assert     find_Parity(7) == False",
        "num_ids": 197,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return n%10+n//10*10\n",
        "test": "assert     rearrange_bigger(0) == 0",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Your code here\n    arr1 = nums1\n    arr2 = nums2\n",
        "test": "assert     k_smallest_pairs([10, 3, 5, 7], [3, 6, 8, 11], 1) == [3, 5, 7, 10, 11]",
        "num_ids": 1316,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(map(lambda x: (x[0],x[1]),list1))\n",
        "test": "assert     min_product_tuple([]) == (0, 0, 0, 0, 0)",
        "num_ids": 669,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = 0\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n",
        "test": "assert     min_val([0,0,0,0]) == 0.0",
        "num_ids": 441,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    capitalized = word.title()\n    first_cap = capitalized.capitalize()\n    result = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', first_cap)\n    return result\n",
        "test": "assert     snake_to_camel(\"PYTHON\") == \"Python\"",
        "num_ids": 501,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    res = []\n    for i in l:\n        if i % 2 == 1:\n            res.append(i)\n    return res\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if len(list1) == 0:\n        return None\n    if n == 0:\n        return list1[0]\n    if n < 0:\n        return extract_nth_element(list1, n * -1)\n    return list1[n]\n",
        "test": "assert     extract_nth_element(['one', 'two', 'three'], 1) == 'two'",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping([1, 2, 3, 4, 5, 6], [1, 2, 3])==True, 'Overlapping is not correct'",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = 0\n",
        "test": "assert     max_Product([-1, 4, -5, 10]) == max_Product([-5, 10]), 'Incorrect result'",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        return []\n    else:\n        result = []\n        for i in range(len(Input)):\n            for j in range(i + 1, len(Input)):\n                if Input[i] == Input[j]:\n                    result.append(Input[i])\n        return result\n",
        "test": "assert     group_tuples([(1,2), (1,3)]) == []",
        "num_ids": 438,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    largest = 0\n    for i in range(len(lst)):\n        if lst[i] > largest:\n            largest = lst[i]\n    return largest\n",
        "test": "assert     Find_Max([]) == 0",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 419,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for item in list1:\n        total += item\n    return total\n",
        "test": "assert     round_and_sum([]) == 0",
        "num_ids": 739,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    if n < 1: \n        return 0\n    if n == 1: \n        return 1\n    return n * cube_Sum(n - 1) \n \n # Test the program \nprint(cube_Sum(6)) \n",
        "test": "assert     cube_Sum(10) == 75, \"cube_Sum : Expected result : %d, Actual result : %d\" %(75, cube_Sum(10))",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_tup = tuple(test_tup)\n    return test_tup\n",
        "test": "assert     concatenate_tuple((1,2,3,4)) == (1,2,3,4)",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i\n    average = sum / n\n    return average\n",
        "test": "assert     find_Average_Of_Cube(3) == 1",
        "num_ids": 386,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_tuple = list(test_tuple)\n    for index, element in enumerate(test_tuple):\n        if element == 'Rear':\n            test_tuple[index] = test_tuple[index][1:]\n            break\n    return tuple(test_tuple)\n",
        "test": "assert         extract_rear(('a', 'b', 'c')) == ('a', 'b', 'c')",
        "num_ids": 486,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n",
        "test": "assert     count_element_in_list([1, 2, 3, [4, 5, 6], 7], 1) == 1",
        "num_ids": 466,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    filtered_list = []\n    filtered_nums = []\n    for num in nums:\n        if num % 2!= 0:\n            filtered_nums.append(num)\n    for num in filtered_nums:\n        filtered_list.append(num)\n    return filtered_list\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5]), \"Result of filter_oddnumbers should be an empty list.\"",
        "num_ids": 443,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    if dt[-2:] == '-02':\n        return dt[:7] + '-' + dt[8:10] + '-' + dt[3:5] + '-' + dt[0:4] +'' + dt[12:]\n    elif dt[-2:] == '-01':\n        return dt[:7] + '-' + dt[8:10] + '-' + dt[3:5] + '-' + dt[0:4] +'' + dt[12:] + '-' + dt[14:16]\n    elif dt[-2:] == '-00':\n        return dt[:7] + '-' + dt[8:10] + '-' + dt[3:5] + '-' + dt[0:4] +'' + dt[12:] + '-' + dt[14:18]\n    else:\n        return dt[:7] + '-' + dt[8:10] + '-' + dt[3:5] + '-' + dt[0:4] +'' + dt[12:] + '-' + dt[14:20]\n",
        "test": "assert     change_date_format(dt) == dt.strftime('%d-%m-%Y')",
        "num_ids": 873,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while my_list[j] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n",
        "test": "assert         shell_sort([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6], 'This test should be failed.'",
        "num_ids": 2653,
        "indeed": false
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n",
        "test": "assert     and_tuples(and_tuples(2, 2), 2) == 2",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (a*b)/(c)\n",
        "test": "assert     parabola_directrix(1,1,1) == 1",
        "num_ids": 2403,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    count = 0\n    for i in list1:\n        if i in list2:\n            count = count + 1\n    return count >= 1\n",
        "test": "assert     common_element([1,2,3], [1,2,3]) == True, \"Common Element Error\"",
        "num_ids": 459,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1==0:\n        return height\n    if base2==0:\n        return height\n    else:\n        return (base1+base2)/2\n",
        "test": "assert         median_trapezium(5,6,7) == 5.5",
        "num_ids": 433,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n",
        "test": "assert     check_greater([1,2,3,4,5,6,7,8,9], 4) == False",
        "num_ids": 264,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    for b in \"0123456789\":\n        if b in text:\n            return True\n    return False\n",
        "test": "assert         text_match_one(\"Hello\")==False",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n >= 10 :\n        return f'{n%10}'\n    else :\n        return f'{n%10}'\n    \n",
        "test": "assert ",
        "num_ids": 353,
        "indeed": false
    },
    {
        "number": 436,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in list1:\n        if i<0:\n            neg.append(-i)\n        else:\n            pass\n    return neg\n    #-------------------------------------#\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    counter = 0\n    n = len(str1)\n    for i in range(0, n):\n        if str1[i % 2] == 'o':\n            counter += 1\n    print(counter)\n    if counter % 2 == 1:\n        str1 = str1.replace('o', 'i')\n        print(str1)\n        return str1\n    return str1\n",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 2507,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] > test_list[j]:\n                count += 1\n    return count\n",
        "test": "assert     count_bidirectional([]) == 0",
        "num_ids": 479,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    M = L[0]\n    N = L[1]\n",
        "test": "assert     multiple_to_single([1,2,3,4,5]) == 12",
        "num_ids": 259,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    num_toks = len(text.split())\n    \n    first_adverb_index = None\n    first_adverb_position = None\n    for i in range(0,num_toks):\n        if text[i].lower() in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n            if first_adverb_index == None:\n                first_adverb_index = i\n                first_adverb_position = i\n            else:\n                if text[i].lower() == \"e\":\n                    first_adverb_index +=1\n                else:\n                    first_adverb_index +=1\n                    first_adverb_position = i\n                    break\n    return [first_adverb_index,first_adverb_position]\n",
        "test": "assert     find_adverb_position(\"The cat in the hat.\")",
        "num_ids": 1046,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l = float(l)\n    area = 0.5 * l * l\n    return area\n",
        "test": "assert     surfacearea_cube(0) == 0",
        "num_ids": 290,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = len(nums)\n    dp = [[0] * (n + 1) for i in range(n + 1)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(1, n + 1):\n        for j in range(1, i + 1):\n            if nums[i - 1] > j:\n                dp[i][j] = dp[i][j] + dp[i - 1][j - nums[i - 1]]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j - nums[i - 1]]\n    return dp[-1][-1]\n",
        "test": "assert         positive_count([1, 1, 2, 3, 3, 4, 4, 4, 4, 4]) == 2, \"the test case failed\"",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = list1[0]\n    for i in list1:\n        if i < 0:\n            max_neg = i\n    return max_neg\n        \ndef find_index(list1, num):\n    '''\n    Write a python function to return the index of the given element in the given list.\n    '''\n    for i in range(len(list1)):\n        if list1[i] == num:\n            return i\n    return None\n",
        "test": "assert     largest_neg([-1, 2, -3, -6, 4, -2]) == -2",
        "num_ids": 404,
        "indeed": true
    },
    {
        "number": 444,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    final_list = []\n    for i in range(len(test_list)):\n        if i < K:\n            final_list.append(test_list[i])\n        else:\n            break\n    return final_list\n",
        "test": "assert     trim_tuple([(1, 2, 3, 4, 5)], 4) == [(1, 2, 3, 4, 5)]",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]*i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef time_index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]*i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef index_div_rem(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef time_index_div_rem(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef index_div_rem_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_index_div_rem_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef index_and_rem_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_index_and_rem_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_mult(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]*i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef time_element_wise_mult(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise multiplication of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]*i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_div(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef time_element_wise_div(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_div_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_element_wise_div_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]/i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2)]\n    \ndef time_element_wise_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_div_first_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_element_wise_div_first_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_mod_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_element_wise_mod_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_rem_first_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_element_wise_rem_first_mod(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef element_wise_rem_first_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(test_tup1, test_tup2, 1)]\n    \ndef time_element_wise_rem_first_first(test_tup1, test_tup2):\n    '''\n    Write a function to perform element wise division of tuple elements in the given two tuples.\n    '''\n    \n    return [(i[0]%i[1]) for i in zip(tes",
        "test": "assert     index_multiplication(test_tup1, test_tup2) == (0, 10, 20, 30, 40, 50)",
        "num_ids": 783,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst = [item for item in lst if item!= None] \n    occ = 0\n    for i in tup: \n        if i in lst: \n            occ += 1\n    return occ\n",
        "test": "assert     count_Occurrence((1, 2, 3), [1, 2, 3]) == 1, \"wrong\"",
        "num_ids": 755,
        "indeed": true
    },
    {
        "number": 447,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for n in nums:\n        cubes.append(n**3)\n    return cubes\n",
        "test": "assert     cube_nums([]) == []",
        "num_ids": 339,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    while n>0:\n        s = s + n%10\n        n = n//10\n    return s\n",
        "test": "assert     cal_sum(0) == 0, 'cal_sum should be 0'",
        "num_ids": 247,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(len(str)):\n        if len(result)==l:\n            return ''.join(result)\n        elif i==len(str)-1:\n            result.append(str[i])\n        else:\n            result.append(str[i])\n            result.append(str[i+1])\n    return ''.join(result)\n",
        "test": "assert     extract_string('a', 1) == 'a'",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r\"\\s+\", \" \", text1).strip().lower()\n",
        "test": "assert         remove_whitespaces('')=='', f'Expected: \\'\\'\\', got: \\'\\'\\''",
        "num_ids": 439,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if sale_amount < actual_cost:\n        return 0\n    else:\n        return sale_amount-actual_cost\n",
        "test": "assert         loss_amount(200,1) == 0",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 453,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if (n == 1) : \n        return 1\n    for i in range(2, int(math.sqrt(n) + 1)) : \n        if (n % i == 0) : \n            return (i * (n//i)) \n    return n\ndef isSquare(n) : \n    '''\n    Write a python function that takes a number as input and \n    returns True if it is a square number and False otherwise.\n    '''\n    if (n == 1) : \n        return True\n    sqrt_n = math.sqrt(n)\n    if (n%sqrt_n==0) : \n        return isSquare(sqrt_n)\n    return False\ndef isSum(n,s):\n    '''\n    Write a python function that takes a number n and square s \n    and returns True if it is a sum of n, s, and False otherwise.\n    '''\n    if (s == 0) : \n        return False\n    if (s < 0) : \n        return False\n    for i in range(s,0,-1) : \n        if (n % i == 0) : \n            return False\n    return True\ndef sumofSquare(n) : \n    '''\n    Write a python function to find the sum of the squares of\n    the numbers in a list.\n    '''\n    if (n == 0) : \n        return 0\n    sqrt_n = math.sqrt(n)\n    sum = 0\n    for i in range(1,int(sqrt_n + 1)) : \n        sum += i * i\n    return sum\ndef isSumSquare(n):\n    '''\n    Write a python function that takes a number n as input\n    and returns True if it is a sum of squares of n, \n    False otherwise.\n    '''\n    if (n == 0) : \n        return True\n    sqrt_n = math.sqrt(n)\n    for i in range(1,int(sqrt_n + 1)): \n        if (n % i == 0) : \n            return False\n    return True\ndef sumofPos(n,i):\n    '''\n    Write a python function that takes a number n and\n    a positive integer i and returns the sum of the \n    nth positive integers.\n    '''\n    if (n == 0) : \n        return 0\n    if (n < 0) : \n        return 0\n    if (i == 0): \n        return 1\n    if (i < 0) : \n        return 0\n    return (n * sumofPos(n-i,i-1))\ndef isSumPos(n,i):\n    '''\n    Write a python function that takes a number n and\n    a positive integer i and returns the sum of the \n    nth positive integers.\n    '''\n    if (n == 0) : \n        return True\n    if (n < 0) : \n        return False\n    if (i == 0): \n        return False\n    if (i < 0): \n        return False\n    return True\ndef isPairSum(n,s):\n    '''\n    Write a python function that takes a number n and square s \n    and returns True if it is a pair of sum of n, s, \n    False otherwise.\n    '''\n    if (s == 0) : \n        return False\n    if (s < 0) : \n        return False\n    for i in range(0,int(math.sqrt(n))+1) : \n        if (n % i == 0) : \n            return False\n    return True\ndef pairSum(n,s):\n    '''\n    Write a python function that takes a number n and square s \n    and returns the pair sum of n, s, 0 if it is 0, or 1 otherwise.\n    '''\n    if (s == 0) : \n        return (0,0)\n    if (s < 0) : \n        return 0\n    a = math.sqrt(n)\n    b = int(a)\n    sum_a = sumofPos(n,a)\n    sum_b = sumofPos(n,b)\n    if (sum_a + sum_b <= (b * b) / 2) : \n        return pairSum(n,b)\n    return (sum_a,sum_b)\ndef sumofSquarePair(n):\n    '''\n    Write a python function that takes a number n as input\n    and returns the sum of the squares of the numbers in a list.\n    '''\n    if (n == 0) : \n        return 0\n    sqrt_n = math.sqrt(n)\n    sum = 0\n    for i in range(1,int(sqrt_n + 1)): \n        sum += (i*(i*i))\n    return sum\ndef isPairSumSquare(n):\n    '''\n    Write a python function that takes a number n as input\n    and returns the pair sum of n, s, 0 if it is 0, or 1 otherwise.\n    '''\n    if (n == 0) : \n        return True\n    if (n < 0) : \n        return False\n    a = math.sqrt(n)\n    b = int(a)\n    sum_a = sumofSquarePair(a)\n    sum_b = sumofSquarePair(b)\n    if (sum_a + sum_b <= (b * b) / 2) : \n        return isPairSum(n,b)\n    return isPairSum(n,a)\n",
        "test": "assert     sumofFactors(1) == 1",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text_split = re.split('z',text)\n    if(len(text_split) == 1):\n        return True\n    else:\n        for i in text_split:\n            if(i[0]!= \"z\"):\n                return True\n    return False\n",
        "test": "assert     text_match_wordz('1,2,3,4,5,6') == True",
        "num_ids": 418,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2%10 == 0:\n        return True\n    else:\n        return False\n    \n    \n",
        "test": "assert     check_monthnumb_number(2)==False",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # print('stringlist : ', stringlist)\n    i=0\n    l = len(stringlist)\n    \n    # for i in range(l):\n    #     print(stringlist[i],end=' ')\n    # print()\n",
        "test": "assert     reverse_string_list([1,2,3,4]) == [4,3,2,1]",
        "num_ids": 701,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if not lst: return None\n    min = lst[0] \n    for elm in lst[1:]: \n        if min > elm: \n            min = elm \n    return min\n    \n",
        "test": "assert     'Find_Min' in globals()",
        "num_ids": 485,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    #return l*b\n    return l*b/2\n",
        "test": "assert     rectangle_area(4,3) == 6",
        "num_ids": 182,
        "indeed": false
    },
    {
        "number": 459,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    for i in range(0,len(str2)-1):\n        if str2[i] >= 'A' and str2[i] <= 'z':\n            str2 = str2.replace(str2[i],'')\n    return str2\n",
        "test": "assert     remove_uppercase('hi') == 'Hi'",
        "num_ids": 308,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n",
        "test": "assert     Extract([1, 2, 3, 4]) == 1",
        "num_ids": 2359,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper()\n",
        "test": "assert     upper_ctr('Somedevac') == 'SOMEDEVAC'",
        "num_ids": 311,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for i in range(1, len(list1) + 1):\n        combinations.append(list1[:i])\n    return combinations\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    # If length of array is less than or equal to 1, return 0.\n    if n < 2:\n        return 0\n    \n    # Create array to store maximum product of product of the subarray.\n    max_product = [None]*n\n    \n    # Find the maximum subarray product.\n    for i in range(0, n):\n        max_product[i] = max(arr[i:])\n        \n    # Find the maximum product of subarray product.\n    for i in range(1, n):\n        max_product[i] = max(max_product[i-1] * arr[i], max_product[i-1] * arr[i] * arr[i])\n    \n    return max_product\n",
        "test": "assert     max_subarray_product([]) == 0",
        "num_ids": 726,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n not in dict.keys():\n        return False\n    if dict[n] is None:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_value({'a': 1, 'b': 2, 'c': 1, 'd': 2, 'e': 1, 'f': 2}, 3) == False",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key in dict1:\n        if dict1[key] == \"\":\n            del dict1[key]\n    return dict1\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 258,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    # Find the maximum product\n    max_product = arr[0]\n    for i in range(1, n):\n        temp = arr[i]*arr[i-1]\n        if temp > max_product:\n            max_product = temp\n    return max_product\n",
        "test": "assert     max_product([1]) == 1",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        return test_tup\n    \n    return (test_tup[0]+test_tup[1], test_tup[1]+test_tup[0])\n",
        "test": "assert     add_pairwise([1,2,3,4,5,6,7,8]) == (1,2,3,4,5,6,7,8), 'add_pairwise does not return the correct result'",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, n): \n        product *= arr[i] \n    return product\n",
        "test": "assert     find_remainder([1, 2, 3, 4], 5) == 15, \"incorrect result\"",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) <= 1: \n        return True \n    if len(l) % 2 == 0:\n        return False \n    if l[0] == l[len(l) - 1]: \n        return False \n    return check_Consecutive(l[0:int(len(l) / 2)]) \n",
        "test": "assert     check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == False, 'Expected \"False\" but got \"True\" for the Check Consecutive function'",
        "num_ids": 916,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    pass\n    #raise NotImplementedError",
        "test": "assert         tuple_intersection([1, 2], (4, 5)) == (4, 5)",
        "num_ids": 558,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr = ''\n    for c in str1:\n        if c == ch:\n            newstr += newch\n        else:\n            newstr += c\n    return newstr\n",
        "test": "assert     replace_char(\"gfg\",\"a\", \"s\") == \"gfg\"",
        "num_ids": 414,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # Your code here\n    return dict1\n",
        "test": "assert     sort_counter([(1,2),(3,4)]) == [ (1,2), (3,4) ]",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    s = 0\n    for n in nums:\n        s += n\n    return s\n",
        "test": "assert     big_sum([]) == 0, \"The function should return 0 as there are no elements.\"",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_string = string.lower()\n    print(lower_string)\n    return lower_string\n",
        "test": "assert     is_lower('aabbbcc') == 'aabbbcc'",
        "num_ids": 462,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(\" \", \"\").replace(\"-\", \"\")\n",
        "test": "assert     remove_lowercase('') == ''",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return (n%10)\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 170,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    # test your code here\n    list.sort()\n    odd=[]\n    for i in list:\n        if i%2==0:\n            odd.append(i)\n    return odd\n",
        "test": "assert     Split([1, 2, 3, 4, 5, 6, 7, 8]) == [2, 4, 6, 8]",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 555,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # code here\n    if n == 1 :\n        return 1\n    elif n == 0 :\n        return 0\n    elif n < 1 :\n        return None\n    else :\n        return difference(n-1) + difference(n-2)\n",
        "test": "assert     difference(0) == 0",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    # if A and N are both odd, return 0\n    if (A and N)!= (A and N):\n        return 0\n    # if A and N are both even, return 2\n    if (A and N) == (A and N):\n        return 2\n    # if A is even, return 1\n    if A % 2 == 0 :\n        return 1\n    # if A is odd, return 2\n    if A % 2 == 1 :\n        return 2\n    \n    # if A is odd and N is even, return 2\n    if A % 2 == 1 and N % 2 == 0 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 0 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    \n    # if A and N are both even, return 0\n    if A % 2 == 0 and N % 2 == 0 :\n        return 0\n    # if A and N are both odd, return 2\n    if A % 2 == 0 and N % 2 == 1 :\n        return 2\n    # if A is even, return 2\n    if A % 2 == 1 :\n        return 2\n    # if A is odd, return 2\n    if A % 2 == 0 :\n        return 2\n    \n    # if A is odd and N is even, return 2\n    if A % 2 == 0 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 0 and N % 2 == 0 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 0 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 0 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 1 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 0 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 1 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return 2\n    # if A is odd and N is odd, return 2\n    if A % 2 == 2 and N % 2 == 2 :\n        return ",
        "test": "assert     find_Odd_Pair( [2,4,8,16],3 ) == 2",
        "num_ids": 2350,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = \"\"\n    for char in string:\n        if char.upper() == char.lower():\n            new_string += char.upper()\n        else:\n            new_string += char.lower()\n    return new_string\n",
        "test": "assert     toggle_string('') == ''",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # create empty lists\n    dig_1 = []\n    dig_2 = []\n    dig_diff = []\n    \n    # get digit 1 as integer\n    digit_1 = n1 % 10\n    \n    # calculate difference between digit_1 and digit_2\n    for i in range(0, len(dig_1)):\n        digit_2 = digit_1 % 10\n        diff = digit_2 - digit_1\n        dig_1.append(diff)\n    \n    # sum of the diffs\n    sum = 0\n    for i in range(0, len(dig_1)):\n        sum += int(dig_1[i]) - int(dig_2[i])\n    \n    # return sum of differences\n    return sum\n",
        "test": "assert         digit_distance_nums(4, 4) == 0",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # your code goes here\n    s = 0\n    max_sum = 0\n    for i in range(len(a)):\n        max_sum += a[i]\n        if s < max_sum:\n            s = max_sum\n        if s >= size:\n            break\n        s += a[i]\n    return s\n",
        "test": "assert     max_sub_array_sum([], 1) == 0",
        "num_ids": 2832,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        tup1 = test_tup1\n        tup2 = test_tup2\n    elif len(test_tup2) > len(test_tup1):\n        tup2 = test_tup2\n        tup1 = test_tup1\n    else:\n        raise ValueError('Input tuple cannot be of the same type')\n",
        "test": "assert     union_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ('c', 'd', 'e', 'b', 'a', 'f')",
        "num_ids": 2599,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n",
        "test": "assert ",
        "num_ids": 510,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    while True:\n        if text[-2] == '\"':\n            return text[:-2].replace(\"'\", \"\").replace('\"', '')\n        else:\n            return text[:-1]\n    return \"\"\n",
        "test": "assert     extract_values(\"\\\"hello\\\\nworld\\\"\") == [\"hello\", \"world\"]",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    dict_count = {}\n    count = 0\n    for i in arr:\n        if i not in dict_count:\n            dict_count[i] = 1\n        else:\n            dict_count[i] += 1\n    for i in dict_count:\n        if dict_count[i]!= 1:\n            count+=1\n    return count\n",
        "test": "assert     count_Pairs([1,3,5,7,8,8,6,5], 5) == 2",
        "num_ids": 506,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    word = word.lower()\n    chars = []\n    j = 0\n    k = 0\n    while (j < len(word)):\n        if word[j] == word[k]:\n            chars.append(word[j])\n            j += 1\n            k += 1\n        else:\n            if k < len(word):\n                chars.append(word[j])\n                j += 1\n                k += 1\n            else:\n                chars.append(word[j])\n                j += 1\n    return chars\n",
        "test": "assert     split(\"\") == []",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 566,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    res = 0\n    while n > 0:\n        res += n%10\n        n = n//10\n    return res\n",
        "test": "assert     sum_digits(12) == 3",
        "num_ids": 334,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    n = len(list1)\n    for i in range(n-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([1,2,3,4,5]) == True",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # your code here\n    empty_list = []\n    for x in range(length):\n        empty_list.append({})\n    return empty_list\n",
        "test": "assert     empty_list(5)",
        "num_ids": 210,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for sublist in list1:\n        for i in range(len(sublist)):\n            if sublist[i] not in new_list:\n                new_list.append(sublist[i])\n    return new_list\n",
        "test": "assert     sort_sublists([['A', 'B', 'C'], ['D', 'E', 'F']]) == ['A', 'B', 'C', 'D', 'E', 'F']",
        "num_ids": 610,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # hint: https://www.hackerrank.com/challenges/py-set-difference/problem\n    res = set()\n    for num in nums:\n        if num not in res:\n            res.add(num)\n    return list(res)\n",
        "test": "assert     two_unique_nums([]) == []",
        "num_ids": 2553,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total_product = 0\n    for item in list_data:\n        total_product += item\n    return total_product\n",
        "test": "assert     unique_product(list_data), 'The input list does not contain unique numbers.'",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    #\n    return 0.5*r**2*h*(1.0-np.cos(np.pi*(r/h)))",
        "test": "assert     surfacearea_cylinder(0,2) == 0, \"should be 0\"",
        "num_ids": 280,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B and A[i:]!=B:\n            return False\n    return True\n",
        "test": "assert     is_Sub_Array([1,3,5,4,2,1,3,4,7], [2,2,2,2,2,2,2]) == False",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0: \n        print(\"Sorry, factorial does not exist for negative numbers\")\n        return \n    elif n==0: \n        return 1\n    elif n==1: \n        return n \n    elif n%2==0: \n        print(last_Digit_Factorial(n//2)) \n        return n//2\n    else: \n        print(n%2) \n        return n%2\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 404,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Base case\n    if len(list1)==len(list2)==len(list3):\n        return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n    else:\n        # Recursive case\n        if len(list3)>1:\n            return [list1[i] for i in range(len(list1))] + list3[:len(list3)-1] + [list2[i] for i in range(len(list2))] + list3[len(list3)-1:]\n        else:\n            return [list1[i] for i in range(len(list1))] + list2[:len(list2)-1] + list3[:len(list3)-1]\n        ",
        "test": "assert     interleave_lists([1,2,3], [4,5,6], [7,8,9]) == [1,2,3,4,5,6,7,8,9], 'incorrect'",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if test_tup1 is None or test_tup2 is None:\n        return None\n    lst1 = list(test_tup1)\n    lst2 = list(test_tup2)\n    lst3 = list(set(lst1) & set(lst2))\n    print(lst3)\n    return lst3",
        "test": "assert     find_dissimilar(test_tup1, test_tup2) == 3",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc(test_tuple)\n    test_tuple = list(test_tuple)\n    test_tuple.remove(0)\n    return tuple(test_tuple)\n",
        "test": "assert     even_ele(even_ele, even_fnc) == (\"\",\"\")",
        "num_ids": 601,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if s == 0:\n        return 0\n    elif s < 0:\n        return \"ERROR:height must be non-negative\"\n    elif (b%4 == 0 and b > 1) or (b%4 == 1 and b == 3):\n        return (4*s*(b/4))\n    elif (b%2 == 0 and b > 1) or (b%2 == 1 and b == 3):\n        return (s*(b/2))\n    elif (b%2 == 0 and b < 3) or (b%2 == 1 and b == 4):\n        return (2*s*(b/2))\n    elif (b%2 == 0 and b > 3) or (b%2 == 1 and b == 4):\n        return (3*s*(b/4))\n    else:\n        return \"ERROR:base edge should be odd or even\"\n",
        "test": "assert     surface_Area(7,7) == 0.5, \"Should be 0.5\"",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1==None:\n        return \"No dictionary provided\"\n    else:\n        return \"Empty dictionary\"\n",
        "test": "assert     my_dict({'x':1,'y':2,'z':3})",
        "num_ids": 273,
        "indeed": false
    },
    {
        "number": 583,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return num * catalan_number(num-1)\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 2261,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Your code here\n    # test case\n    # string = \"apple \" * 5 + \"battery\"\n    # expected = [8, 15]\n    # try:\n    #     adverbs = find_adverbs(string)\n    #     assert adverbs == expected\n    # except AssertionError as e:\n    #     print(e)\n    #     exit()\n    # try:\n    #     pattern = r'ly(?: \\w+ )?(?:blue|red|brown|green|blue|green|red|green|red|green|red|red|blue|green|green|red|green|blue|green|red|green|red|green|green|red|green|red|green|green|green|red|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|green|gree",
        "test": "assert     find_adverbs(\"Yyad\") == [\"Yyad\"]",
        "num_ids": 3048,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    heapq.heapify(h)\n    #num_items = len(items)\n    for i in range(n):\n        heapq.heappush(h,items[i])\n    return(h)\n",
        "test": "assert     expensive_items([1,1,1],3) == [1, 1, 1]",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) < n:\n        return l\n    else:\n        return l[:n] + l[n:]\n",
        "test": "assert     split_Arr(['a','b','c','d'], 3) == ['a','b','c','d']",
        "num_ids": 451,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    ",
        "test": "assert     list_tuple((1,2,3)) == (1,2,3)",
        "num_ids": 276,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    import math\n    import math\n    difference=[]\n    temp_difference=[]\n    temp_sum=0\n    for i in range(len(nums)):\n        temp_sum=temp_sum+nums[i]\n    temp_difference=temp_sum-temp_sum*(math.log(temp_sum,2))\n    for i in range(len(nums)):\n        difference.append(abs(temp_difference))\n    return difference\n",
        "test": "assert     big_diff([2, 1, 6, 8, 1, 7, 9]) == 9",
        "num_ids": 585,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    max_num = max(a, b)\n    min_num = min(a, b)\n    if max_num < min_num:\n        return (False)\n    elif max_num == min_num:\n        return (True)\n    elif max_num - min_num == 0:\n        return (True)\n    else:\n        return (False)\n",
        "test": "assert     perfect_squares(4, 4) == True",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    z = cmath.polar(x,y)\n    x_rect = z[0]\n    y_rect = z[1]\n    return x_rect,y_rect\n",
        "test": "assert     polar_rect(-3,-2) == (-3,2)",
        "num_ids": 400,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    newList.append(newList[-1])\n    newList.pop(-1)\n    newList.append(newList[0])\n    newList.pop(0)\n    \n    return newList\n    \n    \n    \nif __name__ == \"__main__\":\n    new_List = []\n    for _ in range(int(input())):\n        new_List.append(input())\n        \n    new_List = swap_List(new_List)\n    \n    print(new_List)\n",
        "test": "assert     swap_List([1, 2, 3, 4]) == [4, 1, 2, 3], \"test to check the correctness of swap_List\"",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s = 0\n    i = 1\n    while i < k:\n        s = s + ((n+i) * (n-i) * (n-i+1)) // i\n        i = i + 1\n    return s\ndef binomial_coeff(n,k):\n    '''\n    Function to calculate the product of the sum of consecutive binomial coefficients.\n    '''\n    s = 0\n    i = 1\n    while i < k:\n        s = s + ((n+i) * (n-i) * (n-i+1)) // i\n        i = i + 1\n    return s\ndef main(): \n    n = int(input(\"Enter the number of terms in the series: \"))\n    k = int(input(\"Enter the number of coeffieients in the series: \"))\n    print(\"The Sum of the Coefficients is: \", binomial_Coeff(n,k))\n    print(\"The product of the Coefficients is: \", binomial_coeff(n,k))\nmain()",
        "test": "assert     binomial_Coeff(5,2) == 0.25",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0+', '', ip)\n",
        "test": "assert     removezero_ip(\"21.22.23.45\") == \"21.22.23.45\"",
        "num_ids": 584,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1.sort()\n    return list1[1]-list1[0]\n",
        "test": "assert     diff_even_odd([1,3,2,2,1]) == 0",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n, m = len(str1), len(str2)\n    count = 0\n    i, j = 0, 0\n    while i < n or j < m:\n        if str1[i]!= str2[j]:\n            count += 1\n            i += 1\n            j += 1\n        else:\n            i += 1\n            j += 1\n    return count\n",
        "test": "assert     min_Swaps(\"111010\", \"101111\") == 3",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n",
        "test": "assert     tuple_size(()) == 0",
        "num_ids": 315,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # base case : arr1 and arr2 are sorted\n    if len(arr1) <= 1 or len(arr2) <= 1:\n        return arr1[k - 1]\n    # else kth element is maximum between arr1[0] and arr2[k-1]\n    if k == 1:\n        return max(arr1[0], arr2[0])\n    if arr1[0] <= arr2[0]:\n        # find the index of arr1[0]\n        left = 0\n        right = k-1\n    elif arr1[0] > arr2[0]:\n        # find the index of arr1[0]\n        left = k-1\n        # find the index of arr2[0]\n        right = 0\n    else:\n        # find the index of arr1[0]\n        left = 0\n        right = k-1\n    # find the maximum element at left index\n    while left < right:\n        mid = (left + right)//2\n        if arr1[mid] < arr2[mid]:\n            # arr1[mid] is smaller than arr2[mid]\n            # swap them\n            arr1[mid], arr2[mid] = arr2[mid], arr1[mid]\n            left = mid+1\n        elif arr1[mid] > arr2[mid]:\n            # arr1[mid] is larger than arr2[mid]\n            # swap them\n            arr2[mid], arr1[mid] = arr1[mid], arr2[mid]\n            right = mid-1\n        else:\n            # arr1[mid] equals arr2[mid]\n            # go up until both elements have to be swapped\n            while arr1[left] < arr2[mid]:\n                left += 1\n            while arr2[right] > arr1[left]:\n                right -= 1\n            # swap them\n            arr1[left], arr2[right] = arr2[right], arr1[left]\n    return arr1[right]\n",
        "test": "assert     find_kth([1, 3], [1, 2], 2) == 1",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 1:\n        return True\n    else:\n        return number == sum([number//10, number%10])\n",
        "test": "assert     armstrong_number(3) == True",
        "num_ids": 445,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number <= 0:\n        print('Error: Invalid Input')\n        return\n    elif number == 1:\n        return number\n    elif number == 2:\n        return number\n    elif number > 2:\n        return sum(range(1, number)) / number\n",
        "test": "assert sum_average(2) == 2.0",
        "num_ids": 397,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False\n",
        "test": "assert     is_Even(4) == True",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Initiate an empty list that will contain repeated characters\n    repeated_list = []\n    \n    # Loop through the characters in the given string\n    for char in str1:\n        # If the character is repeated, append it to the list\n        if char in repeated_list:\n            continue\n        else:\n            repeated_list.append(char)\n    # If there is no repeated character return -1\n    if len(repeated_list) == 0:\n        return -1\n    else:\n        return repeated_list[0]\n",
        "test": "assert     first_repeated_char(\"ab\") == \"a\"",
        "num_ids": 498,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 1\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 6\n    if n == 9:\n        return 7\n    if n == 10:\n        return 8\n    if n == 11:\n        return 9\n    if n == 12:\n        return 10\n    if n == 13:\n        return 11\n    if n == 14:\n        return 12\n    if n == 15:\n        return 13\n    if n == 16:\n        return 14\n    if n == 17:\n        return 15\n    if n == 18:\n        return 16\n    if n == 19:\n        return 17\n    if n == 20:\n        return 18\n    if n == 21:\n        return 19\n    if n == 22:\n        return 20\n    if n == 23:\n        return 21\n    if n == 24:\n        return 22\n    if n == 25:\n        return 23\n    if n == 26:\n        return 24\n    if n == 27:\n        return 25\n    if n == 28:\n        return 26\n    if n == 29:\n        return 27\n    if n == 30:\n        return 28\n    if n == 31:\n        return 29\n    if n == 32:\n        return 30\n    if n == 33:\n        return 31\n    if n == 34:\n        return 32\n    if n == 35:\n        return 33\n    if n == 36:\n        return 34\n    if n == 37:\n        return 35\n    if n == 38:\n        return 36\n    if n == 39:\n        return 37\n    if n == 40:\n        return 38\n    if n == 41:\n        return 39\n    if n == 42:\n        return 40\n    if n == 43:\n        return 41\n    if n == 44:\n        return 42\n    if n == 45:\n        return 43\n    if n == 46:\n        return 44\n    if n == 47:\n        return 45\n    if n == 48:\n        return 46\n    if n == 49:\n        return 47\n    if n == 50:\n        return 48\n    if n == 51:\n        return 49\n    if n == 52:\n        return 50\n    if n == 53:\n        return 51\n    if n == 54:\n        return 52\n    if n == 55:\n        return 53\n    if n == 56:\n        return 54\n    if n == 57:\n        return 55\n    if n == 58:\n        return 56\n    if n == 59:\n        return 57\n    if n == 60:\n        return 58\n    if n == 61:\n        return 59\n    if n == 62:\n        return 60\n    if n == 63:\n        return 61\n    if n == 64:\n        return 62\n    if n == 65:\n        return 63\n    if n == 66:\n        return 64\n    if n == 67:\n        return 65\n    if n == 68:\n        return 66\n    if n == 69:\n        return 67\n    if n == 70:\n        return 68\n    if n == 71:\n        return 69\n    if n == 72:\n        return 70\n    if n == 73:\n        return 71\n    if n == 74:\n        return 72\n    if n == 75:\n        return 73\n    if n == 76:\n        return 74\n    if n == 77:\n        return 75\n    if n == 78:\n        return 76\n    if n == 79:\n        return 77\n    if n == 80:\n        return 78\n    if n == 81:\n        return 79\n    if n == 82:\n        return 80\n    if n == 83:\n        return 81\n    if n == 84:\n        return 82\n    if n == 85:\n        return 83\n    if n == 86:\n        return 84\n    if n == 87:\n        return 85\n    if n == 88:\n        return 86\n    if n == 89:\n        return 87\n    if n == 90:\n        return 88\n    if n == 91:\n        return 89\n    if n == 92:\n        return 90\n    if n == 93:\n        return 91\n    if n == 94:\n        return 92\n    if n == 95:\n        return 93\n    if n == 96:\n        return 94\n    if n == 97:\n        return 95\n    if n == 98:\n        return 96\n    if n == 99:\n        return 97\n    if n == 100:\n        return 98\n    if n == 101:\n        return 99\n    if n == 102:\n        return 100\n    if n == 103:\n        return 101\n    if n == 104:\n        return 102\n    if n == 105:\n        return 103\n    if n == 106:\n        return 104\n    if n == 107:\n        return 105\n    if n == 108:\n        return 106\n    if n == 109:\n        return 107\n    if n == 110:\n        return 108\n    if n == 111:\n        return 109\n    if n == 112:\n        return 110\n    if n == 113:\n        return 111\n    if n == 114:\n        return 112\n    if n == 115:\n        return 113\n    if n == 116:\n        return 114\n    if n == 117:\n        return 115\n    if n == 118:\n        return 116\n    if n == 119:\n        return 117\n    if n == 120:\n        return 118\n    if n == 121:\n        return 119\n    if n == 122:\n        return 120\n    if n == 123:\n        return 121\n    if n == 124:\n        return 122\n    if n == 125:\n        return 123\n    if n == 126:\n        return 124\n    if n == 127:\n        return 125\n    if n == 128:\n        return 126\n    if n == 129:\n        return 127\n    if n == 130:\n        return 128\n    if n == 131:\n        return 129\n    if n == 132:\n        return 130\n    if n == 133:\n        return 131\n    if n == 134:\n        return 132\n    if n == 135:\n        return 133\n    if n == 136:\n        return 134\n    if n == 137:\n        return 135\n    if n == 138:\n        return 136\n    if n == 139:\n        return 137\n    if n == 140:\n        return 138\n    if n == 141:\n        return 139\n    if n == 142:\n        return 140\n    if n == 143:\n        return 141\n    if n == 144:\n        return 142\n    if n == 145:\n        return 143\n    if n == 146:\n        return 144\n    if n == 147:\n        return 145\n    if n == 148:\n        return 146\n    if n == 149:\n        return 147\n    if n == 150:\n        return 148\n    if n == 151:\n        return 149\n    if n == 152:\n        return 150\n    if n == 153:\n        return 151\n    if n == 154:\n        return 152\n    if n == 155:\n        return 153\n    if n == 156:\n        return 154\n    if n == 157:\n        return 155\n    if n == 158:\n        return 156\n    if n == 159:\n        return 157\n    if n == 160:\n        return 158\n    if n == 161:\n        return 159\n    if n == 162:\n        return 160\n    if n == 163:\n        return 161\n    if n == 164:\n        return 162\n    if n == 165:\n        return 163\n    if n == 166:\n        return 164\n    if n == 167:\n        return 165\n    if n == 168:\n        return 166\n    if n == 169:\n        return 167\n    if n == 170:\n        return 168\n    if n == 171:\n        return 169\n    if n == 172:\n        return 170\n    if n == 173:\n        return 171\n    if n == 174:\n        return 172\n    if n == 175:\n        return 173\n    if n == 176:\n        return 174\n    if n == 177:\n        return 175\n    if n == 178:\n        return 176\n    if n == 179:\n        return 177\n    if n == 180:\n        return 178\n    if n == 181:\n        return 179\n    if n == 182:\n        return 18",
        "test": "assert     get_ludic(3) == 1",
        "num_ids": 2293,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n",
        "test": "assert     reverse_words('word') == 'word'",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    if num == 2:\n        return True\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(16) is False",
        "num_ids": 310,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree * (math.pi / 180)\n    return degree\n",
        "test": "assert     radian_degree(0) == 0.0",
        "num_ids": 578,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = pattern.replace('[^\\w]','')\n    # Get the pattern as a list of characters\n    pattern = pattern.split()\n",
        "test": "assert     find_literals(\"hello world\", \"llo\") == (0, 4, 4)",
        "num_ids": 1373,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n_be_bell = [i for i in range(1,n+1)]\n    n_be_bell.insert(0,0)\n    print(\"Be-Bell number:\", n_be_bell)\n    i = n_be_bell.index(max(n_be_bell))\n    print(\"Nth_Be_Bell_Number:\",i)\n    \n    return n_be_bell[i]\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 361,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    kth = int(len(list1) / 2)\n    return [l for i, l in enumerate(list1) if i!= kth]\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 0) == [2,3,4,5], \"check kth element\"",
        "num_ids": 2548,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if len(test_list) == 0:\n        return 0\n    if N == 1:\n        return test_list[0][N-1]\n    if N == 2:\n        return max(test_list[0][0], max(test_list[1][N-2], test_list[1][N-1]))\n    \n    for i in range(N):\n        # 1. Check if there is a element in the ith row\n        # 2. Check if there is a element in the ith column\n        # 3. If there is a element, then compare it with the max element\n        # 4. Else\n        if test_list[i][N-1] > test_list[i][N-2]:\n            return test_list[i][N-1]\n        elif test_list[i][N-1] > test_list[i][N-2]:\n            return test_list[i][N-2]\n        elif test_list[i][N-1] < test_list[i][N-3]:\n            return max(test_list[i][N-1], test_list[i][N-2], test_list[i][N-3])\n        elif test_list[i][N-1] < test_list[i][N-4]:\n            return max(test_list[i][N-2], test_list[i][N-3], test_list[i][N-4])\n",
        "test": "assert     max_of_nth([[3,2,4], [6,5,8], [9,3,6]], 2) == 6, \"The function max_of_nth returns 6.\"",
        "num_ids": 936,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        lst1 = lst[i]\n        lst2 = lst[(i+1)%len(lst)]\n        new_lst.append([lst1[0],lst2[0]])\n    return new_lst\n    \ndef merge_two_lists(lst1,lst2):\n    '''\n    Write a python function which takes two lists of integers, and returns the same list, but with the first element of each sublist and the second one in the second list.\n    '''\n    new_lst = []\n    for i in range(len(lst1)):\n        lst1_ele = lst1[i]\n        lst2_ele = lst2[i]\n        new_lst.append([lst1_ele,lst2_ele])\n    return new_lst\n    \ndef find_longest_comb(list1):\n    '''\n    Given a list of lists, returns the longest length of the longest list.\n    '''\n    longest_len = 0\n    for i in range(len(list1)):\n        longest_len = max(longest_len, len(list1[i]))\n    return longest_len\n    \ndef merge_the_tools(string, k):\n    '''\n    Given a string and an integer k, return a list of strings separated by at most k consecutive alphabetic letters. However, if there's no alphabetical substring of the input string, return an empty list.\n    '''\n    a = string.split(' ')\n    new_a = []\n    for i in range(len(a)):\n        new_a.append(a[i].lower())\n    new_a = list(set(new_a))\n    new_a = list(map(lambda x: x, new_a))\n    i=0\n    while (i < k):\n        a.append(a[i])\n        i+=1\n    for i in range(len(a)):\n        if i < k:\n            a[i] = a[i].capitalize()\n        else:\n            break\n    return a\n    \ndef is_palindrome(s):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a string that reads the same backward as forward.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_v2(s):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a string that reads the same backward as forward.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \ndef is_palindrome_v3(s):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a string that reads the same backward as forward.\n    '''\n    i,j = 0,len(s)-1\n    \n    while i < j:\n        if s[i]!= s[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n    \ndef is_palindrome_v4(s):\n    '''\n    Given a string, determine if it is a palindrome. A palindrome is a string that reads the same backward as forward.\n    '''\n    if s[::-1] == s:\n        return True\n    else:\n        return False\n",
        "test": "assert     merge([[1, 2], [3, 4]])!= [[1, 2, 3, 4], [1, 2, 3, 4]]",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumm_sum = 0\n    for item in test_list:\n        cumm_sum += item[1]\n    return cumm_sum\n",
        "test": "assert     cummulative_sum([]) == 0",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return list(map(lambda x: (sum(x)/len(x)), nums))\n",
        "test": "assert         average_tuple(((1,2), (3,4), (5,6), (7,8), (9,10))), (3.0, 6.0, 10.0)",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo = 0\n    i = 0\n    while i < len(test_tup1):\n        if test_tup1[i] % test_tup2[i] == 0:\n            modulo += test_tup1[i]\n            i += 1\n        else:\n            break\n    return modulo\n",
        "test": "assert         tuple_modulo(tuple_2, tuple_1) == (6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100)",
        "num_ids": 956,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    if d == 0 or steps == 0:\n        return 1\n    return min_Jumps(steps-1, d) + min_Jumps(steps-1, d-1)\n",
        "test": "assert     min_Jumps(1, 1) == 1",
        "num_ids": 643,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    length=len(nums1)\n    if len(nums2)>length:\n        print(\"Recieved a List greater than the length of the second list\")\n        return\n",
        "test": "assert         div_list([1,2,3], [2,3]) == [1,2], '2'",
        "num_ids": 2486,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    test_str = test_str.split()\n    test_str = test_str[::-1]\n    test_str =''.join(test_str)\n    return test_str\n",
        "test": "assert     move_num('') == ''",
        "num_ids": 443,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    res = 0\n    for i in range(len(a)):\n        for j in range(i,len(a)):\n            if (a[j] % a[i] == 0):\n                res += 1\n    return res\ndef range_subset(a,r,n):\n    '''\n    Write a function to find the subset of a that sums to exactly r.\n    '''\n    return range_subset_with_one(a,r,n+1,0,r)\ndef range_subset_with_one(a,r,n,sum,r0):\n    '''\n    Write a function to find the subset of a that sums to exactly r.\n    '''\n    if (sum == r0):\n        return [0,0]\n    if (sum < r0):\n        return [0,0]\n    if (sum > r):\n        return [0,0]\n    if (r < n):\n        if (sum + a[r] >= r):\n            return [a[r],r]\n        else:\n            return range_subset_with_one(a,r+1,n,sum+a[r],r0+1)\n    else:\n        if (sum + a[n] >= r):\n            return [a[n],n]\n        else:\n            return range_subset_with_one(a,0,n-1,sum+a[n],r0)",
        "test": "assert     largest_subset([]) == 0",
        "num_ids": 707,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l1 = len(arr1)\n    l2 = len(arr2)\n    if l1 == 0:\n        return None\n    if l2 == 0:\n        return None\n    if l1 == l2:\n        return (arr1[0] + arr2[0])/2\n    p = (l1 + l2)//2\n    # To use binary search, we need to find the middle point\n    if arr1[p] < arr2[p]:\n        return get_median(arr1, arr2, p + 1)\n    else:\n        return get_median(arr2, arr1, p - 1)\n",
        "test": "assert     get_median([3, 1, 5, 9, 2, 6], [2, 3, 5, 8, 9, 6], 3) == 2.5",
        "num_ids": 816,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #Implement Your Code Here\n    if len(nums) == 0:\n        return []\n",
        "test": "assert ",
        "num_ids": 453,
        "indeed": false
    },
    {
        "number": 624,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert     is_upper('hello') == 'HELLO'",
        "num_ids": 218,
        "indeed": true
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    for i in range(len(newList)): \n        newList[i], newList[0] = newList[0], newList[i] \n    \n    return newList\n",
        "test": "assert     swap_List([1, 2, 3]) == [3, 1, 2]",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1,r):\n        if r - (i*i) > r:\n            area = area + (r - (i*i))\n        else :\n            area = area + (r - (i*i))\n    return area\n",
        "test": "assert     triangle_area(0)==0.0, 'triangle_area is incorrect'",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    \n    if start == end:\n        return start\n    \n    if array[start] < array[end]:\n        # if start and end index of array are not in descending order\n        # then it means there is a gap\n        return find_First_Missing(array,start+1,end)\n    else:\n        # if start and end index of array are not in ascending order\n        # then it means there is a gap\n        return find_First_Missing(array,start,end-1)\n",
        "test": "assert     find_First_Missing([9,8,6,5,4,3,2,1],start=3) == 3, 'The function is incorrect'",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n",
        "test": "assert     replace_spaces(\"\") == \"\", \"replace_spaces('') returns ''\"",
        "num_ids": 355,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = list[:]\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            evens[i] = list[i]\n    return evens\n",
        "test": "assert     Split([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Test Case Failed\"",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = ele[1] + sub\n    if sub[0] > len(matrix) - 1 or sub[0] < 0:\n        return None\n    if matrix[sub[0]][sub[1]] == 0:\n        adjac(sub, adjac(sub, sub[0]))\n    return sub\n",
        "test": "assert     True, \"This function was not created for you, it's been modified to not be used for you.\"",
        "num_ids": 2653,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\").replace(\"-\",\"_\").replace(\".\",\"_\").replace(\"/\",\"_\").replace(\"$\",\"_\").replace(\"?\",\"_\").replace(\"!\",\"_\").replace(\";\",\"_\").replace(\":\",\"_\").replace(\"\\\"\",\"_\").replace(\"&\",\"_\").replace(\"@\",\"_\").replace(\"&\",\"_\")\n    return text\n",
        "test": "assert     replace_spaces('This is a test') == 'This_is_a_test'",
        "num_ids": 2424,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    new_list = []\n    for element in num_list:\n        if element!= 0:\n            new_list.append(element)\n    return new_list\n",
        "test": "assert     move_zero([]) == [], \"There should be no zeroes in the given list\"",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    ans=0\n    for i in range(len(arr)) :\n        ans+=arr[i]&arr[i]\n",
        "test": "assert     pair_xor_Sum([1,2,3,4],5) == 0",
        "num_ids": 434,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # heapsort is O(nlogn) where n is the number of elements\n    # O(nlogn)\n    # complexity is nlog(n)\n    # time complexity is O(nlogn)\n    # space complexity is O(n)\n    heap = []\n    for element in iterable:\n        heapq.heappush(heap, element)\n    return heap\n",
        "test": "assert     hq.heapify(iterable) == iterable",
        "num_ids": 2619,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    total_cost=0\n    if(sale_amount>0):\n        total_cost=sale_amount*actual_cost\n    else:\n        total_cost=0\n    if(total_cost==0):\n        return True\n    else:\n        return False\n",
        "test": "assert     noprofit_noloss(10,5) == 0",
        "num_ids": 1292,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 0.6215\n    b = (a*math.log(v/3.6)+38.75)\n    c = a*(math.log(t/400)+20)\n    d = (c*(t*2.23))/b\n    if d > 100:\n        return 100\n    else:\n        return round(d,1)\n",
        "test": "assert     wind_chill(5000, 25) == 0.0",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum([len(name) for name in sample_names if name[0].isupper()])\n",
        "test": "assert     sample_nam([]) == 0",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if len(items) == 1:\n        return items\n    for item in items:\n        if item[0] == '(' and item[-1] == ')':\n            left = items[:items.index(item)]\n            right = items[items.index(item)+1:]\n            right = right[:-1]\n            items = left + [item + right]\n            break\n    return items\n",
        "test": "assert     remove_parenthesis(\"()\") == \"()\", 'test_remove_parenthesis_errors'",
        "num_ids": 1965,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n % 4 == 3\n",
        "test": "assert     is_nonagonal(0) == False",
        "num_ids": 352,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    return re.search(r'z', text) is not None\n",
        "test": "assert     text_match_wordz_middle(\"z\") == True",
        "num_ids": 2379,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(len(input)): \n        for j in range(len(input) - i - 1): \n            if input[j] > input[j + 1]: \n                input[j], input[j + 1] = input[j + 1], input[j] \n    return input\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6,7,8,9,10], 0) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 1425,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = (test_tup[0]+test_dict['delta'], test_tup[1]+test_dict['theta'])\n    test_tup = (test_tup[0]+test_dict['alpha'], test_tup[1]+test_dict['gamma'])\n    test_tup = (test_tup[0]+test_dict['beta'], test_tup[1]+test_dict['gamma'])\n    test_tup = (test_tup[0]+test_dict['beta'], test_tup[1]+test_dict['beta'])\n    test_tup = (test_tup[0]+test_dict['gamma'], test_tup[1]+test_dict['gamma'])\n    test_tup = (test_tup[0]+test_dict['gamma'], test_tup[1]+test_dict['gamma'])\n    test_tup = (test_tup[0]+test_dict['beta'], test_tup[1]+test_dict['gamma'])\n    test_tup = (test_tup[0]+test_dict['beta'], test_tup[1]+test_dict['beta'])\n    test_tup = (test_tup[0]+test_dict['gamma'], test_tup[1]+test_dict['gamma'])\n    return test_tup\n",
        "test": "assert     add_dict_to_tuple(tuple('hello'), dict(name = 'Joe')) == tuple('hello'),\\",
        "num_ids": 1540,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    total = 0\n    row = len(cost)\n    col = len(cost[0])\n    for r in range(row):\n        for c in range(col):\n            if r == 0 and c == 0:\n                total += cost[r][c]\n            else:\n                total += cost[r][c] / cost[r-1][c]\n    return total\n",
        "test": "assert     maxAverageOfPath(cost_matrix) == expected_result",
        "num_ids": 842,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students.pop(max(students.keys()))\n    students.pop(min(students.keys()))\n    \n    return students\n",
        "test": "assert     filter_data({\"Bob\": (75, 100), \"Steve\": (83, 45), \"Rick\": (90, 75)}, 15, 15) == []",
        "num_ids": 912,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    n = len(nums1)\n    for i in range(n):\n        for j in range(n):\n            if nums1[i]!= nums2[j]:\n                return 1\n",
        "test": "assert     count_same_pair([2,2,3,1,1,4,2], [2,2,3,1,1,4,2]) == 1",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power_sum = 0\n    while power > 0:\n        if (power % base) == 0:\n            power_sum += power // base\n        power //= base\n    return power_sum\n",
        "test": "assert     power_base_sum(8, 9) == 0",
        "num_ids": 339,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_3(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_4(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_5(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_6(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_7(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_8(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_9(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_10(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_11(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_12(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_13(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_14(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n        elif char==\"\\r\":\n            result.append('\"')\n        else:\n            result.append(char)\n    return ''.join(result)\ndef extract_quotation_15(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result=[]\n    for char in text1:\n        if char=='\"':\n            result.append('\"')\n        elif char=='\"':\n            result.append(' \"')\n        elif char==\"\\n\":\n            result.append('\"')\n    ",
        "test": "assert     extract_quotation('The quick brown fox jumps over the lazy dog.') == 'The quick brown fox jumps over the lazy dog.'",
        "num_ids": 2308,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # YOUR CODE HERE\n    test_tup = test_tup[::-1]\n    t_1, t_2 = test_tup\n    n = len(t_1)\n    #print(t_1,t_2)\n    res = list(t_1)\n    for i in range(n-1):\n        res[i] = t_2[i] * t_1[i]\n    return tuple(res)\n",
        "test": "assert     multiply_elements((3,6,9,16,25)) == (3,12,15,27,33)",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum=[]\n    for i in range(len(lst1)):\n        sum.append(lst1[i]+lst2[i])\n    return sum\n",
        "test": "assert     sum_list(lst1=[], lst2=[]) == []",
        "num_ids": 588,
        "indeed": true
    },
    {
        "number": 730,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys(nums))\n",
        "test": "assert     consecutive_duplicates([1,1,1,2,2,3,3,3,3]) == [1, 2, 3]",
        "num_ids": 681,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (r*h)/(2*math.pi*(math.tan(math.pi*r)))\n",
        "test": "assert     lateralsurface_cone(0.1,0.1) == (0.582520226099817, 0.009835386418673875)",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    s=text.replace(' ',':')\n    s=s.replace(',','::')\n    s=s.replace('.','::')\n    s=s.replace('-','::')\n    s=s.replace('.','::')\n    return s\n",
        "test": "assert replace_specialchar(' ') == ':'",
        "num_ids": 6344,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    if len(A) == 1:\n        if A[0] == x:\n            return 0\n        else:\n            return -1\n    if A[0] == x:\n        return 0\n    mid = len(A)//2\n    if A[mid] == x:\n        return mid\n    if A[mid] < x:\n        return find_first_occurrence(A[mid+1:], x)\n    else:\n        return find_first_occurrence(A[:mid], x)\n",
        "test": "assert     find_first_occurrence([1, 2, 3, 1],1) == 0",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 734,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    sum_Prod = 0\n    prod = 1\n    curr_sum = 0\n    for i in range(1, n):\n        prod *= arr[i]\n        curr_sum += prod\n        sum_Prod += curr_sum\n    return sum_Prod\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    res = bin(n)[2:]\n    res = res.zfill(8)\n    print(f'Res: {res}')\n    return res\n",
        "test": "assert     set_middle_bits(1) == 0, 'Wrong Value for set_middle_bits function'",
        "num_ids": 2612,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    idx = bisect.bisect_left(a, x)\n    if idx == len(a):\n        return -1\n    else:\n        return idx\n",
        "test": "assert ",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 737,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0].lower() in ['a', 'e', 'i', 'o', 'u']:\n        return True\n    else:\n        return False\ndef is_vowel(string):\n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\ndef is_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant or not using regex.\n    '''\n    if re.search('[^aeiouAEIOU]', string):\n        return True\n    else:\n        return False\ndef is_consonant_consonant(string):\n    '''\n    Write a function to check whether the given string is starting with a consonant and the consonant and consonant and consonant or not using regex.\n    '''\n    if re.search(r'[aeiouAEIOU]', string):\n        return True\n    else:\n        if re.search('[^aeiouAEIOU]', string[::-1]):\n            return True\n        else:\n            return False\n",
        "test": "assert    check_str(['A', 'E', 'I', 'O', 'U']) == True",
        "num_ids": 559,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 256,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n < 0: \n        raise ValueError(\"Invalid number\")\n    if n <= 0: \n        return 0\n    if n == 1: \n        return 1\n",
        "test": "assert     find_Index(0) == 0",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(test_tup, test_tup[1:]))\n",
        "test": "assert     tuple_to_dict((1,2,3)) == {1:2, 2:3}",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return (s == s[::-1])\n",
        "test": "assert     all_Characters_Same(\"a\"), \"a is a\"",
        "num_ids": 461,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    # area of tetrahedron\n    a = side * (side - 1) / 2\n    print('The area of the tetrahedron with side length:', a, 'cm^2')\n    return a\n",
        "test": "assert     area_tetrahedron(4) == 6",
        "num_ids": 382,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) < 2:\n        return list\n    else:\n        return list[1:] + list[:1]\n",
        "test": "assert     rotate_right([5, 3, 2, 4], 1) == [3, 2, 4, 5], 'Rotate_right fail'",
        "num_ids": 608,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return (test_tup is None) or (len(test_tup) == 0)\n",
        "test": "assert     check_none(tuple())",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    #Finds all numbers divisible by the digits from startnum to endnum (inclusive)\n    digits = []\n    for i in range(startnum, endnum + 1):\n        if (i % 10 == 0):\n            digits.append(i)\n    #Returns the list of numbers divisible by every digit in the digits list\n    return digits\n",
        "test": "assert divisible_by_digits(21, 22) == 0",
        "num_ids": 690,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r > 0) and (a >= 0) and (a <= 360):\n        sector = r*a*math.sin(math.radians(a))\n        print(sector)\n    else:\n        print('invalid angle')\ndef sector_area_2(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r > 0) and (a >= 0) and (a <= 360):\n        sector = r*a*math.cos(math.radians(a))\n        print(sector)\n    else:\n        print('invalid angle')\n",
        "test": "assert     sector_area(0,0) == None #assertion in the function",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    l1 = len(X)\n    l2 = len(Y)\n    l3 = len(Z)\n",
        "test": "assert     lcs_of_three(\"abd\", \"bcd\", \"cde\") == \"cde\"",
        "num_ids": 820,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    pattern = re.compile('^\\w+[ \\-]+\\w+$')\n    return re.sub(pattern,'', str1)\n",
        "test": "assert     capital_words_spaces('We are a boy') == \"We are a boy\"",
        "num_ids": 1152,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    #Initialization\n    nums = []\n    \n    #Iterate the list\n    for num in nums_str:\n        \n        #Convert to number\n        num = int(num)\n        \n        #Append num to nums\n        nums.append(num)\n        \n    #Sort the list\n    nums.sort()\n    \n    #Return the list\n    return nums",
        "test": "assert ",
        "num_ids": 771,
        "indeed": true
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n",
        "test": "assert     add_tuple((1,2), (3,4)) == ((1,3), (2,4))",
        "num_ids": 2376,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < 0 or i >= len(arr):\n        return False\n    if arr[i] < arr[(i - 1) // 2]:\n        return False\n    return True\n",
        "test": "assert     check_min_heap_helper([3,4,1,2],0) == True",
        "num_ids": 680,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    elif n == 3: \n        return 2\n    elif n == 4: \n        return 3\n    elif n == 5: \n        return 4\n    elif n == 6: \n        return 5\n    elif n == 7: \n        return 6\n    elif n == 8: \n        return 7\n    elif n == 9: \n        return 8\n    elif n == 10: \n        return 9\n    elif n == 11: \n        return 10\n    elif n == 12: \n        return 11\n    elif n == 13: \n        return 12\n    elif n == 14: \n        return 13\n    elif n == 15: \n        return 14\n    else:\n        return None\n    \ndef isprime(n):\n    '''\n    Check if a number is prime.\n    https://www.geeksforgeeks.org/prime-number-examples-dp-dp-array/ \n    '''\n    if n == 0 or n == 1:\n        return False\n    if n%2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n%i == 0:\n            return False\n    return True\n",
        "test": "assert     isinstance(jacobsthal_num(4),int)",
        "num_ids": 4232,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum_k = []\n    count = 0\n    for i in test_list:\n        count += 1\n        if count < K:\n            minimum_k.append(i)\n    return minimum_k\n",
        "test": "assert     min_k([2,3,5,10,15], 3) == [2,3]",
        "num_ids": 784,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return [i for i in l1 if i in l2 and i in l3]\n",
        "test": "assert     extract_index_list([],[],[]) == []",
        "num_ids": 659,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n",
        "test": "assert     second_smallest([2, 2, 2, 3, 1, 4]) == 2, '2nd smallest number should be 2'",
        "num_ids": 662,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text = re.sub('\\s', '', text)\n    text = re.sub('\\b', '', text)\n    return text\n",
        "test": "assert     text_match_zero_one(\"b\") == \"b\"",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count_pair=0\n    if len(test_list)==1:\n        return 1\n    for i in range(len(test_list)-1):\n        if test_list[i]!=test_list[i+1]:\n            count_pair+=1\n    return count_pair\n",
        "test": "assert     count_reverse_pairs(['ab', 'baa', 'bbb', 'bbaa', 'baaab', 'baaabba', 'baabbbb', 'bbbbaa', 'baabbbbaa', 'bbbaabba']), \"expected count: 3, got 3\"",
        "num_ids": 2512,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    import collections\n    d=collections.Counter(list1)\n    return d\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 2491,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.isdigit():\n        return True\n    else:\n        return False\n",
        "test": "assert     is_decimal('A') == False, '''Error: is_decimal(\"A\") should return False'''",
        "num_ids": 433,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr) == 1:\n        return True\n    else:\n        for num in arr:\n            if num not in arr:\n                return False\n        return True\n",
        "test": "assert     unique_Element([1, 2, 3, 1, 2, 4, 2, 3, 1]) == True, \"test is not correct\"",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 <= 0 or monthnum3 >= 13:\n        raise ValueError(\"Number of months must be between 1 to 12.\")\n    return monthnum3 >= 31\n",
        "test": "assert         check_monthnumber_number(8) == False",
        "num_ids": 1165,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    # code here\n    min_diff = float('inf')\n    cur_diff = -1\n    i,j = 0,0\n    while i < n:\n        cur_diff = arr[i] - arr[j]\n        if cur_diff < min_diff:\n            min_diff = cur_diff\n            j = i\n        i = i + 1\n    \n    # code here\n",
        "test": "assert     find_min_diff([1,5,2,3,6,7,8,9], 10) == 1",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    ctr = 0\n    for c in str:\n        if c.isdigit():\n            ctr += 1\n    return ctr",
        "test": "assert     number_ctr('python')==0",
        "num_ids": 278,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0: \n        return True\n    if n == 1: \n        return True\n    else: \n        for i in range(1, n + 1): \n            if (i % 3 == 0): \n                return True\n            if (i % 2 == 0): \n                return False\n            if (i % 3 == 1 and i % 2 == 1): \n                return False\n    return False\n",
        "test": "assert     is_polite(99) == False     ",
        "num_ids": 2339,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i=1\n    lista=[]\n    while i<len(l1):\n        if l1[i]==l1[i-1]:\n            lista.append([l1[i-1],l1[i]])\n        i+=1\n    return lista\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 765,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                pairs_count += 1\n    return pairs_count\n",
        "test": "assert     get_pairs_count([2, 1, 2, 2, 3, 4, 5], 10) == 0",
        "num_ids": 444,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    return len(li1) - len(li2)\n",
        "test": "assert     Diff([\"abc\",1,2,\"abc\"],[\"ab\",\"cd\",\"ab\",\"bc\"]) == 0",
        "num_ids": 449,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if(n <= 0) : return 0\n    else : \n        return (n % 4) * (n % 4) + odd_num_sum(n - 1)\n",
        "test": "assert     odd_num_sum(5) == 25",
        "num_ids": 350,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    result = 0\n    for ch in exp:\n        if ch == '(':\n            stack.append(ch)\n        elif ch == ')':\n            top = stack.pop()\n            if top == '(':\n                result += 1\n            else:\n                result -= 1\n    return result == 0\n",
        "test": "assert     check_expression([]), \"Empty List\"",
        "num_ids": 840,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Write your code here\n    pass\n",
        "test": "assert     remove_length(\"one1two2three3\", 3) == \"one3\"",
        "num_ids": 504,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    res = []\n    pattern = pattern.strip()\n    pattern = pattern.replace(\".\", \"\")\n    pattern = pattern.replace(\" \", \"\")\n    pattern = pattern.replace(\"*\", \"\")\n    pattern = pattern.replace(\"(\", \"\")\n    pattern = pattern.replace(\")\", \"\")\n    pattern = pattern.replace(\",\", \"\")\n    pattern = pattern.replace(\"[\", \"\")\n    pattern = pattern.replace(\"]\", \"\")\n    pattern = pattern.replace(\"{\", \"\")\n    pattern = pattern.replace(\"}\", \"\")\n    pattern = pattern.replace(\"-\", \"\")\n    pattern = pattern.replace(\"+\", \"\")\n    pattern = pattern.replace(\"'\", \"\")\n    for word in text.split():\n        substring = pattern.replace(\"[a-zA-Z0-9]\", word)\n        if re.search(substring, text, re.IGNORECASE) is not None:\n            res.append(word)\n    return res\n",
        "test": "assert     occurance_substring( \"This is a string! All its occurrences are\", \"is\")",
        "num_ids": 1675,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    n = len(nums)\n    if n%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     odd_position([]), \"No Element in list\"",
        "num_ids": 331,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char.lower() in \"aeiou\":\n            count += 1\n    return count\n",
        "test": "assert     count_vowels(\"aab\") == 2",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    for i in arr:\n        if i not in arr:\n            total += i\n    return total\n",
        "test": "assert     find_sum([]) == 0",
        "num_ids": 2380,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Gives us a counter which is incremented by 1 whenever we encounter the element that is already in a sublist\n    counter = 1\n    # Creates a list to hold the sublists in which we are going to store sublists and sublists of their own\n    sublist = []\n    # Creates the initial sublist and sublist with its length to calculate the sublist size\n    sublist_size = len(list1)\n    # Checks for each element of the list to see if it is already in a sublist\n    for i in list1:\n        # Creates a counter that is incremented by 1 whenever a duplicate element is encountered\n        duplicate_counter = 0\n        # Iterates through the sublist and inserts each element into a new sublist\n        for j in sublist:\n            # Checks if the element is already in the sublist, if so, adds one to the duplicate counter\n            if i in j:\n                duplicate_counter += 1\n        # If the element has not been encountered yet, inserts it into the new sublist\n        if duplicate_counter == 0:\n            sublist.append([i])\n            # Increments the counter of each element that has already been encountered\n            duplicate_counter += 1\n        # If the element has already been encountered, append the element to the sublist\n        else:\n            # Adds the element to the sublist\n            sublist.append([i])\n            # Adds the duplicate counter to the sublist\n            sublist_size += 1\n            # Increments the duplicate counter by 1 to calculate the sublist size\n            duplicate_counter += 1\n            # If the sublist size is equal to the sublist size, the sublist has been already finished, so we have reached the end\n            if sublist_size == sublist_size:\n                # Adds the sublist of the length of the list to the sublist\n                sublist.append([])\n    # Returns the sublist with all duplicate elements\n    return sublist\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 3107,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for i in list1:\n        tuple_i = (i, 1)\n        unique_dict[tuple_i] = 0\n    return unique_dict\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 565,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    #returns the all combinations of sums that are of the given list\n    # Note: this function doesn't use an extra condition, but it uses the extra condition to check for duplicates\n    def combination_finder(comb_list,test):\n        #indicator: is it a duplicate (True) or not (False)\n        is_duplicate = False\n        for i in range(len(comb_list)):\n            for j in range(i,len(comb_list)):\n                if comb_list[i] + comb_list[j] in test:\n                    is_duplicate = True\n        if not is_duplicate:\n            comb_list.append(test)\n    for i in range(len(test_list)):\n        test = test_list[i]\n        combination_finder(test,test)\n    return comb_list\n",
        "test": "assert     find_combinations([1,3,5]) == [[1,3,5]]",
        "num_ids": 4599,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = []\n    for i in range(1, n+1) : \n        if n % i == 0 : \n            divisors.append(i) \n    return len(divisors) \n",
        "test": "assert     count_divisors(0) == False",
        "num_ids": 319,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odds = []\n    length = len(arr)\n    i = 0\n    while i < length:\n        if i % 2 == 0:\n            odds.append(arr[i])\n            i += 1\n        else:\n            if len(odds) == 0:\n                odds.append(0)\n            else:\n                odds.pop()\n    return sum(odds)\n",
        "test": "assert     odd_length_sum([]) == 0",
        "num_ids": 706,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0 and g == 0 and b == 0:\n        return 0, 0, 0\n    max_val = 255\n    h = max_val / max_val\n    s = 0.8\n    v = max_val\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0,0,0)",
        "num_ids": 1395,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return 0\n",
        "test": "assert     mul_even_odd([]) == 0, \"mul_even_odd check failed\"",
        "num_ids": 516,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str))\n",
        "test": "assert     tuple_str_int(('5', '6')) == (5, 6)",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    if low == len(a):\n        return len(a) - 1\n    else:\n        return low\n",
        "test": "assert right_insertion(a=[1, 2, 3, 4, 5], x=3) == 2",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    result = re.search(r'\\w+a{3}', text)\n    if result == None:\n        return False\n    else:\n        return True\n",
        "test": "assert not    text_match_three('This is a test')",
        "num_ids": 2444,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n",
        "test": "assert     new_tuple([1, 2, 3], ['a', 'b', 'c']) == (1, 2, 3)",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    lst = list(range(1,1001,2))\n    return all(e%2==0 for e in lst)\n",
        "test": "assert     even_position([1, 4, 9, 13]) == False",
        "num_ids": 328,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0], test_tup[1], test_tup[2]\n",
        "test": "assert     remove_nested((1, 2, 3)) == (1, 2, 3)",
        "num_ids": 471,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    return len(input_list)\n",
        "test": "assert     count_list([[1, 2, 3], [4, 5, 6]]), \"count_list() should return [[1, 2, 3], [4, 5, 6]]\"",
        "num_ids": 529,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = left + (right - left) // 2\n        if arr[mid] < x:\n            left = mid + 1\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            return mid\n    return right\n",
        "test": "assert ",
        "num_ids": 288,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    a = re.search(r'a\\s*\\b',text)\n    b = re.search(r'\\b\\s*a',text)\n    if b!= None:\n        b = b.group()\n        b = b.strip()\n        if a!= None:\n            print('Text startb/endb: '+b)\n        else:\n            print('Text startb/endb: '+text)\n    else:\n        print('Text startb/endb: '+text)\n    return\n",
        "test": "assert     text_starta_endb('abc') == 'aaab'",
        "num_ids": 563,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n",
        "test": "assert     return_sum({}) == 0",
        "num_ids": 344,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    # if l <= r, return 0\n    if n <= 0:\n        return 0\n    else:\n        # check if l <= x <= r, return 0\n        if n % 2 == 0:\n            return 0\n        else:\n            return n + sum_odd(n-1)\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 2273,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    ans = 0\n    for i in range(len(arr)):\n        ans += arr[i]\n    return ans\n",
        "test": "assert     _sum([]) == 0",
        "num_ids": 220,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    def do_left(n, d):\n        if d == 0:\n            return n\n        else:\n            return n & (n-1) >> d\n    def do_right(n,d):\n        if d == 0:\n            return n\n        else:\n            return n | (n<<d)\n    return do_right(do_left(n, d), d)\n",
        "test": "assert     left_rotate(3,1) == 3",
        "num_ids": 390,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('[\\n\\r]+', '', text)\n    return text\n",
        "test": "assert     remove_all_spaces('xyz') == 'xyz'",
        "num_ids": 323,
        "indeed": false
    },
    {
        "number": 801,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    assert len(x)==len(y)==len(z)\n    dict={}\n    for i in range(len(x)):\n        if x[i] in dict:\n            dict[x[i]]+=1\n        else:\n            dict[x[i]]=1\n    for k in dict:\n        if dict[k]==3:\n            return True\n    return False\n",
        "test": "assert     test_three_equal(2,2,2) == 0",
        "num_ids": 2855,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    s,n=0,len(arr)\n    while n:\n        if n & 1:\n            arr.append(arr.pop(0))\n        else:\n            arr.insert(0,arr.pop())\n        n = n >> 1\n        s += 1\n    return s\n",
        "test": "assert     count_rotation([1, 2, 3, 4, 5]) == 3, \"Test failed\"",
        "num_ids": 340,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return n == int(n**0.5)\n",
        "test": "assert     is_perfect_square(13) == False, \"13 is not a perfect square.\"",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # create an array of numbers\n    num = [int(i) for i in arr]\n    # create an array of products\n    prod = [i * j for i,j in zip(num,num[1:])]\n    # make a loop to iterate through the product\n    for i in range(len(prod)):\n        # if product is even\n        if prod[i] % 2 == 0:\n            # return True, if product is even\n            return True\n        # if product is not even\n        else:\n            # return False, if product is not even\n            return False\n    # if product is even then return False\n    # else return True\n",
        "test": "assert     is_product_even([2,4,6,8]) == True, \"is_product_even() failed\"",
        "num_ids": 534,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # your code here\n    pass",
        "test": "assert     max_sum_list([1,2,3]) == [1,2,3]",
        "num_ids": 380,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_char = 0\n    for char in test_str:\n        if char.isupper():\n            if max_char < len(char):\n                max_char = len(char)\n    return max_char\n",
        "test": "assert     max_run_uppercase('') == 0",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return 0\n",
        "test": "assert     first_odd([1, 2, 3, 4, 5]) == 1",
        "num_ids": 219,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K <= 0 or len(test_tup)!= K:\n        return False\n    return True\n",
        "test": "assert not check_K(('C', 'B', 'D'), 2)",
        "num_ids": 2382,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller([1, 2, 3], [1, 2, 3, 4, 5])",
        "num_ids": 574,
        "indeed": true
    }
]