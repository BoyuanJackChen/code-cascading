[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #print('test_tup1: {}'.format(test_tup1))\n    #print('test_tup2: {}'.format(test_tup2))\n    #print('test_tup1 == test_tup2?: {}'.format(test_tup1 == test_tup2))\n",
        "test": "assert ",
        "num_ids": 502
    },
    {
        "number": 3,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef is_prime(n):\n    '''\n    Write a python function to determine if a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_1(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef sum_of_digits(n):\n    '''\n    Write a python function to return sum of digits of a number.\n    '''\n    while n!= 0:\n        digit = n % 10\n        n = n // 10\n        return digit\ndef is_prime_factor_2(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_3(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_4(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_5(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_6(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_7(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_8(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_9(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_10(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_11(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_12(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_13(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_14(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_15(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    return True\ndef is_prime_factor_16(n):\n    '''\n    Write a python function to identify a number is prime or not.\n    '''\n    if n == 1:\n        return False\n    if n == 2 or n == 3:\n        return True\n",
        "test": "assert     is_not_prime(5) == True",
        "num_ids": 406
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # The idea is to keep the heap with the numbers in descending order\n    # We'll store the largest, but we'll need to keep track of the largest\n    largest_heap = []\n    nums_heap = []\n    # We'll keep the largest as a pointer\n    largest_idx = 0\n    # Loop over the given list\n    for num in nums:\n        # While we haven't reached the end, add num to the heap\n        while largest_idx!= n and largest_heap[nums_heap[largest_idx] - largest_heap[num] > num:\n            # The next largest number to compare is in the heap\n            largest_idx = nums_heap[largest_idx]\n        # If we reach this point, the smallest number will be the next largest in the heap\n        largest_heap.append(largest_heap[nums_heap[largest_idx] - largest_heap[num]])\n    # Return the heap\n    return largest_heap\n",
        "test": "assert ",
        "num_ids": 566
    },
    {
        "number": 6,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x==0):\n        return False\n    elif (x>0):\n        if (x%2==0):\n            return False\n    else:\n        if (x%2!=0):\n            return False\n    return True\n",
        "test": "assert     is_Power_Of_Two(1) == True, \"check for power of one\"",
        "num_ids": 573
    },
    {
        "number": 7,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result=[]\n    for char in text:\n        if len(char)>=4:\n            result.append(char)\n    return result\n",
        "test": "assert     find_char_long(\"\") == []",
        "num_ids": 505
    },
    {
        "number": 8,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # YOUR CODE HERE\n    res = []\n    for num in nums:\n        res.append(num**2)\n    return res\n",
        "test": "assert     square_nums([]) == []",
        "num_ids": 377
    },
    {
        "number": 9,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = {}\n    for n in range(1, len(str)):\n        rotations[n] = max(rotations.get(n-1, n), n-len(str))\n    return rotations.get(0, len(str))\n",
        "test": "assert     find_Rotations(\"bca\") == 3",
        "num_ids": 2368
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if len(s)<=1: \n        return s\n    elif ch in s: \n        return s[:s.find(ch)]+s[s.find(ch)+1:]\n    else: \n        return s\n    \n    \n    \n    \n",
        "test": "assert     remove_Occ(\"abc\", \"d\") == \"abc\"",
        "num_ids": 436
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    for i in range(len(M)):\n        s += M[i][0]\n    M.sort(key = lambda x : x[0])\n    for i in range(len(M)):\n        M[i] = M[i][1:]\n    M.insert(0,[0,0,0])\n    M.append(s)\n    return M\n",
        "test": "assert     sort_matrix([[5, 2, 6, 1], [4, 7, 9, 3], [10, 13, 16, 19], [18, 24, 26, 30]]) == [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]",
        "num_ids": 1070
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * b * h)\n    return volume\n",
        "test": "assert     find_Volume(0,1,2) == 0",
        "num_ids": 440
    },
    {
        "number": 16,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = text.lower()\n    if text.count('_')>0:\n        return False\n    elif text.count('_')==0:\n        return True\n    else:\n        return False\n",
        "test": "assert         text_lowercase_underscore(\"Hello, World!\") == True",
        "num_ids": 589
    },
    {
        "number": 17,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*(4-1)*a\n",
        "test": "assert     square_perimeter(0) == 0",
        "num_ids": 244
    },
    {
        "number": 18,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [char for char in string if char not in string[:len(string)//2]]\n",
        "test": "assert     str_to_list(\"a\") == ['a']",
        "num_ids": 417
    },
    {
        "number": 19,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = []\n    for num in arraynums:\n        if num in duplicate:\n            return True\n        else:\n            duplicate.append(num)\n    return False\n",
        "test": "assert     test_duplicate([1,1,2,3,1]) == True",
        "num_ids": 743
    },
    {
        "number": 20,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_woodall(2) == True",
        "num_ids": 229
    },
    {
        "number": 56,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = int(num)\n    rev = rev * -1\n    while rev >= 0:\n        num = rev\n        rev = rev // 10\n    return rev\n",
        "test": "assert     rev(1) == -1",
        "num_ids": 515
    },
    {
        "number": 57,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 0 :\n        return 0\n",
        "test": "assert     find_Max_Num([]) == 0",
        "num_ids": 413
    },
    {
        "number": 58,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y:\n        return True\n    elif x < y:\n        return False\n    else:\n        return True\n",
        "test": "assert     opposite_Signs(2,3) == False",
        "num_ids": 393
    },
    {
        "number": 59,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    assert isinstance(n, int) and n >= 0, \"Invalid input: n must be a positive integer\"\n    return n**(1/2)\n",
        "test": "assert     is_octagonal(1), '1 is not an octagonal number'",
        "num_ids": 2469
    },
    {
        "number": 61,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    dic = defaultdict(int)\n    if len(s) == 0:\n        return 0\n    for i in range(len(s)):\n        dic[s[i]] = dic.get(s[i], 0) + 1\n    \n    return dic[s[0]]\n    \n",
        "test": "assert     count_Substrings('') == 0",
        "num_ids": 608
    },
    {
        "number": 62,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    return min(xs)\n",
        "test": "assert     smallest_num([3,5,1,2]),'multiple smallest numbers'",
        "num_ids": 265
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    maximum = 0\n    for index, value in enumerate(test_list):\n        difference = value - test_list[(index+1)%len(test_list)]\n        if difference > maximum:\n            maximum = difference\n    return maximum\n",
        "test": "assert     max_difference([]) == 0, 'passed'",
        "num_ids": 491
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # Dictionary to hold the tuple with the second value\n    subjectmarks_2 = {}\n    for subject, marks in subjectmarks:\n        subjectmarks_2[subject] = marks\n    # Sorting the marks dictionary\n    subjectmarks_2_sorted = sorted(subjectmarks_2.items(), key = lambda x : x[1])\n",
        "test": "assert ",
        "num_ids": 621
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    total = 0\n    for d in data_list:\n        total += d\n    return total\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 728
    },
    {
        "number": 66,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    c = 0\n    for i in list:\n        if i>0:\n            c+=1\n    print('the total of positive numbers in the list is : ',c)\n    return c\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 505
    },
    {
        "number": 67,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    s = list(set(range(1, n+1)))\n    return int(len(s)**(1/2))\n",
        "test": "assert     bell_number(2) == 1",
        "num_ids": 370
    },
    {
        "number": 68,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    is_monotonic = True\n    #Iterate through the array elements in reverse order.\n    for i in range(0,len(A)-1):\n        #If the next element is less than the current one, it is not monotonic.\n        if A[i+1]<A[i]:\n            is_monotonic = False\n    return is_monotonic\n",
        "test": "assert     is_Monotonic([]) == True",
        "num_ids": 710
    },
    {
        "number": 69,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l)==0:\n        return True\n    if l[0]==s:\n        if is_sublist(l[1:],s):\n            return True\n    return False\n",
        "test": "assert     is_sublist([1, 2, 3], [2, 3]) == False",
        "num_ids": 444
    },
    {
        "number": 70,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    tuple_1 = tuple(Input)\n    print(f\"tuple_1: {tuple_1}\")\n    tuple_2 = tuple(Input)\n    print(f\"tuple_2: {tuple_2}\")\n    #tuple_1 = tuple(map(tuple, Input))\n    #tuple_2 = tuple(map(tuple, Input))\n    #tuple_3 = tuple(map(tuple, Input))\n    tuple_1_length = len(tuple_1)\n    tuple_2_length = len(tuple_2)\n    \n    if tuple_1_length == tuple_2_length:\n        print(f\"The given tuple has a equal length\")\n        return True\n    else:\n        print(f\"The given tuple has a different length\")\n        return False\n",
        "test": "assert     find_equal_tuple(())",
        "num_ids": 689
    },
    {
        "number": 71,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n",
        "test": "assert     comb_sort([9,8,7,6,5,4,3,2,1]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 728
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n <= 0: \n        raise ValueError('n must be > 0.')\n    if n == 1: \n        return 0\n    else: \n        result = n - 1\n        return result \n",
        "test": "assert ",
        "num_ids": 551
    },
    {
        "number": 74,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if patterns == None or len(colors)!= len(patterns):\n        return False\n    #assert len(colors) == len(patterns), 'Colors and patterns not match'\n    \n    for i in range(len(colors)):\n        if patterns[i] == 'o':\n            for j in range(len(patterns)):\n                if patterns[j] == 'o':\n                    return False\n        elif patterns[i] == 'x':\n            for j in range(len(patterns)):\n                if patterns[j] == 'x':\n                    return False\n        elif patterns[i] == 'g':\n            for j in range(len(patterns)):\n                if patterns[j] == 'g':\n                    return False\n        else:\n            return False\n    return True\n",
        "test": "assert     is_samepatterns([(1, 2), (2, 3), (3, 4), (4, 5)], [[1, 2], [2, 3], [3, 4], [4, 5]]) == False, 'Test failed'",
        "num_ids": 808
    },
    {
        "number": 75,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    all_tuples = []\n    for tuple in test_list:\n        for index in range(0, len(tuple), 2):\n            if tuple[index] % K == 0:\n                all_tuples.append(tuple)\n    return all_tuples\n",
        "test": "assert     find_tuples([(1,2),(3,4),(1,3),(3,5),(1,2)], 3), \"Incorrect syntax\"",
        "num_ids": 817
    },
    {
        "number": 77,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n",
        "test": "assert     is_Diff(13) is False, \"The function is_Diff should return False\"",
        "num_ids": 326
    },
    {
        "number": 79,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0: \n        return True\n    else: \n        return False\n",
        "test": "assert     word_len('s') == 0, 'Expected to be 0'",
        "num_ids": 524
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return n\n    return tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 2415
    },
    {
        "number": 82,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    result = math.pi * pow(r,2)\n    return result\n",
        "test": "assert     (volume_sphere(3.141592653589793) == 7.896719368888175), 'volume of sphere does not match'",
        "num_ids": 232
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    import string\n    import itertools\n    \n    result = \"\"\n    \n    for i in range(len(strr)):\n        if strr[i] in string.printable:\n            result += chr(ord(strr[i]) - ord('a'))\n        else:\n            result += strr[i]\n    \n    return result\n",
        "test": "assert ",
        "num_ids": 2304
    },
    {
        "number": 84,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    # pass\n    # write your code here\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pass\n    pas",
        "test": "assert     sequence(8) == [2, 4, 6, 8, 10, 12, 14]",
        "num_ids": 2421
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**3\n",
        "test": "assert ",
        "num_ids": 146
    },
    {
        "number": 86,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    # return n*(n+1)/6 - n*(n+2)/6 + n\n    # nth hexagonal number is 7*(7-2)/3 + 5*(5-3)/3 + 2*(3-1)/3\n    return 7*(7-2)/3 + 5*(5-3)/3 + 2*(3-1)/3\n",
        "test": "assert centered_hexagonal_number(1) == 1",
        "num_ids": 555
    },
    {
        "number": 87,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n",
        "test": "assert     merge_dictionaries_three({'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}, {'a':1, 'b':2, 'c':3}) == {'a':1, 'b':2, 'c':3}",
        "num_ids": 674
    },
    {
        "number": 88,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = {}\n    for i in list1:\n        if i not in result:\n            result[i] = 1\n        else:\n            result[i] += 1\n    return result\n",
        "test": "assert     freq_count([0,0,0,0,0,0,0,0,0]) == {0: 0, 1: 0, 2: 0, 3: 0, 4: 0}",
        "num_ids": 378
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    closest = 0\n    while closest < N:\n        closest = min(N, closest + 1)\n        if closest == N:\n            return closest\n        elif closest < N:\n            closest = N\n        else:\n            closest = N - 1\n    return closest\n",
        "test": "assert     closest_num(1) == 1",
        "num_ids": 469
    },
    {
        "number": 90,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    a=0\n    length=0\n    for i in list1:\n        if len(i)>length:\n            length=len(i)\n            a=i\n    return a\n    \ndef main():\n    '''\n    Write a python function to find the longest word.\n    '''\n    list1=[\"be\",\"to\",\"be\",\"and\",\"of\",\"and\",\"of\",\"and\",\"of\",\"to\",\"of\",\"to\",\"and\",\"of\",\"and\",\"and\",\"and\",\"be\",\"and\",\"and\",\"to\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"to\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",\"and\",",
        "test": "assert ",
        "num_ids": 2257
    },
    {
        "number": 91,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if len(sub_str) == 0:\n        return True\n    for i in range(0, len(str1)):\n        if str1[i:i + len(sub_str)] == sub_str:\n            return True\n    return False\n",
        "test": "assert     find_substring('abcd', 'cd') == True",
        "num_ids": 512
    },
    {
        "number": 92,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0: \n        return True \n    else: \n        return False\n",
        "test": "assert     is_undulating(4) == False, \"is_undulating should return False\"",
        "num_ids": 230
    },
    {
        "number": 93,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return pow(a,b)\n",
        "test": "assert     power(1, 2) == 1",
        "num_ids": 173
    },
    {
        "number": 94,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # your code here\n    return test_list[0]\n    \ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    # your code here\n    return test_list[1]\n    \ndef add(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list, where each element is the sum of the first element and the second element.\n    '''\n    # your code here\n    new_list = []\n    # print(test_list)\n    for i in test_list:\n        new_list.append(i[0]+i[1])\n    # print(new_list)\n    return new_list\n    \ndef reverse(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list, where each element is the first element followed by the second element of the tuple.\n    '''\n    # your code here\n    new_list = []\n    # print(test_list)\n    for i in test_list:\n        new_list.append(i[1])\n    # print(new_list)\n    return new_list\n    \ndef count_by_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list, where each element is the number of occurrences of the tuple.\n    '''\n    # your code here\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return len(new_list)\n    \ndef calculate_perimeter(test_list):\n    '''\n    Given a list of tuples, write a function that returns the perimeter of the list.\n    '''\n    # your code here\n    return (6*len(test_list))\n    \ndef display_data(test_list):\n    '''\n    Given a list of tuples, write a function that returns a list of the values in the tuple.\n    '''\n    # your code here\n    new_list = []\n    # print(test_list)\n    for i in test_list:\n        new_list.append(i[0])\n    # print(new_list)\n    return new_list\n    \ndef sort_by_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list, where each element is sorted in ascending order by the second element of the tuple.\n    '''\n    # your code here\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return sorted(new_list, key=itemgetter(1))\n    \ndef sort_by_second_value(test_list):\n    '''\n    Given a list of tuples, write a function that returns a new list, where each element is sorted in ascending order by the first element of the tuple.\n    '''\n    # your code here\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return sorted(new_list, key=itemgetter(0))\n",
        "test": "assert ",
        "num_ids": 417
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_len=lst[0][0]\n    min_index=0\n    for i in range(len(lst)):\n        if(lst[i][0]<min_len):\n            min_len=lst[i][0]\n            min_index=i\n    return min_len\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_len=lst[0][0]\n    max_index=0\n    for i in range(len(lst)):\n        if(lst[i][0]>max_len):\n            max_len=lst[i][0]\n            max_index=i\n    return max_len, max_index\n",
        "test": "assert     'Find_Min_Length' == 'Find_Min_Length'",
        "num_ids": 563
    },
    {
        "number": 96,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 1:\n        return 1\n    else:\n        num = n\n        i = 2\n        while num % i!= 0:\n            i += 1\n        return i\n",
        "test": "assert         divisor(10) == 2",
        "num_ids": 320
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    dic = {}\n    for lst in list1:\n        for e in lst:\n            dic[e] = dic.get(e, 0) + 1\n    return dic\n",
        "test": "assert     frequency_lists([[3,2,1,2,1,2,3,4], [2,2,2,3,3,4,4,4]]) == {3: 2, 2: 1, 1: 2, 2: 1, 3: 2, 4: 2}",
        "num_ids": 606
    },
    {
        "number": 98,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # Write your code here\n    result = 1\n    for number in numbers:\n        result = result * number\n    return result\n",
        "test": "assert     isinstance(multiply_num([2,3,4]), int), \"multiply_num should return an int\"",
        "num_ids": 501
    },
    {
        "number": 99,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: return '0'\n    res = ''\n    while n: \n        res = str(n % 2) + res\n        n = n // 2\n    return res[::-1]\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 455
    },
    {
        "number": 100,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    def helper(num):\n        if num == 0:\n            return 0\n        if num == 1:\n            return 1\n        if num % 2 == 0:\n            return helper(num/2) + 1\n        else:\n            return helper(num-1) + 1\n    return helper(num)\n",
        "test": "assert     next_smallest_palindrome(4) == 3",
        "num_ids": 556
    },
    {
        "number": 101,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k]\n    \ndef kth_element_test(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    n = len(arr)\n    if n < k:\n        return None\n    return arr[k - 1]\n    ",
        "test": "assert     kth_element([2, 4, 5, 8, 10], 2) == 5",
        "num_ids": 589
    },
    {
        "number": 102,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n",
        "test": "assert     snake_to_camel(\"string\") == \"String\"",
        "num_ids": 354
    },
    {
        "number": 103,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if m > n:\n        return 0\n    \n    if (n == 1 or m == 1):\n        return n\n",
        "test": "assert     eulerian_num(3, 4) == 0",
        "num_ids": 579
    },
    {
        "number": 104,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n",
        "test": "assert     sort_sublists([\"2\",\"3\", \"4\", \"5\", \"6\", \"7\", \"1\", \"8\", \"9\", \"10\"]) == [[\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\"]], \"test error in sort_sublists\"",
        "num_ids": 587
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for x in lst:\n        if x == True:\n            count += 1\n    return count\n",
        "test": "assert     count([0,1,2,0,1,0,1]) == 3",
        "num_ids": 355
    },
    {
        "number": 106,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in test_list:\n        if type(i)!= tuple:\n            test_tup.append((i, 0))\n        else:\n            test_tup.append(i)\n",
        "test": "assert     add_lists([1, 2, 3], (1,2,1)) == (1,2,1)",
        "num_ids": 459
    },
    {
        "number": 108,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_copy=num1.copy()\n    num2_copy=num2.copy()\n    heapq.heapify(num1_copy)\n    heapq.heapify(num2_copy)\n    num1_sorted=[]\n    num2_sorted=[]\n    while num1_copy:\n        num1_sorted.append(heapq.heappop(num1_copy))\n    while num2_copy:\n        num2_sorted.append(heapq.heappop(num2_copy))\n    if len(num1_sorted)==0 or len(num2_sorted)==0:\n        return num1_sorted+num2_sorted\n    elif num1_sorted[0]<=num2_sorted[0]:\n        return num1_sorted+num2_sorted\n    else:\n        return num2_sorted+num1_sorted\n",
        "test": "assert ",
        "num_ids": 1213
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    i = 0\n    odd = []\n    while i < n:\n        if int(s[i % n]) % 2!= 0:\n            odd.append(int(s[i % n]) % 2)\n        i = i + 1\n    return len(odd)\ndef even_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an even value when rotating a binary string the given number of times.\n    '''\n    i = 0\n    even = []\n    while i < n:\n        if int(s[i % n]) % 2 == 0:\n            even.append(int(s[i % n]) % 2)\n        i = i + 1\n    return len(even)\ndef is_prime(n):\n    '''\n    This function returns True if n is prime.\n    '''\n    if n == 2 or n == 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    for i in range(5, int(math.sqrt(n)) + 1, 6):\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n    return True\nprime = []\nfor n in range(100,10000):\n    if is_prime(n):\n        prime.append(n)\nprint(prime)",
        "test": "assert     odd_Equivalent(\"0110\",2) == 1, \"ERROR: odd_Equivalent() failed\"",
        "num_ids": 674
    },
    {
        "number": 111,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = set()\n    for nestedlist1 in nestedlist:\n        for nestedlist2 in nestedlist1:\n            common.add(nestedlist2)\n    return list(common)\n",
        "test": "assert     common_in_nested_lists([[1,2,3],[4,5,6]]) == [1,2,3,4,5,6]",
        "num_ids": 807
    },
    {
        "number": 113,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     check_integer(12345) == True",
        "num_ids": 247
    },
    {
        "number": 115,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for value in list1:\n        if type(value) is dict:\n            if len(value) > 0:\n                return False\n        else:\n            return False\n    return True\n",
        "test": "assert     empty_dit([]) == True, \"empty_dit should return True.\"",
        "num_ids": 376
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(int(x) for x in nums)\n",
        "test": "assert     tuple_to_int([]) == 0",
        "num_ids": 414
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    pass\n",
        "test": "assert         list_to_float([[1,2,3,4,5],[5.2,3.4,2,4]]) == [5.2,3.4,2,4], \"Test 2\"",
        "num_ids": 646
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list(\"I am a string\"), True",
        "num_ids": 227
    },
    {
        "number": 119,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    length = len(arr)\n    if length < 1:\n        return None\n    \n    # Find the minimum element\n    left = 0\n    right = length - 1\n    for right, val in enumerate(arr):\n        if val == arr[right]:\n            left = right\n            break\n    \n    # Compare if left < right\n    while left < right:\n        if arr[left] == arr[right]:\n            return arr[left]\n        \n        if arr[left] < arr[right]:\n            left += 1\n        else:\n            right -= 1\n            \n    return None\n",
        "test": "assert     search(arr) == 0, \"Expected None, but got {}\".format(search(arr))",
        "num_ids": 531
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # Your code here\n    list2=[]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            list2.append(list1[i][j])\n    print(max(list2))\n    \ndef list_product(list1):\n    '''\n    Write a function to find the product of the elements of a given list.\n    '''\n    # Your code here\n    list2=[]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            list2.append(list1[i][j])\n    print(max(list2))\n",
        "test": "assert     max_product_tuple([(1,2),(4,3),(1,4)]) == (1, 8)",
        "num_ids": 721
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    amicable_numbers = [i for i in range(1, limit + 1) if i % 2 == 0]\n    amicable_numbers_sum = sum(amicable_numbers)\n    return amicable_numbers_sum\n",
        "test": "assert     amicable_numbers_sum(2) == 2",
        "num_ids": 531
    },
    {
        "number": 124,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return (b.real**2 + b.imag**2)**0.5\n",
        "test": "assert     angle_complex(-1,0)==0",
        "num_ids": 746
    },
    {
        "number": 125,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            count_0 += 1\n        else:\n            count_1 += 1\n        if (count_0!= count_1):\n            max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n",
        "test": "assert     find_length(\"010011011010101\") == 5",
        "num_ids": 640
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # First, print the two numbers, one at a time \n    a = a \n    b = b \n    # Init empty list, for summation of common divisors \n    c = [] \n    # Build a loop to calculate all common divisors \n    # of a and b \n    # If there are more common divisors, keep adding them until there are no common divisors \n    #\n    # Time complexity: O(n+m) where n is the number of divisors and m is the number of numbers in the array \n    # Space Complexity: O(n+m) \n    for i in range(1, a+1): \n        if a % i == 0 and b % i == 0: \n            c.append(i) \n    # print(c) \n    # print(c[-1]) \n    # Find the common divisors \n    # for a and b, return that \n    # check if the sum of a and b is a common divisor \n    #\n    # Time complexity: O(n) where n is the number of divisors and n is the number of numbers in the array \n    # Space Complexity: O(1)\n    for i in c: \n        a = a - i \n        b = b + i \n    return a+b\n",
        "test": "assert     sum(1,2) == 3",
        "num_ids": 681
    },
    {
        "number": 127,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(2, 3) == 6",
        "num_ids": 273
    },
    {
        "number": 128,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # your code here\n    return []\n",
        "test": "assert     long_words(3, [\"and\", \"a\", \"is\", \"an\", \"word\", \"and\", \"another\", \"word\"]) == False, \"True\"",
        "num_ids": 406
    },
    {
        "number": 129,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # your code goes here\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == 0:\n                return False\n    return True\n",
        "test": "assert     magic_square_test([[1, 2, 3, 4, 0, 0, 0, 0, 0], [5, 6, 7, 8, 0, 0, 0, 0, 0], [9, 10, 11, 12, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0, 0, 0, 0]]) is False, \"Magic square test failed!\"",
        "num_ids": 989
    },
    {
        "number": 130,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    n = len(nums)\n    \n    # Find the max occurence of items\n    item_occurrence = dict()\n    for i in range(n):\n        if nums[i] not in item_occurrence:\n            item_occurrence[nums[i]] = 1\n        else:\n            item_occurrence[nums[i]] += 1\n        \n    # Find the max occurence of items with the given keys\n    max_occurrence = 0\n    max_occurrence_key = 0\n    for key, value in item_occurrence.items():\n        if value > max_occurrence:\n            max_occurrence = value\n            max_occurrence_key = key\n    \n    # Return the key of the max occurrence\n    return max_occurrence_key\n    \ndef find_max_freq(nums):\n    '''\n    Given a list of numbers, find the most frequent item in it.\n    '''\n    \n    n = len(nums)\n    \n    # Find the max occurence of items\n    max_occurrence = dict()\n    for i in range(n):\n        if nums[i] not in max_occurrence:\n            max_occurrence[nums[i]] = 1\n        else:\n            max_occurrence[nums[i]] += 1\n    \n    # Find the max occurrence of items with the given keys\n    max_occurrence = sorted(max_occurrence.items(), key = lambda item: item[1])\n    max_occurrence = max_occurrence[-1]\n    \n    # Return the item with the highest frequency\n    return max_occurrence[0]\n",
        "test": "assert     max_occurrences([1, 3, 1, 2, 2, 2]) == 2",
        "num_ids": 2473
    },
    {
        "number": 131,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # TODO: write your code here\n    vowels = 'aeiou'\n    vowels_count = 0\n    for char in str1:\n        if char in vowels:\n            vowels_count += 1\n    # Note: if you do not use reverse_vowels, it will make the output too long\n    if vowels_count == 0:\n        return str1\n    else:\n        first_vowel = vowels[vowels_count % len(vowels)]\n        # Note: the string has already been checked for vowels\n        return str1.replace(first_vowel, '')\n",
        "test": "assert     reverse_vowels(\"Zz\") == \"Zz\"",
        "num_ids": 561
    },
    {
        "number": 132,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"(\"\n    for tup in tup1:\n        str1 = str1 + \"(\" + str(tup[0]) + \",\" + str(tup[1]) + \"),\"\n    str1 = str1[0:-1] + \")\"\n    return str1\n",
        "test": "assert ",
        "num_ids": 342
    },
    {
        "number": 133,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_list = []\n    sum_negativenum = 0\n    for num in nums:\n        if num > 0:\n            num_list.append(num)\n    \n    for i in num_list:\n        if i < 0:\n            sum_negativenum += i\n    \n    return sum_negativenum\n",
        "test": "assert     sum_negativenum([]) == 0, \"The function should be working\"",
        "num_ids": 345
    },
    {
        "number": 135,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * hexagonal_num(n-1)\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 558
    },
    {
        "number": 137,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = len(nums)\n    # array of zeroes\n    zeroes = 0\n    # array of non-zeroes\n    non_zeroes = 0\n    # count of non-zeroes in array\n    non_zeroes_count = 0\n    # count of zeroes in array\n    zeroes_count = 0\n    # find the length of the array\n    for i in range(0,n):\n        # if the array is zeroes\n        if nums[i] == 0:\n            # count the zeroes in array\n            zeroes_count += 1\n            # if the zeroes in array are non-zeroes\n            if nums[i] == 1:\n                # if there are 0s in the array\n                if zeroes_count == n - 1:\n                    # check if the array is non-zero\n                    if nums[i]!= 1:\n                        # return the ratio of non-zeroes\n                        return non_zeroes_count / zeroes_count\n                    # return the ratio of zeroes\n                    return zeroes_count / n\n                # if there are 0s in the array\n                else:\n                    # return the ratio of zeroes\n                    return zeroes_count / non_zeroes_count\n            # if the array is non-zero\n            else:\n                # find the count of non-zeroes\n                non_zeroes_count += 1\n                # check if the array is non-zero\n                if nums[i] == 1:\n                    # return the non-zeroes\n                    return non_zeroes_count / non_zeroes_count\n        # if the array is non-zeroes\n        else:\n            # check if the array is non-zeroes\n            if nums[i] == 1:\n                # if there are zeroes in the array\n                if zeroes_count == n - 1:\n                    # check if the array is non-zero\n                    if nums[i] == 0:\n                        # return the non-zeroes\n                        return non_zeroes_count / non_zeroes_count\n                    # return the non-zeroes\n                    return non_zeroes_count / zeroes_count\n                # if there are zeroes in the array\n                else:\n                    # return the non-zeroes\n                    return non_zeroes_count / non_zeroes_count\n            # if the array is zeroes\n            else:\n                # check if the array is non-zeroes\n                if nums[i] == 0:\n                    # return the non-zeroes\n                    return non_zeroes_count / non_zeroes_count\n    # if all the numbers are zeroes\n    return 0\n",
        "test": "assert     zero_count([0,1,1,0,1,0]) == 1",
        "num_ids": 3005
    },
    {
        "number": 138,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    sum_of_power_2 = 0\n    while n:\n        if n & 1 == 1:\n            sum_of_power_2 += 1\n        n >>= 1\n    if sum_of_power_2!= 0:\n        return True\n    return False\n",
        "test": "assert     is_Sum_Of_Powers_Of_Two(2) == True",
        "num_ids": 570
    },
    {
        "number": 139,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 313
    },
    {
        "number": 140,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    if len(test_list) == 0:\n        return []\n    if type(test_list[0]) == list:\n        for element in test_list:\n            result.extend(element)\n    elif type(test_list[0]) == set:\n        for element in test_list:\n            result.extend(element)\n    else:\n        result = test_list\n    return result\n",
        "test": "assert     extract_singly('') == [], \"Extract_singly should return empty list\"",
        "num_ids": 595
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(1, n):\n        j = i\n        while j > 0 and nums[j-1] > nums[j]:\n            nums[j-1], nums[j] = nums[j], nums[j-1]\n            j -= 1\n    return nums\n",
        "test": "assert         pancake_sort([]) == []",
        "num_ids": 757
    },
    {
        "number": 142,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # the number of items that are identical in the same position of three lists\n    if len(list1) == len(list2) == len(list3):\n        if list1[0] == list2[0] == list3[0]:\n            return 1\n        else:\n            return 0\n    else:\n        return 0\n",
        "test": "assert     count_samepair([1,1,1,1,1], [1,1,1,1,1], [1,1,1,1,1]) == 1, \"count_samepair(1,1,1) should return 1\"",
        "num_ids": 809
    },
    {
        "number": 143,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = []\n    for i in range(len(Input)):\n        for j in range(i+1,len(Input)):\n            if Input[i][j] == 'l':\n                lst.append(i)\n                lst.append(j)\n    return len(lst)\n",
        "test": "assert     find_lists([]) == 0",
        "num_ids": 415
    },
    {
        "number": 145,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    \n    # Initializing the maximum difference \n    max_diff = 0\n    \n    # Iterating through the array \n    for i in range(0, len(arr)): \n        # Taking the absolute value \n        abs_diff = abs(arr[i] - arr[i]) \n        \n        # Initializing the current \n        # maximum difference \n        current_diff = abs_diff \n        \n        # Iterating through the array \n        for j in range(i + 1, len(arr)): \n            # Taking the absolute value \n            abs_diff = abs(arr[i] - arr[j]) \n            \n            # Adding the current difference \n            # to the maximum difference \n            current_diff = current_diff + abs_diff \n            \n            # If maximum difference is less \n            # than the current maximum difference \n            # take current difference \n            if current_diff > max_diff: \n                max_diff = current_diff \n            \n    return max_diff\n",
        "test": "assert     max_Abs_Diff([]) == 0",
        "num_ids": 963
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if a == None or b == None or n <= 0:\n        return None\n    if a == None or b == None:\n        return None\n    if n == 1:\n        return (a,b)\n    \n    x = []\n    y = []\n    #print(a, b, n)\n    for i in range(len(a)):\n        x.append(a[i])\n        y.append(b[i])\n    \n    x.sort()\n    y.sort()\n    #print(x, y)\n    if x[0] + y[0] == n:\n        #print('YES')\n        return (x[0], y[0])\n    if x[-1] + y[-1] == n:\n        return (x[-1], y[-1])\n    \n    #print(n)\n    #print(len(a), len(b))\n    \n    #print(n - x[0] - y[0])\n    \n    #print(x[0], x[-1], y[0], y[-1])\n    #print(x[-1], y[-1])\n    \n    if x[-1] + y[-1] < n:\n        for i in range(len(x)):\n            if x[i] + y[i] == n:\n                return (x[i], y[i])\n            if x[i] + y[i] > n:\n                return None\n        \n    return None\n",
        "test": "assert     find_solution(1,1,1) == (1,1)",
        "num_ids": 2999
    },
    {
        "number": 161,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    output=[]\n    if len(list1)!=len(list2):\n        raise TypeError('List must be of same size')\n    for i in list1:\n        if i not in list2:\n            output.append(i)\n    return output\n",
        "test": "assert     remove_elements([1,2,3,4], [2,3,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 526
    },
    {
        "number": 162,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n + (n-2) + (n-4)\n",
        "test": "assert     sum_series(1) == 1",
        "num_ids": 326
    },
    {
        "number": 163,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    # loop to calculate area\n    for i in range(0,l):\n        area = area + s*(1.0 - tan(pi*(i + 0.5)/l))\n    return area\n",
        "test": "assert     isinstance(area_polygon(2.0, 1), float)",
        "num_ids": 403
    },
    {
        "number": 164,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    # define the fibonacci number sequence\n    fib_seq = [1,1]\n    for i in range(2, n + 1):\n        # calculate the next Fibonacci number \n        # 1, 1, 2, 3, 5, 8,...\n        fib_seq.append(fib_seq[i - 1] + fib_seq[i - 2])\n        # if the sum of the divisors is same to the current number\n        if fib_seq[i] == n:\n            return True\n    return False\n",
        "test": "assert     div_sum(0)==0",
        "num_ids": 417
    },
    {
        "number": 165,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return len(str1.lower().replace(' ', '').replace('.', '').replace(',', '').replace(';', '').replace('-', '').replace('!', '').replace('?', '').replace(' ', '').replace('(', '').replace(')', '').replace(':', '').replace(' ', '').replace('&', '').replace('.', '').replace('\"', '').replace(\"'\", ''))\n",
        "test": "assert     count_char_position(\"a\") == 1",
        "num_ids": 399
    },
    {
        "number": 166,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 2308
    },
    {
        "number": 167,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return None\n    elif n % 2 == 0:\n        return 1\n    else:\n        return 2**(n-1)\n",
        "test": "assert     next_power_of_2(1) == 1",
        "num_ids": 449
    },
    {
        "number": 168,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # count the occurrence of a number\n    return a.count(x)\n",
        "test": "assert     frequency([1,1,1,2,2,2],1) == 3",
        "num_ids": 394
    },
    {
        "number": 170,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0                                                                                                                                                                                    \n    if m == 0:                                                                                                                                                                                                \n        total = list1[0]                                                                                                                                                                                    \n        return total\n    else:\n        if n == 0:                                                                                                                                                                                            \n            return sum_range_list(list1, m-1, 0)                                                                                                                                                                                        \n        else:\n            if list1[n] >= m:                                                                                                                                                                                            \n                total = sum_range_list(list1, m, n-1)\n                return total\n            else:\n                total = sum_range_list(list1, m, n-1)\n                return total + list1[n]\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5], 3, 10) == 15, 'test failed'",
        "num_ids": 619
    },
    {
        "number": 171,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (4.0/3.0) * math.sqrt(3.0)*(a ** 2.0)\n",
        "test": "assert     perimeter_pentagon(5) == 35, 'The perimeter of the pentagon is not correct'",
        "num_ids": 356
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n",
        "test": "assert     count_occurance(\"scoob\") == 0",
        "num_ids": 276
    },
    {
        "number": 222,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_list = list(test_tuple)\n    test_list.sort()\n    if len(test_tuple) == len(set(test_list)):\n        return True\n    else:\n        return False\n",
        "test": "assert         check_type(())        == True",
        "num_ids": 845
    },
    {
        "number": 223,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n == 1:\n        return True\n    if arr[n] == x:\n        return True\n    for i in range(n):\n        if arr[n] == arr[i] and i!= n - 1:\n            continue\n        elif arr[i] == arr[n]:\n            return False\n    return is_majority(arr, n - 1, x)\n",
        "test": "assert     is_majority([1,2,3,1,2,3], 3, 1) == True",
        "num_ids": 939
    },
    {
        "number": 224,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(1,n):\n        if (n & i) == 1:\n            count += 1\n    return count\n",
        "test": "assert     count_Set_Bits(10) == 0",
        "num_ids": 461
    },
    {
        "number": 226,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if(str==''):\n        return ''\n    if(str[0]=='.'):\n        str=str[1:]\n    if(str[-1]=='.'):\n        str=str[:-1]\n    return str\n",
        "test": "assert     odd_values_string(\"abc\") == \"abc\"",
        "num_ids": 418
    },
    {
        "number": 227,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a>b and a>c: \n        return a \n    elif b>a and b>c: \n        return b \n    else: \n        return c \n",
        "test": "assert     min_of_three(1,2,3) == 3, \"function should return 3\"",
        "num_ids": 447
    },
    {
        "number": 228,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return ((n & (l ^ (n >> n))) == 0) and (n & (r ^ (n >> n))) == (n & ((n >> n) ^ r ^ (n >> n)))\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(10, 8, 11)==False",
        "num_ids": 869
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if len(arr) == 0:\n        return arr\n    else:\n        n_p, n_n = n, len(arr)\n        p_arr, n_arr = [], []\n        count, n_positive = 0, 0\n        for i in range(len(arr)):\n            if arr[i] < 0:\n                count += 1\n                n_positive += 1\n            else:\n                n_positive -= 1\n                p_arr.append(count)\n                n_arr.append(n_positive)\n                count = 0\n        if count > 0:\n            p_arr.append(count)\n            n_arr.append(n_positive)\n        p_arr.append(len(arr))\n        n_arr.append(n_n)\n        return p_arr, n_arr\n",
        "test": "assert ",
        "num_ids": 536
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    if(char==' '):\n        return(str1.replace(' ','*'))\n    else:\n        return(str1.replace('*',' '))\n",
        "test": "assert     replace_blank('this is test.docx','') == 'this is test.docx'",
        "num_ids": 315
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    h = []\n    for i in list1:\n        heapq.heappush(h,i)\n    for _ in range(n-1):\n        temp = heapq.heappop(h)\n        heapq.heappush(h,temp)\n        print(temp)\n    return h\nprint(larg_nnum([10,25,30,40,50,60,70,80,90,100],5))\n",
        "test": "assert ",
        "num_ids": 377
    },
    {
        "number": 233,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    import cmath\n    import matplotlib.pyplot as plt\n    import numpy as np\n    from numpy import sin, cos, pi\n    from matplotlib.widgets import Slider\n    def plane_to_origin(a):\n        return np.array([0, 0, 1])\n    def rotate_vector(v, angle):\n        return np.array([np.cos(angle)*v[0] - np.sin(angle)*v[1], np.sin(angle)*v[0] + np.cos(angle)*v[1], 0])\n    #start_time = time.time()\n    r = 1\n    h = 1\n    a = 1\n    theta_t = np.arccos(r/h)\n    #theta_t = np.arccos(r/h)\n    a_f = 2*(np.cos(theta_t)*h + a/((2*r)*(2*r)))\n    t = np.arctan(a_f)/pi\n",
        "test": "assert     lateralsuface_cylinder(1,4) == 4",
        "num_ids": 1100
    },
    {
        "number": 234,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    l = float(l)\n    return (3.141592653589793*l*l)*(l*l)\n",
        "test": "assert     volume_cube(0) == 0",
        "num_ids": 232
    },
    {
        "number": 235,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return 2**n-1\n",
        "test": "assert     even_bit_set_number(3) == False",
        "num_ids": 397
    },
    {
        "number": 237,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    output = {}\n    for item in test_list:\n        output[item[0]] = output.get(item[0], 0) + 1\n    return output\n",
        "test": "assert     check_occurences([('a',2),('a',2),('b',4),('b',5)]) == {'a': 2, 'b': 2, 'b': 2}",
        "num_ids": 370
    },
    {
        "number": 238,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    n = len(str)\n    for i in range(n):\n        for j in range(i+1,n):\n            if str[i] == str[j]:\n                count += 1\n    return count\n",
        "test": "assert     number_of_substrings('PYTHON') == 3",
        "num_ids": 2422
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return sum(range(m, n)) \n",
        "test": "assert     get_total_number_of_sequences(1, 2) == 1, \"should be 1\"",
        "num_ids": 459
    },
    {
        "number": 240,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1)==0 or len(list2)==0:\n        return list2\n    else:\n        for i in range(len(list2)):\n            list1[i] = list2[i]\n        return list1\n",
        "test": "assert     replace_list([1,2,3,4,5],[5,4,3,2,1]) == [5,4,3,2,1], \"test_replace_list_2 failed\"",
        "num_ids": 2531
    },
    {
        "number": 242,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # this function counts the number of 'a' in a string\n    count = 0\n    for char in str1:\n        if char == 'a':\n            count += 1\n    return count\n",
        "test": "assert     count_charac(\"acaba\") == 3, \"count_charac returns an error.\"",
        "num_ids": 304
    },
    {
        "number": 244,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square = int(math.sqrt(N))\n    return square * square\n",
        "test": "assert     next_Perfect_Square(0) == 0",
        "num_ids": 500
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    sum_arr = 0\n    current_sum = 0\n    for i in range(len(arr) - 1):\n        if arr[i] < arr[i + 1]:\n            current_sum = current_sum + arr[i + 1]\n        else:\n            current_sum = current_sum + arr[i]\n        sum_arr = max(sum_arr, current_sum)\n    return sum_arr\n",
        "test": "assert     max_sum([-5, -3, 4, -1, -1, -1, -4, -3, -3, -5]) == -5, 'Error in function max_sum()'",
        "num_ids": 888
    },
    {
        "number": 246,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    sqr = 0\n    for x in range(1,number):\n        if number % x == 0:\n            sqr += 1\n    return sqr\n",
        "test": "assert     (babylonian_squareroot(0) == 0)",
        "num_ids": 346
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str) <= 1: \n        return len(str)\n    lps = [1]*len(str)\n    lps[0], lps[1] = 0, 0\n    for i in range(2, len(str)): \n        lps[i] = max(lps[i-1], lps[i-2] + 1) \n    return max(lps)\n",
        "test": "assert     lps(\"ADOBECODEBANC\"), \"Invalid string\"",
        "num_ids": 797
    },
    {
        "number": 248,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 30,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)",
        "test": "assert     harmonic_sum(0) == 0",
        "num_ids": 206
    },
    {
        "number": 249,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_array = []\n    \n    for i in array_nums1:\n        if i in array_nums2:\n            intersection_array.append(i)\n    \n    return intersection_array\n",
        "test": "assert     intersection_array([3, 4], [1, 2]) == []",
        "num_ids": 2678
    },
    {
        "number": 250,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n",
        "test": "assert     count_X((1, 2, 3), 3) == 1",
        "num_ids": 347
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    result = []\n    for i in list:\n        if element < i:\n            result.append(i)\n            result.append(element)\n            element = element - 1\n        else:\n            result.append(i)\n            element = element + 1\n            \n    return result\n",
        "test": "assert     insert_element([1,2,3,4], 6) == [1,2,3,6]",
        "num_ids": 504
    },
    {
        "number": 252,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c_numbers = []\n    for number in numbers:\n        c_numbers.append(complex(number.real,number.imag))\n    polar_coordinates = []\n    for c in c_numbers:\n        radians = c.real * c.real + c.imag * c.imag\n        polar_coordinates.append(math.sqrt(radians))\n    return polar_coordinates\n",
        "test": "assert     convert([0,0,0,0,0]) == [0,0,0,0,0]",
        "num_ids": 3316
    },
    {
        "number": 253,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n    \n",
        "test": "assert     count_integer([]) == 0, \"count_integer should return zero if the list is empty!\"",
        "num_ids": 289
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations(l, n))\ndef sum_array(array):\n    '''\n    Write a function that takes in an array (list) and returns the sum of the elements of the array.\n    '''\n    return sum(array)\ndef array_index(array):\n    '''\n    Write a function that takes in an array (list) and returns its index of the element in the array.\n    '''\n    return array.index(array[0])\ndef int_list(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all elements of the array in sorted order.\n    '''\n    return sorted(array)\ndef count_elements(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of elements in the array.\n    '''\n    return len(array)\ndef sort_even_numbers(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with the even numbers in the array sorted in non-decreasing order.\n    '''\n    newarray = sorted(array, key=lambda x: x%2)\n    return newarray\ndef int_list_filter(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all elements of the array in sorted order, except for the first element.\n    '''\n    return sorted(array, key=lambda x: x)\ndef filter_even_numbers(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all elements of the array in sorted order, except for the first element.\n    '''\n    return sorted(array, key=lambda x: x)\ndef sort_negative_numbers(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all elements in sorted order, except for the first element.\n    '''\n    return sorted(array, key=lambda x: -x)\ndef count_elements_filter(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of elements in the array except for the first element.\n    '''\n    return len(array)-1\ndef filter_negative_numbers(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all elements of the array in sorted order, except for the first element.\n    '''\n    return sorted(array, key=lambda x: -x)\ndef count_even_numbers_filter(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of even numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements(array)\ndef count_even_numbers_sort(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of even numbers in the array except for the first element.\n    '''\n    return count_elements(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_sort(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return count_elements(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_filter(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements(array)\ndef count_odd_numbers_filter_2(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array)\ndef count_odd_numbers_filter_3(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array)\ndef count_odd_numbers_filter_4(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_filter_5(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_filter_6(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_filter_7(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array) - count_even_numbers_filter_2(array)\ndef count_odd_numbers_filter_8(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array)\ndef count_odd_numbers_filter_9(array):\n    '''\n    Write a function that takes in an array (list) and returns the number of odd numbers in the array except for the first element.\n    '''\n    return sum_array(array) - count_elements_filter(array) - count_odd_numbers_filter(array) - count_even_numbers_filter(array)\ndef combinations_colors_filter(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all combinations of elements of the array, except for the first element.\n    '''\n    return list(combinations_colors(array, len(array)))\ndef combinations_colors_sort(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all combinations of elements of the array in sorted order.\n    '''\n    return list(combinations_colors(array, len(array)))\ndef combinations_colors_filter_2(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all combinations of elements of the array, except for the first element.\n    '''\n    return list(combinations_colors(array, len(array)))\ndef combinations_colors_sort_2(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all combinations of elements of the array in sorted order.\n    '''\n    return list(combinations_colors(array, len(array)))\ndef combinations_colors_filter_3(array):\n    '''\n    Write a function that takes in an array (list) and returns a list with all combinations of elements of the array except for the first element.\n    '''\n    return list(combinations_colors(array, len(array)))\ndef combinations_colors_sort_3(array):\n    '''\n    Write a function that take",
        "test": "assert     combinations_colors([1], 0) == ([], ())",
        "num_ids": 638
    },
    {
        "number": 256,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    res = 0\n    for i in range(2,n):\n        if all(num<=i for num in range(2,i)):\n            res += 1\n    return res\n",
        "test": "assert         count_Primes_nums(1) == 0",
        "num_ids": 572
    },
    {
        "number": 257,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    a=int(a)\n    b=int(b)\n    return (b,a)\n",
        "test": "assert     swap_numbers(2,1) == (1,2)",
        "num_ids": 234
    },
    {
        "number": 259,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    new_tup = (max(test_tup1[0],test_tup2[0]), max(test_tup1[1],test_tup2[1]))\n    return new_tup\n",
        "test": "assert         maximize_elements(('apple', 'orange'), ('apples', 'oranges')) == ('apples', 'oranges')",
        "num_ids": 707
    },
    {
        "number": 260,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 1\n    if n == 1:\n        return 1\n    while (i <= n):\n        if (n % i == 0):\n            return 0\n        else:\n            i = i + 1\n    return 0\n    \ndef even(l):\n    return len(l) % 2 == 0\n",
        "test": "assert         newman_prime(1) == 1",
        "num_ids": 560
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if test_tup1[0] == test_tup2[0]:\n        # O(n) time complexity\n        # O(1) space complexity\n        result = test_tup1[0] / test_tup2[0]\n    else:\n        # O(n) time complexity\n        # O(1) space complexity\n        result = test_tup1[1] / test_tup2[1]\n    return result\n",
        "test": "assert ",
        "num_ids": 575
    },
    {
        "number": 262,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # remove duplicates\n    list1 = [x for x in list1 if x not in list1[:len(list1)//2]]\n    return list1, list1[:len(list1)//2]\n",
        "test": "assert     split_two_parts([], 0) == ([], [])",
        "num_ids": 602
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return (\"ERROR: Invalid age.\")\n    if h_age >= 6:\n        return(\"ERROR: You have a dog.\")\n    else:\n        return(\"ERROR: You don't have a dog.\")\n",
        "test": "assert dog_age(1)",
        "num_ids": 339
    },
    {
        "number": 265,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n",
        "test": "assert     list_split([], 0) == []",
        "num_ids": 445
    },
    {
        "number": 266,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l1 = l // 2\n    l2 = (l1 + l1 - l) // 2\n    l3 = l2 + l2 - l\n    return (3 * l1) * l1 + (3 * l2) * l2 + (l3 * l3) * l3\n",
        "test": "assert     lateralsurface_cube(0)==0",
        "num_ids": 412
    },
    {
        "number": 267,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    # CODE HERE\n    sum = 0\n    for i in range(0, n+1):\n        sum += i**2\n    return sum",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 319
    },
    {
        "number": 268,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    import math\n    def is_prime(n):\n        if n == 2:\n            return True\n        if n % 2 == 0:\n            return False\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    star_num = 1\n    for i in range(n-1):\n        star_num *= 2\n        if is_prime(star_num):\n            break\n    return star_num\n",
        "test": "assert     find_star_num(3) == 2",
        "num_ids": 4410
    },
    {
        "number": 269,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert         ascii_value(\"\\x20\") == ord('\\x20')",
        "num_ids": 417
    },
    {
        "number": 270,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_index = 0\n    even_sum = 0\n    while even_index < len(arr):\n        if arr[even_index] % 2 == 0:\n            even_sum += arr[even_index]\n        else:\n            even_sum += even_sum\n            even_index += 1\n    return even_sum\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 513
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even_numbers = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum_even_numbers += i ** 5\n    return sum_even_numbers\n",
        "test": "assert     even_Power_Sum(1) == 0",
        "num_ids": 392
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    # TODO: Write your code here\n    rear = []\n    for i in test_list:\n        rear.append(i[0])\n    return rear\n    \n    \ntest_list = [(1, 2), (4, 6), (3, 4), (2, 8), (5, 3), (1, 2)]\nprint(rear_extract(test_list))",
        "test": "assert     rear_extract([('a', 'b'), ('d', 'c')]) == ['a', 'd']",
        "num_ids": 464
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # read the input data\n    try:\n        first_tuple = tuple(test_tup1)\n        second_tuple = tuple(test_tup2)\n        first_tuple.extend(second_tuple)\n        # remove the tuple from the list\n        first_tuple.remove(second_tuple[0])\n        # remove the first element of the tuple\n        first_tuple.pop(0)\n        # return the tuple\n        return first_tuple\n    except ValueError:\n        raise ValueError(\"Sorry, you did not enter a tuple.\")\n",
        "test": "assert     substract_elements(test_tup1, test_tup2) == ('a', 'b', 'c', 'd')",
        "num_ids": 715
    },
    {
        "number": 274,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += int(str(i) + str(i))*math.factorial(2*i)\n    return sum \n",
        "test": "assert     even_binomial_Coeff_Sum( 0 ) == 0",
        "num_ids": 459
    },
    {
        "number": 276,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r*h**3\n",
        "test": "assert         volume_cylinder(0, 0) == 0",
        "num_ids": 186
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {key:val for key, val in dict.items() if val >= n}\n",
        "test": "assert     dict_filter(dict,10) == {'a': 1, 'b': 2, 'c': 3, 'd': 4}",
        "num_ids": 482
    },
    {
        "number": 278,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[i-1]:\n            count += 1\n    return count\n",
        "test": "assert     count_first_elements(('x', 'y', 'z')) == 1, 'count_first_elements: incorrect'",
        "num_ids": 525
    },
    {
        "number": 279,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # code here\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    return n*n-1 + is_num_decagonal(n-1)\n",
        "test": "assert     is_num_decagonal(1), \"Incorrect n!\"",
        "num_ids": 2284
    },
    {
        "number": 280,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = -1 # position of the element in the array\n    for i,v in enumerate(dlist):\n        if v == item:\n            pos = i\n            break # finds the index of the element in the array\n    return (pos!= -1, pos) # returns the boolean and the index position of the element if the element was found\n",
        "test": "assert     sequential_search(['a', 'a', 'b', 'b', 'c', 'c'], 'a') == (True, 0)",
        "num_ids": 478
    },
    {
        "number": 281,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n",
        "test": "assert     all_unique([1, 1, 2, 3, 4]) == False, \"All Elements are Unique\"",
        "num_ids": 2811
    },
    {
        "number": 282,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(set(nums1) - set(nums2))\n",
        "test": "assert     sub_list([1,2,3,4,5,6,7],[2,3,4,5,6,7,8]) == [1,2,3,4,5,6,7,8]",
        "num_ids": 601
    },
    {
        "number": 283,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    temp = str(n)\n    temp = temp.replace('0','')\n    temp = temp.replace('1','')\n    temp = temp.replace('2','')\n    temp = temp.replace('3','')\n    temp = temp.replace('4','')\n    temp = temp.replace('5','')\n    temp = temp.replace('6','')\n    temp = temp.replace('7','')\n    temp = temp.replace('8','')\n    temp = temp.replace('9','')\n",
        "test": "assert ",
        "num_ids": 311
    },
    {
        "number": 284,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #check for empty lists\n    if(len(list) == 0):\n        return True\n    for item in list:\n        if(item == element):\n            return True\n    return False\n",
        "test": "assert     check_element([1,2,3,4,5], 1) == True",
        "num_ids": 422
    },
    {
        "number": 285,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return not re.match(r'(a){1,3}b', text)\n",
        "test": "assert     \"aabbccccbaaaab\" == \"aabbccccbaaaab\"",
        "num_ids": 408
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n < 2:\n        return 0\n",
        "test": "assert ",
        "num_ids": 649
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i ** 2\n    return s\n",
        "test": "assert     square_Sum(5) == 25",
        "num_ids": 215
    },
    {
        "number": 290,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    length = 0\n    if len(list1)!= 0:\n        length = len(list1[0])\n    else:\n        length = 0\n    for l in list1:\n        if len(l) > length:\n            length = len(l)\n    for i in list1:\n        if len(i) == length:\n            max_length = length\n    return max_length\n",
        "test": "assert     max_length([[]]) == 0",
        "num_ids": 502
    },
    {
        "number": 291,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    else: \n        return count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k)\n",
        "test": "assert     count_no_of_ways(1, 1) == 1, 'the function should return 1'",
        "num_ids": 968
    },
    {
        "number": 292,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if (n<=0) or (m<=0):\n        return False\n    elif (m == 0):\n        return n\n    elif (n%m == 0):\n        return m\n    else:\n        return find(n%m,m)\n",
        "test": "assert     find(4, 2) == 2",
        "num_ids": 301
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # Find the angle between the sides.\n    angle = math.acos(w**2 + h**2)\n    # Find the distance between the 3 sides.\n    return angle / 2\n",
        "test": "assert     otherside_rightangle(1,0) == 0.0",
        "num_ids": 874
    },
    {
        "number": 294,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    \n    return max(listval)\n    ",
        "test": "assert     max_val([1, 2, 3]) == 3",
        "num_ids": 277
    },
    {
        "number": 295,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    elif number % 2 == 0:\n        return number\n    else:\n        return number // 2 + sum_div(number - 2)\n",
        "test": "assert     sum_div(0) == 0, \"sum_div failed\"",
        "num_ids": 372
    },
    {
        "number": 296,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    n = len(arr)\n    for i in range(0, n-1):\n        if arr[i] > arr[i+1]:\n            inv_count+=1\n    return inv_count\n",
        "test": "assert     get_Inv_Count([1,2,3,5,4,6,7,8,9,5,4,7,8]) == 3, 'Incorrect count'",
        "num_ids": 543
    },
    {
        "number": 297,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for item in list1:\n        if type(item) is list:\n            result.extend(flatten_list(item))\n        else:\n            result.append(item)\n    return result\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 690
    },
    {
        "number": 299,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_agg = 0\n    for tup in stdata:\n        tup_agg = tup[1]\n        if(tup_agg > max_agg):\n            max_agg = tup_agg\n    return max_agg\n",
        "test": "assert     max_aggregate([(1, 2), (2, 1), (2, 3), (3, 2)]) == 3",
        "num_ids": 489
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = int(n)\n    #base case\n    if n == 0:\n        return 0\n    # iterate\n    else:\n        count = 0\n        # iterate\n        for i in range(n):\n            # take first n bits\n            first = bin(i)[2:]\n            # iterate\n            for j in range(i, n, 1):\n                # take last n bits\n                last = bin(j)[2:]\n                # iterate\n                if first == last:\n                    count += 1\n        # return count\n        return count\n",
        "test": "assert     count_binary_seq(1) == 1",
        "num_ids": 419
    },
    {
        "number": 301,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 517
    },
    {
        "number": 304,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)):\n        for j in range(i,len(ranges)):\n            if(index==ranges[i][0] and index==ranges[j][1]):\n                return arr[ranges[i][0]][ranges[i][1]]\n",
        "test": "assert     find_Element([1,2,3,4,5,6], [1,2,3,4,5,6,1,2,3,4], 4, 0) == 6",
        "num_ids": 847
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #code here\n    try:\n        pattern = 'p'\n        p = words.index(pattern)\n        pattern = words[p + 1]\n        p = p + 2\n        pattern = pattern.replace(\"p\",\" \")\n        pattern = pattern.split()\n        pattern = \" \".join(pattern)\n    except ValueError:\n        pattern = words[1]\n    return pattern\n",
        "test": "assert     start_withp(['p','a','l','l','a','p','c','a']) == 'a','p should not start with a'",
        "num_ids": 442
    },
    {
        "number": 306,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if(n == 0 or index == 0):\n        return 0\n    if(a[index] > a[index-1]):\n        return max_sum_increasing_subseq(a, n-1, index-1, k)\n    return a[index] + max_sum_increasing_subseq(a, n-1, index, k-1)\n",
        "test": "assert     max_sum_increasing_subseq(1, 2, 0, 0) == 0",
        "num_ids": 632
    },
    {
        "number": 307,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)<=n:\n        return tuplex\n    else:\n        return get_colon_tuplex(tuplex[:n],m,tuplex[n:])\n",
        "test": "assert     colon_tuplex((1,2,3),3,4) == (1,2,3), \"Error in colon_tuplex\"",
        "num_ids": 780
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # You'll need to create a variable called max_product and initialize it to a default value of 0.\n",
        "test": "assert ",
        "num_ids": 614
    },
    {
        "number": 309,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    ",
        "test": "assert     maximum(2,3) == 3, \"maximum test\"",
        "num_ids": 299
    },
    {
        "number": 310,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert string_to_tuple('') == ()",
        "num_ids": 430
    },
    {
        "number": 311,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return (1<<n) | n\n",
        "test": "assert     set_left_most_unset_bit(0) == 1",
        "num_ids": 323
    },
    {
        "number": 312,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    m = 2 * math.pi * r * h\n    return m\n",
        "test": "assert     volume_cone(0,0) == 0",
        "num_ids": 270
    },
    {
        "number": 388,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 0\n    for i in range(1,n+1):\n        if i < 1 or n % i!= 0:\n            break\n        else:\n            max_power += 1\n    if max_power == 0:\n        return n\n    else:\n        return n%(max_power+1)\n",
        "test": "assert     highest_Power_of_2(1) == 1",
        "num_ids": 401
    },
    {
        "number": 389,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0 or n == 1:\n        return n \n    else: \n        return find_lucas(n - 1) + find_lucas(n - 2) \n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 564
    },
    {
        "number": 390,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element = str(element)\n        element = element.replace(\".\", \"\")\n        element = element.replace(\",\", \"\")\n        element = element.replace(\"'\", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\"[\", \"\")\n        element = element.replace(\"]\", \"\")\n        element = element.replace(\"(\", \"\")\n        element = element.replace(\"'\", \"\")\n        element = element.replace(\", \", \"\")\n        element = element.replace(\": \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\")\", \"\")\n        element = element.replace(\"]\", \"\")\n        element = element.replace(\"(\", \"\")\n        element = element.replace(\"'\", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n        element = element.replace(\" \", \"\")\n    ",
        "test": "assert not add_string(['hello'], 'hello')",
        "num_ids": 2420
    },
    {
        "number": 391,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = {}\n    for i, item in enumerate(l1):\n        d[i] = item\n    for i, item in enumerate(l2):\n        d[i] = item\n    for i, item in enumerate(l3):\n        d[i] = item\n    return d\n",
        "test": "assert     convert_list_dictionary([1, 2, 3, 4, 5], [6, 7, 8, 9, 10], [11, 12, 13, 14, 15])!= {'a': {'b': [6, 7, 8, 9, 10], 'c': {'d': [11, 12, 13, 14, 15]}}, 'd': {'e': [], 'f': [], 'g': []}}",
        "num_ids": 1068
    },
    {
        "number": 392,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    res = 0\n    for i in range(1, n):\n        res = max(res, (f(i) + f(i/2)) + f(i/3))\n    return res\n",
        "test": "assert     get_max_sum(1) == 0, \"max_sum is incorrect\"",
        "num_ids": 534
    },
    {
        "number": 393,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for number in input_list:\n        if len(str(number)) > max_len:\n            max_len = len(str(number))\n    return max_len\n",
        "test": "assert     max_length_list([1, 3, 4, 2, 4, 2, 4, 4, 5]) == max_length_list([1, 3, 4, 2, 4, 2, 4, 4, 5]), \"Max length list is incorrect\"",
        "num_ids": 404
    },
    {
        "number": 394,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup_str = ','.join(map(str, test_tup))\n    for i in range(len(test_tup)):\n        if test_tup[i] == test_tup[i]:\n            return False\n    return True\n",
        "test": "assert     check_distinct((2,2,2,2,2,2)) == False",
        "num_ids": 455
    },
    {
        "number": 395,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    chars = {}\n    for char in str1:\n        if char not in chars:\n            chars[char] = 0\n        chars[char] += 1\n    for char in chars:\n        if chars[char]!= 1:\n            return char\n    return ''\n",
        "test": "assert     first_non_repeating_character('aaaaaaaaa') == 'a', \"First non-repeating character is not 'a'\"",
        "num_ids": 508
    },
    {
        "number": 396,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.search(regex, string))\n",
        "test": "assert     check_char(\"m\") == True",
        "num_ids": 246
    },
    {
        "number": 397,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    # Take the median of three numbers\n    m1 = (a+b+c)//3\n    m2 = (a+b)//2\n    m3 = (a+c)//2\n    if (m1 == m2):\n        return m1\n    if (m2 == m3):\n        return m2\n    else:\n        return m3\n",
        "test": "assert     median_numbers(1,1,1) == 1",
        "num_ids": 747
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 322
    },
    {
        "number": 399,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x = 0\n    y = 0\n    if len(test_tup1)!= len(test_tup2):\n        return -1\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            x += 1\n        elif test_tup1[i] < test_tup2[i]:\n            y += 1\n        else:\n            x = x + y\n    return x\n    # Write your code here.\n    pass\n",
        "test": "assert     bitwise_xor((True, True), (True, False)) == True, \"test 1 failed\"",
        "num_ids": 1243
    },
    {
        "number": 400,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if test_list == []:\n        return 0\n    freq_dict = {}\n    for i in test_list:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    freq_sorted_dict = sorted(freq_dict.items(), key=lambda x: x[1], reverse=True)\n    freq_dict = dict(freq_sorted_dict)\n    return sum(freq_dict.values())\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 592
    },
    {
        "number": 401,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return test_tup1 + test_tup2\n",
        "test": "assert     add_nested_tuples((), (1,2,3,4)) == (1,2,3,4)",
        "num_ids": 662
    },
    {
        "number": 404,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    while True:\n        try:\n            minimum = a if a < b else b\n            print(minimum)\n        except Exception:\n            print(\"No values\")\n            print(\"\\n Try again\")\n        else:\n            break\n    return minimum\n",
        "test": "assert     minimum(1,2) == 1",
        "num_ids": 367
    },
    {
        "number": 405,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for element in tuplex:\n        if element in tuple1:\n            return element\n    return False\n",
        "test": "assert not check_tuplex(('a','b','c'),('d','e','f'))",
        "num_ids": 372
    },
    {
        "number": 406,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x_str = str(x)\n    if x_str.count('7')%2 == 0:\n        return False\n    else:\n        return True\n    \n    \n",
        "test": "assert     find_Parity(4) == False",
        "num_ids": 261
    },
    {
        "number": 407,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    a = list(str(n))\n    for i in range(len(a)-1, -1, -1):\n        if a[i] == \"0\":\n            a[i] = \"1\"\n    return int(\"\".join(a))\n",
        "test": "assert ",
        "num_ids": 351
    },
    {
        "number": 408,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    size_first_array = len(nums1)\n    size_second_array = len(nums2)\n    if k < 0: return 'Error : k must be > 0'\n    if size_first_array < size_second_array:\n        return 'Error : first array should be greater than second array'\n    else:\n        if k == 0:\n            return sorted(zip(nums1,nums2))\n        else:\n            pairs = []\n            heapq.heapify(pairs)\n            for i in range(size_first_array):\n                first = nums1[i]\n                second = nums2[i]\n                index = i\n                while index < size_first_array and nums1[index] == first and nums2[index] == second:\n                    index += 1\n                if index == size_first_array:\n                    break\n                if index < size_first_array:\n                    heapq.heappush(pairs, (nums1[index], first, second))\n                else:\n                    heapq.heappush(pairs, (first, second, nums2[index]))\n            res = []\n            for i in range(k):\n                res.append((heapq.heappop(pairs)[2], heapq.heappop(pairs)[1], heapq.heappop(pairs)[0]))\n            return res\n",
        "test": "assert     k_smallest_pairs([], [], 0) == []",
        "num_ids": 1055
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    #Calculate the min product\n    min_product = 9999999\n    min_product = 0\n    \n    #loop through each pair\n    for i in range(len(list1)-1):\n        for j in range(i+1,len(list1)):\n            #calculate the min product\n            min_product = min(list1[i][0]*list1[j][0],min_product)\n            \n            #Check if min product is less than or equal to min product\n            if(min_product <= min_product):\n                min_product = list1[i][0]*list1[j][0]\n            \n    return min_product\n",
        "test": "assert     min_product_tuple([(1,2),(3,4),(5,6),(7,8)]), (7, 8)",
        "num_ids": 733
    },
    {
        "number": 410,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # step 1: find the minimum element in the list.\n    min = listval[0]\n    # loop over the list elements\n    for i in listval:\n        # if the value of the element is smaller than the minimum value\n        if i < min:\n            min = i\n    return min\n",
        "test": "assert     min_val([1,2,3,4]) == 1, \"Failed to find the minimum value\"",
        "num_ids": 363
    },
    {
        "number": 411,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word).lower()\n",
        "test": "assert     snake_to_camel('Four'), 'Four'",
        "num_ids": 628
    },
    {
        "number": 412,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    evens = []\n    for i in l:\n        if i % 2 == 0:\n            evens.append(i)\n    return evens\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 468
    },
    {
        "number": 413,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return tuple(list1[n])\n",
        "test": "assert     extract_nth_element([(1, 2, 3), (4, 5, 6)], 1) == (4, 5, 6),     'passed'",
        "num_ids": 573
    },
    {
        "number": 414,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n",
        "test": "assert     overlapping(['some','string','words'],['some','string','another string'])==True, 'overlapping failed'",
        "num_ids": 562
    },
    {
        "number": 415,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_p=max(arr)\n    return arr.index(max_p)\n",
        "test": "assert ",
        "num_ids": 284
    },
    {
        "number": 417,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    # create a set\n    # while True:\n    #     for i in range(len(Input)):\n    #         for j in range(i,len(Input)):\n    #             if Input[i]==Input[j]:\n    #                 if j==len(Input)-1:\n    #                     break\n    #                 if Input[i]!=Input[j]:\n    #                     if Input[i]!=Input[j]:\n    #                         Input[i],Input[j]=Input[j],Input[i]\n    #                 break\n    #     if True not in Input:\n    #         return\n    #     return\n    if len(Input)==1:\n        return Input[0]\n    else:\n        return group_tuples(Input[:])+group_tuples(Input[:])\n",
        "test": "assert     group_tuples([ ]) == ()",
        "num_ids": 580
    },
    {
        "number": 418,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst)\n",
        "test": "assert     Find_Max([1, 2, 3, 4, 5]) == 5, \"fails\"",
        "num_ids": 378
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for x in list1:\n        total = total + x\n    print(total * len(list1))\n",
        "test": "assert ",
        "num_ids": 2890
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return n ** 3\n",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 256
    },
    {
        "number": 421,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # Declare a tuple to be returned\n    concatenated_tuple = ()\n    for i in test_tup:\n        concatenated_tuple += i\n    return concatenated_tuple\n",
        "test": "assert     concatenate_tuple([(1, 2, 3)]) == (1, 2, 3), \"Expected '(' to be 1, 2, 3, got: %s\" % concatenate_tuple([(1, 2, 3)])",
        "num_ids": 490
    },
    {
        "number": 422,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    num=[]\n    for i in range(n):\n        num.append(int(input('Enter a number : ')))\n    sum=0\n    for i in range(n):\n        sum+=num[i]\n    print('The average of cubes of the numbers : ',sum/n)\n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 480
    },
    {
        "number": 424,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[0]\n",
        "test": "assert     extract_rear([('C', 'E', 'D')]) == ('C', 'E', 'D')",
        "num_ids": 2453
    },
    {
        "number": 425,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    list1.sort() # insert into the end of the list \n    if x not in list1:\n        return 0\n    else:\n        for i in range(0,len(list1)):\n            if list1[i] == x:\n                return 1 + count_element_in_list(list1[i+1:], x)\n    \ndef check_if_solution_exists(lst):\n    '''\n    Write a function to check if a list has solution or not.\n    '''\n    for i in lst:\n        if i!= solution:\n            return False\n    return True\n",
        "test": "assert     count_element_in_list(['a', 'b', 'c'], 'e') == 0, \"Expected 0\"",
        "num_ids": 540
    },
    {
        "number": 426,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # result = []\n    # for num in nums:\n    #     if num % 2 == 1:\n    #         result.append(num)\n    # return result\n    return [num for num in nums if num % 2 == 1]\n",
        "test": "assert     filter_oddnumbers([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 355
    },
    {
        "number": 427,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        dt = re.split(r'[-]', dt)\n        if len(dt[1]) > 6:\n            dt[1] = dt[1][0:6] + dt[1][7:]\n        dt[2] = dt[2].zfill(2)\n        dt[3] = dt[3].zfill(2)\n        dt[4] = dt[4].zfill(2)\n        dt[5] = dt[5].zfill(2)\n        return dt\n    except IndexError:\n        print(\"Date format invalid\")\n    except ValueError:\n        print(\"Date format invalid\")\n    \ndef change_time_format(time):\n    '''\n    Write a function to convert a date of hh:mm format to hh:mm format.\n    '''\n    try:\n        time = re.split(r'[:]', time)\n        time[1] = time[1].split(':')[0]\n        time[2] = time[2].split(':')[0]\n        time[3] = time[3].split(':')[0]\n        return time\n    except IndexError:\n        print(\"Time format invalid\")\n    except ValueError:\n        print(\"Time format invalid\")\n    \ndef change_time_format_sub(time):\n    '''\n    Write a function to convert a date of hh:mm format to hh:mm format.\n    '''\n    try:\n        time = re.split(r'[:]', time)\n        time[1] = time[1].split(':')[1]\n        time[2] = time[2].split(':')[1]\n        time[3] = time[3].split(':')[1]\n        return time\n    except IndexError:\n        print(\"Time format invalid\")\n    except ValueError:\n        print(\"Time format invalid\")\n    \ndef change_day_format(day):\n    '''\n    Write a function to convert a day of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        day = re.split(r'[-]', day)\n        day[2] = day[2].zfill(2)\n        day[3] = day[3].zfill(2)\n        day[4] = day[4].zfill(2)\n        day[5] = day[5].zfill(2)\n        return day\n    except IndexError:\n        print(\"Date format invalid\")\n    except ValueError:\n        print(\"Date format invalid\")\n    \ndef change_day_format_sub(day):\n    '''\n    Write a function to convert a day of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        day = re.split(r'[:]', day)\n        day[2] = day[2].zfill(2)\n        day[3] = day[3].zfill(2)\n        day[4] = day[4].zfill(2)\n        day[5] = day[5].zfill(2)\n        return day\n    except IndexError:\n        print(\"Date format invalid\")\n    except ValueError:\n        print(\"Date format invalid\")\n",
        "test": "assert     change_date_format('') == None, \"change_date_format('')\"",
        "num_ids": 605
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    for i in range(len(my_list)):\n        for j in range(i, len(my_list)):\n            for k in range(j, len(my_list)):\n                if my_list[k] < my_list[j] and my_list[k] < my_list[i]:\n                    my_list[k], my_list[j] = my_list[j], my_list[k]\n    return my_list\n",
        "test": "assert     shell_sort([10,9,8,7,6,5,4,3,2,1]) == [1,2,3,4,5,6,7,8,9,10]",
        "num_ids": 888
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple([1, 2, 3]) + test_tup1 + tuple([4, 5, 6])\n",
        "test": "assert     and_tuples(test_tup1, test_tup2) == True, \"It's not the case of the given two tuples\"",
        "num_ids": 433
    },
    {
        "number": 430,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return b*b-4*a*c\n",
        "test": "assert     parabola_directrix(0, 1, 1) == 0",
        "num_ids": 590
    },
    {
        "number": 431,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #Common elements \n    l1 = list(list1)\n    l2 = list(list2)\n    c = len(l1)\n    for i in l1:\n        if i in l2:\n            c = c - 1\n    return c >= 0\n",
        "test": "assert     common_element([1,2,3,4], [1,4,6,3]) == True, 'common_element'",
        "num_ids": 804
    },
    {
        "number": 432,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2+height/2\n",
        "test": "assert     median_trapezium(1,2,1) == 2",
        "num_ids": 544
    },
    {
        "number": 433,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) > number:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_greater([1], 1) == False, 'check_greater function is not correct'",
        "num_ids": 482
    },
    {
        "number": 434,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    m = re.search(r'a([a-zA-Z]+)b', text)\n    return m\n",
        "test": "assert     text_match_one('') is None",
        "num_ids": 2062
    },
    {
        "number": 435,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n%10\n",
        "test": "assert     last_Digit(5) == 5",
        "num_ids": 300
    },
    {
        "number": 436,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in range(0,len(list1),1):\n        neg.append(-list1[i])\n    return neg\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 411
    },
    {
        "number": 437,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(len(str1)):\n        if(i%2!=0):\n            str1=str1.replace(str1[i],'')\n    return str1\n",
        "test": "assert     remove_odd(\"\") == \"\", \"Empty string\"",
        "num_ids": 489
    },
    {
        "number": 438,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    bidirectional_pairs = []\n    for i in range(len(test_list) - 1):\n        bidirectional_pairs.append((test_list[i], test_list[i + 1]))\n    return bidirectional_pairs\n",
        "test": "assert     count_bidirectional(test_list) == 4",
        "num_ids": 554
    },
    {
        "number": 439,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return reduce(lambda x,y: x+y,L)\ndef to_string(L):\n    '''\n    Write a function to convert a list of integers to a string.\n    '''\n    return ''.join(str(x) for x in L)\ndef main():\n    '''\n    Read and print the list of integers and a string.\n    '''\n    a = input(\"Enter the list of integers: \")\n    b = input(\"Enter the string: \")\n    list = [int(i) for i in a.split(',')]\n    print(list)\n    print(str(multiple_to_single(list)))\n    print(str(to_string(list)))\n    print(a)\n    print(b)\n",
        "test": "assert     multiple_to_single([1,2,3,4,5]) == 5",
        "num_ids": 381
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    result = re.findall(r\"(adverb|Adverb|Adverb1|adverb2|Adverb3|adverb4|Adverb5|Adverb6|adverb7|adverb8|adverb9|Adverb10|adverb11|Adverb12|adverb13|Adverb14|Adverb15|adverb16|adverb17|adverb18|adverb19|adverb20|adverb21|adverb22|adverb23|adverb24|adverb25|adverb26|adverb27|adverb28|adverb29|adverb30|adverb31|adverb32|adverb33|adverb34|adverb35|adverb36|adverb37|adverb38|adverb39|adverb40|adverb41|adverb42|adverb43|adverb44|adverb45|adverb46|adverb47|adverb48|adverb49|adverb50|adverb51|adverb52|adverb53|adverb54|adverb55|adverb56|adverb57|adverb58|adverb59|adverb60|adverb61|adverb62|adverb63|adverb64|adverb65|adverb66|adverb67|adverb68|adverb69|adverb70|adverb71|adverb72|adverb73|adverb74|adverb75|adverb76|adverb77|adverb78|adverb79|adverb80|adverb81|adverb82|adverb83|adverb84|adverb85|adverb86|adverb87|adverb88|adverb89|adverb90|adverb91|adverb92|adverb93|adverb94|adverb95|adverb96|adverb97|adverb98|adverb99|adverb100|adverb101|adverb102|adverb103|adverb104|adverb105|adverb106|adverb107|adverb108|adverb109|adverb110|adverb111|adverb112|adverb113|adverb114|adverb115|adverb116|adverb117|adverb118|adverb119|adverb120|adverb121|adverb122|adverb123|adverb124|adverb125|adverb126|adverb127|adverb128|adverb129|adverb130|adverb131|adverb132|adverb133|adverb134|adverb135|adverb136|adverb137|adverb138|adverb139|adverb140|adverb141|adverb142|adverb143|adverb144|adverb145|adverb146|adverb147|adverb148|adverb149|adverb150|adverb151|adverb152|adverb153|adverb154|adverb155|adverb156|adverb157|adverb158|adverb159|adverb160|adverb161|adverb162|adverb163|adverb164|adverb165|adverb166|adverb167|adverb168|adverb169|adverb170|adverb171|adverb172|adverb173|adverb174|adverb175|adverb176|adverb177|adverb178|adverb179|adverb180|adverb181|adverb182|adverb183|adverb184|adverb185|adverb186|adverb187|adverb188|adverb189|adverb190|adverb191|adverb192|adverb193|adverb194|adverb195|adverb196|adverb197|adverb198|adverb199|adverb200|adverb201|adverb202|adverb203|adverb204|adverb205|adverb206|adverb207|adverb208|adverb209|adverb210|adverb211|adverb212|adverb213|adverb214|adverb215|adverb216|adverb217|adverb218|adverb219|adverb220|adverb221|adverb222|adverb223|adverb224|adverb225|adverb226|adverb227|adverb228|adverb229|adverb230|adverb231|adverb232|adverb233|adverb234|adverb235|adverb236|adverb237|adverb238|adverb239|adverb240|adverb241|adverb242|adverb243|adverb244|adverb245|adverb246|adverb247|adverb248|adverb249|adverb250|adverb251|adverb252|adverb253|adverb254|adverb255|adverb256|adverb257|adverb258|adverb259|adverb260|adverb261|adverb262|adverb263|adverb264|adverb265|adverb266|adverb267|adverb268|adverb269|adverb270|adverb271|adverb272|adverb273|adverb274|adverb275|adverb276|adverb277|adverb278|adverb279|adverb280|adverb281|adverb282|adverb283|adverb284|adverb285|adverb286|adverb287|adverb288|adverb289|adverb290|adverb291|adverb292|adverb293|adverb294|adverb295|adverb296|adverb297|adverb298|adverb299|adverb300|adverb301|adverb302|adverb303|adverb304|adverb305|adverb306|adverb307|adverb308|adverb309|adverb310|adverb311|adverb312|adverb313|adverb314|adverb315|adverb316|adverb317|adverb318|adverb319|adverb320|adverb321|adverb322|adverb323|adverb324|adverb325|adverb326|adverb327|adverb328|adverb329|adverb330|adverb331|adverb332|adverb333|adverb334|adverb335|adverb336|adverb337|adverb338|adverb339|adverb340|adverb341|adverb342|adverb343|adverb344|adverb345|adverb346|adverb347|adverb348|adverb349|adverb350|adverb351|adverb352|adverb353|adverb354|adverb355|adverb356|adverb357|adverb358|adverb359|adverb360|adverb361|adverb362|adverb363|adverb364|adverb365|adverb366|adverb367|adverb368|adverb369|adverb370|adverb371|adverb372|adverb373|adverb374|adverb375|adverb376|adverb377|adverb378|adverb379|adverb380|adverb381|adverb382|adverb383|adverb384|adverb385|adverb386|adverb387|adverb388|adverb389|adverb390|adverb391|adverb392|adverb393|adverb394|adverb395|adverb396|adverb397|adverb398|adverb399|adverb400|adverb401|adverb402|adverb403|adverb404|adverb405|adverb406|adverb407|adverb408|adverb409|adverb410|adverb411|adverb412|adverb413|adverb414|adverb415|adverb416|adverb417|adverb418|adverb419|adverb420|adverb421|adverb422|adverb423|adverb424|adverb425|adverb426|adverb427|adverb428|adverb429|adverb430|adverb431|adverb432|adverb433|adverb434|adverb435|adverb436|adverb437|adverb438|adverb439|adverb440|adverb441|adverb442|adverb443|adverb444|adverb445|adverb446|adverb447|adverb448|adverb449|adverb450|adverb451|adverb452|adverb453|adverb454|adverb455|adverb456|adverb457|adverb458|adverb459|adverb460|adverb461|adverb462|adverb463|adverb464|adverb465|adverb466|adverb467|adverb468|adverb469|adverb470|adverb471|adverb472|adverb473|adverb474|adverb475|adverb476|adverb477|adverb478|adverb479|adverb480|adverb481|adverb482|adverb483|adverb484|adverb485|adverb486|adverb487|adverb488|adverb489|adverb490|adverb491|adverb492|adverb493|adverb494|adverb495|adverb496|adverb497|adverb49",
        "test": "assert     find_adverb_position(\"What is the weather in Minnesota, not a major place\") == [3,4]",
        "num_ids": 4953
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    # if l>2:\n    #     raise ValueError('Surface area of a cube is not defined for an odd length.')\n    # if l<2:\n    #     raise ValueError('Surface area of a cube is not defined for a length of less than 2.')\n    surfacearea = l*l*l*l\n    return surfacearea\n",
        "test": "assert surfacearea_cube(1) == 1, \"cube area should be 1\"",
        "num_ids": 305
    },
    {
        "number": 442,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count/len(nums)\n",
        "test": "assert         positive_count([1,2,3,4,5]) == 1.0, \"Test failed\"",
        "num_ids": 400
    },
    {
        "number": 443,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -1\n    for i in list1:\n        if i < 0:\n            if largest < i:\n                largest = i\n    return largest\n",
        "test": "assert ",
        "num_ids": 285
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    if len(test_list) < K:\n        return test_list\n",
        "test": "assert     trim_tuple([(1, 2, 3, 4), (2, 3, 4, 5)], -1) == [(1, 2, 3, 4), (2, 3, 4, 5)]",
        "num_ids": 610
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    pass\n",
        "test": "assert     index_multiplication([1,2,3,4,5], (6,8,10,11,12)) == (0,0,0,8,28,144,0)",
        "num_ids": 488
    },
    {
        "number": 446,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    \n    occur = 0\n    for i in tup:\n        if lst.count(i) > 1:\n            occur += lst.count(i)\n    return occur\n",
        "test": "assert     count_Occurrence((1, 2, 3, 4), (1, 2, 4)) == 0, \"Test case failed\"",
        "num_ids": 586
    },
    {
        "number": 447,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes=[]\n    for i in range(len(nums)):\n        cubes.append(nums[i]*nums[i]*nums[i])\n    return cubes\n",
        "test": "assert     cube_nums([1, 2, 3, 4, 5, 6]) == [1, 8, 27, 64, 125, 216]",
        "num_ids": 478
    },
    {
        "number": 448,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n + cal_sum(n - 1)\n",
        "test": "assert     cal_sum(0) == 0",
        "num_ids": 300
    },
    {
        "number": 450,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    count = 0\n    for c in l:\n        if c is None:\n            break\n        elif c == '-':\n            count += 1\n        elif c == '\"':\n            output.append(str[count:])\n            count = 0\n        elif c == '\\'':\n            count += 1\n            output.append(str[count:])\n            count = 0\n        elif c == '\\n':\n            output.append(str[count:])\n            count = 0\n        else:\n            output.append(c)\n    return ''.join(output)\n",
        "test": "assert     extract_string('Test', 'Test') == 'Test'",
        "num_ids": 481
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'^\\s+|\\s+$', '', text1)\n",
        "test": "assert     remove_whitespaces(\"abcdef\") == \"abcdef\"",
        "num_ids": 2289
    },
    {
        "number": 452,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 25,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n    \ndef assign_sale_to_customer(customer,sales):\n    '''\n    Write a function that assigns sale number to a customer.\n    '''\n    index = customer-1\n    while sales[index] < sales[index+1]:\n        sales[index], sales[index+1] = sales[index+1], sales[index]\n        index +=1\n",
        "test": "assert     loss_amount(200,500)==0",
        "num_ids": 255
    },
    {
        "number": 453,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n % 2 == 0:\n        return n\n    else:\n        return sumofFactors(n / 2)\n    \ndef countEqualNumbers(n):\n    '''\n    Write a python function to find the number of equal numbers.\n    '''\n    count = 0\n    for i in range(1, n + 1):\n        if(i % 2 == 0):\n            count += 1\n    return count\n",
        "test": "assert     sumofFactors(2) == 2, 'inputed number is not a perfect square'",
        "num_ids": 491
    },
    {
        "number": 454,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    wordz = 'Z'\n    if (text == wordz):\n        return 1\n    else:\n        return 0\n",
        "test": "assert     'the' == 'the'",
        "num_ids": 344
    },
    {
        "number": 455,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 >= 1 and monthnum2 <= 12):\n        return True\n    else:\n        return False\n",
        "test": "assert not    check_monthnumb_number(20)",
        "num_ids": 894
    },
    {
        "number": 456,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if not stringlist:\n        return []\n",
        "test": "assert         reverse_string_list([]) == []",
        "num_ids": 569
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(len(lst)):\n        if (len(lst[i]) == len(lst[i+1])):\n            if (len(lst[i]) < len(lst[i+1])):\n                lst[i+1] = lst[i+1] + lst[i]\n            else:\n                lst[i] = lst[i] + lst[i+1]\n    return lst\n",
        "test": "assert     (Find_Min([]) == []), \"Find_Min() should return an empty list\"",
        "num_ids": 553
    },
    {
        "number": 458,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    if l>=b:\n        return l*b\n    return 0\n",
        "test": "assert     rectangle_area(0,0) == 0",
        "num_ids": 195
    },
    {
        "number": 459,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower().replace(' ', '').replace('-', '').replace('&', '').replace('#', '').replace('$', '').replace('%', '').replace('&', '').replace('$', '').replace('%', '').replace('&', '').replace('(', '').replace(')', '').replace('*', '').replace('=', '').replace('-', '').replace('+', '').replace('(', '').replace(')', '').replace('*', '')\n",
        "test": "assert     remove_uppercase(\"abc\") == \"abc\"",
        "num_ids": 426
    },
    {
        "number": 460,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return lst[0]\n",
        "test": "assert     Extract([\"test\",\"me\",\"tables\",\"test\",\"me\"]) == \"test\"",
        "num_ids": 465
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    if len(str) > 0:\n        for i in str:\n            if i.isupper():\n                count += 1\n    return count\n",
        "test": "assert ",
        "num_ids": 231
    },
    {
        "number": 462,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    allCombinations = []\n    for element in list1:\n        if element not in allCombinations:\n            allCombinations.append(element)\n    return allCombinations\n",
        "test": "assert     combinations_list([1, 2, 3]) == [1, 2, 3]",
        "num_ids": 2483
    },
    {
        "number": 463,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_subarray_product = -math.inf\n    # Your code here\n    for i in range(0, len(arr)):\n        curr = arr[i]\n        for j in range(i + 1, len(arr)):\n            subarr = arr[i:j + 1]\n            curr_product = max(subarr)\n            # note that we need to go over the whole array,\n            # not just the subarray itself\n            if (curr_product == max_subarray_product):\n                break\n            max_subarray_product = curr_product if max_subarray_product == -math.inf else max(curr_product, max_subarray_product)\n    return max_subarray_product\n",
        "test": "assert     max_subarray_product([1, 2, 3, -4, 5]) == 5",
        "num_ids": 1186
    },
    {
        "number": 464,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(n):\n        if i not in dict:\n            return False\n    return True\n",
        "test": "assert     check_value(None, 0) == True",
        "num_ids": 433
    },
    {
        "number": 465,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    res = dict1.copy()\n    for i, v in res.items():\n        if type(v) == list:\n            res.pop(i)\n    return res\n",
        "test": "assert         drop_empty({}) == {}",
        "num_ids": 457
    },
    {
        "number": 468,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    answer = 1\n    for i in range(len(arr)):\n        for j in range(i):\n            answer = max(answer, arr[j] * arr[i])\n    return answer\n",
        "test": "assert     max_product([1,2,3]) == 6, \"test: not correct\"",
        "num_ids": 656
    },
    {
        "number": 470,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) < 2:\n        print('Not enough arguments')\n        return None\n",
        "test": "assert     add_pairwise((1, 3)) == (1, 4)",
        "num_ids": 300
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    remainder = 1\n    for i in range(len(arr)):\n        remainder = (remainder * arr[i]) % n\n    return remainder\n",
        "test": "assert     find_remainder([3, 5], 4) == 3, \"test 1 failed\"",
        "num_ids": 382
    },
    {
        "number": 472,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    i = 0\n    while i < len(l)-1: \n        if l[i] == l[i+1] and l[i] + 1 == l[i+1]: \n            l.remove(l[i])\n            l.remove(l[i+1]) \n            i = i+1\n        else:\n            i = i + 1\n            \n    return l\n    ",
        "test": "assert ",
        "num_ids": 403
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    intersect = []\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            intersect.append(test_list1[i])\n    return intersect\n",
        "test": "assert     tuple_intersection([1, 2, 3], [1, 3, 2]) == [1, 2, 3], \"wrong tuple intersection test\"",
        "num_ids": 622
    },
    {
        "number": 474,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    try:\n        if isinstance(str1,str):\n            if ch in str1:\n                new_str = str1.replace(ch,newch)\n                print(new_str)\n            else:\n                print('Invalid character')\n        else:\n            print('Invalid type of string')\n    except:\n        print('Invalid type of string')\n",
        "test": "assert     replace_char(str1=\"Vivi\",ch=\"a\",newch=\"V\") == \"viViv\"",
        "num_ids": 487
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda tup:tup[1])\n    return sorted_dict\n",
        "test": "assert     sort_counter( {'a':2, 'b':1, 'c':3} ) == {'c':3, 'b':1, 'a':2}",
        "num_ids": 622
    },
    {
        "number": 476,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort(reverse=True)\n    return sum(nums)\n",
        "test": "assert     big_sum([0, 0, 0, 0]) == 0, \"the value should be 0\"",
        "num_ids": 546
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('1') == '1'",
        "num_ids": 219
    },
    {
        "number": 478,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if(str1.islower()):\n        return str1.lower()\n    elif(str1.isupper()):\n        return str1.lower()\n    else:\n        return str1\ndef remove_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    if(str1.isdigit()):\n        return str1\n    elif(str1.isdigit()):\n        return '0'\n    else:\n        return str1\n",
        "test": "assert     remove_lowercase(\"z\") == \"z\"",
        "num_ids": 388
    },
    {
        "number": 479,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n <= 0:\n        raise ValueError('Input must be positive')\n    if n >= 10:\n        return n // 10\n    return n % 10\n",
        "test": "assert first_Digit(1) == 1",
        "num_ids": 271
    },
    {
        "number": 554,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    EvenList = list\n    return EvenList[::2]\n",
        "test": "assert     Split([]) == []",
        "num_ids": 248
    },
    {
        "number": 555,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #to do\n    #def difference(self)\n    return n**3 - (n**2 + n)**3\n    ",
        "test": "assert     (function difference() returns 9), 'Function difference() returns incorrect value'",
        "num_ids": 412
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if N == 1 : \n        return 0\n    if (N % 2 == 0) : \n        return 0\n    else : \n        odd_pairs = 0\n        for i in range(1,N//2+1) : \n            if (A[i] & 1)!= A[i-1] : \n                odd_pairs += 1\n        return odd_pairs\n",
        "test": "assert     find_Odd_Pair(A=[1,2,3,4,5,6,7,8,9],N=6) == 0",
        "num_ids": 435
    },
    {
        "number": 557,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.upper()\n        elif char.islower():\n            new_string += char.lower()\n        else:\n            new_string += char\n    return new_string\n",
        "test": "assert     toggle_string(\"\") == \"\"",
        "num_ids": 452
    },
    {
        "number": 558,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1 = 0\n    d2 = 0\n    for i in range(n1):\n        d1 += n1 % 10\n        n1 //= 10\n    for j in range(n2):\n        d2 += n2 % 10\n        n2 //= 10\n    return d1 - d2\n",
        "test": "assert     digit_distance_nums(9, 14) == 4",
        "num_ids": 432
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n",
        "test": "assert     max_sub_array_sum([], 1) == 0",
        "num_ids": 581
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # create empty list for union\n    list1 = []\n    # create empty list for union\n    list2 = []\n    # define a loop for all elements of tuples 1\n    for elements in test_tup1:\n        # append new element to list1\n        list1.append(elements)\n    # define a loop for all elements of tuples 2\n    for elements in test_tup2:\n        # append new element to list2\n        list2.append(elements)\n    # return the union of both lists\n    return tuple(sorted(list1+list2))\n",
        "test": "assert     union_elements(('a', 'b'), ('c', 'd')) == (\"a\", \"b\", \"c\", \"d\")",
        "num_ids": 684
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 30,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 1\n    elif len(lst) == 2:\n        return 1\n    elif len(lst) == 3:\n        return 3\n    elif len(lst) == 4:\n        return 4\n    else:\n        return max(Find_Max_Length(lst[:4]), Find_Max_Length(lst[4:]) )\n",
        "test": "assert     Find_Max_Length(['babab']), 'expected error: string length should be 2'",
        "num_ids": 2798
    },
    {
        "number": 563,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        if type(text)!= str:\n            raise TypeError(\"input must be a string.\")\n        if text.lower() == \"the\":\n            return \"you\"\n        elif text.lower() == \"my\":\n            return \"your\"\n        elif text.lower() == \"myself\":\n            return \"yourself\"\n        elif text.lower() == \"me\":\n            return \"me\"\n        elif text.lower() == \"you\":\n            return \"I\"\n        elif text.lower() == \"you're\":\n            return \"i\"\n        elif text.lower() == \"you've\":\n            return \"i have\"\n        elif text.lower() == \"us\":\n            return \"everyone\"\n        else:\n            return text\n    except TypeError as e:\n        print(\"Invalid value:\", e)\n        return None\n",
        "test": "assert     extract_values('a') == ('a')",
        "num_ids": 757
    },
    {
        "number": 564,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter = 0\n    for i in arr:\n        for j in arr:\n            if(i!= j):\n                if(i == j):\n                    counter += 1\n    return counter\n",
        "test": "assert     count_Pairs([3,5,6],6) == 0",
        "num_ids": 356
    },
    {
        "number": 565,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n",
        "test": "assert ",
        "num_ids": 282
    },
    {
        "number": 566,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n:\n        sum = sum + n % 10\n        n = n // 10\n    return sum\n",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 363
    },
    {
        "number": 567,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    i = 0\n    j = len(list1) - 1\n    while i < j:\n        if list1[i] > list1[j]:\n            return True\n        else:\n            i += 1\n    return False\n",
        "test": "assert issort_list([2,3,1,3,2,3,1,2,2,1]) == True, \"Test is not correct\"",
        "num_ids": 529
    },
    {
        "number": 568,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 250
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def recur(sublist, sl, sl_len):\n        if sl_len == 1:\n            return sublist\n        else:\n            if len(sublist) == 1:\n                return sublist\n            else:\n                if sl[0] > sublist[0]:\n                    return recur(sublist[1:], sl[1:], sl_len - 1)\n                else:\n                    return recur(sublist[1:], sl, sl_len - 1)\n    return recur(list1, list1, len(list1) - 1)\n",
        "test": "assert     sort_sublists([[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]]) == sorted([[\"a\", \"b\", \"c\", \"d\", \"e\"], [\"a\", \"b\", \"c\", \"d\", \"e\"]])",
        "num_ids": 967
    },
    {
        "number": 572,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    new_nums = []\n    for i in range(len(nums)):\n        if nums[i] not in new_nums:\n            new_nums.append(nums[i])\n    return new_nums\n",
        "test": "assert     two_unique_nums([1,2,3,3,3,3,3,3]) == [1,2,3]",
        "num_ids": 601
    },
    {
        "number": 573,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    print(f'Unique product: {sum(list_data)}')\n    \n    \ndef remove_duplicate_items(list_data):\n    '''\n    Write a python function to remove duplicate items from a given list.\n    '''\n    unique_list = []\n    print('Unique list:',unique_list)\n    \n    for item in list_data:\n        if item not in unique_list:\n            unique_list.append(item)\n            \n    print('Uniqe list:',unique_list)\n    \n    return unique_list\n    \n    \ndef main():\n    \n    '''\n    1. Initialise a list containing 7 numbers\n    2. Loop through the list to calculate the product\n    3. If the product is greater than 3 return the product\n    4. If the product is less than 3 return the product\n    5. If the product is greater than 5 return the product\n    6. If the product is less than 5 return the product\n    7. Return the new list with only the products less than 5\n    '''\n    \n    \n    list_data = [4,3,2,5,3,2,5]\n    print(list_data)\n    \n    unique_product(list_data)\n    \n    print(remove_duplicate_items(list_data))\n    \n    \nmain(",
        "test": "assert     unique_product([2, 3, 3, 3, 4]) == 0",
        "num_ids": 534
    },
    {
        "number": 574,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 4*h*np.pi*(r**2)\n",
        "test": "assert     surfacearea_cylinder(0.5,2.0) == 0.0",
        "num_ids": 285
    },
    {
        "number": 576,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return(A == B[0:len(B)]) or (len(A) == 0 or B[0]!= A[0])\n",
        "test": "assert     is_Sub_Array([1,2,3,4], [2,3,5]) == True",
        "num_ids": 454
    },
    {
        "number": 577,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 35,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n == 1): \n        return 1\n    else: \n        return n % 10 + last_Digit_Factorial(n // 10)\n",
        "test": "assert     last_Digit_Factorial(1) == 1, \"Should return 1\"",
        "num_ids": 281
    },
    {
        "number": 578,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # TO DO: complete this function\n    return(list1+list2+list3)\n",
        "test": "assert     interleave_lists(['a','b','c'],[],['d','e','f']) == ['a','b','c','d','e','f']",
        "num_ids": 779
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    l1, l2 = len(test_tup1), len(test_tup2)\n    diss_list = []\n    for i in range(l1):\n        if test_tup1[i]!= test_tup2[i]:\n            diss_list.append(test_tup1[i])\n    return diss_list\n",
        "test": "assert     find_dissimilar(('a','c'),('a','b')) == ['c']",
        "num_ids": 599
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_fnc = even_fnc(test_tuple)\n    # Make a variable to keep the odd elements of the nested tuple\n    odd_elements = []\n    for element in test_tuple: \n        if element % 2 == 0: \n            odd_elements.append(element)\n    # Return the even elements\n    return (even_fnc, odd_elements)\n",
        "test": "assert     even_ele(even_ele, even_fnc) == [0, 1, 2]",
        "num_ids": 717
    },
    {
        "number": 581,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return b*s\n    pass\n",
        "test": "assert     surface_Area(3,2) == 6",
        "num_ids": 323
    },
    {
        "number": 582,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 is None:\n        return True\n    return False\n",
        "test": "assert     my_dict({\"my_key\":\"my_value\"}) is False",
        "num_ids": 210
    },
    {
        "number": 583,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    #define the base cases\n    if num == 0 or num == 1:\n        return num\n",
        "test": "assert         catalan_number(1) == 1",
        "num_ids": 273
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb\n    \ndef find_suffix(text):\n    '''\n    Write a function to find the first adverb ending with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_place_of_last_adverb(text):\n    '''\n    Write a function to find the last adverb starting from the position of the first adverb ending with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[1:]\n    \ndef find_place_of_first_adverb(text):\n    '''\n    Write a function to find the first adverb starting from the position of the last adverb starting with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_word_ending(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_first_adverb(text):\n    '''\n    Write a function to find the first adverb ending with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_last_adverb(text):\n    '''\n    Write a function to find the last adverb starting from the position of the first adverb ending with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[1:]\n    \ndef find_word_starting_with_first_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_word_starting_with_last_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_starting(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending_of_first_adverb(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending_of_last_adverb(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_starting_with_first_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_starting_with_last_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending_of_first_adverb(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending_of_last_adverb(text):\n    '''\n    Write a function to find the last adverb ending with the word ending with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_starting_with_first_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the first suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_starting_with_last_adverb(text):\n    '''\n    Write a function to find the first adverb starting with the word starting with the last suffix of a given string.\n    '''\n    adverbs = [i for i in re.findall(r'ly$', text)]\n    if len(adverbs) == 0:\n        return ''\n    adverb = adverbs[0]\n    return adverb[:-1]\n    \ndef find_adverb_ending_of_first_adverb(text):\n    '''\n    Write a function to find the last adverb ending with the word ending wit",
        "test": "assert     find_adverbs('abcdefg') == 'b'",
        "num_ids": 2505
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    h = []\n    heapq.heappush(h, (items[0],1))\n    res = []\n    for i in range(1,n):\n        if h[0][1]<=i:\n            heapq.heappop(h)\n            heapq.heappush(h,(items[i],i))\n            res.append(items[i])\n    return res\n",
        "test": "assert     expensive_items([1,2,3], 2) == []",
        "num_ids": 651
    },
    {
        "number": 586,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    \n    pass\n",
        "test": "assert     split_Arr([\"a\",\"b\",\"c\",\"d\",\"e\",\"f\",\"g\"],3) == ['a','b','c','d','e','f','g']",
        "num_ids": 311
    },
    {
        "number": 587,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    newtuple = ()\n    for x in listx:\n        newtuple += (x, )\n    return newtuple\n",
        "test": "assert     list_tuple([1,2,3,4,5]) == (1,2,3,4,5), 'wrong result'",
        "num_ids": 332
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Sorting the list\n    nums.sort()\n    \n    # Searching the minimum and the maximum value in the list\n    min_val, max_val = 0, len(nums) - 1\n    \n    # Initializing the flag\n    flag = True\n    \n    # While the loop is going to be run\n    while flag:\n        # Check if the list is empty\n        if (max_val - min_val) <= 0:\n            flag = False\n        \n        # Check if the list is not empty\n        else:\n            # Add the current value\n            temp = nums[min_val]\n            nums[min_val] = nums[max_val]\n            nums[max_val] = temp\n            \n            # Decrement the maximum value\n            max_val -= 1\n    \n    # Return the value\n    return nums[0]\n",
        "test": "assert     big_diff([-3,6,9,-1]) == -1, 'test 1 is not correct'",
        "num_ids": 533
    },
    {
        "number": 589,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    c = 0\n    if b > a:\n        c = b\n        b = a\n    # If we want to use inbuilt sqrt function\n    while(c**2 < b**2):\n        c = c + 1\n        if c**2 == b**2:\n            return c\n    # If we want to use sqrt function\n    # return a+b//2\n    return a+b//2\n",
        "test": "assert     perfect_squares(1, 0) == 1",
        "num_ids": 613
    },
    {
        "number": 590,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x = complex(x)\n    y = complex(y)\n    r = complex(cmath.sqrt(x**2 + y**2), 0)\n    angle = cmath.phase(y) * 2 * cmath.pi\n    return [r.real, r.imag, angle]\n",
        "test": "assert     polar_rect(2,0) == (2,0)",
        "num_ids": 2541
    },
    {
        "number": 591,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = temp\n    return newList\n",
        "test": "assert ",
        "num_ids": 391
    },
    {
        "number": 592,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n == 0:\n        return 1\n    elif n < 0:\n        raise Exception('n must be non-negative')\n    else:\n        return binomial_Coeff(n - 1,k)*n\n",
        "test": "assert     binomial_Coeff(0,0) == 1, \"The sum of the binomial coefficients should be 1\"",
        "num_ids": 480
    },
    {
        "number": 593,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub(r'0', \"\", ip)\n    return ip\n",
        "test": "assert     removezero_ip('123.45.6') == '123.45.6', 'Test fail'",
        "num_ids": 488
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) % 2 == 0:\n        print(\"List is divisible by 2\")\n        return list1[0]\n    else:\n        print(\"List is not divisible by 2\")\n        return \"List is not divisible by 2\"\n",
        "test": "assert     diff_even_odd([2, 3, 5, 7]) == 2, \"Somethings wrong\"",
        "num_ids": 595
    },
    {
        "number": 595,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # your code here\n    if str1==str2:\n        return 0\n    else:\n        return 1\n",
        "test": "assert     min_Swaps(\"11001\", \"11001\") == 0, \"should be 0\"",
        "num_ids": 458
    },
    {
        "number": 596,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return len(tuple_list)\n",
        "test": "assert     tuple_size([1, 2, 3, 4]) == 4",
        "num_ids": 2253
    },
    {
        "number": 597,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Function to get kth element from two sorted arrays.\n    def get_kth(arr1, arr2, k):\n        count = 0\n        for i in range(k):\n            if arr1[i] < arr2[count]:\n                count += 1\n        return arr1[i]\n    \n    # Function to get kth element from two sorted arrays.\n    def get_kth_2(arr1, arr2, k):\n        count = 0\n        for i in range(len(arr1)):\n            if arr1[i] < arr2[count]:\n                count += 1\n        return arr1[count]\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_3(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] > arr2[i]:\n                l -= 1\n        return arr1[l]\n    \n    # Function to get kth element from two sorted arrays.\n    def get_kth_4(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] > arr2[i]:\n                l -= 1\n            if arr1[l] > arr2[l]:\n                l -= 1\n        return arr1[l]\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_5(arr1, arr2, k):\n        if k == 1:\n            return get_kth_2(arr1, arr2, k)\n        else:\n            return get_kth_3(arr1, arr2, k)\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_6(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] > arr2[i]:\n                l -= 1\n        return arr1[l]\n        \n    # Function to get kth element from two sorted arrays.\n    def get_kth_7(arr1, arr2, k):\n        l = k\n        for i in range(k):\n            if arr1[i] < arr2[i]:\n                l -= 1\n            if arr1[l] > arr2[l]:\n                l -= 1\n        return arr1[l]\n    \n    if arr1 == arr2:\n        return arr1[k]\n    else:\n        if k == len(arr1):\n            return get_kth(arr1, arr2, k)\n        else:\n            return get_kth_2(arr1, arr2, k)\n        \n    ",
        "test": "assert     find_kth(['1','4','7','9'],['4','7','8','9'],4),'incorrect'",
        "num_ids": 1232
    },
    {
        "number": 598,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    arr = []\n    s = ''\n    num = number\n    while num > 0:\n        arr.append(num % 10)\n        num = num // 10\n    for i in range(len(arr)):\n        s = str(arr[i]) + s\n    if len(s) == len(set(s)):\n        return True\n    else:\n        return False\n",
        "test": "assert     armstrong_number(7) == True",
        "num_ids": 519
    },
    {
        "number": 599,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        sum += i\n    return sum/number\n",
        "test": "assert     sum_average(1) == 1",
        "num_ids": 322
    },
    {
        "number": 600,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n",
        "test": "assert     is_Even(12) == True",
        "num_ids": 179
    },
    {
        "number": 602,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    repeat = []\n    for i in range(len(str1)):\n        if str1[i] not in repeat:\n            repeat.append(str1[i])\n        else:\n            return str1[i]\n    \n    return '_'\n",
        "test": "assert ",
        "num_ids": 515
    },
    {
        "number": 603,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(1,n+1):\n        ludic.append(i)\n        if i%10==9:\n            ludic.append(i)\n    return ludic\n",
        "test": "assert     get_ludic(6) == [1,2,3,4,5,6]",
        "num_ids": 414
    },
    {
        "number": 604,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    split_words = s.split(' ')\n    list_words = []\n    for word in split_words:\n        list_words.append(word[::-1])\n    return''.join(list_words)\n",
        "test": "assert     reverse_words('') == ''",
        "num_ids": 378
    },
    {
        "number": 605,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    \n    if num == 2 or num == 3:\n        return True\n    elif num % 2 == 0 or num % 3 == 0:\n        return False\n    else:\n        for i in range(5, num - 1, 6):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert not prime_num(56)",
        "num_ids": 532
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    degree = degree % 360\n    degree_rad = math.radians(degree)\n    return degree_rad\n",
        "test": "assert     radian_degree(0) == 0",
        "num_ids": 236
    },
    {
        "number": 607,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Find the end index of the pattern\n    i = pattern.find('.')\n    # If the pattern is not found anywhere, return the whole text\n    if i == -1:\n        return text, 0, len(text)\n    # Otherwise, find the start index of the pattern\n    else:\n        # Find the start index of the pattern\n        i = pattern.find('{', i+1)\n        # Find the end index of the pattern\n        j = pattern.find('}', i+1)\n        # Return the matching substring, its start index and its end index\n        return text[i:j+1], i, j+1\n",
        "test": "assert     find_literals(\"\", \"\") == (\"\", 0, 0)",
        "num_ids": 484
    },
    {
        "number": 608,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # Write your code here\n    # return nth_bell_number\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    elif n==2:\n        return 1\n    else:\n        return bell_Number(n-1)+bell_Number(n-2)\n",
        "test": "assert     bell_Number(4) == 3",
        "num_ids": 349
    },
    {
        "number": 610,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    \n    return list1[L:]\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 2), 'test fails'",
        "num_ids": 454
    },
    {
        "number": 611,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_val = test_list[0][N-1]\n    for i in range(1, len(test_list)):\n        if test_list[i][N-1] > max_val:\n            max_val = test_list[i][N-1]\n    return max_val\n    \n",
        "test": "assert     max_of_nth([[1,2,3], [3,4,5], [5,6,7]], 2) == 6, \"Matrix is not correct\"",
        "num_ids": 2766
    },
    {
        "number": 612,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_of_lists = []\n    for i in range(len(lst)):\n        temp_lst = []\n        for j in range(len(lst[i])):\n            temp_lst.append(lst[i][j])\n        lst_of_lists.append(temp_lst)\n    return lst_of_lists\n",
        "test": "assert     merge([[1, 2], [3, 4]]) == [[1, 2], [3, 4]]",
        "num_ids": 747
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cumulative_sum = 0\n    for item in test_list:\n        cumulative_sum = cumulative_sum + item\n    return cumulative_sum\n",
        "test": "assert     cummulative_sum([]) == 0, \"test_1 is incorrect\"",
        "num_ids": 311
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # Not a real solution, just try to have it execute as fast as possible!\n    return [round(sum(n) / len(n), 2) for n in zip(*nums)]\n",
        "test": "assert     average_tuple((1,2,3,4,5,6,7,8,9)) == [1.5, 2.5, 3.5, 4.5, 5.5, 6.5, 7.5, 8.5, 9.5]",
        "num_ids": 2589
    },
    {
        "number": 616,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    modulo_tuple = tuple((x % y) for x, y in zip(test_tup1, test_tup2))\n    return modulo_tuple\n",
        "test": "assert     tuple_modulo((3,3,3), (3,3,3)) == (0, 0, 0)",
        "num_ids": 692
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    count = 0\n    for i in range(steps):\n        count += (i+1) % 2\n    if steps % 2 == 0:\n        return count % d\n    else:\n        return count % (d+1)\n",
        "test": "assert     min_Jumps(1, 2) == 1",
        "num_ids": 543
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    \n    list_nums = nums1 + nums2\n    list_nums.sort()\n    index = 0\n    \n    if len(list_nums) % 2 == 1:\n        return list_nums\n    \n    while index < len(list_nums):\n        \n        if index < len(list_nums) - 1:\n            if list_nums[index] > list_nums[index + 1]:\n                index += 1\n        \n        if index == len(list_nums) - 1:\n            return list_nums[index:len(list_nums)]\n        \n        if list_nums[index] > list_nums[index + 1]:\n            return list_nums[index:index + 2]\n    \n        index += 1\n    \n    return list_nums\n    \nnums1 = [1, 3, 4]\nnums2 = [2, 5, 6]\nnums3 = []\nnums4 = [1, 2, 3, 4]\n",
        "test": "assert     div_list([3, 4, 6, 8, 10], [3, 4, 6, 8, 10, 12]) == [3, 4, 6, 8, 10]",
        "num_ids": 1100
    },
    {
        "number": 619,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = list(test_str)\n    for i in range(len(num_list)):\n        num_list[i] = str(num_list[i])\n    return ''.join(num_list)\n    \n",
        "test": "assert     move_num('10001') == '10001'",
        "num_ids": 632
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_subset = 0\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] % a[j] == 0:\n                break\n        else:\n            max_subset = max(max_subset, len(a[i:j+1]))\n    return max_subset\n",
        "test": "assert     largest_subset([]) == 0",
        "num_ids": 630
    },
    {
        "number": 622,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return None\n",
        "test": "assert     get_median([], [2, 1], 1) == 2",
        "num_ids": 561
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert len(nums) > 0, \"Cannot be 0\"\n    assert n >= 1, \"Cannot be less than 1\"\n    if n == 0:\n        return [1]\n    elif n == 1:\n        return nums\n    elif n > 1:\n        power = nth_nums(nums[1:],n-1)\n        answer = nums[0]\n        for power_item in power:\n            answer = answer**power_item\n        return answer\n    else:\n        return None\n",
        "test": "assert     (nth_nums([1, 2, 3, 4, 5], 3) == [1, 9, 25])",
        "num_ids": 372
    },
    {
        "number": 624,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n",
        "test": "assert     is_upper(\"he\") == \"He\"",
        "num_ids": 294
    },
    {
        "number": 625,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert     swap_List([1, 2, 3]) == [3, 2, 1]",
        "num_ids": 378
    },
    {
        "number": 626,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (r**2) + (r-1)**2\n    b = 2*(r**2-r-1)\n    c = (r+1)**2\n    return (a+b+c)**0.5\n",
        "test": "assert ",
        "num_ids": 292
    },
    {
        "number": 627,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if start >= end:\n        return None\n    if array[start] == array[end]:\n        return array[start]\n    index = (start+end)//2\n    value = array[start]\n    while index >= 0 and array[index] > value:\n        array[index+1] = array[index]\n        index += 1\n    array[index+1] = value\n    return index+1\n",
        "test": "assert ",
        "num_ids": 655
    },
    {
        "number": 628,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    # replace spaces in string with %20\n    string = string.replace(' ', '%20')\n    # return string\n    return string\n",
        "test": "assert     replace_spaces(\"This is a test.\\n\") == 'This%20is%20a%20test.\\n'",
        "num_ids": 339
    },
    {
        "number": 629,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list\n",
        "test": "assert     Split([]) == []",
        "num_ids": 571
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        return sub[0]\n    else:\n        sub.append(ele)\n        return adjac(ele[0], sub) + adjac(ele[1], sub)\n",
        "test": "assert     (adjac([0,0], [0,2]) == [0,1]) == True",
        "num_ids": 601
    },
    {
        "number": 631,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = ''\n    for i in text:\n        if i!='':\n            result += i\n        else:\n            result += '_'\n    return result\n",
        "test": "assert     replace_spaces(\"\") == \"\"",
        "num_ids": 616
    },
    {
        "number": 632,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in num_list:\n        if i == 0:\n            return num_list.pop()\n    return num_list\n    \ndef count_zeros(num_list):\n    '''\n    Write a python function to count the number of zeros in the given list.\n    '''\n    num_zeros = 0\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_zeros += 1\n    return num_zeros\n    \ndef reverse(num_list):\n    '''\n    Write a python function to reverse the order of the elements in a given list.\n    '''\n    num_list = num_list[::-1]\n    return num_list\n",
        "test": "assert     move_zero([0,0,0,0,0]) == 0",
        "num_ids": 339
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    result = 0\n    for i in range(n-1) : \n        result += (arr[i] ^ arr[i+1])\n    return result \n",
        "test": "assert pair_xor_Sum([1,2,3,4,5], 0) == 0, \"Pair_xor_Sum(2,0) should be equal to 0\"",
        "num_ids": 610
    },
    {
        "number": 635,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # TODO: Write your code here\n    # Your code here\n    return iterable\n",
        "test": "assert     len(heap_sort([])) == 0, \"The heap_sort should return an empty list.\"",
        "num_ids": 522
    },
    {
        "number": 637,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    # Check whether the sale amount is less than the amount\n    # that the amount of purchase made on sale price is not greater than the amount of sale\n    if sale_amount <= actual_cost:\n        # Check whether the sale amount is less than the amount that the actual cost is\n        if sale_amount <= actual_cost/100:\n            return True\n        else:\n            # Check whether the actual cost is less than the sale amount\n            return False\n    else:\n        # Check whether the sale amount is greater than the actual cost\n        return True\n",
        "test": "assert     noprofit_noloss(47,10) == False",
        "num_ids": 483
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    temp=v*(9/5)+32\n    return math.ceil(temp+(temp/100))\n",
        "test": "assert     wind_chill(55,0) == 40",
        "num_ids": 443
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    final_names = []\n    for i in sample_names:\n        if len(i.lower())>0:\n            final_names.append(i)\n    \n    return len(final_names)\n",
        "test": "assert     sample_nam(sample_names), \"Error: the input list of names has no valid characters.\"",
        "num_ids": 2617
    },
    {
        "number": 640,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = []\n    for i in range(len(items)):\n        if items[i] == '(':\n            new_items.append('(')\n        else:\n            new_items.append(items[i])\n    return new_items\n",
        "test": "assert     remove_parenthesis(\"(())()\"), 'The function is not correct'",
        "num_ids": 678
    },
    {
        "number": 641,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n - 1\n    if (n % 2 == 1):\n        return n\n    else:\n        return n // 2\n",
        "test": "assert     is_nonagonal(2)",
        "num_ids": 471
    },
    {
        "number": 643,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = re.compile(\"z\")\n    if pattern.search(text):\n        return False\n    else:\n        return True\n    \ndef text_match_wordz_start_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start of the word.\n    '''\n    pattern = re.compile(\"z\")\n    if pattern.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_wordz_middle(\"asdfadsfg\"), \"incorrect string\"",
        "num_ids": 687
    },
    {
        "number": 644,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    j = 0\n    result = []\n    while j < len(input):\n        result.append(input[j])\n        j += k\n",
        "test": "assert ",
        "num_ids": 569
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = tuple(test_tup)\n    test_tup = tuple(test_tup)\n    test_dict = tuple(test_dict)\n",
        "test": "assert     (add_dict_to_tuple((\"a\", \"b\"), {\"c\": \"d\"})!= (\"a\", \"b\", \"d\"))",
        "num_ids": 631
    },
    {
        "number": 721,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    N = len(cost)\n    maxAverage = 0\n    currTotal = 0\n    for i in range(N):\n        for j in range(N):\n            currTotal += cost[i][j]\n            if currTotal > maxAverage:\n                maxAverage = currTotal\n    return maxAverage/N\n",
        "test": "assert     maxAverageOfPath([[3, 4, 8],[7, 6, 5]]) == 10",
        "num_ids": 1001
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    #initialize results\n    results = []\n",
        "test": "assert     filter_data({\"Ajay\": (200, 100)}, 150, 100) == False",
        "num_ids": 587
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    res = 0\n    for i,j in zip(nums1,nums2):\n        if eq(i,j):\n            res += 1\n    return res\n",
        "test": "assert     count_same_pair([1,1], [1,1]) == 2",
        "num_ids": 615
    },
    {
        "number": 724,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base) if i.isdigit()])\n",
        "test": "assert     power_base_sum(1, 3) == 1",
        "num_ids": 330
    },
    {
        "number": 725,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = re.sub(\"\u2018\", \"\", text1)\n    text = re.sub(\"\u2019\", \"\", text)\n    text = re.sub(\"\u201c\", \"\", text)\n    text = re.sub(\"\u201d\", \"\", text)\n    text = re.sub(\"\u2018\", \"\", text)\n    text = re.sub(\"\u00b4\", \"\", text)\n    return text\n",
        "test": "assert     extract_quotation('polo a meu') == 'polo a meu'",
        "num_ids": 598
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    t_len = len(test_tup)\n    t_i = 0\n    t_i_max = 0\n    t_i_min = 0\n    for i in range(t_len-1):\n        t_i = i+1\n        t_i_max = max(t_i,t_i_max)\n        t_i_min = min(t_i,t_i_min)\n        if t_i%2 == 0:\n            t_i_tot = t_i_min\n        else:\n            t_i_tot = t_i_max\n        test_tup[i] = t_i_tot\n    return test_tup\n",
        "test": "assert ",
        "num_ids": 546
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    # Your code here\n    s=0\n    for i in lst1:\n        s=s+i\n    for i in lst2:\n        s=s+i\n    return s\n    #raise NotImplementedError\n",
        "test": "assert     sum_list([1,2,3,4,5], [2,3,4,5,6]) == [5,7,9,10,12]",
        "num_ids": 2352
    },
    {
        "number": 730,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(dict.fromkeys(nums))\n",
        "test": "assert     consecutive_duplicates([0, 1, 1, 2, 2, 3, 3, 3, 4]) == [0, 1, 2, 3, 4]",
        "num_ids": 622
    },
    {
        "number": 731,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    from math import cos, sin, tan, sqrt, log2, pi\n    # From https://www.esrl.esr.es/team/tr/lateral.html#index.lateral.cone\n",
        "test": "assert ",
        "num_ids": 2549
    },
    {
        "number": 732,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = '\\s+'\n    replace = ':\\'\\''\n    text = re.sub(pattern, replace, text)\n    return text\n",
        "test": "assert     replace_specialchar('') == '', 'Empty input string is not allowed'",
        "num_ids": 2557
    },
    {
        "number": 733,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = 0\n    while (i + 1 < len(A) and A[i] == A[i + 1]):\n        i += 1\n    return i\n",
        "test": "assert     find_first_occurrence([1,2,3,4,5,6,7,8,9,10], 5) == 0",
        "num_ids": 2536
    },
    {
        "number": 734,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    \n    prod=1\n    l=len(arr)\n    for i in range(1,l):\n        prod=prod*(arr[i]+arr[i-1])\n    \n    return prod\n",
        "test": "assert sum_Of_Subarray_Prod(arr=[2,4]) == 10",
        "num_ids": 2996
    },
    {
        "number": 735,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return (int)((n&1) | ((n&(n-1)) >> 1))\n",
        "test": "assert set_middle_bits(1)",
        "num_ids": 270
    },
    {
        "number": 736,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 25,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    start = bisect.bisect(a, x)\n    if start == len(a):\n        return start - 1\n    elif a[start] < x:\n        return start\n    else:\n        return start + 1\n",
        "test": "assert     left_insertion(a=[5, 2, 3, 6, 7, 4], x=3) == 4",
        "num_ids": 455
    },
    {
        "number": 737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.search(regex, string)\n    return match!= None\n",
        "test": "assert ",
        "num_ids": 208
    },
    {
        "number": 738,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 6\n    elif n > 3:\n        return geometric_sum(n-1) + 6 * geometric_sum(n-2) + 3 * geometric_sum(n-3)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 314
    },
    {
        "number": 739,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 0: \n        return -1\n    if n == 1: \n        return 0\n    if n == 2: \n        return 1\n    if n == 3: \n        return 2\n    if n == 4: \n        return 3\n    if n == 5: \n        return 4\n    if n == 6: \n        return 5\n    if n == 7: \n        return 6\n    if n == 8: \n        return 7\n    if n == 9: \n        return 8\n    if n == 10: \n        return 9\n    if n == 11: \n        return 10\n    if n == 12: \n        return 11\n    if n == 13: \n        return 12\n    if n == 14: \n        return 13\n    if n == 15: \n        return 14\n    if n == 16: \n        return 15\n    if n == 17: \n        return 16\n    if n == 18: \n        return 17\n    if n == 19: \n        return 18\n    if n == 20: \n        return 19\n    if n == 21: \n        return 20\n    if n == 22: \n        return 21\n    if n == 23: \n        return 22\n    if n == 24: \n        return 23\n    if n == 25: \n        return 24\n    if n == 26: \n        return 25\n    if n == 27: \n        return 26\n    if n == 28: \n        return 27\n    if n == 29: \n        return 28\n    if n == 30: \n        return 29\n    if n == 31: \n        return 30\n    if n == 32: \n        return 31\n    if n == 33: \n        return 32\n    if n == 34: \n        return 33\n    if n == 35: \n        return 34\n    if n == 36: \n        return 35\n    if n == 37: \n        return 36\n    if n == 38: \n        return 37\n    if n == 39: \n        return 38\n    if n == 40: \n        return 39\n    if n == 41: \n        return 40\n    if n == 42: \n        return 41\n    if n == 43: \n        return 42\n    if n == 44: \n        return 43\n    if n == 45: \n        return 44\n    if n == 46: \n        return 45\n    if n == 47: \n        return 46\n    if n == 48: \n        return 47\n    if n == 49: \n        return 48\n    if n == 50: \n        return 49\n    if n == 51: \n        return 50\n    if n == 52: \n        return 51\n    if n == 53: \n        return 52\n    if n == 54: \n        return 53\n    if n == 55: \n        return 54\n    if n == 56: \n        return 55\n    if n == 57: \n        return 56\n    if n == 58: \n        return 57\n    if n == 59: \n        return 58\n    if n == 60: \n        return 59\n    if n == 61: \n        return 60\n    if n == 62: \n        return 61\n    if n == 63: \n        return 62\n    if n == 64: \n        return 63\n    if n == 65: \n        return 64\n    if n == 66: \n        return 65\n    if n == 67: \n        return 66\n    if n == 68: \n        return 67\n    if n == 69: \n        return 68\n    if n == 70: \n        return 69\n    if n == 71: \n        return 70\n    if n == 72: \n        return 71\n    if n == 73: \n        return 72\n    if n == 74: \n        return 73\n    if n == 75: \n        return 74\n    if n == 76: \n        return 75\n    if n == 77: \n        return 76\n    if n == 78: \n        return 77\n    if n == 79: \n        return 78\n    if n == 80: \n        return 79\n    if n == 81: \n        return 80\n    if n == 82: \n        return 81\n    if n == 83: \n        return 82\n    if n == 84: \n        return 83\n    if n == 85: \n        return 84\n    if n == 86: \n        return 85\n    if n == 87: \n        return 86\n    if n == 88: \n        return 87\n    if n == 89: \n        return 88\n    if n == 90: \n        return 89\n    if n == 91: \n        return 90\n    if n == 92: \n        return 91\n    if n == 93: \n        return 92\n    if n == 94: \n        return 93\n    if n == 95: \n        return 94\n    if n == 96: \n        return 95\n    if n == 97: \n        return 96\n    if n == 98: \n        return 97\n    if n == 99: \n        return 98\n    if n == 100: \n        return 99\n    if n == 101: \n        return 100\n    if n == 102: \n        return 101\n    if n == 103: \n        return 102\n    if n == 104: \n        return 103\n    if n == 105: \n        return 104\n    if n == 106: \n        return 105\n    if n == 107: \n        return 106\n    if n == 108: \n        return 107\n    if n == 109: \n        return 108\n    if n == 110: \n        return 109\n    if n == 111: \n        return 110\n    if n == 112: \n        return 111\n    if n == 113: \n        return 112\n    if n == 114: \n        return 113\n    if n == 115: \n        return 114\n    if n == 116: \n        return 115\n    if n == 117: \n        return 116\n    if n == 118: \n        return 117\n    if n == 119: \n        return 118\n    if n == 120: \n        return 119\n    if n == 121: \n        return 120\n    if n == 122: \n        return 121\n    if n == 123: \n        return 122\n    if n == 124: \n        return 123\n    if n == 125: \n        return 124\n    if n == 126: \n        return 125\n    if n == 127: \n        return 126\n    if n == 128: \n        return 127\n    if n == 129: \n        return 128\n    if n == 130: \n        return 129\n    if n == 131: \n        return 130\n    if n == 132: \n        return 131\n    if n == 133: \n        return 132\n    if n == 134: \n        return 133\n    if n == 135: \n        return 134\n    if n == 136: \n        return 135\n    if n == 137: \n        return 136\n    if n == 138: \n        return 137\n    if n == 139: \n        return 138\n    if n == 140: \n        return 139\n    if n == 141: \n        return 140\n    if n == 142: \n        return 141\n    if n == 143: \n        return 142\n    if n == 144: \n        return 143\n    if n == 145: \n        return 144\n    if n == 146: \n        return 145\n    if n == 147: \n        return 146\n    if n == 148: \n        return 147\n    if n == 149: \n        return 148\n    if n == 150: \n        return 149\n    if n == 151: \n        return 150\n    if n == 152: \n        return 151\n    if n == 153: \n        return 152\n    if n == 154: \n        return 153\n    if n == 155: \n        return 154\n    if n == 156: \n        return 155\n    if n == 157: \n        return 156\n    if n == 158: \n        return 157\n    if n == 159: \n        return 158\n    if n == 160: \n        return 159\n    if n == 161: \n        return 160\n    if n == 162: \n        return 161\n    if n == 163: \n        return 162\n    if n == 164: \n        retur",
        "test": "assert     find_Index(1) == 0, \"Please pass an integer value\"",
        "num_ids": 4447
    },
    {
        "number": 740,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    return {t[0] : t[1] for t in test_tup}\n",
        "test": "assert     (tuple_to_dict([]) == {}), \"Empty dict\"",
        "num_ids": 848
    },
    {
        "number": 741,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #characters = ['a', 'b', 'c', 'd']\n    characters = list(s)\n    count = 0\n    for char in characters :\n        if char == characters[count] :\n            count+=1\n        else :\n            count = 0\n    if count == len(characters):\n        return True\n    else :\n        return False",
        "test": "assert     all_Characters_Same(\"abc\") == True",
        "num_ids": 463
    },
    {
        "number": 742,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    a_a = a*a\n    b_b = b*b\n    c_c = c*c\n    \n    area = a_a+b_b+c_c\n    \n    return area\n    \ndef area_sphere(sphere):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    \n    return 0.5*math.pow(sphere[0],2) + 0.5*math.pow(sphere[1],2) + 0.5*math.pow(sphere[2],2)\n    \ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of an octahedron.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    d = b*b-4*a*c\n    e = b*b-2*a*c\n    f = b*b-a*c\n    \n    if d < 0:\n        print(\"Not a valid octahedron\")\n        return False\n    \n    if e < 0:\n        print(\"Not a valid octahedron\")\n        return False\n    \n    if f < 0:\n        print(\"Not a valid octahedron\")\n        return False\n    \n    area = (math.sqrt(d)/2) * math.sqrt(f) * math.sqrt(e)\n    \n    return area\n    \ndef area_tetrahedron_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    d = a*a\n    e = b*b\n    f = c*c\n    \n    if d < 0:\n        print(\"Not a valid tetrahedron\")\n        return False\n    \n    if e < 0:\n        print(\"Not a valid tetrahedron\")\n        return False\n    \n    if f < 0:\n        print(\"Not a valid tetrahedron\")\n        return False\n    \n    area = (math.sqrt(d)/2) * math.sqrt(f) * math.sqrt(e)\n    \n    return area\n    \ndef area_sphere_sphere(sphere):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    \n    area = 0\n    \n    for i in range(3):\n        if sphere[i] == 0:\n            continue\n        else:\n            area += math.pow(sphere[i],2)\n            \n    return area\n    \ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    return math.pow(a,2) + math.pow(b,2) + math.pow(c,2)\n    \ndef area_sphere_sphere(sphere):\n    '''\n    Write a function to caluclate the area of a sphere.\n    '''\n    \n    area = 0\n    \n    for i in range(3):\n        if sphere[i] == 0:\n            continue\n        else:\n            area += math.pow(sphere[i],2)\n            \n    return area\n    \ndef area_box(side):\n    '''\n    Write a function to caluclate the area of a box.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    area = (a*b)/2 + c*b\n    \n    return area\n    \ndef area_circle(center, radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    \n    return math.pi*(radius**2)\n    \ndef area_triangle(side):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    \n    return (side[0]*side[1] + side[0]*side[2])*(side[0]*side[1] + side[0]*side[2])\n    \ndef area_cone(side):\n    '''\n    Write a function to caluclate the area of a cone.\n    '''\n    \n    s = side[0]\n    b = side[1]\n    r = side[2]\n    \n    return (s*b)/2 + r*(r + s)/2\n    \ndef area_cylinder(side):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    \n    s = side[0]\n    r = side[1]\n    \n    return 0.5*math.pow(r,2) + (s*r)/2\n    \ndef area_rhombus(side):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    return 0.5*math.pow(a,2) + 0.5*math.pow(b,2) + 0.5*math.pow(c,2)\n    \ndef area_heptagon(side):\n    '''\n    Write a function to caluclate the area of a heptagon.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    return 0.5*math.pow(a,2) + 0.5*math.pow(b,2) + 0.5*math.pow(c,2)\n    \ndef area_octagon(side):\n    '''\n    Write a function to caluclate the area of an octagon.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    d = b*b - 4*a*c\n    e = b*b - 2*a*c\n    f = b*b - a*c\n    \n    if d < 0:\n        print(\"Not a valid octagon\")\n        return False\n    \n    if e < 0:\n        print(\"Not a valid octagon\")\n        return False\n    \n    if f < 0:\n        print(\"Not a valid octagon\")\n        return False\n    \n    area = (math.sqrt(d)/2) * math.sqrt(f) * math.sqrt(e)\n    \n    return area\n    \ndef area_pentagon(side):\n    '''\n    Write a function to caluclate the area of a pentagon.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    d = b*b - 4*a*c\n    e = b*b - 2*a*c\n    f = b*b - a*c\n    \n    if d < 0:\n        print(\"Not a valid pentagon\")\n        return False\n    \n    if e < 0:\n        print(\"Not a valid pentagon\")\n        return False\n    \n    if f < 0:\n        print(\"Not a valid pentagon\")\n        return False\n    \n    area = (math.sqrt(d)/2) * math.sqrt(f) * math.sqrt(e)\n    \n    return area\n    \ndef area_septagon(side):\n    '''\n    Write a function to caluclate the area of a septagon.\n    '''\n    \n    a = side[0]\n    b = side[1]\n    c = side[2]\n    \n    d = b*b - 4*a*c\n    e = b*b - 2*a*c\n    f = b*b - a*c\n    \n    if d < 0:\n        print(\"Not a valid septagon\")\n        return False\n    \n    if e < ",
        "test": "assert         area_tetrahedron(2) == 4",
        "num_ids": 379
    },
    {
        "number": 743,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(len(list)):\n        j=i\n        while j >= 0 and list[i] < list[j]:\n            list[i], list[j] = list[j], list[i]\n            j -= 1\n    return list\n",
        "test": "assert     rotate_right([1,2,3,4,5,6,7], 1) == [1,2,3,4,5,6,7], \"Rotate_right_1\"",
        "num_ids": 626
    },
    {
        "number": 744,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert     check_none( (1,2,3,None,None) )",
        "num_ids": 344
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if endnum-startnum == 0:\n        return 1\n    elif startnum%10 == endnum%10:\n        return divisible_by_digits(startnum, endnum/10) + divisible_by_digits(startnum/10, endnum%10)\n    else:\n        return 0\n",
        "test": "assert     divisible_by_digits(42,0) == 0, 'Check divisible_by_digits'",
        "num_ids": 480
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    elif a > 45:\n        print('Angle is out of range')\n    elif r < 50:\n        print('Radius is out of range')\n    elif r > 50:\n        if r > 50:\n            r1 = math.sqrt(math.pow(r - 50, 2) + math.pow(r - 50, 2))\n            if r1 == 0:\n                return None\n            elif r1 < r:\n                if math.pi / 4 < math.pi * r1 / (r - 50):\n                    return None\n                else:\n                    return math.pi * r1 / (r - 50)\n        else:\n            r1 = math.sqrt(math.pow(r - 50, 2) + math.pow(r - 50, 2))\n            if r1 == 0:\n                return None\n            elif r1 < r:\n                if math.pi / 4 < math.pi * r1 / (r - 50):\n                    return None\n                else:\n                    return math.pi * r1 / (r - 50)\n    else:\n        return None\n",
        "test": "assert     sector_area(.0,0.0) == None",
        "num_ids": 580
    },
    {
        "number": 747,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    # A longest common subsequence of three strings is defined as the minimum\n    # distance from any two letters of each string to a single letter.\n    # For example, the shortest sequence of two strings is \"abc\" and \"def\",\n    # the longest common subsequence of \"abc\" and \"def\" is \"acd\".\n    \n    # Note: The strings are immutable.\n    \n    n = len(X)\n    m = len(Y)\n    \n    # Find the length of the longest common subsequence\n    # from the first string to the last string\n    def lcs_longest_common_subsequence(s1, s2, s3):\n        # Create the length of the longest common subsequence\n        # using recurrence\n        lcs = [[0]*(m+1) for _ in range(n+1)]\n        lcs[0][0] = 0\n        for i in range(1, n+1):\n            lcs[i][0] = 1\n        for j in range(1, m+1):\n            lcs[0][j] = 0\n        for i in range(1, n+1):\n            for j in range(1, m+1):\n                if X[i-1] == Y[j-1]:\n                    lcs[i][j] = lcs[i-1][j-1] + 1\n                else:\n                    lcs[i][j] = max(lcs[i-1][j], lcs[i][j-1])\n        return lcs[n][m]\n    \n    return lcs_longest_common_subsequence(X, Y, Z)\n",
        "test": "assert     lcs_of_three(\"abcd\", \"bc\", \"dbf\") == 3, \"incorrect answer\"",
        "num_ids": 1525
    },
    {
        "number": 748,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'^[A-Z]',' ',str1)\n    str1 = re.sub(r'[a-z]',' ',str1)\n    str1 = re.sub(r'\\s+',' ',str1)\n    str1 = str1.split(' ')\n    str1 = [str1[i].capitalize() if'' not in str1[i] else str1[i].capitalize() for i in range(len(str1))]\n    str1 =''.join(str1)\n    return str1\n",
        "test": "assert not (capital_words_spaces(\"Albero\"))",
        "num_ids": 811
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    list_copy = nums_str.copy()\n    nums_str.sort()\n    print(nums_str)\n    for i in range(len(list_copy)):\n        for j in range(len(list_copy)-1):\n            if list_copy[j] > list_copy[j+1]:\n                list_copy[j],list_copy[j+1] = list_copy[j+1],list_copy[j]\n    print(nums_str)\n    return nums_str\n",
        "test": "assert     sort_numeric_strings([1, 2, 3, 4, 5, 6]) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 730
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.extend(test_tup)\n",
        "test": "assert     add_tuple([(1, 2, 3), (4, 5, 6), (7, 8, 9)], ((2, 3, 4), (5, 6, 7), (8, 9, 10))) == \\",
        "num_ids": 483
    },
    {
        "number": 751,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i < len(arr) and arr[i] > arr[-1]:\n        return False\n    return True\n",
        "test": "assert     check_min_heap_helper([1,2,3,4,5], 0) == True",
        "num_ids": 324
    },
    {
        "number": 752,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return int(n)\n    \ndef jacobsthal_den(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    return int(n)**2\n    \ndef jacobsthal_roots(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    return abs(int(n))\n",
        "test": "assert     jacobsthal_num(1) == 1",
        "num_ids": 507
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # your code here\n    return test_list\n",
        "test": "assert     min_k([1,2,3,4,5,6,7,8,9,10], 2), \"Wrong Output\"",
        "num_ids": 689
    },
    {
        "number": 754,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index = [i for i, x in enumerate(l1) if x in l2 and x in l3]\n    index2 = [i for i, x in enumerate(l2) if x in l1 and x in l3]\n    index3 = [i for i, x in enumerate(l3) if x in l1 and x in l2]\n    index = list(set(index) & set(index2) & set(index3))\n    return index\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 710
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers)\n",
        "test": "assert     second_smallest([2, 2, 2]) == 2, \"should be 2\"",
        "num_ids": 345
    },
    {
        "number": 756,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_lower = text.lower()\n    pattern = \"a(b)*\"\n    if re.search(pattern, text_lower):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_zero_one('ab') == True",
        "num_ids": 742
    },
    {
        "number": 757,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    # Edge cases\n    if len(test_list) < 2:\n        return 0\n    elif len(test_list) == 2:\n        return 1\n    elif len(test_list) == 3:\n        return 1\n    \n    count = 0\n    for i in range(0, len(test_list)-1):\n        if test_list[i] == test_list[i+1]:\n            count = count + 1\n    return count\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 721
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # TODO: Use the collections module to help create a dictonary from a list\n    # https://www.w3schools.com/python/python_dictionaries.asp\n    # Also, you will need to use the collections.Counter module to help generate a dictionary from a list.\n",
        "test": "assert ",
        "num_ids": 454
    },
    {
        "number": 759,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if '.' in num:\n        num = num.replace('.', '', 1)\n    for n in num:\n        if not n.isdigit():\n            return False\n        if n == 'e' or n == 'E':\n            return False\n    return True\n",
        "test": "assert     is_decimal('a')==False",
        "num_ids": 364
    },
    {
        "number": 760,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return len(set(arr)) == 1\n    # if len(set(arr)) == 1:\n    #     return True\n    # return False\n",
        "test": "assert     unique_Element([3,3,2,2]) == False, \"The function is incorrect!\"",
        "num_ids": 608
    },
    {
        "number": 762,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumber_number(1) == True, \"Month number should be 1 or more\"",
        "num_ids": 2394
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min=arr[0]\n    for i in range(1,len(arr)):\n        if min>arr[i]:\n            min=arr[i]\n    return min\n",
        "test": "assert     find_min_diff([1, 3, 5, 6], 2) == 1 ",
        "num_ids": 714
    },
    {
        "number": 764,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr(\"Hello\") == 0",
        "num_ids": 310
    },
    {
        "number": 765,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 40,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    divisor = 1\n    while(divisor*divisor <= n):\n        if n%divisor == 0:\n            return True\n        divisor += 1\n",
        "test": "assert     is_polite(1) == True",
        "num_ids": 410
    },
    {
        "number": 766,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    out = []\n    if len(l1) <= 0:\n        return []\n    else:\n        for x in range(len(l1)):\n            if x > 0 and l1[x] == l1[x - 1] and x > 0:\n                out.append((l1[x], l1[x - 1]))\n            else:\n                out.append(l1[x])\n    return out\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 569
    },
    {
        "number": 767,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    c = 0\n    for i in arr:\n        if sum == i:\n            c += 1\n    return c\n",
        "test": "assert     get_pairs_count([], 1000) == 0",
        "num_ids": 444
    },
    {
        "number": 769,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li1 = li1.copy()\n    li2 = li2.copy()\n    return li1-li2\n",
        "test": "assert ",
        "num_ids": 504
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    # take input from user\n    num = int(input(\"enter an odd natural number:\"))\n    # perform arithmetic calculation\n    if num % 2 == 0 :\n        sum = (num ** 4) + (num ** 2)\n        print(sum)\n    else :\n        print(\"n is invalid\")\n    # call function\n    return sum\n",
        "test": "assert     odd_num_sum(5) == 25, \"Test 2 failed\"",
        "num_ids": 250
    },
    {
        "number": 771,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    visited = set()\n    answer = True\n    for i in exp:\n        if i == ')':\n            if stack and stack[-1] == '(':\n                stack.pop()\n            else:\n                return answer\n        elif i == ']':\n            if stack and stack[-1] == '[':\n                stack.pop()\n            else:\n                return answer\n        elif i == '*':\n            if stack and stack[-1] == '*':\n                stack.pop()\n            else:\n                return answer\n        elif i == '+':\n            if stack and stack[-1] == '+':\n                stack.pop()\n            else:\n                return answer\n        elif i == '<':\n            if stack and stack[-1] == '<':\n                stack.pop()\n            else:\n                return answer\n        elif i == '>':\n            if stack and stack[-1] == '>':\n                stack.pop()\n            else:\n                return answer\n        elif i == '.':\n            if stack and stack[-1] == '.':\n                stack.pop()\n            else:\n                return answer\n        else:\n            return answer\n        visited.add(i)\n    if len(stack) > 0:\n        return answer\n    return answer\n",
        "test": "assert     check_expression('a+b') == True",
        "num_ids": 913
    },
    {
        "number": 772,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # 1. initialize the search_string \n    search_string = ''\n    # 2. initialize the result_string \n    result_string = ''\n    # 3. initialize the count \n    count = 0\n    # 4. iterate through the string \n    for i in range(len(test_str)):\n        # check if the length of the word \n        # is less than or equal to the k \n        if len(test_str[i]) <= K:\n            # append the word to the result_string \n            result_string += test_str[i]\n        # if the length of the word is greater than or equal to the k \n        else:\n            # if it is, remove the word from search_string \n            search_string += test_str[i][:K]\n            # if the length of the word is less than or equal to the k \n            if len(search_string) <= K:\n                # append the word to the result_string \n                result_string += search_string\n                # count the number of word found\n                count += 1\n                # if the length of the word is greater than or equal to the k \n                if len(search_string) >= K:\n                    # delete the search_string \n                    search_string = search_string[:K]\n    # 5. return the result_string \n    return result_string, count\n",
        "test": "assert ",
        "num_ids": 2789
    },
    {
        "number": 773,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    sub = re.findall(pattern, text)\n    for i in range(len(sub)):\n        if sub[i][0] in pattern:\n            if i < len(sub)-1:\n                if sub[i][0] == sub[i+1][0]:\n                    return i\n    return None\n    \ndef find_all_substring(text,pattern):\n    '''\n    Write a function to find all occurrences of the substrings within a string. Return a list of the results.\n    '''\n    sub = re.findall(pattern, text)\n    sub = [i for i in sub if i!= None]\n    return sub\n",
        "test": "assert     occurance_substring(\"SiamNguoi\",\"SiamNguoi\") is None",
        "num_ids": 500
    },
    {
        "number": 775,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 35,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    return [x for x in nums if x % 2!= 0]\n",
        "test": "assert     odd_position([])==[]",
        "num_ids": 322
    },
    {
        "number": 776,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_count = 0\n    for char in test_str:\n        if char in ['a', 'e', 'i', 'o', 'u']:\n            vowels_count += 1\n    return vowels_count\n",
        "test": "assert     count_vowels('') == 0, 'Should be 0'",
        "num_ids": 450
    },
    {
        "number": 777,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert     find_sum([]) == 0, 'Empty array given'",
        "num_ids": 244
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for i, elem in enumerate(list1):\n        if elem not in result:\n            result.append(elem)\n            if i > 0 and elem == result[i-1]:\n                result.append(result[i-1])\n            if i < len(list1) - 1:\n                result.append(result[i+1])\n    return result\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 1593
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 35,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 2504
    },
    {
        "number": 780,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # your code here\n    comb_list = []\n    for i in range(len(test_list)):\n        if test_list[i] not in comb_list:\n            comb_list.append(test_list[i])\n    return comb_list\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 665
    },
    {
        "number": 781,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 2): return False\n    if (n%2 == 0): return False\n    for i in range(3, int(math.sqrt(n))+1):\n        if (n%i == 0): return False\n    return True \n    \ndef is_prime(n) : \n    '''\n    Write a python function that returns whether a number is prime or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-56.php\n    '''\n    if n < 2 : \n        return False\n    if n == 2 : \n        return True\n    if n % 2 == 0 or n < 20 : \n        return False\n    \n    if n == 3 : \n        return True\n    if n % 3 == 0 or n < 19 : \n        return False\n    \n    i = 5\n    while i <= math.sqrt(n) : \n        if n % i == 0 or n % (i + 2) == 0 : \n            return False\n        i += 6\n    return True \n    \ndef find_smallest_primes(n) : \n    '''\n    Write a python function that returns the smallest positive prime number greater than or equal to n.\n    https://www.w3resource.com/python-exercises/basic/python-basic-3-exercise-55.php\n    '''\n    i = 2\n    while i < n : \n        if is_prime(i) and is_prime(n-i) : \n            return n-i\n        i += 1\n    return None\n    \ndef find_largest_prime_factors(n) : \n    '''\n    Write a python function that returns the largest positive prime factor of a number n.\n    https://www.w3resource.com/python-exercises/basic/python-basic-4-exercise-12.php\n    '''\n    i = 2\n    while i*i <= n : \n        if count_divisors(i*i) == False : \n            return None\n        i += 1\n    return i\n    \ndef is_prime_factor(n, p) : \n    '''\n    Write a python function that checks whether a number is prime or not.\n    https://www.w3resource.com/python-exercises/basic/python-basic-5-exercise-6.php\n    '''\n    i = 1\n    if n==1 : return False\n    while (i<=p-1) : \n        if n%i == 0 : \n            return False\n        i+=1\n    return True \n",
        "test": "assert     count_divisors(11) == True",
        "num_ids": 466
    },
    {
        "number": 782,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 30,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    length = len(arr)\n    while(length>=2):\n        for i in range(length-1):\n            total += arr[i]\n        total += arr[length-2]\n        length -= 1\n    return total\n",
        "test": "assert     odd_length_sum([]) == 0",
        "num_ids": 337
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    # convert to 0,1\n    r = r * 255\n    g = g * 255\n    b = b * 255\n    \n    # hue saturation value\n    h = 0\n    s = 0\n",
        "test": "assert     g == 0.0, \"The RGB value is wrong\"",
        "num_ids": 1223
    },
    {
        "number": 784,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    sum_even = 0\n    sum_odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            sum_even += i\n        else:\n            sum_odd += i\n    return sum_even * sum_odd\n",
        "test": "assert     mul_even_odd([]) == 0",
        "num_ids": 452
    },
    {
        "number": 785,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(int(i) for i in test_str.split(\",\"))\n",
        "test": "assert     tuple_str_int('1,2,3') == (1, 2, 3)",
        "num_ids": 2446
    },
    {
        "number": 786,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = 0\n    r = len(a) - 1\n    while True:\n        if l >= r:\n            return -1\n        mid = (l + r) // 2\n        if a[mid] > x:\n            r = mid\n        else:\n            l = mid + 1\n",
        "test": "assert     right_insertion([1,2,3,4,5,6,7,8],3) == -1",
        "num_ids": 452
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'([a-zA-Z\\n]+)b?'\n    matches = re.findall(pattern, text)\n    if matches == []:\n        return False\n    else:\n        return True\n",
        "test": "assert     text_match_three('Hello World') == True, \"TextMatchThree should return True.\"",
        "num_ids": 4392
    },
    {
        "number": 788,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list)\n",
        "test": "assert     new_tuple(['a', 'b', 'c', 'd'], 'abc') == ('a', 'b', 'c', 'd')",
        "num_ids": 916
    },
    {
        "number": 790,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 30,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n",
        "test": "assert     even_position([1,3,5,7,9]) == True",
        "num_ids": 276
    },
    {
        "number": 791,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    try:\n        if type(test_tup)!= tuple:\n            raise TypeError\n        tup = test_tup\n        tup = tuple(filter(lambda x: x!='', tup))\n        return tup\n    except TypeError:\n        raise TypeError('The given tuple is not valid')\n    except:\n        raise TypeError('An error has occured')\n",
        "test": "assert     remove_nested((1,2,3)) == (1,2,3), \"Expected the function to remove the given element\"",
        "num_ids": 453
    },
    {
        "number": 792,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 35,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += len(i)\n    return count\n",
        "test": "assert     count_list([]) == 0",
        "num_ids": 345
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i = len(arr) - 1\n    if arr[i] == x:\n        return i\n    if arr[i] > x:\n        return i - 1\n    if arr[i] < x:\n        return i + 1\n",
        "test": "assert last([1,2,3,4,5,6,7,8,9,10],6) == 8",
        "num_ids": 419
    },
    {
        "number": 794,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # Write your code here.\n    # input: str text\n    # output: the matched string\n    if re.search(\"a\\b\",text):\n        return(re.search(\"a\\b\",text).group(0))\n    else:\n        return(text)\n",
        "test": "assert     text_starta_endb('a')=='a'",
        "num_ids": 1054
    },
    {
        "number": 796,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    if len(dict.keys()) == 0:\n        return 0\n    \n    else:\n        return sum(dict.values())\n",
        "test": "assert     return_sum({1:2, 3:4, 5:6}) == 12, \"Success\"",
        "num_ids": 372
    },
    {
        "number": 797,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd=0\n    for i in range(n+1):\n        if i%2==0:\n            sum_odd+=i\n    return sum_odd\n",
        "test": "assert     sum_odd(6) == 12",
        "num_ids": 299
    },
    {
        "number": 798,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n",
        "test": "assert     _sum([1,2,3]) == 6, \"array must be an array\"",
        "num_ids": 269
    },
    {
        "number": 799,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d_num = n&(1<<d)\n    n = n|d_num\n    d = d-1\n    if d==0:\n        return n\n    return (n<<d)+(d_num<<32-d)\n    \ndef main():\n    '''\n    Write a function that rotates a number by d bits.\n    '''\n    # Allowed numbers range from 0 to 7\n    MAX_NUM = 7\n",
        "test": "assert     left_rotate(123, 1) == 123",
        "num_ids": 304
    },
    {
        "number": 800,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = re.compile(\"\\s\")\n    return pattern.sub(\" \", text)\n",
        "test": "assert     remove_all_spaces(\"\") == \"\"",
        "num_ids": 323
    },
    {
        "number": 801,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x==y==z):\n        return 3\n    elif (x>y>z):\n        return x-y-z\n    elif (x>z>y):\n        return x-z-y\n    elif (x>y>z):\n        return y-z-x\n    else:\n        return z-y-x\n",
        "test": "assert     test_three_equal(2,3,5) == 0",
        "num_ids": 409
    },
    {
        "number": 802,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    # count the number of rotations required to sort the array\n    count = 0\n    for i in range(len(arr)):\n        count += (arr[i] - 1) \n        \n    return count\n",
        "test": "assert     count_rotation(arr) == 5, \"incorrect number of rotations\"",
        "num_ids": 591
    },
    {
        "number": 803,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0:\n        return True\n    \n    if n == 1:\n        return False\n    \n    if n == 2:\n        return True\n    \n    if n % 2 == 0:\n        return False\n    \n    return is_perfect_square(n//2)\n    \n",
        "test": "assert     is_perfect_square(27) == False",
        "num_ids": 428
    },
    {
        "number": 804,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    n = len(arr) \n    if n % 2 == 0: \n        return True\n    else: \n        return False\n    \n",
        "test": "assert is_product_even([1,2,3]) == False",
        "num_ids": 368
    },
    {
        "number": 805,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    for x in lists:\n        for y in x:\n            if y > max_sum:\n                max_sum = y\n                max_list = x\n    return max_list\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 637
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 30,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    return max(sorted(test_str.count(u) for u in set(test_str)))\n",
        "test": "assert     max_run_uppercase('TEST'),'max_run_uppercase failed: should return \"TEST\"!'",
        "num_ids": 492
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_list = []\n    odd = 0\n    for number in nums:\n        if number % 2!= 0:\n            odd += 1\n    return odd\n",
        "test": "assert     first_odd([1,2,3]) == 2",
        "num_ids": 427
    },
    {
        "number": 808,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    #declare the variables\n    total_pairs = 0\n    for x in test_tup:\n        total_pairs = total_pairs + 1\n    #print the number of pairs in the test_tup\n    print(\"Number of pairs in test_tup:\", total_pairs)\n    #create a flag to check the k and print the k if the value is false\n    found = False\n    #print the k\n    for x in test_tup:\n        if x[0] == K:\n            found = True\n    if found == True:\n        print(\"The k is:\", K)\n    else:\n        print(\"The k is not in the test_tup\")\n    return found\n",
        "test": "assert     check_K([\"1\", \"2\", \"3\"], \"1\") == True",
        "num_ids": 498
    },
    {
        "number": 809,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for elem in test_tup2:\n        if elem < test_tup1[0]:\n            return False\n    return True\n",
        "test": "assert     check_smaller([2,3,4], [2,3,1,4]) == False",
        "num_ids": 496
    }
]