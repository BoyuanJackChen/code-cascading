[
    {
        "number": 2,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1, list2 = test_tup1, test_tup2\n    hash1, hash2 = [], []\n    # if not given test_tup2 \n    if type(list2)!= list:\n        return \n    for i in list1:\n        if hash1.count(i) > 0:\n            hash1.remove(i)\n    for j in list2:\n        if hash2.count(j) > 0:\n            hash2.remove(j)\n    return hash1, hash2\n    \ndef test_similar_elements():\n    '''\n    Test that similar_elements works correctly\n    '''\n    test_tup1 = ('a', 'b')\n    test_tup2 = ('a', 'b', 'a')\n    # test_tup2 = ('b', 'a')\n    test_tup3 = ('a', 'b', 'a')\n    print('Test for similar_elements:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', ('a', 'b'))\n    print('Actual output: ', similar_elements(test_tup1, test_tup2))\n    print('Expected output: ', ('b', 'a'))\n    print('Actual output: ', similar_elements(test_tup1, test_tup3))\n    print('Expected output: ', ('a', 'b', 'a'))\n    print('Actual output: ', similar_elements(test_tup2, test_tup3))\n    print('Expected output: ', ('a', 'b', 'a'))\n    \ndef test_simple_set():\n    '''\n    Test that simple_set works correctly\n    '''\n    test_tup1 = ('a', 'b')\n    test_tup2 = ('a', 'b', 'a')\n    print('Test for simple_set:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', {'a', 'b'})\n    print('Actual output: ', simple_set(test_tup1, test_tup2))\n    print('Expected output: ', {'a', 'b'})\n    print('Actual output: ', simple_set(test_tup2, test_tup1))\n    print('Expected output: ', set())\n    print('Actual output: ', simple_set(set(), test_tup2))\n    print('Expected output: ', set())\n    print('Actual output: ', simple_set(set(), set()))\n    \ndef test_remove_duplicates():\n    '''\n    Test that remove_duplicates works correctly\n    '''\n    test_tup1 = ('a', 'b', 'c', 'd', 'a')\n    test_tup2 = ('b', 'a', 'b', 'c', 'a')\n    print('Test for remove_duplicates:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', {'a', 'b', 'c', 'd'})\n    print('Actual output: ', remove_duplicates(test_tup1, test_tup2))\n    print('Expected output: ', {'b', 'a', 'c', 'd'})\n    print('Actual output: ', remove_duplicates(test_tup2, test_tup1))\n    print('Expected output: ', set())\n    print('Actual output: ', remove_duplicates(set(), test_tup2))\n    print('Expected output: ', set())\n    print('Actual output: ', remove_duplicates(set(), set()))\n    \ndef test_count_unique():\n    '''\n    Test that count_unique works correctly\n    '''\n    test_tup1 = ('a', 'b', 'a', 'b', 'b', 'a')\n    test_tup2 = ('a', 'b', 'a', 'b', 'a', 'b')\n    print('Test for count_unique:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', 2)\n    print('Actual output: ', count_unique(test_tup1, test_tup2))\n    print('Expected output: ', 3)\n    print('Actual output: ', count_unique(test_tup2, test_tup1))\n    print('Expected output: ', 3)\n    print('Actual output: ', count_unique(test_tup1, set()))\n    print('Expected output: ', 3)\n    print('Actual output: ', count_unique(set(), test_tup2))\n    print('Expected output: ', 3)\n    print('Actual output: ', count_unique(set(), set()))\n    \ndef test_check_equal():\n    '''\n    Test that check_equal works correctly\n    '''\n    test_tup1 = ('a', 'b', 'a', 'b', 'b', 'a')\n    test_tup2 = ('a', 'b', 'a', 'b', 'a', 'b')\n    print('Test for check_equal:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', True)\n    print('Actual output: ', check_equal(test_tup1, test_tup2))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equal(test_tup2, test_tup1))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equal(test_tup1, set()))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equal(set(), test_tup2))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equal(set(), set()))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equal(set(), set()))\n    print('Expected output: ', False)\n    print('Actual output: ', False)\n    print('Actual output: ', check_equal(set(), set()))\n    \ndef test_check_equals():\n    '''\n    Test that check_equals works correctly\n    '''\n    test_tup1 = ('a', 'b', 'a', 'b', 'b', 'a')\n    test_tup2 = ('a', 'b', 'a', 'b', 'a', 'b')\n    print('Test for check_equals:')\n    print('Test with: ', test_tup1, 'and ', test_tup2)\n    print('Expected output: ', True)\n    print('Actual output: ', check_equals(test_tup1, test_tup2))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equals(test_tup2, test_tup1))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equals(test_tup1, set()))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equals(set(), test_tup2))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equals(set(), set()))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equals(set(), set()))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equals(set(), set()))\n    print('Expected output: ', False)\n    print('Actual output: ', check_equals(set(), set()))\n    print('Expected output: ', True)\n    print('Actual output: ', check_equals(set(), set()))\n    print('Expected output: ', False)\n    print('Actual output: ', False)\n    print('Actual output: ', False)\n    print('Actual output: ', False)\n    print('Actual output: ', False)\n",
        "test": "assert     similar_elements([1,2,3], [2,3,3]) == []",
        "num_ids": 4027,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    # Check if input is an integer\n    if n < 2:\n        return False\n    # Check if input is an integer and if n is the\n    # sum of two divisors\n    if n == 2:\n        return True\n    # Check if input is not an integer and if n\n    # is the sum of two divisors\n    if n < 2 or n % 2 == 0:\n        return False\n    # Check if input is a multiple of both\n    # divisors\n    if n % 2 == 0:\n        return False\n    # Check if input is divisible by both\n    # divisors and n and if it is not a multiple\n    # of both\n    if n % 2 == 0 and n % 2!= 0:\n        return False\n    # Check if input is divisible by the\n    # divisors, n and if it is not a\n    # multiple of both\n    if n % 2 == 0 and n % 2 == 0:\n        return False\n    # Check if the square root of n\n    # is greater than 0\n    if n % 2 == 0 and n % 2!= 0:\n        if n ** 0.5 > 0:\n            return False\n    # Check if the square root of n\n    # is less than 0\n    if n % 2!= 0 and n % 2!= 0:\n        if n ** 0.5 < 0:\n            return False\n    # Check if the cube root of n\n    # is greater than 0\n    if n % 2!= 0 and n % 2!= 0:\n        if math.pow(n, 0.5) > 0:\n            return False\n    # Check if the cube root of n\n    # is less than 0\n    if n % 2!= 0 and n % 2!= 0:\n        if math.pow(n, 0.5) < 0:\n            return False\n    return True\n",
        "test": "assert     is_not_prime(123) == False",
        "num_ids": 1016,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    maxheap=[]\n    for i in range(len(nums)):\n        heapq.heappush(maxheap,nums[i])\n    for i in range(len(maxheap)-1,-1,-1):\n        nums[i]=heapq.heappop(maxheap)\n    return nums\n",
        "test": "assert ",
        "num_ids": 1210,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x = str(x)\n    return len(x) == 1\n",
        "test": "assert     is_Power_Of_Two(2) == True, \"is_Power_Of_Two failed\"",
        "num_ids": 724,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #text = \"Hello world, Hello world, Hello world!\"\n    text = re.sub(\"\\s+\", \"\", text)\n    return text.split(\" \")\n",
        "test": "assert     find_char_long(\"The quick brown fox jumps over the lazy dog\")!= \"The quick brown fox jumps over the lazy dog\"",
        "num_ids": 1519,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for i in nums:\n        squares.append(i**2)\n    return squares\n",
        "test": "assert     square_nums([1,2,3,4,5]) == [1,4,9,16,25]",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    def rotate(str): \n        rot = 0\n        for i in range(0, len(str), 2): \n            rot += 1\n        return rot\n    temp = rotate(str)\n    return temp\n",
        "test": "assert     (find_Rotations(\"abc\") == 2)",
        "num_ids": 1678,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch)!= -1: \n        s = s.replace(ch,\"\") \n        return s \n    else: \n        return s \n",
        "test": "assert     remove_Occ(\"n\", \"i\") == \"n\"",
        "num_ids": 2276,
        "indeed": true
    },
    {
        "number": 12,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    for i in range(len(M)):\n        s += M[i][0]\n    return sorted(M, key=lambda x: x[0])\n",
        "test": "assert     sort_matrix([[1, 2, 3], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]",
        "num_ids": 3674,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    a = l*h\n    b = h*(l+h)\n    c = b*(b-l)*(b-h)\n    return(3.14159*a*b*c)\n",
        "test": "assert     find_Volume(0,0,0) == 0, '0'",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text_lower = text.lower()\n    count = 0\n    for word in text_lower:\n        if re.search(\"[a-zA-Z0-9]\", word):\n            count = count + 1\n    if count == 0:\n        return False\n    return True\n",
        "test": "assert     text_lowercase_underscore(\"and_is_there_a_name_that_does_not_contain_an_underscore\") == True",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n",
        "test": "assert     square_perimeter(5) == 25",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = []\n    for i in range(len(string)):\n        for j in range(len(string)):\n            if string[i] == string[j]:\n                output.append(string[i])\n    return output\n",
        "test": "assert     str_to_list('') == []",
        "num_ids": 1542,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    a = arraynums\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i] == a[j]:\n                return True\n    return False\n",
        "test": "assert     test_duplicate([1,1,1,2,3,3]) == True",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 20,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 1: \n        return True\n    elif x == 2: \n        return False\n    elif x > 2 and x <= 10: \n        return True\n    elif x > 10: \n        return False\n    else: \n        return False\n",
        "test": "assert     is_woodall(8) == True",
        "num_ids": 603,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num > 0:\n        rev = rev * 10 + num % 10\n        num = num // 10\n    if rev == 0:\n        return False\n    return True\n",
        "test": "assert     rev(0) == 0",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if arr == []:\n        return 0\n    max_num = arr[0]\n    for i in range(1,len(arr)) :\n        if arr[i] > max_num :\n            max_num = arr[i]\n    return max_num\n",
        "test": "assert     find_Max_Num([0, 0, 0, 0, 0]) == 0",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    # TODO: write your code here\n    # copy your code here\n    return not(x==y)\n",
        "test": "assert     opposite_Signs(7,7) == False",
        "num_ids": 494,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    result = 0\n    i = 1\n    while (i * i < n):\n        if (n % i == 0):\n            result = i\n            break\n        else:\n            i += 1\n    return result\n",
        "test": "assert     is_octagonal(10), \"returned is not an octagonal number\"",
        "num_ids": 2708,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if s=='':\n        return 0\n    \n    if len(s)==1:\n        return 1\n    \n    if len(s)==2:\n        return 1 + count_Substrings(s[1:])\n    \n    return 1 + count_Substrings(s[1:len(s)])\n        \nprint(count_Substrings('12345'))\nprint(count_Substrings('123'))\nprint(count_Substrings('12345'))\nprint(count_Substrings('123'))\nprint(count_Substrings('123'))\nprint(count_Substrings('1'))\nprint(count_Substrings('22'))\nprint(count_Substrings('1111'))\nprint(count_Substrings('1111'))\n",
        "test": "assert     (count_Substrings('') == 0)",
        "num_ids": 1219,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    minimum = xs[0]\n    for x in xs:\n        if x < minimum:\n            minimum = x\n    return minimum\n",
        "test": "assert     smallest_num([5, 4, 1, 8, 10, -3, -2, 12]) == -3",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i] - test_list[j])\n            if diff > max_difference:\n                max_difference = diff\n    return max_difference\n",
        "test": "assert     max_difference((1,1,2,3,3)) == 2, \"incorrect test 2\"",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda k:k[1])\n",
        "test": "assert     subject_marks([('MATH', 100), ('Science', 200), ('EEE', 300)]) == [('MATH', 100), ('Science', 200), ('EEE', 300)]",
        "num_ids": 2790,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    data_list_flattened = []\n    for element in data_list:\n        if isinstance(element, list):\n            element_flattened = recursive_list_sum(element)\n            data_list_flattened.append(element_flattened)\n        else:\n            data_list_flattened.append(element)\n    return sum(data_list_flattened)\n    \ndef flatten_data(data):\n    '''\n    Given an array, create a recursive function that flattens\n    the array.\n    '''\n    if not data:\n        return []\n    if not data[0]:\n        return data[1:]\n    return flatten_data(data[0]) + flatten_data(data[1:])\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 2885,
        "indeed": true
    },
    {
        "number": 66,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n = 0\n    for i in list:\n        if i > 0:\n            n += 1\n    return n\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 964,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n < 1:\n        return 0\n    \n    if n == 1:\n        return 1\n    \n    if n == 2:\n        return 2\n    \n    return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i=0\n    j=len(A)-1\n    while i<j:\n        if A[i]>A[j]:\n            return False\n        i=i+1\n        j=j-1\n    return True\n",
        "test": "assert     is_Monotonic([4, 2, 1]) == False",
        "num_ids": 5336,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 14,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    l2 = []\n    for i in l:\n        if i in s:\n            l2.append(i)\n    if l2 == s:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_sublist([], ['a']) == False",
        "num_ids": 2711,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #Your code here\n    try:\n        #using a for loop\n        for i in range(len(Input)):\n            for j in range(i+1,len(Input)):\n                if(Input[i]==Input[j]):\n                    return False\n        return True\n    except:\n        return False\n        \nprint(find_equal_tuple([(1,2),(3,4),(5,6)])) #should return true\nprint(find_equal_tuple([(1,2),(3,4),(5,6),(8,9)])) #should return false\nprint(find_equal_tuple([(1,2),(3,4),(5,6),(8,9),(7,8)])) #should return true\nprint(find_equal_tuple([(1,2),(3,4),(5,6),(8,9),(7,8),(9,10)])) #should return false\n",
        "test": "assert     find_equal_tuple(()) == True",
        "num_ids": 3110,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n):\n        j = 0\n        while j < n-i-1:\n            if nums[j] > nums[j+1]:\n                nums[j],nums[j+1] = nums[j+1],nums[j]\n            j += 1\n    return nums\n",
        "test": "assert     comb_sort([]) == []",
        "num_ids": 1225,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 140,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    s1=n//2\n    s2=n//2\n    if s1==s2:\n        print(s1,s1)\n        return s1\n    else:\n        if n%2==0:\n            print('NOT SQUARE')\n            return dif_Square(n//2)\n        else:\n            print('NOT SQUARE')\n            return dif_Square(n//2)\n",
        "test": "assert     dif_Square(2) == 1",
        "num_ids": 4627,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    from itertools import product\n    possible_patterns = product(colors, patterns)\n    return all(any(i in j for i in possible_patterns) for j in possible_patterns)\n",
        "test": "assert     is_samepatterns([], []) == True",
        "num_ids": 3371,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    list_tuples = []\n    for i in range(0, len(test_list)):\n        if test_list[i][0] % K == 0:\n            list_tuples.append(test_list[i])\n    return list_tuples\n",
        "test": "assert     find_tuples([(1,2,3),(1,2,3)], 2) == []",
        "num_ids": 1290,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0: \n        return True\n    return False\n",
        "test": "assert     is_Diff(1) is False",
        "num_ids": 430,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s) > 0:\n        if len(s) % 2!= 0:\n            return False\n        else:\n            return True\n    return False\n",
        "test": "assert     word_len(\"hi\") == 1, \"word_len('hi')\"",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    tetrahedral_num = 0\n    \n    if n == 0: \n        return 1\n    elif n == 1: \n        return 1\n    elif n == 2: \n        return 3\n    elif n == 3: \n        return 6\n    else:\n        for i in range(0, n):\n            tetrahedral_num += tetrahedral_number(i)\n        return tetrahedral_num",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 5052,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #We create a volume of a sphere, you can try different values of the radius.\n    return 4*math.pi*(r**3)\n",
        "test": "assert     volume_sphere(0) == 0.0",
        "num_ids": 648,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char = \"\"\n    i = 0\n    while i < len(strr):\n        char = char + chr(ord(strr[i]) % 26 + 97)\n        i = i + 1\n    return char\n",
        "test": "assert     get_Char(\"\") ==''",
        "num_ids": 1237,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return n*sequence(n-1)\n",
        "test": "assert     sequence(1) == 1",
        "num_ids": 2915,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 1,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4*math.pi*(r**2))\n",
        "test": "assert     surfacearea_sphere(0) == 0",
        "num_ids": 422,
        "indeed": true
    },
    {
        "number": 86,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return n - 1 + (n - 2) % 12\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_merged = {}\n    if len(dict1)<len(dict2):\n        dict_merged.update(dict1)\n    else:\n        dict_merged.update(dict2)\n    if len(dict3)<len(dict1):\n        dict_merged.update(dict3)\n    else:\n        dict_merged.update(dict3)\n    return dict_merged\n",
        "test": "assert     merge_dictionaries_three({1:'one'}, {1:'two'}, {1:'three'}), 'The dictionaries are not of the same form'",
        "num_ids": 1446,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # your code goes here\n    freq_dict = collections.Counter(list1)\n    return freq_dict\n",
        "test": "assert     freq_count([]) == {}",
        "num_ids": 2721,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    result = N\n    for num in range(N, 0, -1):\n        if num < result:\n            result = num\n    return result\n",
        "test": "assert     closest_num(1) == 1",
        "num_ids": 823,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    words = [word for word in list1 if len(word) > 1]\n    return len(words)\n",
        "test": "assert     len_log([]) == 0",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # Create an empty dictionary to store the count of times a character is found in a string\n    counts = {}\n    for char in sub_str:\n        counts[char] = counts.get(char, 0) + 1\n    \n    # Iterate through the dictionary\n    for char in counts:\n        if counts[char] > 0:\n            # Checks if the character is present in the string\n            for i in range(len(str1)):\n                if str1[i:].find(char)!= -1:\n                    return True\n    return False\n",
        "test": "assert         find_substring(\"Substring\",\"\") == 0",
        "num_ids": 1445,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1: return True\n    if n == 2: return True if n > 1 else False\n    \n    # if the number is not even and odd it should not be undulating\n    if n % 2 == 0 and n % 3 == 0: return False\n    \n    return is_undulating(n//3) or is_undulating(n//2)\n",
        "test": "assert         is_undulating(1) == True, '1 is not undulating'",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    \n    if b==0:\n        return 1\n    elif b==1:\n        return a\n    else:\n        return a**b\n    \n    \ndef gcd(a,b):\n    '''\n    Write a function to find the greatest common denominator between two integers.\n    '''\n    \n    if b==0:\n        return a\n    elif b==1:\n        return 1\n    else:\n        return gcd(b,a%b)\n        \n    \ndef is_prime(n):\n    '''\n    Write a function that returns True if a number is prime.\n    '''\n    \n    if n<2:\n        return False\n        \n    if n==2:\n        return True\n    \n    if n%2==0 or n%3==0:\n        return False\n        \n    for i in range(5,int(math.sqrt(n)),2):\n        if n%i==0:\n            return False\n            \n    return True\n",
        "test": "assert     power(3, 2) == 9",
        "num_ids": 520,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 120,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    min = test_list[0][1]\n    for val in test_list:\n        if val[1] < min:\n            min = val[1]\n    return min\n",
        "test": "assert     index_minimum([(1, 3), (2, 4), (5, 2), (6, 5), (7, 2), (1, 1)]) == 1",
        "num_ids": 4746,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 0\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n",
        "test": "assert     Find_Min_Length([]) == 0, \"Test: Find_Min_Length([]) failed\"",
        "num_ids": 933,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div_count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            div_count += 1\n    return div_count\n",
        "test": "assert     divisor(1) == 1",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #returns dictionary\n    freq_dct = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in freq_dct.keys():\n                freq_dct[list1[i][j]] = freq_dct[list1[i][j]] + 1\n            else:\n                freq_dct[list1[i][j]] = 1\n    return freq_dct\n",
        "test": "assert     frequency_lists([]) == {}",
        "num_ids": 1540,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    l = len(numbers)\n    result = 1\n    for i in range(1,l):\n        result *= i\n    return result\n",
        "test": "assert     multiply_num([1, 2, 3, 4]) == 6, 'It should return 6.'",
        "num_ids": 2621,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: \n        return '0'\n    else: \n        return f'{n:0{len(str(n))}}'\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 711,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    result = 0\n    for i in range(int(num ** 0.5) + 1):\n        if (int(num / i) == 1):\n            if ((num % i) == 0):\n                result = i\n    return result + 1\n",
        "test": "assert     next_smallest_palindrome(17) == 10",
        "num_ids": 1274,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # There are cases where we want to find the kth element or not, so for example, we just have to return a value\n    # which is the kth element.\n    if (k == 0 or k == len(arr)-1):\n        return arr[k]\n    # If the kth element is not present in the array, then the function will return the last element of the array.\n    return arr[k] if k > len(arr) / 2 else arr[k-1]\n",
        "test": "assert     kth_element([1, 2, 3, 4, 5], 2) == 2, 'incorrect kth_element'",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 102,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n",
        "test": "assert     snake_to_camel(\"Hello\") == \"Hello\"",
        "num_ids": 677,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m: \n        return n \n    if n == m - 1: \n        return 1 \n    \n    a = 0 \n    for i in range(1, n): \n        b = 1 \n        for j in range(n): \n            if (i + j) % 2 == 0: \n                b = b * a \n        a = a + b \n    \n    return a % m \n",
        "test": "assert     eulerian_num(0, 0) == 0",
        "num_ids": 3444,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    #return sorted(input_list, key=lambda sublist: sublist[0])\n    return sorted(input_list, key=lambda sublist: len(sublist[0]))\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 1521,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 140,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n",
        "test": "assert     count([True, False, False]) == 1, \"incorrect count\"",
        "num_ids": 694,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    if len(test_list) > 0:\n        for i in range(len(test_list)):\n            for j in range(len(test_list[i])):\n                test_tup.append(test_list[i][j])\n    return test_tup\n",
        "test": "assert     add_lists([], ()) == ()",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # TODO: Complete this function\n    result=[]\n    num1_as_list=list(num1)\n    num2_as_list=list(num2)\n    num3_as_list=list(num3)\n    num1_as_list.sort()\n    num2_as_list.sort()\n    num3_as_list.sort()\n    for num1_as_element in num1_as_list:\n        result.append(num1_as_element)\n    for num2_as_element in num2_as_list:\n        result.append(num2_as_element)\n    for num3_as_element in num3_as_list:\n        result.append(num3_as_element)\n    return result\n",
        "test": "assert     merge_sorted_list([1,2,3],[4,5,6],[7,8,9])==[1,2,3,4,5,6,7,8,9]",
        "num_ids": 3147,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if n == 0: \n        return 0\n    elif n == 1: \n        return 1\n    elif n%2 == 0: \n        return odd_Equivalent(s,n//2)\n    else: \n        return odd_Equivalent(s,n-1)\n",
        "test": "assert     odd_Equivalent(s = \"11\",n = 3) == 1",
        "num_ids": 2596,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return [value for sublist in nestedlist for value in sublist]\n",
        "test": "assert     common_in_nested_lists([]) == []",
        "num_ids": 1081,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n",
        "test": "assert     check_integer('') == False",
        "num_ids": 494,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    else:\n        return False",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 617,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return 0 if not nums else 0 if nums[0] < nums[1] else nums[0] + nums[1]\n",
        "test": "assert     tuple_to_int([]) == 0",
        "num_ids": 785,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    # Remove all of the null values and replace null entries with 0.\n    new_list = [item for item in test_list if item!= 'nan']\n    for i in range(len(new_list)):\n        if new_list[i] == '':\n            new_list[i] = 0\n    # Convert to float and return list\n    return [float(item) for item in new_list]\n",
        "test": "assert     list_to_float([[1.0,2.0],[3.0,4.0]]) == [1.0,2.0,3.0,4.0]",
        "num_ids": 2722,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    new_list = []\n    for char in string:\n        new_list.append(char)\n    return new_list\n",
        "test": "assert     string_to_list(\"\") == []",
        "num_ids": 495,
        "indeed": false
    },
    {
        "number": 119,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    mid = int(len(arr)/2)\n    if arr[mid] == arr[mid - 1]:\n        return arr[mid]\n    else:\n        return search(arr[:mid])\n",
        "test": "assert     search([1]) == 1,'search() return -1'",
        "num_ids": 3838,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 0\n    max_product = list1[0][0]*list1[1][1]\n    for i in range(len(list1)-1):\n        max_product = max(max_product,list1[i][0]*list1[i+1][1])\n    return max_product\n",
        "test": "assert     max_product_tuple([(1,2),(3,4),(5,6)]), 5",
        "num_ids": 4171,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        num = 1\n        while num*num <= i:\n            num *= 2\n            if num == i:\n                break\n        if num == i:\n            amicable_numbers.append(i)\n    return sum(amicable_numbers)\n",
        "test": "assert     amicable_numbers_sum(8) == 6",
        "num_ids": 1777,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle = cmath.phase(a)*cmath.phase(b)\n    print (angle)\n    return angle\n",
        "test": "assert     angle_complex(0,0) == 0.0",
        "num_ids": 1018,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    current_diff = 0\n    current_string = ''\n    for char in string:\n        if char == '0':\n            current_string += '0'\n        else:\n            current_string += '1'\n        if current_string[-1] == '0' and len(current_string) < 4:\n            current_diff += 1\n        else:\n            current_diff -= 1\n        max_diff = max(max_diff, current_diff)\n    return max_diff\n",
        "test": "assert     find_length( '011' ), '1 is not a valid string'",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 110,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = a % 10\n    b = b % 10\n    sum = 0\n    for i in range(1, min(a, b)+1):\n        if a%i==0 and b%i==0:\n            sum+=i\n    return sum\ndef ciclo(a, b):\n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = a % 10\n    b = b % 10\n    if a==0 and b==0:\n        return 0\n    if b==0:\n        return a\n    if a==0:\n        return b\n    return ciclo(a, b) + ciclo(a, b)\nprint(ciclo(10, 36))",
        "test": "assert     sum(1,1) == 1",
        "num_ids": 2672,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n",
        "test": "assert     multiply_int(2, 2) == 4",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) > n:\n            long_words.append(word)\n    return long_words\n",
        "test": "assert     long_words(2, ['frodo', 'front', 'frost', 'frozen', 'frame', 'frozen']), 'long_words: should return [\"frozen\", \"frame\", \"frost\", \"front\", \"frozen\", \"front\", \"frame\"]'",
        "num_ids": 6891,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 120,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Write your code here\n    if len(my_matrix) == len(my_matrix[0]) == 0:\n        return True\n    elif len(my_matrix) == 1:\n        if my_matrix[0][0] == 0:\n            return True\n        elif my_matrix[0][0] == 1:\n            return False\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[0])):\n            if my_matrix[i][j] == 0:\n                return False\n    return True\n",
        "test": "assert     magic_square_test(my_matrix = [[1, 0], [0, 1]]) == False",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    #calculate a hash map for each item\n    freq_map = {}\n    for num in nums:\n        freq_map[num] = nums.count(num)\n    #find the max item with frequency\n    max_occurrences = max(freq_map,key=freq_map.get)\n    return max_occurrences\n    \ndef three_ways(nums):\n    '''\n    Write a function to find the number of ways of placing n numbers in an array.\n    '''\n    #create a map with (x,y) as keys and array length as values\n    nums_map = {}\n    for x in range(len(nums)):\n        for y in range(x+1,len(nums)):\n            nums_map[(x,y)] = nums.count(nums[x])\n    #determine number of ways\n    ways = 0\n    for x in range(len(nums)-2):\n        for y in range(x+1,len(nums)-1):\n            for z in range(y+1,len(nums)):\n                ways += nums_map[(x,y)] * nums_map[(x,z)] * nums_map[(y,z)]\n    return ways\n",
        "test": "assert     max_occurrences([2, 2, 1, 1]) == 2",
        "num_ids": 1370,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    str1 = str1.lower()\n    vowels = 'aeiou'\n    result = ''\n    for char in str1:\n        if char in vowels:\n            result += char.lower()\n        else:\n            result += char\n    return result\n",
        "test": "assert reverse_vowels(\"a\") == \"a\"",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \" \".join(str(elem) for elem in tup1)\n",
        "test": "assert     isinstance(tup_string(('a','b')), str)",
        "num_ids": 832,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for n in nums:\n        if n < 0:\n            negative_sum += abs(n)\n    return negative_sum\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 717,
        "indeed": false
    },
    {
        "number": 135,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # check if n is even or odd\n    if n % 2 == 0:\n        return n \n    elif n % 2 == 1:\n        # find the midpoint of the hexagon\n        mid = n // 2\n        if mid % 2 == 0:\n            # if mid is even, return the left side of the hexagon\n            return hexagonal_num(mid) + hexagonal_num(mid + 1)\n        else:\n            # if mid is odd, return the midpoint of the hexagon\n            return (3 * n) + (2 * (mid + 1))\n    # if n is odd, return the midpoint of the hexagon\n    else:\n        return (3 * n) + (2 * (n + 1))\n",
        "test": "assert hexagonal_num(0)==0",
        "num_ids": 3073,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_cnt = nums.count(0)\n    nonzero_cnt = len(nums) - nums.count(0)\n    return zero_cnt/nonzero_cnt\n",
        "test": "assert     zero_count([1,1,0,0,1,1,1]) == 1.0",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 138,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    elif n == 1:\n        return True\n    \n    for i in range(2, n):\n        if n % i == 0:\n            return False\n        if not is_Sum_Of_Powers_Of_Two(n - i):\n            return False\n    \n    return True\n",
        "test": "assert    is_Sum_Of_Powers_Of_Two(16)==False",
        "num_ids": 945,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r * r\n",
        "test": "assert     circle_circumference(r=0) == 0",
        "num_ids": 2524,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.extend(item)\n        else:\n            result.append(item)\n    return result\n    \ndef unique_element(test_list):\n    '''\n    Write a function that returns the unique element from the list of numbers.\n    '''\n    temp = []\n    for num in test_list:\n        if num not in temp:\n            temp.append(num)\n    return temp[0]\n",
        "test": "assert     extract_singly([[1, 2, 3], [4, 5, 6, 7], [8, 9]]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "num_ids": 1005,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(n-1, -1, -1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 1254,
        "indeed": false
    },
    {
        "number": 142,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    if list1==list2==list3:\n        return(len(list1))\n    else:\n        return 0\n",
        "test": "assert     count_samepair([1,2,3,4], [1,3,3,4], [3,3,4,5]) == 0",
        "num_ids": 1678,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    \n    len_list = 0\n    for item in Input:\n        if type(item) == list:\n            len_list += 1\n    \n    return len_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "test": "assert     find_lists(('a', 'b')) == 0",
        "num_ids": 2698,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    Max = 0\n    for i in arr:\n        if i > Max:\n            Max = i\n    return Max\n",
        "test": "assert     max_Abs_Diff([-1,0,0,0,0]) == 0",
        "num_ids": 953,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return None\n    # if a is equal to 0, then return None\n    if a == 0:\n        return (0, 0)\n    if b == 0:\n        return (0, 0)\n    \n    if a == n:\n        return (n, b)\n    \n    # find the best solution\n    x, y = None, None\n    # pick a random number\n    if a > b:\n        x, y = find_solution(a, b, n // 2)\n    else:\n        x, y = find_solution(b, a, n // 2)\n    \n    # add x to solution and return\n    return (x, y + n // 2)\n",
        "test": "assert     find_solution(1, 0, 1) == (0, 0), \"find_solution: Incorrect result\"",
        "num_ids": 1565,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                list2.remove(j)\n    return list2\n",
        "test": "assert     remove_elements(['a', 'b', 'c'], ['a', 'd', 'e']) == ['d', 'e']",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_n = 0\n    for i in range(n//2 + 1):\n        sum_n += n-i\n    return sum_n\n",
        "test": "assert     sum_series(1) == 1",
        "num_ids": 2469,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # Returns the area of the polygon.\n    return (s*l)/2\n",
        "test": "assert     area_polygon(0, 0) == 0.0",
        "num_ids": 612,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    # Determine the divisors \n    divisors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            divisors.append(i)\n            divisors.append(int(n/i))\n    # Compare the two numbers \n    # the first 2 numbers are the same and it's not divisors \n    # if sum of divisors is even then it's not divisors\n    # if it's not divisors then it's not divisors\n    return (not(sum(divisors) % 2) and not(sum(divisors) in divisors))\n",
        "test": "assert     div_sum(0) == 0",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == str1[i].lower():\n            count += 1\n    return count\n",
        "test": "assert     count_char_position(\"aabaa\") == 5",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    odd = 0\n    for i in A:\n        if (i & 1) == 0:\n            even += 1\n        else:\n            odd += 1\n    return(int(even))\n",
        "test": "assert     find_even_pair([]) == 0, 'No pairs of even numbers'",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i = 2\n    while(i*i <= n): \n        if (n % i == 0): \n            n = n/i \n        else: \n            i = i + 1\n    return n \n",
        "test": "assert     next_power_of_2(1) == 1",
        "num_ids": 902,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    if(x == 1):\n        return 1\n    else:\n        return a[x-1] + frequency(a,x-1) \n",
        "test": "assert     frequency(1, 1) == 1",
        "num_ids": 6275,
        "indeed": false
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    l = 0                                                                                                                                                        \n    for i in list1:                                                                                                                                                        \n        if(i >= m and i <= n):                                                                                                                                                                                        \n            l += i                                                                                                                                                                                                                            \n    return l                                                                                                                                                                                                                                                                                                            ",
        "test": "assert     sum_range_list([1,2,3,4,5], 0, 4) == 10",
        "num_ids": 1201,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    l = a + 4*a\n    return l\n",
        "test": "assert     perimeter_pentagon(0) == 0",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 172,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    \n    count = 0\n    for char in s:\n        if char =='std':\n            count += 1\n    return count\n    \ndef count_occurance_in_different_chars(s):\n    '''\n    Write a function that accepts a string and returns the number of occurrences of the string.\n    '''\n    \n    count = 0\n    \n    for i in range(0,len(s)):\n        if s[i]!='std':\n            count += 1\n    return count\n",
        "test": "assert     count_occurance('aa bb') == 0",
        "num_ids": 728,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    types_of_data = [int, float, str, bool]\n    for x in test_tuple:\n        if type(x) not in types_of_data:\n            raise ValueError(f\"The value {x} of type {type(x)} is not correct\")\n    return True\n",
        "test": "assert     check_type(('hello', 1, 2, 3, 'test', 'test1', 'test2')) == check_type(('hello', 1, 2, 3, 'test', 'test1', 'test2')) == check_type(('test', 1, 2, 3, 'test', 'test1', 'test2')) == check_type(('test', 1, 2, 3, 'test1', 'test2')) == check_type(('test', 1, 2, 3, 'test1', 1)) == check_type(('test', 1, 2, 3, 'test1', 1, 2)) == check_type(('test', 1, 2, 3, 'test1', 1, 2, 3))",
        "num_ids": 1310,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    if arr[0] == x:\n        return True\n    elif len(arr) == n:\n        return False\n    else:\n        mid = len(arr)//2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] < x:\n            return is_majority(arr[mid+1:], n, x)\n        else:\n            return is_majority(arr[:mid], n, x)\n",
        "test": "assert     is_majority([1,2,3,4,5,6,7], 5, 3), 'the array is not correct'",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    '''\n    Sample Input: n = 3\n    Expected Output: 2\n    Sample Input: n = 3\n    Expected Output: 1\n    '''\n    return bin(n).count('1')\n",
        "test": "assert     count_Set_Bits(1) == 1",
        "num_ids": 651,
        "indeed": true
    },
    {
        "number": 226,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    if len(str) % 2 == 0:\n        l = list(str)\n        odd_nums = []\n        for i in l:\n            if (ord(i) % 2) == 0:\n                odd_nums.append(i)\n        return \"\".join(odd_nums)\n    else:\n        return str\n",
        "test": "assert     odd_values_string('') == ''",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c and b < c:\n        return a \n    elif b < a and b < c and b < c:\n        return b \n    else:\n        return c \n",
        "test": "assert     min_of_three(0, 0, 0) == 0",
        "num_ids": 961,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if l < r:\n        return False\n    else:\n        return all([x & 1 for x in range(n)])\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(1,2,3) == False, \"1\"",
        "num_ids": 1390,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    temp_list = []\n    \n    for i in range(n):\n        temp = arr[i]\n        if temp < 0:\n            temp = -temp\n            if temp > -1:\n                arr[i] = -temp\n            else:\n                arr[i] = -1\n        elif temp > 0:\n            arr[i] = temp\n        else:\n            arr[i] = -1\n    \n    return arr\n",
        "test": "assert     re_arrange_array([1,2,3,4,5], 3) == [1,2,3,4,5], \"re_arrange_array failed\"",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ', char)\n    return str1\n",
        "test": "assert     replace_blank(\"    \", \" \") == \"    \"",
        "num_ids": 2384,
        "indeed": true
    },
    {
        "number": 232,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    print(\"\\t\\t\\tLargest number of items in list\")\n    list2=[]\n    print(\"\\t\\t\\tLargest number of items in list\")\n    for i in list1:\n        if i>n:\n            heapq.heappush(list2,-i)\n            print(\"\\t\\t\\t\",-i)\n        else:\n            list2.append(-i)\n            print(\"\\t\\t\\t\",i)\n    return list2\n",
        "test": "assert     larg_nnum([],0) == []",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return h*(r**2)*(1 + r/2)\n",
        "test": "assert     lateralsuface_cylinder(0.5,0.0) == 0.0",
        "num_ids": 767,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    volume = (l**3)\n    return volume\n",
        "test": "assert     volume_cube(2) == 8",
        "num_ids": 2395,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    bit = 0\n    while n > 0: \n        if (n & 1) == 0: \n            n >>= 1\n            bit += 1\n        else: \n            n >>= 1\n            bit -= 1\n    return bit \n",
        "test": "assert     even_bit_set_number(9) == False",
        "num_ids": 2735,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurrence_dict = dict()\n    for tup in test_list:\n        occurrence_dict[tup[0]] = occurrence_dict.get(tup[0], 0) + 1\n    return occurrence_dict\n",
        "test": "assert     check_occurences([(1, 2), (1, 2, 3), (1, 2, 3, 4), (1, 2, 3, 4, 5)]), \"The code did not pass the check\"",
        "num_ids": 6924,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n=0\n    for i in range(0,len(str)-1):\n        if (str[i]==str[i+1]):\n            n+=1\n    return n\n",
        "test": "assert     number_of_substrings('') == 0",
        "num_ids": 1214,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    import math\n    count = 0\n    for i in range(m):\n        for j in range(n):\n            if j + i >= m:\n                break\n            else:\n                if m%i!= 0:\n                    count += 1\n    return count\n",
        "test": "assert     get_total_number_of_sequences(0,1) == 0",
        "num_ids": 2917,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = list2[i]\n    return list1\n",
        "test": "assert     replace_list([1, 2, 3], [3, 4, 5]) == [3, 4, 5], \"The replace_list function should return a new list of elements\"",
        "num_ids": 1350,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for char in str1:\n        count += 1\n    return count\n",
        "test": "assert     count_charac('a') == 1",
        "num_ids": 636,
        "indeed": true
    },
    {
        "number": 244,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    elif N == 2:\n        return 2\n    else:\n        return next_Perfect_Square(N-1) + next_Perfect_Square(N-2)\n",
        "test": "assert     next_Perfect_Square(1) == 1",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_arr = []\n    for i in arr:\n        max_arr.append(i)\n    for i in range(1, len(arr)):\n        max_arr[i] = max(max_arr[i - 1], arr[i])\n    return max(max_arr)\n",
        "test": "assert     max_sum([3, 2, 4, 1]) == 4",
        "num_ids": 1678,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    elif number == 2:\n        return 2\n    else:\n        result = babylonian_squareroot(number-1)\n        if result < number:\n            return result\n        else:\n            return 2**(len(str(number)))-1\n",
        "test": "assert     not babylonian_squareroot(0)",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    length = 0\n    palindromes = []\n    # base case\n    if (len(str) <= 1):\n        return len(str)\n    # loop through every substring\n    for i in range(len(str)):\n        # base case, if current substring is empty, add it to the palindromes list\n        if (str[i] == str[i][::-1]):\n            palindromes.append(str[i])\n        else:\n            # loop through other substring and add to the length\n            for j in range(i+1, len(str)):\n                # if current substring matches palindrome, append it\n                if (str[i:j+1] == str[i:j+1][::-1]):\n                    palindromes.append(str[i:j+1])\n                    break\n    # return the length of the longest palindromic subsequence\n    return len(palindromes)\n",
        "test": "assert     lps('a' 'ab') == 3     # aaab",
        "num_ids": 1246,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n + harmonic_sum(n-1)\n",
        "test": "assert         harmonic_sum(1) == 1",
        "num_ids": 598,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    l1 = len(array_nums1)\n    l2 = len(array_nums2)\n    i,j = 0,0\n    arr = []\n    while i<l1 and j<l2:\n        if array_nums1[i] == array_nums2[j]:\n            arr.append(array_nums1[i])\n            i+=1\n            j+=1\n        elif array_nums1[i]<array_nums2[j]:\n            i+=1\n        else:\n            j+=1\n    return arr\n    \ndef k_intersection(k,arr,size):\n    '''\n    Given an array of integers arr and an integer k, return an array of the first k integers in the array.\n    '''\n    i = 0\n    while i<size:\n        if i<k:\n            j = i\n            while j<size:\n                if arr[j] < arr[i]:\n                    arr[j],arr[i] = arr[i],arr[j]\n                j+=1\n            i+=1\n        else:\n            break\n    return arr\ndef main():\n    print(intersection_array([1,2,3,4,5], [2,3,5,7,8]))\n    print(k_intersection(2,[1,2,3,4,5],4))\n    print(k_intersection(3,[1,2,3,4,5],4))\n",
        "test": "assert     (intersection_array([], [])==[])",
        "num_ids": 1392,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count=0\n    for i in tup:\n        if i==x:\n            count+=1\n    return count \n",
        "test": "assert     count_X(('A', 1), 1)",
        "num_ids": 878,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 150,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for i in list:\n        new_list.append(i)\n    for i in range(len(list)):\n        new_list[i] = list[i]\n    list.clear()\n    list.extend(new_list)\n    list.append(element)\n    return list\n",
        "test": "assert     insert_element([4,5,6],6) == [4,5,6,6]",
        "num_ids": 1413,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 190,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if(numbers!= None and type(numbers) == complex):\n        complex = numbers.real\n        int_real = int(complex)\n        int_imag = int(complex + cmath.pi)\n        return(complex, int_real, int_imag)\n    else:\n        raise ValueError\n",
        "test": "assert     convert(1) == 0",
        "num_ids": 3352,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    num_list = []\n    for i in list1:\n        if type(i) == int:\n            num_list.append(i)\n    return len(num_list)\n",
        "test": "assert     count_integer([]) == 0, \"count_integer should return 0\"",
        "num_ids": 837,
        "indeed": true
    },
    {
        "number": 255,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l1 = list(l)\n    if n == 1:\n        return [tuple(l1)]\n    elif n > 1:\n        r = list(combinations_with_replacement(l1, n))\n        return [tuple(list(combo)) for combo in r]\n    else:\n        return []\n",
        "test": "assert     combinations_colors([], 0) == []",
        "num_ids": 4804,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # TODO: Write your code here\n    count = 0\n    for i in range(2, n):\n        if (n % i) == 0:\n            count += 1\n    return count\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 836,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # if not (type(a)==int or type(a)==float):\n    #     print(\"That wasn't a number.\")\n    #     return \n    # elif not (type(b)==int or type(b)==float):\n    #     print(\"That wasn't a number.\")\n    #     return \n    # elif not(a>b):\n    #     print(\"That's not a number.\")\n    #     return \n    # elif not(a<b):\n    #     print(\"That's not a number.\")\n    #     return \n    # elif not(a==b):\n    #     print(\"That's not a number.\")\n    #     return \n    # else:\n    #     print(f\"They're both in the {a}-{b} numbers range.\")\n    #     return a,b\n    return int(b), int(a)\n    \n",
        "test": "assert     swap_numbers(12,12) == (12,12)",
        "num_ids": 691,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    maximum = max(test_tup1,test_tup2)\n    return maximum\n",
        "test": "assert     maximize_elements(('a', 'b', 'c', 'd'),('e', 'f', 'g', 'h')), 'tuple must have only two tuples'",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    for i in range(2,int(sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\n",
        "test": "assert     newman_prime(0) == 1",
        "num_ids": 1268,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    # if len(test_tup1)!= len(test_tup2):\n    #     raise ValueError(\"Different sizes of tuples\")\n    # else:\n    #     return_tuple = ()\n    #     for index in range(0,len(test_tup1)):\n    #         return_tuple += (test_tup1[index] / test_tup2[index])\n    #     return return_tuple\n    return test_tup1[0] / test_tup2[0]\n    # return test_tup1[0] / test_tup2[0]\n    # return test_tup1[0] / test_tup2[0]\n",
        "test": "assert     division_elements((1, 2), (1, 2)) == 1",
        "num_ids": 1470,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # 1. Start by creating a new list of all the elements in the list\n    # 2. Iterate over the list, starting with the element that was not a number\n    # 3. If the element found is a number, add it to the list\n    # 4. Create a new list containing all the elements from the list\n    # 5. Merge the new list into the original list\n    # 6. Create a tuple from the new list\n    result = list1\n    count = 0\n    for i in range(0, len(result)):\n        if result[i] not in L:\n            result.insert(i, L[count])\n            count += 1\n    return tuple(result), tuple(L)\n",
        "test": "assert     split_two_parts([1, 2, 3], 3) == [[1, 2], [2, 3]]",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 264,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age >= 0 and h_age <= 100:\n        return h_age\n    else:\n        return \"Error: age is outside of range 0-100\"\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [list(S[i:i+step]) for i in range(0, len(S), step)]\n",
        "test": "assert     list_split([], 1) == []",
        "num_ids": 2922,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = (0.5 * l**2) - (0.5 * l * (l - 1) * (l - 2))\n    return a\n",
        "test": "assert     lateralsurface_cube(0.0) == 0.0",
        "num_ids": 1277,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return n**2\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    total_list = []\n    for i in range(n + 1):\n        total_list.append(i)\n    return total_list[n % len(total_list)]\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k.isascii():\n        return ord(k)\n    else:\n        return ord(k)-32\n",
        "test": "assert     ascii_value(\"A\") == ord('A')",
        "num_ids": 843,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even=0\n    for i in range(len(arr)):\n        if arr[i]%2==0:\n            sum_even=sum_even+arr[i]\n    return sum_even\n        \nprint(sum_even_and_even_index([1,2,3,4,5]))\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    \n    # Your code here\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return n * even_Power_Sum(n - 1)",
        "test": "assert     even_Power_Sum(1) == 1",
        "num_ids": 670,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for i in test_list:\n        rear.append(i[1])\n    return rear\n",
        "test": "assert     rear_extract([(1,2), (3,4), (5,6), (7,8), (9,10), (11,12), (13,14)]) == [2,4,6,8,10,12,14]",
        "num_ids": 962,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n    result = []\n    for i in range(len(tup1)):\n        if tup1[i] < tup2[i]:\n            result.append(tup1[i])\n        else:\n            result.append(tup2[i])\n",
        "test": "assert     substract_elements((1, 2, 3), (2, 3)) == (1, 2)",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    return int( math.ceil(math.sqrt(n))) \n",
        "test": "assert     even_binomial_Coeff_Sum(1) == 1",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return r**3*h**3\n    #return (r**3)*(h**3)\n",
        "test": "assert     volume_cylinder(0,0) == 0",
        "num_ids": 437,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    newDict=dict.copy()\n    newDict=dict.copy()\n    for key,value in newDict.items():\n        if value>=n:\n            newDict[key]=value\n    return newDict\n",
        "test": "assert     dict_filter({},1) == {}",
        "num_ids": 1148,
        "indeed": false
    },
    {
        "number": 278,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if len(test_tup) <= 1:\n        return 0\n    else:\n        # find the position of the first element\n        first_index = test_tup.index(test_tup[0])\n        # find the second element\n        second_index = test_tup.index(test_tup[1])\n        # count the number of elements that occurs before the first element\n        first_element_count = 0\n        # iterate over each element in the list\n        for i in test_tup:\n            # if the element is less than the first element\n            if i < test_tup[first_index]:\n                # increment the count by 1\n                first_element_count += 1\n        # return the count\n        return first_element_count\n",
        "test": "assert     count_first_elements(()) == 0, \"Expected 0, got {}\".format(count_first_elements(()))",
        "num_ids": 1208,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n % 2 == 0:\n        return n // 2\n    else:\n        return (n + 1) // 2\n",
        "test": "assert     is_num_decagonal(1) == True",
        "num_ids": 596,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i, e in enumerate(dlist):\n        if e == item:\n            return (True,i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([1,2,3,4,5,6,7,8,9,10], 15) == (False, -1)",
        "num_ids": 778,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    count = 0\n    for ele in test_list:\n        if ele in test_list:\n            count += 1\n    return count == len(test_list)\n",
        "test": "assert     all_unique([1, 2, 4]) == True",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 282,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num for num in nums1 if num not in nums2]\n",
        "test": "assert     sub_list([], [1,2,3]) == [], \"sub_list failed\"",
        "num_ids": 1168,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    def validate_digit(n): \n        num_list = []\n        while n: \n            digit = n % 10\n            num_list.append(digit) \n            n = n // 10\n        return num_list\n    num_list = validate_digit(n)\n    return all(x == num_list[0] for x in num_list)\n",
        "test": "assert not validate(123)",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    index = 0\n    while index < len(list):\n        if list[index] == element:\n            return True\n        index += 1\n    return False\n    \n    \ndef main():\n    '''\n    Write a function that checks whether all items in the list are equal to the given element, using a check_element function.\n    '''\n    numbers = [1,2,2,3,1,2,3,4,5]\n    print(check_element(numbers,2))\n",
        "test": "assert     check_element([1,2,3,4,5,6],7)==False",
        "num_ids": 808,
        "indeed": true
    },
    {
        "number": 285,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text[0] == 'a':\n        return True\n    elif text[-1] == 'b':\n        return True\n    else:\n        return False\n",
        "test": "assert     text_match_two_three(\"Bob hit a ball, the ball flew far after it was hit\") == False",
        "num_ids": 4560,
        "indeed": false
    },
    {
        "number": 286,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Time O(n)\n    # Space O(n)\n    \n    # init variable\n    l = 0\n    \n    # loop\n    for i in range(n):\n        a[i] *= k\n        l = max(l, a[i])\n    \n    # update the maximum\n    return l\n",
        "test": "assert     max_sub_array_sum_repeated([0], 1, 0) == 0",
        "num_ids": 1187,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    summ = 0\n    for i in range(1, n+1):\n        if i%2 == 0:\n            summ += i**2\n    return summ\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 666,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    \n    max_length = 0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list1[i])):\n            if max_length < list1[i][j]:\n                max_length = list1[i][j]\n    return max_length\n",
        "test": "assert     max_length([[1]]) == 1",
        "num_ids": 843,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = 0\n    for i in range(n):\n        for j in range(i + 1):\n            for k in range(j + 1):\n                if (i + j == k) or (i + j + k == n):\n                    ways += 1\n    return ways\n",
        "test": "assert     count_no_of_ways(2, 2) == 2",
        "num_ids": 1564,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    for i in range(m,0,-1):\n        if m%i == 0:\n            return i\n",
        "test": "assert     find(1,1) == 1",
        "num_ids": 2735,
        "indeed": false
    },
    {
        "number": 293,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w + h) / 2\n",
        "test": "assert     otherside_rightangle(0,0) == 0",
        "num_ids": 2876,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if listval is None or len(listval) == 0:\n        return 0\n    if len(listval) == 1:\n        return listval[0]\n    max_val = listval[0]\n    for value in listval[1:]:\n        if value > max_val:\n            max_val = value\n    return max_val\n",
        "test": "assert     max_val([1, 2, 3]) == 3",
        "num_ids": 722,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 0\n    if number < 0:\n        return \"Integer can't be negative.\"\n    for i in range(2,number+1):\n        if number % i == 0:\n            count += i\n    return count\n",
        "test": "assert     sum_div(2) == 2",
        "num_ids": 619,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    # find the index of the first uniques and the last uniques values\n    # index 0 is the first uniqe value, index -1 is the last uniqe value\n    # time complexity: O(n)\n    # space complexity: O(n)\n    lst = list(set(arr))\n    inv_count = 0\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            # if the values are the same, and the value is not the last element,\n            # then the last element's value is the new unique value\n            if arr[i]!= arr[j] and arr[j]!= arr[-1]:\n                inv_count += 1\n                break\n    return inv_count\n",
        "test": "assert     get_Inv_Count([]) == 0",
        "num_ids": 3038,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    temp = []\n    for elem in list1:\n        if isinstance(elem, list):\n            temp.extend(flatten_list(elem))\n        else:\n            temp.append(elem)\n    return temp\n",
        "test": "assert     flatten_list([1,2,[3,4,[5,6]]]) == [1,2,3,4,5,6]",
        "num_ids": 1094,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for tup in stdata:\n        if tup[1] > max_aggregate:\n            max_aggregate = tup[1]\n    return max_aggregate\n",
        "test": "assert ",
        "num_ids": 1716,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    a = 0\n    for i in range(n):\n        a += 2**i\n    return a\n",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 1481,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    elif type(d) is dict:\n        return dict_depth(d.keys()) + 1 + dict_depth(d.values())\n    else:\n        return 1\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 2974,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if (rotations==0) :\n        return arr[index]\n    elif (rotations==1) :\n        return arr[index+1]\n    elif (rotations==2) :\n        return arr[index-1]\n    elif (rotations==3) :\n        return arr[index+ranges[0]]\n    elif (rotations==4) :\n        return arr[index-ranges[1]]\n    else :\n        return arr[index-ranges[2]]\n    \ndef merge_Sort(arr,ranges,rotations) :\n    '''\n    Write a python function to sort array given a range of rotations.\n    '''\n    if (rotations==0) :\n        return arr\n    elif (rotations==1) :\n        return arr[0:ranges[0]]+arr[ranges[1]:]\n    elif (rotations==2) :\n        return arr[0:ranges[0]]+arr[0:ranges[1]]+arr[ranges[2]:]\n    elif (rotations==3) :\n        return arr[0:ranges[0]]+arr[ranges[1]:ranges[2]]+arr[ranges[3]:]\n    elif (rotations==4) :\n        return arr[0:ranges[0]]+arr[ranges[1]:ranges[2]]+arr[ranges[3]:ranges[4]]+arr[ranges[5]:]\n    else :\n        return arr\n    \ndef reverse_Iterative(arr,index) :\n    '''\n    Write a python function to reverse array given a index.\n    '''\n    #print(\"Reverse : \" + str(index))\n    while (index<len(arr)-1) :\n        temp = arr[index]\n        arr[index] = arr[index+1]\n        arr[index+1] = temp\n        index +=1\n    #print(\"Array after reverse : \" + str(arr))\n",
        "test": "assert     find_Element([5, 3, 1, 2, 6, 4, 0, 5], [0, 2, 3, 5, 6, 7], 0, 0) == 5",
        "num_ids": 1466,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[0][0], words[0][1]\n",
        "test": "assert     start_withp(['hello','world','hello','hello']) == ('hello', 'hello')",
        "num_ids": 939,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 130,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    left = index\n    right = index\n    sum = 0\n    while left >= 0 and right < n and a[left] < a[right]:\n        left -= 1\n        right += 1\n        sum += a[left]\n    sum += a[right]\n    \n    if k < right - left - 1 and left + 1 < n and a[left + 1] < a[right]:\n        sum += a[left + 1]\n    if k > left + 1 and k + 1 < right - left - 1 and a[k + 1] > a[k]:\n        sum += a[k + 1]\n    \n    return sum\n",
        "test": "assert     max_sum_increasing_subseq([1, 2, 3, 4], 4, 3, 1) == 4",
        "num_ids": 1629,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m-n+1):\n        if tuplex[i:i+n] == tuplex[i+n:i+n+n]:\n            return tuplex[i:i+n],tuplex[i+n:i+n+n]\n    return '',''\n",
        "test": "assert     (colon_tuplex(1,2,3) == (1,2,3)) == False",
        "num_ids": 3110,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    a = {}\n    for num in nums1:\n        if num in a:\n            a[num] += 1\n        else:\n            a[num] = 1\n    \n    for num in nums2:\n        if num in a:\n            a[num] += 1\n        else:\n            a[num] = 1\n    \n    if len(a) < N:\n        return None\n    \n    largest = {}\n    for num in a:\n        if largest.get(num) is None:\n            largest[num] = 1\n        else:\n            largest[num] += 1\n    \n    if len(largest) < N:\n        return None\n    \n    for num in largest:\n        if largest[num] > 0:\n            for i in range(0, largest[num]):\n                nums2.remove(num)\n    \n    return nums2\n",
        "test": "assert     large_product([1, 1, 1, 1], [1, 2, 3, 4], 4) == [1, 1, 1, 1]",
        "num_ids": 1576,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    # your code goes here\n    if(a>b):\n        return a\n    else:\n        return b\n",
        "test": "assert maximum(0,0) == 0",
        "num_ids": 551,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n",
        "test": "assert     string_to_tuple('a' ) == ('a',)",
        "num_ids": 2760,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(n)\n    if n == 1: \n        return True\n    if n == 2: \n        return False\n    if n == 3: \n        return True\n    else: \n        return False\n",
        "test": "assert set_left_most_unset_bit(1) == 1",
        "num_ids": 2598,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    v=r*h\n    return v\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    a=2*(math.pi*(r**2))\n    return a\ndef volume_cone_2d(r,h):\n    '''\n    Write a function to find the volume of a cone with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cone_2d(r,h):\n    '''\n    Write a function to find the area of a cone with only the 2D shape.\n    '''\n    a=2*(math.pi*(r**2))\n    return a\ndef volume_cube(r,h):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    v=r*h\n    return v\ndef area_cube(r,h):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    a=4*h\n    return a\ndef volume_cube_2d(r,h):\n    '''\n    Write a function to find the volume of a cube with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cube_2d(r,h):\n    '''\n    Write a function to find the area of a cube with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_triangle(r,h):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    v=r*h\n    return v\ndef area_triangle(r,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    a=3*h\n    return a\ndef volume_quadrilateral(r,h):\n    '''\n    Write a function to find the volume of a quadrilateral.\n    '''\n    v=r*h\n    return v\ndef area_quadrilateral(r,h):\n    '''\n    Write a function to find the area of a quadrilateral.\n    '''\n    a=3*h\n    return a\ndef volume_pentagon(r,h):\n    '''\n    Write a function to find the volume of a pentagon.\n    '''\n    v=r*h\n    return v\ndef area_pentagon(r,h):\n    '''\n    Write a function to find the area of a pentagon.\n    '''\n    a=2*h\n    return a\ndef volume_hexagon(r,h):\n    '''\n    Write a function to find the volume of a hexagon.\n    '''\n    v=r*h\n    return v\ndef area_hexagon(r,h):\n    '''\n    Write a function to find the area of a hexagon.\n    '''\n    a=h\n    return a\ndef volume_hexagon_2d(r,h):\n    '''\n    Write a function to find the volume of a hexagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_hexagon_2d(r,h):\n    '''\n    Write a function to find the area of a hexagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_pentagon_2d(r,h):\n    '''\n    Write a function to find the volume of a pentagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_pentagon_2d(r,h):\n    '''\n    Write a function to find the area of a pentagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_cuboid(r,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    v=r*h\n    return v\ndef area_cuboid(r,h):\n    '''\n    Write a function to find the area of a cuboid.\n    '''\n    a=4*h\n    return a\ndef volume_cuboid_2d(r,h):\n    '''\n    Write a function to find the volume of a cuboid with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cuboid_2d(r,h):\n    '''\n    Write a function to find the area of a cuboid with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_octagon(r,h):\n    '''\n    Write a function to find the volume of an octagon.\n    '''\n    v=r*h\n    return v\ndef area_octagon(r,h):\n    '''\n    Write a function to find the area of an octagon.\n    '''\n    a=h\n    return a\ndef volume_octagon_2d(r,h):\n    '''\n    Write a function to find the volume of an octagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_octagon_2d(r,h):\n    '''\n    Write a function to find the area of an octagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_ray(r,h):\n    '''\n    Write a function to find the volume of a ray.\n    '''\n    v=r*h\n    return v\ndef area_ray(r,h):\n    '''\n    Write a function to find the area of a ray.\n    '''\n    a=4*h\n    return a\ndef volume_triangle_2d(r,h):\n    '''\n    Write a function to find the volume of a triangle with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_triangle_2d(r,h):\n    '''\n    Write a function to find the area of a triangle with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_cube_2d(r,h):\n    '''\n    Write a function to find the volume of a cube with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_cube_2d(r,h):\n    '''\n    Write a function to find the area of a cube with only the 2D shape.\n    '''\n    a=4*h\n    return a\ndef volume_pentagon_2d(r,h):\n    '''\n    Write a function to find the volume of a pentagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_pentagon_2d(r,h):\n    '''\n    Write a function to find the area of a pentagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_quadrilateral_2d(r,h):\n    '''\n    Write a function to find the volume of a quadrilateral with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_quadrilateral_2d(r,h):\n    '''\n    Write a function to find the area of a quadrilateral with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_hexagon_2d(r,h):\n    '''\n    Write a function to find the volume of a hexagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_hexagon_2d(r,h):\n    '''\n    Write a function to find the area of a hexagon with only the 2D shape.\n    '''\n    a=h\n    return a\ndef volume_octagon_2d(r,h):\n    '''\n    Write a function to find the volume of an octagon with only the 2D shape.\n    '''\n    v=r*h\n    return v\ndef area_octagon_2d(r,h):\n    '''\n    Write a function to find the area of an octagon with only the 2D shape.\n    '''\n    a=h\n",
        "test": "assert     volume_cone(1.0, 0.0) == 0.0, \"Test volume_cone failed\"",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n < 0:\n        return \"Invalid Input\"\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        output = 1\n        for i in range(2,n):\n            output = output*2\n            if output < n:\n                return output\n    return 0\n",
        "test": "assert highest_Power_of_2(0) == 0",
        "num_ids": 919,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas_number = 0\n    for i in range(1, n+1):\n        if i == 1 or i == n:\n            lucas_number = i\n        elif i == 2 or i == n+1:\n            lucas_number = i\n        elif i == 3 or i == n+2:\n            lucas_number = i\n        else:\n            lucas_number = i*(i-1)//2\n    return lucas_number\n",
        "test": "assert     find_lucas(1) == 1",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for element in list_:\n        element += string\n    return list_\n",
        "test": "assert     add_string([],'  ') == []",
        "num_ids": 2870,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 190,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    a = {}\n    for i in range(len(l1)):\n        a.update({l1[i]:l2[i]})\n    for i in range(len(l1)):\n        a.update({l3[i]:l2[i]})\n    return a\n    \ndef test():\n    l1 = [1,2,3,4,5,6]\n    l2 = [1,2,3,4,5]\n    l3 = [1,2,3,4,5,6]\n    print(convert_list_dictionary(l1, l2, l3))\n    l1 = [1,2,3,4]\n    l2 = [1,2,3,4,5,6]\n    l3 = [1,2,3,4]\n    print(convert_list_dictionary(l1, l2, l3))\n",
        "test": "assert     convert_list_dictionary(['a','b','c'],['a','b','d'],['a','b','d','c'])",
        "num_ids": 2476,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    elif n == 4:\n        return 3\n    elif n == 5:\n        return 4\n    else:\n        pass\n",
        "test": "assert     get_max_sum(0) == 0",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = input_list[0]\n    for item in input_list:\n        if item > max_length:\n            max_length = item\n    return max_length\n",
        "test": "assert     max_length_list([1, 2, 3]) == 3",
        "num_ids": 2724,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    count = 0\n    for i in test_tup:\n        if i in test_tup:\n            count = count + 1\n    if count > 1:\n        return False\n    else:\n        return True\n",
        "test": "assert not check_distinct((1, 2, 1, 2, 2))",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # your code goes here\n    # return first non-repeating char\n    print(str1)\n    print(str1.count(str1[0]))\n    # print(str1.index(str1[0]))\n    return str1[0]\n",
        "test": "assert     first_non_repeating_character(str1 = 'hello'), 'hello' # is first non repeating character",
        "num_ids": 1299,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith('-'):\n        return False\n    if string.endswith('-'):\n        return False\n    return True\n",
        "test": "assert     check_char(\"f\") == True",
        "num_ids": 2906,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if c % 3 == 0:\n        return(a+b+c) / 3\n    elif c % 3 == 1:\n        return(a+b) / 2\n    else:\n        return(a)\n",
        "test": "assert     (median_numbers(1,1,1) == 1)",
        "num_ids": 1381,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    res = []\n    for num in nums:\n        res.append(sum(map(int, str(num))))\n    return sum(res)\n",
        "test": "assert     sum_of_digits([]) == 0, \"The function should return 0.\"",
        "num_ids": 2872,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 140,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_tup1 = (test_tup1[0] ^ test_tup1[1])\n    test_tup2 = (test_tup2[0] ^ test_tup2[1])\n    return test_tup1, test_tup2\n",
        "test": "assert bitwise_xor(tuple1, tuple2) == tuple1",
        "num_ids": 1250,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    uniq_tuple_set = set()\n    for i in test_list:\n        uniq_tuple_set.add(i)\n    print(uniq_tuple_set)\n    return len(uniq_tuple_set)\n",
        "test": "assert         extract_freq(['a', 'a', 'a']) == 1",
        "num_ids": 2285,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    #create a nested tuple\n    nested_tuple = ()\n    for i in test_tup1:\n        nested_tuple = nested_tuple + (i,)\n    for j in test_tup2:\n        nested_tuple = nested_tuple + (j,)\n    return nested_tuple\n",
        "test": "assert     add_nested_tuples([1,2,3], [[1,2,3],[4,5,6],[7,8,9]]) == [1,2,3,4,5,6,7,8,9]",
        "num_ids": 3494,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    minimum=a\n    if b<minimum:\n        minimum=b\n    return minimum\n",
        "test": "assert     minimum(5,5) == 5",
        "num_ids": 419,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i in tuple1:\n            return True\n    return False\n",
        "test": "assert     check_tuplex(('a','b'), ('a','b')), \"The two tuples must be of equal length\"",
        "num_ids": 875,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    even = 0\n    odd = 0\n    for i in str(x):\n        if i == \"0\":\n            even += 1\n        else:\n            odd += 1\n    if odd % 2 == 0 and even % 2!= 0:\n        return True\n    else:\n        return False",
        "test": "assert     find_Parity(3) == False",
        "num_ids": 543,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    s=str(n)\n    m=0\n    for i in s:\n        m=m*10+int(i)\n    m=str(m)\n    return int(m)\n",
        "test": "assert     rearrange_bigger(0) == 0",
        "num_ids": 4610,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    heap = []\n    for num1 in nums1:\n        for num2 in nums2:\n            heapq.heappush(heap, [num1+num2, num1, num2])\n    print(heap)\n    n = len(nums1)\n    ans = []\n    for _ in range(k):\n        ans.append(heapq.heappop(heap))\n    return ans\n",
        "test": "assert     k_smallest_pairs([1, 2, 3], [1, 2, 3, 4], 4) == [1, 2, 3, 4, 4, 3]",
        "num_ids": 2619,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = []\n    for i in list1:\n        for j in list1:\n            if i[0] < j[0] and i[1] < j[1]:\n                min_product.append(i)\n                min_product.append(j)\n                break\n    return min_product\n",
        "test": "assert     min_product_tuple([(1,2), (3,4), (5,6), (7,8), (9,10)]), (6,8)",
        "num_ids": 3688,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    \n    min_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n            \n    return min_val\n    \ndef max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    \n    max_val = listval[0]\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n            \n    return max_val\n    \ndef mean(listval):\n    '''\n    Write a function to find the mean value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return 0\n    \n    mean = sum(listval) / len(listval)\n    return mean\n",
        "test": "assert     min_val([1,2,3,4]) == 1, 'test_min_val returns 1'",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n",
        "test": "assert     snake_to_camel(\"snake\") == \"snake\"",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    # create a list of odd numbers\n    odd_list = []\n    for i in l:\n        if i % 2 == 1:\n            odd_list.append(i)\n    # print even list\n    print(odd_list)\n    return odd_list\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 1064,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element(('one', 'two', 'three'), n = 1) == 'two'",
        "num_ids": 866,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    overlap = []\n    overlap_set = set(list1)\n    overlap_set.update(list2)\n    if len(overlap_set)!= len(list1):\n        return False\n    for i in range(len(list1)):\n        if list1[i] in overlap_set:\n            return True\n    return False\n",
        "test": "assert     overlapping(['b', 'c', 'a', 'd', 'e'], ['e', 'c', 'd', 'c', 'b', 'a']) == True, \"The following sequence does not overlap the above sequence: ['b', 'c', 'a', 'd', 'e']\"",
        "num_ids": 1111,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max_product = -math.inf\n    for i in arr:\n        if i > max_product:\n            max_product = i\n    return max_product\n",
        "test": "assert     max_Product([2, 2, 2, 2, 2, 2, 2]) == 2",
        "num_ids": 1100,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input.sort() \n    return Input[0]\n",
        "test": "assert     group_tuples([(1,2,3), (1,3,4), (1,3,4)]), \"group_tuples should return [(1, 3), (1, 4)].\"",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    list_length = len(lst)\n    max = lst[0]\n    for i in lst:\n        if i > max:\n            max = i\n    return max\n",
        "test": "assert     Find_Max([0, 0, 0, 0, 0]) == 0, \"Error in function Find_Max\"",
        "num_ids": 1031,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    sum=0\n    for i in range(len(list1)):\n        sum+=list1[i]\n    return sum*len(list1)\n",
        "test": "assert ",
        "num_ids": 854,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 140,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = 0\n    for i in range(1, n+1):\n        a = a + (i**3)\n    return a\n    \nprint(cube_Sum(5))\n    \n    ",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 541,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    if isinstance(test_tup[0],str):\n        for i in range(len(test_tup)):\n            test_tup[i] = test_tup[i].replace(\" \",\"_\")\n        return tuple(test_tup)\n    else:\n        return tuple(test_tup)\n",
        "test": "assert     concatenate_tuple((1, 2)) == (1, 2), \"the result should be 1 and 2, not 1, 2.\"",
        "num_ids": 1090,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    sum = 0\n    for i in range(1, n+1):\n        sum += i**3\n    return sum/n**3\n    \n    \n",
        "test": "assert     find_Average_Of_Cube(1) == 1",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 200,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return [i[0] for i in test_tuple]\n",
        "test": "assert     extract_rear((4,5,6)) == \"4\"",
        "num_ids": 1154,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0 \n    for elem in list1: \n        if elem == x: \n            counter += 1 \n    return counter \n",
        "test": "assert     count_element_in_list([1, 2, 3], 4) == 0",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 130,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # O(n)\n    # O(n) time complexity\n    # O(n) space complexity\n    for num in nums:\n        if num % 2 == 1:\n            nums.remove(num)\n    return nums\n",
        "test": "assert     filter_oddnumbers(nums=[1, 2, 3, 4, 5, 6]) == [2, 4, 6]",
        "num_ids": 760,
        "indeed": false
    },
    {
        "number": 427,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = re.compile(r'(\\d{1,2})-(\\d{1,2})-(\\d{4})')\n    m = pattern.match(dt)\n    if not m:\n        return dt\n    d,m,y = m.groups()\n    return f'{d}-{m}-{y}'\n",
        "test": "assert     change_date_format('') == ''",
        "num_ids": 1790,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    # length = len(my_list)\n    for i in range(0, len(my_list)):\n        for j in range(i, 0, -1):\n            if my_list[j] < my_list[j-1]:\n                temp = my_list[j]\n                my_list[j] = my_list[j-1]\n                my_list[j-1] = temp\n    return my_list\n",
        "test": "assert     shell_sort([]) == []",
        "num_ids": 1645,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return test_tup1 and test_tup2\n",
        "test": "assert     and_tuples((1, 2, 3), (1, 2, 3)) == (1, 2, 3)",
        "num_ids": 1137,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if(a == 0): \n        return c\n    else: \n        return (b * a) / c\n",
        "test": "assert     (parabola_directrix(0, 0, 0) == 0)",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # Your code here\n    if len(list1) > len(list2):\n        return False\n    if len(list1) == len(list2):\n        return True\n    return False\n",
        "test": "assert     common_element([1,2,3,4,5], [4,5,6]) == False, 'false'",
        "num_ids": 967,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1<=base2:\n        return base1\n    else:\n        return base2\n",
        "test": "assert     median_trapezium(5,3,3), \"Median is not 7.\"",
        "num_ids": 1955,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    i = 0\n    while i < len(arr) and arr[i] > number:\n        i += 1\n    if i == len(arr):\n        return False\n    return True\n",
        "test": "assert     check_greater([2, 3, 4, 5, 6, 7], 1) == False",
        "num_ids": 594,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more b's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more c's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more e's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more f's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more g's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more h's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more i's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more j's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more k's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more l's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more m's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more n's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more o's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more p's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more q's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more r's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more s's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more t's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more u's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more v's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more w's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirty(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more x's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirtyone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more y's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_thirtytwo(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twiny(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinytwo(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinythree(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyfour(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyfive(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinysix(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyseven(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinyeight(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinynine(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text = text.replace('\\n', '')\n    return text\ndef text_match_twinynineone(text):\n    '''\n    Write a function that matches a string that has a two followed by one or more z's.\n    '''\n    text ",
        "test": "assert     text_match_one('Albert Einstein')",
        "num_ids": 4554,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 10 :\n        return n\n    else :\n        return int(str(n)[-1])\n    \n    \n",
        "test": "assert     last_Digit(0) == 0",
        "num_ids": 488,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative_list = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            negative_list.append(list1[i])\n    return negative_list\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 1091,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str1[::2],\"\")\n",
        "test": "assert     remove_odd(\" \") == \"\"",
        "num_ids": 831,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i][0] > test_list[j][0] and test_list[i][1] > test_list[j][1]:\n                count += 1\n    return count\n",
        "test": "assert     count_bidirectional([]) == 0",
        "num_ids": 1270,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum([int(x) for x in L])\n",
        "test": "assert     multiple_to_single([]) == 0",
        "num_ids": 751,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # create a list of adverbs\n    # a = [\"a\", \"d\", \"d\", \"e\", \"f\", \"e\", \"h\", \"i\", \"i\", \"l\", \"m\", \"o\", \"p\", \"u\", \"y\", \"i\", \"y\", \"u\"]\n    # find the first adverb\n    # adverb = a[0]\n    # find the adverb position in the text\n    # adverb_position = text.index(adverb)\n    # return adverb_position\n    adverbs = [\"a\", \"d\", \"d\", \"e\", \"f\", \"e\", \"h\", \"i\", \"i\", \"l\", \"m\", \"o\", \"p\", \"u\", \"y\", \"i\", \"y\", \"u\"]\n    adverb_position = 0\n    # for i in range(len(text)):\n    #     if text[i] == adverbs[adverb_position]:\n    #         adverb_position += 1\n    #         break\n    adverb_position = 0\n    for i in range(len(text)):\n        if text[i] in adverbs:\n            adverb_position += 1\n        if text[i] in adverbs:\n            adverb_position -= 1\n    return adverb_position\n",
        "test": "assert     find_adverb_position(\"Punch the man at the very moment\")==0, \"Test failed\"",
        "num_ids": 9978,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 0\n    l = int(l)\n    for i in range(1, l+1):\n        area += i*i*1\n    return area\n",
        "test": "assert     surfacearea_cube(1) == 1",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    sum = 0\n    for num in nums:\n        if num > 0:\n            sum += num\n            count += 1\n    if sum > 0:\n        return int(sum/count)\n    else:\n        return 0\n",
        "test": "assert positive_count([]) == 0.0, \"the function should be correct\"",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg=0\n    for i in list1:\n        if i<0:\n            neg=i\n            break\n    return neg\n",
        "test": "assert     largest_neg([]) == 0",
        "num_ids": 903,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for item in test_list:\n        if len(item)>=K:\n            test_list.remove(item)\n    return test_list\n",
        "test": "assert     trim_tuple(['a', 'b', 'c', 'd', 'e'], 3) == ['a', 'b', 'c', 'd', 'e']",
        "num_ids": 857,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = [0] * len(test_tup1)\n    # iterate through each element in the given tuple\n    for index, value in enumerate(test_tup1):\n        # sum the value of the index-th element in the tuple\n        result[index] = value * test_tup2[index]\n    # return the result\n    return result\n",
        "test": "assert     index_multiplication([1,2,3], (4,6,9)) == (32,96,144)",
        "num_ids": 3526,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occurence=0\n    for i in range(len(tup)):\n        if tup[i] in lst:\n            occurence=occurence+1\n    return occurence\n",
        "test": "assert         count_Occurrence(tup=('a', 'b', 'c'), lst=[2,3,4,5]) == 0, \"Test Failed\"",
        "num_ids": 1215,
        "indeed": true
    },
    {
        "number": 447,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(0, len(nums)):\n        nums[i] = nums[i]**3\n    return nums\n",
        "test": "assert     cube_nums([]) == []",
        "num_ids": 2813,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_n = 0\n    for i in range(1, n+1): \n        sum_n = sum_n + i \n    return sum_n \n",
        "test": "assert     cal_sum(0) == 0",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = \"\"\n    for x in range(len(str)):\n        if str[x] =='':\n            break\n        res += str[x]\n    return res\n    \n    \ndef is_duplicate(str, l):\n    '''\n    Write a function to check if the input string is a duplicate string.\n    '''\n    if len(str)!= len(l):\n        return False\n    for x in range(len(str)):\n        if str[x]!= l[x]:\n            return False\n    return True\n",
        "test": "assert     extract_string(\"hello world\", \"world\") == \"hello world\"",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text1 = str(text1)\n    text1 = re.sub(\" +\", \" \", text1)\n    return text1.strip()\n",
        "test": "assert     remove_whitespaces('') == ''",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost == sale_amount:\n        return 0\n    elif sale_amount > actual_cost:\n        return 0.5\n    else:\n        return 0\n",
        "test": "assert         loss_amount(0,0) == 0",
        "num_ids": 811,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # Your code here\n    if n % 2 == 0 : \n        return n \n    else: \n        return (sumofFactors(n//2) + n)\n    \ndef is_prime(n): \n    '''\n    Return True if n is a prime number and False otherwise. \n    '''\n    # Your code here\n    if n < 2 : \n        return False\n    for i in range(2, n): \n        if (n % i) == 0: \n            return False\n    return True\n",
        "test": "assert     sumofFactors(0) == 0 ",
        "num_ids": 2959,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    regex = re.compile(\"[a-z]+\")\n    if regex.match(text):\n        return True\n    return False\n",
        "test": "assert     text_match_wordz(\"hello world\")",
        "num_ids": 2678,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumb_number(4) == False",
        "num_ids": 2751,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 1261,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    return min(lst, key=len)\n",
        "test": "assert     Find_Min(['a', 'b', 'c']) == 'a'",
        "num_ids": 862,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert         rectangle_area(10,5) == 50",
        "num_ids": 464,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub(r'(^[A-Z])(\\w+)',r'\\1\\2',str1)\n",
        "test": "assert     remove_uppercase('answering the god') == 'answering the god'",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # define a function to return the first element of the list\n    def getFirst(lst):\n        # extract the first element of the list\n        first_elem = lst[0][0]\n        # return the first element of the list\n        return first_elem\n",
        "test": "assert     Extract(extract_all([\"this\", \"is\", \"a\", \"string\"])) == \"this\"",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    ctr = 0\n    for i in str:\n        if i.isupper():\n            ctr += 1\n    return ctr\n",
        "test": "assert     upper_ctr('') == 0",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not list1: return []\n    all_combinations = []\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 3574,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # corner case: the array has a single element.\n    if len(arr) == 1:\n        return arr[0]\n    \n    # if the array is already sorted, then return the largest product.\n    if arr[0] < arr[1]:\n        return arr[0]\n    \n    # if it's all the way to the end of the array, then return the largest product.\n    elif arr[-1] < arr[-2]:\n        return arr[-1]\n    \n    # if it's all the way to the start, then return the largest product.\n    elif arr[0] > arr[1]:\n        return arr[1]\n    \n    # if it's all the way to the middle, then return the largest product.\n    elif arr[1] > arr[2]:\n        return arr[2]\n    \n    # if the array is already sorted, then return the largest product.\n    return max(arr[0], max_subarray_product(arr[1:]), max_subarray_product(arr[2:]))\n",
        "test": "assert     max_subarray_product([-1,1]) == -1",
        "num_ids": 1361,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    if not all(k in dict for k in range(n)):\n        return False\n    return True\n",
        "test": "assert     check_value({\"n\": 1, \"h\":2}, 1) == False",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if (dict1[i]==''):\n            del dict1[i]\n    return dict1\n",
        "test": "assert         drop_empty({}) == {}",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) <= 1:\n        return arr[0]\n    result = float('-inf')\n    for i in range(1, len(arr)):\n        result = arr[i] if result > arr[i] else max(result, arr[i])\n    return result\n",
        "test": "assert     max_product([-1, -2, -3, -4, -5, -6, -7, -8]) == -8, 'incorrect'",
        "num_ids": 2004,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sorted(test_tup))\n",
        "test": "assert     add_pairwise((1,2)) == (1,2), \"Test Failed\"",
        "num_ids": 1385,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    for i in range(1, len(arr)):\n        for j in range(i, len(arr)):\n            product = arr[i] * arr[j]\n            if product % n!= 0:\n                return product % n\n",
        "test": "assert     find_remainder( [1, 2, 3, 4, 5], 10) == 4",
        "num_ids": 971,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 150,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if not l:\n        return False\n    num_set = set()\n    for num in l:\n        if num not in num_set:\n            num_set.add(num)\n        else:\n            return False\n    num_set.remove(max(num_set))\n    num_set.remove(min(num_set))\n    return True\n",
        "test": "assert    check_Consecutive([5, 6, 5, 9, 3, 8, 5]) == False",
        "num_ids": 3290,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1)!= len(test_list2):\n        return None\n    tuple_list = []\n    for element1, element2 in zip(test_list1, test_list2):\n        if element1 == element2:\n            tuple_list.append(element1)\n    return tuple(tuple_list)\n",
        "test": "assert     tuple_intersection([(1, 2), (3, 4), (4, 5), (2, 1), (5, 3)], [(1, 2), (3, 4), (4, 5), (2, 1), (5, 3)]) == ((1, 2), (3, 4), (4, 5), (2, 1), (5, 3))",
        "num_ids": 1278,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 1,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    ans=str1\n    for i in range(0,len(str1)):\n        if ch == str1[i]:\n            ans=ans[:i]+newch+ans[i+1:]\n    return ans\n",
        "test": "assert     replace_char('a','z','') == 'a'",
        "num_ids": 2999,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict()\n    for i in dict1:\n        sorted_dict[i] = dict1[i]\n    return sorted_dict\n",
        "test": "assert     sort_counter({'A': 1, 'B': 3, 'C': 5, 'D': 7, 'E': 2}),'should return a sorted dict by value'",
        "num_ids": 3265,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if nums==[]:\n        return 0\n    lst = sorted(nums)\n    maxval = lst[-1]\n    minval = lst[0]\n    for x in lst:\n        if x<maxval:\n            maxval=x\n        if x>minval:\n            minval=x\n    return maxval+minval\n",
        "test": "assert     big_sum([]) == 0, \"test failed\"",
        "num_ids": 992,
        "indeed": true
    },
    {
        "number": 477,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n",
        "test": "assert     is_lower('this is a string')",
        "num_ids": 1709,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #create a list of lowercase characters\n    lst = [c.lower() for c in str1]\n    #create a new string with all lowercase characters removed\n    str2 = ''\n    #iterate over the characters list to see if they are lowercase\n    for char in lst:\n        if char.islower():\n            #if the char is lowercase, replace it with its lowercase version\n            str2 += char.lower()\n        else:\n            #if the char is not lowercase, just remove it\n            str2 += char\n    #join the two strings together and return\n    return str2\n",
        "test": "assert     remove_lowercase('') == ''",
        "num_ids": 1171,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n < 10:\n        return n\n    else:\n        return int(str(n)[0])\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 4517,
        "indeed": true
    },
    {
        "number": 554,
        "max_answer_num": 2,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    a=[]\n    for i in list:\n        if i%2==0:\n            a.append(i)\n    return a\n    \n    \n",
        "test": "assert     Split([]) == []",
        "num_ids": 4460,
        "indeed": false
    },
    {
        "number": 555,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 : return 0\n    if n == 1 : return 1\n    return n*n*n\n",
        "test": "assert     difference(0) == 0, \"incorrect\"",
        "num_ids": 1164,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 120,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i]==A[j] and A[i]&1!= 0:\n                count+=1\n    return count\n",
        "test": "assert     find_Odd_Pair(A=[0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0], N=3) == 0",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for i in string:\n        if string.count(i) > 0:\n            new_string += i\n    return new_string\n",
        "test": "assert     toggle_string('abc')",
        "num_ids": 4783,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    if n1 < n2:\n        return digit_distance_nums(n1, n2 - 1)\n    return digit_distance_nums(n1 - 1, n2) + digit_distance_nums(n1, n2 - 1)\n",
        "test": "assert     digit_distance_nums(1, 10) == 0",
        "num_ids": 2745,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    i = 0\n    j = 0\n    while(i < size):\n        if (j < size and a[i] <= a[j]):\n            i += 1\n        else:\n            j += 1\n        \n        max_sum = max(max_sum, a[i] + a[j])\n    \n    return max_sum\n",
        "test": "assert     max_sub_array_sum([1,2,3], 2) == 5",
        "num_ids": 2137,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n",
        "test": "assert         union_elements((1,2,3),(4,5,6)) == (1,2,3,4,5,6)",
        "num_ids": 1421,
        "indeed": true
    },
    {
        "number": 562,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        longest_sublist_length = 0\n        for i in range(len(lst)):\n            for j in range(len(lst)):\n                if lst[i] == lst[j]:\n                    sublist_length = j - i + 1\n                    if sublist_length > longest_sublist_length:\n                        longest_sublist_length = sublist_length\n        return longest_sublist_length\n",
        "test": "assert     Find_Max_Length([]) == 0",
        "num_ids": 2733,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if text.count('\"') == 1:\n        text = re.sub('(\\\".*?\\\")|(\\'.*?\\')', r'\\1', text)\n        print(text)\n    else:\n        text = re.sub('(\\\".*?\\\")|(\\'.*?\\')', r'\\1', text)\n        print(text)\n    return text.strip().replace('\"', '').replace(\"'\", '')\ndef find_entity_type(text, id):\n    '''\n    Write a function that returns the entity type of the given text.\n    '''\n    if text.count('\"') == 1:\n        text = re.sub('(\\\".*?\\\")|(\\'.*?\\')', r'\\1', text)\n        text = re.sub('\\<(.*?)\\>', r'\\<\\1\\>', text)\n        text = re.sub('[^a-zA-Z]', '', text)\n        text = re.sub('\\s','', text)\n        text = re.sub('\\n','', text)\n        text = re.sub('[^a-zA-Z0-9]', '', text)\n        text = re.sub('[^a-zA-Z]','', text)\n        text = re.sub('[^a-zA-Z0-9]','', text)\n        text = re.sub('\\d+', '', text)\n        text = text.strip()\n        text = text.lower()\n        text = text.replace(' ','')\n        text = text.replace('\\n', '')\n        text = text.replace('\\r', '')\n        text = text.replace('\\t', '')\n        text = text.replace('\\u001b[32m', '')\n        text = text.replace('\\u001b[31m', '')\n        text = text.replace('\\u001b[36m', '')\n        text = text.replace('\\u001b[33m', '')\n        text = text.replace('\\u001b[34m', '')\n        text = text.replace('\\u001b[35m', '')\n        text = text.replace('\\u001b[36m', '')\n        text = text.replace('\\u001b[37m', '')\n        text = text.replace('\\u001b[41m', '')\n        text = text.replace('\\u001b[42m', '')\n        text = text.replace('\\u001b[43m', '')\n        text = text.replace('\\u001b[44m', '')\n        text = text.replace('\\u001b[45m', '')\n        text = text.replace('\\u001b[46m', '')\n        text = text.replace('\\u001b[47m', '')\n        text = text.replace('\\u001b[48m', '')\n        text = text.replace('\\u001b[49m', '')\n        text = text.replace('\\u001b[5m', '')\n        text = text.replace('\\u001b[10m', '')\n        text = text.replace('\\u001b[9m', '')\n        text = text.replace('\\u001b[9m', '')\n        text = text.replace('\\u001b[10m', '')\n        text = text.replace('\\u001b[11m', '')\n        text = text.replace('\\u001b[12m', '')\n        text = text.replace('\\u001b[13m', '')\n        text = text.replace('\\u001b[14m', '')\n        text = text.replace('\\u001b[15m', '')\n        text = text.replace('\\u001b[16m', '')\n        text = text.replace('\\u001b[17m', '')\n        text = text.replace('\\u001b[18m', '')\n        text = text.replace('\\u001b[19m', '')\n        text = text.replace('\\u001b[1m', '')\n        text = text.replace('\\u001b[2m', '')\n        text = text.replace('\\u001b[3m', '')\n        text = text.replace('\\u001b[4m', '')\n        text = text.replace('\\u001b[5m', '')\n        text = text.replace('\\u001b[6m', '')\n        text = text.replace('\\u001b[7m', '')\n        text = text.replace('\\u001b[8m', '')\n        text = text.replace('\\u001b[9m', '')\n        text = text.replace('\\u001b[10m', '')\n        text = text.replace('\\u001b[11m', '')\n        text = text.replace('\\u001b[12m', '')\n        text = text.replace('\\u001b[13m', '')\n        text = text.replace('\\u001b[14m', '')\n        text = text.replace('\\u001b[15m', '')\n        text = text.replace('\\u001b[16m', '')\n        text = text.replace('\\u001b[17m', '')\n        text = text.replace('\\u001b[18m', '')\n        text = text.replace('\\u001b[19m', '')\n        text = text.replace('\\u001b[1m', '')\n        text = text.replace('\\u001b[2m', '')\n        text = text.replace('\\u001b[3m', '')\n        text = text.replace('\\u001b[4m', '')\n        text = text.replace('\\u001b[5m', '')\n        text = text.replace('\\u001b[6m', '')\n        text = text.replace('\\u001b[7m', '')\n        text = text.replace('\\u001b[8m', '')\n        text = text.replace('\\u001b[9m', '')\n        text = text.replace('\\u001b[10m', '')\n        text = text.replace('\\u001b[11m', '')\n        text = text.replace('\\u001b[12m', '')\n        text = text.replace('\\u001b[13m', '')\n        text = text.replace('\\u001b[14m', '')\n        text = text.replace('\\u001b[15m', '')\n        text = text.replace('\\u001b[16m', '')\n        text = text.replace('\\u001b[17m', '')\n        text = text.replace('\\u001b[18m', '')\n        text = text.replace('\\u001b[19m', '')\n        text = text.replace('\\u001b[1m', '')\n        text = text.replace('\\u001b[2m', '')\n        text = text.replace('\\u001b[3m', '')\n        text = text.replace('\\u001b[4m', '')\n        text = text.replace('\\u001b[5m', '')\n        text = text.replace('\\u001b[6m', '')\n        text = text.replace('\\u001b[7m', '')\n        text = text.replace('\\u001b[8m', '')\n        text = text.replace('\\u001b[9m', '')\n        text = text.replace('\\u001b[10m', '')\n        text = text.replace('\\u001b[11m', '')\n        text = text.replace('\\u001b[12m', '')\n        text = text.replace('\\u001b[13m', '')\n        text = text.replace('\\u001b[14m', '')\n        text = text.replace('\\u001b[15m', '')\n        text = text.replace('\\u001b[16m', '')\n        text = text.replace('\\u001b[17m', '')\n        text = text.replace('\\u001b[18m', '')\n        text = text.replace('\\u001b[19m', '')\n        text = text.replace('\\u001b[1m', '')\n        tex",
        "test": "assert     '\"\"\"'     ,'\"Quote Missing\" '",
        "num_ids": 4451,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                count=count+1\n    return count \n",
        "test": "assert     count_Pairs([1,2,3,4,5],2) == 0, 'Incorrect count_Pairs implementation'",
        "num_ids": 944,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n    # def split(word): \n    #     return word.split(',') \n    #     #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')\n    # #return word.split(',')",
        "test": "assert     split('a b') == ['a', 'b']",
        "num_ids": 2438,
        "indeed": false
    },
    {
        "number": 566,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return 0\n    else:\n        return n % 10\n",
        "test": "assert     sum_digits(0) == 0, \"0 is an invalid input\"",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 567,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([1, 2, 3, 4, 5]) == True",
        "num_ids": 870,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return []\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 1990,
        "indeed": false
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    sorted_list = []\n    for sublist in list1:\n        sorted_list.append(sublist)\n    sorted_list = sorted(sorted_list, key=len)\n    return sorted_list\n",
        "test": "assert     sort_sublists([['A', 'B']]) == [['A', 'B']]",
        "num_ids": 2240,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 140,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = list(set(nums))\n    return nums\n",
        "test": "assert     two_unique_nums([1, 1, 2, 2, 3, 3, 4, 4, 4, 5, 5, 6, 6, 7]) == [1, 2, 3, 4, 5, 6, 7], 'The function should return correct values'",
        "num_ids": 4911,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_num = set()\n    for num in list_data:\n        if num in unique_num:\n            continue\n        else:\n            unique_num.add(num)\n    return len(unique_num)\n",
        "test": "assert     unique_product([]) == 0, \"Error in your unique_product\"",
        "num_ids": 1032,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return r*h/2\n",
        "test": "assert     surfacearea_cylinder(0.0,2.0) == 0.0",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A.sort()\n    if A == B: \n        return True\n    else: \n        return False\n",
        "test": "assert     is_Sub_Array([1,2,3,4], [2,3,4,5,6])==False, \"is_Sub_Array() should return False when given two lists as arguments\"",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 577,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n % 10 + last_Digit_Factorial(n//10)\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 2558,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list=[]\n    new_list.extend(list1)\n    new_list.extend(list2)\n    new_list.extend(list3)\n    return new_list\n",
        "test": "assert     interleave_lists([], [], []) == []",
        "num_ids": 1333,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result_tup1 = tuple(test_tup1)\n    result_tup2 = tuple(test_tup2)\n    return result_tup1[0]!= result_tup2[0] and \\\n        result_tup1[1]!= result_tup2[1] and \\\n        result_tup1[2]!= result_tup2[2] and \\\n        result_tup1[3]!= result_tup2[3] and \\\n        result_tup1[4]!= result_tup2[4] and \\\n        result_tup1[5]!= result_tup2[5] and \\\n        result_tup1[6]!= result_tup2[6] and \\\n        result_tup1[7]!= result_tup2[7] and \\\n        result_tup1[8]!= result_tup2[8]\n",
        "test": "assert     find_dissimilar(['a', 'b', 'c', 'b', 'd', 'a'], ['a', 'b', 'c', 'd', 'b', 'a']) == 0, 'test_tup1 = {}'.format(test_tup1)",
        "num_ids": 1559,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if not i:\n            return test_tuple\n        if i % 2!= 0:\n            test_tuple.remove(i)\n    return test_tuple\n    \ntest_tuple = (1,2,3,4,5,6)\neven_fnc(test_tuple, even_fnc)\n",
        "test": "assert     even_ele(('a','b','b'), even_fnc) == ('a', 'b', 3)",
        "num_ids": 1452,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    result = 0\n    for i in range(b):\n        for j in range(s):\n            result += (i + j) * (1 + j) *.5\n    return result\n",
        "test": "assert     surface_Area(1,0) == 0",
        "num_ids": 700,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     my_dict({}), \"dictionary is not empty\"",
        "num_ids": 453,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    c=1\n    for i in range(1,num):\n        c=c*(i+1)\n    return c\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 2948,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # get the list of adverbs\n    adverbs = []\n    list = [\n        \"a\", \"an\", \"the\", \"for\", \"an\", \"a\", \"any\", \"the\", \"some\", \"an\",\n        \"any\", \"any\", \"any\", \"another\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"a\", \"a\", \"a\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"a\", \"a\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"a\", \"a\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"a\", \"an\", \"a\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"a\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\", \"any\",\n        \"an\", \"an\", ",
        "test": "assert     find_adverbs('J' + 'n' +'' + '-al' +'' + '-ly' +'' + '-n' +'' + '-ed' +'' + '-ly' +'' + '-le' +'' + '-l' +'' + '-n' +'' + '-ly' +'' + '-ne' +'' + '-ly' +'' + '-ed' +'' + '-l' +'' + '-es' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' +'' + '-ly' + ",
        "num_ids": 7218,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    heapq.heapify(items)\n    for i in range(0,n):\n        heapq.heappush(items,-items[i][1])\n    items=list(items)\n    items.sort(reverse=True)\n    items=items[0:n]\n    return items\n",
        "test": "assert  expensive_items([1,2,3,4,5,6],1) == []",
        "num_ids": 906,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:len(l)]\n",
        "test": "assert     split_Arr(['a', 'b', 'c'],3) == ['a', 'b', 'c']",
        "num_ids": 884,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 8,
        "max_test_num": 10,
        "total_product": 140,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = tuple(listx)\n    return t\n    # Return a tuple.\n",
        "test": "assert     list_tuple([1,2,3]) == (1,2,3), 'list_tuple failed'",
        "num_ids": 2502,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([6, 4, 3, 2, 2, 7, 8, 8, 7, 5]) == 6, \"expected 7, got {0}\".format(7)",
        "num_ids": 1129,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a==b:\n        return True\n    for i in range(a,b):\n        if(i**2==i):\n            return True\n    return False\n",
        "test": "assert     perfect_squares(0, 1), 'not correct'",
        "num_ids": 960,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 200,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x,y)\n",
        "test": "assert     polar_rect(0, 0) == (0,0)",
        "num_ids": 1047,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = list(newList)\n    newList.reverse()\n    print(\"Reverse order:\", newList)\n    return newList\n",
        "test": "assert     swap_List([1,2,3]) == [3,2,1] ",
        "num_ids": 894,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    def _binomial_coeff(n,k):\n        '''\n        Write a recursive function for the binomial coefficient\n        '''\n        if n==0:\n            return 1\n        elif k==1:\n            return 0\n        else:\n            return (n*_binomial_coeff(n-1,k))\n    return _binomial_coeff(n,k)\n",
        "test": "assert     binomial_Coeff(0,1) == 1",
        "num_ids": 896,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if len(ip) == 0:\n        return '0'\n    else:\n        return ip\n    # to clean the string, remove leading zeroes, and it's to be removed.\n    # '0.0.0.0' -> '0.0.0.0'\n    # '0.0.0' -> '0.0.0'\n    # '00.00.00' -> '00.00.00'\n    # remove leading zeroes\n    return re.sub(r'\\A\\d+', '', ip)\n",
        "test": "assert     removezero_ip('0.0.0.0') == '0.0.0.0'",
        "num_ids": 2863,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            count += 1\n    return count\n",
        "test": "assert     diff_even_odd([]) == 0, \"No Difference\"",
        "num_ids": 1056,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 130,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    min_swap = 0\n    for i in range(0, len(str1)):\n        if str1[i] == str2[i]:\n            min_swap+=1\n        else:\n            break\n    return min_swap\n",
        "test": "assert     min_Swaps('100', '000') == 0, 'wrong'",
        "num_ids": 4831,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += len(str(item))\n    return size\n",
        "test": "assert     tuple_size([]) == 0, 'The size should be zero'",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr1) - 1\n    \n    while left <= right:\n        \n        mid = left + (right - left) // 2\n        \n        if arr1[mid] < arr2[mid]:\n            left = mid + 1\n        else:\n            right = mid - 1\n            \n    return arr2[left]\n    \n",
        "test": "assert     find_kth([1,2], [2,2], 2) == 2",
        "num_ids": 1345,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    s = 0\n    num = number\n    for i in range(0,len(str(number))):\n        s += int(str(number)[i])\n    for i in range(len(str(s))):\n        if s%10==int(str(s)[i]):\n            return False\n    return True\n",
        "test": "assert     armstrong_number(123) == False",
        "num_ids": 777,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    # Your code here\n    total = 0\n    for i in range(1, number + 1):\n        total = total + i\n    return total / number\n",
        "test": "assert     sum_average(1) == 1",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n",
        "test": "assert     is_Even(2)",
        "num_ids": 474,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # if the string is empty, return None\n    if str1 == '':\n        return None\n    # if the string contains only one character, return that character\n    if str1.count(str1[0]) > 1:\n        return str1[0]\n    # initialize a list to store all repeated characters\n    list = []\n    # for each char in the string\n    for i in str1:\n        # if the char is in list\n        if i in list:\n            # append that char to list\n            list.append(i)\n        else:\n            # if the char is not in list, add it to list\n            list.append(i)\n    # return the first repeated character\n    return list[0]\n    \n    ",
        "test": "assert     first_repeated_char(\"a\") == \"a\"",
        "num_ids": 1387,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    # write your code here\n    ludic = []\n    if n < 0:\n        return None\n    else:\n        while n > 0:\n            if n % 2 == 0:\n                ludic.append(n)\n                n = n//2\n            else:\n                n = n//2\n        return ludic\n        \n    ",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 921,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n",
        "test": "assert         reverse_words('') == ''",
        "num_ids": 667,
        "indeed": true
    },
    {
        "number": 605,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    elif num == 2:\n        return True\n    elif num % 2 == 0:\n        return False\n    else:\n        for i in range(3, num, 2):\n            if num % i == 0:\n                return False\n        return True\n",
        "test": "assert     prime_num(12)==False",
        "num_ids": 839,
        "indeed": true
    },
    {
        "number": 606,
        "max_answer_num": 5,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree >= 0 and degree <= 180:\n        return degree\n    else:\n        print(\"Invalid degree input.\")\n        return 0\n",
        "test": "assert     radian_degree(0) == 0",
        "num_ids": 476,
        "indeed": false
    },
    {
        "number": 607,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Your code here\n    return 0, 0, 0\n",
        "test": "assert     find_literals(\"\", \"\") == (0,0,0)",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 1 : \n        return n\n    return n * bell_Number(n - 1)\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 817,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list(list1)\n",
        "test": "assert     remove_kth_element([2,2,2,2,2,2], 3) == [2,2,2,2,2,2]",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 150,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 1:\n        return test_list[0][N]\n    else:\n        return max(test_list[0][:N])\n",
        "test": "assert     max_of_nth([[5, 1, 9], [4, 4, 4], [2, 7, 5]], 3) == 9",
        "num_ids": 664,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if len(lst) == 0:\n        return []\n    else:\n        lst.sort()\n        return [lst[0]] + merge(lst[1:])",
        "test": "assert     merge([]) == []",
        "num_ids": 1298,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum = 0\n    for item in test_list:\n        sum = sum + item\n    return sum\n",
        "test": "assert     cummulative_sum([1, 2, 3]) == 6, 'cummulative_sum() should return 6'",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    avg_lst = []\n    for x in nums:\n        for y in x:\n            avg_lst.append(y)\n    return avg_lst\n",
        "test": "assert     average_tuple(((1, 2, 3), (4, 5, 6), (7, 8, 9))) == [3, 5.5, 7.5]",
        "num_ids": 1239,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup1:\n        raise Exception(\"Error: no elements in tuples\")\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    if test_tup2[0] == 0:\n        return tuple([0])\n    elif not test_tup2:\n        return tuple([0])\n    elif test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup1[0]])\n    else:\n        return tuple([test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup1[0] % test_tup2[0]])\n    \ndef two_tuples_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup1:\n        raise Exception(\"Error: no elements in tuples\")\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    if test_tup2[0] == 0:\n        return tuple([0])\n    elif not test_tup2:\n        return tuple([0])\n    elif test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup1[0]])\n    else:\n        return tuple([test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup1[0] % test_tup2[0]])\n    \ndef three_tuples_modulo(test_tup1, test_tup2, test_tup3):\n    '''\n    Write a function which takes three tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2) or len(test_tup1)!= len(test_tup3):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup1:\n        raise Exception(\"Error: no elements in tuples\")\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup3 = tuple(test_tup3)\n    if test_tup2[0] == 0:\n        return tuple([0])\n    elif not test_tup2:\n        return tuple([0])\n    elif test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup1[0]])\n    elif test_tup2[0] % test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup2[0] % test_tup1[0]])\n    else:\n        return tuple([test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup2[0]])\n    \ndef four_tuples_modulo(test_tup1, test_tup2, test_tup3, test_tup4):\n    '''\n    Write a function which takes four tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2) or len(test_tup1)!= len(test_tup3) or len(test_tup1)!= len(test_tup4):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup1:\n        raise Exception(\"Error: no elements in tuples\")\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup3 = tuple(test_tup3)\n    test_tup4 = tuple(test_tup4)\n    if test_tup2[0] == 0:\n        return tuple([0])\n    elif not test_tup2:\n        return tuple([0])\n    elif test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup1[0]])\n    elif test_tup2[0] % test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup2[0] % test_tup1[0]])\n    else:\n        return tuple([test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup2[0]])\n    \ndef five_tuples_modulo(test_tup1, test_tup2, test_tup3, test_tup4, test_tup5):\n    '''\n    Write a function which takes five tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2) or len(test_tup1)!= len(test_tup3) or len(test_tup1)!= len(test_tup4) or len(test_tup1)!= len(test_tup5):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup1:\n        raise Exception(\"Error: no elements in tuples\")\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup3 = tuple(test_tup3)\n    test_tup4 = tuple(test_tup4)\n    test_tup5 = tuple(test_tup5)\n    if test_tup2[0] == 0:\n        return tuple([0])\n    elif not test_tup2:\n        return tuple([0])\n    elif test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup1[0]])\n    elif test_tup2[0] % test_tup2[0] % test_tup1[0] == 0:\n        return tuple([test_tup2[0] % test_tup2[0] % test_tup1[0]])\n    else:\n        return tuple([test_tup2[0] % test_tup1[0], test_tup2[0] % test_tup1[0] % test_tup2[0]])\n    \ndef six_tuples_modulo(test_tup1, test_tup2, test_tup3, test_tup4, test_tup5):\n    '''\n    Write a function which takes six tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2) or len(test_tup1)!= len(test_tup3) or len(test_tup1)!= len(test_tup4) or len(test_tup1)!= len(test_tup5):\n        raise Exception(\"Error: the number of elements in tuples does not match\")\n    if not test_tup",
        "test": "assert     tuple_modulo((4, 5, 6), (1, 2, 3)) == (4, 0, 0)",
        "num_ids": 1308,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif d == 1:\n        return 0\n    elif d == 2:\n        return 1\n    elif d == 3:\n        return 2\n    elif d == 4:\n        return 4\n    elif d == 5:\n        return 5\n    elif d == 6:\n        return 6\n    elif d == 7:\n        return 7\n    else:\n        return -1\n",
        "test": "assert     min_Jumps([],0) == 0",
        "num_ids": 5667,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 170,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # your code goes here\n    return nums1[:len(nums2)],nums2[:len(nums1)]\n",
        "test": "assert     div_list( [1,4,2], [1,3,3,4] ) == [1,2,3,4], '[1,4,2] / [1,3,3,4]'",
        "num_ids": 1522,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for c in test_str:\n        if c.isdigit():\n            x = ord(c)\n            if x > 122:\n                y = x - 26\n                print(\"Change this to '\", chr(y), \",'\")\n                x = ord(chr(y))\n                if x > 122:\n                    print(\"String is too long\")\n                    break\n                elif x == 122:\n                    print(chr(y), \" is right here\")\n                    test_str = test_str[0:len(test_str)-1] + chr(y + 26) + test_str[len(test_str)+1:]\n                    print(test_str, \" changed to '\", chr(y), \",'\")\n                    break\n                else:\n                    print(\"String is too long\")\n                    break\n            else:\n                print(\"String is not a number\")\n                break\n        else:\n            print(\"String is not a number\")\n            break\n    return test_str\n",
        "test": "assert     move_num(\"abcd\") == 'abcd'",
        "num_ids": 1853,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    subsets = []\n    largest = 0\n    for i in a:\n        subsets.append(i)\n        if len(subsets) > largest:\n            largest = len(subsets)\n    return largest\n",
        "test": "assert     largest_subset([2]), \"The largest subset of a list is 2\"",
        "num_ids": 1305,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n < 2:\n        return None\n    else:\n        return arr1[n//2]\n    \n    # If list is already sorted\n    if n % 2 == 0:\n        return get_median(arr1, arr2, n//2)\n    else:\n        return (arr1[n//2] + arr2[n//2]) / 2\n",
        "test": "assert     get_median([1, 2, 3, 4, 5], [1, 3, 5, 10, 15], 5) == 3",
        "num_ids": 1177,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 110,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(pow(nums[i],n))\n    return result\n",
        "test": "assert     (nth_nums([1, 2, 3, 4, 5], 2) == [1, 4, 9, 16, 25])",
        "num_ids": 556,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 200,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.isupper()\n",
        "test": "assert     is_upper('Lola') == False",
        "num_ids": 587,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if newList:\n        newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n",
        "test": "assert     swap_List([2,1,3]) == [3,1,2]",
        "num_ids": 1682,
        "indeed": true
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 0\n    for i in range(1, int(math.sqrt(r * (r - 2))) + 1):\n        if (r * r - (i - 1) * (i - 1)) % (i - 1) == 0:\n            area += ((r * r - (i - 1) * (i - 1)) / (i - 1) * ((i - 1) ** 2 - 2 * i * (i - 1) + i + 1)) ** 0.5\n        else:\n            area += ((r * r - (i - 1) * (i - 1)) / (i - 1) * ((i - 1) ** 2 - 2 * i * (i - 1) + i + 1)) ** 0.5\n    return area\n",
        "test": "assert     triangle_area(0) == 0",
        "num_ids": 3561,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n    if end == 0:\n        return start\n    \n    p = start\n    while p < end:\n        if array[p] == end:\n            p += 1\n        elif array[p] > end:\n            end = p\n        else:\n            p += 1\n            \n    return end",
        "test": "assert     find_First_Missing([3, 2, 4, 1]) == 2",
        "num_ids": 1082,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n",
        "test": "assert     replace_spaces('%20') == '%20'",
        "num_ids": 801,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even=[]\n    for i in list:\n        if i%2==0:\n            even.append(i)\n    return even\n",
        "test": "assert     Split([]) == []",
        "num_ids": 969,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele not in sub:\n        sub.append(ele)\n        return adjac(ele[0], sub) + adjac(ele[1], sub)\n    else:\n        return sub\n    \ndef print_adjacent(elements):\n    '''\n    Write a function that takes as input an array of tuples and outputs its\n    adjacent elements in a form of a list.\n    '''\n    return adjac(elements[0]) + adjac(elements[1])\n",
        "test": "assert     adjac(3, (2,3)) == (2,3)",
        "num_ids": 2011,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \",\"_\").replace(\".\",\"_\")\n    return text\n",
        "test": "assert     replace_spaces('_') == '_'",
        "num_ids": 930,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 9,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    return num_list\n",
        "test": "assert     move_zero([]) == [], \"wrong\"",
        "num_ids": 3383,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 160,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(0,n) : \n        s = s + arr[i]\n    return s\n",
        "test": "assert     pair_xor_Sum([0,0,1,1], 3) == 1",
        "num_ids": 1188,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    for i in range(len(iterable)-1, 0, -1):\n        for j in range(i):\n            if iterable[j] > iterable[j+1]:\n                iterable[j], iterable[j+1] = iterable[j+1], iterable[j]\n    return iterable\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 3345,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost == 0 and sale_amount == 0:\n        return True\n    else:\n        return False\n    \n",
        "test": "assert     noprofit_noloss(3,5) is False",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    if v < 0:\n        v *= -1\n        t *= -1\n    \n    if (t < 20):\n        return v\n    \n    T_c = (9/5) + (9/5) * (t + 4)\n    A = 1.6726\n",
        "test": "assert     wind_chill(0,4) == 0",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # your code goes here\n    new_sample = []\n    for name in sample_names:\n        if name.lower().startswith('m'):\n            new_sample.append(len(name))\n        else:\n            new_sample.append(0)\n    return sum(new_sample)\n",
        "test": "assert     sample_nam(['Anna','Bob','Jack','Bob','Peter']) == 7",
        "num_ids": 2910,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def remove_parenthesis(items):\n        '''\n        Function to remove the parenthesis from the list of strings\n        '''\n        regex = r'(\\([^()]*\\)[^()]+\\))'\n        temp = re.findall(regex, str(items))\n        for item in temp:\n            if item[0] == '(' or item[-1] == ')':\n                items.remove(item)\n        return items\n    return remove_parenthesis(items)\n",
        "test": "assert     remove_parenthesis('()()') == '()()'",
        "num_ids": 3044,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 1\n    n = 1\n    while(n > i):\n        if (n % 2)!= 0:\n            i += 1\n        n /= 2\n    return i\n",
        "test": "assert     is_nonagonal(1) == True",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # If a word starts with 'z'\n    if re.match(r'(^\\w+)\\Z', text):\n        return True\n    # If a word ends with 'z'\n    elif re.match(r'(^\\w+)\\Z', text[-1]):\n        return True\n",
        "test": "assert     text_match_wordz_middle('text_match_wordz_middle') == True, \"text_match_wordz_middle()\"",
        "num_ids": 4861,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 140,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reversed = []\n    for index in range(len(input)):\n        reversed.append(input[len(input)-index-1])\n    return reversed\n",
        "test": "assert     reverse_Array_Upto_K([1,2,3,4,5,6], 2) == [6,5,4,3,2,1], 'Reverse Array not right!'",
        "num_ids": 3152,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + tuple(test_dict)\n    return new_tup\n",
        "test": "assert     add_dict_to_tuple((1, 2, 3, 4, 5), {'a': 3, 'b': 2}) == (1, 2, 3, 4, 5, 'a', 'b')",
        "num_ids": 1011,
        "indeed": false
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    maximum = 0\n    current = 0\n    # In the function we know that the maximum number of cells visited is in the paths\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if cost[i][j] > maximum:\n                maximum = cost[i][j]\n                current = j\n    return maximum/len(cost)\n",
        "test": "assert     maxAverageOfPath(cost) == 6.0",
        "num_ids": 1451,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 150,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # TODO: write the code here.\n    if(len(students) == 0):\n        return students\n    \n    student_dict = {}\n    for i in range(len(students)):\n        if students[i][1] > w:\n            student_dict.update({students[i][0]:students[i][1]})\n    \n    if(len(student_dict) == 0):\n        return students\n",
        "test": "assert     filter_data({\"A\": (\"55cm\", \"76in\"), \"B\": (\"68in\", \"73cm\")}, \"55cm\", \"76in\") == {'A': ('55cm', '76in')}",
        "num_ids": 1223,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    #Convert the lists into sets\n    nums1_set = set(nums1)\n    nums2_set = set(nums2)\n    #Find the set difference\n    return len(nums1_set.difference(nums2_set))\n",
        "test": "assert     count_same_pair([], []) == 0",
        "num_ids": 1352,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    total = 0\n    while power > 0:\n        total += power % 10\n        power = power // 10\n    return total\n",
        "test": "assert     power_base_sum(1, 1) == 1",
        "num_ids": 589,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    return re.findall('\\d+\\-\\d+\\s\\w*', text1)\n",
        "test": "assert     extract_quotation('\"') == []",
        "num_ids": 5867,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = []\n    i = 0\n    for x in test_tup:\n        i += 1\n        res.append(x * i)\n    return tuple(res)\n",
        "test": "assert     multiply_elements((1, 2, 3, 4)) == (1, 4, 9, 16)",
        "num_ids": 1078,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1 + lst2)\n",
        "test": "assert     sum_list([1,2,3,4,5,6,7,8,9],[9,10,11,12,13,14,15,16,17]) == [9,15,20,25]",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 730,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # Your code here\n    temp=[]\n    i=0\n    while i<len(nums):\n        if nums[i]!=nums[i-1]:\n            temp.append(nums[i])\n        i+=1\n    return temp\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 1379,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    lateral_area_of_cone = 2*r*h\n    print(f\"The lateral surface area of a cone with radius {r} and height {h} is {lateral_area_of_cone}\")\n    return lateral_area_of_cone\n",
        "test": "assert     lateralsurface_cone(0,0) == 0",
        "num_ids": 1386,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\".\", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\"-\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\"/\", \":\")\n    text = text.replace(\"$\", \":\")\n    text = text.replace(\":\", \":\")\n    text = text.replace(\"!\", \":\")\n    text = text.replace(\"?\", \":\")\n    text = text.replace(\"'\", \":\")\n    text = text.replace(\"@\", \":\")\n    text = text.replace(\"[\", \":\")\n    text = text.replace(\"]\", \":\")\n    text = text.replace(\"{\", \":\")\n    text = text.replace(\"}\", \":\")\n    text = text.replace(\"(\", \":\")\n    text = text.replace(\")\", \":\")\n    text = text.replace(\"\\t\", \":\")\n    text = text.replace(\"\\n\", \":\")\n    text = text.replace(\"\\\"\", \":\")\n    text = text.replace(\"\\\\\", \":\")\n    return text\ndef csv_to_dict(input_file):\n    '''\n    Write a function to parse and convert a CSV file to a dictionary.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Parse the file\n    with open(input_file) as f:\n        reader = csv.reader(f)\n        csv_dict = {row[0]:row[1:] for row in reader}\n    return csv_dict\ndef create_dict(input_file, key_word):\n    '''\n    Create a dictionary from a csv file.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [key_word] + [word for row in csv_dict.values() for word in row]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_lower_case(input_file):\n    '''\n    Given a CSV file, return a dictionary with lowercase keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word.lower() for word in csv_dict.values()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_capitalized(input_file):\n    '''\n    Given a CSV file, return a dictionary with capitalized keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word.capitalize() for word in csv_dict.values()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_non_word(input_file):\n    '''\n    Given a CSV file, return a dictionary with keys that aren't words.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word.lower() for word in csv_dict.values()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_numbers(input_file):\n    '''\n    Given a CSV file, return a dictionary with numbers as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.isnumeric()]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_urls(input_file):\n    '''\n    Given a CSV file, return a dictionary with urls as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.find('http') > -1]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_mixed(input_file):\n    '''\n    Given a CSV file, return a dictionary with mixed keys as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.endswith(\".csv\")]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_url_subdomain(input_file):\n    '''\n    Given a CSV file, return a dictionary with subdomain keys as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''\n    \n    # Open file\n    with open(input_file) as f:\n        # Create a dictionary\n        csv_dict = {row[0]:row[1:] for row in csv.reader(f)}\n        \n        # Create a set of words with a particular key word\n        word_list = [word for word in csv_dict.values() if word.endswith(\".csv\")]\n        \n        # Create a dict to return\n        d = dict(zip(word_list, csv_dict.values()))\n    return d\ndef get_path(input_file):\n    '''\n    Given a CSV file, return a dictionary with path keys as keys.\n    '''\n    # '''\n    # Input format:\n    # File\n    # File name:\n    # File path:\n    # '''",
        "test": "assert     replace_specialchar(\"HelloWorld\") == \"HelloWorld\", \"not correct\"",
        "num_ids": 7107,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 160,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    min_idx = 0\n    for i in range(len(A)):\n        if A[i] == x:\n            break\n    for i in range(len(A)):\n        if A[i] == x:\n            min_idx = i\n    return min_idx\n",
        "test": "assert     find_first_occurrence(A, 1) == 2",
        "num_ids": 869,
        "indeed": false
    },
    {
        "number": 734,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 0:\n        return 0\n    current = arr[0]\n    res = arr[0]\n    for i in range(1, len(arr)):\n        current = current*arr[i]\n        res = res + current\n    return res\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 7,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    new_val = bin(n) # format to 2's complement, B's\n    \n    if len(new_val) > 2:\n        new_val = new_val[2:]\n    \n    if len(new_val) < 2:\n        new_val = '0' * (2 - len(new_val)) + new_val\n    \n    \n    \n    return int(new_val, 2)\n    \n",
        "test": "assert     set_middle_bits(0b1111), 'Second bit is 1'",
        "num_ids": 1171,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    index = bisect.bisect_left(a, x)\n    return index\n",
        "test": "assert     left_insertion(a=[], x=1) == 0, \"Left insertion point is not correct\"",
        "num_ids": 785,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 110,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex, string)):\n        print('Vowel')\n    else:\n        print('Not a vowel')\n",
        "test": "assert     check_str('we'), 'check_str(\u201cwe\u201d) should be \\'we\\''",
        "num_ids": 499,
        "indeed": false
    },
    {
        "number": 738,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 687,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    d = {3: 1, 5: 2, 7: 3, 9: 4, 11: 5, 13: 6, 17: 7, 19: 8, 21: 9, 23: 10, 29: 11, 31: 12, 37: 13, 41: 14, 43: 15, 47: 16, 53: 17, 59: 18, 61: 19, 67: 20, 71: 21, 73: 22, 79: 23, 83: 24, 89: 25, 97: 26, 101: 27, 103: 28, 107: 29, 109: 30, 111: 31, 113: 32}\n    index = 0\n    for i in range(n + 1): \n        a = math.floor(i / 10) \n        b = math.floor((i % 10) / 5) \n        c = math.floor((i % 10) / 3) \n        if (a, b, c) in d.values(): \n            index = d[a, b, c]\n    return index \n",
        "test": "assert     find_Index(0) == 0",
        "num_ids": 1887,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict([(test_tup[i],test_tup[i + 1]) for i in range(len(test_tup) - 1)])\n",
        "test": "assert     tuple_to_dict((1, 2)) == {1: 2}",
        "num_ids": 1230,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.replace('\\n','').replace('\\r','').replace('\\t','').replace(' ','')==s.replace('\\n','').replace('\\r','').replace('\\t','').replace(' ','')\n",
        "test": "assert     all_Characters_Same(\"A\") == True",
        "num_ids": 602,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    # if the side of the tetrahedron is 1\n    if side == 1:\n        return 0\n    # if the side of the tetrahedron is 2\n    elif side == 2:\n        area = 0.25*side*side\n    elif side == 3:\n        area = 0.5*side*side\n    elif side == 4:\n        area = side**2\n    return area\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 3010,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    return list[m:] + list[:m]\n",
        "test": "assert     rotate_right([1, 2, 3, 4, 5, 6], 4) == [5, 6, 1, 2, 3, 4]",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n",
        "test": "assert     check_none((1,2,3))==False",
        "num_ids": 703,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    def divisible_by_digits(num):\n        return all(c in '1234567890' for c in str(num))\n    return sum(filter(divisible_by_digits, range(startnum, endnum + 1)))\n",
        "test": "assert     divisible_by_digits(8, 6) == False",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 150,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if r<0:\n        print(\"The radius of a sector must be positive\")\n        return None\n    elif a<0:\n        print(\"The angle of a sector must be positive\")\n        return None\n    elif a>math.pi:\n        print(\"The angle of a sector must be smaller than pi/2\")\n        return None\n    elif r==0:\n        print(\"The sector is the square root of the area of the radius\")\n        return math.pi*r**2\n    elif r==1:\n        print(\"The sector is the area of a circle\")\n        return r*r*math.pi\n    else:\n        n = math.sqrt(r*r-a*a)\n        print(n)\n        if n<0.001:\n            print(\"The sector is a square root of the area of the radius\")\n            return math.pi*n**2\n        else:\n            print(\"The sector is a circle\")\n            return n**2*math.pi\n",
        "test": "assert     sector_area(0,math.pi/3) == 0",
        "num_ids": 1072,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    M = len(X)\n    N = len(Y)\n    T = len(Z)\n    \n    # Create DP array to store results \n    # Create a 2D array to store lcs results\n    # Create a 2D array to store lcs results \n    # Create a 2D array to store lcs results \n    # Create a 2D array to store lcs results \n    \n    LCS = [[0 for x in range(N + 1)] for y in range(M + 1)] # 2D array to store LCS results \n    \n    # Build 2D array to store LCS results \n    # For each character in string X\n    # store results of X followed by LCS results of Y \n    # for each result of X, store in index in index\n    for i in range(M + 1):\n        for j in range(N + 1):\n            if i == 0 or j == 0:\n                LCS[i][j] = 0 # Base case \n            elif X[i - 1] == Y[j - 1]: # case if two characters are adjacent \n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else: # else, it will be the last character \n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n    \n    # Store lcs results \n    # for each character in string X \n    # Store the index of the characters \n    # in the string \n    # in the 2D array \n    # Index of the first character in string X \n    # is stored in index \n    # Index of the last character in string X \n    # is stored in index \n    # in the 2D array \n    # Index of the first character in string Y \n    # is stored in index \n    # Index of the last character in string Y \n    # is stored in index \n    # in the 2D array \n    # Index of the first character in string Z \n    # is stored in index \n    # Index of the last character in string Z \n    # is stored in index \n    # in the 2D array \n    \n    for i in range(1, M + 1):\n        for j in range(1, N + 1):\n            if X[i - 1] == Y[j - 1]:\n                LCS[i][j] = LCS[i - 1][j - 1] + 1\n            else:\n                LCS[i][j] = max(LCS[i - 1][j], LCS[i][j - 1])\n    \n    # find the longest common subsequence \n    # from LCS results \n    # to string X, Y and Z \n    # and return the result \n    return LCS[M][N]\n",
        "test": "assert     lcs_of_three(\"abc\", \"def\", \"abcd\") == 0, \"1\"",
        "num_ids": 2836,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'([A-Z])\\s+', r' \\1', str1)\n",
        "test": "assert     capital_words_spaces('') == '', 'Check that the function returns an empty string'",
        "num_ids": 2894,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=lambda x: int(x))\n    return nums_str",
        "test": "assert     sort_numeric_strings([]) == [],'sorted_numeric_strings'",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 180,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    t_list = [i for i in test_list]\n    t_list.extend(test_tup)\n    return t_list\n",
        "test": "assert     add_tuple(('apple',),('carrot',)) == ['apple', 'carrot']",
        "num_ids": 2721,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i<0 or i>=len(arr): return False\n    if arr[i]<arr[i//2] or arr[i]>arr[(i+1)//2]: return False\n    return True\n",
        "test": "assert     check_min_heap_helper([5,3,1],1) == False",
        "num_ids": 1543,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 140,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n <= 0:\n        return 0\n    \n    j = 1\n    while n > 1:\n        if n % j == 0:\n            n /= j\n            j += 1\n        else:\n            j += 1\n    return n\n",
        "test": "assert     jacobsthal_num(0) == 0",
        "num_ids": 8202,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    mins = []\n    for i in range(len(test_list)):\n        mins.append(test_list[i])\n    mins.sort()\n    return mins[:K]\n",
        "test": "assert     min_k([('a', 1), ('b', 2), ('c', 3)], 3) == [('a', 1), ('b', 2), ('c', 3)]",
        "num_ids": 1464,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    d = {}\n    for i in l1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in l2:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in l3:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    for i in d:\n        if d[i] == 3:\n            return [i, d[i]]\n    return []\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 2102,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Not working, use sorted, time complexity O(n+k)\n    # O(n+k) time complexity\n    # O(n) space complexity\n    \n    return min(numbers)\n",
        "test": "assert second_smallest([1, 3, 2]), \"First smallest number is 1\"",
        "num_ids": 916,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    \n    words = text.split()\n    for word in words:\n        if word[0] in \"a|b\":\n            return word[0].lower()\n    return \"match zero one\"\n",
        "test": "assert    text_match_zero_one('It was a book that I never made.')",
        "num_ids": 4904,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    s = 0\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            if test_list[i]!= test_list[j]:\n                s += 1\n        count += s\n        s = 0\n    return count\n",
        "test": "assert     count_reverse_pairs([]) == 0",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique_list = []\n    counter = {}\n    for i in list1:\n        if i not in unique_list:\n            unique_list.append(i)\n            counter[i] = counter.get(i, 0) + 1\n    return counter\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 1068,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 200,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n",
        "test": "assert     is_decimal('1.2') == True",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 10,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    for i in arr:\n        if len(set(arr))==1:\n            return False\n    return True\n",
        "test": "assert     unique_Element([2, 2, 2, 2, 2]) == False, 'The function is not correct!'",
        "num_ids": 853,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    return True\n",
        "test": "assert     check_monthnumber_number(15) == False",
        "num_ids": 1397,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    def find_min(arr,l,h): \n        if l > h: \n            return 0\n        mid = (l + h)//2\n        if arr[mid] == mid: \n            return mid \n        elif arr[mid] < mid: \n            return find_min(arr,mid + 1,h) \n        else: \n            return find_min(arr,l,mid - 1) \n    return find_min(arr,0,n-1) \nprint(find_min_diff([1,3,2,5,6,4],4))\n",
        "test": "assert     find_min_diff([1,2,3,4,5,6], 1) == 0",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 4,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    digits = 0\n    # Split the string into each character\n    for i in str:\n        if i.isdigit():\n            digits += 1\n        else:\n            break\n    return digits\n",
        "test": "assert     number_ctr('') == 0",
        "num_ids": 2647,
        "indeed": false
    },
    {
        "number": 765,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 180,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return True if n % 2 == 1 else False \n",
        "test": "assert     is_polite(1) == True",
        "num_ids": 635,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 180,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l = []\n    for i in range(len(l1)-1):\n        if l1[i]==l1[i+1]:\n            continue\n        else:\n            l.append((l1[i],l1[i+1]))\n    return l\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 2471,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr) - 1):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n",
        "test": "assert     get_pairs_count([0, 1, 1], 0) == 0, 'get_pairs_count([0, 1, 1], 0) should return 0'",
        "num_ids": 1065,
        "indeed": true
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result = []\n    li = []\n    for i in li1:\n        li.append(i)\n    for i in li2:\n        li.append(i)\n    for i in range(len(li)):\n        for j in range(i+1,len(li)):\n            if li[i] == li[j]:\n                result.append(li[i])\n    return result\n",
        "test": "assert         Diff([1,2,3,4], [4,3,2,1])",
        "num_ids": 1260,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 130,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    if n == 1 :\n        return 1\n    return odd_num_sum(n-1) + odd_num_sum(n-2) + odd_num_sum(n-3) + odd_num_sum(n-4)\n",
        "test": "assert     odd_num_sum(0) == 0, \"First odd number is not odd number\"",
        "num_ids": 705,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 190,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if len(stack) == 0:\n                return False\n            else:\n                stack.pop()\n    if len(stack) == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_expression(\"[({[(])]}])\") == \"balanced\" or \"balanced\" or \"balanced\"",
        "num_ids": 1233,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    test_str = test_str.split(' ')\n    for i in range(len(test_str)):\n        for j in range(i, len(test_str)):\n            if len(test_str[i]) == K:\n                test_str.remove(test_str[i])\n                break\n    return \" \".join(test_str)",
        "test": "assert     remove_length('This is a string', 5) == 'This is a string'",
        "num_ids": 2700,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 170,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    #Examples:\n    #occurance_substring('saturday','s')\n    #return'saturday'\n    #occurance_substring('kitty','k')\n    #return 'k'\n    return None\n",
        "test": "assert     'a' in 'abc'",
        "num_ids": 3401,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 130,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    print(nums)\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            print(nums[i])\n            return False\n    print(\"All is odd\")\n    return True\n",
        "test": "assert     odd_position([])",
        "num_ids": 493,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 190,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    test_str = test_str.lower()\n    cnt = 0\n    for c in test_str:\n        if c.isalpha():\n            if c.isupper():\n                if c.islower():\n                    cnt += 1\n    return cnt\n",
        "test": "assert     count_vowels('') == 0, 'count_vowels test failed'",
        "num_ids": 1289,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 160,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n",
        "test": "assert     find_sum([1, 1, 2, 2, 1]) == 3, \"incorrect\"",
        "num_ids": 1041,
        "indeed": true
    },
    {
        "number": 778,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    i = 0\n    for j in range(len(list1)):\n        if j == len(list1) - 1:\n            result.append(list1[i:])\n        elif list1[j] == list1[j + 1]:\n            if j!= len(list1) - 1:\n                result.append(list1[i:j + 1])\n                i = j + 1\n            else:\n                result.append(list1[i:])\n                i = 0\n        else:\n            result.append(list1[i:j + 1])\n            i = j + 1\n    return result\n",
        "test": "assert pack_consecutive_duplicates([]) == []",
        "num_ids": 3442,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    counter = { }\n    for item in list1:\n        if type(item) is tuple:\n            counter[tuple(item)] = counter.get(tuple(item), 0) + 1\n        else:\n            counter[item] = counter.get(item, 0) + 1\n    return counter\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 4962,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 150,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list.sort()\n    combinations_list = []\n    for i in test_list:\n        combinations_list.append(tuple(combinations(test_list,i)))\n    return combinations_list\n",
        "test": "assert     find_combinations([]) == [], \"find_combinations() should be returning None\"",
        "num_ids": 3193,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 190,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, n):\n        if (n % i == 0):\n            count += 1\n    return count\ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even.\n    '''\n    count = 0\n    for i in range(1, n):\n        if (n % i == 0):\n            count += 1\n    return count\ndef is_prime(n):\n    '''\n    To check whether a number is prime or not.\n    '''\n    if n == 2 or n == 3 or n % 2 == 0 or n % 3 == 0:\n        return False\n    elif n < 2 or n % 2 == 0:\n        return False\n    else:\n        for i in range(5, math.ceil(math.sqrt(n)), 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_factor(n):\n    '''\n    To check whether a number is a prime factor or not.\n    '''\n    if n == 2 or n == 3 or n % 2 == 0 or n % 3 == 0:\n        return False\n    elif n < 2 or n % 2 == 0:\n        return False\n    else:\n        for i in range(5, math.ceil(math.sqrt(n)), 2):\n            if n % i == 0:\n                return False\n        return True\ndef is_prime_factor_other(n):\n    '''\n    To check whether a number is a prime factor or not.\n    '''\n    if n == 2 or n == 3 or n % 2 == 0 or n % 3 == 0:\n        return False\n    elif n < 2 or n % 2 == 0:\n        return False\n    else:\n        for i in range(5, math.ceil(math.sqrt(n)), 2):\n            if n % i == 0:\n                return False\n        return True\n",
        "test": "assert         count_divisors(1) == 0",
        "num_ids": 877,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 160,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if(i % 2 == 1):\n            sum += arr[i]\n    return sum\n    # if(len(arr) % 2 == 1):\n    #     return 0\n",
        "test": "assert     odd_length_sum([]) == 0",
        "num_ids": 2842,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 130,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    c = int(255 * r + 0.5)\n    m = int(255 * g + 0.5)\n    y = int(255 * b + 0.5)\n    min_val = min(c, m, y)\n    max_val = max(c, m, y)\n    delta = max_val - min_val\n    if delta == 0:\n        return (0, 0, 0)\n    if delta == 0.000001:\n        return (0, 0, 0)\n    if m == 0:\n        s = 0\n    else:\n        s = delta / m\n    if c == 0:\n        h = 0\n    else:\n        h = delta / c\n    if y == 0:\n        v = 0\n    else:\n        v = delta / y\n    if s < 0.0031308:\n        h = 0\n    if s > 0.0031308:\n        h = 1\n    if h < 0.301029:\n        v = 0\n    if h > 0.301029:\n        v = 1\n    if v < 0.200002:\n        s = 0\n    if v > 0.200002:\n        s = 1\n    if s < 0.0001:\n        s = 0\n    return (int(h * 6.1134), int(s * 6.1134), int(v * 6.1134))\n",
        "test": "assert     rgb_to_hsv(0, 0, 0) == (0, 0, 0), \"rgb_to_hsv() should return (0, 0, 0)\"",
        "num_ids": 6216,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_odd = []\n    prod = 1\n    for i in list1:\n        if i % 2 == 0:\n            even_odd.append(i)\n        else:\n            prod = prod * i\n    return prod\n",
        "test": "assert     mul_even_odd([]) == 1",
        "num_ids": 3469,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    result = ()\n    for i in range(0,len(test_str)-1):\n        result += (test_str[i],)\n    result += (test_str[len(test_str)-1],)\n    return result\n",
        "test": "assert     tuple_str_int((1, 2, 3)) == (1, 2, 3)",
        "num_ids": 1118,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low, high = 0, len(a) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if a[mid] <= x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return low\n",
        "test": "assert     right_insertion(a=[1, 2, 3, 4], x=4) == right_insertion(a=[1, 2, 3, 4], x=4)",
        "num_ids": 993,
        "indeed": true
    },
    {
        "number": 787,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a = re.findall('a\\b', text)\n    b = re.findall('b\\b', text)\n    c = re.findall('c\\b', text)\n    return a == b == c\n",
        "test": "assert     text_match_three(\"\") == True",
        "num_ids": 6842,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 160,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = []\n    for element in test_list:\n        new_list.append(element)\n    return tuple(new_list)\n",
        "test": "assert     (new_tuple('hello', 'bicycle'))!= ('hello', 'lady')",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 6,
        "total_product": 120,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if (i % 2 == 0) and (nums[i] % 2 == 0):\n            return True\n    return False\n",
        "test": "assert     even_position([0,2,4,6,8,10]) == True",
        "num_ids": 756,
        "indeed": true
    },
    {
        "number": 791,
        "max_answer_num": 10,
        "max_test_num": 1,
        "total_product": 170,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(filter(lambda x: not isinstance(x, tuple), test_tup))\n",
        "test": "assert     remove_nested((1, 2)) == (1, 2)",
        "num_ids": 999,
        "indeed": true
    },
    {
        "number": 792,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 170,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # remove duplicate\n    #remove all the duplicates\n    #sort the list\n    #return the number of unique values in the list\n    #repeat that\n    #append the unique values to the original list\n    #repeat that\n    \n    unique_list = []\n    for l in input_list:\n        if l not in unique_list:\n            unique_list.append(l)\n    print(len(unique_list))\n    return len(unique_list)\n    \ndef odd_even(input_list):\n    '''\n    Write a python function to return True if the input list is odd and False if the input list is even.\n    '''\n    # remove duplicate\n    #remove all the duplicates\n    #sort the list\n    #return the number of unique values in the list\n    #repeat that\n    \n    unique_list = []\n    for l in input_list:\n        if l not in unique_list:\n            unique_list.append(l)\n    print(len(unique_list))\n    return len(unique_list)%2 == 0\n",
        "test": "assert     count_list([]) == 0, \"The function should return 0\"",
        "num_ids": 3035,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 150,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0 or len(arr)==1:\n        return -1\n    if arr[len(arr)-1]<x:\n        return len(arr)-1\n    else:\n        return len(arr)-1\ndef search(arr,x):\n    '''\n    Write a python function to find the index of the first occurrence of a value in a sorted array.\n    '''\n    if len(arr)==0 or len(arr)==1:\n        return -1\n    if arr[0]<x:\n        return 0\n    if arr[len(arr)-1]<x:\n        return len(arr)-1\n    else:\n        if arr[len(arr)-1]==x:\n            return 0\n        else:\n            return -1\n",
        "test": "assert last([5,4,6,6,7,8,9,10], 6), \"last([5,4,5,6,6,7,8,9,10],6) should be equal to 6\"",
        "num_ids": 863,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 200,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.search(r'a(?=\\w)', text) is not None\n",
        "test": "assert     text_starta_endb(\"abc abcd abc\")",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for x in dict.values():\n        sum+=x\n    return sum\n",
        "test": "assert     return_sum({'a': 1, 'b':2, 'c': 3}) == 6, 'incorrect return value'",
        "num_ids": 827,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 160,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 0\n    r = n\n    sum = 0\n    while (r-l >= 1):\n        if (r % 2 == 1):\n            sum += r\n            r = r // 2\n        else:\n            l = l + 1\n    return sum\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 798,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 6,
        "max_test_num": 10,
        "total_product": 190,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum=0\n    for i in range(len(arr)):\n        sum=sum+arr[i]\n    return sum\n",
        "test": "assert     _sum([]) == 0",
        "num_ids": 655,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    l = n%(2**32)\n    r = n//(2**32)\n    if l==r:\n        return 0\n    if l%2==0:\n        return l-r\n    else:\n        return r+l\n",
        "test": "assert     left_rotate(19,1) == 19",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 180,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub('\\s+','', text)\n    return text\n",
        "test": "assert     'Hi' == 'Hi'",
        "num_ids": 4519,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 150,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    result = 0\n    for i in range(x,y):\n        if i==z:\n            result += 1\n    return result\n",
        "test": "assert     (3,5,6) == (3,5,6), 'Test failed'",
        "num_ids": 3047,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    s = 0\n    m = 1\n    for i in range(n):\n        s += arr[i]\n        if s > m:\n            m = s\n            m %= n\n    return m\n",
        "test": "assert     count_rotation([0,1,2,3]), 3",
        "num_ids": 1133,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    sq = int(n**0.5)\n    if sq == int(sq) and n%sq == 0:\n        return True\n    return False\n",
        "test": "assert     is_perfect_square(123) == False",
        "num_ids": 846,
        "indeed": true
    },
    {
        "number": 804,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 180,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) % 2 == 0: \n        return False \n    else: \n        return True \n",
        "test": "assert     is_product_even([1,2,3,6,7,8,9,10]) == False, \"is_product_even: Expected False, got: \" + str(is_product_even([1,2,3,6,7,8,9,10]))",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    highest_sum = []\n    for list in lists:\n        if list not in highest_sum:\n            highest_sum.append(list)\n    return highest_sum\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 764,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 180,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_run += 1\n    return max_run\n",
        "test": "assert     max_run_uppercase(test_str = \"A\") == 1",
        "num_ids": 1138,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 150,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 1:\n            return nums[i]\n",
        "test": "assert     first_odd([2, 2, 2, 2, 2]) == 2",
        "num_ids": 914,
        "indeed": false
    },
    {
        "number": 808,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check_list = []\n    for i in test_tup:\n        check_list.append(i)\n    return K in check_list\n",
        "test": "assert     check_K((\"b\", \"a\"), 1) == False",
        "num_ids": 687,
        "indeed": true
    },
    {
        "number": 809,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    tup = tuple(test_tup2)\n    small = False\n    if tup:\n        for each in test_tup1:\n            if each < tup[0]:\n                small = True\n    return small\n",
        "test": "assert     check_smaller([1,5,4,10,7,9,11], [1,2,4,7,3]) == False, \"check_smaller() failed\"",
        "num_ids": 942,
        "indeed": false
    }
]