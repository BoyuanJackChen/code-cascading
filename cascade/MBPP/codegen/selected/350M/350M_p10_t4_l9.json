[
    {
        "number": 2,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    shared_elements = tup1.intersection(tup2)\n    if len(shared_elements) == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     similar_elements([1, 2, 3], [3, 1, 1]) == True",
        "num_ids": 2019,
        "indeed": false
    },
    {
        "number": 3,
        "max_answer_num": 20,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return True\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0:\n            return False\n        i = i + 6\n    return True\n",
        "test": "assert     is_not_prime(2) == True",
        "num_ids": 2895,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 180,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    n = len(nums)\n    if n==0:\n        return []\n    if n==1:\n        return nums\n    \n    heap = []\n    heapq.heapify(heap)\n    for num in nums:\n        heapq.heappush(heap,-num)\n    #k = 0\n    #for k in range(n-1,-1,-1):\n    #    heapq.heappop(heap)\n    heapq.heapify(heap)\n    return heap\n",
        "test": "assert     heap_queue_largest([], 0) == []",
        "num_ids": 3648,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 19,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x == 2 : \n        return True\n    if x < 2 : \n        return False\n    for i in range (1, x//2) : \n        if x % i == 0: \n            return False\n    return True\n",
        "test": "assert     is_Power_Of_Two (1) == False",
        "num_ids": 941,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 300,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) >= 4:\n            res.append(i)\n    return res\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) <= 3:\n            res.append(i)\n    return res\ndef find_char_palindrome(text):\n    '''\n    Write a function to find all words which are a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1]:\n            res.append(i)\n    return res\ndef find_double_long(text):\n    '''\n    Write a function to find all words which are double the length of a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) == len(i) * 2:\n            res.append(i)\n    return res\ndef find_double_short(text):\n    '''\n    Write a function to find all words which are double the length of a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) == len(i) * 2:\n            res.append(i)\n    return res\ndef find_long_long(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) >= 3:\n            res.append(i)\n    return res\ndef find_long_short(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) >= 3:\n            res.append(i)\n    return res\ndef find_short_long(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) <= 3:\n            res.append(i)\n    return res\ndef find_short_short(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a string.\n    '''\n    res = []\n    for i in text:\n        if len(i) <= 3:\n            res.append(i)\n    return res\ndef find_palindrome(text):\n    '''\n    Write a function to find all words which are a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1]:\n            res.append(i)\n    return res\ndef find_double_long_palindrome(text):\n    '''\n    Write a function to find all words which are double the length of a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) == len(i) * 2:\n            res.append(i)\n    return res\ndef find_double_short_palindrome(text):\n    '''\n    Write a function to find all words which are double the length of a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) == len(i) * 2:\n            res.append(i)\n    return res\ndef find_long_long_palindrome(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) >= 3:\n            res.append(i)\n    return res\ndef find_long_short_palindrome(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) >= 3:\n            res.append(i)\n    return res\ndef find_short_long_palindrome(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) <= 3:\n            res.append(i)\n    return res\ndef find_short_short_palindrome(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) <= 3:\n            res.append(i)\n    return res\ndef find_long_short_palindrome_odd(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) <= 3:\n            if len(i) % 2 == 1:\n                res.append(i)\n    return res\ndef find_long_short_palindrome_even(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) <= 3:\n            if len(i) % 2 == 0:\n                res.append(i)\n    return res\ndef find_long_short_palindrome_odd_even(text):\n    '''\n    Write a function to find all words which are at least 3 characters shorter than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) <= 3:\n            if len(i) % 2 == 0 and len(i) % 2 == 1:\n                res.append(i)\n    return res\ndef find_long_long_palindrome_even_odd(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) >= 3:\n            if len(i) % 2 == 0:\n                res.append(i)\n    return res\ndef find_palindrome_palindrome_palindrome(text):\n    '''\n    Write a function to find all words which are a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1]:\n            res.append(i)\n    return res\ndef find_long_long_palindrome_odd_even(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) >= 3:\n            if len(i) % 2 == 0:\n                res.append(i)\n    return res\ndef find_long_long_palindrome_even_odd(text):\n    '''\n    Write a function to find all words which are at least 3 characters longer than a palindrome which is a palindrome in a string.\n    '''\n    res = []\n    for i in text:\n        if i == i[::-1] and len(i) >= 3:\n            i",
        "test": "assert     find_char_long('12345') == []",
        "num_ids": 3571,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squared_list = []\n    for num in nums:\n        squared_list.append(num**2)\n    return squared_list\n",
        "test": "assert     square_nums([]) == []",
        "num_ids": 1078,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #print(str.count('x'))\n    if str.count('x')>0:\n        rotations=str.count('x')\n    else:\n        rotations=0\n    \n    return rotations\n",
        "test": "assert     find_Rotations(\"\") == 0, \"The find_Rotations function returned incorrect value.\"",
        "num_ids": 1222,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 15,
        "max_test_num": 4,
        "total_product": 390,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #Use O(n) time to do this\n    n=len(s)\n    if n==0:\n        return \"\"\n    if s[0]==ch:\n        s=s[1:]\n    if s[-1]==ch:\n        s=s[:-1]\n    return s\n    \n    ",
        "test": "assert     remove_Occ('c', 'b') == 'c', \"Test Failed\"",
        "num_ids": 1318,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 210,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    m = 0\n    while m < n:\n        if sum(M[m]) >= n:\n            M[m], M[n] = M[n], M[m]\n            n -= 1\n            m += 1\n        else:\n            m += 1\n    return M\n",
        "test": "assert     sort_matrix([[3,4,1,2],[5,6,7,8],[9,10,11,12],[5,4,3,2]]) == [[5,4,3,2],[3,2,1,5],[7,8,9,6],[10,11,12,1]]",
        "num_ids": 1798,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l*(b*h)/2)\n    return v\n",
        "test": "assert     find_Volume(0,0,0) == 0",
        "num_ids": 1049,
        "indeed": true
    },
    {
        "number": 16,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    print(text)\n    if text.count(' ')!= 0:\n        print(\"Input is not a string.\")\n        return False\n    else:\n        if not re.search(r'[a-z]+_[a-z]+', text):\n            print(\"Input is not a string.\")\n            return False\n        elif not re.search(r'[A-Z]+', text):\n            print(\"Input is not a string.\")\n            return False\n        elif not re.search(r'[A-Z]+_[A-Z]+', text):\n            print(\"Input is not a string.\")\n            return False\n        elif not re.search(r'[0-9]+', text):\n            print(\"Input is not a string.\")\n            return False\n        else:\n            return True\n    ",
        "test": "assert     text_lowercase_underscore('Hello There') == False, 'Text not correct'",
        "num_ids": 4232,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n",
        "test": "assert     square_perimeter(0) == 0",
        "num_ids": 664,
        "indeed": true
    },
    {
        "number": 18,
        "max_answer_num": 2,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    char_list = []\n    for char in string: \n        if char in char_list: \n            continue\n        char_list.append(char)\n    return char_list\n",
        "test": "assert     str_to_list(\"\") == []",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    l=list(arraynums)\n    return len(set(l)) >1\n",
        "test": "assert     test_duplicate([1,1,2,3,1,2,3]) == True",
        "num_ids": 3043,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x >= 0 and x <= 3 else False\n",
        "test": "assert not is_woodall(9)",
        "num_ids": 740,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = int(num)\n    rev_num_reverse = rev_num * 2\n    rev_num_reverse = rev_num_reverse - rev_num\n    if rev_num_reverse > 0:\n        return rev_num_reverse\n    else:\n        return 0\nprint(rev(14))",
        "test": "assert rev(0) == 0",
        "num_ids": 4774,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    # declare the list of digits\n    digits = list(map(int, arr))\n    # find the max number \n    max = digits[0]\n    for i in range(len(digits)) :\n        if digits[i] > max :\n            max = digits[i]\n    return max\n",
        "test": "assert     find_Max_Num([1,2,3,4,5]) == 5",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > y: \n        return True\n    elif x < y: \n        return False\n    else: \n        return False\n    ",
        "test": "assert     opposite_Signs(2,2) == False",
        "num_ids": 651,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 380,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    return (is_octagonal(n-1) + is_octagonal(n-2)) % 10",
        "test": "assert     is_octagonal(1)",
        "num_ids": 1035,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 16,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    result = 0\n    for i in range(len(s)):\n        dig = s[i]\n        j = i+1\n        while j < len(s) and s[j] == dig:\n            j += 1\n        if j - i == 2*len(s) - 2:\n            result += 1\n    return result\n",
        "test": "assert     count_Substrings(\"\") == 0",
        "num_ids": 1242,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # change the code to your solution\n    # comment for python 3\n    smallest_num = min(xs)\n    return smallest_num\n",
        "test": "assert     smallest_num([-10]) == -10",
        "num_ids": 914,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] - test_list[j] > 0:\n                return max(abs(test_list[i] - test_list[j]), abs(test_list[i] - test_list[j]))\n    return 0\n",
        "test": "assert     max_difference([(3,3)]) == 0, 'incorrect'",
        "num_ids": 3313,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    \n    def sort(item):\n        if item[1] < item[0]:\n            return item[0]\n        else:\n            return item[1]\n    return sorted(subjectmarks, key=sort)\n",
        "test": "assert     subject_marks(['CEO', 'CEO', 'CEO', 'Programmer']) == ['CEO', 'CEO', 'CEO', 'Programmer']",
        "num_ids": 3385,
        "indeed": false
    },
    {
        "number": 65,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 260,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    return sum(data_list)",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 1200,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 340,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 1089,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 14,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n",
        "test": "assert     bell_number(1) == 1",
        "num_ids": 3013,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 27,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A) - 1):\n        if A[i] > A[i + 1]:\n            return False\n    return True\n",
        "test": "assert not     is_Monotonic([1, 4, 6, 3])",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) == 0:\n        return True\n    if l[0] not in s:\n        return False\n    return is_sublist(l[1:], s)\n",
        "test": "assert         is_sublist([1, 2, 3], [1, 2, 3]), \"test_2\"",
        "num_ids": 1687,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 17,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    \n    if len(Input) % 2 == 1:\n        return False\n    if len(Input) < 3:\n        return True\n    \n    for i in range(len(Input)):\n        if i >= len(Input)/2:\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1,1), (1,2), (1,3), (2,2), (2,3)]) == False",
        "num_ids": 1518,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n    else:\n        for i in range(len(nums)):\n            for j in range(len(nums)-i-1):\n                if nums[j] > nums[j+1]:\n                    nums[j], nums[j+1] = nums[j+1], nums[j]\n        return nums\n",
        "test": "assert      comb_sort([]) == []",
        "num_ids": 3363,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def sq_diff(a, b):\n        return a - b\n    def sq_eq(a, b):\n        return a == b\n    def is_square(a):\n        '''\n        Output: True or False\n        '''\n        return a == a and a!= 0\n    for i in range(1, n+1):\n        if is_square(i):\n            for j in range(1, i):\n                if is_square(j) or is_square(j-i) or is_square(j+i):\n                    return True\n    return False\n",
        "test": "assert     dif_Square(1) == 0",
        "num_ids": 1103,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 15,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return all(pattern in colors for pattern in patterns)\n",
        "test": "assert     is_samepatterns(['r','g','b','c','o'], ['r','g','b','c','o','t','e']) == False,'red green blue cyan orange'",
        "num_ids": 5806,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    tup_list = []\n    for i in test_list:\n        if i[0]%K == 0:\n            tup_list.append(i)\n    return tup_list\n",
        "test": "assert     find_tuples([], 4) == []",
        "num_ids": 1577,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    for i in range(1, n + 1):\n        if i % 11 == 0:\n            return False\n    return True\n",
        "test": "assert     is_Diff(19) == False, 'Number 19 is divisible by 11'",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # Your code here\n    if len(s)%2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     word_len('python') == 1",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 400,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # Write your code here\n    return n * (n+1) // 2\n",
        "test": "assert tetrahedral_number(1) == 1",
        "num_ids": 3882,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 200,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Your code goes here\n    volume = 3.14*(r*r)*(r**2)\n    return volume\n",
        "test": "assert     volume_sphere(0) == 0",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 230,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_list = list(strr)\n    for i in range(len(char_list)):\n        char = ord(char_list[i])\n        char = char - ord('A')\n        char = char + ord('a')\n        char_list[i] = chr(char)\n    result = ''.join(char_list)\n    return result\n",
        "test": "assert     get_Char('') == '', 'test'",
        "num_ids": 3549,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 4\n    elif n == 4:\n        return 6\n    elif n == 5:\n        return 8\n    else:\n        pass\n",
        "test": "assert     sequence(1)",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    # your code goes here\n    return 0.5*(math.pi*r**2)\n",
        "test": "assert     surfacearea_sphere(0.0) == 0",
        "num_ids": 560,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n > 0 and n <= 9:\n        return n\n    else:\n        return n - 1\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 4799,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n",
        "test": "assert     merge_dictionaries_three({\"a\":1, \"b\":2, \"c\":3}, {\"a\":1, \"b\":2, \"d\":4}, {\"a\":1, \"c\":3, \"e\":5}) == {\"a\":1, \"b\":2, \"c\":3, \"d\":4, \"e\":5}",
        "num_ids": 2475,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\ndef freq_sum(list2):\n    '''\n    Write a function to get the sum of all the elements in a list, returned as a dictionary.\n    '''\n    sum = collections.Counter(list2)\n    return sum\ndef print_freq(freq):\n    '''\n    Write a function that prints the frequency of elements in a dictionary.\n    '''\n    for key, val in freq.items():\n        print(f'{key}:\\t{val}')\ndef sorted_list(list1):\n    '''\n    Write a function that sorts a list and returns a new list sorted in ascending order.\n    '''\n    new_list = sorted(list1, reverse = True)\n    return new_list\ndef reverse_list(list1):\n    '''\n    Write a function that reverses a list in ascending order.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    return new_list\ndef longest_word(list1):\n    '''\n    Write a function that returns the longest word in a list of words.\n    '''\n    words = list1\n    print(len(words[0]))\n    return words[0]\ndef most_common_word(list2):\n    '''\n    Write a function that returns the most common word in a list of words.\n    '''\n    counts = collections.Counter(list2)\n    return counts.most_common(1)[0][0]\ndef most_common_word_longest(list1):\n    '''\n    Write a function that returns the word with the most common meaning.\n    '''\n    words = list1\n    for word in words:\n        print(f'{word}:\\t{most_common_word(word)}')\n",
        "test": "assert     freq_count([\"Apple\", \"Pineapple\", \"Apple\", \"Pineapple\"]) == {'Apple': 2, 'Pineapple': 2}",
        "num_ids": 3249,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 22,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    c = 0\n    smallest = float('inf')\n    for i in range(N+1):\n        c += abs(i-N)\n        if c < smallest:\n            smallest = c\n    return smallest\n",
        "test": "assert     closest_num(1) == 1",
        "num_ids": 1150,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n",
        "test": "assert     len_log([]) == 0",
        "num_ids": 3108,
        "indeed": true
    },
    {
        "number": 91,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    start = 0\n    end = -1\n    \n    for i in range(len(str1)):\n        if str1[i] in sub_str:\n            end = i-1\n            \n            if end!= -1:\n                break\n    \n    if end == -1:\n        return False\n    \n    for j in range(start, end+1):\n        if sub_str[j] in str1:\n            return True\n    \n    return False\n",
        "test": "assert     find_substring(\"bat\", \"s\") == 0, 'incorrect'",
        "num_ids": 1461,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 2:\n        return False\n    elif n % 3!= 0 and n % 5!= 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_undulating(1) == False",
        "num_ids": 905,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b==0:\n        return 1\n    else:\n        return a*power(a,b-1)\n        \ndef main():\n    '''\n    Test your function by first printing your result on the screen. Then, use the function\n    power() to compute the result and then call the function again.\n    '''\n    print(power(2,3))\n    print(power(2,0))\n    \nmain()\n",
        "test": "assert     power(1,2) == 1",
        "num_ids": 913,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    list_of_tuples = []\n    for tuples in test_list:\n        list_of_tuples.append(tuples)\n    return list_of_tuples[0]\n",
        "test": "assert     index_minimum([(1,1),(3,2),(4,3),(6,1)]) == (1, 1)",
        "num_ids": 3217,
        "indeed": false
    },
    {
        "number": 95,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = len(lst)\n    if l == 0:\n        return 0\n    min = lst[0]\n    for i in range(l):\n        if min > lst[i]:\n            min = lst[i]\n    return min\n",
        "test": "assert     Find_Min_Length([]) == 0, \"Find_Min_Length: expected an empty list, got:\" + str(Find_Min_Length([]))",
        "num_ids": 1719,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = 1\n    if n <= 1:\n        return 1\n    else:\n        for i in range(1, n):\n            if n % i == 0:\n                divisors += 1\n        return divisors\n        \ndef main():\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    number = int(input('Enter a number: '))\n    result = divisor(number)\n    print(result)\n",
        "test": "assert     divisor(1) == 1",
        "num_ids": 832,
        "indeed": true
    },
    {
        "number": 97,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 110,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    dic = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] in dic:\n                dic[list1[i][j]] += 1\n            else:\n                dic[list1[i][j]] = 1\n    return dic\n",
        "test": "assert     frequency_lists([]) == {}",
        "num_ids": 3221,
        "indeed": true
    },
    {
        "number": 98,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    m=0\n    for i in range(len(numbers)):\n        m=m+numbers[i]\n    return m\n",
        "test": "assert         multiply_num([9]) == 9",
        "num_ids": 3079,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0: return \"0\"\n    else: return f\"{decimal_to_binary(n // 2)}{n % 2}\"\n",
        "test": "assert     decimal_to_binary(0) == '0'",
        "num_ids": 1116,
        "indeed": false
    },
    {
        "number": 100,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return 0\n    if num < 0:\n        return -1\n    if num < 2:\n        return 1\n    \n    left, right = 1, num\n    while right % 2 == 0:\n        left = left * 3 + 1\n        right = right / 2\n        if num == left:\n            return left\n        if num == right:\n            return right\n    return right\n",
        "test": "assert     next_smallest_palindrome(0) == 0",
        "num_ids": 1325,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return -1\n    else:\n        return arr[k-1]",
        "test": "assert     kth_element([1, 2, 3, 4, 5, 6], 5) == 5",
        "num_ids": 1152,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    return ''.join(w.title() for w in words)\n",
        "test": "assert     '' == snake_to_camel('')",
        "num_ids": 1139,
        "indeed": true
    },
    {
        "number": 103,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 360,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == m:\n        return n\n    elif m == n:\n        return m\n    elif n < m:\n        return n + eulerian_num(n, m - 1)\n    elif n > m:\n        return eulerian_num(n - 1, m)\n",
        "test": "assert eulerian_num(1,1) == 1",
        "num_ids": 1775,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    l = len(input_list)\n    input_list.sort()\n    for i in range(l-1):\n        for j in range(i+1, l):\n            if input_list[i] > input_list[j]:\n                input_list[i], input_list[j] = input_list[j], input_list[i]\n    return input_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 1946,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    \n    count=0\n    for x in lst:\n        if x==True:\n            count=count+1\n    return count\n",
        "test": "assert     count([True, True, True, True, False]) == 4, \"False is not a boolean\"",
        "num_ids": 2907,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 260,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    new_list = test_list\n    for index in range(len(test_tup)):\n        new_list.append(test_tup[index])\n    return new_list\n",
        "test": "assert     add_lists([1,2,3], (4,5,6)) == [1,2,3,4,5,6]",
        "num_ids": 1197,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while num1!= []:\n        merged_list.append(num1.pop(0))\n    while num2!= []:\n        merged_list.append(num2.pop(0))\n    while num3!= []:\n        merged_list.append(num3.pop(0))\n    return merged_list\n",
        "test": "assert     merge_sorted_list([], [], []) == []",
        "num_ids": 2666,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 170,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    # 0th index will be 0, 1st index will be 1\n    for i in range(0, n, 2):\n        # odd index will be 1, even index will be 0\n        count += 1\n        # count increased by 1\n        \n    return count\n",
        "test": "assert     odd_Equivalent(\"10101010101\",3), \"check the function\"",
        "num_ids": 4831,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    #Implementation of common elements in a nested list.\n    from collections import Counter\n    unique_list = []\n    if len(nestedlist) == 1:\n        return nestedlist[0]\n    for nested_list in nestedlist:\n        if len(nested_list) > len(nestedlist):\n            nested_list = nested_list[0]\n        for i in range(len(nested_list)):\n            if not nested_list[i] in unique_list:\n                unique_list.append(nested_list[i])\n        if len(unique_list) > 1:\n            break\n    return unique_list\n",
        "test": "assert     common_in_nested_lists([]) == []",
        "num_ids": 1800,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n",
        "test": "assert         check_integer('1e234') == False, 'Check for the correctness of check_integer'",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 18,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    print(\"Checking whether all dictionaries in a list are empty or not: \")\n    for i in list1:\n        if i!= {}:\n            print(i)\n        else:\n            print(\"The dictionary is empty.\")\n            return False\n    print(\"The dictionary is not empty.\")\n    return True\n",
        "test": "assert     empty_dit([]) == True",
        "num_ids": 964,
        "indeed": false
    },
    {
        "number": 116,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n",
        "test": "assert     tuple_to_int([]) == 0",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 117,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    result = []\n    for item in test_list:\n        if isinstance(item, list):\n            result.append(list_to_float(item))\n        else:\n            result.append(float(item))\n    return result\n",
        "test": "assert     list_to_float(['1', '2', '3', '4']) == [1.0, 2.0, 3.0, 4.0]",
        "num_ids": 1644,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 300,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('a') == ['a']",
        "num_ids": 735,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    \n    start, end = 0, len(arr)-1\n    while start < end:\n        mid = (start + end) // 2\n        if arr[mid] == arr[mid + 1]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return arr[start]\n",
        "test": "assert     search([1, 2, 3, 1]) == 1",
        "num_ids": 1485,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0] * list1[j][0] > max:\n                max = list1[i][0] * list1[j][0]\n",
        "test": "assert     max_product_tuple([]) == None",
        "num_ids": 3760,
        "indeed": false
    },
    {
        "number": 123,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for i in range(1, limit):\n        if sum(range(i, i+2)) == i:\n            amicable_numbers.add(i)\n    return len(amicable_numbers)\n",
        "test": "assert         amicable_numbers_sum(0) == 0",
        "num_ids": 1413,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return a.real*b.real + a.imag*b.imag\n",
        "test": "assert     angle_complex(1j,1) == (0j), \"angle_complex(1j,1)\"",
        "num_ids": 3415,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max = 0\n    n = len(string)\n    # print(string)\n    for i in range(n):\n        # print(i)\n        if string[i] == '0':\n            max = max - i\n        else:\n            max = max\n    return max\n",
        "test": "assert     find_length('') == 0, 'The function should return 0 if there are no 1s or 1s in a given sub-string'",
        "num_ids": 2928,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 140,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a + b\n",
        "test": "assert     sum(10,7)==17",
        "num_ids": 2555,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n",
        "test": "assert     multiply_int(12, 34) == 12 * 34",
        "num_ids": 764,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 170,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    \n    if n == 1:\n        return str.split()\n    else:\n        if str == \"\":\n            return []\n        \n        long_words = []\n        word = \"\"\n        for i in range(len(str)):\n            word += str[i]\n            \n            if len(word) > n:\n                long_words.append(word)\n                word = \"\"\n                \n        long_words.append(word)\n        return long_words\n",
        "test": "assert     long_words(1, \"a\" ) == [\"a\"]",
        "num_ids": 5083,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(0,len(my_matrix)):\n        for j in range(0,len(my_matrix[i])):\n            if my_matrix[i][j] > 0:\n                pass\n            else:\n                return False\n    return True\n",
        "test": "assert     magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == True, \"magic_square_test\"",
        "num_ids": 2518,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 170,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    max_occur = 0\n    for num in nums:\n        if num > max_occur:\n            max_occur = num\n    return max_occur\n",
        "test": "assert     max_occurrences([5, 2, 3, 7, 1, 4, 8]) == 8",
        "num_ids": 3005,
        "indeed": false
    },
    {
        "number": 131,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 360,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    s = list(str1)\n    l = []\n    for i in s:\n        if i in vowels:\n            l.append(i)\n    return ''.join(l)\n",
        "test": "assert     reverse_vowels('') == ''",
        "num_ids": 1560,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string_tup = \"(\"\n    for item in tup1:\n        string_tup += str(item) + \",\"\n    string_tup = string_tup[:-1]\n    string_tup += \")\"\n    return string_tup\n",
        "test": "assert     tup_string((\"a\", \"b\", \"c\"))",
        "num_ids": 834,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    neg_sum = 0\n    for num in nums:\n        if num < 0:\n            neg_sum += num\n    return neg_sum\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 909,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 0:\n        raise ValueError\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        for x in range(n, 0, -1):\n            for y in range(1, (n+1)):\n                print(x, y)\n                if x + y == n:\n                    print(x, y, \"Found\")\n                    return x * y\n",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 1,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # find the count of zeros\n    zeros = 0\n    for num in nums:\n        if num == 0:\n            zeros += 1\n    # calculate the ration\n    zeros_ratio = zeros / len(nums)\n    print(zeros_ratio)\n    # return\n    return zeros_ratio\n",
        "test": "assert     zero_count([0,0,0,0,0,0]) == 1.0",
        "num_ids": 3242,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    c = 2\n    while(c < n):\n        if(n%c==0):\n            return False\n        else:\n            c+=2\n    return True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(6) == False",
        "num_ids": 979,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    PI = math.pi\n    return 2*(PI*r*r)\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 668,
        "indeed": false
    },
    {
        "number": 140,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flatten = []\n    for i in test_list:\n        if type(i) == list:\n            flatten.extend(i)\n        else:\n            flatten.append(i)\n    return flatten\n",
        "test": "assert     extract_singly([]) == [], 'Correct'",
        "num_ids": 1662,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(len(nums)):\n        for j in range(len(nums)-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 3454,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # if not len(list1) == len(list2) == len(list3):\n    #     print(\"Invalid lists\")\n    #     return 0\n    c = 0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                if list1[i] == list2[j] and list2[i] == list3[k]:\n                    c += 1\n    return c\n",
        "test": "assert     count_samepair([], [], []) == 0",
        "num_ids": 2022,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    from collections import Counter \n    Counter(Input)\n    return len(Counter(Input).values())\n",
        "test": "assert     find_lists([]) == 0",
        "num_ids": 791,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    # Create an empty list to store all the values of the elements\n    value = []\n    \n    # Get the length of the array\n    length = len(arr)\n    \n    # Check if array is non empty\n    if length > 0:\n        # Loop through the array\n        for i in range(0, length):\n            # Check if array is not empty\n            if arr[i] > 0:\n                # Add the array to the list\n                value.append(arr[i])\n                \n        # Add the first value of the list to the list\n        value.append(arr[0])\n        \n        # Get the maximum value of the list\n        max_value = max(value)\n        \n        # Calculate the difference between the values\n        diff = abs(max_value - arr[0])\n        \n        # Return the difference\n        return diff\n    else:\n        return 0\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     max_Abs_Diff([]) == 0",
        "num_ids": 5274,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Write your code here. Make sure to write test cases for a range of values\n    pass\n",
        "test": "assert     find_solution((2, 4), (2, 4), 0) == None, \"It should return None\"",
        "num_ids": 1504,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # Your code here\n    if len(list1) == 0:\n        return []\n    if len(list2) == 0:\n        return list1\n    for i in list1:\n        if i not in list2:\n            list1.remove(i)\n    return list1\n",
        "test": "assert     remove_elements([], []) == [], 'Assertion failed'",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 162,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s=0\n    i=0\n    while(n>i):\n        s+=n-2*i\n        i+=1\n    return s\n",
        "test": "assert     sum_series(0) == 0",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(l):\n        area += s * (2 * i + 1) * tan(pi / (l + i + 1))\n    return area\ndef area_rectangle(x, y):\n    '''\n    Write a function to calculate the area of a rectangle given its height and width.\n    '''\n    area = 0\n    for i in range(x):\n        area += y * (2 * i + 1)\n    return area\ndef area_rectangle_parallelogram(x, y, z):\n    '''\n    Write a function to calculate the area of a parallelogram given its height and width and the location of the rectangle.\n    '''\n    area = 0\n    for i in range(x):\n        area += y * z * (2 * i + 1)\n    return area\ndef area_circle(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(r):\n        area += r * r\n    return area\ndef area_circle_from_sides(s):\n    '''\n    Write a function to calculate the area of a circle given its radius and its sides.\n    '''\n    area = 0\n    for i in range(s):\n        area += s * (2 * i + 1)\n    return area\ndef area_rectangle_from_sides(x, y, z):\n    '''\n    Write a function to calculate the area of a rectangle given its height and width and its location.\n    '''\n    area = 0\n    for i in range(x):\n        area += y * z * (2 * i + 1)\n    return area\ndef area_rectangle_parallelogram_from_sides(x, y, z):\n    '''\n    Write a function to calculate the area of a rectangle given its height and width and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(x):\n        area += y * z * (2 * i + 1) * tan(pi / (x + i + 1))\n    return area\ndef area_circle_from_height(h):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1\n    return area\ndef area_circle_from_radius(r):\n    '''\n    Write a function to calculate the area of a circle given its radius.\n    '''\n    area = 0\n    for i in range(r):\n        area += r * r\n    return area\ndef area_circle_from_height_from_radius(h, r):\n    '''\n    Write a function to calculate the area of a circle given its radius and its height.\n    '''\n    area = 0\n    for i in range(h):\n        area += r * r * (2 * i + 1)\n    return area\ndef area_circle_from_height_from_radius_parallelogram(h, r):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location of a parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_radius_from_height(r):\n    '''\n    Write a function to calculate the area of a circle given its radius and its height.\n    '''\n    area = 0\n    for i in range(r):\n        area += 2 * i + 1\n    return area\ndef area_circle_from_height_from_radius_parallelogram_from_height(h, r):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_height_from_radius_from_height_parallelogram(h, r):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1)) * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_radius_from_height_from_height(r):\n    '''\n    Write a function to calculate the area of a circle given its radius and its height.\n    '''\n    area = 0\n    for i in range(r):\n        area += 2 * i + 1\n    return area\ndef area_circle_from_radius_from_height_from_height_parallelogram(r):\n    '''\n    Write a function to calculate the area of a circle given its radius and its height and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(r):\n        area += 2 * i + 1\n    return area\ndef area_circle_from_height_from_radius_from_height_parallelogram(r, h):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_height_from_radius_from_height_parallelogram_from_height(h, r):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1)) * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_height_from_radius_from_height_parallelogram_from_height_from_height(r, h, h_from_height):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location and the location of the parallelogram.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1)) * tan(pi / (h + i + 1)) * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_radius_from_height_from_height_from_height_from_height(r, h):\n    '''\n    Write a function to calculate the area of a circle given its radius and its height and its location.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1\n    return area\ndef area_circle_from_height_from_radius_from_height_from_height_from_height_from_height(r, h, h_from_height):\n    '''\n    Write a function to calculate the area of a circle given its height and radius and its location.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1)) * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_height_from_radius_from_height_from_height_from_height_from_height(r, h):\n    '''\n    Write a function to calculate the area of a circle given its height and radius.\n    '''\n    area = 0\n    for i in range(h):\n        area += 2 * i + 1 * r * tan(pi / (h + i + 1))\n    return area\ndef area_circle_from_height_from_radius_from_height_from_height_from_height_from_height_from_height(r, h):\n    '''\n    Write a function to calculate the area of a circle given its height and radius.\n    '''",
        "test": "assert         area_polygon(5,0) == 0.0",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0: \n        return False\n    elif n % 2 == 0: \n        return True\n    else: \n        for i in range(3, int(math.sqrt(n)) + 1, 2): \n            if n % i == 0: \n                return False \n        return True\n",
        "test": "assert     div_sum(9) == 0",
        "num_ids": 847,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pos = {}\n    for ch in str1:\n        if ch not in pos:\n            pos[ch] = 1\n        else:\n            pos[ch] = pos[ch] + 1\n    \n    result = len(pos.keys())\n    return result\n",
        "test": "assert     count_char_position('bananas') == 4",
        "num_ids": 1358,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair = 0\n    for x in A:\n        if x % 2 == 0:\n            even_pair += 1\n    return even_pair\n",
        "test": "assert     find_even_pair([]) == 0, \"Expected 0, but got %s\" % find_even_pair([])",
        "num_ids": 1430,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n_list = []\n    for i in range(1, int(n**0.5) + 1):\n        if n % i == 0:\n            n_list.append(i)\n    if n_list == []:\n        return 0\n    else:\n        return min(n_list)\n",
        "test": "assert     next_power_of_2(0) == 0",
        "num_ids": 781,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    c=[]\n    for i in range(len(a)):\n        if a[i]==x:\n            c.append(a[i])\n    return len(c)\n",
        "test": "assert     frequency([1,2,3,4,5,6,7,8,9,10],0)==0",
        "num_ids": 601,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if (n < 0):\n        n = n+m\n    if (m == 0):\n        return 0\n    if (n >= m):\n        return 0\n    return sum(list1[0:n]) + sum_range_list(list1[n:], m-1, n-1)\n",
        "test": "assert     sum_range_list([], 0, 0) == 0, \"Error: Sum_range_list should return 0 when given an empty list\"",
        "num_ids": 1341,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 200,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perim = (4*a*a)/3\n    return perim\n",
        "test": "assert     perimeter_pentagon(3)==12",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    if s =='std':\n        return 2\n    elif s =='std':\n        return 1\n    elif s == '':\n        return 0\n    else:\n        count = 0\n        for i in range(len(s)):\n            if s[i] == 'a' or s[i] == 'e' or s[i] == 'i' or s[i] == 'o' or s[i] == 'u' or s[i] == 'A' or s[i] == 'E' or s[i] == 'I' or s[i] == 'O' or s[i] == 'U':\n                count += 1\n        return count\n",
        "test": "assert     count_occurance(\"\") == 0, \"empty string is incorrect\"",
        "num_ids": 6630,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 18,
        "max_test_num": 2,
        "total_product": 340,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    for i in test_tuple:\n        if type(i) not in [int, float, complex, str, bytes]:\n            print(\"Invalid type. Please check your input\")\n            return False\n    \n    return True\n",
        "test": "assert     check_type(('Cat','Cat','Cat','Cat')) == True",
        "num_ids": 1497,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 18,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # If length of arr is 0, return False\n    if len(arr) == 0:\n        return False\n    \n    # Set the current value of x to be the largest element in arr\n    x = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > x:\n            x = arr[i]\n            \n    # Return false if x is the largest element in arr\n    if x == arr[0]:\n        return False\n    \n    # Set the smallest index of arr as the largest element in arr\n    smallestIndex = 0\n    for i in range(1, len(arr)):\n        if arr[i] < x:\n            smallestIndex = i\n            break\n    \n    # Set the largest value to be x\n    for j in range(0, smallestIndex):\n        arr[j] = x\n    \n    # Set the largest element to be the x\n    for k in range(0, smallestIndex):\n        arr[k] = arr[k+1]\n    \n    # Return the array\n    return True\n",
        "test": "assert     is_majority([2,3,4,4,5], 6, 4) == True",
        "num_ids": 1941,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 370,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # Assume given number is a positive number\n    # Step 1: store the number into a variable\n    # Step 2: Convert the number into binary representation\n    # Step 3: In binary representation, find the count of set bits\n    # Step 4: In this list, the number contains only set bits\n    # Step 5: Return count of set bits\n    count_set_bits = 0\n    num = n\n    \n    # For every digit, if it is a set bit, check the bits count in binary representation\n    for digit in str(num):\n        if int(digit) == 1:\n            count_set_bits += 1\n    return count_set_bits\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 3219,
        "indeed": false
    },
    {
        "number": 226,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    string = str.lower()\n    return string.replace(' ', '')\n",
        "test": "assert     odd_values_string('') == ''",
        "num_ids": 4774,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 280,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a > b:\n        if a > c:\n            return a\n        elif c > b:\n            return c\n        else:\n            return c\n    elif a > c:\n        return a\n    elif c > b:\n        return c\n    else:\n        return c\n",
        "test": "assert     min_of_three(3,2,4) == 4",
        "num_ids": 1198,
        "indeed": false
    },
    {
        "number": 228,
        "max_answer_num": 14,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    res=0\n    for i in range(n):\n        if (l&(1<<i))!=0:\n            res+=1\n    if res==n:\n        return True\n    else:\n        return False\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(2, 0, 3) == False",
        "num_ids": 1849,
        "indeed": false
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return arr\n    sorted_arr = []\n    # sort the given array\n    sorted_arr = sorted(arr)\n    # sort all the negative elements so that all positive elements appear before all negative ones\n    sorted_arr = [x for x in sorted_arr if x >= 0]\n    # sort all the positive elements\n    sorted_arr = sorted([x for x in sorted_arr if x < 0])\n    # compute the relative order\n    sorted_arr = sorted(sorted_arr, reverse = True)\n    # shift all the negative elements\n    for x in range(n):\n        arr[x] = -arr[x]\n    # re-arrange all the positive elements\n    for x in range(n):\n        if sorted_arr[x] < 0:\n            arr[x] = sorted_arr[x]\n    return arr",
        "test": "assert     re_arrange_array(",
        "num_ids": 7375,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # write your code here\n    str1=str1.replace(' ','%20')\n    return str1\n",
        "test": "assert     replace_blank('I',' ') == 'I','replace_blank() is not correct'",
        "num_ids": 654,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 170,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # Your code here\n    heap = list1\n    for i in range(n-1):\n        heapq.heapify(heap)\n    return heap\ndef ext_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most extreme items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    for i in range(n-1):\n        heapq.heappush(heap,heapq.heappop(heap))\n    return heap\ndef tern_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    for i in range(n):\n        heapq.heapify(heap)\n    return heap\ndef cent_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    heapq.heappush(heap,-heapq.heappop(heap))\n    for i in range(n):\n        heapq.heappush(heap,heapq.heappop(heap))\n    return heap\ndef numb_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,heapq.heappop(heap))\n    return heap\ndef h_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    for i in range(n):\n        heapq.heappush(heap,-heapq.heappop(heap))\n    return heap\ndef h_nnum_d(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    for i in range(n):\n        heapq.heappush(heap,heapq.heappop(heap))\n    return heap\ndef h_nnum_d_d(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n most common items from the list.\n    '''\n    # Your code here\n    heap = list1\n    heapq.heapify(heap)\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heappush(heap,-heapq.heappop(heap))\n    heapq.heap",
        "test": "assert     larg_nnum([], 10) == []",
        "num_ids": 2219,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 270,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return r**2*h\n",
        "test": "assert     lateralsuface_cylinder(1,0) == 0",
        "num_ids": 4753,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n",
        "test": "assert     volume_cube(0) == 0, 'volume_cube'",
        "num_ids": 671,
        "indeed": true
    },
    {
        "number": 235,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits = 0\n    while n:\n        if n & 1:\n            even_bits += 1\n        n >>= 1\n    return even_bits\n",
        "test": "assert     even_bit_set_number(0) == 0",
        "num_ids": 860,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for element in test_list:\n        if element[0] in d:\n            d[element[0]] += 1\n        else:\n            d[element[0]] = 1\n    return d\n",
        "test": "assert         check_occurences([(1, 2), (2, 3), (1, 1)]), \"check_occurences() test failed\"",
        "num_ids": 1947,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # your code here\n    return 0\n    \nprint(number_of_substrings('abacaba'))\nprint(number_of_substrings('abacaba'))\nprint(number_of_substrings('abacaba'))\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 1306,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    possible_sequences = []\n    for i in range(m,n):\n        for j in range(i+1,n+1):\n            if j-i > 1:\n                possible_sequences.append(j-i)\n    return len(possible_sequences)\n",
        "test": "assert     get_total_number_of_sequences(1,1) == 0, \"correct\"",
        "num_ids": 1669,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list=list1\n    for item in list2:\n        new_list.append(item)\n    return new_list\n",
        "test": "assert     replace_list([1,2,3], [4,5,6]),'replace_list : should have a list with 1,2,3'",
        "num_ids": 2197,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    if str1 == '':\n        return 0\n    if len(str1) == 1:\n        return 1\n    else:\n        count = 0\n        for c in str1:\n            if c == 'A':\n                count += 1\n            else:\n                break\n        return count\n",
        "test": "assert     count_charac('g') == 1",
        "num_ids": 804,
        "indeed": false
    },
    {
        "number": 244,
        "max_answer_num": 8,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    a = math.ceil((N+1)/2)\n    b = math.ceil(N**0.5)\n    if (N == a):\n        if(N == b):\n            return N\n    elif(N%2 == 0):\n        if(N%2 == 1):\n            return N+1\n        else:\n            return N-1\n    else:\n        return N\n    #end if",
        "test": "assert     next_Perfect_Square(1) == 1",
        "num_ids": 1274,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    res = 0\n    \n    for i in range(len(arr)-1):\n        if arr[i] > arr[i+1]:\n            res += arr[i+1] - arr[i]\n    return res",
        "test": "assert     max_sum([]) == 0, 'Empty array'",
        "num_ids": 1715,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    squareroot = 0\n    for i in range(1, int(number**.5)):\n        squareroot += 1 / number\n    return squareroot\n",
        "test": "assert     babylonian_squareroot(0) == 0",
        "num_ids": 968,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 12,
        "max_test_num": 7,
        "total_product": 360,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    if str == '': \n        return 0\n    \n    n = len(str) \n    \n    d = [[-1 for j in range(n)] for i in range(n)] \n    \n    ans = 1\n    i, j = 0, 0\n    while i < n: \n        d[i][j] = j\n        j += 1\n        ans = max(ans, j - i)\n        i += 1\n    \n    i, j = 0, 0\n    while j < n: \n        d[i][j] = j\n        j += 1\n        ans = max(ans, j - i)\n        i += 1\n    \n    return ans\n    \n    \nprint(lps('aabb'))\nprint(lps('aab'))\nprint(lps('abc'))\nprint(lps('abcdef'))\nprint(lps('ab'))\nprint(lps('xyz'))\nprint(lps('abacd'))\nprint(lps('abacd'))\nprint(lps('abcdefghijklmnopqrst'))",
        "test": "assert     lps(\"\") == 0",
        "num_ids": 2155,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return int(n**(1/2))\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 609,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    my_result = []\n    array_nums1.sort()\n    array_nums2.sort()\n    #print(array_nums1)\n    #print(array_nums2)\n    for i in range(len(array_nums1)):\n        for j in range(len(array_nums2)):\n            if array_nums1[i] + array_nums2[j] == array_nums1[i] * array_nums2[j]:\n                my_result.append(array_nums1[i])\n    return my_result\n",
        "test": "assert     intersection_array([], [3,4]) == []",
        "num_ids": 1594,
        "indeed": false
    },
    {
        "number": 250,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    \n    # use a for loop to iterate through the elements of the tuple \n    for x in tup: \n        if x == x:\n            # if the element is the same \n            # then increment the count \n            return tup.count(x) \n        # else if the element is not the same \n        # then increment the count \n        else:\n            return tup.count(x) \n    # if the element is not found in the tuple then return the count \n    # since it should be less than the count of the element \n    return tup.count(x) \n",
        "test": "assert     count_X((), 2) == 0",
        "num_ids": 1143,
        "indeed": false
    },
    {
        "number": 251,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 260,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list\n    ",
        "test": "assert     insert_element(['1','2','3','4','5'], '5') == ['1','2','3','4','5'], 'incorrect'",
        "num_ids": 1284,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 350,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # print(numbers)\n    convert_list = []\n    c = cmath.rect(3, -3)\n    p = (c.real, c.imag)\n    \n    # print(p)\n    \n    for item in numbers:\n        convert_list.append(item * p)\n",
        "test": "assert     convert([1, 2, 3, 4, 5, 6, 7]) == (3j, 7)",
        "num_ids": 3770,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 17,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # your code goes here\n    return len(list1)\n",
        "test": "assert     count_integer([]) == 0, 'No arguments given'",
        "num_ids": 2526,
        "indeed": false
    },
    {
        "number": 255,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combos_colors = []\n    for i in range(n-1):\n        for j in range(i+1, n):\n            combos_colors.append(tuple(l[i] for i in range(i, n)))\n            combos_colors.append(tuple(l[i] for i in range(j, n)))\n    return combos_colors\n",
        "test": "assert     combinations_colors([], 0) == []",
        "num_ids": 3687,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n",
        "test": "assert     count_Primes_nums(0) == 0",
        "num_ids": 1225,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 15,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n    \ndef add_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns the sum of them.\n    '''\n    return a+b\n",
        "test": "assert     swap_numbers(2,1) == (1,2)",
        "num_ids": 654,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_value = test_tup1[0]\n    for i in test_tup2:\n        if i > max_value:\n            max_value = i\n    return max_value\n",
        "test": "assert     maximize_elements((1,2,3,4,5,6,7), ()) == True",
        "num_ids": 1635,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    for i in range(2, n): \n        if(n % i == 0): \n            return False \n    return True \n",
        "test": "assert     newman_prime(6) == False",
        "num_ids": 1031,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #s = int(input(\"Enter the first element: \"))\n    #e = int(input(\"Enter the second element: \"))\n    #s = int(input(\"Enter the first element: \"))\n    #e = int(input(\"Enter the second element: \"))\n    s = test_tup1[0]\n    e = test_tup2[0]\n    division = (s/e)\n    return division\n    #return test_tup1[0]/test_tup2[0]\n    #return division\n",
        "test": "assert     division_elements((1,2), (2,3)) == (0.5)",
        "num_ids": 1652,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 280,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    s1 = list1[:L]\n    s2 = list1[L:]\n    return s1, s2\n",
        "test": "assert     split_two_parts([1,2,3], 4) == [[1,2,3]]",
        "num_ids": 1601,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age<=2:\n        return 0\n    elif h_age<=4:\n        return 1\n    elif h_age<=6:\n        return 2\n    elif h_age<=8:\n        return 3\n    elif h_age<=10:\n        return 4\n    else:\n        return 5",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # count the length of the list\n    n = len(S)\n    \n    # initialize an empty list\n    L = []\n    \n    # use a for loop to iterate n times\n    for i in range(0, n, step):\n        L.append(S[i:i+step])\n        \n    # return the list\n    return L\n    \n",
        "test": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8], 1) == [[1], [2], [3], [4], [5], [6], [7], [8]]",
        "num_ids": 1742,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = (2 * (l ** 2)) ** 0.5\n    return s\n",
        "test": "assert     lateralsurface_cube(0.0) == 0.0",
        "num_ids": 3930,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 679,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 240,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n==1: return 1\n    if n==2: return 2\n    if n==3: return 4\n    if n==4: return 7\n    if n%3==0: return 3*(n//3)\n    if n%3==1: return 4*(n//3)\n    if n%3==2: return 7*(n//3)\n    return find_star_num(n-1)\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 2794,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n",
        "test": "assert     ascii_value('A') == 65",
        "num_ids": 779,
        "indeed": true
    },
    {
        "number": 270,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            even_sum += arr[i]\n    return even_sum\n",
        "test": "assert     sum_even_and_even_index([]) == 0",
        "num_ids": 1380,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 1,
        "max_test_num": 9,
        "total_product": 120,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i ** 5\n    return sum\n",
        "test": "assert     even_Power_Sum(0) == 0, \"The function returns the correct result\"",
        "num_ids": 633,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 230,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for data in test_list:\n        rear.append(data[1])\n    return rear\n",
        "test": "assert         rear_extract([(1,2),(1,2),(3,2)]), [1,2,3]",
        "num_ids": 1659,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 220,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # Your code here\n    \n    return (test_tup1[0] - test_tup2[0], test_tup1[1] - test_tup2[1])",
        "test": "assert     substract_elements(test_tup1, test_tup2) == ('a', 'b', 'c')",
        "num_ids": 2921,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n - 1) + even_binomial_Coeff_Sum(n - 2)\n",
        "test": "assert     even_binomial_Coeff_Sum( 0 ) == 0 ",
        "num_ids": 1349,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 180,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = h*r*4\n    return volume\n",
        "test": "assert     volume_cylinder(0,0)==0",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # Your code here\n    return dict\n",
        "test": "assert     dict_filter(dict_filter({'n': 2},2),2)=={'n':2}",
        "num_ids": 1182,
        "indeed": false
    },
    {
        "number": 278,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return 0\n",
        "test": "assert     count_first_elements(()) == 0",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 15,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    for i in range(1, n):\n        if (n % i) == 0:\n            return i\n    return 0\n",
        "test": "assert     is_num_decagonal(0) == False",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([1,2,3], 2) == (True,1)",
        "num_ids": 1276,
        "indeed": true
    },
    {
        "number": 281,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) <= 1:\n        return True\n    if len(test_list) % 2 == 0:\n        for i in range(len(test_list)):\n            if test_list[i] == test_list[i + 1]:\n                return False\n        return True\n    else:\n        return True\n",
        "test": "assert     all_unique(['a','a','b', 'c']) == False, \"All elements should be unique\"",
        "num_ids": 5108,
        "indeed": false
    },
    {
        "number": 282,
        "max_answer_num": 7,
        "max_test_num": 9,
        "total_product": 260,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    def isSubset(lst,sub):\n        '''\n        Check if a list contains the sublist.\n        '''\n        for i in sub:\n            if i not in lst:\n                return False\n        return True\n        \n    def fun(lst,sub):\n        '''\n        Return a new list with the sublist.\n        '''\n        return [i for i in lst if not isSubset(lst,sub)]\n    return fun(nums1,nums2)\n",
        "test": "assert     sub_list([], []) == []",
        "num_ids": 3797,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 180,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise TypeError('Integer must be of type int')\n    if n < 0:\n        raise ValueError('Integer must be greater than 0')\n    d = [0,1,2,3,4,5,6,7,8,9]\n    for i in range(0,10):\n        if i not in d:\n            return False\n    return True\n",
        "test": "assert     validate(5) == True",
        "num_ids": 2736,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 19,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n",
        "test": "assert     check_element([1,2,3,4,5,6,7,8],7)",
        "num_ids": 1178,
        "indeed": false
    },
    {
        "number": 285,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) < 3:\n        return False\n    pattern = r'[a-zA-Z]+\\w+'\n    m = re.findall(pattern, text)\n    if len(m) == 0:\n        return False\n    return True\n",
        "test": "assert     text_match_two_three('aa') is False, \"test_two_three_is_false\"",
        "num_ids": 3197,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 220,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = a[0]\n    temp_sum = a[0]\n    for i in range(1, n):\n        temp_sum = a[i] + max(a[i-1], a[i-k])\n        if temp_sum > max_sum:\n            max_sum = temp_sum\n    return max_sum\n",
        "test": "assert     max_sub_array_sum_repeated([1, 1, 1, 1, 1], 3, 2) == 2",
        "num_ids": 1489,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    # Your code here\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 2\n    return sum\n",
        "test": "assert     square_Sum(0) == 0",
        "num_ids": 671,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if not list1:\n        return 0\n    if len(list1) == 1:\n        return len(list1[0])\n    else:\n        return max(map(len, list1))\n",
        "test": "assert         max_length([[]]) == 0",
        "num_ids": 1474,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1 or n == 2: return 1 \n    ways = 0\n    if (k <= 1): ways += 1\n    else: ways += (count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k)) \n    return ways\n",
        "test": "assert     count_no_of_ways(1, 2) == 1",
        "num_ids": 1296,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n<m:\n        return find(m,n)\n    else:\n        if n==m:\n            return n\n        if n<m:\n            return find(n,m-1)\n        else:\n            return find(n-1,m)\n",
        "test": "assert     find(1,1) == 1",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 293,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w==h:\n        return True\n    if abs(w-h)>10:\n        return False\n    else:\n        if w+h+w==h*h:\n            return True\n        else:\n            if w+h-2*w*math.sin(math.radians(45))>h:\n                return True\n            else:\n                if w+h+math.sin(math.radians(45))*w>h:\n                    return True\n                else:\n                    return False\n",
        "test": "assert     otherside_rightangle(0,2) == 0, 'the third side of a right angled triangle should be 0'",
        "num_ids": 3648,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 310,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = listval[0]\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n",
        "test": "assert         max_val([3, 5, 1, -4, 6, -7, -2, 0]) == 6",
        "num_ids": 1371,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    if number == 1:\n        return 1\n    else:\n        return (sum_div(number - 1) + (sum_div(number - 2)))\n",
        "test": "assert     sum_div(1) == 1",
        "num_ids": 868,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 160,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #Your code here\n    Inv = 0\n    for i in arr:\n        if(i%2 == 1):\n            Inv += 1\n    return Inv\n",
        "test": "assert     get_Inv_Count([1, 3, 2]) == 2",
        "num_ids": 976,
        "indeed": false
    },
    {
        "number": 297,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 300,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    output = []\n    for element in list1:\n        if isinstance(element, list):\n            output.extend(flatten_list(element))\n        else:\n            output.append(element)\n    return output\n",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 3999,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # Create a default dict to keep track of the maximum aggregated value\n    # Key is the tuple, value is the max aggregated value\n    max_aggregate_dict = {}\n    # Iterate over the list to get the max aggregated value\n    for tuple in stdata:\n        max_aggregate_dict[tuple] = max(max_aggregate_dict.get(tuple, 0), tuple[1])\n    # Return the max aggregated value\n    return max_aggregate_dict.get('END', 0)\n",
        "test": "assert         max_aggregate([]) == 0",
        "num_ids": 5766,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    p = 2**n-1\n    count = 0\n    for i in range(n):\n        count += (p & 1) * (p & 1)\n        p >>= 1\n    return count",
        "test": "assert     count_binary_seq(0) == 0",
        "num_ids": 2811,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    d_depth = 0\n    for key, value in d.items():\n        d_depth += 1\n        if isinstance(value, dict):\n            d_depth += dict_depth(value)\n    return d_depth\n",
        "test": "assert     dict_depth({}) == 0",
        "num_ids": 1119,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if rotations == 0 :\n        for i in range(len(arr)) :\n            for j in range(len(arr)) :\n                if i == index and j == index:\n                    return arr[i]\n    else:\n        for i in range(len(arr)) :\n            if arr[i] == arr[i-rotations] :\n                return arr[i]\n            if i == index:\n                return arr[i]\n            \ndef MergeSort(arr,ranges,rotations,index) : \n    '''\n    Write a python function to sort an array using the merge sort algorithm.\n    '''\n    if len(arr) > 1 :\n        mid = len(arr)//2\n        l = arr[:mid]\n        r = arr[mid:]\n        l = MergeSort(l,r,rotations,index)\n        r = MergeSort(r,ranges,rotations,index)\n        arr = l + r\n    return arr\n",
        "test": "assert     find_Element([-1,1,2,3,4],[0,1,2,3,4],0,2),'Test is not correct'",
        "num_ids": 2277,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 320,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #words = ['p']\n    p = ''\n    for word in words:\n        if word[0] == 'p':\n            p = word\n            break\n    return p\n",
        "test": "assert     (start_withp([]) == \"\")",
        "num_ids": 3239,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    sum_so_far = 0\n    a[0] = 0\n    for i in range(1, n):\n        if sum_so_far > a[i-1] + k:\n            sum_so_far = a[i-1] + k\n        sum_so_far += a[i]\n        a[i] = sum_so_far\n    return sum_so_far\n",
        "test": "assert     max_sum_increasing_subseq([0, 3, 0, 1, 2], 0, 2, 0) == 0",
        "num_ids": 2128,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if m==0:\n        if n == 0:\n            return tuplex\n        elif n==1:\n            return (tuplex[0],tuplex[1])\n        else:\n            return (tuplex[0],tuplex[1],tuplex[2])\n    else:\n        if n == 0:\n            return tuplex[0]\n        elif n==1:\n            return (tuplex[0],tuplex[1])\n        else:\n            return (tuplex[0],tuplex[1],tuplex[2])\n",
        "test": "assert     colon_tuplex([(1,2,3),(4,5,6),(7,8,9)],1,3) == ((1,2,3),(4,5,6),(7,8,9),)",
        "num_ids": 1729,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    def second_largest(nums1, nums2, N):\n        result = []\n        for i in range(N):\n            temp = []\n            for j in range(N):\n                temp.append(nums1[i] * nums2[j])\n            result.append(max(temp))\n        return result\n    result = []\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    for i in range(N):\n        if nums1[i]!= nums2[i]:\n            result.append(nums1[i])\n    for i in range(N-1, -1, -1):\n        if nums1[i]!= nums2[i]:\n            result.append(nums2[i])\n    result.reverse()\n    return result\n",
        "test": "assert     large_product([1,2,3,4,5], [2,4,6,8], 4), \"incorrect number of elements\"",
        "num_ids": 3799,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if type(a) == type(b):\n        return a if a>b else b\n    else:\n        print(\"Please enter numbers only\")\n",
        "test": "assert     maximum(10, 10) == 10",
        "num_ids": 532,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    t = tuple(str1)\n    return t\n",
        "test": "assert     string_to_tuple('abcdefghijklmnopqrstuvwxyz') == ('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')",
        "num_ids": 2882,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 390,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    set_bit = n & (-n)\n    n = n >> set_bit\n    return n\n",
        "test": "assert     set_left_most_unset_bit(0) == False",
        "num_ids": 1198,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return r*(h**3)\n    #return 3.14*(r*h)\ndef find_volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (3.14)*r*h\n    #return 3.14*(r*h)\ndef area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return r*(3.14)*h\n    #return r*h\ndef find_area_cone(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    return (3.14)*r*h\n    #return 3.14*(r*h)\n",
        "test": "assert     volume_cone(0,1) == 0",
        "num_ids": 675,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n=int(n)\n    res=0\n    for i in range(2,n+1):\n        if n%i==0:\n            res+=1\n    return res\n",
        "test": "assert     highest_Power_of_2(0) == 0",
        "num_ids": 1006,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n<=1:\n        return n\n    elif n==2:\n        return 2\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n",
        "test": "assert     find_lucas(n = 2) == 2",
        "num_ids": 2903,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    def apply(elem):\n        if type(elem) is str:\n            elem = elem.strip()\n            if elem[0] == '{':\n                sub_list = elem.split('}')\n                elem = sub_list[-1]\n                if elem[0]!= '{':\n                    raise ValueError('Empty dictionary on top level!')\n                sub_list = elem.split('}')\n                elem = sub_list[-1]\n            if elem[0] == '{':\n                elem = apply(elem[1:])\n                if elem[0]!= '{':\n                    raise ValueError('Empty dictionary on top level!')\n            return {'{': {elem}}\n        else:\n            return elem\n    return apply(list_)\n",
        "test": "assert     add_string([], \"\") == []",
        "num_ids": 1540,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if l2 == []:\n        return l3\n    if len(l2)!= len(l3):\n        print('Error')\n        return -1\n    r1 = l1[0]\n    r2 = convert_list_dictionary(l1[1:], l2[0], l3[0])\n    return r1, r2\n",
        "test": "assert     convert_list_dictionary(l1=['i', 'k', 'l'], l2=['a', 'b'], l3=['c', 'd', 'e']), 'wrong'",
        "num_ids": 2016,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return n\n    elif n == 2:\n        return n + max(n, n+3)\n    elif n == 3:\n        return n + max(n, n+2)\n    else:\n        return n + max(n, n+4)\n",
        "test": "assert     get_max_sum(1) == 1, \"Error in function get_max_sum\"",
        "num_ids": 1357,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 300,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = len(input_list)\n    for i in range(0, max):\n        for j in range(i, max):\n            if input_list[i] > input_list[j]:\n                max = i\n                break\n    return max\n    \nprint(max_length_list([1, 5, 4, 2, 7, 0, 9, 8, 3, 6, 4, 5]))\nprint(max_length_list(['the', 'quick', 'brown', 'fox', 'jumped', 'over', 'the', 'lazy', 'dog']))\n",
        "test": "assert     max_length_list([]) == 0, 'Length of the list does not match'",
        "num_ids": 1486,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 290,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # TODO: write a function that checks if all elements in the tuple are unique.\n    # return a boolean value that indicates if the tuple is unique or not.\n    # return True or False\n    return True\n",
        "test": "assert     check_distinct([(1,1),(1,2),(1,3),(2,1),(2,3),(3,2),(3,3)]) is True",
        "num_ids": 5371,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    sorted_count = sorted(count.items(), key=lambda item: item[1], reverse=True)\n    return sorted_count[0][0]\n",
        "test": "assert     first_non_repeating_character('a') == 'a'",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 130,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    matcher = re.search(regex, string)\n    if matcher:\n        return matcher.group()\n    else:\n        return \"\"\n",
        "test": "assert ",
        "num_ids": 357,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a > 0 and b > 0 and c > 0:\n        if a < b and b < c and a < c:\n            return a\n        elif b < a and b < c and b < c:\n            return b\n        else:\n            return c\n",
        "test": "assert     median_numbers(1,3,2) == 2",
        "num_ids": 3112,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    # sum = 0\n    # for num in nums:\n    #     sum += num\n    # return sum\n    sum = 0\n    for num in nums:\n        sum += num\n    return sum\n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 1113,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor = []\n    for i in range(0, len(test_tup1)):\n        bitwise_xor.append(bitwise_xor(test_tup1[i], test_tup2[i]))\n    \n    return bitwise_xor\n",
        "test": "assert     bitwise_xor([1,2,3,4,5], [9,8,7,6,5]) == True",
        "num_ids": 1578,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 230,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Create an empty list to store the number of unique tuples\n    # If the list is not empty, it should contain only the tuples with at least 1 occurrence\n    num_unique_tuples = []\n    if len(test_list) > 0:\n        # Check if there is any number of unique tuples in the list\n        for i in test_list:\n            if i not in num_unique_tuples:\n                # Add the number of unique tuples to the list and store it\n                num_unique_tuples.append(i)\n    return len(num_unique_tuples)\n    \ndef reduce_freq(test_list):\n    '''\n    Write a function to find the number of unique tuples with at least 2 occurrences in the given list.\n    '''\n    # Create an empty list to store the number of unique tuples\n    # If the list is not empty, it should contain only the tuples with at least 1 occurrence\n    num_unique_tuples = []\n    if len(test_list) > 0:\n        # Check if there is any number of unique tuples in the list\n        for i in test_list:\n            # If there is a number of tuples with at least two occurrences, count the number of unique tuples\n            if len(num_unique_tuples) > 0 and i in num_unique_tuples:\n                # Add the number of unique tuples to the list and store it\n                num_unique_tuples.append(i)\n    return len(num_unique_tuples)\n    \ndef frequent_elements(test_list):\n    '''\n    Write a function to return the number of occurrences of all elements.\n    '''\n    # Create an empty dictionary to store the number of unique elements\n    # If the list is not empty, it should contain only the tuples with at least 1 occurrence\n    elements_count = {}\n    if len(test_list) > 0:\n        # Check if there is any number of unique elements in the list\n        for i in test_list:\n            # If there is a number of elements with at least one occurrence, add the element to the dictionary\n            if i in elements_count:\n                elements_count[i] += 1\n            # If there is no number of elements with at least one occurrence, create a new dictionary\n            else:\n                elements_count[i] = 1\n    return len(elements_count)\n    \ndef reduce_frequency(test_list):\n    '''\n    Write a function to return the number of occurrences of all elements with the same frequency.\n    '''\n    # Create an empty dictionary to store the number of elements with the same frequency\n    # If the list is not empty, it should contain only the tuples with at least one occurrence\n    elements_count = {}\n    if len(test_list) > 0:\n        # Check if there is any number of unique elements in the list\n        for i in test_list:\n            # If there is a number of elements with the same frequency, add the element to the dictionary\n            if i in elements_count:\n                elements_count[i] += 1\n            # If there is no number of elements with the same frequency, create a new dictionary\n            else:\n                elements_count[i] = 1\n    return len(elements_count)\n",
        "test": "assert     extract_freq([]) == 0",
        "num_ids": 1802,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 260,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tup1 = []\n    nested_tup2 = []\n    for i in test_tup1:\n        nested_tup1.append(i)\n    for i in test_tup2:\n        nested_tup2.append(i)\n    return tuple(nested_tup1) + tuple(nested_tup2)\n",
        "test": "assert     add_nested_tuples(('a','b'), ('c','d')) == ('a','b','c','d')",
        "num_ids": 1331,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n",
        "test": "assert     minimum(0,1) == 0",
        "num_ids": 677,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 15,
        "max_test_num": 9,
        "total_product": 330,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if len(tuplex) == len(tuple1): \n        for index,val in enumerate(tuplex):\n            if val == tuple1[index]:\n                return True\n        return False\n    else:\n        return False\n",
        "test": "assert     check_tuplex((\"hello\",(1,2,3)),(2,2,3)) == False, \"Incorrect input\"",
        "num_ids": 1551,
        "indeed": false
    },
    {
        "number": 406,
        "max_answer_num": 18,
        "max_test_num": 4,
        "total_product": 330,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    y = x\n    z = y + 1\n    for i in range(1,z): \n        if (y % 2) == 0: \n            return False\n        y = y / 2 \n    return True\n",
        "test": "assert     find_Parity(5) == True",
        "num_ids": 2740,
        "indeed": true
    },
    {
        "number": 407,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return (n // 100) * 10 + n % 10\n",
        "test": "assert     rearrange_bigger(0) == 0, \"Should be 0\"",
        "num_ids": 1011,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 320,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h1 = []\n    h2 = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if nums1[i] == nums2[j] and not (i == j):\n                heapq.heappush(h1,(nums1[i]*nums2[j],i,j))\n    if len(h1) <= k:\n        return []\n    if len(h1) > k:\n        heapq.heapify(h1)\n        for i in range(k):\n            heapq.heappop(h1)\n    res = []\n    if h1:\n        res.append([heapq.heappop(h1)[1],heapq.heappop(h1)[1]])\n    heapq.heapify(h2)\n    for i in range(len(h2)):\n        for j in range(len(h2)):\n            if not (h2[i] == h2[j] and i!= j):\n                heapq.heappush(h2,(h2[i]*h2[j],i,j))\n    if h2:\n        res.append([heapq.heappop(h2)[1],heapq.heappop(h2)[1]])\n    return res\n",
        "test": "assert     k_smallest_pairs([], [], 0) == []",
        "num_ids": 2680,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        return min(list1)\n    min1 = list1[0]\n    min2 = list1[1]\n    for i in range(1,len(list1)):\n        if list1[i] < min1:\n            min1 = list1[i]\n        if list1[i] < min2:\n            min2 = list1[i]\n    return min(min1,min2)\n    \ndef find_min_product_rec(list1):\n    '''\n    Find the minimum product in a list of tuples.\n    '''\n    if len(list1) < 2:\n        return min(list1)\n    min1 = list1[0]\n    min2 = list1[1]\n    for i in range(1,len(list1)):\n        if list1[i] < min1:\n            min1 = list1[i]\n        if list1[i] < min2:\n            min2 = list1[i]\n    return min(min1,min2)\n",
        "test": "assert     min_product_tuple([(1, 3), (2, 5), (3, 1), (4, 7), (3, 2)]), \"Incorrect result\"",
        "num_ids": 4913,
        "indeed": false
    },
    {
        "number": 410,
        "max_answer_num": 18,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        return None\n    else:\n        minimum = listval[0]\n        for x in listval:\n            if x < minimum:\n                minimum = x\n        return minimum\n",
        "test": "assert     min_val([1, 5, 2]) == 1",
        "num_ids": 1108,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    pattern = r'(?<!^)(?=[A-Z])[a-z]'\n    result = re.sub(pattern, '_', word)\n    return result\n",
        "test": "assert     snake_to_camel(\"X\") == \"X\"",
        "num_ids": 1766,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 330,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odds = []\n    \n    for number in l:\n        if number%2!= 0:\n            odds.append(number)\n    \n    return odds\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 3728,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n",
        "test": "assert     extract_nth_element([1, 2, 3], 0) == 1",
        "num_ids": 1765,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    return any(x in list1 for x in list2)\n",
        "test": "assert     overlapping([1, 2, 3], [1, 2, 3, 4]) == True, \"Overlapping\"",
        "num_ids": 3442,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    p = []\n    l = len(arr)\n    for i in range(l-1):\n        for j in range(i+1,l):\n            p.append(arr[i]*arr[j])\n    p = sorted(p)\n    return p[0]\n",
        "test": "assert     max_Product([1, 2, 3]) == 2",
        "num_ids": 1226,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 160,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    list_of_tuples = []\n    for i in range(len(Input)):\n        list_of_tuples.append(Input[i])\n    list_of_tuples = list(set(list_of_tuples))\n    return list_of_tuples\n",
        "test": "assert     group_tuples( [1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99] ) == [1,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99]",
        "num_ids": 3689,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 170,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    Max = lst[0]\n    i = 0\n    while i < len(lst):\n        if lst[i] > Max:\n            Max = lst[i]\n        i += 1\n    return Max\n",
        "test": "assert     Find_Max([9]) == 9",
        "num_ids": 890,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 2,
        "max_test_num": 8,
        "total_product": 190,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for n in list1:\n        total_sum += n\n    print(f\"{total_sum}\")\n    return total_sum\n",
        "test": "assert round_and_sum([]) == 0",
        "num_ids": 3621,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 310,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    total = 0\n    for i in range(n,0,-2):\n        total = total + i**3\n    return total\n",
        "test": "assert     cube_Sum(0) == 0",
        "num_ids": 683,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(test_tup)\n",
        "test": "assert     concatenate_tuple([]) == ()",
        "num_ids": 1058,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n * n * n\n",
        "test": "assert     find_Average_Of_Cube(1) == 1.0",
        "num_ids": 2969,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 380,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[1]\n",
        "test": "assert     extract_rear((2,4,3)) == 4",
        "num_ids": 3747,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 6,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for item in list1:\n        if item == x:\n            counter += 1\n    return counter\n",
        "test": "assert     count_element_in_list([], \"a\") == 0",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 8,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    new = []\n    for n in nums:\n        if n % 2!= 0:\n            new.append(n)\n    return new\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 1197,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 16,
        "max_test_num": 2,
        "total_product": 280,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    try:\n        d1 = dt.split('-')\n        dd = d1[2] + '-' + d1[1] + '-' + d1[0]\n        mm = d1[3][:2]\n        yyyy = d1[0] + '-' + d1[2] + '-' + d1[1] + '-' + d1[0]\n        return yyyy +'' + mm +'' + dd\n    except:\n        return dt\n",
        "test": "assert     change_date_format(\"2020-10-10\") == \"2020-10-10\"",
        "num_ids": 1847,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 160,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    l = len(my_list)\n    gap = int(l/2)\n    while gap > 0:\n        for i in range(gap, l):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap/2)\n    return my_list\n",
        "test": "assert     shell_sort([1,2,3,4,5,6]) == [1,2,3,4,5,6]",
        "num_ids": 1908,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) == 0 or len(test_tup2) == 0:\n        return []\n    return test_tup1[0] & test_tup2[0], test_tup1[0] | test_tup2[0]\n",
        "test": "assert     and_tuples((1,2), (3,4)) == (1,3)",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == b and b == c:\n        return 0\n    if a == c and b == c:\n        return 1\n    if a == b or b == c:\n        return 0\n    return 1\n",
        "test": "assert     parabola_directrix(0, 0, 0) == False, \"a, b, c must be integers\"",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 21,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    common_list = []\n    \n    for i in list1:\n        for j in list2:\n            if i == j:\n                common_list.append(i)\n    \n    return len(common_list) > 0\n    \nprint(common_element([1, 2, 3, 4, 5], [2, 3, 5, 5, 5]))\nprint(common_element([1, 2, 3, 4, 5], [2, 3, 5, 5, 5, 8]))",
        "test": "assert     common_element([1,2,3,4], [1,4,5]) == True",
        "num_ids": 1544,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 270,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1>base2:\n        if height<base1:\n            return 0\n        elif height<base2:\n            return base1+height\n        else:\n            return base2\n    elif base1<base2:\n        if height<base1:\n            return 0\n        elif height<base2:\n            return base1+height\n        else:\n            return base2\n    else:\n        return 0\n    \n    \n",
        "test": "assert     median_trapezium(7,3,8) == 3",
        "num_ids": 3887,
        "indeed": false
    },
    {
        "number": 433,
        "max_answer_num": 20,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return False\n    return True\n",
        "test": "assert     check_greater([2, 1, 5, 10, 8], 3) == False, \"incorrect input\"",
        "num_ids": 1573,
        "indeed": true
    },
    {
        "number": 434,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    p = r'^\\w+\\:\\d+\\:\\d+\\:\\d+$'\n    matcher = re.findall(p, text)\n    if len(matcher)!= 0:\n        return False\n    return True\n",
        "test": "assert     text_match_one('abcabcabc'), 'not an example'",
        "num_ids": 1115,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 340,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    s = str(n)\n    if s[-1] == '0' :\n        return 0\n    else :\n        return int(s[-1])\n",
        "test": "assert     last_Digit(0) == 0",
        "num_ids": 688,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    res=[]\n    for i in list1:\n        if i<0:\n            res.append(i)\n    return res\n",
        "test": "assert     neg_nos(neg_nos([])) == []",
        "num_ids": 3065,
        "indeed": true
    },
    {
        "number": 437,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # your code here\n    l = len(str1)\n    str1 = str1.replace(\"o\",\"\")\n    str1 = str1.replace(\"e\",\"\")\n    str1 = str1.replace(\"l\",\"\")\n    str1 = str1.replace(\"n\",\"\")\n    return str1\n",
        "test": "assert     remove_odd(\"\") == \"\", \"Test 1 failed\"",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 10,
        "max_test_num": 9,
        "total_product": 250,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    #create a bidirectional map for a list\n    bidirectional_map = {}\n    for item in test_list:\n        if item[0] in bidirectional_map:\n            bidirectional_map[item[0]].append(item)\n        else:\n            bidirectional_map[item[0]] = [item]\n    #loop through the test_list and add each tuple to the map\n    count = 0\n    for k,v in bidirectional_map.items():\n        if len(v) > 1:\n            count += len(v)\n    return count\n",
        "test": "assert     count_bidirectional([]) == 0",
        "num_ids": 1273,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n",
        "test": "assert     multiple_to_single([1]), \"Expected an empty list for the function.\"",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 400,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    i = 0\n    while i < len(text):\n        if text[i].isalpha() or text[i] == '-' or text[i].isdigit():\n            return i\n        i += 1\n    return len(text)\n",
        "test": "assert     find_adverb_position('') == 0",
        "num_ids": 7663,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 230,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s = 0\n    for i in range(l):\n        for j in range(i+1,l):\n            for k in range(j+1,l):\n                s += l * (l * (l - 1)) * 1.5\n    return s\n",
        "test": "assert     surfacearea_cube(0) == 0",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    a = array('i', nums)\n    count = 0\n    for i in range(0, len(a)):\n        if a[i] < 0:\n            count = count + 1\n    return count\n",
        "test": "assert     positive_count([]) == 0",
        "num_ids": 3155,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    neg_list = []\n    for ele in list1:\n        if ele < 0:\n            neg_list.append(ele)\n    if len(neg_list) > 0:\n        return max(neg_list)\n    else:\n        return 0\n",
        "test": "assert     largest_neg([0]) == 0",
        "num_ids": 2990,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 310,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return list(map(tuple, filter(None, test_list)))\n",
        "test": "assert     trim_tuple([(1, 2, 3, 4), (5, 6, 7, 8), (9, 10, 11, 12), (1, 2, 3, 4)],2) == [5, 6, 7, 8, 9, 10, 11, 12, 1, 2, 3, 4]",
        "num_ids": 1568,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    list1 = test_tup1\n    list2 = test_tup2\n    #if len(list1) < len(list2):\n    #    a = list(map(lambda x: x*x, list1))\n    #elif len(list1) > len(list2):\n    #    a = list(map(lambda x: x*x, list2))\n    #else:\n    a = [i * j for i,j in zip(list1, list2)]\n    return a\n",
        "test": "assert     index_multiplication(test_tup1, test_tup2) == (12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, 8, 10, 12, 24, 48, 24, 16, 4, ",
        "num_ids": 3576,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occur = 0\n    for i in lst:\n        occur += tup.count(i)\n    return occur\n",
        "test": "assert     count_Occurrence([], []) == 0",
        "num_ids": 1721,
        "indeed": true
    },
    {
        "number": 447,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**3)\n    return result\n",
        "test": "assert     cube_nums([]) == []",
        "num_ids": 3262,
        "indeed": true
    },
    {
        "number": 448,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 220,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n    return result\n",
        "test": "assert     cal_sum(0) == 0",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(len(str)):\n        if str[i]!='':\n            output.append(str[i])\n    return \"\".join(output)\n    \ndef get_weighted_average(student_scores):\n    '''\n    Calculate the weighted average of the student score.\n    '''\n    total = 0\n    for value in student_scores:\n        total += value\n    return total/len(student_scores)\n",
        "test": "assert     extract_string(\"hello, there\", [\"hello\", \"there\"]) == \"hello, there\"",
        "num_ids": 3608,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 13,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return re.sub(r'\\s+','', text1)\n",
        "test": "assert remove_whitespaces.__name__ =='remove_whitespaces', 'The given function is a string'",
        "num_ids": 4172,
        "indeed": true
    },
    {
        "number": 452,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 190,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost-sale_amount>0:\n        return actual_cost-sale_amount\n    else:\n        return 0\n",
        "test": "assert     loss_amount(100,100) == 0",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n == 0: \n        return 0 \n    if n == 1: \n        return 1\n    if n % 2 == 0: \n        return 2 \n    else: \n        return sumofFactors(n // 2) + 2 \ndef isPerfectSquare(n): \n    '''\n    Return True if n is a perfect square, else False.\n    '''\n    if n < 0 or (n % 2)!= 0: \n        return False \n    return math.sqrt(n) == math.sqrt(n - 1) \n",
        "test": "assert     sumofFactors(0) == 0",
        "num_ids": 1063,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 370,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern_wordz = re.compile(r'z')\n    return pattern_wordz.search(text)!= None\n",
        "test": "assert     text_match_wordz(\"\") == 0, \"text_match_wordz failed\"",
        "num_ids": 1073,
        "indeed": true
    },
    {
        "number": 455,
        "max_answer_num": 16,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if (monthnum2 > 12):\n        monthnum2 = monthnum2 - 12\n        return(1)\n    else:\n        return(0)\n",
        "test": "assert     check_monthnumb_number(7) == False",
        "num_ids": 1726,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 1335,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 190,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    index_min = 0\n    for index, value in enumerate(lst): \n        if value < lst[index_min]: \n            index_min = index \n    return lst[index_min] \n",
        "test": "assert     Find_Min([1,2,3,4]) == 1, \"Find_Min\"",
        "num_ids": 2803,
        "indeed": true
    },
    {
        "number": 458,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 260,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n",
        "test": "assert     rectangle_area(0,0) == 0",
        "num_ids": 526,
        "indeed": true
    },
    {
        "number": 459,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 180,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    list1 = []\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            list1.append(str1[i])\n        else:\n            list1.append(str1[i])\n    str2 = ''.join(list1)\n    return str2\n",
        "test": "assert     remove_uppercase('') == ''",
        "num_ids": 4573,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 240,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    # code goes here\n    return lst[0]\n",
        "test": "assert     Extract([0,1,2,3,4,5,6,7,8,9,10]) == 0, 'the func is not correct'",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 190,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    chars = []\n    for char in str:\n        if char.isupper():\n            chars.append(char)\n    return ''.join(chars)\n    \ndef lower_ctr(str):\n    '''\n    Write a python function to count the lower case characters in a given string.\n    '''\n    chars = []\n    for char in str:\n        if char.islower():\n            chars.append(char)\n    return ''.join(chars)\n",
        "test": "assert     upper_ctr('Hello') == 'H'",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 15,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combination = []\n    # Set all the combinations of the list as it's elements\n    combination_set = set(list1)\n    # Iterate through the set, adding the next element to the combination set\n    for i in combination_set:\n        combination.append(i)\n    # Add all the elements into a list, add an empty list as it's value is a list\n    combination_list = [x for x in combination]\n    return combination_list\n",
        "test": "assert     combinations_list([]) == []",
        "num_ids": 1744,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 270,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    length = len(arr)\n",
        "test": "assert     max_subarray_product([-2, -3, 4, -1, -2, -3, 1, 3, 2, -1, 2, 1, -2, 4]) == 12",
        "num_ids": 1156,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 13,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    new_d = {}\n    new_d.update(dict)\n    for i in new_d:\n        if dict[i]!= new_d[i]:\n            return False\n    return True\n",
        "test": "assert     check_value({'a':'a','b':'a'}, 'a')==True",
        "num_ids": 1301,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict1\n",
        "test": "assert     drop_empty({\"key1\":\"value1\", \"key2\":\"value2\"})",
        "num_ids": 954,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # check if there are elements in array\n    if arr == []:\n        return 0\n    \n    if len(arr) == 1:\n        return arr[0]\n",
        "test": "assert     max_product([]) == 0",
        "num_ids": 957,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    (a, b) = test_tup\n    return (a + b)\n",
        "test": "assert     add_pairwise((0,1)) == 1",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # Keep in mind that it's a division operation and not multiplication/modulo\n    a = 1\n    for i in range(len(arr)-1, -1, -1):\n        if arr[i] % n!= 0:\n            a = (a * arr[i]) % n\n    return a\n",
        "test": "assert     find_remainder([1, 2, 3, 4], 4) == 2",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 230,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    c = 0\n    for i in l:\n        if (c<2):\n            if (i == l[c]):\n                c+=1\n            else:\n                c=0\n        else:\n            c+=1\n    return c==0\n",
        "test": "assert     check_Consecutive([1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False, \"check_Consecutive test failed\"",
        "num_ids": 1563,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return tuple(set(test_list1).intersection(set(test_list2)))\n",
        "test": "assert     tuple_intersection([1,2,3,4,5,6,7], [5,6,7,8,9,10]) == (5,6,7)",
        "num_ids": 2291,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 370,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n",
        "test": "assert     replace_char(\"a b c\", \"?\", \"?\"), \"replace_char failed\"",
        "num_ids": 1390,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 220,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    # create a new dictionary to store the sorted keys\n    sorted_keys = {}\n    for k, v in dict1.items():\n        sorted_keys[v] = k\n    # create a sorted list of all keys\n    sorted_keys_values = sorted(sorted_keys.values())\n    # create a new dictionary to store the sorted values\n    sorted_values = {}\n    for key in sorted_keys_values:\n        sorted_values[key] = dict1[key]\n    # return the sorted dictionary\n    return sorted_values\n",
        "test": "assert     sort_counter({'a': 1, 'b':2, 'c':3}) == {'a': 1, 'c': 3, 'b': 2}",
        "num_ids": 1609,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return 0\n    if len(nums) == 1:\n        return nums[0]\n    if len(nums) == 2:\n        return max(nums)\n    if nums[0] > nums[-1]:\n        return big_sum(nums[1:])\n    else:\n        return big_sum(nums[:-1])\n",
        "test": "assert     big_sum([]) == 0",
        "num_ids": 996,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 18,
        "max_test_num": 10,
        "total_product": 390,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case_str = string.lower()\n    return lower_case_str\n",
        "test": "assert     is_lower('testing')",
        "num_ids": 788,
        "indeed": true
    },
    {
        "number": 478,
        "max_answer_num": 16,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = ''\n    regex = r\"[A-Z]+\"\n    for i in range(len(str1)):\n        if (re.search(regex, str1[i:])):\n            str2 += str1[i]\n        else:\n            str2 += str1[i].lower()\n    return str2\n",
        "test": "assert     remove_lowercase('') == ''",
        "num_ids": 1378,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # write your code here\n    return n % 10\n",
        "test": "assert     first_Digit(0) == 0",
        "num_ids": 794,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if(list[i] % 2 == 0):\n            odd.append(list[i])\n    return odd\n        \ndef OnlyOdd(list):\n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if(list[i] % 2!= 0):\n            odd.append(list[i])\n    return odd\n    \n",
        "test": "assert Split([]) == []",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 555,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    \n    import numpy as np\n    cubes = [0 for x in range(n+1)]\n    nums = [0 for x in range(n+1)]\n    nums[0] = 1\n    cubes[0] = 1\n    for i in range(1, n+1):\n        cubes[i] = cubes[i-1] * cubes[i]\n        nums[i] = nums[i-1] + nums[i-1] * cubes[i]\n    return sum(nums[2:])\n",
        "test": "assert     difference(0) == 0",
        "num_ids": 2718,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    A = [x for x in A if x!=0]\n    count = 0\n    for i in range(len(A)-1) :\n        for j in range(i+1,len(A)) :\n            if A[i]==A[j] :\n                count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair([0,1,0,0],0) == 0",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 11,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    new_string = ''\n    for char in string:\n        if char =='':\n            char = '~'\n        new_string += char\n    return new_string\n",
        "test": "assert     toggle_string('sada')",
        "num_ids": 4214,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    l = len(str(n1))\n    return sum(int(x) - int(y) for x, y in zip(str(n2), str(n1))) % (10 ** l)\n",
        "test": "assert     digit_distance_nums(0, 0) == 0",
        "num_ids": 1921,
        "indeed": true
    },
    {
        "number": 559,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 240,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -1\n    sub_sum = 0\n    for i in range(size):\n        sub_sum = max(sub_sum, a[i])\n        max_sum = max(max_sum, sub_sum)\n        if sub_sum == 0:\n            break\n    return max_sum\n",
        "test": "assert     max_sub_array_sum([1,4,3,2],2) == 4, \"wrong output\"",
        "num_ids": 1169,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 330,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(test_tup1+test_tup2))\n",
        "test": "assert     union_elements((\"a\", \"b\"), (\"c\", \"d\")) == (\"a\", \"b\", \"c\", \"d\")",
        "num_ids": 2468,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 3,
        "max_test_num": 10,
        "total_product": 160,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    Max_Len = 0\n    for i in range(0, n):\n        for j in range(i, n):\n            if(lst[i] > lst[j]):\n                j += 1\n                break\n            j += 1\n        if(j > Max_Len):\n            Max_Len = j\n    return Max_Len\n",
        "test": "assert     \"Find_Max_Length\" == \"Find_Max_Length\"",
        "num_ids": 3190,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    regex = re.compile(r\"(\\?)([^?]*)\")\n    m = regex.match(text)\n    if m is None:\n        return \"\"\n    else:\n        return m.group(2)\n",
        "test": "assert     isinstance(extract_values(''), str)",
        "num_ids": 3326,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 9,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    output=0\n    if len(arr)==1:\n        output=1\n    else:\n        output=0\n        for i in range(len(arr)):\n            for j in range(len(arr)):\n                if i!=j:\n                    output+=arr[i]==arr[j] and (arr[i]!=arr[j])\n    return output\n",
        "test": "assert     count_Pairs([1, 2, 3, 4, 5], 0) == 0, \"Error\"",
        "num_ids": 1295,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 8,
        "max_test_num": 9,
        "total_product": 220,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n",
        "test": "assert split('a') == ['a']",
        "num_ids": 559,
        "indeed": false
    },
    {
        "number": 566,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if not n:\n        return 0\n    \n    if n < 10:\n        return n\n    \n    # Remove the leading 0\n    new_number = str(n)[1:]\n    \n    # Add the leading 0\n    if new_number[-1] == '0':\n        new_number = new_number[:-1]\n    \n    # Sum the digits of the number\n    return sum_digits(int(new_number))",
        "test": "assert     sum_digits(0) == 0",
        "num_ids": 893,
        "indeed": false
    },
    {
        "number": 567,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 350,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 is None:\n        return False\n    elif list1 == []:\n        return True\n    else:\n        return isinstance(list1,list) and list1[0] < list1[-1]\n",
        "test": "assert     issort_list([2,1,3,0]) == False",
        "num_ids": 1365,
        "indeed": false
    },
    {
        "number": 568,
        "max_answer_num": 11,
        "max_test_num": 10,
        "total_product": 200,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    dictionaries = []\n    return dictionaries\n",
        "test": "assert     not empty_list(0), 'Empty_list function should return none'",
        "num_ids": 615,
        "indeed": false
    },
    {
        "number": 569,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Declare empty lists to store the sorted sublists\n    sorted_list = []\n    # Declare empty dictionary to store the counts of each sublist\n    sorted_dict = {}\n    for item in list1:\n        for char in item:\n            if char not in sorted_dict:\n                sorted_dict[char] = 1\n            else:\n                sorted_dict[char] += 1\n    # Iterate through the dict and create a sorted list\n    for key, value in sorted_dict.items():\n        sorted_list.append(key)\n        sorted_dict[key] = value\n    return sorted_list\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 2798,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # remove duplicate numbers from a given list\n    # write a python function that will remove duplicate numbers from a given list of list \n    return [int(item) for item in set(nums)]\n",
        "test": "assert     two_unique_nums([]) == []",
        "num_ids": 1641,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_data = []\n    for i in list_data:\n        if i not in unique_data:\n            unique_data.append(i)\n    return len(unique_data)\n",
        "test": "assert     unique_product(['aa', 'bb', 'cc']), 'unique_product() does not return the same list'",
        "num_ids": 865,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 250,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    a = r * h\n    return a\n",
        "test": "assert     surfacearea_cylinder(0,0) == 0, 'Test failed'",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)==0:\n        return True\n    if A[0]==B[0]:\n        return is_Sub_Array(A[1:],B[1:])\n    else:\n        return False\n",
        "test": "assert     is_Sub_Array([1,2,3], [4,5,6]) == False",
        "num_ids": 1619,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 8,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factor = n\n    num = 1\n    while factor > 0: \n        num = num * factor \n        factor -= 1\n    return num\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 790,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    \n    list1.sort()\n    list2.sort()\n    list3.sort()\n    return (list1+list2+list3)\n    \n",
        "test": "assert     interleave_lists([1,2,3], [4,5,6], [7,8,9])!= [1,4,7,2,5,6,3,8,9]",
        "num_ids": 4235,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 240,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #create a list with the dissimilar elements\n    lst = []\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            lst.append(test_tup1[i])\n",
        "test": "assert     find_dissimilar((1,2,3), (1,2,4)) == None",
        "num_ids": 2443,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 300,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    odd_list = []\n    for item in test_tuple: \n        if not item: \n            break\n        else: \n            if item % 2 == 0: \n                odd_list.append(item)\n    print(odd_list) \n    \n    \n    even_list = []\n    for item in odd_list: \n        if item % 2 == 0: \n            even_list.append(item)\n    print(even_list) \n    \n    \n    result = even_fnc(even_list, odd_list) \n    print(result) \n    \n    \ndef main(): \n    \n    print(\"Start\") \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9) \n    even_fnc = even_ele \n    \n    even_fnc(test_tuple, even_fnc) \n    \n    print(\"End\") \n    \n    print(\"TESTING DATA WITHOUT ERRORS\") \n    \n    test_tuple = (1, 2, 3, 4, 5, 6, 7, 8, 9) \n    print(\"Before: \", test_tuple) \n    \n    even_fnc = even_ele \n    \n    print(\"After: \", even_fnc(test_tuple, even_fnc)) \n    print(\"End\") \n    \nif __name__ == \"__main__\": \n    main()",
        "test": "assert         even_ele((\"foo\", \"baz\", \"quux\", \"bubble\"), even_fnc) == (\"quux\", \"bubble\")",
        "num_ids": 5185,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b==0 or s==0:\n        return 0\n    if b==1 and s==1:\n        return 0\n    else:\n        return (s-b)*(s-b)*surface_Area(b-1,s)\n",
        "test": "assert     surface_Area(0,0) == 0",
        "num_ids": 1109,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return \"This dictionary is empty.\"\n    else:\n        return \"This dictionary is not empty.\"\n",
        "test": "assert    my_dict({})",
        "num_ids": 2780,
        "indeed": false
    },
    {
        "number": 583,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan_number = []\n    for i in range(1, num + 1):\n        catalan_number.append(1)\n        for j in range(1, i):\n            if (j % 2) == 0:\n                catalan_number[i - 1] *= (j // 2)\n            else:\n                catalan_number[i - 1] *= (j * 2)\n    return catalan_number[num - 1]\n",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 1476,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = ['ly', 'ly','s','st', 'd', 'do', 'd ', 'dy', 'ly ', 'ly', 'ly', 'ly', 'ly', 'ly', 'ly', 'ly', 'ly']\n    for i in adverbs:\n        text = text.replace(i, 'ly ')\n    find_adverbs_regex = re.compile('ly (.*)')\n    adverbs = find_adverbs_regex.findall(text)\n    for i in adverbs:\n        adverb = i[-1]\n        if adverb[-1] in ('ly', 'ly', 'ly', 'ly'):\n            return adverb[-1]\n        else:\n            return adverb\n    return text\n",
        "test": "assert     find_adverbs('tupaTuPo') == 'tupaTuPo'",
        "num_ids": 5604,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    my_heap = []\n    my_heapq = []\n    \n    for item in items:\n        my_heapq.append(item)\n        heapq.heapify(my_heap)\n    \n    while len(my_heap) > n:\n        curr_item = my_heapq.pop()\n        if curr_item not in my_heap:\n            heapq.heappush(my_heap,curr_item)\n            heapq.heapify(my_heap)\n    \n    return my_heap\n    \ndef get_ordered_list(items,n):\n    '''\n    Write a function to return an n-item ordered list of the first n elements.\n    '''\n    my_list = []\n    for i in range(n):\n        curr = heapq.heappop(items)\n        my_list.append(curr)\n    return my_list\n",
        "test": "assert     expensive_items([],5) == [], \"empty input\"",
        "num_ids": 1702,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return list(l[:n]) + list(l[n:])\n    \ndef insert_element(l, n, data):\n    '''\n    Write a python function to insert an element at the nth position.\n    '''\n    l.insert(n, data)\n    return l\n",
        "test": "assert     split_Arr([1,2,3,4], 4) == [1, 2, 3, 4], \"The list should be split at nth element [1, 2, 3, 4]\"",
        "num_ids": 1105,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 15,
        "max_test_num": 10,
        "total_product": 210,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n",
        "test": "assert     list_tuple([1,2,3])!= (1,3)",
        "num_ids": 717,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n",
        "test": "assert     big_diff([0,1,2,3,4,5,6]) == 6",
        "num_ids": 1444,
        "indeed": true
    },
    {
        "number": 589,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if(not a or not b):\n        return 0\n    if (a == b):\n        return 1\n    elif (a < b):\n        return perfect_squares(a, b-1)\n    else:\n        return perfect_squares(b, a-1)\n",
        "test": "assert perfect_squares(0, 0) == False",
        "num_ids": 1101,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    ang_rad = cmath.phase(x*y)\n    ang_deg = round(ang_rad*180.0/cmath.pi,2)\n    return ang_rad, ang_deg\ndef polar_rect_angle(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad, ang_deg = polar_rect(x,y)\n    return ang_deg\ndef polar_angle(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return ang_rad\ndef polar_sin(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.sin(cmath.radians(ang_rad)),2)\ndef polar_cos(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.cos(cmath.radians(ang_rad)),2)\ndef polar_tan(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.tan(cmath.radians(ang_rad)),2)\ndef polar_area(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area_2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area_2_2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_sine(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.sin(cmath.radians(ang_rad)),2)\ndef polar_cosine(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.cos(cmath.radians(ang_rad)),2)\ndef polar_arccos(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.acos(cmath.sin(cmath.radians(ang_rad))),2)\ndef polar_arctan(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.atan(cmath.sin(cmath.radians(ang_rad))),2)\ndef polar_arctan2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.atan2(cmath.sin(cmath.radians(ang_rad)),cmath.cos(cmath.radians(ang_rad))),2)\ndef polar_acos(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.acos(cmath.sin(cmath.radians(ang_rad))),2)\ndef polar_atan2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.atan2(cmath.sin(cmath.radians(ang_rad)),cmath.cos(cmath.radians(ang_rad))),2)\ndef polar_arctan2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.atan2(cmath.sin(cmath.radians(ang_rad)),cmath.cos(cmath.radians(ang_rad))),2)\ndef polar_sin2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.sin(cmath.radians(ang_rad)),2)\ndef polar_cos2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.cos(cmath.radians(ang_rad)),2)\ndef polar_tan2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.tan(cmath.radians(ang_rad)),2)\ndef polar_area2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area2_2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_area2_2_2_2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    return round(cmath.pi/2*polar_area_2_2_2_2(x,y)*(cmath.pi/180.0),2)\ndef polar_sine2(x,y):\n    '''\n    Write a function to calculate the angle between 2 polar coordinates.\n    '''\n    ang_rad = polar_rect_angle(x,y)\n    retur",
        "test": "assert     polar_rect(0,0) == (0,0)",
        "num_ids": 3009,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 16,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # define the variable to be passed to the function.\n    start_index = 0\n    end_index = len(newList) - 1\n    while start_index < end_index:\n        temp = newList[start_index]\n        newList[start_index] = newList[end_index]\n        newList[end_index] = temp\n        start_index += 1\n        end_index -= 1\n    return newList\n",
        "test": "assert     swap_List([]) == []",
        "num_ids": 1582,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 340,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if k > 0:\n        coeff = 1\n        for _ in range(k):\n            coeff = coeff * (n-_)\n    elif k == 0:\n        coeff = 1\n    elif k > 0 and n == 0:\n        coeff = 0\n    else:\n        coeff = 0\n    return coeff\n",
        "test": "assert     binomial_Coeff(0,0) == 1",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 23,
        "max_test_num": 5,
        "total_product": 350,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return re.sub('^0', '', ip)\n",
        "test": "assert     removezero_ip('1.1.1.1.1') == '1.1.1.1.1'",
        "num_ids": 1622,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 270,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # your code here\n    diff = []\n    for i in range(0,len(list1),2):\n        diff.append(list1[i+1]-list1[i])\n    return diff\n",
        "test": "assert     diff_even_odd([]) == [], \"Function must return an empty list\"",
        "num_ids": 1492,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 240,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    # swap dictionary\n    swap_dictionary = {}\n    for x in range(0,7):\n        swap_dictionary[x] = 0\n    for x in range(0,7):\n        swap_dictionary[x] = 0\n    \n    # intialize count\n    count = 0\n    \n    # convert the string to binary\n    # swap string\n    for i in range(0, len(str1)):\n        \n        if str1[i]!= str2[i]:\n            # swap the one\n            swap_dictionary[str1[i]] = str2[i]\n            swap_dictionary[str2[i]] = str1[i]\n            \n            count += 1\n            \n        else:\n            pass\n    \n    return count\n",
        "test": "assert     min_Swaps('1110111010', '1010101010') == 2, 'incorrect'",
        "num_ids": 5716,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 340,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += len(item)\n    return size\n",
        "test": "assert     tuple_size(()) == 0",
        "num_ids": 1051,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 330,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    left = 0\n    right = len(arr2)-1\n    \n    while left < right:\n        mid = (left+right)//2\n        if arr1[mid] < arr2[mid]:\n            left = mid+1\n        else:\n            right = mid\n    \n    return arr1[left]\n",
        "test": "assert     find_kth([1, 1], [1, 1, 1], 1) == 1",
        "num_ids": 1822,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 12,
        "max_test_num": 3,
        "total_product": 310,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    num = int(number)\n    d = 0\n    while num > 0:\n        d = d + 1\n        q = num % 10\n        num = num // 10\n    \n    if d == len(str(num)):\n        return True\n    else:\n        return False",
        "test": "assert     armstrong_number(-1) == False, \"Armstrong number is not correct!\"",
        "num_ids": 980,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 7,
        "max_test_num": 7,
        "total_product": 330,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return(sum(x for x in range(number) if x%2==0) + sum(x for x in range(number) if x%2!=0))\n",
        "test": "assert     sum_average(5)!= 5.0",
        "num_ids": 1017,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 16,
        "max_test_num": 10,
        "total_product": 310,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else : \n        return False\n",
        "test": "assert not is_Even(3)",
        "num_ids": 572,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 270,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1 == '':\n        return None\n    if len(str1) < 1:\n        return None\n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if str1[j] == str1[i]:\n                return str1[j]\n    return None\n",
        "test": "assert     first_repeated_char(\"a\") == \"a\"",
        "num_ids": 3368,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 300,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    result = []\n    for i in range(1,n+1):\n        if i < n:\n            if i % 2 == 0:\n                if i % 3 == 0:\n                    result.append(i)\n            elif i % 3 == 0:\n                if i % 5 == 0:\n                    result.append(i)\n    return result\n",
        "test": "assert     isinstance(get_ludic(1), int) == False",
        "num_ids": 1170,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 310,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n",
        "test": "assert     reverse_words('H.N.O.E.L.S') == 'H.N.O.E.L.S'",
        "num_ids": 5097,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 11,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n",
        "test": "assert     prime_num(2) == True",
        "num_ids": 828,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian_degree = degree/360*math.pi\n    return radian_degree\n",
        "test": "assert         radian_degree(0) == 0",
        "num_ids": 881,
        "indeed": false
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 320,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern, re.MULTILINE)\n    match = regex.search(text)\n    return match.start(), match.end(), match.group()\n",
        "test": "assert     find_literals('''",
        "num_ids": 3166,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 12,
        "max_test_num": 4,
        "total_product": 340,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    # base cases\n    if n <= 1: \n        return n\n    # return the base cases \n    return n % 10 + bell_Number(n // 10)\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 1019,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 400,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[L:]\n",
        "test": "assert         remove_kth_element([1, 2, 3, 4, 5], 1) == [2, 3, 4, 5], \"The function remove_kth_element returns incorrect output.\"",
        "num_ids": 2010,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 290,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_N = test_list[0][N]\n    for x in test_list:\n        if x[N] > max_of_N:\n            max_of_N = x[N]\n    return max_of_N\n",
        "test": "assert     max_of_nth([[1,2,3,4],[5,6,7,8],[9,10,11,12]],3) == 12",
        "num_ids": 2054,
        "indeed": true
    },
    {
        "number": 612,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    if len(lst) == 0:\n        return []\n    for i in range(len(lst)):\n        result.append(lst[i])\n    return result\ndef simple_sort(lst):\n    '''\n    Sort the given list of lists using bubble sort.\n    '''\n    for i in range(len(lst)):\n        for j in range(len(lst)-i-1):\n            if lst[j][0] < lst[j+1][0]:\n                temp = lst[j]\n                lst[j] = lst[j+1]\n                lst[j+1] = temp\n    return lst\n",
        "test": "assert     merge([[3,4],[5,6]]) == [[3,4],[5,6]]",
        "num_ids": 1718,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 4,
        "max_test_num": 8,
        "total_product": 240,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative = 0\n    for i in range(len(test_list)):\n        cummulative += test_list[i]\n    return cummulative\n",
        "test": "assert     cummulative_sum((1, 2, 3)) == 6, 'cummulative_sum(1, 2, 3) = 3'",
        "num_ids": 899,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 180,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #Your code here\n    t=()\n    sum=0\n    for i in nums:\n        sum+=i[1]\n        for j in i[0]:\n            t.append((sum/len(i[0])))\n    return t\n",
        "test": "assert     average_tuple([(1,2,3),(4,5,6),(8,9,0)]) == [2.0,3.0,4.0]",
        "num_ids": 3157,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 370,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    mod = 0\n    for tup in test_tup1:\n        if tup not in test_tup2:\n            print(\"ERROR: The given element is not present in the given tuple\")\n            break\n        else:\n            mod = mod%tup[1]\n    return mod\n",
        "test": "assert     tuple_modulo((\"1\",\"2\",\"3\"), (\"2\",\"4\",\"5\")) == False",
        "num_ids": 2106,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 300,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d == 0:\n        return 0\n    elif d == 1:\n        return 1\n    elif d == 2:\n        return 1 + min_Jumps(steps - 1, 1)\n    elif d == 3:\n        return 1 + min_Jumps(steps - 1, 2)\n    else:\n        return min_Jumps(steps - 1, 3)\n",
        "test": "assert     min_Jumps(5, (4, 0)) == 3, \"Error - wrong jump count\"",
        "num_ids": 3470,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 250,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [num for num in nums1 if num in nums2]\n",
        "test": "assert     div_list([], []) == []",
        "num_ids": 1441,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 11,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    final_str = ''\n    for i in range(len(test_str)):\n        if test_str[i].isnumeric():\n            final_str = final_str + str(test_str[i])\n        else:\n            final_str = final_str + test_str[i]\n    return final_str\n",
        "test": "assert     move_num(\"\") == \"\"",
        "num_ids": 1296,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 250,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 1:\n        return a[0]\n    i = 0\n    while i < n:\n        if a[i] % a[i + 1] == 0:\n            return a[i]\n        i += 1\n    return a[0]\n",
        "test": "assert     largest_subset([2, 1, 2]) == 2",
        "num_ids": 2999,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_arr1 = sorted(arr1)\n    sorted_arr2 = sorted(arr2)\n    if n % 2 == 0:\n        return (sorted_arr1[n//2] + sorted_arr2[n//2]) / 2\n    else:\n        return sorted_arr1[n//2]\n",
        "test": "assert     get_median([1, 2, 3, 4, 5], [1, 2, 3, 4, 5], 3) == 2, 'failed to return 2'",
        "num_ids": 1906,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 260,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result=[]\n    if len(nums)<=1:\n        return nums\n    else:\n        for i in range(len(nums)):\n            result.append(nums[i]**n)\n    return result\n",
        "test": "assert     nth_nums([2,3,4,1,2], -1) == [2,9,27]",
        "num_ids": 1219,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 25,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if string == \"\":\n        return False\n    return True\n",
        "test": "assert     is_upper(\"foo\") == True",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 290,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # YOUR CODE HERE\n    if newList == []:\n        return []\n    if len(newList) < 2:\n        return newList\n    if len(newList) == 2:\n        return [newList[1], newList[0]]\n    mid = len(newList) // 2\n    if newList[mid] > newList[mid - 1]:\n        temp = newList[mid]\n        newList[mid] = newList[mid - 1]\n        newList[mid - 1] = temp\n    else:\n        temp = newList[mid]\n        newList[mid] = newList[mid - 1]\n        newList[mid - 1] = temp\n    return newList\n",
        "test": "assert     swap_List([5,4,3,2,1])!= [5,4,3,2,1]",
        "num_ids": 1730,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    l = r * (r - 1) / 2\n    area = (l * r) / 2\n    return area\n",
        "test": "assert     triangle_area(0) == 0     # Triangle is a triangle (a^2 + b^2 = c^2)",
        "num_ids": 4889,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 210,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start > end:\n        return None\n    mid = (start+end)//2\n    if array[mid]!= array[mid+1]:\n        return array[mid]\n    if mid == start:\n        return array[mid+1]\n    else:\n        return find_First_Missing(array,start,mid-1)\n",
        "test": "assert     find_First_Missing([1, 2, 3, 4],2,None) == 3",
        "num_ids": 1281,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 3,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \",\"%20\")\n",
        "test": "assert     replace_spaces('ABC%20') == 'ABC%20'",
        "num_ids": 2913,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 220,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in range(0, len(list), 2):\n        even_list.append(list[i])\n    return even_list\n",
        "test": "assert     Split([1, 2, 3, 4, 5]) == [1, 3, 5]",
        "num_ids": 1247,
        "indeed": false
    },
    {
        "number": 630,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if (ele[0] < ele[1]): \n        sub.append((ele[0] + 1, ele[1]))\n        sub.append((ele[0] + 1, ele[1] + 1))\n    else:\n        sub.append((ele[0] + 1, ele[1] + 1))\n    if (ele[1] < ele[0]): \n        sub.append((ele[0], ele[1] + 1))\n    else:\n        sub.append((ele[0] + 1, ele[1] + 1))\n    return sub\n",
        "test": "assert     adjac([1,3,5,4,7],[]), \"adjac should be a 2D list.\"",
        "num_ids": 3435,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 290,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    words = text.split()\n    words = [x.strip() for x in words]\n    words = [x.upper() for x in words]\n    words = [x.lower() for x in words]\n    return''.join(words)\n",
        "test": "assert     replace_spaces(\"\") == \"\", \"Expected an empty string\"",
        "num_ids": 2254,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 4,
        "max_test_num": 7,
        "total_product": 200,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if len(num_list) == 0:\n        return []\n    elif len(num_list) == 1:\n        return num_list\n    elif len(num_list) == 2:\n        return [num_list[0]] + num_list[1:]\n    else:\n        return [num_list[0]] + move_zero(num_list[1:])\n",
        "test": "assert     move_zero(['', '', '', '', '', '', '', '', '']) == ['', '', '', '', '', '', '', '', '']",
        "num_ids": 1203,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 9,
        "max_test_num": 7,
        "total_product": 240,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # Allocate an empty array\n    arr = []\n    # Check if arr is empty\n    if(arr == []):\n        return 0\n    # Use SLL to push the elements in the array to the SLL\n    sll = SLL()\n    for i in range(0,n):\n        sll.push(arr[i])\n    # Call the function\n    return sll.sll()\n",
        "test": "assert     pair_xor_Sum([],0) == 0",
        "num_ids": 1176,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 9,
        "max_test_num": 10,
        "total_product": 320,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if iterable is None:\n        return iterable\n    for i in range(len(iterable)):\n        for j in range(i, -1, -1):\n            if iterable[j] < iterable[j - 1]:\n                temp = iterable[j - 1]\n                iterable[j - 1] = iterable[j]\n                iterable[j] = temp\n    return iterable\n",
        "test": "assert     'pass'=='pass'",
        "num_ids": 3732,
        "indeed": false
    },
    {
        "number": 637,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if (actual_cost-sale_amount)<0:\n        return False\n    return True\n",
        "test": "assert     noprofit_noloss(1,1) == 1, \"The function doesn't pass the test\"",
        "num_ids": 978,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 2,
        "max_test_num": 9,
        "total_product": 210,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    w_c = v/9.0\n    temp_c = (math.log(t,10))\n    return round(w_c + (temp_c * (9.0/5.0)), 2)\n",
        "test": "assert not     wind_chill(0.6,1.3) == 4.7",
        "num_ids": 3207,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 310,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    s=0\n    for i in sample_names:\n        if i.startswith('a'):\n            s+=len(i)\n    return s\n",
        "test": "assert     sample_nam([]) == 0",
        "num_ids": 3086,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 330,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    list_items = list(items)\n    \n    for i in range(len(list_items)):\n        if list_items[i][0] == '(':\n            if list_items[i][-1] == ')':\n                list_items[i] = list_items[i][0:-1]\n        elif list_items[i][-1] == ')':\n            if list_items[i][0] == '(':\n                list_items[i] = list_items[i][0:1]\n        if list_items[i][0] == '*':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:-1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:1]\n        if list_items[i][0] == '-':\n            if list_items[i][-1] == '+':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '-':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '*':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '-':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '+':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:1]\n        elif list_items[i][0] == '*':\n            if list_items[i][-1] == '*':\n                list_items[i] = list_items[i][0:1]\n    return ''.join(list_items)\n",
        "test": "assert     remove_parenthesis('') == ''",
        "num_ids": 2286,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 19,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    i = 0\n    while (i<=n): \n        j = (n-i)\n        if (j%2==0): \n            return True\n        i += 1\n    return False\n",
        "test": "assert     is_nonagonal(12), \"12 is not a nonagonal number\"",
        "num_ids": 2866,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r'z'\n    result = re.search(pattern,text)\n    if result is None:\n        result = False\n    else:\n        result = True\n        if result and (text.startswith('z') or text.endswith('z')):\n            result = False\n    return result\n",
        "test": "assert     text_match_wordz_middle('Mundo, sinto, uma breve, cedo!') == False",
        "num_ids": 1545,
        "indeed": true
    },
    {
        "number": 644,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 250,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    output = input[0:k]\n    for i in range(len(input)-k):\n        output.append(input[i])\n    return output\n",
        "test": "assert     reverse_Array_Upto_K([], 0) == []",
        "num_ids": 1328,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 210,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert     add_dict_to_tuple(('a', 'b', 'c'), {'c':3}), \"The function should have been able to add the dictonary and the tuple correctly.\"",
        "num_ids": 1778,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 150,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Determine size of matrix\n    n = len(cost)\n    m = len(cost[0])\n    if n == m == 1:\n        return cost[0][0]\n    else:\n        # Initialize variables\n        d = [0] * n\n        max1 = [0] * n\n        avg = [0] * m\n        for i in range(n):\n            for j in range(m):\n                if (i == 0 and j == 0):\n                    d[i] = cost[i][j]\n                    max1[i] = d[i]\n                else:\n                    d[i] = cost[i][j] + max(d[i-1], max1[i-1])\n                    avg[i] = d[i] / 2\n                    max1[i] = d[i]\n            # Average is sum of squares\n            avg[i] = sum([(d[i]**2) for i in range(n)])\n        # Compute average\n        avg = sum(avg) / m\n        # Return maximum average\n        return avg\n",
        "test": "assert     maxAverageOfPath([[1,0,0],[1,0,0],[0,0,0]]) == 0",
        "num_ids": 3643,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print(\"Filtering students that have below the minimum\")\n    for student in students:\n        height, weight = students[student]\n        if height>h and weight>w:\n            students[student] = (weight,height)\n",
        "test": "assert not    filter_data({\"Harry\":(70,50), \"Ron\":(70,50), \"Hermione\":(70,50)}, 30, 50), \"passed\"",
        "num_ids": 1527,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 6,
        "max_test_num": 8,
        "total_product": 330,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for index in range(len(nums1)):\n        if nums1[index] == nums2[index]:\n            count += 1\n    return count\n",
        "test": "assert     count_same_pair([1,1,1,1], [2,2,2,2]) == 0",
        "num_ids": 3891,
        "indeed": false
    },
    {
        "number": 724,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 350,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    while base > 0:\n        digit = base % 10\n        sum += digit\n        base = base // 10\n    return sum\n",
        "test": "assert     power_base_sum(base = 1, power = 1) == 1",
        "num_ids": 955,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace('\"','')\n    text1 = re.sub('\\s+','', text1)\n    text1 = re.sub('([^0-9])', '', text1)\n    text1 = text1.lower()\n    text1 = text1.split(' ')\n    text1 = [word for word in text1 if word not in'']\n    return text1\n",
        "test": "assert     extract_quotation('\")(\" \")') == ('\"', '')",
        "num_ids": 3222,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 290,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    l_tuple=[]\n    for i in range(len(test_tup)):\n        l_tuple.append(test_tup[i]*(i+1))\n    return tuple(l_tuple)\n",
        "test": "assert     multiply_elements((0, 0, 0)) == (0, 0, 0)",
        "num_ids": 1673,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 250,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    return sum(lst1+lst2)\n",
        "test": "assert     sum_list([\"1\",\"3\",\"5\",\"7\"],[\"2\",\"4\",\"6\",\"8\",\"9\",\"10\"]) == [2,4,6,10]",
        "num_ids": 1473,
        "indeed": false
    },
    {
        "number": 730,
        "max_answer_num": 10,
        "max_test_num": 6,
        "total_product": 260,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    return list(set([item for item, count in groupby(nums)]))\n",
        "test": "assert     consecutive_duplicates([]) == []",
        "num_ids": 3852,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 300,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # distance between the two edges\n    E = math.sqrt((r-h)**2+r**2)\n    # area of the cone\n    A = (1/2)*(E**2)\n    # make it a negative number if the surface area is positive\n    A = abs(A)\n    # return the result\n    return A\n",
        "test": "assert     lateralsurface_cone(0,0)==0",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 350,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ','')\n    text = text.replace(',','\\n\\t')\n    text = text.replace('.','\\n\\t\\t')\n    return text\ndef replace_numbers(text):\n    '''\n    Replace all the number symbols with a colon.\n    '''\n    for k,v in int_dic.items():\n        text = text.replace(str(v),'\\n\\t\\t\\t'+str(k)+'\\n')\n    return text\ndef replace_double_newline(text):\n    '''\n    Replace all the double newline characters with a newline character.\n    '''\n    for i in text:\n        if i=='\\n':\n            text=text.replace('\\n','\\n\\t')\n        if i=='\\t':\n            text=text.replace('\\t','\\n\\t')\n    return text\n",
        "test": "assert     replace_specialchar(\"\") == \"\"",
        "num_ids": 5144,
        "indeed": false
    },
    {
        "number": 733,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 320,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    index = 0\n    #looping through the array and checking the left boundary if there is a match\n    while index < len(A) and A[index] < x:\n        index += 1\n    #if the left boundary is found, it means that the value is found in the right boundary\n    if index < len(A):\n        return index\n    else:\n        return -1\n",
        "test": "assert     find_first_occurrence([1,2,1], 1) == 0, \"Number 1 is not in the array\"",
        "num_ids": 1423,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 350,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum = 0\n    # write your code here\n    return sum\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 3514,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 310,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n > 1:\n        n = n | 1\n        n = n & 1\n        n = n ^ 1\n    return n\n",
        "test": "assert     set_middle_bits(0) == 0",
        "num_ids": 1097,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 3,
        "max_test_num": 8,
        "total_product": 250,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n",
        "test": "assert     left_insertion([1,3,2], 3) == 1",
        "num_ids": 912,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 260,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    matcher = re.search(regex, string)\n    if matcher!= None:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_str(\"hello\")==False, \"A string must contain only vowels\"",
        "num_ids": 2233,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    \n    if n < 1:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n",
        "test": "assert     geometric_sum(1) == 1",
        "num_ids": 856,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 9,
        "max_test_num": 6,
        "total_product": 280,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    i=0\n    while(n>0):\n        \n        if(n%10 == 1):\n            i=i+1\n        n=n//10\n    \n    if(i==0):\n        print(i+1)\n    else:\n        print(i-1)\n    return i\n",
        "test": "assert     find_Index(0) == 0",
        "num_ids": 1062,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 320,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    if len(test_tup) == 0:\n        return {}\n    for i in range(len(test_tup) - 1):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n",
        "test": "assert     tuple_to_dict([]) == {}",
        "num_ids": 1845,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 13,
        "max_test_num": 5,
        "total_product": 240,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #print(s)\n    for i in range(len(s)):\n        for j in range(len(s)-i-1):\n            #print(s[j:j+i+1])\n            if s[j:j+i+1]!= s[j+1:j+i+2]:\n                #print(s[j:j+i+1])\n                #print(s[j+1:j+i+2])\n                #print(s[j+1:j+i+2])\n                #print(s[j:j+i+2])\n                return False\n            else:\n                #print(s[j:j+i+1])\n                #print(s[j+1:j+i+2])\n                #print(s[j+1:j+i+2])\n                #print(s[j:j+i+2])\n                #print(s[j:j+i+2])\n                return True\n    #print(s[0:len(s)-i-1])\n    return False\n",
        "test": "assert all_Characters_Same(\"b1bc2c3a4abcd\") == False",
        "num_ids": 1048,
        "indeed": true
    },
    {
        "number": 742,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 370,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return side*side\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 3174,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 6,
        "max_test_num": 7,
        "total_product": 320,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    new_list = []\n    for num in list:\n        new_list.append(num)\n    i = len(list) - 1\n    \n    while i >= 0:\n        if i % m == 0:\n            j = len(list) - 1 - i\n            while j >= 0:\n                new_list[j] = list[j]\n                j -= 1\n            break\n        i -= 1\n    return new_list\n",
        "test": "assert     rotate_right(['a', 'b', 'c', 'd', 'e'], 2), \"Rotate right by 2 not needed\"",
        "num_ids": 1780,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 270,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i is None:\n            return True\n    return False\n",
        "test": "assert     check_none((1,2,3,4,5)) == False",
        "num_ids": 797,
        "indeed": true
    },
    {
        "number": 745,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 370,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    startnum = str(startnum)\n    endnum = str(endnum)\n    return [int(i) for i in startnum] + [int(i) for i in endnum]\n",
        "test": "assert     divisible_by_digits(1, 2) == [1, 2], 'Should be 1 and 2'",
        "num_ids": 1506,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 8,
        "max_test_num": 6,
        "total_product": 200,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r < 0):\n        r = -r\n    if (a < 0):\n        a = -a\n    if (a > 360):\n        a = 360\n",
        "test": "assert sector_area(4,360) == None",
        "num_ids": 3248,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 360,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    if len(X) == 0:\n        return len(Y)\n    if len(Y) == 0:\n        return len(Z)\n    \n    if len(X) < len(Y):\n        return lcs_of_three(Y, Z, X)\n    \n    if len(X) < len(Z):\n        return lcs_of_three(Z, X, Y)\n    \n    x_left = []\n    y_left = []\n    z_left = []\n    x_right = []\n    y_right = []\n    z_right = []\n    \n    for i in range(len(X)):\n        if X[i] == Y[i]:\n            if Y[i] not in x_left:\n                x_left.append(Y[i])\n        else:\n            if Z[i] not in y_left:\n                y_left.append(Z[i])\n        if X[i] == Z[i]:\n            if Z[i] not in z_left:\n                z_left.append(Z[i])\n        else:\n            if X[i] not in x_right:\n                x_right.append(X[i])\n        \n    \n    x_right = set(x_right)\n    y_right = set(y_right)\n    z_right = set(z_right)\n    \n    if len(x_left) == 0 and len(y_left) == 0 and len(z_left) == 0:\n        return max(len(X), len(Y), len(Z))\n    if len(x_right) == 0 and len(y_right) == 0 and len(z_right) == 0:\n        return max(len(X), len(Y), len(Z))\n    \n    if len(x_left)!= 0:\n        x = lcs_of_three(x_left, y_left, z_left)\n    if len(x_right)!= 0:\n        x = lcs_of_three(x_right, y_right, z_right)\n    \n    return x\n",
        "test": "assert     lcs_of_three('abc', 'bac', 'dca') == 0, 'incorrect lcs_of_three'",
        "num_ids": 2738,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall(r'\\w+', str1.strip())\n    str1 = \" \".join(words)\n    return str1\n    \n",
        "test": "assert     capital_words_spaces(\"we love programmers\") == \"we love programmers\", \"test failed\"",
        "num_ids": 3268,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 13,
        "max_test_num": 7,
        "total_product": 250,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    print('Beginning to sort numeric strings in a list...')\n    lst = list(nums_str)\n    lst.sort(key=lambda num: num if not isinstance(num, int) else float(num))\n    print('Sorting of the list was successful!')\n    return lst\n",
        "test": "assert     sort_numeric_strings([]) == []",
        "num_ids": 4081,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 310,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for el in test_tup:\n        test_list.append(el)\n    return test_list\n",
        "test": "assert     add_tuple([1, 2, 3], (4, 5, 6)) == [1, 2, 3, 4, 5, 6]",
        "num_ids": 1367,
        "indeed": true
    },
    {
        "number": 751,
        "max_answer_num": 23,
        "max_test_num": 6,
        "total_product": 370,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    return arr[i] >= arr[0]\n",
        "test": "assert     check_min_heap_helper([1,2,3,4,5,6], 0) == True",
        "num_ids": 1663,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 12,
        "max_test_num": 9,
        "total_product": 280,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_num(n):\n        if n < 1: return 1\n        if n == 1: return 1\n        return jacobsthal_num(n-1) + jacobsthal_num(n-2)\n    return jacobsthal_num(n)\n",
        "test": "assert     0!= 1 and 0!= 1 and 0!= 1 and 0!= 3 and 0!= 3 and 0!= 5 and 0!= 5 and 0!= 11 and 0!= 21 and 0!= 43 and 0!= 85 and 0!= 171 and 0!= 341",
        "num_ids": 2893,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 280,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    table = []\n    for el in test_list:\n        table.append(el)\n    table.sort()\n    minimum = table[0][0]\n    for el in range(len(table)):\n        if minimum > table[el][0]:\n            minimum = table[el][0]\n    return minimum\n",
        "test": "assert     min_k([(1, 2), (1, 3), (2, 3), (3, 4)], 3) == 1",
        "num_ids": 3466,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 7,
        "max_test_num": 8,
        "total_product": 380,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for l in [l1, l2, l3]:\n        if l.index in l1 or l.index in l2 or l.index in l3:\n            index_list.append(l.index)\n    return index_list\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 2206,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 290,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Hint: sort the list\n    numbers.sort()\n    # Check if second smallest number is the one\n    if numbers[1] == numbers[2]:\n        return numbers[1]\n    return numbers[1]\n",
        "test": "assert     second_smallest([3, 1, 4, 1]) == 1",
        "num_ids": 966,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 290,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #set of all possible characters to be matched\n    chars = set('''abcdefghijklmnopqrstuvwxyz\n    ABCDEFGHIJKLMNOPQRSTUVWXYZ\n    0123456789\n    () * ''')\n    #iterate over string\n    for char in text:\n        if char not in chars:\n            return False\n    return True\n",
        "test": "assert     text_match_zero_one('a b') is True",
        "num_ids": 5277,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 200,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)-i-1):\n            if test_list[j] == test_list[j+i] and test_list[j] == test_list[j+i+1]:\n                count += 1\n    return count\n",
        "test": "assert         count_reverse_pairs(['ab','abc','a','abca','bca','abcab','abca']) == 0, 'false'",
        "num_ids": 2711,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 270,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    d = {}\n    for i in range(len(list1)):\n        t = list1[i]\n        for j in t:\n            if j in d:\n                d[j] += 1\n            else:\n                d[j] = 1\n    return d\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 1471,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 26,
        "max_test_num": 7,
        "total_product": 400,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    \n    if isinstance(num, str):\n        num = num.replace('.', '')\n        if not num.isdigit():\n            return False\n        \n        if len(num) == 1:\n            return True\n        \n        if num[0] == '0' and len(num) > 1:\n            return False\n        \n        for char in num:\n            if not char.isdigit():\n                return False\n        \n        return True\n    \n    return False\n",
        "test": "assert     is_decimal('a') == False",
        "num_ids": 3148,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 11,
        "max_test_num": 6,
        "total_product": 270,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    count = 0\n    for elem in arr:\n        if elem!= count:\n            count = elem\n    return count == 1\n",
        "test": "assert     unique_Element(arr=[1,2,3,2,1,4,5,6,1,1,2,4,5]) == False",
        "num_ids": 5075,
        "indeed": true
    },
    {
        "number": 762,
        "max_answer_num": 7,
        "max_test_num": 6,
        "total_product": 290,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 < 1 or monthnum3 > 12:\n        return False\n    elif monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_monthnumber_number(1) == True",
        "num_ids": 4104,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    current_min = arr[0] - arr[1]\n    count = 0\n    for i in range(1, n):\n        current_min = arr[i] - arr[i-1]\n        count += 1\n    return count \n",
        "test": "assert     find_min_diff([0, 0, 0], 0) == 0, \"The function find_min_diff should return 0, as it should return 0, as the minimum difference between any two elements in the list is 0\"",
        "num_ids": 2689,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 320,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n",
        "test": "assert     number_ctr(\"ZZZZ\") == 0",
        "num_ids": 781,
        "indeed": true
    },
    {
        "number": 765,
        "max_answer_num": 17,
        "max_test_num": 6,
        "total_product": 400,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # If n is zero, then there is no polite number.\n    if n == 0: \n        return False\n    # If n is one, then there is a polite number.\n    if n == 1: \n        return True\n    # Otherwise, n is not even.\n    if n % 2 == 0: \n        return False\n    # Otherwise, n is odd.\n    else: \n        return not is_polite(n-1) \n    \ndef is_legendary(n): \n    '''\n    Write a function to find nth legendary number. geeksforgeeks.org/n-th-legendary-number/\n    '''\n    if n == 0: \n        return True\n    elif n == 1: \n        return False\n    elif n < 10: \n        return True\n    elif n % 2 == 0: \n        return False\n    else: \n        return not is_legendary(n-1) \n",
        "test": "assert     is_polite(1)",
        "num_ids": 3172,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 16,
        "max_test_num": 9,
        "total_product": 350,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(l1[i], l1[i + 1]) for i in range(len(l1) - 1)]\n",
        "test": "assert         pair_wise([]) == []",
        "num_ids": 1737,
        "indeed": true
    },
    {
        "number": 767,
        "max_answer_num": 9,
        "max_test_num": 8,
        "total_product": 210,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in arr:\n        if i+sum == sum:\n            pairs += 1\n    return pairs\n",
        "test": "assert     get_pairs_count([1], 3) == 0",
        "num_ids": 1094,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 250,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3=[]\n    for i in range(len(li1)):\n        if li1[i]!=li2[i]:\n            li3.append(li1[i])\n    return li3\n",
        "test": "assert     Diff([1,2,3,4], [2,3,4,5]) == [1,2,3,4]",
        "num_ids": 1126,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 220,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n) :\n        sum += i ** 3\n    return sum\n",
        "test": "assert     odd_num_sum(2) == 1, \"n should be odd\"",
        "num_ids": 2691,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 14,
        "max_test_num": 6,
        "total_product": 390,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for i in exp:\n        if i in \"+-*/\":\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            else:\n                if i == \"(\" or i == \")\":\n                    if stack.pop()!= \"(\":\n                        return False\n                if i == \",\" or i == \")\":\n                    if stack.pop()!= \")\":\n                        return False\n    if len(stack)!= 0:\n        return False\n    return True\n",
        "test": "assert     check_expression('') == True",
        "num_ids": 2091,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 5,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    check = [False] * (len(test_str) + 1)\n    for i in range(len(test_str)):\n        for j in range(i, len(test_str)):\n            if test_str[i:j+1]!= test_str[i:j+1][::-1]:\n                check[j] = True\n    for i in range(len(check)):\n        if check[i]:\n            test_str = test_str.replace(test_str[i], '')\n    return test_str\n",
        "test": "assert     remove_length('', 0) == ''",
        "num_ids": 1224,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 380,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    i = 0\n    j = 0\n    str_len = len(text)\n    while j < str_len:\n        if pattern[0] == text[j] and pattern[1] == text[j+1]:\n            i = j + 1\n            j += 2\n            if j == str_len:\n                return i,j\n        else:\n            j += 1\n    return None\n",
        "test": "assert     occurance_substring(\"\", \"abc\") == None",
        "num_ids": 1771,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 6,
        "max_test_num": 6,
        "total_product": 220,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    count = 0\n    for num in nums:\n        if num % 2!= 0:\n            count += 1\n    if count % 2!= 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     odd_position([1,2,3,4,5])",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels_list = [\"a\", \"e\", \"i\", \"o\", \"u\"]\n    vowel_count = 0\n    \n    for char in test_str:\n        if char in vowels_list:\n            vowel_count += 1\n    \n    return vowel_count\n",
        "test": "assert     count_vowels('hello') == 2",
        "num_ids": 1616,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 5,
        "max_test_num": 8,
        "total_product": 230,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum([x for x in arr if x not in arr and arr.count(x)>1])\n",
        "test": "assert     find_sum([]) == 0, \"Wrong output\"",
        "num_ids": 1099,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1_len = len(list1)\n    list_uniq = []\n    for i in range(list1_len):\n        if i!= list1_len-1 and list1[i+1] == list1[i]:\n            pass\n        else:\n            list_uniq.append(list1[i])\n    list_uniq.sort()\n    return list_uniq\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 3044,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 3,
        "max_test_num": 9,
        "total_product": 170,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Your code here\n    l = []\n    for i in list1:\n        t = tuple(i)\n        l.append(t)\n    result = dict()\n    for i in l:\n        result[i] = l.count(i)\n    return result\n",
        "test": "assert     unique_sublists([]) == {}, 'Expected empty list'",
        "num_ids": 3178,
        "indeed": true
    },
    {
        "number": 780,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 290,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    if len(test_list) == 0:\n        return []\n",
        "test": "assert     find_combinations([]) == []",
        "num_ids": 2601,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 270,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    result = 0\n    for i in range(1, math.floor(math.sqrt(n))) :\n        if n % i == 0 :\n            result += 1\n    return result == 0\ndef prime_checker(n) :\n    '''\n    Check whether a number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-20.php\n    '''\n    if n > 1 :\n        for i in range(2, int(math.sqrt(n)) + 1) :\n            if n % i == 0 :\n                return False\n        return True\n    else :\n        return False\n    \ndef perfect_number(n) :\n    '''\n    Check whether a number is a perfect number or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-3.php\n    '''\n    if prime_checker(n) :\n        if n == 1 :\n            return False\n        if n == 2 :\n            return True\n        for i in range(2, int(math.sqrt(n)) + 1) :\n            if n % i == 0 :\n                return False\n        return True\n    else :\n        return False\n",
        "test": "assert     count_divisors(3) == True, 'incorrect count_divisors'",
        "num_ids": 1041,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 5,
        "max_test_num": 7,
        "total_product": 220,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if(arr[i]%2 == 0):\n            sum+=arr[i]\n    return sum\n",
        "test": "assert     odd_length_sum([]) == 0",
        "num_ids": 2889,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 190,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == 0.0 and g == 0.0 and b == 0.0:\n        return 0.0, 0.0, 0.0\n",
        "test": "assert     rgb_to_hsv(0,0,0) == (0,0,0), \"color-correction-error\"",
        "num_ids": 3224,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 320,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod = 1\n    for i in range(0,len(list1)):\n        if i%2 == 0:\n            prod = prod * list1[i]\n        else:\n            prod = prod * list1[i]\n    return prod\n",
        "test": "assert     mul_even_odd([1,1,1]) == 1",
        "num_ids": 3331,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str.split(\",\")\n    return tuple(map(int, tuple_str))\n",
        "test": "assert     tuple_str_int(\"12,23,45,67,89\") == (12, 23, 45, 67, 89)",
        "num_ids": 1340,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 300,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    low = 0\n    high = len(a)\n    while low <= high:\n        mid = (low + high) // 2\n        if a[mid] >= x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    if a[low] < x:\n        a[low] = x\n    else:\n        a[low:low] = [x]\n    return low\n",
        "test": "assert     right_insertion(a=[1,3,5], x=1) == 0, \"the right insertion point is 0\"",
        "num_ids": 1163,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 10,
        "max_test_num": 10,
        "total_product": 260,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match_reg_regex_list = re.findall('(\\A[a-zA-Z0-9_]*$)', text)\n    match_reg_regex_list_sorted = sorted(match_reg_regex_list)\n    if len(match_reg_regex_list) == 0:\n        return None\n    if len(match_reg_regex_list) > 1:\n        return None\n    if len(match_reg_regex_list) == 1:\n        return match_reg_regex_list[0]\n    else:\n        return match_reg_regex_list[0] +'' + match_reg_regex_list[1]\n        \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has a an a followed by three 'b',\n    followed by an end 'b'.\n    '''\n    match_reg_regex_list = re.findall('(\\A[a-zA-Z0-9_]*$)', text)\n    match_reg_regex_list_sorted = sorted(match_reg_regex_list)\n    if len(match_reg_regex_list) == 0:\n        return None\n    if len(match_reg_regex_list) == 1:\n        return match_reg_regex_list[0]\n    elif len(match_reg_regex_list) > 1:\n        return None\n    elif len(match_reg_regex_list) == 2:\n        return match_reg_regex_list[0] +'' + match_reg_regex_list[1]\n    else:\n        return match_reg_regex_list[0] +'' + match_reg_regex_list[1] +'' + match_reg_regex_list[2]\n",
        "test": "assert 'a' in 'abcd'",
        "num_ids": 1303,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 19,
        "max_test_num": 3,
        "total_product": 340,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    try:\n        new_tuple = tuple(test_list)\n        new_tuple = tuple(map(int, new_tuple))\n    except ValueError:\n        new_tuple = tuple(test_str)\n    return new_tuple\n",
        "test": "assert     new_tuple(['a', 'b', 'c'], ['a', 'b', 'c']) == ('a', 'b', 'c')",
        "num_ids": 1716,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 13,
        "max_test_num": 6,
        "total_product": 320,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        if i % 2 == 0:\n            sum += i\n    return sum % 2 == 0\n",
        "test": "assert     even_position([1,3,5,7,9,11]) == True",
        "num_ids": 1149,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 18,
        "max_test_num": 3,
        "total_product": 270,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        if type(temp[i]) is tuple:\n            temp[i] = remove_nested(temp[i])\n    return tuple(temp)\n    \ndef remove_duplicates(test_tup):\n    '''\n    Write a function to remove any duplicate tuples from the given tuple.\n    '''\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        if type(temp[i]) is tuple:\n            temp[i] = tuple(sorted(set(temp[i])))\n    return tuple(temp)\n    \ndef remove_nested_duplicates(test_tup):\n    '''\n    Write a function to remove any duplicate tuples from the given tuple.\n    '''\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        if type(temp[i]) is tuple:\n            for j in range(len(temp[i])):\n                if type(temp[i][j]) is tuple:\n                    for k in range(len(temp[i][j])):\n                        if type(temp[i][j][k]) is tuple:\n                            if temp[i][j][k] not in temp[i]:\n                                temp[i].remove(temp[i][j][k])\n    return tuple(temp)\n",
        "test": "assert     remove_nested(tuple()) == tuple()",
        "num_ids": 1435,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 220,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    #using a loop to count the number of lists.\n    counter = 0\n    for i in input_list:\n        if isinstance(i, list):\n            counter += 1\n    return counter\n    \n    #def count_list(input_list):\n    #    '''\n    #    Write a python function to count the number of lists in a given number of lists.\n    #    '''\n    #    #using a loop to count the number of lists.\n    #    counter = 0\n    #    for i in input_list:\n    #        if isinstance(i, list):\n    #            counter += 1\n    #    return counter\n    #    \n    #    #def count_list(input_list):\n    #    #    '''\n    #    #    Write a python function to count the number of lists in a given number of lists.\n    #    #    '''\n    #    #    #using a loop to count the number of lists.\n    #    #    counter = 0\n    #    #    for i in input_list:\n    #    #        if isinstance(i, list):\n    #    #            counter += 1\n    #    #    return counter\n    #    #    \n    #    #    #def count_list(input_list):\n    #    #    #    '''\n    #    #    #    Write a python function to count the number of lists in a given number of lists.\n    #    #    #    '''\n    #    #    #    #using a loop to count the number of lists.\n    #    #    counter = 0\n    #    #    for i in input_list:\n    #    #        if isinstance(i, list):\n    #    #            counter += 1\n    #    #    return counter\n    #    #    \n    #    #    #def count_list(input_list):\n    #    #        '''\n    #    #        Write a python function to count the number of lists in a given number of lists.\n    #    #        '''\n    #    #    #    #using a loop to count the number of lists.\n    #    #    #    counter = 0\n    #    #    #    for i in input_list:\n    #    #    #        if isinstance(i, list):\n    #    #        #        counter += 1\n    #    #    #    return counter\n    #    #    #    \n    #    #    #    #def count_list(input_list):\n    #    #        '''\n    #    #        Write a python function to count the number of lists in a given number of lists.\n    #    #        '''\n    #    #        #    #using a loop to count the number of lists.\n    #    #        counter = 0\n    #    #        for i in input_list:\n    #    #            if isinstance(i, list):\n    #    #                counter += 1\n    #    #    #        return counter\n    #    #    #    #    \n    #    #    #    #    return counter\n    #    #    #    \n    #    #    #    #def count_list(input_list):\n    #    #        '''\n    #    #        Write a python function to count the number of lists in a given number of lists.\n    #    #        '''\n    #    #        #    #using a loop to count the number of lists.\n    #    #        counter = 0\n    #    #        for i in input_list:\n    #    #            if isinstance(i, list):\n    #    #                counter += 1\n    #    #        return counter\n    #    #        \n    #    #        #def count_list(input_list):\n    #    #            '''\n    #    #            Write a python function to count the number of lists in a given number of lists.\n    #    #            '''\n    #    #            #    #using a loop to count the number of lists.\n    #    #            counter = 0\n    #    #            for i in input_list:\n    #    #                if isinstance(i, list):\n    #    #                    counter += 1\n    #    #            return counter\n    #    #            \n    #    #            #def count_list(input_list):\n    #    #            #    '''\n    #    #            #        Write a python function to count the number of lists in a given number of lists.\n    #    #            #        '''\n    #    #            #        #using a loop to count the number of lists.\n    #    #            counter = 0\n    #    #            for i in input_list:\n    #    #                if isinstance(i, list):\n    #    #                    counter += 1\n    #    #            return counter\n    #    #            \n    #    #            #def count_list(input_list):\n    #    #                '''\n    #    #                Write a python function to count the number of lists in a given number of lists.\n    #    #                '''\n    #    #                #    #using a loop to count the number of lists.\n    #    #                counter = 0\n    #    #                for i in input_list:\n    #    #                    if isinstance(i, list):\n    #    #                        counter += 1\n    #    #                return counter\n    #    #                \n    #    #                #def count_list(input_list):\n    #    #                    '''\n    #    #                    Write a python function to count the number of lists in a given number of lists.\n    #    #                    '''\n    #    #                    #    #using a loop to count the number of lists.\n    #    #                    counter = 0\n    #    #                    for i in input_list:\n    #    #                        if isinstance(i, list):\n    #    #                            counter += 1\n    #    #                    return counter\n    #    #                    \n    #    #                    #def count_list(input_list):\n    #    #                        '''\n    #    #                        Write a python function to count the number of lists in a given number of lists.\n    #    #                        '''\n    #    #                        #    #using a loop to count the number of lists.\n    #    #                        counter = 0\n    #    #                        for i in input_list:\n    #    #                            if isinstance(i, list):\n    #    #                                counter += 1\n    #    #                        return counter\n    #    #                    \n    #    #                        #def count_list(input_list):\n    #    #                            '''\n    #    #                            Write a python function to count the number of lists in a given number of lists.\n    #    #                            '''\n    #    #                            #    #using a loop to count the number of lists.\n    #    #                            counter = 0\n    #    #                            for i in input_list:\n    #    #                                if isinstance(i, list):\n    #    #                                    counter += 1\n    #    #                            return counter\n    #    #                            \n    #    #                            #def count_list(input_list):\n    #    #                                '''\n    #    #                                Write a python function to count the number of lists in a given number of lists.\n    #    #                                '''\n    #    #                                #    #using a loop to count the number of lists.\n    #    #                                counter = 0\n    #    #                                for i in input_list:\n    #    #                                    if isinstance(i, list):\n    #    #                                        counter += 1\n    #    #                                return counter\n    #    #                            \n    #    #                            #def count_list(input_list):\n    #    #                                '''\n    #    #                                Write a python function to count the number of lists in a given number of lists.\n    #    #                                '''\n    #    #                                #    #using a loop to count the number of lists.\n    #    #                                counter = 0\n    #    #                                for i in input_list:\n    #    #                                    if isinstance(i, list):\n    #    #                                        counter += 1\n    #    #                                return counter\n    #    #                            \n    #    #                            #def count_list(input_list):\n    #    #                                '''\n    #    #                                Write a python function to count the number of lists in a given number of lists.\n    #    #                                '''\n    #    #                                #    #using a loop to count the number of lists.",
        "test": "assert     count_list([]) == 0, \"The count_list() function should return 0 for an empty list\"",
        "num_ids": 2704,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 210,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    left,right = 0,len(arr)-1\n    while right>=left:\n        mid = left + (right-left)//2\n        if arr[mid] == x:\n            return mid\n        if arr[mid] > x:\n            right = mid\n        else:\n            left = mid + 1\n    return -1\n",
        "test": "assert     last([1,2,3,4,5,6],5)==4",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 794,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 290,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern_starta_endb = r'\\b(a)(b)\\b'\n    result = re.findall(pattern_starta_endb, text)\n    return result\n",
        "test": "assert     text_starta_endb(\"Hi Hi Hello\") == 'Hi Hi Hi Hello'",
        "num_ids": 3394,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 2,
        "max_test_num": 6,
        "total_product": 210,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n",
        "test": "assert     return_sum({'a': 1, 'b': 2, 'd': 3}) == 6,'return_sum does not work!'",
        "num_ids": 830,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 260,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if (l % 2 == 1) and (r % 2 == 0):\n            sum = sum + l\n        elif (l % 2 == 0) and (r % 2 == 1):\n            sum = sum + r\n        elif (l % 2 == 1) and (r % 2!= 0):\n            sum = sum + (r - l)\n        l = l + 1\n        r = r - 1\n    return sum\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 2750,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 10,
        "max_test_num": 8,
        "total_product": 280,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n",
        "test": "assert     _sum([1,2,3,4,5,6,7,8,9,10]) == 55",
        "num_ids": 743,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 340,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    res = 0\n    while n:\n        res += n&1\n        n >>= 1\n    return res\n",
        "test": "assert     left_rotate(1, 0) == 1",
        "num_ids": 3036,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 12,
        "max_test_num": 8,
        "total_product": 310,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    pattern = '\\s+'\n    return re.sub(pattern, '', text)\n",
        "test": "assert         remove_all_spaces(\"\") == \"\"",
        "num_ids": 814,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 330,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    x=str(x)\n    y=str(y)\n    z=str(z)\n    for i in range(0,3):\n        if int(x)==int(y) and int(z)==int(x):\n            count+=1\n    return count\n",
        "test": "assert     test_three_equal(0, 1, 0) == 0",
        "num_ids": 3173,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 9,
        "total_product": 160,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n=len(arr)\n    if n==1:\n        return 0\n    elif n==2:\n        return 1\n    elif n==3:\n        return 1\n    else:\n        rotations=0\n        for i in range(0,n):\n            rotations=rotations+count_rotation(arr[i:n:2])\n        return rotations\n",
        "test": "assert     count_rotation([]) == 0",
        "num_ids": 1038,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 23,
        "max_test_num": 10,
        "total_product": 350,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # Time to look at some of the math\n    # I think we need to start by looking at all the squares and then checking if the square is perfect square.\n    if n <= 0 :\n        return False\n    elif n == 1 :\n        return True\n    else :\n        sqrt = int(math.sqrt(n))\n        for i in range(2, int(sqrt**0.5)+1) :\n            if n % i == 0 :\n                return False\n        return True\n",
        "test": "assert     is_perfect_square(99999999999999999) is False ",
        "num_ids": 2845,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 14,
        "max_test_num": 7,
        "total_product": 280,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    if sum % 2 == 0:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_product_even([3,2,1]) == False",
        "num_ids": 1125,
        "indeed": false
    },
    {
        "number": 805,
        "max_answer_num": 4,
        "max_test_num": 6,
        "total_product": 230,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) < 2:\n        return lists\n    else:\n        sorted_list = sorted(lists, reverse=True)\n        sum_of_elements = sorted_list[0]\n        result_list = []\n        for i in range(len(lists)):\n            sum_of_elements += lists[i]\n            if sum_of_elements == sorted_list[0]:\n                result_list.append(lists[i])\n        return result_list\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 1775,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 280,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str[0].isupper():\n        return max(test_str, key=len)\n    else:\n        return max(test_str)\n",
        "test": "assert     max_run_uppercase(\"Mundo de cima\") == \"M\" and max_run_uppercase(\"Mundo de cima\") == \"M\"",
        "num_ids": 2904,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 5,
        "max_test_num": 9,
        "total_product": 240,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n",
        "test": "assert first_odd([1, 2, 3, 4, 5]), '1,2,3,4,5'",
        "num_ids": 4711,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 12,
        "max_test_num": 6,
        "total_product": 310,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) < K:\n        return False\n    else:\n        for i in range(len(test_tup)):\n            if K <= i+1:\n                return False\n            else:\n                if test_tup[i] not in test_tup[i+1:K+1]:\n                    return False\n    return True\n",
        "test": "assert     check_K([1, 2, 3, 4, 5], 0) == False",
        "num_ids": 1346,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 19,
        "max_test_num": 6,
        "total_product": 360,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert         check_smaller([1, 2, 3, 5], [5, 3, 2, 1]) == False",
        "num_ids": 1504,
        "indeed": true
    }
]