[
    {
        "number": 2,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_elements = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] in test_tup2:\n            test_elements.append(test_tup1[i])\n    return test_elements\n",
        "test": "assert     similar_elements([1, 2, 3, 5, 6, 7, 8, 9, 10], [1, 2, 3, 7, 8, 9, 10, 11, 12])",
        "num_ids": 977,
        "indeed": true
    },
    {
        "number": 3,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if(n%2 == 0 and n>0):\n        return False\n    if(n%2 == 0 and n==1):\n        return False\n    if(n%2 == 1 and n>1):\n        return False\n    if(n%5 == 0 and n>0):\n        return False\n    if(n%5 == 0 and n==1):\n        return False\n    if(n%5 == 1 and n>1):\n        return False\n    if(n%7 == 0 and n>0):\n        return False\n    if(n%7 == 0 and n==1):\n        return False\n    if(n%7 == 1 and n>1):\n        return False\n    if(n%11 == 0 and n>0):\n        return False\n    if(n%11 == 0 and n==1):\n        return False\n    if(n%11 == 1 and n>1):\n        return False\n    if(n%61 == 0 and n>0):\n        return False\n    if(n%61 == 0 and n==1):\n        return False\n    if(n%61 == 1 and n>1):\n        return False\n    if(n%91 == 0 and n>0):\n        return False\n    if(n%91 == 0 and n==1):\n        return False\n    if(n%91 == 1 and n>1):\n        return False\n    if(n%143 == 0 and n>0):\n        return False\n    if(n%143 == 0 and n==1):\n        return False\n    if(n%143 == 1 and n>1):\n        return False\n    if(n%541 == 0 and n>0):\n        return False\n    if(n%541 == 0 and n==1):\n        return False\n    if(n%541 == 1 and n>1):\n        return False\n    if(n%741 == 0 and n>0):\n        return False\n    if(n%741 == 0 and n==1):\n        return False\n    if(n%741 == 1 and n>1):\n        return False\n    if(n%941 == 0 and n>0):\n        return False\n    if(n%941 == 0 and n==1):\n        return False\n    if(n%941 == 1 and n>1):\n        return False\n    if(n%1141 == 0 and n>0):\n        return False\n    if(n%1141 == 0 and n==1):\n        return False\n    if(n%1141 == 1 and n>1):\n        return False\n    if(n%6141 == 0 and n>0):\n        return False\n    if(n%6141 == 0 and n==1):\n        return False\n    if(n%6141 == 1 and n>1):\n        return False\n    if(n%9141 == 0 and n>0):\n        return False\n    if(n%9141 == 0 and n==1):\n        return False\n    if(n%9141 == 1 and n>1):\n        return False\n    if(n%14341 == 0 and n>0):\n        return False\n    if(n%14341 == 0 and n==1):\n        return False\n    if(n%14341 == 1 and n>1):\n        return False\n    if(n%54141 == 0 and n>0):\n        return False\n    if(n%54141 == 0 and n==1):\n        return False\n    if(n%54141 == 1 and n>1):\n        return False\n    if(n%74141 == 0 and n>0):\n        return False\n    if(n%74141 == 0 and n==1):\n        return False\n    if(n%74141 == 1 and n>1):\n        return False\n    if(n%94141 == 0 and n>0):\n        return False\n    if(n%94141 == 0 and n==1):\n        return False\n    if(n%94141 == 1 and n>1):\n        return False\n    if(n%114141 == 0 and n>0):\n        return False\n    if(n%114141 == 0 and n==1):\n        return False\n    if(n%114141 == 1 and n>1):\n        return False\n    if(n%614141 == 0 and n>0):\n        return False\n    if(n%614141 == 0 and n==1):\n        return False\n    if(n%614141 == 1 and n>1):\n        return False\n    if(n%914141 == 0 and n>0):\n        return False\n    if(n%914141 == 0 and n==1):\n        return False\n    if(n%914141 == 1 and n>1):\n        return False\n    if(n%1434141 == 0 and n>0):\n        return False\n    if(n%1434141 == 0 and n==1):\n        return False\n    if(n%1434141 == 1 and n>1):\n        return False\n    if(n%5414141 == 0 and n>0):\n        return False\n    if(n%5414141 == 0 and n==1):\n        return False\n    if(n%5414141 == 1 and n>1):\n        return False\n    if(n%7414141 == 0 and n>0):\n        return False\n    if(n%7414141 == 0 and n==1):\n        return False\n    if(n%7414141 == 1 and n>1):\n        return False\n    if(n%914141 == 0 and n>0):\n        return False\n    if(n%914141 == 0 and n==1):\n        return False\n    if(n%914141 == 1 and n>1):\n        return False\n    if(n%1434141 == 0 and n>0):\n        return False\n    if(n%1434141 == 0 and n==1):\n        return False\n    if(n%1434141 == 1 and n>1):\n        return False\n    if(n%5414141 == 0 and n>0):\n        return False\n    if(n%5414141 == 0 and n==1):\n        return False\n    if(n%5414141 == 1 and n>1):\n        return False\n    if(n%7414141 == 0 and n>0):\n        return False\n    if(n%7414141 == 0 and n==1):\n        return False\n    if(n%7414141 == 1 and n>1):\n        return False\n    if(n%9414141 == 0 and n>0):\n        return False\n    if(n%9414141 == 0 and n==1):\n        return False\n    if(n%9414141 == 1 and n>1):\n        return False\n    if(n%11414141 == 0 and n>0):\n        return False\n    if(n%11414141 == 0 and n==1):\n        return False\n    if(n%11414141 == 1 and n>1):\n        return False\n    if(n%61414141 == 0 and n>0):\n        return False\n    if(n%61414141 == 0 and n==1):\n        return False\n    if(n%61414141 == 1 and n>1):\n        return False\n    if(n%91414141 == 0 and n>0):\n        return False\n    if(n%91414141 == 0 and n==1):\n        return False\n    if(n%91414141 == 1 and n>1):\n        return False\n    if(n%143414141 == 0 and n>0):\n        return False\n    if(n%143414141 == 0 and n==1):\n        return False\n    if(n%143414141 == 1 and n>1):\n        return False\n    if(n%541414141 == 0 and n>0):\n        return False\n    if(n%541414141 == 0 and n==1):\n        return False\n    if(n%541414141 == 1 and n>1):\n        return False\n    if(n%741414141 == 0 and n>0):\n        return False\n    if(n%741414141 == 0 and n==1):\n        return False\n    if(n%741414141 == 1 and n>1):\n        retur",
        "test": "assert     is_not_prime(2) is False",
        "num_ids": 2445,
        "indeed": false
    },
    {
        "number": 4,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = []\n    for i in range(len(nums)):\n        heapq.heappush(heap,nums[i])\n    l = len(heap)\n    for i in range(l-1,0,-1):\n        heapq.heappop(heap)\n    return [nums[i] for i in range(l)]\n    \ndef heap_queue_largest_2(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, sorted in ascending order, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    heapq.heapify(heap)\n    l = len(heap)\n    for i in range(l-1,0,-1):\n        heapq.heappop(heap)\n    return [nums[i] for i in range(l)]\ndef heap_queue_largest_3(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, sorted in ascending order, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    heapq.heapify(heap)\n    l = len(heap)\n    for i in range(l-1,0,-1):\n        heapq.heappop(heap)\n    return [nums[i] for i in range(l)]\ndef heap_queue_largest_4(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, sorted in ascending order, sorted in decending order, returned in descending order.\n    '''\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    heapq.heapify(heap)\n    l = len(heap)\n    for i in range(l-1,0,-1):\n        heapq.heappop(heap)\n    return [nums[i] for i in range(l)]\n",
        "test": "assert     heap_queue_largest([], 0) == []",
        "num_ids": 890,
        "indeed": false
    },
    {
        "number": 6,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x>= 2**32 and x <= 2**32 - 2**32:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_Power_Of_Two (0)",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 7,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    chars = text.lower()\n    print(\"\\n\")\n    print(\"Find all words which are at least 4 characters long in the text.\")\n    print(\"\")\n    print(f\"{chars}: \", end=\"\")\n    for char in chars:\n        if len(char) >= 4:\n            print(char, end=\"\")\n    print()\n    return [i for i in range(len(chars)) if len(chars) - i >= 4]\ndef find_char_short(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    chars = text.lower()\n    print(\"\\n\")\n    print(\"Find all words which are at least 4 characters short in the text.\")\n    print(\"\")\n    print(f\"{chars}: \", end=\"\")\n    for char in chars:\n        if len(char) <= 4:\n            print(char, end=\"\")\n    print()\n    return [i for i in range(len(chars)) if len(chars) - i <= 4]\ndef find_char_long_numeric(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    chars = text.lower()\n    print(\"\\n\")\n    print(\"Find all words which are at least 4 characters long in the text.\")\n    print(\"\")\n    print(f\"{chars}: \", end=\"\")\n    for char in chars:\n        if char.isnumeric():\n            print(char, end=\"\")\n    print()\n    return [i for i in range(len(chars)) if char.isnumeric()]\ndef find_char_short_numeric(text):\n    '''\n    Write a function to find all words which are at least 4 characters short in a string.\n    '''\n    chars = text.lower()\n    print(\"\\n\")\n    print(\"Find all words which are at least 4 characters short in the text.\")\n    print(\"\")\n    print(f\"{chars}: \", end=\"\")\n    for char in chars:\n        if char.isnumeric():\n            print(char, end=\"\")\n    print()\n    return [i for i in range(len(chars)) if char.isnumeric()]\n",
        "test": "assert     find_char_long('some program')",
        "num_ids": 629,
        "indeed": false
    },
    {
        "number": 8,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        square = num**2\n        squares.append(square)\n    return squares\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     square_nums([1, 2, 3, 4]) == [1, 4, 9, 16], 'incorrect square_nums'",
        "num_ids": 2523,
        "indeed": true
    },
    {
        "number": 9,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # check if the string is in the list\n    if str in list(map(str.__ne__, list(map(str.__ne__, list(set(str)))))): \n        return 0\n    else: \n        return 1\n",
        "test": "assert     isinstance(find_Rotations('rotate the letter a to z'), int), 'find_Rotations(str) should return an integer'",
        "num_ids": 775,
        "indeed": false
    },
    {
        "number": 11,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    occ = 0\n    for c in s:\n        if c == ch:\n            occ = occ + 1\n        else:\n            occ = 0\n            if occ == 1:\n                return s[:0] + s[1:].strip()\n            elif occ == 2:\n                return s[:-1] + s[2:].strip()\n    return s\n",
        "test": "assert     remove_Occ('', '3') == ''",
        "num_ids": 465,
        "indeed": false
    },
    {
        "number": 12,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    temp_matrix = [[0 for col in range(len(M[0]))] for row in range(len(M))]\n    for row in range(len(M)):\n        for col in range(len(M[0])):\n            temp_matrix[row][col] = M[row][col]\n    temp_matrix = sorted(temp_matrix, key = lambda x: x[0])\n    for row in range(len(M)):\n        for col in range(len(M[0])):\n            M[row][col] = temp_matrix[row][col][1]\n",
        "test": "assert     sort_matrix([[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 1, 1]]) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [1, 1, 1]]",
        "num_ids": 1428,
        "indeed": false
    },
    {
        "number": 14,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = 4*h*b*l**2\n    return Volume\n",
        "test": "assert     find_Volume(0,3,0) == 0.0",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 16,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    \n    text = text.lower()\n    regex = re.compile(r'[a-z]')\n    \n    if regex.search(text):\n        return True\n    else:\n        return False\n",
        "test": "assert     text_lowercase_underscore('') == False",
        "num_ids": 723,
        "indeed": false
    },
    {
        "number": 17,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    sq = a**2\n    return sq\n",
        "test": "assert     square_perimeter(5) == 25",
        "num_ids": 251,
        "indeed": false
    },
    {
        "number": 18,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    #create a list of chars \n    list = []\n    for c in string:\n        if c in list:\n            continue\n        list.append(c)\n    return list\n",
        "test": "assert     str_to_list('ab') == ['a', 'b']",
        "num_ids": 2649,
        "indeed": false
    },
    {
        "number": 19,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for x in arraynums:\n        if x in arraynums:\n            duplicate = duplicate or x!= x\n            \n    return duplicate\n    \n",
        "test": "assert     test_duplicate([2,1,3,4,7,9,9,9,9]) == False",
        "num_ids": 440,
        "indeed": false
    },
    {
        "number": 20,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return x in [0,1]\n",
        "test": "assert is_woodall(3) is False ",
        "num_ids": 2381,
        "indeed": false
    },
    {
        "number": 56,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = \"\"\n    if num < 0:\n        num = abs(num)\n    else:\n        pass\n    for i in str(num):\n        rev_num += i\n    if len(rev_num) % 2 == 0:\n        rev_num = rev_num[::-1]\n        if int(rev_num) == num:\n            return True\n        else:\n            return False\n    else:\n        return False\n",
        "test": "assert rev(0) == 0",
        "num_ids": 2435,
        "indeed": false
    },
    {
        "number": 57,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    l = len(arr)\n    i = 0\n    max = arr[0]\n    if len(arr) == 1 :\n        return arr\n    for j in range(1, l):\n        if arr[j] > max:\n            max = arr[j]\n            i = j\n    return max, i\n",
        "test": "assert     find_Max_Num([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10",
        "num_ids": 714,
        "indeed": false
    },
    {
        "number": 58,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x > y):\n        return 1\n    elif(x < y):\n        return -1\n    else:\n        return 0\n",
        "test": "assert     opposite_Signs(3,1) == 1",
        "num_ids": 524,
        "indeed": false
    },
    {
        "number": 59,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    num = int(n)\n    dnum = int(num / 2)\n    while dnum!= 1:\n        if num % dnum == 0:\n            return False\n        num = num / dnum\n        dnum = int(num / 2)\n    return True\n    \n",
        "test": "assert     is_octagonal(25), \"fonksion is incorrect\"",
        "num_ids": 761,
        "indeed": false
    },
    {
        "number": 61,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # create an empty dictionary to store the substring length and its count\n    substring_dictionary = {}\n    # generate all substrings that have the same length with the given sum\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            # if the string is not empty then add the length of the substring to the dictionary\n            if s[i:j]!= \"\":\n                if s[i:j] in substring_dictionary.keys():\n                    # increment the count of the number of substrings with the given length\n                    substring_dictionary[s[i:j]] = substring_dictionary[s[i:j]] + 1\n                else:\n                    # store the new substring\n                    substring_dictionary[s[i:j]] = 1\n    # return the number of substrings with the given sum\n    return len(substring_dictionary)\n",
        "test": "assert     count_Substrings('112') == 2",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 62,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 90,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # Solution 1:\n    # Smallest = min(xs)\n    # Smallest_idx = xs.index(Smallest)\n    # return Smallest\n    # Solution 2:\n    # Smallest_idx = min(xs, key=xs.get)\n    return min(xs)\n",
        "test": "assert     smallest_num([1, 2, 3]) == 1",
        "num_ids": 577,
        "indeed": true
    },
    {
        "number": 63,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n    elif len(test_list) == 2:\n        return test_list[0] - test_list[1]\n",
        "test": "assert     max_difference([]) == 0",
        "num_ids": 578,
        "indeed": false
    },
    {
        "number": 64,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    if len(subjectmarks)>=2:\n        subjectmarks.sort(key=lambda x: x[1])\n        subjectmarks.sort(key=lambda x: x[0])\n        subjectmarks.sort(key=lambda x: x[1])\n        return subjectmarks\n    else:\n        print('Invalid input.')\n",
        "test": "assert     subject_marks(subjectmarks_list) == subjectmarks_list[:4]",
        "num_ids": 504,
        "indeed": true
    },
    {
        "number": 65,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n",
        "test": "assert     recursive_list_sum([]) == 0",
        "num_ids": 661,
        "indeed": false
    },
    {
        "number": 66,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    if list == []:\n        return 0\n    else:\n        count = 0\n        for i in list:\n            if i > 0:\n                count = count + 1\n        return count\n    \nprint(pos_count([1,2,3,4,5]))\nprint(pos_count([0,1,2,3,4]))\nprint(pos_count([0,1,3,5]))\nprint(pos_count([0,1,3,5,7]))",
        "test": "assert     pos_count([]) == 0",
        "num_ids": 472,
        "indeed": true
    },
    {
        "number": 67,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n<=1:\n        return 1\n    elif n%2==0:\n        return bell_number(n//2)\n    else:\n        return bell_number((n+1)/2) + bell_number(n//2)\n",
        "test": "assert     bell_number(3) == 2",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 68,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A.sort()\n    n = len(A)\n    for i in range(n-1): \n        if A[i] > A[i+1]: \n            return False\n    return True\n",
        "test": "assert     is_Monotonic([1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6]) == True, \"is_Monotonic([1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 5, 6]) is False\"",
        "num_ids": 595,
        "indeed": false
    },
    {
        "number": 69,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    if len(s) < 1:\n        return True\n    if s in l:\n        return True\n    return is_sublist(l[1:],s[1:])\n",
        "test": "assert     is_sublist([1, 2, 3], [1]) == True",
        "num_ids": 638,
        "indeed": false
    },
    {
        "number": 70,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    if len(Input) == 0:\n        return True\n    if len(Input) == 1:\n        return Input[0] == Input[0]\n    if len(Input) == 2:\n        return Input[0] == Input[1]\n    for i in range(2,len(Input),2):\n        if Input[i] == Input[i-1]:\n            return False\n    return True\n",
        "test": "assert     find_equal_tuple([(1, 2), (3, 4), (5, 6)]) == True, \"find_equal_tuple([(1, 2), (3, 4), (5, 6)]) returns True\"",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 71,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    for i in range(0, n - 1):\n        for j in range(0, n - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n",
        "test": "assert     comb_sort([4,3,2,1]) == [1,2,3,4], \"the input is not correct\"",
        "num_ids": 661,
        "indeed": true
    },
    {
        "number": 72,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i = 0\n    j = 0\n    k = 0\n",
        "test": "assert ",
        "num_ids": 689,
        "indeed": false
    },
    {
        "number": 74,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    \n    # code goes here\n    \n    # code goes here\n    \n    return True\n",
        "test": "assert     is_samepatterns([(0, 0), (0, 0), (0, 0)], [(0, 0), (1, 0), (0, 1)]) == True, \"is_samepatterns\"",
        "num_ids": 1559,
        "indeed": false
    },
    {
        "number": 75,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result_tuples = []\n    for tuple_ in test_list:\n        result_tuples += [tuple_ for tuple_ in tuple_ if tuple_ % K == 0]\n    return result_tuples\n",
        "test": "assert     find_tuples([], 0) == []",
        "num_ids": 951,
        "indeed": false
    },
    {
        "number": 77,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    def is_divisible(n):\n        if n % 11 == 0:\n            return True\n        else:\n            return False\n    if n % 11 == 0:\n        return True\n    else:\n        return False\ndef check_Div_11(n):\n    '''\n    Check whether a number is divisible by 11.\n    '''\n    if is_Divisible(n):\n        print(f'{n} is divisible by 11.')\n    else:\n        print(f'{n} is not divisible by 11.')\n    \n    ",
        "test": "assert     is_Diff(4) == False",
        "num_ids": 428,
        "indeed": true
    },
    {
        "number": 79,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s=s.replace(\" \",\"\")\n    s=s.replace(\"\\n\",\"\")\n    if len(s)%2==0:\n        return True\n    else:\n        return False\n    \ndef last_word(s): \n    '''\n    Write a python function to print the last word of the string.\n    '''\n    s=s.replace(\" \",\"\")\n    s=s.replace(\"\\n\",\"\")\n    if s[-1]=='e' or s[-1]=='E':\n        return s[-1]\n    else:\n        return False\n",
        "test": "assert     word_len('word')",
        "num_ids": 430,
        "indeed": false
    },
    {
        "number": 80,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n < 3:\n        return n\n    else:\n        if n == 3:\n            return 5\n        else:\n            if n % 3 == 0:\n                return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n            elif n % 3 == 1:\n                return tetrahedral_number(n-1) + tetrahedral_number(n-2)\n            elif n % 3 == 2:\n                return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n",
        "test": "assert     tetrahedral_number(1) == 1",
        "num_ids": 4630,
        "indeed": false
    },
    {
        "number": 82,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (math.pi*(r**3))\n",
        "test": "assert volume_sphere(0) == 0.0",
        "num_ids": 1439,
        "indeed": false
    },
    {
        "number": 83,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    char_set = set(strr)\n    \n    sum = 0\n    \n    for i in char_set:\n        sum += ord(i) % 26\n        \n    return sum % 26\n    \ndef get_sum(strr):\n    '''\n    Write a python function to find the sum of the characters in a given string.\n    '''\n    sum = 0\n    \n    for i in strr:\n        sum += get_Char(i)\n    \n    return sum % 26\n",
        "test": "assert ",
        "num_ids": 417,
        "indeed": false
    },
    {
        "number": 84,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    if n==0: \n        return 0\n    if n==1: \n        return 1\n    \n    return sequence(n-1) + sequence(n-2)\n",
        "test": "assert sequence(1) == 1",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 85,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4/3 * math.pi * r ** 3)\n",
        "test": "assert     surfacearea_sphere(3) == 6",
        "num_ids": 150,
        "indeed": false
    },
    {
        "number": 86,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n<2:\n        return n\n    else:\n        return n-1+(n-1)%6\n",
        "test": "assert     centered_hexagonal_number(1) == 1",
        "num_ids": 1028,
        "indeed": false
    },
    {
        "number": 87,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #Create a key_value pair list\n    key_value = []\n    for k,v in dict1.items():\n        key_value.append((k, v))\n    for k, v in dict2.items():\n        key_value.append((k, v))\n    for k, v in dict3.items():\n        key_value.append((k, v))\n    #Create a new dictionary\n    dic = {}\n    for i in range(len(key_value)):\n        dic[key_value[i][0]] = key_value[i][1]\n    return dic\n",
        "test": "assert     merge_dictionaries_three({}, {}, {}) == {}",
        "num_ids": 1537,
        "indeed": false
    },
    {
        "number": 88,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    if len(list1) == 0:\n        return {}\n    else:\n        return collections.Counter(list1)\n",
        "test": "assert     freq_count([1,2,1,3,5,2,6]) == {1: 2, 2: 2, 3: 1, 5: 1, 6: 1}",
        "num_ids": 674,
        "indeed": true
    },
    {
        "number": 89,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 10:\n        return N\n",
        "test": "assert     closest_num(1) == 1",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 90,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    if len(list1)==0:\n        return 0\n    elif len(list1)==1:\n        return 1\n    elif len(list1)==2:\n        return 2\n    elif len(list1)>2:\n        return max(len_log(list1[:2]),len_log(list1[2:]))\n    else:\n        return 1\n",
        "test": "assert     len_log([]) == 0",
        "num_ids": 472,
        "indeed": false
    },
    {
        "number": 91,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    str1_index = 0\n    str2_index = 0\n    str1_length = len(str1)\n    str2_length = len(sub_str)\n    str1_set = set(str1)\n    str2_set = set(sub_str)\n    while(str1_index < str1_length and str2_index < str2_length):\n        str1_char = str1[str1_index]\n        str2_char = sub_str[str2_index]\n        if(str1_char == str2_char):\n            str1_index += 1\n            str2_index += 1\n        else:\n            str1_index += 1\n    return str1_index < str1_length and str2_index < str2_length\n",
        "test": "assert     find_substring(\"abcde\", \"cdeab\") == False",
        "num_ids": 1043,
        "indeed": false
    },
    {
        "number": 92,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n <= 10: return True\n    if n <= 100: return False\n    if n <= 1000: return True\n    if n <= 100000: return False\n",
        "test": "assert     is_undulating(10), \"is_undulating(10) should be False\"",
        "num_ids": 408,
        "indeed": false
    },
    {
        "number": 93,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    try:\n        a = int(a)\n        b = int(b)\n        if b < 0:\n            raise Exception('Please enter a positive number')\n        return pow(a,b)\n    except Exception as e:\n        print(e)\n        return 'Please enter a number!'\n    \ndef fibonacci(n):\n    '''\n    Function to return the value of fibonacci sequence up to 'n' numbers.\n    '''\n    if type(n)!= int:\n        print('Please enter a positive number')\n    elif n < 0:\n        print('Please enter a positive number')\n    elif n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n",
        "test": "assert     power(1,2) == 1",
        "num_ids": 299,
        "indeed": true
    },
    {
        "number": 94,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    minimum=test_list[0]\n    for i in range(0, len(test_list)):\n        if test_list[i][1] < minimum[1]:\n            minimum=test_list[i]\n    return minimum[0]\n",
        "test": "assert     index_minimum([('a',2),('b',3)]) == 'a'",
        "num_ids": 2594,
        "indeed": true
    },
    {
        "number": 95,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    # Create a for loop.\n    for item in lst:\n        # Using len() to find the length of the list.\n        length = len(item)\n        # Print the length of the list.\n        print('Length of the item is :',length)\n    return(length)\n",
        "test": "assert     (Find_Min_Length([[7,5,3], [2,5,1], [4,3,4], [6,7,8]]) == 3), \"Find_Min_Length() should return 3.\"",
        "num_ids": 684,
        "indeed": false
    },
    {
        "number": 96,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    n_divisors = 0\n    for i in range(1, int(n**0.5)+1):\n        if n%i==0:\n            n_divisors+=1\n            if n//i==i:\n                n_divisors+=1\n    return n_divisors\n",
        "test": "assert     divisor(15) == 2",
        "num_ids": 514,
        "indeed": false
    },
    {
        "number": 97,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in freq_dict:\n                freq_dict[list1[i][j]] = 1\n            else:\n                freq_dict[list1[i][j]] += 1\n",
        "test": "assert     frequency_lists([[1, 2, 3], [1, 2, 1], [1, 1, 2], [2, 2]]) == {1: 2, 2: 1}",
        "num_ids": 984,
        "indeed": false
    },
    {
        "number": 98,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    i = 0\n    while i < len(numbers):\n        numbers[i] *= numbers[i]\n        i += 1\n    return numbers\n",
        "test": "assert     multiply_num([]) == 0",
        "num_ids": 432,
        "indeed": false
    },
    {
        "number": 99,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    bin_num = bin(n) \n    return bin_num[2:] \n    \ndef binary_to_decimal(s): \n    '''\n    Write a function to convert a binary string to its decimal equivalent, represented as a string with no leading zeros.\n    '''\n    num = 0\n    for i in range(len(s)): \n        num += int(s[i]) * 2 ** (len(s) - 1 - i)\n    return num\n",
        "test": "assert     decimal_to_binary(1) == '1'",
        "num_ids": 465,
        "indeed": true
    },
    {
        "number": 100,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    i = -1\n    j = len(s) - 1\n    while j >= i:\n        mid = (j + i) // 2\n        if s[mid] == s[mid + 1]:\n            return s[mid]\n        elif s[mid] < s[mid + 1]:\n            i = mid + 1\n        else:\n            j = mid\n    return num\n",
        "test": "assert     next_smallest_palindrome(1) == '1'",
        "num_ids": 710,
        "indeed": false
    },
    {
        "number": 101,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # Check base case\n    if len(arr) == 0:\n        return -1\n    \n    # If the index is out of range, then return -1\n    if k > len(arr):\n        return -1\n    \n    # Return the index\n    return arr[k-1]\n",
        "test": "assert     (kth_element([4,5,6,7,8,9,10], 0) == 4) == False",
        "num_ids": 793,
        "indeed": true
    },
    {
        "number": 102,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_case = \"\"\n    for i in word:\n        if i.isalnum():\n            camel_case += i.lower()\n        elif i in ('_', '-', '+', '.', ','):\n            camel_case += i\n        elif i =='':\n            camel_case += '_'\n    return camel_case\n",
        "test": "assert     snake_to_camel(\"TEST\") == 'test'",
        "num_ids": 759,
        "indeed": false
    },
    {
        "number": 103,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Set the base case\n    if m == 1:\n        return n\n    elif n == 1:\n        return 1\n    else:\n        return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n",
        "test": "assert     eulerian_num(1, 1) == 1",
        "num_ids": 1124,
        "indeed": false
    },
    {
        "number": 104,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    length = len(input_list)\n    for i in range(length):\n        for j in range(length - i - 1):\n            if input_list[j][1] < input_list[j + 1][1]:\n                input_list[j], input_list[j + 1] = input_list[j + 1], input_list[j]\n    return input_list\n",
        "test": "assert         sort_sublists([['@', '#', '#', '#', '#', '#', '#', '#', '#']]) == [['@', '#', '#', '#', '#', '#', '#', '#', '#']]",
        "num_ids": 1084,
        "indeed": false
    },
    {
        "number": 105,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([elem for elem in lst if elem])\n",
        "test": "assert         count([1, 0, 1]) == 2, 'no true boolean'",
        "num_ids": 528,
        "indeed": true
    },
    {
        "number": 106,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    temp_list = []\n    temp_tup = []\n    for item in test_list:\n        temp_list.append(item)\n    for item in test_tup:\n        temp_tup.append(item)\n    return temp_list, temp_tup\n",
        "test": "assert add_lists([1,2],(3,4))",
        "num_ids": 582,
        "indeed": false
    },
    {
        "number": 108,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted([num1,num2,num3])\n",
        "test": "assert         merge_sorted_list(1,2,3) == [1,2,3]",
        "num_ids": 1538,
        "indeed": false
    },
    {
        "number": 109,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    cnt=0\n    for i in range(len(s)):\n        if s[i] % 2 == 1:\n            cnt += 1\n    return cnt \n",
        "test": "assert ",
        "num_ids": 544,
        "indeed": false
    },
    {
        "number": 111,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nestedlist = sorted(nestedlist)\n    common_elements = []\n    for list in nestedlist:\n        if len(list) > 1:\n            common_elements.append(list[0])\n    return common_elements\n",
        "test": "assert     common_in_nested_lists([]) == []",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 113,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n    ",
        "test": "assert     check_integer(12) == True",
        "num_ids": 366,
        "indeed": true
    },
    {
        "number": 115,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i) > 0:\n            return False\n    return True\n    ",
        "test": "assert     empty_dit([]) is True",
        "num_ids": 298,
        "indeed": true
    },
    {
        "number": 116,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    i = 0\n    for num in nums:\n        i = i * 10 + num\n    return i\n",
        "test": "assert     tuple_to_int((6, -3, 4)) == -1, \"Test failed!\"",
        "num_ids": 522,
        "indeed": true
    },
    {
        "number": 117,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    output = []\n    for item in test_list:\n        output.append(float(item))\n    return output\n",
        "test": "assert     list_to_float([1.5, 2.4]) == [1.5, 2.4], 'Wrong answer'",
        "num_ids": 826,
        "indeed": false
    },
    {
        "number": 118,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 60,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n",
        "test": "assert     string_to_list('hello') == ['hello']",
        "num_ids": 363,
        "indeed": true
    },
    {
        "number": 119,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    from collections import Counter\n    counts = Counter(arr)\n    return counts[min(counts)]\n",
        "test": "assert     search([1,3,3,2,2,1]) == 2, 'incorrect'",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 120,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        raise ValueError(\"Invalid list\")\n    elif len(list1) == 1:\n        return list1[0][0]*list1[0][1]\n    else:\n        max1 = list1[0][0]*list1[0][1]\n        max2 = list1[1][0]*list1[1][1]\n        for i in range(2,len(list1)):\n            max1 = max(max1,list1[i][0]*list1[i][1])\n            max2 = max(max2,list1[i][1]*list1[i][0])\n        return max(max1,max2)\n",
        "test": "assert     max_product_tuple([]) == (0,0)",
        "num_ids": 1293,
        "indeed": true
    },
    {
        "number": 123,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = {}\n",
        "test": "assert     amicable_numbers_sum(100) == 100",
        "num_ids": 713,
        "indeed": false
    },
    {
        "number": 124,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    try:\n        # Get the real part\n        a_real = a.real\n        b_real = b.real\n        # Get the imaginary part\n        a_imag = a.imag\n        b_imag = b.imag\n        if a_imag == b_imag:\n            a_complex = a_imag\n            b_complex = b_imag\n            angle = 0\n        else:\n            a_complex = -b_imag\n            b_complex = b_imag\n            angle = cmath.acos(a_complex / a_complex)\n    except:\n        print('Complex number not found!')\n        angle = -1\n        return angle\n    return angle\n",
        "test": "assert     angle_complex(0,0)    ==    0",
        "num_ids": 742,
        "indeed": false
    },
    {
        "number": 125,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    differences = 0\n    for char in string:\n        if char == 0:\n            differences += 1\n    return differences\n",
        "test": "assert     find_length(\"12301\") == 0",
        "num_ids": 4447,
        "indeed": false
    },
    {
        "number": 126,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    if a==0: \n        return 0\n    elif b==0: \n        return 1\n    elif a==b: \n        return 1\n    elif a<b: \n        return sum(a,b-a)\n    else: \n        return sum(b,a-b)\n    \ndef factorial(n): \n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    if n==0: \n        return 1\n    else: \n        return n*factorial(n-1)\n",
        "test": "assert     sum(1,1) == 1",
        "num_ids": 384,
        "indeed": false
    },
    {
        "number": 127,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    if x == 0 or y == 0:\n        return 0\n    x = int(x)\n    y = int(y)\n    return x * y\n",
        "test": "assert     multiply_int(5, 9) == 45",
        "num_ids": 420,
        "indeed": true
    },
    {
        "number": 128,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long = [word for word in str if len(word) > n]\n    return long\n",
        "test": "assert     long_words(1, ['a', 'b', 'c']) == [], \"test 1\"",
        "num_ids": 997,
        "indeed": false
    },
    {
        "number": 129,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    i = 0\n    j = size - 1\n    while i < size and j >= 0:\n        if my_matrix[i][j]!= 1:\n            break\n        if i == 0:\n            j = j - 1\n        elif j == size - 1:\n            i = i + 1\n        else:\n            i = i - 1\n            j = j + 1\n    return i == 0 or j == size - 1\n    \ndef is_magic_square(my_matrix):\n    '''\n    Write a function to check whether a matrix is a magic square.\n    '''\n    i = size - 1\n    j = size - 1\n    while i >= 0 and j >= 0:\n        if my_matrix[i][j]!= 1:\n            return False\n        if i == 0:\n            j = j - 1\n        elif j == size - 1:\n            i = i + 1\n        else:\n            i = i - 1\n            j = j + 1\n    return True\n    ",
        "test": "assert     magic_square_test([[2,3,4,5,6],[7,8,9,10,11],[12,13,14,15,16]]), 'Invalid matrix'",
        "num_ids": 874,
        "indeed": false
    },
    {
        "number": 130,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    \n    for num in counts:\n        if counts[num] == max(counts.values()):\n            return num\n    \n    return None\ndef min_occurrences(nums):\n    '''\n    Write a function to find the item with minimum frequency in a given list.\n    '''\n    counts = {}\n    for num in nums:\n        counts[num] = counts.get(num, 0) + 1\n    \n    for num in counts:\n        if counts[num] == min(counts.values()):\n            return num\n    \n    return None\n",
        "test": "assert     max_occurrences([1, 1, 1, 1, 1]) == 1, \"test failed\"",
        "num_ids": 709,
        "indeed": true
    },
    {
        "number": 131,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    list1=[]\n    for i in str1:\n        if i in 'aeiouAEIOU':\n            list1.append(i)\n        else:\n            list1.append(' ')\n    list2=[]\n    for i in range(len(list1)-1,-1,-1):\n        list2.append(list1[i])\n    return ''.join(list2)\n",
        "test": "assert     reverse_vowels('a') == 'a'",
        "num_ids": 2531,
        "indeed": false
    },
    {
        "number": 132,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = \"\"\n    for x in range(len(tup1)):\n        string = string + str(tup1[x]) + \",\"\n    return string[:-1]\n",
        "test": "assert     isinstance(tup_string(('a','b','c')), str)",
        "num_ids": 520,
        "indeed": false
    },
    {
        "number": 133,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sumnum = 0\n    for num in nums:\n        if num < 0:\n            sumnum += num\n    return sumnum\n",
        "test": "assert     sum_negativenum([]) == 0",
        "num_ids": 1020,
        "indeed": true
    },
    {
        "number": 135,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = 0\n    if n == 0:\n        return result\n    elif n == 1:\n        return 1\n    else:\n        result = (3 * n + 1) * hexagonal_num(n-1)\n        return result\nprint(hexagonal_num(6))",
        "test": "assert     hexagonal_num(0) == 0",
        "num_ids": 421,
        "indeed": false
    },
    {
        "number": 137,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n",
        "test": "assert     zero_count([1, 2, 3, 0]) == 0.25",
        "num_ids": 2998,
        "indeed": false
    },
    {
        "number": 138,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_Pair_Sum(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of two non-zero powers of 2 or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_Power_Sum(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of two non-zero powers of 2 or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    for i in range(3, int(n**0.5)+1, 2):\n        if n % i == 0:\n            return False\n    return True\ndef is_Fibonacci(n): \n    '''\n    Write a python function to check whether the given number can be represented as a sum of two non-zero powers of 2 or not.\n    '''\n    if n <= 1:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    if n % 4 == 0:\n        return False\n    if n % 5 == 0:\n        return False\n    if n % 6 == 0:\n        return False\n    if n % 7 == 0:\n        return False\n    return True\ndef get_GCD(x,y): \n    '''\n    Write a python function to calculate the greatest common divisor of two integers.\n    '''\n    while y!= 0:\n        x, y = y, x % y\n    return x\ndef get_LCM(x,y): \n    '''\n    Write a python function to calculate the least common multiple of two integers.\n    '''\n    while y!= 0:\n        x, y = y, x % y\n    return x\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(27) == False",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 139,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * 3.14 * r\n",
        "test": "assert     circle_circumference(0) == 0",
        "num_ids": 240,
        "indeed": true
    },
    {
        "number": 140,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    output = []\n    for el in test_list:\n        if type(el) is list:\n            output.extend(extract_singly(el))\n        else:\n            output.append(el)\n    return output\n    \n",
        "test": "assert     extract_singly([]) == []",
        "num_ids": 550,
        "indeed": false
    },
    {
        "number": 141,
        "max_answer_num": 7,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    for i in range(len(nums)):\n        for j in range(len(nums) - i - 1):\n            if nums[j] > nums[j + 1]:\n                nums[j], nums[j + 1] = nums[j + 1], nums[j]\n    return nums\n    \ndef merge_sort(nums):\n    '''\n    Write a function that takes a sorted array as an argument and returns a new array with all the sorted elements in sorted order.\n    '''\n    if len(nums) < 2:\n        return nums\n    \n    mid = len(nums) // 2\n    left = nums[:mid]\n    right = nums[mid:]\n    \n    left = merge_sort(left)\n    right = merge_sort(right)\n    \n    return merge(left, right)\n    \ndef merge(left, right):\n    '''\n    Sort the array, and return a sorted array.\n    '''\n    result = []\n    i, j = 0, 0\n    \n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            result.append(left[i])\n            i += 1\n        else:\n            result.append(right[j])\n            j += 1\n            \n    while i < len(left):\n        result.append(left[i])\n        i += 1\n        \n    while j < len(right):\n        result.append(right[j])\n        j += 1\n        \n    return result\n",
        "test": "assert     pancake_sort([]) == []",
        "num_ids": 1309,
        "indeed": true
    },
    {
        "number": 142,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    #counts the number of different items that are identical in the same position of three given lists.\n    #the number of different items is the product of the number of items that are identical in the same position of three given lists.\n    count=1\n    for item1 in list1:\n        if item1==list2[0] and item1==list3[0]:\n            count=count+1\n    count=1\n    for item2 in list2:\n        if item2==list1[0] and item2==list3[0]:\n            count=count+1\n    count=1\n    for item3 in list3:\n        if item3==list1[0] and item3==list2[0]:\n            count=count+1\n    return count\n",
        "test": "assert     count_samepair([1,1,1,2,2,2,3], [3,3,3,4,4,4,5], [2,2,2,2,2,2,2]), \"Test 1 is correct\"",
        "num_ids": 1066,
        "indeed": false
    },
    {
        "number": 143,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    new_tuple = Input[:5]\n    list_pos = 0\n    for i in new_tuple:\n        if i == ',':\n            list_pos += 1\n    return list_pos\n",
        "test": "assert     find_lists([]) == 0, \"The empty list should be returned\"",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 145,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_abs_diff = arr[0] - arr[1]\n    for i in range(1, len(arr)):\n        max_abs_diff = max(abs(arr[i] - arr[i-1]), max_abs_diff)\n    return max_abs_diff\n",
        "test": "assert     max_Abs_Diff([-1, -2, 0, 0, 2, 3]) == 2",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 160,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n <= 0: return None\n    x, y = a, b\n    if n % 2:\n        x, y = b, a\n    \n    for i in range(0, n//2):\n        x = (x*x) + a\n        y = (y*y) + b\n    return x, y\n",
        "test": "assert     find_solution(1, 1, 2) == (2, 2)",
        "num_ids": 741,
        "indeed": false
    },
    {
        "number": 161,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.sort()\n    list2.sort()\n    new_list = []\n    for i in range(len(list2)):\n        if list2[i] in list1:\n            list1.remove(list2[i])\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n    return new_list\n",
        "test": "assert     remove_elements([], []) == []",
        "num_ids": 2740,
        "indeed": true
    },
    {
        "number": 162,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        s += i\n    return s\n",
        "test": "assert     sum_series(1) == 1",
        "num_ids": 341,
        "indeed": false
    },
    {
        "number": 163,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l==1:\n        return 0\n    else:\n        return (s**2)*tan(pi/l)\n",
        "test": "assert         area_polygon(0, 1) == 0, \"This is not the correct area calculation!\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 164,
        "max_answer_num": 10,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n            if count == 2:\n                return i \n    return 0\ndef nth_prime(n):\n    '''\n    Return the nth prime number in the progression.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    elif n == 3:\n        return 3\n    else:\n        for i in range(4,n+1,2):\n            if n%i==0:\n                return i\n        ",
        "test": "assert     div_sum(1) == 0",
        "num_ids": 1027,
        "indeed": false
    },
    {
        "number": 165,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    pos_dict = {}\n    for char in str1:\n        if char not in pos_dict:\n            pos_dict[char] = 0\n        pos_dict[char] += 1\n    return len(pos_dict)\n",
        "test": "assert     count_char_position(\"ABC\") == 3, \"Fail to count character position as 2\"",
        "num_ids": 1023,
        "indeed": false
    },
    {
        "number": 166,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) == 1:\n        return len(set(A))\n    \n    count = 0\n    \n    for i in range(1,len(A)):\n        if A[i] == A[i-1] and A[i-1] % 2 == 0:\n            count += 1\n    \n    return count\n",
        "test": "assert     find_even_pair([]) == 0",
        "num_ids": 839,
        "indeed": false
    },
    {
        "number": 167,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 2:\n        return 0\n    \n    if n == 2:\n        return 1\n    \n    if n % 2 == 0:\n        return 2\n    \n    if n % 2 == 1:\n        return next_power_of_2(n // 2)\n    \n    return next_power_of_2(n // 2) + 1\n",
        "test": "assert     next_power_of_2(2) == 1",
        "num_ids": 375,
        "indeed": false
    },
    {
        "number": 168,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count+=1\n    return count\n",
        "test": "assert     frequency(1, [1,1,1,1,1,1,1,1,1]) == 3, 'Test #3'",
        "num_ids": 361,
        "indeed": true
    },
    {
        "number": 170,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n):\n        sum += list1[i]\n    return sum\n",
        "test": "assert     sum_range_list([1, 2, 3, 4, 5], 4, 5) == 5, 'incorrect result'",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 171,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = a**2 + (a**2 - a)**2\n    return perimeter\n",
        "test": "assert     perimeter_pentagon(0) == 0",
        "num_ids": 2221,
        "indeed": false
    },
    {
        "number": 172,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count_s=0\n    for i in range(len(s)):\n        if s[i]=='std':\n            count_s+=1\n    return count_s\n    \ndef count_occurance2(s):\n    '''\n    Write a function to count the number of occurence of the string'std' in a given string.\n    '''\n    count_s=0\n    s1=s.replace('std','')\n    s1=s1.lower()\n    for i in range(len(s1)):\n        if s1[i]=='std':\n            count_s+=1\n    return count_s\n",
        "test": "assert     count_occurance(\"Baby\") == 0",
        "num_ids": 2175,
        "indeed": false
    },
    {
        "number": 222,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if type(test_tuple[0]) == str or type(test_tuple[0]) == int:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_type((1, 2.2, 'A')), 'All elements in tuple have same data type'",
        "num_ids": 1313,
        "indeed": false
    },
    {
        "number": 223,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    arr_copy = arr.copy()\n    for i in range(n):\n        if arr[i] == x:\n            arr_copy[i] = x\n    if arr_copy == arr:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_majority([1,2,3,4,5], 2, 1) == True",
        "num_ids": 508,
        "indeed": false
    },
    {
        "number": 224,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    ans=0\n    for i in str(n):\n        if int(i)==1:\n            ans+=1\n    return ans\n",
        "test": "assert     count_Set_Bits(0) == 0",
        "num_ids": 2470,
        "indeed": false
    },
    {
        "number": 226,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    odd_index_list=[]\n    for i in range(len(str)):\n        if i%2==1:\n            odd_index_list.append(str[i])\n    return \"\".join(odd_index_list)\n",
        "test": "assert     odd_values_string('abc') == 'abc', \"Odd values are not removed\"",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 227,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return a if a<b and a<c else b if b<c else c\n",
        "test": "assert     min_of_three(1,3,5) == 1",
        "num_ids": 380,
        "indeed": true
    },
    {
        "number": 228,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    r = r-1\n    if (n >= (1 << (r+1))):\n        print(f\"{n} is a power of 2.{n}\")\n        return 1\n    else:\n        print(\"It is not a power of 2.{n}\")\n        return 0\n",
        "test": "assert     all_Bits_Set_In_The_Given_Range(0,1,0) == False",
        "num_ids": 919,
        "indeed": true
    },
    {
        "number": 229,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr.reverse() # re-arranges the array\n    arr.append(0) # appends 0 for nth elements\n    for i in range(1, len(arr)): # iterates over all elements from 1 to the length of the array\n        if arr[i] < 0: # checks if the current element is a positive one\n            arr[i] = -arr[i] # if so, then swaps its first place with its second place\n    arr.reverse() # re-arranges the array\n    return arr\n",
        "test": "assert     re_arrange_array([\"a\", \"b\", \"-3\", \"-2\", \"a\"], 6) == \"aaa\"",
        "num_ids": 974,
        "indeed": false
    },
    {
        "number": 230,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(char,char.upper())\n",
        "test": "assert     replace_blank('','') == ''",
        "num_ids": 2297,
        "indeed": false
    },
    {
        "number": 232,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    heapq.heapify(heap)\n    while len(list1) > 0:\n        v = heapq.heappop(heap)\n        if len(list1) == n:\n            return v\n        else:\n            heapq.heappush(heap,list1.pop(0))\n    return 'not in list'\n",
        "test": "assert ",
        "num_ids": 1972,
        "indeed": false
    },
    {
        "number": 233,
        "max_answer_num": 7,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(f'The lateral surface area of the cylinder is {r * h} mm')\n    return r * h\n",
        "test": "assert     lateralsuface_cylinder(0,0) == 0",
        "num_ids": 2694,
        "indeed": false
    },
    {
        "number": 234,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l == 0:\n        return 0\n    elif l == 1:\n        return 1\n    elif l == 2:\n        return 4\n    else:\n        return l * volume_cube(l - 1)\n",
        "test": "assert     volume_cube(3) == 12, 'Test 1 fails'",
        "num_ids": 322,
        "indeed": false
    },
    {
        "number": 235,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    even_bits=0\n    while (n>0): \n        if n%2==0: \n            even_bits=even_bits|1 \n        n=n//2 \n    return even_bits\n",
        "test": "assert     even_bit_set_number(2) == 1",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 237,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # make a dictionary of the tuples in the list\n    dictionary = {}\n    for data in test_list:\n        if data[0] in dictionary:\n            dictionary[data[0]] = dictionary[data[0]] + 1\n        else:\n            dictionary[data[0]] = 1\n    \n    # return the dictionary\n    return dictionary\n",
        "test": "assert ",
        "num_ids": 455,
        "indeed": false
    },
    {
        "number": 238,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    substr = \"\"\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            substr += str[i]\n            count += 1\n        else:\n            count -= 1\n    return count\n",
        "test": "assert     number_of_substrings(\"\") == 0",
        "num_ids": 509,
        "indeed": false
    },
    {
        "number": 239,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_sequence_length(m,n):\n        '''\n        Return the length of a sequence of length n.\n        '''\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            return 1 + get_sequence_length(m-1,n-1)\n    \n    return get_sequence_length(m,n)\n",
        "test": "assert     get_total_number_of_sequences(1,1) == 1",
        "num_ids": 419,
        "indeed": false
    },
    {
        "number": 240,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    new_list=[]\n    new_list=list1.copy()\n    print(new_list)\n    if list2.__len__()==1:\n        new_list.append(list2.__len__())\n        print(new_list)\n    else:\n        print(\"not possible\")\n    \n    for i in range(len(list2)):\n        if list2[i] in new_list:\n            new_list.remove(list2[i])\n            new_list.append(list2[i])\n        if list2[i]==new_list[i]:\n            new_list.remove(list2[i])\n            new_list.append(list2[i])\n    print(new_list)\n    \n    return new_list\n",
        "test": "assert     replace_list([], []) == []",
        "num_ids": 2619,
        "indeed": false
    },
    {
        "number": 242,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] == 'a' or str1[i] == 'e' or str1[i] == 'i' or str1[i] == 'o' or str1[i] == 'u':\n            count += 1\n    return count\n",
        "test": "assert     count_charac(\"\") == 0",
        "num_ids": 776,
        "indeed": false
    },
    {
        "number": 244,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N < 1: \n        return 0\n    if N < 2: \n        return 1\n    if N == 2: \n        return 3\n    else: \n        return 4\n    \ndef main():\n    print('***** Perfect Square *****')\n    '''\n    for i in range(0,20):\n        print(i)\n    '''\n    N = int(input('please enter a positive number:'))\n    print(next_Perfect_Square(N))\n",
        "test": "assert     next_Perfect_Square(1) == 1",
        "num_ids": 346,
        "indeed": false
    },
    {
        "number": 245,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_so_far = 0\n    output = -1\n",
        "test": "assert ",
        "num_ids": 294,
        "indeed": false
    },
    {
        "number": 246,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return 0.0\n",
        "test": "assert     babylonian_squareroot(0) == 0.0",
        "num_ids": 497,
        "indeed": false
    },
    {
        "number": 247,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps_s = 0 \n    lps_end = 1 \n    \n    # base case \n    if len(str) == 1: \n        return 1 \n    elif str[0] == str[-1]: \n        return 1 + lps_s \n    \n    # traversing for all the palindromes \n    # till the last character is the same \n    for i in range(1, len(str)): \n        if str[i]!= str[i-1]: \n            lps_s += lps(str[i:]) \n            lps_end += 1 \n        else: \n            lps_s += lps(str[:i]) \n            lps_end += lps(str[i:]) \n    return lps_end \n",
        "test": "assert     lps('abcdd') == 5",
        "num_ids": 551,
        "indeed": false
    },
    {
        "number": 248,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    harmonic = 1\n    for i in range(2,n):\n        harmonic = harmonic * i\n    return harmonic\n",
        "test": "assert     harmonic_sum(1) == 1",
        "num_ids": 2260,
        "indeed": false
    },
    {
        "number": 249,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    if len(array_nums1) > len(array_nums2):\n        array_nums1, array_nums2 = array_nums2, array_nums1\n    intersection = []\n    for x in array_nums1:\n        if x in array_nums2:\n            intersection.append(x)\n    return intersection\n",
        "test": "assert         intersection_array([3, 1, 3, 1], [1, 3, 3, 1])==0, \"Test case 4 failed\"",
        "num_ids": 983,
        "indeed": true
    },
    {
        "number": 250,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n    \n    \n",
        "test": "assert     count_X(('a', 'b', 'c'), 'd') == 0",
        "num_ids": 598,
        "indeed": true
    },
    {
        "number": 251,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return [element]+list[1:]\n",
        "test": "assert     insert_element([2, 4, 6, 8, 10], 10) == [2, 4, 6, 8, 10, 10]",
        "num_ids": 503,
        "indeed": false
    },
    {
        "number": 252,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"\\nConvert: Convert a complex number to polar coordinates.\\n\")\n    print(\"Complex Numbers: \", numbers)\n    print(\"Polar Coordinates:\")\n    if numbers < 0:\n        print(\"Error: Value must be >= 0\")\n        return\n    else:\n        c = numbers.imag\n        d = numbers.real\n        print(\"Imaginary:\",c)\n        print(\"Real:\",d)\n        angle = 0.5*cmath.pi*d\n        print(\"Angle:\",angle)\n        print(\"\\n\")\n    return angle\n",
        "test": "assert     convert([1,1,0]) == (0.0, 1.0, 1.0)",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 253,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list1)\n",
        "test": "assert     count_integer([]) == 0, \"count_integer should be a 0\"",
        "num_ids": 450,
        "indeed": false
    },
    {
        "number": 255,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [''.join(e) for e in combinations_with_replacement(l, n)]\n",
        "test": "assert     combinations_colors([1, 2, 3, 4, 5, 6, 7, 8, 9], 10) == [[1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 3, 4, 5, 6, 7, 8, 9], [1, 4, 5, 6, 7, 8, 9], [1, 5, 6, 7, 8, 9], [1, 6, 7, 8, 9], [1, 7, 8, 9], [1, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 3, 4, 5, 6, 7, 8, 9], [2, 4, 5, 6, 7, 8, 9], [2, 5, 6, 7, 8, 9], [2, 6, 7, 8, 9], [2, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9], [3, 4, 5, 6, 7, 8, 9], [3, 5, 6, 7, 8, 9], [3, 6, 7, 8, 9], [3, 7, 8, 9], [4, 5, 6, 7, 8, 9], [4, 5, 6, 7, 8, 9], [4, 6, 7, 8, 9], [4, 7, 8, 9], [5, 6, 7, 8, 9], [5, 6, 7, 8, 9], [5, 7, 8, 9], [6, 7, 8, 9], [6, 7, 9], [7, 8, 9]]",
        "num_ids": 1085,
        "indeed": false
    },
    {
        "number": 256,
        "max_answer_num": 7,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    Prime = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]\n    print(Prime)\n    count = 0\n    for i in range(n + 1):\n        for j in range(len(Prime)):\n            print(f\"Checking {i} and {j} for prime number\")\n            if i < Prime[j]:\n                break\n        else:\n            count += 1\n    return count\n",
        "test": "assert     count_Primes_nums(1) == 0",
        "num_ids": 812,
        "indeed": false
    },
    {
        "number": 257,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n",
        "test": "assert     swap_numbers(0,2) == (2,0)",
        "num_ids": 376,
        "indeed": true
    },
    {
        "number": 259,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup2[0]\n    if a > b:\n        return a\n    else:\n        return b\n",
        "test": "assert     maximize_elements(('A','C'), ('A','B')) == 'A'",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 260,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        a = n % 10\n        b = n // 10\n        c = a + b\n        x = 5 * a * b\n        y = a + b + c\n        z = b + c + a\n        j = n % 3\n        if j == 0 or j == 2:\n            return 5 * x * y\n        else:\n            return 5 * x * y + 5 * z * y + z\n",
        "test": "assert     newman_prime(5) == False",
        "num_ids": 807,
        "indeed": false
    },
    {
        "number": 261,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    assert type(test_tup1) == tuple, \"Test Tuple must be a tuple.\"\n    assert type(test_tup2) == tuple, \"Test Tuple must be a tuple.\"\n",
        "test": "assert     division_elements(('1','2'), ('3','4')) == '1/4'",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 262,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first = list1[:L]\n    second = list1[L:]\n    return first, second\n",
        "test": "assert     split_two_parts([1, 2, 3, 4], 2) == ([1, 2], [3, 4])",
        "num_ids": 532,
        "indeed": true
    },
    {
        "number": 264,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = int(h_age)\n    years = dog_age * 365\n    return years\n",
        "test": "assert     dog_age(0) == 0",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 265,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out = []\n    for i in range(0, len(S), step):\n        out.append(S[i:i + step])\n    return out\n",
        "test": "assert     list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9], [10]]",
        "num_ids": 2665,
        "indeed": false
    },
    {
        "number": 266,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def get_side(p):\n        return p[0]\n    def cube_side(p):\n        return p[1]\n    #print(get_side(l))\n    return sum([get_side(p) for p in l])\n",
        "test": "assert     lateralsurface_cube(4.5) == 2.0",
        "num_ids": 1136,
        "indeed": false
    },
    {
        "number": 267,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 30,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    i = 1\n    sum = 0\n    while i <= n:\n        sum = sum + pow(i, 2)\n        i = i + 1\n        \n    return sum\n        \n",
        "test": "assert ",
        "num_ids": 758,
        "indeed": false
    },
    {
        "number": 268,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    for x in range(n+1):\n        if x*x == n:\n            return x\n    return -1\n",
        "test": "assert     find_star_num(1) == 1",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 269,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return int(k)\n",
        "test": "assert     ascii_value('d') == 102",
        "num_ids": 263,
        "indeed": false
    },
    {
        "number": 270,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum = sum + arr[i]\n    return sum\n    \n    \n    \n    ",
        "test": "assert     sum_even_and_even_index([1,2,3,4,5,6]) == 9, 'Sum of even numbers in the array should be 9'",
        "num_ids": 699,
        "indeed": false
    },
    {
        "number": 271,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    # if n is a natural number, return that number, otherwise return 0\n    if n % 2 == 0:\n        return n\n    elif n == 0:\n        return 0\n    else:\n        # find the first n natural numbers greater than 1\n        power = 1\n        while power <= n:\n            n *= power\n            power += 1\n        return n\n",
        "test": "assert ",
        "num_ids": 393,
        "indeed": false
    },
    {
        "number": 272,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for tup in test_list:\n        rear.append(tup[1])\n    return rear",
        "test": "assert     rear_extract([(1,2),(3,4)]) == [2,4], \"test_rear_extract()\"",
        "num_ids": 636,
        "indeed": false
    },
    {
        "number": 273,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # TODO: Replace pass with your code here\n    pass\n",
        "test": "assert     substract_elements([(1, 2), (1, 3)], [(1, 2), (1, 3), (3, 4), (4, 5)]) == [2, 4]",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 274,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n < 0:\n        return \"Enter a non-negative integer\"\n    if n == 0:\n        return 1\n    if n == 1:\n        return n\n    if n == 2:\n        return n\n    if n == 3:\n        return n * (n - 1) * (n - 2) / 6\n    if n % 2 == 0:\n        return even_binomial_Coeff_Sum(n - 1)\n    else:\n        return (n * even_binomial_Coeff_Sum(n - 1) + 2 * even_binomial_Coeff_Sum(n - 2)) / 6\n",
        "test": "assert     even_binomial_Coeff_Sum(0) == 1",
        "num_ids": 604,
        "indeed": false
    },
    {
        "number": 276,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    # YOUR CODE HERE\n    return 3.14*(r**2)*h/2\n",
        "test": "assert ",
        "num_ids": 246,
        "indeed": false
    },
    {
        "number": 277,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n",
        "test": "assert     dict_filter(dict_with_sevens,7)=={'a':None,'b':None,'c':None,'d':None,'e':None,'f':None,'g':None,'h':None,'i':None,'j':None,'k':None,'l':None,'m':None,'n':None}",
        "num_ids": 449,
        "indeed": true
    },
    {
        "number": 278,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    for i in test_tup:\n        if i == test_tup[0]:\n            return test_tup.count(i)\n    return 0\n",
        "test": "assert     count_first_elements([]) == 0",
        "num_ids": 830,
        "indeed": false
    },
    {
        "number": 279,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # Your code here\n    return n % 2 == 0\n    pass\n",
        "test": "assert     is_num_decagonal(2) == True",
        "num_ids": 774,
        "indeed": false
    },
    {
        "number": 280,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(0,len(dlist)-1):\n        if dlist[i] == item:\n            return (True,i)\n    return (False, -1)\n",
        "test": "assert     sequential_search([1, 3, 8, 15, 19], 16), (False, 2)",
        "num_ids": 1321,
        "indeed": false
    },
    {
        "number": 281,
        "max_answer_num": 16,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique_list = []\n    for i in test_list:\n        if i not in unique_list:\n            unique_list.append(i)\n    return len(unique_list) == len(set(unique_list))\n",
        "test": "assert     all_unique([1,2,3]) == True, \"Test 2 is failing\"",
        "num_ids": 719,
        "indeed": false
    },
    {
        "number": 282,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 50,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # E.g. nums1 = [1, 3, 4, -4], nums2 = [1, -4, 3, 0]\n    # Output should be [1, 2, 3, 4]\n    sub_lst = []\n    for i in range(len(nums1)):\n        if nums1[i] < nums2[i]:\n            sub_lst.append(nums1[i])\n        elif nums1[i] > nums2[i]:\n            sub_lst.append(nums2[i])\n        else:\n            sub_lst.append(nums1[i])\n    return sub_lst\n",
        "test": "assert     sub_list([1, 2, 3], [4, 5, 6]) == [1, 2, 3]",
        "num_ids": 735,
        "indeed": false
    },
    {
        "number": 283,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count=0\n    for i in range(0,n):\n        count=count+1\n    for j in range(0,count):\n        if(i%2!=0):\n            return False\n    return True\n",
        "test": "assert     validate(1234) == False",
        "num_ids": 448,
        "indeed": false
    },
    {
        "number": 284,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for element in list:\n        if element!= element:\n            return False\n    return True\n",
        "test": "assert     check_element([1,2,3,4,5],2) == True",
        "num_ids": 355,
        "indeed": false
    },
    {
        "number": 285,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    r = re.compile(r'\\w*a+\\w*b+')\n    res = r.search(text)\n    if res:\n        return True\n    else:\n        return False\n",
        "test": "assert text_match_two_three('Hello abcdef')",
        "num_ids": 1533,
        "indeed": true
    },
    {
        "number": 286,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # define an array of current sums \n    sums = [0] * n \n    for i in range(k): \n        sums[i] = sums[i] + a[i] \n",
        "test": "assert     max_sub_array_sum_repeated(a, n, 3) == 0",
        "num_ids": 752,
        "indeed": false
    },
    {
        "number": 287,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n<0:\n        print('N must be greater than or equal to 0')\n    else:\n        sum=0\n        for i in range(1, n+1):\n            sum+=i**2\n        return sum\ndef cube_Sum(n):\n    '''\n    Write a python function takes in an integer n and returns the sum of cubes of first n natural numbers.\n    '''\n    if n<0:\n        print('N must be greater than or equal to 0')\n    else:\n        sum=0\n        for i in range(1, n+1):\n            sum+=i**3\n        return sum\n",
        "test": "assert         square_Sum(3) == 9, \"Your function is not correct\"",
        "num_ids": 321,
        "indeed": false
    },
    {
        "number": 290,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n",
        "test": "assert         max_length([]) == 0, \"Should be 0\"",
        "num_ids": 517,
        "indeed": false
    },
    {
        "number": 291,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if(n<2):\n        return n\n    elif(n == 2):\n        return 1\n    else:\n        return count_no_of_ways(n-2,k)*count_no_of_ways(n-1,k)+k\n",
        "test": "assert     count_no_of_ways(2, 2) == 1, \"It is not possible to paint the fence with 2 posts and 2 colors\"",
        "num_ids": 769,
        "indeed": false
    },
    {
        "number": 292,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n>m or n==0 or m==0:\n        return False\n    else:\n        n=n%10\n        m=m%10\n        if n>m:\n            n=n%10+1\n        else:\n            m=m%10+1\n        if n==m:\n            return True\n        else:\n            return False\n    \n    \n",
        "test": "assert     find(0,0) == 0",
        "num_ids": 986,
        "indeed": false
    },
    {
        "number": 293,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    # get width and height\n    w = float(w)\n    h = float(h)\n    # calculate area\n    area = math.sqrt(w*h/2)\n    # find the angle\n    angle = math.degrees(math.atan(h/w))\n    # find the distance\n    distance = area/4\n    # make the angle the same as the angle\n    angle = math.degrees(angle)\n    # return\n    return angle, distance\n",
        "test": "assert ",
        "num_ids": 703,
        "indeed": false
    },
    {
        "number": 294,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = 0\n    if len(listval) == 0:\n        return 0\n    for i in range(len(listval)):\n        if listval[i] > max_val:\n            max_val = listval[i]\n    return max_val\n",
        "test": "assert     max_val([1, -1, 2, 3]) == 3",
        "num_ids": 630,
        "indeed": false
    },
    {
        "number": 295,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Your code here\n    div_sums = []\n    for d in range(1, number + 1):\n        if number % d == 0:\n            div_sums.append(d)\n    \n    return sum(div_sums)\n",
        "test": "assert         sum_div(1) == 1",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 296,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversions = 0\n    for i in range(len(arr)): \n        for j in range(i, len(arr)): \n            if arr[i] > arr[j]: \n                inversions += 1\n    return inversions\n",
        "test": "assert     get_Inv_Count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == 0",
        "num_ids": 2481,
        "indeed": true
    },
    {
        "number": 297,
        "max_answer_num": 11,
        "max_test_num": 4,
        "total_product": 95,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    \n    output = []\n    for x in list1:\n        if isinstance(x, list):\n            output += flatten_list(x)\n        else:\n            output.append(x)\n    return output\n    \n    \n    ",
        "test": "assert     flatten_list([]) == []",
        "num_ids": 866,
        "indeed": true
    },
    {
        "number": 299,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_val = 0\n    max_aggregate_key = None\n    for i in stdata:\n        if i[1] > max_aggregate_val:\n            max_aggregate_val = i[1]\n            max_aggregate_key = i[0]\n    return max_aggregate_key, max_aggregate_val\n",
        "test": "assert         max_aggregate([(1, 2), (1, 3), (4, 5)]) == (4, 5), \"Wrong!\"",
        "num_ids": 778,
        "indeed": false
    },
    {
        "number": 300,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    ans = 0\n    for i in range(1,n):\n        ans += int(bin(i)[2:],2)\n    return ans\n",
        "test": "assert     count_binary_seq(1) == 0",
        "num_ids": 564,
        "indeed": false
    },
    {
        "number": 301,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for k in d:\n        if isinstance(d[k], dict):\n            depth = max(depth, dict_depth(d[k]))\n    return depth\n",
        "test": "assert     dict_depth({\"a\": 1, \"b\": 2}) == 0, \"bad dict_depth()\"",
        "num_ids": 846,
        "indeed": false
    },
    {
        "number": 304,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(rotations):\n        if rotations > 1:\n            index -= 1\n            if (index >= ranges.count(arr[index])) :\n                return -1\n        index += 1\n    return arr[index]\n",
        "test": "assert     find_Element([1,2,3],[[2,3],[1,3],[1,2]],3,0) == 1",
        "num_ids": 889,
        "indeed": false
    },
    {
        "number": 305,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words[0].lower()!= 'p':\n        return None\n    return words[1]\n",
        "test": "assert         start_withp([\"p\", \"p\", \"p\", \"p\", \"p\"]) == \"p\"",
        "num_ids": 748,
        "indeed": false
    },
    {
        "number": 306,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == k:\n        return a[:k]\n    else:\n        if k > index:\n            return max_sum_increasing_subseq(a, n, index+1, k) + [a[index]]\n        else:\n            return [a[index]] + max_sum_increasing_subseq(a, n, index+1, k)\n",
        "test": "assert     max_sum_increasing_subseq([2, 3, 4, 5, 6], 3, 1, 0) == 15",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 307,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m] + (' '*(n-len(tuplex[:m])) + tuplex[m:])\n",
        "test": "assert     colon_tuplex([1,2,3],[4,5,6],[7,8,9],[10,11,12],[13,14,15],[16,17,18],[19,20,21],[2,3,4],[5,6,7],[8,9,10],[11,12,13],[14,15,16],[17,18,19],[20,21,22]) == (2,6,9)",
        "num_ids": 1311,
        "indeed": false
    },
    {
        "number": 308,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    res1 = []\n    res2 = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i + j < len(nums1):\n                res1.append(nums1[i] * nums2[j])\n                res2.append(nums1[i] * nums2[j])\n    return res1, res2\n",
        "test": "assert     large_product([1, 2, 3, 4], [5, 6, 7, 8], 10), \"Expected Output: (1, 4, 9, 12, 25, 36, 49, 64, 81, 100)\"",
        "num_ids": 1402,
        "indeed": false
    },
    {
        "number": 309,
        "max_answer_num": 11,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if b == 0:\n        return a\n    if a > b:\n        return a\n    return b\n",
        "test": "assert     maximum(2,2) == 2",
        "num_ids": 319,
        "indeed": true
    },
    {
        "number": 310,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list_of_characters = list(str1)\n    return tuple(list_of_characters)\n",
        "test": "assert     string_to_tuple(\"\") == ()",
        "num_ids": 4222,
        "indeed": false
    },
    {
        "number": 311,
        "max_answer_num": 8,
        "max_test_num": 1,
        "total_product": 95,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = (n >> 1) & 0x01\n    return mask\n",
        "test": "assert     set_left_most_unset_bit(4) == 0",
        "num_ids": 2533,
        "indeed": false
    },
    {
        "number": 312,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * (r**2)) * (1 - math.pow(r,2)) * (1 - math.pow(h,2))\n",
        "test": "assert     volume_cone(0,0)==0",
        "num_ids": 342,
        "indeed": false
    },
    {
        "number": 388,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max = 0\n    for i in range(1, n+1):\n        if (n % i) == 0:\n            max = i\n            break\n    return max\n",
        "test": "assert     highest_Power_of_2(10) == 1",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 389,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    for i in range(2, n+1):\n        if (n%i == 0):\n            return i\n",
        "test": "assert     find_lucas(2) == 2",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 390,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        if string in i:\n            index = list_.index(i)\n            list_.insert(index, string)\n    return list_\n",
        "test": "assert     add_string(['Jan','Feb','Mar','Apr','May'],'m') == ['Jan', 'Feb', 'Mar', 'Apr', 'May']",
        "num_ids": 2567,
        "indeed": false
    },
    {
        "number": 391,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0:\n        return {}\n    if len(l2) == 0:\n        return {}\n    if len(l3) == 0:\n        return {}\n    if len(l1) > len(l2) and len(l2) > len(l3):\n        return {}\n    d = {}\n    for i, v in enumerate(l1):\n        if i == len(l1) - 1:\n            d[v] = {}\n        else:\n            d[v] = l1[i+1]\n    for i, v in enumerate(l2):\n        if i == len(l2) - 1:\n            d[v] = {}\n        else:\n            d[v] = l2[i+1]\n    for i, v in enumerate(l3):\n        if i == len(l3) - 1:\n            d[v] = {}\n        else:\n            d[v] = l3[i+1]\n    return d\n",
        "test": "assert     convert_list_dictionary(['a'], ['a'], ['a', 'b'])",
        "num_ids": 1110,
        "indeed": false
    },
    {
        "number": 392,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    num_list = [1,3,5,7,9]\n    if n in num_list:\n        return num_list[num_list.index(n)]\n    else:\n        return n\n",
        "test": "assert     get_max_sum(1) == 1",
        "num_ids": 507,
        "indeed": false
    },
    {
        "number": 393,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if len(input_list) == 0:\n        return 0\n    elif len(input_list) == 1:\n        return input_list[0]\n    elif len(input_list) == 2:\n        if input_list[0] > input_list[1]:\n            return input_list[0]\n        else:\n            return input_list[1]\n    else:\n        if input_list[0] > input_list[1]:\n            return max(input_list[0:2])\n        else:\n            return max(input_list[1:])\n    ",
        "test": "assert     max_length_list([1, 2, 3, 4, 5, 6, 7, 8, 9]) == 9, \"test case failed\"",
        "num_ids": 515,
        "indeed": false
    },
    {
        "number": 394,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for val in test_tup:\n        if val in test_tup:\n            return False\n    return True\n",
        "test": "assert         check_distinct(('a','a','a','a','a','a','a','a')) == False",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 395,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #Initialize a set with all characters in the string\n    str_set = set(str1)\n    #Loop through each character in the string\n    for char in str_set:\n        #If the current character is not the same as the previous character, then increment the counter by 1\n        if char!= str1[0]:\n            str_set.add(char)\n    #If the string set has a single character, then the character is the first non-repeated character\n    if len(str_set) == 1:\n        return str_set.pop()\n    else:\n        #Return the first character of the string\n        return str_set.pop()\n",
        "test": "assert     first_non_repeating_character('a') == 'a'",
        "num_ids": 637,
        "indeed": false
    },
    {
        "number": 396,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 25,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if not(string):\n        return False\n    elif len(string) == 1:\n        return True\n    else:\n        string = string.lower()\n        if re.search(regex, string):\n            return True\n        else:\n            return False\n",
        "test": "assert     re.search(regex, 'a')",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 397,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    #Define variables to store the three numbers \n    number_a = a \n    number_b = b \n    number_c = c \n    \n    #Find the average of the three numbers \n    a = float(number_a + number_b + number_c) /3 \n    b = float(number_a * 2 + number_b * 2 + number_c) /3 \n    c = float(number_a * 3 + number_b * 3 + number_c) /3 \n    \n    #Return the average of the three numbers \n    return a \n    \n",
        "test": "assert     median_numbers(1,2,3) == 2",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 398,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total\n    \n    \n    \n",
        "test": "assert     sum_of_digits([]) == 0",
        "num_ids": 540,
        "indeed": false
    },
    {
        "number": 399,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        temp = int(test_tup1[i][0]) ^ int(test_tup2[i][0])\n        result.append(str(temp))\n    return result\n",
        "test": "assert     bitwise_xor(test_tup1, test_tup2) == (\"2\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\", \"0\")",
        "num_ids": 605,
        "indeed": false
    },
    {
        "number": 400,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count=0\n    for i in test_list:\n        count+=len(i)\n    return count\n    \n",
        "test": "assert     extract_freq(test_list) == 3, 'the function should return 3 as the value'",
        "num_ids": 431,
        "indeed": false
    },
    {
        "number": 401,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    # code here\n",
        "test": "assert     add_nested_tuples(test_tup1, test_tup2) == (1,2,3,4)",
        "num_ids": 1093,
        "indeed": false
    },
    {
        "number": 404,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min=a\n    if b<min:\n        min=b\n    return min\n",
        "test": "assert     minimum(1,1) == 1, \"Invalid\"",
        "num_ids": 2338,
        "indeed": true
    },
    {
        "number": 405,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex: \n        if x == tuple1: \n            return True\n    return False \n",
        "test": "assert     check_tuplex(('first',3,'second'),('first','third','first'))==False",
        "num_ids": 483,
        "indeed": true
    },
    {
        "number": 406,
        "max_answer_num": 11,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef find_Quad_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is even.\n    '''\n    if x % 4 == 0:\n        return True\n    else:\n        return False\n    \ndef find_Squared_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is even.\n    '''\n    if x % 2 == 0:\n        return True\n    else:\n        return False\n    \ndef find_Hexagon_Parity(x):\n    '''\n    Write a python function to find whether the parity of a given number is even.\n    '''\n    if x % 6 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     find_Parity(12) == True",
        "num_ids": 320,
        "indeed": false
    },
    {
        "number": 407,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 50,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # write your code here\n    if n<10:\n        return n\n    while n%10!=0:\n        n=n//10\n    return n*10 + n%10\n",
        "test": "assert     rearrange_bigger(-12) == -12, \"The function'rearrange_bigger' should return -12\"",
        "num_ids": 424,
        "indeed": false
    },
    {
        "number": 408,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k==0:\n        return -1\n    if k == 1:\n        return len(nums1) - len(nums2)\n    \n    pairs_count = 0\n    heap = [(nums1[0], nums1[0], 0)]\n    heapq.heapify(heap)\n",
        "test": "assert     k_smallest_pairs([1,3,5,7,6],",
        "num_ids": 1467,
        "indeed": false
    },
    {
        "number": 409,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if not list1:\n        return 0\n    else:\n        n = len(list1)\n        min_product = list1[0][0] * list1[0][1]\n        for i in range(1, n):\n            min_product = min(min_product, list1[i][0] * list1[i][1])\n        return min_product\n",
        "test": "assert     min_product_tuple([(1, 2), (3, 4), (5, 6)]) == (6, 9), \"Incorrect result\"",
        "num_ids": 2620,
        "indeed": true
    },
    {
        "number": 410,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 100,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) > 0:\n        return min(listval)\n    else:\n        return 0\n",
        "test": "assert     min_val([1, 1, 1, 1, 1, 1]) == 1",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 411,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.replace('-', '_').replace('.', '_').replace('_', '-').replace('_', '.')\n    return word\n",
        "test": "assert     snake_to_camel(\"Hello\") == \"Hello\"",
        "num_ids": 364,
        "indeed": false
    },
    {
        "number": 412,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l2 = []\n    for i in l:\n        if i%2!= 0:\n            l2.append(i)\n    return l2\n    \ndef solution(a):\n    '''\n    Find the length of the longest subarray with odd numbers.\n    '''\n    a2 = remove_odd(a)\n    return len(a2)\n",
        "test": "assert     remove_odd([]) == []",
        "num_ids": 599,
        "indeed": false
    },
    {
        "number": 413,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Write your code here\n    pass\n",
        "test": "assert     extract_nth_element([(1, 2), (3, 4), (5, 6)], 6) == None",
        "num_ids": 1102,
        "indeed": false
    },
    {
        "number": 414,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list3 = []\n    \n    for i in list1:\n        if i in list2:\n            list3.append(i)\n    if len(list3)>0:\n        return True\n    else:\n        return False\n",
        "test": "assert     overlapping([1,2,3], [4,5,6]) == False,'should be False'",
        "num_ids": 543,
        "indeed": true
    },
    {
        "number": 415,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    newArr=[]\n    for i in range(len(arr)):\n        for j in range(i,len(arr)):\n            if (arr[j]>arr[i]):\n                newArr.append(arr[j])\n            elif (arr[j]==arr[i]):\n                newArr.append(arr[j])\n                break\n    return max(newArr)\n",
        "test": "assert     max_Product([1, 2, 3, 4, 5]) == 5",
        "num_ids": 757,
        "indeed": false
    },
    {
        "number": 417,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    if len(Input) == 0:\n        raise ValueError('Input must not be empty')\n    return tuple(set(Input))\n",
        "test": "assert     group_tuples([(1, 2), (1, 3), (2, 3), (4, 5), (4, 6), (3, 6)]), \"wrong input\"",
        "num_ids": 824,
        "indeed": false
    },
    {
        "number": 418,
        "max_answer_num": 6,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    if len(lst) == 0:\n        print(\"List is empty\")\n        return 0\n    else:\n        print(lst[0])\n    return max(lst)\n",
        "test": "assert     Find_Max([3,3,5,1,2,7]) == 7",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 419,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list2 = []\n    for i in list1:\n        list2.append(round(i,2))\n    return sum(list2)\n",
        "test": "assert     round_and_sum([]) == 0",
        "num_ids": 522,
        "indeed": false
    },
    {
        "number": 420,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i**3\n    return sum\n",
        "test": "assert     cube_Sum(1) == 1",
        "num_ids": 474,
        "indeed": false
    },
    {
        "number": 421,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    tuple_to_concat = ''\n    for item in test_tup:\n        tuple_to_concat +='' + item\n    return tuple_to_concat\n",
        "test": "assert     concatenate_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10), 'test_concatenate_tuple failed'",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 422,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if (n < 1):\n        print(\"Invalid input\")\n        return\n    cube_sum = 0\n    for i in range(1, n+1):\n        cube_sum = cube_sum + (n-i)**3\n    return cube_sum/n\n",
        "test": "assert     find_Average_Of_Cube(1) == 0",
        "num_ids": 484,
        "indeed": false
    },
    {
        "number": 424,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    index = 0\n    rear_index = []\n    for x in test_tuple:\n        if x[0] == x[-1]:\n            rear_index.append(index)\n            index = 0\n        else:\n            index += 1\n    return rear_index\n",
        "test": "assert     extract_rear(('apples', 'cherries','mango')) == []",
        "num_ids": 665,
        "indeed": false
    },
    {
        "number": 425,
        "max_answer_num": 2,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for item in list1:\n        if item == x:\n            count+=1\n    return count\n",
        "test": "assert     count_element_in_list(['abc'], 'd') == 0",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 426,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [i for i in nums if i % 2!= 0]\n",
        "test": "assert     filter_oddnumbers([]) == []",
        "num_ids": 704,
        "indeed": true
    },
    {
        "number": 427,
        "max_answer_num": 13,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    pattern = r\"(\\d{4})-(\\d{2})-(\\d{2})$\"\n    return re.sub(pattern, r\"\\1-\\2-\\3\", dt)\n",
        "test": "assert     change_date_format(\"2021-01-21\")=='2021-01-21'",
        "num_ids": 2637,
        "indeed": false
    },
    {
        "number": 428,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n // 2\n    \n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n        \n    \n    \ndef get_min_and_max(my_list):\n    '''\n    Return a tuple of the smallest and the largest number in the given array.\n    '''\n    \n    minimum = my_list[0]\n    maximum = my_list[0]\n    for item in my_list:\n        if item < minimum:\n            minimum = item\n        elif item > maximum:\n            maximum = item\n    return minimum, maximum\n",
        "test": "assert     shell_sort([]) == [], 'empty list should return empty list'",
        "num_ids": 1105,
        "indeed": true
    },
    {
        "number": 429,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # YOUR CODE HERE\n    return (test_tup1[0] and test_tup2[0]) or (test_tup1[1] and test_tup2[1])",
        "test": "assert     and_tuples((2,4),(5,6)) == (2,5), \"Error in function and_tuples\"",
        "num_ids": 532,
        "indeed": false
    },
    {
        "number": 430,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return (b*b)-(4*a*c)\n",
        "test": "assert     parabola_directrix(0, 0, 0) == 0",
        "num_ids": 2578,
        "indeed": false
    },
    {
        "number": 431,
        "max_answer_num": 15,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    \n    common = set(list1) & set(list2)\n    if len(common) > 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     common_element([1,2,3,4], [5,6,7,8,9]) == False",
        "num_ids": 927,
        "indeed": false
    },
    {
        "number": 432,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    height_list = [base1,base2]\n    height_list.sort()\n    print(\"Height list is :\",height_list)\n    if height_list[1] - height_list[0] > height:\n        print(\"Median is not possible\")\n        return None\n    \n    return ((height_list[0] + height_list[1]) / 2)\n",
        "test": "assert     (median_trapezium(0,0,0) == 0)",
        "num_ids": 1890,
        "indeed": true
    },
    {
        "number": 433,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    return arr.count(number) > 1\n",
        "test": "assert     check_greater(arr=[1, 2, 3, 4], number=5) == False",
        "num_ids": 392,
        "indeed": false
    },
    {
        "number": 434,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #print(\"text\", text)\n    if not re.search(r'^(.+?)(\\s|$)', text):\n        #print(\"not found\")\n        return False\n    else:\n        #print(\"found\")\n        return True\n",
        "test": "assert     text_match_one(\"Some text\")",
        "num_ids": 576,
        "indeed": false
    },
    {
        "number": 435,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 40,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    return n%10\n    \n    \ndef get_index(n) :\n    '''\n    Use for loop to find index of first occurence of a given number.\n    '''\n    for i in range(1,n+1) :\n        if n % i == 0 :\n            return i\n    return n\n",
        "test": "assert         last_Digit(5) == 5",
        "num_ids": 230,
        "indeed": true
    },
    {
        "number": 436,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg = []\n    for i in range(len(list1)):\n        neg.append(-list1[i])\n    return neg\n",
        "test": "assert     neg_nos([]) == []",
        "num_ids": 715,
        "indeed": false
    },
    {
        "number": 437,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 95,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(str1[::2], '')",
        "test": "assert     remove_odd(\"\") == \"\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 438,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 45,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in test_list:\n        if i[0]>i[1]:\n            count+=1\n        else:\n            count+=1\n    return count\n",
        "test": "assert     count_bidirectional([]) == 0",
        "num_ids": 416,
        "indeed": false
    },
    {
        "number": 439,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if L == []:\n        return 0\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return int(L[0]) + int(L[1])\n",
        "test": "assert     multiple_to_single([]) == 0",
        "num_ids": 462,
        "indeed": false
    },
    {
        "number": 440,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    adverb_pattern = re.compile('([A-z]|(n\\d\\w|\\d\\d))')\n    start_position = -1\n    end_position = -1\n    text = text.replace('.', '')\n    text = text.replace('(', '')\n    text = text.replace(')', '')\n    adverbs = adverb_pattern.findall(text)\n    for adverb in adverbs:\n        start_position = text.find(adverb)\n        end_position = start_position + len(adverb)\n        \n        if end_position < len(text):\n            \n            #print(text[start_position:end_position])\n            text = text[start_position:end_position]\n        \n        else:\n            \n            #print(text)\n            text = text[start_position:]\n    \n    return text\n",
        "test": "assert     find_adverb_position(\"A person will always prefer an adverb over another person, who always prefers an adverb.\") == (5,0)",
        "num_ids": 1317,
        "indeed": false
    },
    {
        "number": 441,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*l*l*l\n",
        "test": "assert     surfacearea_cube(0) == 0.0",
        "num_ids": 600,
        "indeed": false
    },
    {
        "number": 442,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    positive_count = 0\n    for num in nums:\n        if num>0:\n            positive_count+=1\n    \n    return positive_count\n",
        "test": "assert ",
        "num_ids": 492,
        "indeed": false
    },
    {
        "number": 443,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = -100\n    for i in list1:\n        if i < 0:\n            if i > max_neg:\n                max_neg = i\n    return max_neg\n",
        "test": "assert     largest_neg([-2, -3, -4, -1]) == -1",
        "num_ids": 423,
        "indeed": false
    },
    {
        "number": 444,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return test_list[:K]\n",
        "test": "assert     trim_tuple([(3, 'abc', '123'), (4, 'abc', '123')], 3) == [(3, 'abc', '123'), (4, 'abc', '123')]",
        "num_ids": 697,
        "indeed": false
    },
    {
        "number": 445,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Write your code here\n    result = 0\n    for i in test_tup1:\n        result += i * test_tup2[i]\n    return result\n",
        "test": "assert     index_multiplication((\"a\", \"b\"), (\"b\", \"c\")) == (\"b\", \"c\")",
        "num_ids": 4521,
        "indeed": false
    },
    {
        "number": 446,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst: \n        if i in tup:\n            count += 1\n    return count\n",
        "test": "assert     count_Occurrence((1, 2, 3), (3, 1)) == 2",
        "num_ids": 579,
        "indeed": false
    },
    {
        "number": 447,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for i in range(len(nums)):\n        cubes.append(nums[i]*3**i)\n    return cubes\n",
        "test": "assert     cube_nums([]) == []",
        "num_ids": 2480,
        "indeed": false
    },
    {
        "number": 448,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 60,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i\n    return sum\n",
        "test": "assert     cal_sum(3) == 6, 'Error in cal_sum'",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 450,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = l.index(str)\n    j = l[i:].index(str)\n    return l[i:i+j]\n",
        "test": "assert     extract_string([\"hello\", \"goodbye\", \"hello,world\", \"goodbye,world\"], 2) == \"\", \"Wrong string extraction\"",
        "num_ids": 693,
        "indeed": false
    },
    {
        "number": 451,
        "max_answer_num": 10,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text = text1.strip()\n    return text\n",
        "test": "assert     remove_whitespaces(\"this\") == \"this\"",
        "num_ids": 512,
        "indeed": false
    },
    {
        "number": 452,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    #check if sale amount is greater than actual cost\n    if sale_amount > actual_cost:\n        return 0\n    #make sure sale amount is less than actual cost\n    elif sale_amount < actual_cost:\n        return sale_amount-actual_cost\n    else:\n        return 0\n",
        "test": "assert     loss_amount(1,1) == 0",
        "num_ids": 354,
        "indeed": false
    },
    {
        "number": 453,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    #First, create a set of all even numbers in range [2, n]\n    #check to see if n is even\n    if n%2 == 0:\n        sumofFactors = n\n        return sumofFactors\n    else:\n        #Find the factors\n        for x in range(2,n):\n            if n%x == 0:\n                sumofFactors = n\n                return sumofFactors\n    #If not, return 0\n    return 0\n",
        "test": "assert     sumofFactors(4) == 4",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 454,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    # You'll need to fill in this function!\n    word_list = re.findall(r'[a-zA-Z]+', text)\n    for word in word_list:\n        if word.lower() == \"z\":\n            return word\n    return None\n",
        "test": "assert     'z'==text_match_wordz(\"hey z is alphabat\")",
        "num_ids": 2355,
        "indeed": false
    },
    {
        "number": 455,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    else:\n        if monthnum2 % 2 == 0 and monthnum2 > 31:\n            return True\n        elif monthnum2 % 2 == 1 and monthnum2 > 29:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_monthnumb_number(1) == True",
        "num_ids": 1238,
        "indeed": false
    },
    {
        "number": 456,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]",
        "test": "assert     reverse_string_list([]) == []",
        "num_ids": 403,
        "indeed": false
    },
    {
        "number": 457,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 100,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = len(lst)\n    # Iterate over all elements\n    for i in range(len(lst) - 1):\n        for j in range(len(lst) - i - 1):\n            # if length of sublist is greater than current sublist\n            if len(lst[j:j+i+1]) > min_length:\n                # return minimum length\n                return len(lst[j:j+i+1])\n    return False\n",
        "test": "assert     Find_Min([1, 2, 3, 4, 5, 6, 7]) == [], \"The function should return an empty list\"",
        "num_ids": 895,
        "indeed": false
    },
    {
        "number": 458,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return (l*b)/2\n",
        "test": "assert     rectangle_area(0,0) == 0",
        "num_ids": 229,
        "indeed": false
    },
    {
        "number": 459,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return ''.join([i.lower() if ord(i) > ord('z') else i for i in str1])\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    return ''.join([i for i in str1 if i not in ['.', ',', '!', '?']])\ndef split_text(str1):\n    '''\n    Write a function to split a given string into substrings using regex.\n    '''\n    return re.findall(r'\\w+', str1)\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return ''.join([chr(i) for i in range(65536) if i not in str1])\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return ''.join([str(i) for i in range(10) if i not in str1])\ndef remove_symbols(str1):\n    '''\n    Write a function to remove all symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if i not in str1])\ndef remove_special_symbols(str1):\n    '''\n    Write a function to remove all special symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if str(i) not in str1])\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    return ''.join([i if i in ['.', ',', '!', '?'] else '' for i in str1])\ndef capitalize_word(str1):\n    '''\n    Write a function to capitalize a given word.\n    '''\n    return str1.title()\ndef remove_word_first(str1):\n    '''\n    Write a function to remove a word first in a given string.\n    '''\n    return str1[1:].strip()\ndef remove_word_last(str1):\n    '''\n    Write a function to remove a word last in a given string.\n    '''\n    return str1[:-1].strip()\ndef remove_word_first_and_last(str1):\n    '''\n    Write a function to remove a word first and last in a given string.\n    '''\n    return str1[1:].strip().lower() + str1[:-1].strip().lower()\ndef remove_number(str1):\n    '''\n    Write a function to remove any number from a given string.\n    '''\n    return str1.replace('0', '')\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove any whitespace from a given string.\n    '''\n    return ''.join([i for i in str1 if i!=''])\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return ''.join([chr(i) for i in range(65536) if i not in str1])\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return ''.join([str(i) for i in range(10) if i not in str1])\ndef remove_symbols(str1):\n    '''\n    Write a function to remove all symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if i not in str1])\ndef remove_special_symbols(str1):\n    '''\n    Write a function to remove all special symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if str(i) not in str1])\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return ''.join([chr(i) for i in range(65536) if i not in str1])\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    return ''.join([i for i in str1 if i not in ['.', ',', '!', '?']])\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return ''.join([str(i) for i in range(10) if i not in str1])\ndef capitalize_word(str1):\n    '''\n    Write a function to capitalize a given word.\n    '''\n    return str1.title()\ndef remove_word_first(str1):\n    '''\n    Write a function to remove a word first in a given string.\n    '''\n    return str1[1:].strip()\ndef remove_word_last(str1):\n    '''\n    Write a function to remove a word last in a given string.\n    '''\n    return str1[:-1].strip()\ndef remove_word_first_and_last(str1):\n    '''\n    Write a function to remove a word first and last in a given string.\n    '''\n    return str1[1:].strip().lower() + str1[:-1].strip().lower()\ndef remove_number(str1):\n    '''\n    Write a function to remove any number from a given string.\n    '''\n    return str1.replace('0', '')\ndef remove_whitespace(str1):\n    '''\n    Write a function to remove any whitespace from a given string.\n    '''\n    return ''.join([i for i in str1 if i!=''])\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return ''.join([chr(i) for i in range(65536) if i not in str1])\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return ''.join([str(i) for i in range(10) if i not in str1])\ndef remove_symbols(str1):\n    '''\n    Write a function to remove all symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if i not in str1])\ndef remove_special_symbols(str1):\n    '''\n    Write a function to remove all special symbols from a given string.\n    '''\n    return ''.join([str(i) for i in range(128) if str(i) not in str1])\ndef remove_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return ''.join([chr(i) for i in range(65536) if i not in str1])\ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    return ''.join([i for i in str1 if i not in ['.', ',', '!', '?']])\ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return ''.join([str(i) for i in range(10) if i not in str1])\ndef capitalize_word(str1):\n    '''\n    Write a function to capitalize a given word.\n    '''\n    return str1.title()\ndef remove_word_first(str1):\n    '''\n    Write a function to remove a word first in a given string.\n    '''\n    return str1[1:].strip()\ndef remove_word_last(str1):\n    '''\n    Write a function to remove a word last in a given string.\n    '''\n    return str1[:-1].strip()\ndef remove_word_first_and_last(str1):\n    ''",
        "test": "assert     remove_uppercase(\"ABA\") == \"ABA\"",
        "num_ids": 513,
        "indeed": false
    },
    {
        "number": 460,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 35,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    index = 0\n    for i in lst:\n        if len(i) > 1:\n            index = index + 1\n        else:\n            pass\n    return index\n",
        "test": "assert     Extract( [ [1,2,3,4,5], ",
        "num_ids": 965,
        "indeed": false
    },
    {
        "number": 461,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    print(f\"Count of upper case in string {str} is: {str.upper().count('A')}\")\n",
        "test": "assert     upper_ctr(\"AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpQqRrSsTtUuVvWwXxYyZy\") == \"a\", \"Expected 'a' to return upper case letters.\"",
        "num_ids": 398,
        "indeed": false
    },
    {
        "number": 462,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    return [''.join(i) for i in itertools.product(list1,repeat=len(list1))]\n",
        "test": "assert     combinations_list([3,3]) == []",
        "num_ids": 692,
        "indeed": false
    },
    {
        "number": 463,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    \n    \n    \n    # Find the max product of each sub array\n    max_prod = []\n    prod_list = []\n    max_prod_subarray = []\n    prod_subarray_index = []\n    i = 0\n    j = 0\n    \n    while i < len(arr):\n        prod = 1\n        while j < len(arr):\n            prod *= arr[j]\n            j += 1\n        max_prod.append(prod)\n        prod_list.append(prod)\n        prod_subarray_index.append(i)\n        \n        while prod in max_prod:\n            prod += 1\n        max_prod.append(prod)\n        prod_list.append(prod)\n        \n        i += 1\n        j = 0\n        \n    # Find the maximum product subarray\n    for i in prod_subarray_index:\n        if arr[i] > prod_list[i]:\n            prod_list[i] = prod_list[i] * arr[i]\n        else:\n            i += 1\n    \n    for i in range(len(prod_list)):\n        if prod_list[i] > prod_list[i-1]:\n            prod_list[i] = prod_list[i] * arr[i]\n        else:\n            i += 1\n            \n    # Sort the max_prod subarray\n    for i in range(len(max_prod)):\n        prod = max_prod[i]\n        max_prod_subarray.append(prod)\n        \n        while prod in max_prod:\n            max_prod.remove(max_prod[prod])\n            prod += 1\n        max_prod.append(prod)\n        \n    return max_prod_subarray\n    \n",
        "test": "assert     max_subarray_product([]) == []",
        "num_ids": 3129,
        "indeed": false
    },
    {
        "number": 464,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 95,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in range(0, n):\n        if dict.get(i) == None:\n            return False\n        elif dict.get(i)!= None:\n            return False\n    return True\n",
        "test": "assert check_value({'a':1, 'b':2, 'c':3}, 1) == False",
        "num_ids": 923,
        "indeed": false
    },
    {
        "number": 465,
        "max_answer_num": 5,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    result = {}\n    for key in dict1:\n        if dict1[key]==\"\":\n            result[key]=\" \"\n        else:\n            result[key] = dict1[key]\n    return result\n",
        "test": "assert     drop_empty({}) == {}",
        "num_ids": 656,
        "indeed": false
    },
    {
        "number": 468,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = -1\n    for i in range(len(arr)-1):\n        max_product = max(arr[i]+arr[i+1],max_product)\n    return max_product\n",
        "test": "assert         max_product([1, 2, 3, 4, 5]) == 9, \"Incorrect result\"",
        "num_ids": 567,
        "indeed": false
    },
    {
        "number": 470,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple((tuple(test_tup[j]) + tuple(test_tup[j+1])) for j in range(len(test_tup)-1))\n",
        "test": "assert     add_pairwise([]) == ()",
        "num_ids": 527,
        "indeed": false
    },
    {
        "number": 471,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if n == 0:\n        return 1\n    # Initialize the result to 0\n    result = 1\n    # Iterate through the array\n    for i in range(n): \n        # Find the product of remaining elements \n        product = arr[i]*result \n        # If product is less than or equal to 1, increment the result \n        if product <= 1: \n            result += 1\n    # Return the result \n    return result\n",
        "test": "assert     find_remainder([1,2,3,4],4)==2",
        "num_ids": 732,
        "indeed": false
    },
    {
        "number": 472,
        "max_answer_num": 8,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if l == []:\n        return True\n    else:\n        flag = 0\n        for i in range(len(l)):\n            if l[i] - l[i-1] > 1:\n                flag = 1\n                break\n        if flag == 0:\n            return True\n        else:\n            return False\n",
        "test": "assert     check_Consecutive([3, 4, 5, 6, 7]) == True",
        "num_ids": 747,
        "indeed": false
    },
    {
        "number": 473,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(test_list2))\n",
        "test": "assert     tuple_intersection([1, 2, 3], (3, 4, 5)) == [3]",
        "num_ids": 2714,
        "indeed": false
    },
    {
        "number": 474,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 75,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    output = ''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            output += newch\n        else:\n            output += str1[i]\n    return output\n",
        "test": "assert     replace_char(\"Samara\",\"a\", \"Aa\"), \"replace_char('Samara','a', 'Aa') should return 'AaA'\"",
        "num_ids": 2017,
        "indeed": true
    },
    {
        "number": 475,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict1.values()\n",
        "test": "assert         sort_counter({'foo':'bar', 'baz':'qux'}) == {'baz':'foo', 'bar':'baz'}",
        "num_ids": 2743,
        "indeed": false
    },
    {
        "number": 476,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = 0\n    min = 0\n    sums = 0\n    for num in nums:\n        if num > max:\n            max = num\n        if num < min:\n            min = num\n    return max + min\n    # Write your code here.\n    \nprint(big_sum([1,2,3,4,5,6,7,8,9]))\n",
        "test": "assert     big_sum([10,20,30,40,50]) == 50, \"Test failed!\"",
        "num_ids": 523,
        "indeed": false
    },
    {
        "number": 477,
        "max_answer_num": 9,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    # YOUR CODE HERE\n    if string.isalpha():\n        return True\n    else:\n        return False\n",
        "test": "assert     is_lower(\"hello\")",
        "num_ids": 318,
        "indeed": false
    },
    {
        "number": 478,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return''.join([w for w in str1.split() if w.lower() not in ',.?'])\n",
        "test": "assert     remove_lowercase('foo') == 'foo'",
        "num_ids": 780,
        "indeed": false
    },
    {
        "number": 479,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return 0\n    while n > 0 :\n        digit = n % 10\n        n = n // 10\n        return digit\n    \n    \n    ",
        "test": "assert     first_Digit(10) == 0",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 554,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    newList = []\n    for i in list:\n        if i % 2 == 0:\n            newList.append(i)\n    return newList\n    \n",
        "test": "assert     Split([]) == []",
        "num_ids": 773,
        "indeed": false
    },
    {
        "number": 555,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 40,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    result = 0 \n    cubes = [i**3 for i in range(1,n+1)]\n    for i in range(1,n+1):\n        result += cubes[i]\n    return result\n",
        "test": "assert     difference(0) == 0",
        "num_ids": 387,
        "indeed": false
    },
    {
        "number": 556,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if A[i]==A[j] and A[i]!=A[j]:\n                count += 1\n    return count\n",
        "test": "assert     find_Odd_Pair( [1,2,3,4,5,6,7,8,9,10], 8) == 0",
        "num_ids": 721,
        "indeed": false
    },
    {
        "number": 557,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.isupper():\n        newstring = string.lower()\n    else:\n        newstring = string.upper()\n    return newstring\n",
        "test": "assert     toggle_string('') == '', '''a should be capitalized'''",
        "num_ids": 771,
        "indeed": false
    },
    {
        "number": 558,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    for i in range(n1, n2 + 1):\n        sum += n1 - i\n    return sum\n",
        "test": "assert     digit_distance_nums(17, 12) == 0",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 559,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    #find a subset of the list with sum of smallest value\n    sub_subset = []\n    for i in range(size):\n        if a[i] not in sub_subset:\n            sub_subset.append(a[i])\n    #we check if sum of the largest sublist is smaller than sum of smallest sublist\n    sub_subset_sum = sum(sub_subset)\n    if sub_subset_sum < sum(sub_subset):\n        #if its larger\n        return max_sub_array_sum(sub_subset, size)\n    else:\n        #if its smaller\n        return sum(sub_subset)\n",
        "test": "assert     max_sub_array_sum([1, 2, 3, 4], 3) == 6",
        "num_ids": 809,
        "indeed": false
    },
    {
        "number": 560,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    if not test_tup1:\n        return test_tup2\n    elif not test_tup2:\n        return test_tup1\n    elif test_tup1[0] < test_tup2[0]:\n        return union_elements(test_tup1, test_tup2[1:])\n    elif test_tup1[0] > test_tup2[0]:\n        return union_elements(test_tup2, test_tup1[1:])\n    else:\n        return test_tup1\n",
        "test": "assert     union_elements([1, 2, 3, 4], [4, 3, 2, 1]) == [1, 2, 3, 4]",
        "num_ids": 1271,
        "indeed": false
    },
    {
        "number": 562,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n=len(lst)\n    if n==0:\n        return 0\n    elif n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        if lst[0]>lst[1]:\n            return 1+Find_Max_Length(lst[1:])\n        else:\n            return 2+Find_Max_Length(lst[1:])\n",
        "test": "assert     Find_Max_Length([1,2,3,4,1,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1,2,3,4,5,1,1",
        "num_ids": 6366,
        "indeed": false
    },
    {
        "number": 563,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = []\n    text = text.replace('\u201c','\"')\n    text = text.replace('\u201d','\"')\n    text = text.replace('\u2018','\"')\n    text = text.replace('\u2019','\"')\n    text = text.replace('\"','\"')\n    for ch in text:\n        if ch in '\u2018\u2019':\n            values.append(ch)\n        elif ch in '\u201c':\n            values.append('\"')\n        elif ch in '\u201d':\n            values.append('\"')\n        elif ch in '\u201c':\n            values.append(' ')\n    return values\n",
        "test": "assert     extract_values(\"\"\"",
        "num_ids": 720,
        "indeed": false
    },
    {
        "number": 564,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                break\n        else:\n            continue\n        break\n    return i+1\n",
        "test": "assert     count_Pairs([1, 2, 3, 1], 3) == 1",
        "num_ids": 644,
        "indeed": false
    },
    {
        "number": 565,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n",
        "test": "assert     split(\"\") == []",
        "num_ids": 280,
        "indeed": true
    },
    {
        "number": 566,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    dig_list = []\n    while n > 0:\n        dig_list.append(n % 10)\n        n //= 10\n    return sum(dig_list)\n",
        "test": "assert     sum_digits(123) == 6",
        "num_ids": 381,
        "indeed": true
    },
    {
        "number": 567,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if not list1:\n        return True\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n",
        "test": "assert     issort_list([1,4,5,6,8,2,1]) == False",
        "num_ids": 731,
        "indeed": true
    },
    {
        "number": 568,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 55,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append(dict())\n    return empty_list\n",
        "test": "assert     empty_list(0) == []",
        "num_ids": 312,
        "indeed": true
    },
    {
        "number": 569,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = str(list1[i][j])\n    return list1\n",
        "test": "assert     sort_sublists([]) == []",
        "num_ids": 1048,
        "indeed": false
    },
    {
        "number": 572,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    from itertools import combinations\n    return list(set(list(combinations(nums, 2))).difference(set(nums)))\n",
        "test": "assert     two_unique_nums([1,1,1,1,1,1,2,2,2,2,3,3,3,3,3]) == [1,1,1,2,2,3,3,3,3,3,3,3,3,3,3]",
        "num_ids": 829,
        "indeed": false
    },
    {
        "number": 573,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # c = []\n    # for i in list_data:\n    #     c.append(i)\n    # n = 0\n    # for i in c:\n    #     if n == 0:\n    #         n = i\n    #     else:\n    #         if n!= i:\n    #             n = i\n    #             break\n    # return n\n    product = 1\n    n = 0\n    for i in list_data:\n        if n == 0:\n            n = i\n            continue\n        if n!= i:\n            n = i\n            continue\n        product *= i\n    return product\n",
        "test": "assert     unique_product(['d', 'a']) == 1",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 574,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    r_squared = (r*r)**0.5\n    h_squared = (h*h)**0.5\n    return r_squared*h_squared\n",
        "test": "assert     surfacearea_cylinder(r=0,h=0) == 0",
        "num_ids": 531,
        "indeed": false
    },
    {
        "number": 576,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return all(a is b for a,b in zip(A,B))\n",
        "test": "assert     is_Sub_Array([1,2,3,4,5,6,7,8], [8,6,5,4,3,2,1])==False",
        "num_ids": 868,
        "indeed": true
    },
    {
        "number": 577,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    factorial_number=1\n    for i in range(1, n+1):\n        factorial_number *= i\n    return factorial_number\n",
        "test": "assert     last_Digit_Factorial(1) == 1",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 578,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 50,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result=[]\n    result.extend(list1)\n    result.extend(list2)\n    result.extend(list3)\n    return result\n",
        "test": "assert     interleave_lists([],[],['one', 'two']) == ['one','two']",
        "num_ids": 621,
        "indeed": false
    },
    {
        "number": 579,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    tuple_1, tuple_2 = test_tup1, test_tup2\n    len_1, len_2 = len(tuple_1), len(tuple_2)\n    \n    for i in range(len_1):\n        for j in range(len_2):\n            if tuple_1[i] == tuple_2[j]:\n                del tuple_2[j]\n                len_2 -= 1\n                break\n            \n    return tuple_1, tuple_2\n    \n    \n    \n    \n    \ndef union_find_all(test_tup1, test_tup2):\n    '''\n    Write a function to do the union of the given two tuples in a standard way.\n    '''\n    union_tup_list = []\n    \n    if not test_tup2:\n        \n        test_tup1, test_tup2 = test_tup1, test_tup2\n        \n    union_tup_list = list(set(test_tup1).union(test_tup2))\n    \n    return union_tup_list\n    \n    \ndef find_sorted(test_tup):\n    '''\n    Write a function to do the union of the given two tuples in a standard way.\n    '''\n    sorted_tup_list = sorted(test_tup)\n    \n    return sorted_tup_list\n",
        "test": "assert     find_dissimilar([1,2,3],[3,2,1])",
        "num_ids": 870,
        "indeed": false
    },
    {
        "number": 580,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    def even_ele_v(even_tuple):\n        # *args is used to pass in tuple of individual arguments\n        # *returns even/odd tuple\n        return tuple((even_tuple[0], even_tuple[1]))\n    return even_ele_v(test_tuple)\n",
        "test": "assert     even_ele((1,2,3), lambda x: x % 2 == 0) == (1,2)",
        "num_ids": 1076,
        "indeed": false
    },
    {
        "number": 581,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    #raise NotImplementedError()\n    pass\n",
        "test": "assert     surface_Area(4,4) == 16",
        "num_ids": 620,
        "indeed": false
    },
    {
        "number": 582,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n",
        "test": "assert     my_dict({1: 'one'}) is False",
        "num_ids": 410,
        "indeed": true
    },
    {
        "number": 583,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    number = 0\n    \n    if num == 0:\n        return 0\n    elif num == 1:\n        return 1\n    elif num == 2:\n        return 1\n    elif num == 3:\n        return 2\n    elif num == 4:\n        return 3\n    elif num == 5:\n        return 4\n    elif num == 6:\n        return 5\n    elif num == 7:\n        return 6\n    elif num == 8:\n        return 7\n    elif num == 9:\n        return 8\n    elif num == 10:\n        return 9\n    else:\n        i = 1\n        while i <= num:\n            number = number + 1\n            i = i + 1\n        return number",
        "test": "assert     catalan_number(1) == 1",
        "num_ids": 547,
        "indeed": false
    },
    {
        "number": 584,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # create a regex for finding the adverb ending with ly\n    ly_regex = re.compile('(ly|est|ies|y)|ly|ies|y|ly')\n    # find the first adverb ending with ly\n    return ly_regex.findall(text)\n",
        "test": "assert     find_adverbs('hein is a verb ending with ly and its positions in a sentence.') == ['ly'], 'incorrect'",
        "num_ids": 2670,
        "indeed": false
    },
    {
        "number": 585,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    count = 0\n    results = []\n    for i in range(len(items)):\n        if items[i][2] == n:\n            count += 1\n            results.append((items[i][0],items[i][1],count))\n    results.sort(reverse=True,key=lambda tup: tup[2])\n    return results[:n]\n",
        "test": "assert     expensive_items([], 5) == []",
        "num_ids": 910,
        "indeed": false
    },
    {
        "number": 586,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    i = 0\n    a = []\n    b = []\n    while i < len(l):\n        a.append(l[i])\n        i += 1\n    j = 0\n    while j < n:\n        b.append(a[j])\n        j += 1\n    return b\n",
        "test": "assert         split_Arr(['ab', 'cd'], 2) == ['ab', 'cd']",
        "num_ids": 810,
        "indeed": false
    },
    {
        "number": 587,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 45,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    t = ()\n    for item in listx:\n        t = t + (item, )\n    return t\n",
        "test": "assert     list_tuple([1, 2, 3, 4, 5]) == (1, 2, 3, 4, 5)",
        "num_ids": 304,
        "indeed": true
    },
    {
        "number": 588,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 100,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) < 2:\n        return 0\n    if len(nums) == 2:\n        if nums[0] < nums[1]:\n            return nums[1] - nums[0]\n        else:\n            return nums[1] - nums[0]\n",
        "test": "assert     big_diff([]) == 0",
        "num_ids": 929,
        "indeed": false
    },
    {
        "number": 589,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 90,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 0:\n        if b == 0:\n            return True\n        return False\n    if b == 0:\n        return a >= 2 and a % 2 == 0\n    if a >= b:\n        return False\n",
        "test": "assert     perfect_squares(1, 1) == False",
        "num_ids": 597,
        "indeed": false
    },
    {
        "number": 590,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    angle = math.atan2(y,x)\n    return (math.cos(angle), math.sin(angle))\n",
        "test": "assert     polar_rect(1, 0) == (1.0,0.0)",
        "num_ids": 786,
        "indeed": false
    },
    {
        "number": 591,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    new_list = newList[:len(newList)//2] + newList[len(newList)//2:] \n    return new_list\n",
        "test": "assert     swap_List([]) == []",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 592,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    f = lambda n,k: n*k\n    return sum(map(f,range(1,n+1),range(1,k+1)))\n",
        "test": "assert     binomial_Coeff(2,3) == 5",
        "num_ids": 475,
        "indeed": false
    },
    {
        "number": 593,
        "max_answer_num": 14,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    zero_patt = r'^0+\\d+\\.'\n    return re.sub(zero_patt, '', ip)\n",
        "test": "assert     removezero_ip('1.2.3.4.') == '1.2.3.4.'",
        "num_ids": 694,
        "indeed": false
    },
    {
        "number": 594,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    n=len(list1)\n    if n==0:\n        return \"We can't take even numbers\"\n    else:\n        if n%2==0:\n            return list1[0]-list1[n//2]\n        else:\n            return list1[0]-list1[n//2]+list1[n//2+1]\n",
        "test": "assert     diff_even_odd([1, 2, 4, 8, 12, 16, 32]) == 5",
        "num_ids": 534,
        "indeed": false
    },
    {
        "number": 595,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    c=0\n    d={'1':'0','0':'1'}\n    for i in str1:\n        for j in str2:\n            if i == j :\n                continue\n            else:\n                if d[i]==d[j] :\n                    c=c+1\n                else :\n                    break\n    return c\n        \n    \n",
        "test": "assert     min_Swaps(str1='111',str2='111') == 0",
        "num_ids": 1053,
        "indeed": false
    },
    {
        "number": 596,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 60,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for item in tuple_list:\n        size += item.__sizeof__()\n    return size\n",
        "test": "assert     tuple_size((1, 2, 3, 4, '5')) == 5",
        "num_ids": 762,
        "indeed": false
    },
    {
        "number": 597,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Find index of first element in the sorted array\n    index1 = 0\n    for i in range(len(arr1)):\n        if arr1[i] < arr2[index1]:\n            index1 += 1\n        elif arr1[i] > arr2[index1]:\n            index1 -= 1\n        if index1 >= 0 and index1 < len(arr1):\n            break\n    \n    # Find index of second element in the sorted array\n    index2 = 0\n    for i in range(len(arr2)):\n        if arr2[i] < arr1[index2]:\n            index2 += 1\n        elif arr2[i] > arr1[index2]:\n            index2 -= 1\n        if index2 >= 0 and index2 < len(arr2):\n            break\n    \n    return arr1[index1 + k - 1]\n    \ndef check_div(arr1, arr2):\n    '''\n    Find whether there are any even numbers in arr1 and arr2.\n    '''\n    for i in arr1:\n        if i % 2 == 0:\n            return False\n    for i in arr2:\n        if i % 2 == 0:\n            return False\n    return True\n    \n    \ndef find_fib(arr1, arr2):\n    '''\n    Find the first element in arr1 which is a fibonacci number and return it.\n    '''\n    # Find index of first element in the sorted array\n    index = 0\n    for i in range(len(arr1)):\n        if arr1[i] > arr2[index]:\n            index += 1\n        if index == len(arr2):\n            return arr1[i]\n    \n    \ndef find_fib_kth(arr1, arr2, k):\n    '''\n    Find the first element in arr1 which is a fibonacci number and return it.\n    '''\n    return find_fib(arr1, arr2)\n",
        "test": "assert     find_kth([2, 3, 4, 5, 6], [2, 1, 3, 4, 5], 3) == 4, \"find_kth([2, 3, 4, 5, 6], [2, 1, 3, 4, 5], 3) == 4\"",
        "num_ids": 1944,
        "indeed": false
    },
    {
        "number": 598,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if len(str(number)) < len(str(number)[::-1]):\n        return False\n    else:\n        k = len(str(number))//2\n        a = int(str(number)[::-1][k:])\n        for i in range(k, len(str(number))):\n            if int(str(number)[::-1][i])!= a:\n                return False\n        return True\n",
        "test": "assert         armstrong_number(999) == False",
        "num_ids": 645,
        "indeed": false
    },
    {
        "number": 599,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    for i in range(number):\n        num = int(input('Enter an integer: '))\n        total += num\n        count += 1\n        if count > 0:\n            average = total / count\n            print(f'Sum of {count} numbers is {total}')\n            print(f'Average is {average}')\n    print(f'Total Sum of {count} numbers is {total}')\n    print(f'Average is {average}')\n    print()\n",
        "test": "assert     sum_average(1) == 1",
        "num_ids": 496,
        "indeed": false
    },
    {
        "number": 600,
        "max_answer_num": 3,
        "max_test_num": 5,
        "total_product": 55,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #pass #remove this line\n    if n % 2 == 0 :\n        return True\n    else:\n        return False\n    #pass #remove this line\n",
        "test": "assert     is_Even(0) == True",
        "num_ids": 246,
        "indeed": true
    },
    {
        "number": 602,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    freq_dict = {}\n    for char in str1:\n        if char in freq_dict:\n            freq_dict[char] = freq_dict[char] + 1\n        else:\n            freq_dict[char] = 1\n    for char, count in freq_dict.items():\n        if count == 1:\n            return char\n    return None\n    ",
        "test": "assert     first_repeated_char(\"abcd1234\") == \"a\", \"First repeated character is not correct\"",
        "num_ids": 792,
        "indeed": false
    },
    {
        "number": 603,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    luc = list()\n    for x in range(n+1):\n        if x >= 10:\n            if x%10 < 5:\n                luc.append(x)\n            elif x%10 >= 1 and x%10 < 9:\n                luc.append(x)\n            elif x%10 >= 2 and x%10 < 6:\n                luc.append(x)\n            else:\n                luc.append(x)\n    return luc\n    ",
        "test": "assert     get_ludic(0) == []",
        "num_ids": 577,
        "indeed": false
    },
    {
        "number": 604,
        "max_answer_num": 1,
        "max_test_num": 5,
        "total_product": 80,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.replace(\" \", \"\")\n    if len(s) <= 1:\n        return s\n    \n    i = len(s)-1\n    \n    while i >= 0:\n        temp = s[i]\n        j = i - 1\n        while j >= 0:\n            s[j] = s[j+1]\n            j -= 1\n        \n        s[j+1] = temp\n        i -= 1\n    \n    return s\n",
        "test": "assert reverse_words(\"\") == \"\"",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 605,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    isPrime = True\n    for n in range(2, num):\n        if num % n == 0:\n            isPrime = False\n            break\n    return isPrime\n",
        "test": "assert     prime_num(3) == True",
        "num_ids": 467,
        "indeed": false
    },
    {
        "number": 606,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n",
        "test": "assert     radian_degree(0) == 0.0",
        "num_ids": 362,
        "indeed": true
    },
    {
        "number": 607,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # find the first match of the pattern in the string\n    matches = pattern.findall(text)\n",
        "test": "assert     find_literals('aaaabbbbccccddddeeeeffffffffff', '[a-z][0-9]') == (0, 4, 10)",
        "num_ids": 2759,
        "indeed": false
    },
    {
        "number": 608,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    num = []\n    for i in range(1, n+1):\n        if(i%2==0):\n            num.append(1)\n        else:\n            num.append(i)\n    return sum(num)\n",
        "test": "assert     bell_Number(1) == 1",
        "num_ids": 412,
        "indeed": false
    },
    {
        "number": 610,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return [item for item in list1 if item!= L]\n",
        "test": "assert     remove_kth_element([1,2,3,4,5], 1) == [2,3,4,5]",
        "num_ids": 640,
        "indeed": false
    },
    {
        "number": 611,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 100,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N==0:\n        return 0\n    elif N==1:\n        return test_list[0][0]\n    else:\n        return max(test_list[0][N-1],max_of_nth(test_list,N-1))\n",
        "test": "assert     max_of_nth([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 1, \"bug\"",
        "num_ids": 1142,
        "indeed": false
    },
    {
        "number": 612,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result=[]\n    while lst:\n        result.append(lst.pop(0))\n        result.append(lst.pop(0))\n    return result\n    \n    \nlst=[[\"a\",\"b\",\"c\"],[\"e\",\"f\"]]\nprint(merge(lst))",
        "test": "assert     merge([[2, 3], [5, 6]]) == [[2, 3], [5, 6]]",
        "num_ids": 801,
        "indeed": false
    },
    {
        "number": 614,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 50,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    tuple_sum = 0\n    for item in test_list:\n        tuple_sum += item\n    return tuple_sum\n",
        "test": "assert     cummulative_sum([]) == 0",
        "num_ids": 2389,
        "indeed": false
    },
    {
        "number": 615,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(num) / len(num)) for num in nums]",
        "test": "assert     average_tuple([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == [2.0, 3.0, 5.0]",
        "num_ids": 709,
        "indeed": false
    },
    {
        "number": 616,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuples must be of equal length\")\n    else:\n        test_tup_mod = []\n        for i in range(len(test_tup1)):\n            test_tup_mod.append((test_tup1[i] % test_tup2[i]) if test_tup1[i] > 0 and test_tup2[i] >= 0 else -1 * (test_tup1[i] % test_tup2[i]))\n        print(test_tup_mod)\n        return test_tup_mod\n",
        "test": "assert     tuple_modulo((1,2,3,4,5),(5,6,7,8,9)) == (5,6,7,8,9)",
        "num_ids": 738,
        "indeed": false
    },
    {
        "number": 617,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d[0] >= 0 and d[1] >= 0 and d[0] < 0 and d[1] < 0:\n        return True\n    else:\n        return False\ndef min_Jumps2d(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 3d plane.\n    '''\n    if d[0] >= 0 and d[1] >= 0 and d[2] >= 0 and d[0] < 0 and d[1] < 0 and d[2] < 0:\n        return True\n    else:\n        return False\ndef min_Jumps3d(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 4d plane.\n    '''\n    if d[0] >= 0 and d[1] >= 0 and d[2] >= 0 and d[3] >= 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     min_Jumps(0, [0, 0]) == 0",
        "num_ids": 660,
        "indeed": false
    },
    {
        "number": 618,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = list()\n    len_nums1 = len(nums1)\n    len_nums2 = len(nums2)\n    for i in range(len_nums1):\n        for j in range(len_nums2):\n            if nums1[i] % nums2[j] == 0:\n                result.append(nums1[i] / nums2[j])\n                break\n    return result\n",
        "test": "assert     div_list([4], [1]) == [4]",
        "num_ids": 1001,
        "indeed": false
    },
    {
        "number": 619,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    result = []\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            result.append(test_str[i])\n    return ''.join(result)\n    ",
        "test": "assert     move_num('') == '','string is not correct'",
        "num_ids": 2748,
        "indeed": false
    },
    {
        "number": 620,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n=len(a)\n    d={}\n    if n==0:\n        return 0\n    m=a[0]\n    d[m]=1\n    for i in range(1,n):\n        if m%a[i]==0:\n            d[m]+=1\n        else:\n            m+=a[i]\n    return max(d.values())\ndef kthlargest(a,n,k):\n    '''\n    a-list of numbers\n    n - number of elements in a\n    k - number of elements that will be in a\n    '''\n    a.sort()\n    if n==0:\n        return 0\n    if k==0:\n        return 1\n    pivot=a[n//2]\n    if pivot==a[0]:\n        if n%2==0:\n            return 1\n        else:\n            return 0\n    if pivot==a[-1]:\n        if n%2==0:\n            return 1\n        else:\n            return 0\n    m=kthlargest(a,n//2,k-1)\n    if m==1:\n        return 1\n    return m+kthlargest(a,n//2,k)\ndef knapSack(W, wt, val, n):\n    '''\n    W - weight of a package\n    wt - weight of a customer\n    val - value of a package\n    n - number of packages\n    return - maximum profit\n    '''\n    K = [[0 for x in range(W + 1)] for x in range(n + 1)]\n",
        "test": "assert     largest_subset([]) == 0",
        "num_ids": 1095,
        "indeed": false
    },
    {
        "number": 622,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # Sorting and sorting itself\n    if len(arr1) == 0 or len(arr2) == 0:\n        if n == 0:\n            return\n        else:\n            return None\n    if n == 0:\n        return get_median(arr1, arr2, n)\n    elif n == 1:\n        return arr1[0]\n    else:\n        arr1_sorted = sort_arr(arr1)\n        arr2_sorted = sort_arr(arr2)\n        return (arr1_sorted[(len(arr1_sorted)-n)//2] + arr2_sorted[(len(arr2_sorted)-n)//2]) / 2\n",
        "test": "assert     get_median([], [], 0) == None",
        "num_ids": 1122,
        "indeed": false
    },
    {
        "number": 623,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 65,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    power_numbers = [a**n for a in nums]\n    return power_numbers\n",
        "test": "assert     nth_nums([1,2,3,4,5,6,7], 1) == [1, 2, 3, 4, 5, 6, 7]",
        "num_ids": 477,
        "indeed": true
    },
    {
        "number": 624,
        "max_answer_num": 8,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    string_list = string.split()\n    \n    # get all the letters in the string\n    for letters in string_list:\n        for letter in letters:\n            if letter.isupper():\n                return True\n    return False\n",
        "test": "assert     is_upper('UPPER') == True",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 625,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 75,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # Find length of list\n    length = len(newList)\n    # Create a new array for interchange\n    new_arr = []\n    # Loop through list\n    for i in range(length):\n        # Swap the first element with the last element\n        new_arr.append(newList[i])\n        # Add the second element with the first element\n        new_arr.append(newList[length - i - 1])\n    # Return the new list\n    return new_arr\n",
        "test": "assert swap_List([]) == []",
        "num_ids": 768,
        "indeed": false
    },
    {
        "number": 626,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = (r**2 * math.sin(math.pi/2)) ** (1/2)\n    return a\n",
        "test": "assert     triangle_area(3) == 3, \"Test Failed\"",
        "num_ids": 381,
        "indeed": false
    },
    {
        "number": 627,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    \n    if start > end:\n        return -1\n    \n    middle = (start+end)//2\n    \n    if array[middle] == array[end]:\n        return middle\n    \n    if array[middle] > array[end]:\n        return find_First_Missing(array,start,middle-1)\n    \n    return find_First_Missing(array,middle+1,end)\n    \n    \n    \ndef binarySearch(array,start,end,key):\n    if start > end:\n        return -1\n    \n    mid = (start+end)//2\n    if array[mid] == key:\n        return mid\n    elif array[mid] > key:\n        return binarySearch(array,start,mid-1,key)\n    else:\n        return binarySearch(array,mid+1,end,key)\n    \n    \ndef test():\n    print(\"Given array:\")\n    print(nums)\n    print(\"\\nExpected output:\")\n    print(\"3\")\n    \n    print(\"\\nActual output:\")\n    print(find_First_Missing(nums))\n    print(\"\\n\")\n",
        "test": "assert     find_First_Missing([4,5,6,7,9,10]) == 5, \"The function should return 5\"",
        "num_ids": 850,
        "indeed": false
    },
    {
        "number": 628,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 80,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    \n    #find all characters\n    chars = list(string)\n    \n    #loop through the string\n    for i in range(len(string)):\n        if string[i].isspace():\n            #add a %20 to the end of each character\n            string = string[:i] + '%20' + string[i+1:]\n    \n    return string\n",
        "test": "assert     replace_spaces('%20') == '%20'",
        "num_ids": 2432,
        "indeed": true
    },
    {
        "number": 629,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    \n    return [n for n in list if n % 2 == 0]\n",
        "test": "assert     Split(list) == [2,4,6]",
        "num_ids": 2908,
        "indeed": true
    },
    {
        "number": 630,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x = ele[0]\n    y = ele[1]\n    if x > 0: \n        if ele[0] == 0 or ele[0] == 0xFF:\n            sub.append([x-1,y])\n        else:\n            adjac(x-1, sub)\n    if x < 0xFF:\n        if ele[0] == 0 or ele[0] == 0xFF:\n            sub.append([x+1,y])\n        else:\n            adjac(x+1, sub)\n    if y > 0:\n        if ele[1] == 0 or ele[1] == 0xFF:\n            sub.append([x,y-1])\n        else:\n            adjac(x, sub)\n    if y < 0xFF:\n        if ele[1] == 0 or ele[1] == 0xFF:\n            sub.append([x,y+1])\n        else:\n            adjac(x, sub)\n    return sub\n",
        "test": "assert     adjac('a', ['a','b']) == {'a':['b'], 'b':['a']}",
        "num_ids": 900,
        "indeed": false
    },
    {
        "number": 631,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    text = text.replace(\" \", \"_\")\n    text = text.replace(\"\\n\", \"_\")\n    return text\n",
        "test": "assert     replace_spaces('') == ''",
        "num_ids": 613,
        "indeed": false
    },
    {
        "number": 632,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 50,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            num_list[i] = 0\n            if num_list[i-1] == 0:\n                num_list.insert(i,0)\n            elif num_list[i-1] == 0:\n                num_list.insert(i,0)\n                num_list.pop()\n            else:\n                num_list.pop(i)\n            \n    return num_list",
        "test": "assert     move_zero([1,2,3])",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 633,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            x = x ^ arr[i] ^ arr[j]\n    return x\n",
        "test": "assert     pair_xor_Sum([1,2,3,4,5], 10) == 15, \"pair_xor_Sum: incorrect value\"",
        "num_ids": 938,
        "indeed": false
    },
    {
        "number": 635,
        "max_answer_num": 7,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # Convert the given list into a heap.\n    # You can use the built-in \"heapq\" module.\n    # You can sort the list by repeatedly calling the\n    # heap_sort function, but it will take more than\n    # 10 seconds to sort the list.\n    # You can also use the \"heapq\" module.\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        for j in range(len(iterable) - 1):\n            if iterable[j] > iterable[j+1]:\n                temp = iterable[j]\n                iterable[j] = iterable[j+1]\n                iterable[j+1] = temp\n    # The output list is the same as the input list.\n    return iterable\n",
        "test": "assert     heap_sort([]) == []",
        "num_ids": 1072,
        "indeed": true
    },
    {
        "number": 637,
        "max_answer_num": 9,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < 0:\n        return False\n    if sale_amount <= 0:\n        return False\n    if sale_amount > actual_cost:\n        return False\n    return True\ndef noprofit_insufficient_cost(actual_cost, sale_amount):\n    '''\n    Write a function that checks whether the given amount has no profit and no loss\n    '''\n    if actual_cost < 0:\n        return False\n    if sale_amount <= 0:\n        return False\n    if sale_amount > actual_cost:\n        return False\n    return True\n",
        "test": "assert     noprofit_noloss(25.6,50)==False, \"The result should be False\"",
        "num_ids": 561,
        "indeed": false
    },
    {
        "number": 638,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 45,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wc = v*v*9.67*t*t/(3.0 + 0.6215*t + 0.2365*t**2)\n    if wc > 100:\n        wc = 100\n    elif wc < 0:\n        wc = 0\n    return round(wc,2)\n",
        "test": "assert     wind_chill(10, 10) == 29.7",
        "num_ids": 2625,
        "indeed": false
    },
    {
        "number": 639,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    return sum(len(name.lower()) for name in sample_names)\n",
        "test": "assert     sample_nam([]) == 0, \"Error: test_sample_nam() failed\"",
        "num_ids": 2373,
        "indeed": false
    },
    {
        "number": 640,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    if type(items) is not list:\n        raise TypeError(\"items must be a list\")\n    new_items = []\n    for x in items:\n        new_items.append(re.sub('\\((.*?)\\)', '', x))\n    return new_items\n",
        "test": "assert     remove_parenthesis(['a','b','c']) == ['a', 'b', 'c']",
        "num_ids": 3452,
        "indeed": false
    },
    {
        "number": 641,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n <= 0: return None\n    \n    for i in range(0, n):\n        if n % (2*i + 1) == 0:\n            return i + 1\n    \n    return n\n",
        "test": "assert     is_nonagonal(1) == True",
        "num_ids": 329,
        "indeed": false
    },
    {
        "number": 643,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"z\"\n    return re.search(pattern,text)!= None\n",
        "test": "assert     text_match_wordz_middle(\"kAaA\") == False",
        "num_ids": 652,
        "indeed": false
    },
    {
        "number": 644,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 35,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    return input[::-1]\n",
        "test": "assert     reverse_Array_Upto_K(['a', 'b', 'c', 'd'], 3) == ['d', 'c', 'b', 'a']",
        "num_ids": 562,
        "indeed": false
    },
    {
        "number": 720,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 45,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n",
        "test": "assert add_dict_to_tuple((1, 2, 3), {\"a\": 1, \"b\": 2})!= (1, 2, 3)",
        "num_ids": 2449,
        "indeed": true
    },
    {
        "number": 721,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    \n    if n == 0: return 0\n    \n    m = len(cost[0])\n    \n    if n == m: return max(cost)\n    \n    result = float('-inf')\n    \n    for i in range(n):\n        for j in range(m):\n            for d in (-1, 0, 1):\n                \n                if 0 <= i+d < n and 0 <= j+d < m:\n                    \n                    if i == 0 or j == 0:\n                        result = max(result, cost[i][j] + cost[i+d][j+d])\n                    \n                    elif i+d == n-1 or j+d == m-1:\n                        result = max(result, cost[i][j] + cost[i+d][j+d])\n                    \n                    else:\n                        result = max(result, cost[i][j] + cost[i+d][j+d] + cost[i+d][j+d+1] + cost[i+d+1][j+d] + cost[i+d+1][j+d+1])\n    \n    return result / (n*m)\n",
        "test": "assert     maxAverageOfPath(cost=[",
        "num_ids": 2759,
        "indeed": false
    },
    {
        "number": 722,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_dict = {}\n    for student in students:\n        height, weight = student\n        if (float(height) >= h and float(weight) >= w):\n            filter_dict[student] = student\n        else:\n            continue\n    return filter_dict\n",
        "test": "assert     filter_data({'Cathy': (165, 72), 'Micheal': (180, 70), 'Tobias': (180, 90)}, 185, 86) == {'Micheal': (180, 90)}, \"Micheal's filter_data() failed\"",
        "num_ids": 631,
        "indeed": false
    },
    {
        "number": 723,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 70,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    counter = 0\n    for index, value in enumerate(nums1):\n        if value == nums2[index]:\n            counter += 1\n    return counter\n",
        "test": "assert     count_same_pair([1,1,1,1], [1,1,1,3]) == 3",
        "num_ids": 800,
        "indeed": true
    },
    {
        "number": 724,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    power = abs(power)\n    if power == 0:\n        return 1\n    elif power < 0:\n        return power_base_sum(base, -power)\n    elif power == 1:\n        return base\n    else:\n        return base * power_base_sum(base, power - 1)\n",
        "test": "assert     power_base_sum(2, 0) == 1",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 725,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 55,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.search('(?<! )([^!]+)', text1)\n    return result.group(1)\n    # if result:\n    #     result = result.group(1)\n    #     return result\n",
        "test": "assert     extract_quotation(\"\\\"\") == \"\\\"\", \"The correct input text should be double quotation mark\"",
        "num_ids": 2876,
        "indeed": false
    },
    {
        "number": 726,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    tup = test_tup\n    length = len(test_tup)\n    tup = tuple(map(lambda x: x * 10, tup)) # Change\n    print(tup)\n    return tup\n",
        "test": "assert     multiply_elements((9, 9, 9)) == (9, 9, 9)",
        "num_ids": 702,
        "indeed": false
    },
    {
        "number": 728,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 80,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst1.sort()\n    lst2.sort()\n    return lst1+lst2\n",
        "test": "assert     sum_list([1,2,3,4,5,6,7,8], [2,3,4,5,6,7,8]) == [2,3,6,10]",
        "num_ids": 887,
        "indeed": false
    },
    {
        "number": 730,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 25,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    temp_list = list(set(nums))\n    idx_list = []\n    for idx, item in enumerate(nums):\n        if nums[idx] not in temp_list:\n            idx_list.append(idx)\n    return [nums[i] for i in idx_list]\n",
        "test": "assert     consecutive_duplicates([1, 2, 3, 1, 2, 4, 3, 4, 5]) == [1, 2, 3, 4, 5]",
        "num_ids": 391,
        "indeed": false
    },
    {
        "number": 731,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # set the constants to their values\n    surface_area = 4/3 * math.pi * r * h\n    # the height\n    z = h\n    # the radius\n    r = r\n    # the area of the cone\n    A = surface_area*math.sqrt(3/2)*(1-z)\n    print ('the area of the cone is {}'.format(A))\n    return A\n",
        "test": "assert     lateralsurface_cone(1,1)==0",
        "num_ids": 2407,
        "indeed": false
    },
    {
        "number": 732,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    text = text.replace(' ',':')\n    text = text.replace('*',':')\n    text = text.replace('_',':')\n    text = text.replace('.',':')\n    text = text.replace(' ',':')\n    return text\n",
        "test": "assert     replace_specialchar(' ') == ':','replace_specialchar(): does not return a colon'",
        "num_ids": 6644,
        "indeed": true
    },
    {
        "number": 733,
        "max_answer_num": 1,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # Write your code here.\n    left = 0\n    right = len(A)-1\n    while left <= right:\n        middle = (left + right) // 2\n        if A[middle] == x:\n            return middle\n        elif A[middle] < x:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return -1\n",
        "test": "assert     find_first_occurrence([1, 5, 8, 12, 12], 12) == 3",
        "num_ids": 834,
        "indeed": true
    },
    {
        "number": 734,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 80,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    sub_arr_sum = 0\n    #first checking the length of array\n    #if len(arr) == 0 or len(arr) == 1:\n    #    return arr[0]\n    \n    for i in range(len(arr)):\n        sub_arr_sum += arr[i]\n    \n    return sub_arr_sum\n",
        "test": "assert     sum_Of_Subarray_Prod([]) == 0",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 735,
        "max_answer_num": 4,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    i = 1\n    s = 0\n    while i <= n:\n        i += 1\n        s = s + 1\n    s = s % 2\n    return s\n",
        "test": "assert     set_middle_bits(4) == 0",
        "num_ids": 470,
        "indeed": false
    },
    {
        "number": 736,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect(a, x)\n    if i >= len(a):\n        return len(a)\n    return i\n",
        "test": "assert     left_insertion([1,3,5,6], 0) == 0",
        "num_ids": 434,
        "indeed": true
    },
    {
        "number": 737,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 55,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if string[0] in 'aeiouAEIOU': \n        return True\n    else: \n        return False\n",
        "test": "assert     check_str(\"abacaba\") == True",
        "num_ids": 515,
        "indeed": true
    },
    {
        "number": 738,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n",
        "test": "assert     geometric_sum(3) == 6",
        "num_ids": 373,
        "indeed": false
    },
    {
        "number": 739,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    #Step 1\n    #Calculate the nth value of smallest triangular number\n    for i in range(1,n+1):\n        if i == 1 or i == n:\n            return i\n        else:\n            #Step 2\n            # Calculate the current value of nth value of smallest triangular number\n            while n%i==0:\n                n//=i\n    #Step 3\n    #Return the index\n    return n\n",
        "test": "assert     find_Index(1) == 1",
        "num_ids": 420,
        "indeed": false
    },
    {
        "number": 740,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    new_dict = {}\n    for i in range(len(test_tup) - 1):\n        if test_tup[i] not in new_dict:\n            new_dict[test_tup[i]] = test_tup[i+1]\n        else:\n            new_dict[test_tup[i]] = new_dict[test_tup[i]] + test_tup[i+1]\n    return new_dict\n",
        "test": "assert     tuple_to_dict(('a','b')) == {'a':'b'}",
        "num_ids": 833,
        "indeed": false
    },
    {
        "number": 741,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    dict1 = {\"a\": 0, \"b\": 0, \"c\": 0, \"d\": 0, \"e\": 0, \"f\": 0, \"g\": 0, \"h\": 0, \"i\": 0, \"j\": 0, \"k\": 0, \"l\": 0, \"m\": 0, \"n\": 0, \"o\": 0, \"p\": 0, \"q\": 0, \"r\": 0, \"s\": 0, \"t\": 0, \"u\": 0, \"v\": 0, \"w\": 0, \"x\": 0, \"y\": 0, \"z\": 0}\n    for i in s :\n        for j in i :\n            dict1[j] += 1\n    for i in dict1 :\n        if dict1[i] > 1 :\n            return False\n    return True\n",
        "test": "assert     all_Characters_Same('abracadabra') == False",
        "num_ids": 799,
        "indeed": false
    },
    {
        "number": 742,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = 0\n    for i in range(side):\n        area += (side**2 + side**2) * (1/6)\n    return area\n",
        "test": "assert     area_tetrahedron(0) == 0",
        "num_ids": 593,
        "indeed": false
    },
    {
        "number": 743,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 90,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    l = []\n    for i in list:\n        l.append(i)\n",
        "test": "assert     rotate_right([1,2,3,4,5], -2) == [2,3,4,5,1]",
        "num_ids": 845,
        "indeed": false
    },
    {
        "number": 744,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    return False\n",
        "test": "assert check_none((0,)) == 0",
        "num_ids": 383,
        "indeed": false
    },
    {
        "number": 745,
        "max_answer_num": 2,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    import math\n    # Write your code here.\n    import string\n    digits = []\n    for i in range(10):\n        if startnum % 10 == i:\n            digits.append(i)\n    for i in range(10, 100):\n        if endnum % 10 == i:\n            digits.append(i)\n    for i in range(100, 1000):\n        if endnum % 10 == i:\n            digits.append(i)\n    for i in range(1000, 10000):\n        if endnum % 10 == i:\n            digits.append(i)\n    if len(digits) == 1:\n        print(startnum, \" \", digits[0])\n        return digits[0]\n    elif len(digits) == 2:\n        print(startnum, \" \", digits[0], \" \", digits[1])\n        return digits[0], digits[1]\n    elif len(digits) == 3:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2])\n        return digits[0], digits[1], digits[2]\n    elif len(digits) == 4:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3])\n        return digits[0], digits[1], digits[2], digits[3]\n    elif len(digits) == 5:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4])\n        return digits[0], digits[1], digits[2], digits[3], digits[4]\n    elif len(digits) == 6:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4], \" \", digits[5])\n        return digits[0], digits[1], digits[2], digits[3], digits[4], digits[5]\n    elif len(digits) == 7:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4], \" \", digits[5], \" \", digits[6])\n        return digits[0], digits[1], digits[2], digits[3], digits[4], digits[5], digits[6]\n    elif len(digits) == 8:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4], \" \", digits[5], \" \", digits[6], \" \", digits[7])\n        return digits[0], digits[1], digits[2], digits[3], digits[4], digits[5], digits[6], digits[7], digits[8]\n    elif len(digits) == 9:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4], \" \", digits[5], \" \", digits[6], \" \", digits[7], \" \", digits[8])\n        return digits[0], digits[1], digits[2], digits[3], digits[4], digits[5], digits[6], digits[7], digits[8], digits[9]\n    elif len(digits) == 10:\n        print(startnum, \" \", digits[0], \" \", digits[1], \" \", digits[2], \" \", digits[3], \" \", digits[4], \" \", digits[5], \" \", digits[6], \" \", digits[7], \" \", digits[8], \" \", digits[9])\n        return digits[0], digits[1], digits[2], digits[3], digits[4], digits[5], digits[6], digits[7], digits[8], digits[9], digits[10]\n    else:\n        print(\"INVALID INPUT\")\n        return None\n",
        "test": "assert     divisible_by_digits(1, 10) == True, \"1\"",
        "num_ids": 3380,
        "indeed": false
    },
    {
        "number": 746,
        "max_answer_num": 10,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    # check if angle is in range [0,360]\n    if a <= 0 or a >= 360:\n        return print('Please enter a valid angle.')\n",
        "test": "assert     sector_area(12,120) == None",
        "num_ids": 2503,
        "indeed": false
    },
    {
        "number": 747,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 65,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    m = len(X)\n    n = len(Y)\n    Z = len(Z)\n    \n    # Create an array to store the LCS\n    LCS = [[0 for i in range(Z+1)] for j in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            if i == 0 or j == 0:\n                LCS[i][j] = 0\n            elif X[i-1] == Y[j-1]:\n                LCS[i][j] = LCS[i-1][j-1] + 1\n            else:\n                LCS[i][j] = max(LCS[i-1][j], LCS[i][j-1])\n                \n    return LCS[m][n]\n        ",
        "test": "assert         lcs_of_three('abcd', 'abcd', 'abc') == 'abc', 'The third string is incorrect.'",
        "num_ids": 1175,
        "indeed": false
    },
    {
        "number": 748,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str_list = []\n    for i in str1.split():\n        if i[0].isupper():\n            str_list.append(i.capitalize())\n        else:\n            str_list.append(i)\n    return''.join(str_list)\n",
        "test": "assert     capital_words_spaces('') == ''",
        "num_ids": 805,
        "indeed": false
    },
    {
        "number": 749,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=int)\n",
        "test": "assert     sort_numeric_strings([]) == []",
        "num_ids": 2520,
        "indeed": false
    },
    {
        "number": 750,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 85,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n",
        "test": "assert     add_tuple((\"a\", \"b\", \"c\"), (\"a\", \"c\", \"c\")) == (\"a\", \"c\", \"c\"), \"incorrect call to add_tuple\"",
        "num_ids": 754,
        "indeed": false
    },
    {
        "number": 751,
        "max_answer_num": 8,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0: return True\n    if arr[i] < arr[i // 2] and arr[i] < arr[(i + 1) // 2] and arr[(i + 1) // 2] < arr[i]:\n        return True\n    elif arr[i] < arr[(i + 1) // 2] and arr[i] < arr[i + 1]:\n        return True\n    else: return False\n",
        "test": "assert     check_min_heap_helper(arr=[1,2,3,4,5], i=0) == True, \"min heap not found\"",
        "num_ids": 737,
        "indeed": false
    },
    {
        "number": 752,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 55,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    list_of_lucas_numbers = []\n    for i in range(n, 0, -1):\n        list_of_lucas_numbers.append(i)\n    return list_of_lucas_numbers[-1]\n",
        "test": "assert     jacobsthal_num(2) == 1",
        "num_ids": 7982,
        "indeed": false
    },
    {
        "number": 753,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 70,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Your code here.\n    min_k = []\n    temp_list = test_list[:]\n    for i in range(len(temp_list)):\n        min_k.append(temp_list[i][1])\n",
        "test": "assert     min_k([1,2,3,4], 3) == (1, 3)",
        "num_ids": 623,
        "indeed": false
    },
    {
        "number": 754,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    index_list.append(i)\n    return index_list\n",
        "test": "assert     extract_index_list([], [], []) == []",
        "num_ids": 1287,
        "indeed": false
    },
    {
        "number": 755,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 85,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return numbers[1]\n",
        "test": "assert     second_smallest([1,1,5]) == 1",
        "num_ids": 482,
        "indeed": false
    },
    {
        "number": 756,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 40,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    #text = str(text)\n    #if 'a' in text:\n        #if 'b' in text:\n            #return True\n        #else:\n            #return False\n    #else:\n        #return False\n    #return True\n    #s = text.strip().replace(' ', '_')\n    #print(text.replace('_',''))\n    return True\n",
        "test": "assert     text_match_zero_one('abcabcabcabcabcabababcabababcababababab') is True, \"Expected 'abcabcabcabcabcabababababababababababab' but got 'abcabcabcabcabcabababababababababababababab'\"",
        "num_ids": 4470,
        "indeed": false
    },
    {
        "number": 757,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 75,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[j]!= test_list[i]:\n                count += 1\n    return count",
        "test": "assert     count_reverse_pairs([]) == 0, \"Count the reverse pairs for empty list\"",
        "num_ids": 756,
        "indeed": false
    },
    {
        "number": 758,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 50,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    \n    dict1 = {}\n    counter = 0\n    for i in range(len(list1)):\n        current_item = list1[i]\n        if current_item in dict1:\n            dict1[current_item] += 1\n        else:\n            dict1[current_item] = 1\n    \n    return dict1\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
        "test": "assert     unique_sublists(['a', 'a', 'a', 'a', 'a', 'a']) == {'a': 4, 'a': 1}, \"Test 1 FAILED!\"",
        "num_ids": 2471,
        "indeed": false
    },
    {
        "number": 759,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 90,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        num = float(num)\n    except:\n        return False\n    else:\n        return True\n",
        "test": "assert     is_decimal(\"0.01.00.00\") == False",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 760,
        "max_answer_num": 7,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    return all(i!=i for i in arr)\n",
        "test": "assert     unique_Element([1, 1, 1, 2, 2, 3]) == False",
        "num_ids": 2542,
        "indeed": false
    },
    {
        "number": 762,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 12 or monthnum3 < 1:\n        return False\n    else:\n        return True\n",
        "test": "assert     check_monthnumber_number(1) == True",
        "num_ids": 800,
        "indeed": false
    },
    {
        "number": 763,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    count = 0\n    min_diff = arr[0] - arr[1]\n    for i in range(0,n-2):\n        if arr[i+1] - arr[i] > min_diff:\n            count = count + 1\n        else:\n            min_diff = arr[i+1] - arr[i]\n    if count == 0:\n        return min_diff\n    else:\n        return -1\n",
        "test": "assert     find_min_diff([1,3,4], 3) == -1",
        "num_ids": 876,
        "indeed": false
    },
    {
        "number": 764,
        "max_answer_num": 2,
        "max_test_num": 2,
        "total_product": 75,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str) - len(str.strip('0'))\n",
        "test": "assert     number_ctr('1')==0",
        "num_ids": 379,
        "indeed": false
    },
    {
        "number": 765,
        "max_answer_num": 10,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0 or n == 1:\n        return n\n    else:\n        # your code here \n        return math.ceil((n**0.5) / (n - 1))\n",
        "test": "assert     is_polite(1)",
        "num_ids": 3187,
        "indeed": false
    },
    {
        "number": 766,
        "max_answer_num": 6,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,l1[x+1]) for x in range(len(l1)-1)]\n",
        "test": "assert     pair_wise([]) == []",
        "num_ids": 525,
        "indeed": false
    },
    {
        "number": 767,
        "max_answer_num": 6,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for num in range(len(arr)):\n        if sum - arr[num] == 0:\n            count += 1\n    return count\n",
        "test": "assert     get_pairs_count([3,4,6,2,1,5], 10) == 0",
        "num_ids": 555,
        "indeed": false
    },
    {
        "number": 769,
        "max_answer_num": 3,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if(len(li1)==0):\n        return None\n    elif(len(li2)==0):\n        return None\n    elif(len(li1)==1):\n        return li1[0]\n    elif(len(li2)==1):\n        return li2[0]\n    elif(li1[0]<li2[0]):\n        return li1[0]\n    else:\n        return li2[0]\n",
        "test": "assert     Diff(['a','b','c'],[['a','c']]) == ['a','c']",
        "num_ids": 981,
        "indeed": false
    },
    {
        "number": 770,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    lst = []\n    for i in range(n, 0, -2) : \n        if i%2 == 0 : \n            lst.append(i**4)\n    return sum(lst)\n",
        "test": "assert odd_num_sum(1000) == 350, 'Test 4 failed'",
        "num_ids": 1251,
        "indeed": false
    },
    {
        "number": 771,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 100,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in exp:\n        if i not in ['(', ')', '[', ']', '{', '}']:\n            stack.append(i)\n        else:\n            if len(stack) == 0:\n                return False\n            elif i == '(' and stack[len(stack) - 1]!= '(':\n                return False\n            elif i == ')' and stack[len(stack) - 1]!= ')':\n                return False\n            elif i == ']' and stack[len(stack) - 1]!= '[':\n                return False\n            elif i == '}' and stack[len(stack) - 1]!= '{':\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n",
        "test": "assert     check_expression('(()')==0",
        "num_ids": 808,
        "indeed": false
    },
    {
        "number": 772,
        "max_answer_num": 2,
        "max_test_num": 3,
        "total_product": 100,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    \n    words = test_str.split(' ')\n    # Check if string is empty or not\n    if len(words) == 0:\n        return 'Empty string'\n    # Sort the string by its length.\n    # So we can easily remove similar words\n    words.sort()\n    for i in range(len(words)-K):\n        words[i] = ''\n    # Join all the string in one string\n    return''.join(words)\n",
        "test": "assert     remove_length(\"\", 0) == \"\"",
        "num_ids": 802,
        "indeed": false
    },
    {
        "number": 773,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 95,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match=re.findall(pattern,text)\n    if len(match)!=0:\n        return match\n    else:\n        return None\n",
        "test": "assert     occurance_substring('aabbcc', 'abbcc') == 5",
        "num_ids": 803,
        "indeed": false
    },
    {
        "number": 775,
        "max_answer_num": 3,
        "max_test_num": 3,
        "total_product": 60,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = 0\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            odd_index += 1\n    return odd_index == 0\n    ",
        "test": "assert     odd_position([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False, \"Even position does not exist in the list\"",
        "num_ids": 574,
        "indeed": false
    },
    {
        "number": 776,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for char in test_str:\n        if char in \"AEIOU\":\n            count += 1\n    return count\n",
        "test": "assert     count_vowels(\"aA\") == 1",
        "num_ids": 452,
        "indeed": false
    },
    {
        "number": 777,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    max_val = 0\n    for i in range(len(arr)):\n        if arr[i] > max_val:\n            max_val = arr[i]\n    return max_val\n",
        "test": "assert     find_sum([]) == 0, \"Sum of non-repeated elements is incorrect\"",
        "num_ids": 538,
        "indeed": false
    },
    {
        "number": 778,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    answer = []\n    grouped = groupby(sorted(list1),key=lambda i: i[0])\n    for key, group in grouped:\n        answer.append([list(i) for i in group])\n    return answer\n",
        "test": "assert     pack_consecutive_duplicates([]) == []",
        "num_ids": 3675,
        "indeed": false
    },
    {
        "number": 779,
        "max_answer_num": 1,
        "max_test_num": 4,
        "total_product": 65,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if type(i) is list:\n            if i[0] in count:\n                count[i[0]] += 1\n            else:\n                count[i[0]] = 1\n        else:\n            raise TypeError\n    return count\n",
        "test": "assert     unique_sublists([]) == {}",
        "num_ids": 2795,
        "indeed": false
    },
    {
        "number": 780,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 85,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    \n    output = []\n    combos = []\n    \n    for i in test_list:\n        combos.append(tuple(i))\n    \n    combos = list(set(combos))\n    \n    for i in combos:\n        # if i in output:\n        #     continue\n        for j in combinations(i,2):\n            if tuple(j) in output:\n                continue\n            output.append(tuple(j))\n        \n    return output\n    ",
        "test": "assert     find_combinations([])==[]",
        "num_ids": 885,
        "indeed": false
    },
    {
        "number": 781,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 85,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if (n == 1): \n        return True\n    for i in range(1, int(math.sqrt(n) + 1)): \n        if (n % i == 0): \n            return False\n    return True \n",
        "test": "assert     count_divisors(1) == 1",
        "num_ids": 611,
        "indeed": false
    },
    {
        "number": 782,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_length = 0\n    for i in range(0, len(arr), 2):\n        if (i+1) % 2 == 0:\n            odd_length += arr[i]\n    return odd_length\n",
        "test": "assert     odd_length_sum([]) == 0",
        "num_ids": 2412,
        "indeed": false
    },
    {
        "number": 783,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 55,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    #need to create a dict of hsvs\n    #format of rgb color in hsv format: blue green red\n    hsv_colors = {\n        \"r\": {\n            \"red\": (255, 0, 0),\n            \"green\": (0, 255, 0),\n            \"blue\": (0, 0, 255),\n        },\n        \"g\": {\n            \"red\": (0, 255, 0),\n            \"green\": (0, 255, 0),\n            \"blue\": (0, 0, 255),\n        },\n        \"b\": {\n            \"red\": (0, 0, 255),\n            \"green\": (0, 0, 255),\n            \"blue\": (0, 0, 255),\n        }\n    }\n",
        "test": "assert     rgb_to_hsv(r=1, g=0, b=0) == (1.0, 0.5, 0.5)",
        "num_ids": 985,
        "indeed": false
    },
    {
        "number": 784,
        "max_answer_num": 1,
        "max_test_num": 1,
        "total_product": 45,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    odd = []\n    even = []\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            odd.append(list1[i])\n        else:\n            even.append(list1[i])\n    return list(zip(odd,even))\n",
        "test": "assert     mul_even_odd([]) == []",
        "num_ids": 606,
        "indeed": false
    },
    {
        "number": 785,
        "max_answer_num": 9,
        "max_test_num": 3,
        "total_product": 65,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    temp_str = []\n    for char in test_str:\n        if char not in temp_str:\n            temp_str.append(char)\n    return tuple(temp_str)\n",
        "test": "assert     tuple_str_int(()) == ()",
        "num_ids": 2616,
        "indeed": false
    },
    {
        "number": 786,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 75,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        i = bisect.bisect_left(a, x)\n        if i > 0 and a[i-1] >= x:\n            return i-1\n        else:\n            return len(a)\n    \ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        i = bisect.bisect_right(a, x)\n        if i < len(a) and a[i] <= x:\n            return i\n        else:\n            return len(a)\n    \ndef deque_right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in deque sorted order.\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        i = bisect.bisect_left(a, x)\n        if i > 0 and a[i-1] >= x:\n            return i-1\n        else:\n            return len(a)\n    \ndef deque_left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in deque sorted order.\n    '''\n    if len(a) == 0:\n        return -1\n    else:\n        i = bisect.bisect_right(a, x)\n        if i < len(a) and a[i] <= x:\n            return i\n        else:\n            return len(a)\n    \ndef sort(a):\n    '''\n    Write a function to sort a list in ascending order using a specified function.\n    '''\n    for i in range(len(a)):\n        for j in range(len(a) - i - 1):\n            if a[j] > a[j+1]:\n                a[j], a[j+1] = a[j+1], a[j]\n    return a\n    \ndef binary_search(a, x, low, high):\n    '''\n    Write a function to search for an item in sorted order.\n    '''\n    if low > high:\n        return -1\n    else:\n        mid = (low + high) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            return binary_search(a, x, low, mid-1)\n        else:\n            return binary_search(a, x, mid+1, high)\n    \ndef first_position(a, x):\n    '''\n    Write a function to search for an item in a sorted order using a specified function.\n    '''\n    low = 0\n    high = len(a) - 1\n    mid = (low + high) // 2\n    if x == a[mid]:\n        return mid\n    elif x < a[mid]:\n        return first_position(a, x)\n    else:\n        return first_position(a, x)\n        \ndef second_position(a, x):\n    '''\n    Write a function to search for an item in a sorted order using a specified function.\n    '''\n    low = 0\n    high = len(a) - 1\n    mid = (low + high) // 2\n    if x == a[mid]:\n        return mid\n    elif x < a[mid]:\n        return second_position(a, x)\n    else:\n        return second_position(a, x)\n    \ndef min_index(a, x):\n    '''\n    Write a function to find the index of a specific item in a sorted order using a specified function.\n    '''\n    low = 0\n    high = len(a) - 1\n    mid = (low + high) // 2\n    if x == a[mid]:\n        return mid\n    elif x < a[mid]:\n        return min_index(a, x)\n    else:\n        return min_index(a, x)\n",
        "test": "assert     right_insertion(a,1) == 1",
        "num_ids": 435,
        "indeed": false
    },
    {
        "number": 787,
        "max_answer_num": 5,
        "max_test_num": 1,
        "total_product": 65,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    match = re.match('a (b)', text)\n    return match!= None\n",
        "test": "assert     text_match_three('aaaaabbbbbcccccc')==False",
        "num_ids": 607,
        "indeed": false
    },
    {
        "number": 788,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 80,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str)\n",
        "test": "assert     new_tuple([\"a\",\"b\"], [\"a\",\"b\"]) == (\"a\", \"b\")",
        "num_ids": 1092,
        "indeed": false
    },
    {
        "number": 790,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 40,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    '''\n    Time Complexity: O(n^2)\n    Space Complexity: O(1)\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 0:\n                return False\n    return True\n",
        "test": "assert     even_position([]), \"It's not possible to make even numbers\"",
        "num_ids": 312,
        "indeed": false
    },
    {
        "number": 791,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 60,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    \n    test_tup = tuple(test_tup)\n    \n    # don't remove anything if the tuple doesn't contain\n    # anything to remove\n    if len(test_tup) == 0:\n        return ()\n    \n    # the list of tuples to remove\n    remove_list = []\n    \n    # remove the list of tuples\n    for i in test_tup:\n        for j in i:\n            remove_list.append(j)\n            \n    # return the tuple of the removed tuples\n    return tuple(remove_list)\n",
        "test": "assert     remove_nested(('a','b')) == ('a','b')",
        "num_ids": 787,
        "indeed": false
    },
    {
        "number": 792,
        "max_answer_num": 4,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Your code goes here\n    count = 0\n    for i in input_list:\n        count += 1\n    return count",
        "test": "assert     count_list([]) == 0",
        "num_ids": 495,
        "indeed": true
    },
    {
        "number": 793,
        "max_answer_num": 0,
        "max_test_num": 0,
        "total_product": 40,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==1:\n        return arr[-1]\n    if arr[0]>=x:\n        return findLargest(arr,x)\n    else:\n        i=0\n        while i<len(arr)-1 and arr[i]>=x:\n            i+=1\n        if i==len(arr)-1:\n            return arr[-1]\n        else:\n            return arr[i]\n            \ndef findLargest(arr,x):\n    if len(arr)==1:\n        return arr[0]\n    if arr[0]>=x:\n        return findLargest(arr[1:],x)\n    else:\n        return findLargest(arr[1:],x)\n",
        "test": "assert ",
        "num_ids": 425,
        "indeed": false
    },
    {
        "number": 794,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 85,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    text = text.lower()\n    text = re.sub(r'[^a-z\\s]+','', text)\n    text = re.sub(r'\\s+','', text)\n    text = text.strip()\n    text = re.sub(r'\\w+\\s+', '', text)\n    return text\n",
        "test": "assert     text_starta_endb(\"a b\") == \"ab\"",
        "num_ids": 749,
        "indeed": false
    },
    {
        "number": 796,
        "max_answer_num": 6,
        "max_test_num": 5,
        "total_product": 45,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n",
        "test": "assert     return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6",
        "num_ids": 348,
        "indeed": true
    },
    {
        "number": 797,
        "max_answer_num": 5,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n,1,-1):\n        if i%2 == 1:\n            sum += i\n    return sum\n",
        "test": "assert     sum_odd(0) == 0",
        "num_ids": 388,
        "indeed": false
    },
    {
        "number": 798,
        "max_answer_num": 4,
        "max_test_num": 5,
        "total_product": 65,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    #return sum(arr)\n    return sum(arr[:])\n",
        "test": "assert _sum([1, 2, 3, 4, 5]) == 15",
        "num_ids": 347,
        "indeed": true
    },
    {
        "number": 799,
        "max_answer_num": 3,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n>>d) & 0xffffffff\n",
        "test": "assert     (left_rotate(1,0)==1)",
        "num_ids": 401,
        "indeed": false
    },
    {
        "number": 800,
        "max_answer_num": 6,
        "max_test_num": 4,
        "total_product": 70,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(' +','', text)\n",
        "test": "assert     remove_all_spaces(\"\") == ''",
        "num_ids": 2353,
        "indeed": true
    },
    {
        "number": 801,
        "max_answer_num": 4,
        "max_test_num": 1,
        "total_product": 80,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    elif x!= y!= z:\n        if x < y:\n            if x < z:\n                count += 1\n            else:\n                count += 2\n        else:\n            if z < x:\n                count += 1\n            else:\n                count += 2\n    return count\n",
        "test": "assert     test_three_equal(5,5,8) == 0",
        "num_ids": 728,
        "indeed": false
    },
    {
        "number": 802,
        "max_answer_num": 4,
        "max_test_num": 3,
        "total_product": 70,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    arr_len = len(arr)\n    if arr_len == 0:\n        return 0\n    if arr_len == 1:\n        if arr[0] == 0:\n            return 1\n        return 0\n    if arr[arr_len-1] == 0:\n        return count\n    return count + count_rotation(arr[:arr_len-1])\n    \n",
        "test": "assert     count_rotation(arr = []) == 0, \"Empty Array\"",
        "num_ids": 1231,
        "indeed": false
    },
    {
        "number": 803,
        "max_answer_num": 12,
        "max_test_num": 5,
        "total_product": 90,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    s = 0\n    for i in str(n) :\n        s = s * 10 + int(i)\n    return s == n\n",
        "test": "assert     is_perfect_square(1) == True",
        "num_ids": 464,
        "indeed": false
    },
    {
        "number": 804,
        "max_answer_num": 9,
        "max_test_num": 4,
        "total_product": 85,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod = prod * arr[i]\n    if prod % 2 == 0:\n        return True\n    else:\n        return False\n",
        "test": "assert     is_product_even([2, 4, 6, 8, 10])",
        "num_ids": 484,
        "indeed": true
    },
    {
        "number": 805,
        "max_answer_num": 3,
        "max_test_num": 2,
        "total_product": 70,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = []\n    for lst in lists:\n        sum = 0\n        for x in lst:\n            sum += x\n        max_sum.append([lst, sum])\n    \n    return max_sum\n",
        "test": "assert     max_sum_list([]) == []",
        "num_ids": 526,
        "indeed": false
    },
    {
        "number": 806,
        "max_answer_num": 2,
        "max_test_num": 5,
        "total_product": 70,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    import string\n    from collections import Counter\n    result = 0\n    alphabet = string.ascii_uppercase\n    alphabet_count = Counter(alphabet)\n    for char in test_str:\n        if char.isupper():\n            result += 1\n    return result\n",
        "test": "assert         max_run_uppercase(\"abc123abc\") == 0",
        "num_ids": 653,
        "indeed": false
    },
    {
        "number": 807,
        "max_answer_num": 1,
        "max_test_num": 2,
        "total_product": 60,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #print(nums)\n    num_list = []\n    for n in nums:\n        if n % 2!= 0:\n            num_list.append(n)\n    return num_list[0]\n",
        "test": "assert     first_odd([1, 3, 5, 7]) == 1",
        "num_ids": 524,
        "indeed": true
    },
    {
        "number": 808,
        "max_answer_num": 5,
        "max_test_num": 3,
        "total_product": 90,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    check_set = set(test_tup)\n    if len(check_set) == K:\n        return True\n    else:\n        return False\n",
        "test": "assert     check_K(((5,9),(2,3),(5,3),(6,1)), 1) == False",
        "num_ids": 827,
        "indeed": false
    },
    {
        "number": 809,
        "max_answer_num": 5,
        "max_test_num": 4,
        "total_product": 75,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n",
        "test": "assert     check_smaller(('a', 'b'), ('a', 'b', 'c'))",
        "num_ids": 709,
        "indeed": true
    }
]