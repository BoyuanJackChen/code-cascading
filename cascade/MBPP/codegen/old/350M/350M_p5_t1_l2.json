[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if cost[m][n]!= INF:\n        return cost[m][n]\n    # if we hit a node we've found the minimum cost path, return the minimum cost path\n    # just in case we have found the node, just return that\n    if m < n:\n        return INF\n    # if the node we're looking at is the root node, we need to return the minimum cost\n    # we can do this by choosing the minimum of the costs in the right child\n    if m == n:\n        return min_cost(cost, m, m)\n\n",
        "generated_testcode": "assert min_cost([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]], 0, 0) == 5\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"takes two tuples and returns the tuple that contains them as \n        the elements that are most similar to the given tuple.\n    \"\"\"\n    similar_elements = []\n    for i in range(0,len(test_tup1)):\n        for j in range(0,len(test_tup2)):\n            if (test_tup1[i] == test_tup2[j]) and (test_tup1[i] not in similar_elements):\n                similar_elements.append(test_tup1[i])\n    return similar_elements\n\n",
        "generated_testcode": "assert similar_elements([1, 2, 3], [2, 3, 4]) == [2, 3]\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    if n < 2:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n\n",
        "generated_testcode": "assert is_not_prime(1) == False\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Create a list to store the numbers in the heap.\n    # Create a new list to store the numbers in the heap.\n    heap_list = []\n    # Create a heap to store the numbers in the list.\n    heapq.heapify(heap_list)\n    # Create a new list to store the numbers in the heap.\n    new_list = []\n    # Iterate over the list.\n    for i in range(n):\n        # Add the number to the new_list.\n        new_list.append(nums[i])\n        # If the queue is not empty, append the number to the heap.\n        if len(heap_list)!= 0:\n            # If the queue is empty, create a new node, then append it to the heap.\n            if len(heap_list)!= 0:\n                heap_node = heapq.heappop(heap_list)\n                heapq.heappush(heap_list,heap_node)\n    # Return the list.\n    return heap_list\n\n",
        "generated_testcode": "",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0: \n        return 1\n    elif n == 1: \n        return 0 \n    else: \n        return count_ways(n-1) + count_ways(n-2) \n\n",
        "generated_testcode": "assert count_ways(3) == 2\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if x < 0: \n        return False\n    if x > 0: \n        if x % 2 == 0: \n            return True\n        else: \n            return False\n\n",
        "generated_testcode": "assert is_Power_Of_Two(2) == True\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    regex_pattern = '\\w{4,}'\n    found = re.findall(regex_pattern, text)\n    print(found)\n\n",
        "generated_testcode": "",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    return [i**2 for i in nums]\n\n",
        "generated_testcode": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  \n    count = 0\n\n",
        "generated_testcode": "assert find_Rotations(\"abc\") == 1\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    list2=[]\n    for i in range(n):\n        list2.append(list1[i])\n    list1=list2\n    return list1\n\n",
        "generated_testcode": "assert small_nnum([1,2,3,4,5,6,7,8,9,10],3) == [1,2,3]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    \n    # code here\n    if len(s) == 0:\n        return \"No character found\"\n    if s[0] == ch:\n        if s[-1] == ch:\n            return s[1:-1]\n    else:\n        return s\nprint(remove_Occ(\"python\",\"p\"))\n",
        "generated_testcode": "assert remove_Occ(\"abcdefghijklmnopqrstuvwxyz\",\"z\") == \"abcdefghijklmnopqrstuvwxyz\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    M.sort()\n    M.sort(reverse=True)\n    return M\n\n",
        "generated_testcode": "",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = {}\n    words = words.split(\", \")\n    for word in words:\n        if word in count:\n            count[word] = count[word] + 1\n        else:\n            count[word] = 1\n    return count\n\n",
        "generated_testcode": "assert count_common({\"apple\": 1, \"banana\": 2, \"cherry\": 3}) == 3\n",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "  return round(l*b*h,2)\n\n",
        "generated_testcode": "assert find_Volume(1,2,3) == 6\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    # TODO: Write code to split a string at lowercase letters.\n    lower_case = text.lower()\n    return lower_case.split(\" \")\n",
        "generated_testcode": "assert split_lowerstring(\"hello world\") == [\"hello\", \"world\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    lower_text = \"\"\n    underscore = \"\"\n    number = 1\n    for letter in text:\n        if letter.islower():\n            letter = letter.lower()\n        if letter.isalpha():\n            if letter.isupper():\n                letter = letter.lower()\n            if letter.islower():\n                if letter not in lower_text:\n                    lower_text += letter\n                else:\n                    if letter not in underscore:\n                        underscore += letter\n            elif letter.isupper():\n                if letter not in underscore:\n                    underscore += letter\n        else:\n            if number!= 1:\n                if letter not in lower_text:\n                    lower_text += letter\n                else:\n                    if letter not in underscore:\n                        underscore += letter\n            number += 1\n    return lower_text + underscore\n\n",
        "generated_testcode": "assert text_lowercase_underscore(\"Hello World\") == \"helloworld\"\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    perimeter = 4 * a\n    return perimeter\n\n",
        "generated_testcode": "assert square_perimeter(3) == 9\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    str_to_list = list(string)\n    for i in range(len(string)):\n        if string[i] in str_to_list:\n            str_to_list.remove(string[i])\n    return str_to_list\n",
        "generated_testcode": "assert str_to_list(\"hello\") == [\"h\", \"e\", \"l\", \"l\", \"o\", \"l\", \"l\", \"o\"]\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # loop through the array\n    for i in range(len(arraynums)):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n\n",
        "generated_testcode": "assert test_duplicate([1, 2, 3, 1]) == True\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if(x=='woodball'): \n        return True \n    else: \n        return False\n\n",
        "generated_testcode": "assert is_woodball(1) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Write your code here\n    multiples = 0\n    for i in range(1,m+1):\n        if n % i == 0:\n            multiples += 1\n    return multiples\n  \n\n",
        "generated_testcode": "assert multiples_of_num(2,3) == 2\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(len(nums)):\n        if nums[i] == nums[i-1]:\n            return nums[i]\n        else:\n            return False\n\n",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 1]) == 1\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  ''' Write a Python function that accepts a list of numbers \n  and returns the maximum sum of each of the numbers''' \n  max_sum = 0\n  for x in list1:\n    max_sum = max(x, max_sum)\n  return max_sum\n  \nif __name__ == '__main__':\n  print(\"Example 1:\")\n  print(\"Input : \")\n  print(\"list1 = [2, 7, 5, 6, 3, 1, 0]\")\n  print(\"Exception :\")\n  print(\"Exception :\")\n  print(maximum_Sum([7,2,3,2,3,2,0]))\n\n",
        "generated_testcode": "assert maximum_Sum([1, 2, 3, 4, 5]) == 9\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    binary = int(binary)\n    decimal_number = 0\n    if binary == 0:\n        return 0\n    while binary!= 0:\n        remainder = binary % 10\n        decimal_number = decimal_number + remainder * 10 ** len(str(binary))\n        binary = binary // 10\n    return decimal_number\n\n",
        "generated_testcode": "assert binary_to_decimal(0) == 0\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    product=1 \n    for i in range(n): \n        product = product*arr[i]\n    return product\n\n",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9,10],3) == 60\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for element in test_list:\n        if len(element)!= K:\n            return False\n        else:\n            return True\n    return True\n\n",
        "generated_testcode": "assert check_k_elements([1, 2, 3, 4, 5], 3) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(len(list)):\n        list[i] = list[i].replace(' ', '')\n    return list\n\n",
        "generated_testcode": "assert remove(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f'], \"Test failed\"\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n):\n        sum = sum + binomial(k,i)\n    return sum\n\n",
        "generated_testcode": "assert binomial_Coeff(5,2) == 2\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # initialize list of occurrence of each element \n    occurrence_list = [0] * arr_size\n    for i in range(len(arr)):\n        occurrence_list[arr[i]] += 1\n    \n    #print(occurrence_list)\n    #find element with maximum occurrence\n    occurrence_max = 0\n    for i in range(len(occurrence_list)):\n        if occurrence_list[i] > occurrence_max:\n            occurrence_max = occurrence_list[i]\n\n",
        "generated_testcode": "",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    cnt = 0 \n    for i in range(len(s) - 1): \n        if s[i:i+2] == s[i+1:i+2]: \n            cnt += 1\n    return cnt \n\n",
        "generated_testcode": "assert check_Equality(\"abc\") == \"abc\"\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    k = sorted(nums)\n    heapq.heapify(k)\n    for i in range(k):\n        num = heapq.heappop(k)\n        heapq.heappush(k, num*-1)\n    return k\n    \nnums = [3, 1, 2, 2, 6, 10, 12, 15, 24]\nk = 3\n\n",
        "generated_testcode": "assert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    #Your code here\n    max_factor = 1\n    for i in range(2, n):\n        if n % i == 0:\n            max_factor = i\n            break\n    return max_factor\n",
        "generated_testcode": "assert max_Prime_Factors(12) == 2\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    B = bin(N)[2:]\n    return B\n\n",
        "generated_testcode": "assert decimal_To_Binary(1) == '1'\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(1,N): \n        if ar[i] == i: \n            continue\n        else: \n            if ar[i] == 0: \n                return i \n            \n    return -1\n\n",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10],5) == 8\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n\n",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    if q==1:\n        return int(p/10)\n    \n    else:\n        if N%q==0:\n            return int((p-1)/q)+1\n        else:\n            return int((p-1)/q)+find_Nth_Digit(p,q*q,N//q)\n\n",
        "generated_testcode": "assert find_Nth_Digit(1,2,3) == 1\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list_of_numbers = []\n    list_of_strings = []\n    for i in range(len(mixed_list)):\n        list_of_numbers.append(mixed_list[i][0])\n        list_of_strings.append(mixed_list[i][1])\n\n",
        "generated_testcode": "assert sort_mixed_list([1, 2, 3, 4, 5]) == [5, 4, 3, 2, 1]\n",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    even=0\n    odd=0\n    for num in list1:\n        if num%2==0:\n            even+=1\n        else:\n            odd+=1\n    return [even,odd]\n\n",
        "generated_testcode": "assert div_even_odd([1, 2, 3, 4, 5]) == [1, 3]\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    s = [0] * len(S)\n    check = [0] * len(S)\n    \n    for i in range(len(S)):\n        s[i] = S[i]\n        check[i] = s[i]\n    \n    for i in range(len(S)):\n        s[i] = s[i].lower()\n        for j in range(i, len(S)):\n            if s[i] == s[j]:\n                check[i] = check[i] + s[j]\n            elif s[i] == s[j].upper():\n                check[i] = check[i] + check[j]\n            elif s[i].islower() and s[j].islower():\n                check[i] = check[i] + check[j]\n            elif s[i].isupper() and s[j].isupper():\n                check[i] = check[i] + check[j]\n        if i < len(S) - 1:\n            if i == 0:\n                s[i] = check[i]\n            elif check[i] == s[i - 1] and check[i - 1]!= check[i] or check[i] == check[i - 1] and check[i]!= check[i - 1]:\n                s[i] = check[i]\n                \n    for i in range(len(S)):\n        S[i] = s[i]\n        \n    ",
        "generated_testcode": "assert rearange_string(\"abcd\") == \"cdabcd\"\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    freq = collections.Counter(nums)\n    return freq\n# task: to find frequency of elements in the list\n# nums = [[1, 2], [1, 2], [1, 2], [2, 3], [1, 2]]\n# nums = [[1, 2], [2, 3], [2, 3]]\n# nums = [[1, 1, 2], [2, 1, 2], [1, 1, 2], [2, 2, 3], [2, 2, 3]]\n# nums = [[1, 1, 1, 2], [2, 1, 1, 2], [1, 1, 2, 2], [2, 2, 1, 2], [2, 2, 2, 3]]\n# nums = [[1, 2, 2], [2, 2, 2], [2, 2, 2]]\n# nums = [[1, 2, 1], [2, 2, 2]]\n\n",
        "generated_testcode": "assert freq_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3\n",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for i in nums:\n        if i%2 == 0:\n            new_list.append(i)\n    return new_list\n\n",
        "generated_testcode": "assert filter_evennumbers([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Test 1\"\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # your code goes here\n    sum=0\n    for i in range(n):\n        if arr[i]>0:\n            sum+=arr[i]\n    return sum\n\n",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9,10],5) == 30\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    match = re.search(r'[a-z]', text)\n    while match:\n        print(match.group())\n        match = re.search(r'[a-z]', text)\n\n",
        "generated_testcode": "assert text_match(\"_\") == \"\", \"Expected '_' to be a single character.\"\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    match_string = ''\n    match = True\n    for i in range(len(text)):\n        if match_string == '':\n            match_string = text[i]\n        else:\n            if text[i]!= match_string:\n                match = False\n                break\n    return match\n\n",
        "generated_testcode": "assert text_match_string(\"hello\") == \"h\"\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if y == 0: \n        return x\n    else: \n        return find_gcd(y, x % y)\n    \n# Test case 1:\nx = [1, 2, 3, 4, 5]\ny = [2, 4, 6, 8]\ngcd = find_gcd(x, y)\nprint(gcd)\n\n",
        "generated_testcode": "assert find_gcd([1, 2, 3], 4) == 1\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    for i in data:\n        if i not in data:\n            return False\n    return True\n\n",
        "generated_testcode": "assert test_distinct([1, 2, 3, 4, 5]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "\tC = A % B\n\tif C == 0:\n\t\treturn 0\n\treturn C\ndef First_Digit_of_Last_Digit(A,B):\n\treturn compute_Last_Digit(A,B)\ndef Factorial_of(A,B):\n\treturn A * B\n\t\n\n",
        "generated_testcode": "assert compute_Last_Digit(1,2) == 1\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    while n > 0:\n        if n & 1:\n            n >>= 1\n        else:\n            n <<= 1\n    return n\n\n",
        "generated_testcode": "assert odd_bit_set_number(0) == 0\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(0, N):\n        print(nums[i][0], end=\" \")\n    print()\n\n",
        "generated_testcode": "assert(specified_element([[1, 2, 3], [4, 5, 6]], 2) == [1, 4])\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    min_len = input_list[0]\n    for i in range(len(input_list)):\n        if input_list[i] < min_len:\n            min_len = input_list[i]\n    return min_len\n\n",
        "generated_testcode": "assert min_length_list([1, 2, 3, 4, 5]) == 1\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if x**2 + y**2 == z**2:\n        print(f\"Equilateral triangle is present\")\n    else:\n        print(f\"Not equilateral triangle\")\n\n",
        "generated_testcode": "assert check_equilateral(1,2,3) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    return h*b\n\n",
        "generated_testcode": "assert parallelogram_area(3,4) == 12\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if str[0] == str[-1]:\n        print(\"The string \" + str + \" contains an equal first and last characters.\")\n    else:\n        print(\"The string \" + str + \" contains an unequal first and last characters.\")\n\n",
        "generated_testcode": "assert check_Equality(\"abc\") == True\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    counting_array = [0 for _ in range(101)]\n    for element in my_list:\n        counting_array[element] += 1\n    for i in range(len(counting_array)):\n        j = i + 1\n        while j < len(counting_array):\n            if counting_array[j] > 0:\n                counting_array[j] -= 1\n            j += 1\n    counting_array = counting_array[:100]\n    i = 0\n    while i < len(counting_array):\n        counting_array[i] = counting_array[i] + counting_array[i + 1]\n        i += 2\n    return counting_array\n\n",
        "generated_testcode": "",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    import numpy as np\n    def g(x):\n        return a*np.log(x)*np.exp(-r*x)\n    def h(x):\n        return x/r\n    return g(a*h(a*n - n*g(a*n)))\n\n",
        "generated_testcode": "assert tn_gp(1,2,0.5) == 1\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    rev = 0\n    if num > 0:\n        rev = num * 2\n        if num == rev:\n            return True\n    return False\ndef rev2(num):\n    rev2 = 0\n    if num > 0:\n        rev2 = num * 2\n        if num == rev2:\n            return True\n    return False\n\n",
        "generated_testcode": "assert rev(1) == 0\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    largest = -1\n    index = -1\n    for i in range(0,n) : \n        if (arr[i] == '0') :\n            continue\n        if (largest < arr[i]) : \n            largest = arr[i]\n            index = i\n    return largest,index\n\n",
        "generated_testcode": "assert find_Max_Num([1,2,3,4,5,6,7,8,9,10],9) == 9\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    #check which sign the value of x is\n    if x>y: \n        return x-y \n    else: \n        return y-x \n\n",
        "generated_testcode": "assert opposite_Signs(1,1) == False\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    # Write your code here.\n    if n<=2:\n        return n\n    else:\n        return n%10==0 or n%10==1\n\n",
        "generated_testcode": "assert is_octagonal(1) == True\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Write your code here.\n    dp = [None]*n\n    dp[0] = arr[0]\n    dp[1] = max( arr[0], arr[1] )\n    for i in range(2, n):\n        dp[i] = max( arr[i], dp[i-1] + arr[i], arr[i] )\n    print(dp[n-1] )\n    return dp[n-1]\n\n",
        "generated_testcode": "assert max_len_sub([1,2,3,4,5,6,7,8,9,10], 3) == 5\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    j = 0\n    \n    for i in range(len(s)):\n        while j < n and s[i]!= s[j]:\n            j+=1\n        if j<n and s[i] == s[j]:\n            count += 1\n        j+=1\n    return count\n    \nif __name__ == '__main__':\n    print(count_Substrings(\"abccccddddddeeeeeee\",3))\n\n",
        "generated_testcode": "assert count_Substrings(\"12345\",3) == 2\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return min(xs)\n\n",
        "generated_testcode": "assert smallest_num([1, 2, 3, 4, 5]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # write your code here.\n    pass\n\n",
        "generated_testcode": "assert max_difference([1, 2, 3, 4, 5]) == 5\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\nprint(subject_marks([(\"English\", 100), (\"Science\", 60), (\"Biography\", 90)]))\nprint(subject_marks([(\"Math\", 70), (\"English\", 90)]))\n",
        "generated_testcode": "",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n    \n# Write a function named 'is_leap_year' which takes as input year and\n# returns true if the year is a leap year, false otherwise.\ndef is_leap_year(year):\n    return (year % 400 == 0) or (year % 4 == 0 and year % 100!= 0)\n\n",
        "generated_testcode": "assert recursive_list_sum([1, 2, 3, 4]) == 6\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert pos_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if n==1:\n        return 1\n    elif n==2:\n        return 2\n    else:\n        return bell_number(n-1)+bell_number(n-2)\n\n",
        "generated_testcode": "assert bell_number(1) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    # Write your code here.\n    counter = 0\n    \n    # Checking if all elements of array are positive.\n    for i in A:\n        if(i < 0):\n            return False\n        \n    # Checking if all elements of array are positive.\n    for i in range(len(A)):\n        if(A[i] < 0):\n            return False\n    \n    # Checking for positive elements in right positions.\n    for i in range(len(A)):\n        if A[i] > 0:\n            for j in range(i, len(A)):\n                if A[j] < 0:\n                    return False\n                    \n        # Checking for positive elements in left positions.\n        if A[i] > 0:\n            for j in range(i+1, len(A)):\n                if A[j] < 0:\n                    return False\n                    \n    # Checking if all elements of array are negative.\n    for i in A:\n        if(i < 0):\n            return False\n        \n    return True\n        \n    \n# Driver Program\narr = [2,4,3,5,1,9]\nprint(is_Monotonic(arr))",
        "generated_testcode": "assert is_Monotonic([1, 2, 3, 4, 5]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # code here\n    if not isinstance(l, list):\n        return False\n    for e in l:\n        if not isinstance(e, list):\n            return False\n        if is_sublist(e, s):\n            return True\n    return False\n",
        "generated_testcode": "assert is_sublist([1, 2, 3, 4, 5], [1, 2, 3]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    '''\n    Input: list of tuples\n    k: length of the tuples\n    return: true if all the given tuples are equal, false otherwise\n    '''\n    for i in range(len(Input)):\n        if len(Input[i])!= k:\n            return False\n    return True\n\n",
        "generated_testcode": "assert find_equal_tuple([(1, 2), (1, 2), (1, 2)], 2) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(0, len(nums)):\n        for j in range(i + 1, len(nums)):\n            if (nums[j] < nums[i]):\n                nums[j], nums[i] = nums[i], nums[j]\n    return nums\n\n",
        "generated_testcode": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Test 1 failed\"\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if n % 2 == 0:\n        return False\n    if (n%10) == 0:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert dif_Square(1) == 0\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return re.split(r'[,;<>/]', text)\n\n",
        "generated_testcode": "assert multiple_split(\"abc\") == [\"a\", \"b\", \"c\"]\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for color in colors:\n        for pattern in patterns:\n            if color == pattern[0]:\n                if pattern[1] == color:\n                    return True\n    return False\n\n",
        "generated_testcode": "",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for x in test_list:\n        if len(x) % K == 0:\n            yield x\n\n",
        "generated_testcode": "",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(m):\n        for j in range(n):\n            if i**2 + j**2 == m**2:\n                count+=1\n    return count\nprint(count_Squares(3,7))\n\n",
        "generated_testcode": "assert count_Squares(3,4) == 2\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 0:\n        return -1\n    elif n == 0:\n        return 0\n    else:\n        if n % 2 == 0:\n            return 0\n        else:\n            return 1\n\n",
        "generated_testcode": "assert is_Diff(12) == 0\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # code here\n    count = 0\n    while n>0:\n        if n&1==0:\n            count = count+1\n        n=n>>1\n    return count\n\n",
        "generated_testcode": "assert count_With_Odd_SetBits(0) == 0\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    return len(s) % 2 == 1\n\n",
        "generated_testcode": "assert word_len(\"Hello\") == 1\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    # your code goes here\n    if n <= 1:\n        return 1\n    else:\n        return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3)\n",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in test_tup1:\n        for j in test_tup2:\n            zipped = zip(i, j)\n            yield tuple(zipped)\n\n",
        "generated_testcode": "assert zip_tuples((1, 2, 3), (4, 5, 6)) == (1, 4, 5, 6)\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return (4/3) * 3.14159 * (r**3)\n\n",
        "generated_testcode": "assert volume_sphere(3) == 12\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return (strr[0] + strr[1] + strr[2])\n\n",
        "generated_testcode": "assert get_Char(\"abcd\") == \"c\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    x = 0\n    while i <= n:\n        x += i \n        i += 1\n    return x\n \n# Driver Code \nprint(sequence(3)) \n# Output : 2\n\n",
        "generated_testcode": "assert sequence(1) == 1\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    A = 4*np.pi*(r**2)\n    return A\n\n",
        "generated_testcode": "assert surfacearea_sphere(1) == 0\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # code here\n    pass\n    \n# call the function\nprint(centered_hexagonal_number(5))\n",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    new_dict = {}\n    new_dict1 = {}\n    new_dict2 = {}\n    new_dict3 = {}\n\n",
        "generated_testcode": "",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i]==list1[j]:\n                count+=1\n    print(count)\n        \n    \n# get the frequency of the elements in a list\nlist1 = list(range(20))\nfreq_count(list1)\n\n",
        "generated_testcode": "assert freq_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    smaller = N\n    smaller_index = 0\n    for i in range(1,N):\n        if N > i:\n            if N - i < smaller:\n                smaller = N - i\n                smaller_index = i\n    return smaller_index\n\n",
        "generated_testcode": "assert closest_num(5) == 4\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    max = 0\n    for i in list1:\n        if len(i) > max:\n            max = len(i)\n    return max\n\n",
        "generated_testcode": "assert len_log([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code here\n    sub_arr = []\n    for i in range(len(str1)):\n        for j in range(len(sub_str)):\n            if str1[i:i+len(sub_str)] == sub_str:\n                sub_arr.append(str1[i:i+len(sub_str)])\n        # print(sub_arr)\n    # print(sub_arr)\n    if sub_arr:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert find_substring(\"abc\", \"ab\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    return n % 2 == 1\n\n",
        "generated_testcode": "assert is_undulating(1) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return a**b\n\n",
        "generated_testcode": "assert power(2,3) == 4\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return test_list[0]\n\n",
        "generated_testcode": "assert index_minimum([(1, 2), (3, 4), (5, 6)]) == 1\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # find the minimum length\n    min_len = len(lst)\n    # iterate through lst\n    for i in range(1, len(lst)):\n        # compare current and next\n        if lst[i] < lst[i-1]:\n            # if first element is less\n            # than the second element\n            min_len = i-1\n    # print the minimum length\n    print(min_len)\n\n",
        "generated_testcode": "assert Find_Min_Length([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 3\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    i = 1\n    div = 0\n    while i <= n:\n        if n % i == 0:\n            div += 1\n        i += 1\n    return div\n\n",
        "generated_testcode": "assert divisor(5) == 2\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param list1:\n    :return: frequency count of list of lists\n    \"\"\"\n\n",
        "generated_testcode": "assert frequency_lists([[1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 2\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    total = 1\n    for number in numbers:\n        total *= number\n\n",
        "generated_testcode": "assert multiply_num([1, 2, 3, 4, 5]) == 60\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    lst = []\n    while n: \n        r = n % 2\n        n = n // 2\n        lst.append(str(r)) \n    return ''.join(lst[::-1]) \n\n",
        "generated_testcode": "assert decimal_to_binary(1) == '1'\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    num_string = str(num)\n    index = 0\n    for i in range(len(num_string)):\n        for j in range(len(num_string)):\n            if int(num_string[i]) < int(num_string[j]):\n                index = i\n                break\n    return num_string[index + 1:] + num_string[:index - 1:-1]\n\n",
        "generated_testcode": "assert next_smallest_palindrome(12) == \"dee\"\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    print(arr, n)\n    if n >= k:\n        print(arr[n])\n    else:\n        for i in range(len(arr)):\n            print(arr[i], end=' ')\n        print()\n\n",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 2) == 5\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    return ''.join(x.capitalize() for x in word.split('_'))\n\n",
        "generated_testcode": "assert snake_to_camel(\"snake\") == \"Snake\"\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # This function returns the eulerian number \n    # that is a(n, m). \n    # It should return n+1 for n < m\n    # but for m = 0 or for n = 0 \n    # should use a(n, m) = 1\n    # that is, the number of ways to \n    # flip n and m on the left \n    # to get the factorial eulerian number.\n    if (n == m):\n        return 1\n    \n    if (m == 0):\n        return 1\n    \n    return eulerian_num(n-1, m) + eulerian_num(n, m-1)\n\n",
        "generated_testcode": "assert eulerian_num(1, 1) == 1\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # using lambda function to create list of lists\n    input_list = [input_list for input_list in input_list]\n    # recursively call the function\n    input_list = [sort_sublists(sublist) for sublist in input_list]\n    # returning list of lists\n    return input_list\n\n",
        "generated_testcode": "",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize the count variable with 0.\n    count = 0\n\n",
        "generated_testcode": "",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    test_tup = test_tup + test_list\n\n",
        "generated_testcode": "assert add_lists([1, 2, 3], (1, 2, 3)) == (1, 2, 3, 1, 2, 3)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # looping through range\n    for i in range(L,R+1):\n        # initializing count variable\n        count = 0\n        # loop through each digit\n        for j in range(0,16):\n            # if i is a digit\n            if i%16 == j:\n                # count the value\n                count = count + 1\n        # if count equals 0\n        # write a loop statement\n        if count == 0:\n            # write an if statement to print decimal part of hexadecimal number\n            if i < 10:\n                # print decimal part\n                print(f\"{i}\",end=\"\")\n            else:\n                # print hexadecimal part\n                print(f\"0x{hex(i)[2:]}\",end=\"\")\n\n",
        "generated_testcode": "assert count_Hexadecimal(0,1) == 0\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    heap_queue = []\n    for i in range(len(num1)):\n        heap_queue.append(num1[i])\n        heap_queue.append(num2[i])\n        heap_queue.append(num3[i])\n    heapq.heapify(heap_queue)\n    for i in range(len(heap_queue)):\n        if len(heap_queue) == 2:\n            heapq.heappushpop(heap_queue,-heapq.heappop(heap_queue))\n        elif heap_queue[1] < -heapq.heappop(heap_queue):\n            heapq.heappop(heap_queue)\n            heapq.heappush(heap_queue,heapq.heappop(heap_queue))\n\n",
        "generated_testcode": "assert merge_sorted_list(1,2,3) == [1,2,3]\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Check if odd\n    if (n % 2)!= 0: \n        return 0\n    # Check if odd and odd increment\n    else: \n        return odd_Equivalent(s, n//2) + odd_Equivalent(s, n//2 + 1)\n\n",
        "generated_testcode": "assert odd_Equivalent('11',3) == 2\n",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(strt_val, stop_val):\n        if test_list[i] == '':\n            pass\n        else:\n            print('range missing: ', i)\n            print(test_list[i])\n\n",
        "generated_testcode": "",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # for nested list that will be iterated over\n    for item in nestedlist:\n        # for each item in nested list, print all item in it\n        for value in item:\n            print(value)\n\n",
        "generated_testcode": "assert common_in_nested_lists([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [1, 4, 7]\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # In this function we create the variable called perimeter\n    # The value of the perimeter is equal to the radius of the cylinder\n    perimeter = 3.14*diameter*height\n    return perimeter\n\n",
        "generated_testcode": "assert perimeter(3,4) == 12\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n\n",
        "generated_testcode": "assert check_integer(\"1\") == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(test_list)):\n        test_list[i][2] = test_list[i][0] / 100\n        test_list[i][3] = test_list[i][0] / 100\n        test_list[i][4] = test_list[i][0] / 100\n        test_list[i][5] = test_list[i][0] / 100\n        test_list[i][6] = test_list[i][0] / 100\n        test_list[i][7] = test_list[i][0] / 100\n        test_list[i][8] = test_list[i][0] / 100\n        test_list[i][9] = test_list[i][0] / 100\n    return test_list\n\n",
        "generated_testcode": "",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    if not list1:\n        return True\n    return False\n\n",
        "generated_testcode": "assert empty_dit([]) == True\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    for element in nums:\n        if element > 0:\n            return element\n\n",
        "generated_testcode": "assert tuple_to_int([1, 2, 3, 4, 5]) == 1\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for item in test_list:\n        if type(item) is list:\n            list_to_float(item)\n        else:\n            test_list.append(item)\n    return test_list\n\n",
        "generated_testcode": "assert list_to_float([1, 2, 3, 4, 5]) == 1.0, \"Test 1 failed\"\n",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    return list(string.split())\n\n",
        "generated_testcode": "assert string_to_list(\"hello\") == [\"hello\"]\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0 :\n        return 'NULL'\n    \n    # finding the first index of the target value\n    start = 0\n    end = n-1\n    while(start <= end):\n        mid = (start + end)//2\n        if arr[mid] == n:\n            return mid\n        elif arr[mid] < n :\n            start = mid + 1\n        else :\n            end = mid - 1\n\n",
        "generated_testcode": "assert search([1,2,3,4,5,6,7,8,9,10],9) == 8\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #Code here\n    product = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            product.append(list1[i][1] * list1[j][1])\n            #product.append(max(list1[i],list1[j]))\n    #print(product)\n    return max(product)\n    #return max(list1[i][1] * list1[j][1] for i in range(len(list1)) for j in range(i+1,len(list1)))\nprint(max_product_tuple([[1,1],[1,2]]))\n#print(max_product_tuple([[1,1],[2,2],[3,3],[4,4],[5,5],[6,6],[7,7],[8,8]]))\n\n",
        "generated_testcode": "assert max_product_tuple([(1, 2), (3, 4), (5, 6)]) == (6, 24)\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(count):\n        if sum == A[i]:\n            print(i, \":\", A[i], end=\", \")\n            return i\n    print(\"does not exist\")\n    return -1\n\n",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5], 3, 6, 0) == True\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "  if n==1: \n    return 1 \n  if n==2: \n    return 2 \n  if n==3: \n    return 5 \n  if n==4: \n    return 10 \n  if n==5: \n    return 15 \n  if n==6: \n    return 20 \n  if n==7: \n    return 25 \n  if n==8: \n    return 40 \n  if n==9: \n    return 50 \n  if n==10: \n    return 100 \n  if n==11: \n    return 200 \n  if n==12: \n    return 300 \n  if n==13: \n    return 400 \n  if n==14: \n    return 500 \n  if n==15: \n    return 600 \n  if n==16: \n    return 700 \n  if n==17: \n    return 800 \n  if n==18: \n    return 900 \n  if n==19: \n    return 1000 \n  if n==20: \n    return 2000 \n  if n==21: \n    return 3000 \n  if n==22: \n    return 4000 \n  if n==23: \n    return 5000 \n  if n==24: \n    return 6000 \n  if n==25: \n    return 7000 \n  if n==26: \n    return 8000 \n  if n==27: \n    return 9000 ",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    sum = 0\n    amicable = []\n    for i in range(1,limit+1):\n        if sum == 0:\n            sum += i\n        else:\n            if i in amicable:\n                sum += i\n            else:\n                if sum % i == 0:\n                    sum += i\n                else:\n                    sum -= i\n                    amicable.append(sum)\n    return sum\n\n",
        "generated_testcode": "assert amicable_numbers_sum(1) == 1\n",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    print(type(a))\n    print(type(b))\n    print(a,b)\n    c = (b**2-4*a*b)/(2*a)\n    print(c)\n    angle = atan2(c,b)\n    print(angle)\n\n",
        "generated_testcode": "assert angle_complex(1,1) == 0\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count += 1\n        else:\n            count -= 1\n    return count\n\n",
        "generated_testcode": "assert find_length(\"011101\", 1) == 1\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    s = a+b \n    return s \nprint(sum(6,9))\n\n",
        "generated_testcode": "assert sum(2,3) == 5\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    return x * y\n\n",
        "generated_testcode": "assert multiply_int(2, 3) == 6\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    long_list = []\n    for word in str:\n        if len(word) >= n:\n            long_list.append(word)\n    return long_list\n\n",
        "generated_testcode": "assert long_words(5, [\"a\", \"banana\", \"banana\", \"banana\", \"banana\"]) == [\"banana\", \"banana\", \"banana\", \"banana\", \"banana\"]\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # the magic square will be the square with the shortest diagonal\n    # where the minimum value of diagonals is 1\n    # find a shortest diagonal\n    shortest_diagonal = 1\n    shortest_diagonal_row = 0\n    shortest_diagonal_column = 0\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            if abs(my_matrix[i][j] - my_matrix[j][i]) == shortest_diagonal:\n                shortest_diagonal = abs(my_matrix[i][j] - my_matrix[j][i])\n                shortest_diagonal_row = i\n                shortest_diagonal_column = j\n    return shortest_diagonal_row, shortest_diagonal_column\n\n",
        "generated_testcode": "assert magic_square_test([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == True\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Best and worst case is O(n) and the most frequently occurring item is the first item.\n    \"\"\"\n    max_occurrences = {}\n    max_occurrences[0] = 0\n    \n    for i in nums:\n        if i in max_occurrences:\n            max_occurrences[i] += 1\n        else:\n            max_occurrences[i] = 1\n    \n    for i in nums:\n        if max_occurrences[i] > max_occurrences[i - 1]:\n            max_occurrences[i] = max_occurrences[i - 1]\n    \n    return max_occurrences[0]\n\n",
        "generated_testcode": "",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    vowels = 'aeiou'\n    return str1[::-1].translate(str.maketrans(vowels, 'aeiou'))\n\n",
        "generated_testcode": "assert reverse_vowels(\"hello\") == \"olleh\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # get the first value\n    value = tup1[0]\n    # get the second value\n    value2 = tup1[1]\n    # return the result\n    return value +'' + value2\n\n",
        "generated_testcode": "assert tup_string((1, 2, 3)) == '1 2 3'\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum_neg = 0\n    for num in nums:\n        if num < 0:\n            sum_neg += num\n    return sum_neg\n\n",
        "generated_testcode": "assert sum_negativenum([-1, -2, -3, -4, -5]) == 0, \"The function should return 0\"\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    if n==1:\n        return arr[0] == arr[1]\n    return arr[-1] % 2 == 0\n    pass\n\n",
        "generated_testcode": "assert check_last([1,2,3,4,5,6,7,8,9,10],10,1) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    else:\n        return hexagonal_num(n - 1) + hexagonal_num(n - 2)\n\n",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    #convert the units from kWh to EWh\n    unit_conversion = {\"kWh\": 1, \"Wh\": 1, \"kWh/EWh\": 1}\n    for k, v in unit_conversion.items():\n        if k in units:\n            units[k] = units[k] * v\n        else:\n            units[k] = 0\n    \n    #calculate electricity bill\n    electricity_bill = 0\n    for u in units:\n        if u == \"kWh/EWh\":\n            electricity_bill = electricity_bill + units[u] * units[u]\n        else:\n            electricity_bill = electricity_bill + units[u] * units[u] / 1.4\n    \n    #return the electricity bill\n    return electricity_bill\n\n",
        "generated_testcode": "assert cal_electbill(1) == 1\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  zeros = 0\n  for i in nums:\n    if i == 0:\n      zeros += 1\n  return zeros\n\n",
        "generated_testcode": "assert zero_count([0, 1, 0, 2, 0, 3, 0, 4, 0]) == 2\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    if n==1: \n        return True\n    elif n==2: \n        return True\n    else: \n        return False\n\n",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(1) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    circumference = 2 * 3.14 * r * r\n    print(circumference)\n\n",
        "generated_testcode": "assert circle_circumference(3) == 12\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # list comprehension\n    output = [val for val in test_list if val % 2 == 0]\n    return output\n\n",
        "generated_testcode": "assert extract_singly([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Write your code here.\n    if len(nums)<=1:\n        return nums\n\n",
        "generated_testcode": "",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    dic = {}\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j] and list2[i] not in dic.keys():\n                dic[list2[i]] = 1\n            elif list2[i] == list1[j] and list1[i] not in dic.keys():\n                dic[list1[i]] = 1\n            else:\n                dic[list2[j]] = 1\n    for i in dic.keys():\n        if dic[i] == 1:\n            list3.append(i)\n    return list3\n\n",
        "generated_testcode": "",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for item in Input:\n        if isinstance(item, list):\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert find_lists([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum=sum+abs(arr[i]-arr[j])\n    return sum\n        \n        \n# Driver code to test above function.\narr=[1,2,3,4,5,6,7,8,9,10]\nprint(\"Sum of absolute differences in all pairs is:\",sum_Pairs(arr,len(arr)))\n\n",
        "generated_testcode": "assert sum_Pairs([1,2,3,4,5,6,7,8,9,10],5) == 30\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    abs_diff = [] \n    arr.sort() \n    for i in range(n): \n        abs_diff.append(abs(arr[i] - arr[i+1])) \n    return max(abs_diff) \n\n",
        "generated_testcode": "assert max_Abs_Diff([1,2,3,4,5,6,7,8,9,10],3) == 5\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    ascii_value_string = ''\n    for i in str1:\n        ascii_value_string = ascii_value_string + str(ord(i))\n    return ascii_value_string\n\n",
        "generated_testcode": "assert ascii_value_string(\"Hello World\") == \"E\", \"Expected 'E' for the first argument, but got 'Hello World'\"\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Write your code here.\n    # Base case:\n    if m == n:\n        return tri[m][n]\n    # recur for the triangles\n    # triangle[m][n] is the max path sum of triangle[m] to triangle[n]\n    # Base case:\n    if m > n:\n        return max(max_path_sum(tri, m, n-1), tri[m][n])\n    else:\n        return tri[m][n]",
        "generated_testcode": "assert max_path_sum([[1,2,3],[4,5,6],[7,8,9]], 3, 4) == 12\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return sum([int(i) for i in str(x)])\n\n",
        "generated_testcode": "assert sum_digits_single(123) == 123\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize the longest subsequence with first element as 0\n    # At each iteration, we traverse the entire array.\n    # If the current element equals to the last element, we add 1 to the\n    # subsequence length.\n    # If the current element is greater than the last element, we update the\n    # first element as 0.\n    # At each iteration, we check the current element against the previous element,\n    # if the current element is greater than the previous element, we update the\n    # current element and remove the previous element from the array.\n    # If the current element is less than the previous element, we update the\n    # first element and remove the previous element from the array.\n\n",
        "generated_testcode": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 4) == 8\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if a <= b and b <= c: \n        return True\n    else: \n        return False\n\n",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return p if p > q else q\n\n",
        "generated_testcode": "assert gcd(12,9) == 1\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if len(a)<len(b):\n        return a\n    elif len(a)==len(b):\n        return b\n    else:\n        i=0\n        j=0\n        k=0\n        while i<len(a) and j<len(b):\n            if a[i]<b[j]:\n                a[k]=a[i]\n                i=i+1\n            else:\n                a[k]=b[j]\n                j=j+1\n            k=k+1\n        while i<len(a):\n            a[k]=a[i]\n            i=i+1\n            k=k+1\n        while j<len(b):\n            b[k]=b[j]\n            j=j+1\n            k=k+1\n    return a\ndef mergeSort(a):\n    if len(a)<=1:\n        return a\n    else:\n        m=len(a)//2\n        left=mergeSort(a[:m])\n        right=mergeSort(a[m:])\n        return merge(left,right)\na=[]\nprint('Enter array elements:')\nn=int(input())\nfor i in range(n):\n    a.append(int(input()))\nmergeSort(a)\nprint(a)",
        "generated_testcode": "assert merge([1,2,3,4,5], [2,4,6,8,10]) == [1,2,3,4,5,6,8,10]\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # x and y are the vertex coordinates. \n    x = (b*b - 4*a*c) / (2*a)\n    y = (b*c - 4*a*x) / (2*a)\n    return x, y\n\n",
        "generated_testcode": "assert parabola_vertex(1, 2, 3) == True\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return [nums[i][N] for i in range(len(nums))]\n\n",
        "generated_testcode": "assert(specified_element([[1, 2, 3], [4, 5, 6]], 3) == [1, 4, 6])\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    x = 0\n    while x <= n : \n        x = x + 2\n        if x % 2 == 0 : \n            y = 2 \n            while y <= x : \n                print(y, end = \" \") \n                y += 2\n            print(\"\") \n        else : \n            print(x, end = \" \") \n\n",
        "generated_testcode": "assert even_bit_toggle_number(0) == 0\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    return tuple(map(int, tuple_str))\n\n",
        "generated_testcode": "assert tuple_int_str((1, 2, 3)) == (1, 2, 3)\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if list1 == []:\n        return 0\n    else:\n        return encode_list(list1[1:]) + 1\n    # base case\n\n",
        "generated_testcode": "",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # if the list is empty return 0\n    if(k==0): \n        return 0\n    # if the list is not empty then find minimum element \n    # of the array \n    # result = min(arr, key=arr.count)\n    # find the count of the minimum element in array \n    # max_count = max(arr.values())\n    # print(max_count)\n    return max(arr.values()) + min_Ops(arr,n,k-1)\n\n",
        "generated_testcode": "assert min_Ops([1,2,3,4,5,6,7,8,9,10],3,3) == 1\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(days):\n        print(month,end=\"-\")\n    print()\n\n",
        "generated_testcode": "assert month_season(1,1) == \"January\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # Iterative Method\n    for i in range (1, b): \n        \n        # x = (ax + by) % n \n        # y = (ax + by) % n\n        \n        x = (a * i) % n \n        y = (a * (b - i) % n) % n\n        \n        if x == y: \n            return i, a*b//n\n        \n    return None\n\n",
        "generated_testcode": "assert solution(1, 2, 3) == (1, 2)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if not list1:\n        return list2\n\n",
        "generated_testcode": "assert remove_elements([1, 2, 3, 4, 5], [2, 3, 4]) == [1, 3, 5]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i\n    return sum\n\n",
        "generated_testcode": "assert sum_series(0) == 0\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    area = 0\n    if len(s)!= len(l):\n        print(\"Are you trying to make a polygon with an incorrect length?\")\n        print(\"Try again...\")\n        return 0\n    for i in range(len(s)):\n        area += (s[i]*l[i]/2)\n    return area\n\n",
        "generated_testcode": "assert area_polygon(5,6) == 25\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    divisors=[] \n    for x in range(1, n): \n        if n % x == 0: \n            divisors.append(x) \n    if len(divisors) == 2: \n        return True\n    else: \n        return False\n\n",
        "generated_testcode": "assert divSum(5) == 2\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize count variable \n    count = 0\n    # Loop through each letter in string\n    for letter in str1:\n        # Check if letter is uppercase\n        if letter.isupper():\n            # If lowercase, keep count +1 \n            count += 1\n        else:\n            # if not, count -1\n            count -= 1\n    # Return the result\n    return count \n\n",
        "generated_testcode": "assert count_char_position(\"hello\") == 1\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    even_count = 0 \n    for i in range(0, N): \n        if A[i] == A[i + 1]: \n            even_count = even_count + 1\n    return even_count \n\n",
        "generated_testcode": "assert find_even_Pair(A,N) == 1\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  \n    # Base Cases \n    if n <= 0: \n        return 0 \n  \n    # If n is even, return n as n/2 \n    # and n/2 to check the next power of 2 \n    if n % 2 == 0: \n        return n//2\n  \n    # Otherwise return the n/2 \n    # plus the next power of 2 \n    return n//2 + next_Power_Of_2(n//2) \n  \n  \n# Driver Function \nn = int(input(\"Enter a Number \")) \nprint(next_Power_Of_2(n))\n",
        "generated_testcode": "assert next_Power_Of_2(10) == 2\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return a.count(x) \n\n",
        "generated_testcode": "assert frequency(a,x) == 1\n\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    total_pell = n*n\n    return total_pell\n\n",
        "generated_testcode": "assert get_pell(1) == 1\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    sum_list = 0\n    for i in range(m, n):\n        sum_list += list1[i]\n    return sum_list\n\n",
        "generated_testcode": "assert sum_range_list([1, 2, 3, 4, 5], 0, 4) == 10\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Write your code here.\n    for i in range(4, a):\n        print(i*5)\n\n",
        "generated_testcode": "assert perimeter_pentagon(5) == 25\n\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    t = [s.count('std'),s.count('st'),s.count('std'),s.count('st')]\n    print(t)\n\n",
        "generated_testcode": "assert count_occurance('std') == 2\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\" Remove all alphanumeric characters in the string. \"\"\"\n    return \"\".join([x for x in text if x.isalnum()])\n\n",
        "generated_testcode": "assert remove_splchar(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    key_val_dict = {}\n    for k, v in l:\n        key_val_dict[k] = [v]\n    return key_val_dict\n\n",
        "generated_testcode": "assert group_keyvalue([('a', 1), ('b', 2), ('c', 3)]) == {'a': [1, 2], 'b': [2, 3], 'c': [3]}\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # Create a stack\n    stack = []\n\n",
        "generated_testcode": "assert is_valid_parenthese(\"(()())\") == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    return (a+b+c)\n\n",
        "generated_testcode": "assert perimeter_triangle(1,2,3) == 6\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    lcm = L*R\n    if lcm==L*R:\n        return lcm\n    elif lcm>R*R or lcm>R*L:\n        return lcm\n    else:\n        return answer(L,R/2)\n    \nprint(answer(6,7))\n    \n",
        "generated_testcode": "assert answer(1,2) == 2\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for pattern in patterns:\n        if re.search(pattern,text,re.IGNORECASE)!= None:\n            count += 1\n    if count >= len(patterns)//2:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert string_literals(['a','b','c'], 'ab') == True\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    # x = int(input(\"Enter an number: \"))\n    for i in range(1,1000):\n        if x % i == 0:\n            return True\n    return False\n\n",
        "generated_testcode": "assert is_num_keith(1) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #Gets the distance between the lat and longitude using the distance_lat_long function\n    #Inputs:\n    #slat,slon: lat and longitude of the lat and longitude of the location to calculate the distance from\n    #elat,elon: lat and longitude of the location to calculate the distance from\n    #Returns:\n    #distance: the distance between the lat and longitude using the distance_lat_long function\n    #Calls the distance function.\n    distance=distance_func(slat,slon,elat,elon)\n    #print(distance)\n    return distance\n\n",
        "generated_testcode": "assert distance_lat_long(45,45,45,45) == 0\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #check the lengths of string 1 and 2 \n    if len(str1)!= len(str2):\n        return \"\"\n    #find the length of the longest common prefix \n    prefixLength = 0\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            prefixLength += 1\n    #print the prefixLength \n    #print(\"prefixLength: \", prefixLength)\n    #print(\"Length of string 1: \", len(str1))\n    #print(\"Length of string 2: \", len(str2))\n    if prefixLength == 0:\n        return \"\"\n    else:\n        return str1[:prefixLength]\n    \n\n",
        "generated_testcode": "assert common_prefix_util(\"abcd\", \"abc\") == \"ab\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sub_string = re.findall(\"[a-zA-Z]\", string)\n    for sub_string_s in sub_string:\n        sub_string = string.replace(sub_string, sub_string_s.upper())\n    for sub_string_i in sub_string:\n        sub_string = string.replace(sub_string_i, sub_string_i.lower())\n    for sub_string_p in sub_string:\n        if sub_string_p.isnumeric():\n            sub_string = string.replace(sub_string_p, sub_string_p.replace(\"#\",\"\") + sub_string_p.replace(\"$\",\"\"))\n    for sub_string_q in sub_string:\n        if sub_string_q in ['!', '#', '$', '%', '&', '*', '(', ')', '_', '+', ',', '-', '.', ':', ';', '?', '@', '\\n', '\\t']:\n            sub_string = string.replace(sub_string_q, sub_string_q.replace('!', '! '))\n    for sub_string_r in sub_string:\n        if sub_string_r in ['!', '#', '$', '%', '&', '*', '(', ')', '_', '+', ',', '-', '.', ':', ';', '?', '@', '\\n', '\\t']:\n            ",
        "generated_testcode": "assert find_character(\"Hello World\") == \"H\", \"Expected 'H' but got 'Hello World'\"\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    # Loop through all numbers in array and compare them with k and return a pair of indices\n    # If there is a match, then increment the count by 1\n    for i in range(n):\n        if arr[i] == k:\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert count_pairs([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 2) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in list:\n        if i>num:\n            print(i)\nlist = [1,2,3,4,5,6,7]\nnum = int(input(\"Enter the number you want to find in the list: \"))\ngreater_specificnum(list,num)\n",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5,6,7,8,9,10],3) == [1,3,9]\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    x = 0\n    y = 0\n    if a > 0:\n        x = (b - a)/(a + b)\n        y = (x**2 - a)**2\n    elif a < 0:\n        x = -(b - a)/(a + b)\n        y = (-x**2 + a)**2\n    return y\n\n",
        "generated_testcode": "assert parabola_focus(1, 2, 3) == True\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for pattern in patterns:\n        if pattern.search(text):\n            return True\n    return False\n\n",
        "generated_testcode": "assert check_literals(\"Hello World\", \"Hello\") == \"Hello\"\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # length of X and Y are m and n respectively\n    \n    # Create an empty array to store the longest common subsequence\n    lcs = np.zeros((m,n), dtype=int)\n\n",
        "generated_testcode": "",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    num = int(n)\n    if num == 0:\n        return 0\n    elif n == 0:\n        return 1\n    elif num == 1:\n        return 2\n    else:\n        return prod_Square(num // 2) * prod_Square(num // 2)\n\n",
        "generated_testcode": "assert prod_Square(1) == 1\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    # Traverse through all elements \n    for i in range(0,n): \n        # Find index of first missing positive number \n        # in arr[] \n        j = n-1\n        # If current value is greater than first missing positive number \n        # then update j \n        while (arr[i] > 0 and arr[i] <= j): \n            j = j -1\n        # If current value is greater than the \n        # first missing positive number then update \n        # i \n        if arr[i] < 0: \n            i = i + 1\n    # If all values in arr[] are positive numbers \n    # then return the index \n    if (i < n): \n        return i \n    return -1\n\n",
        "generated_testcode": "assert first_Missing_Positive([1,2,0],3) == 2, \"First missing positive number is 2\"\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if x1<x2 and y1<y2:\n        if (x1-x2)**2 + (y1-y2)**2 <= (x2-x1)**2 + (y2-y1)**2:\n            return 2\n        else:\n            return 1\n    else:\n        return 0\n\n",
        "generated_testcode": "assert count_Intgral_Points(1,1,2,2) == 1\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    month3 = []\n    for i in range(len(monthname3)):\n        for j in range(len(monthname3[i])):\n            if (monthname3[i][j] == '3'):\n                month3.append(i)\n                break\n    if len(month3) == 0:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_monthnumber(\"january\") == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    s = str.lower()\n    a = [char for char in s if char.isalpha()]\n    if len(a) == 0:\n        return False\n    if len(a) == 1 and s.isdigit() == True:\n        return False\n    if len(a) == 2 and s.isnumeric() == True:\n        return False\n    return True\n\n",
        "generated_testcode": "assert check_String(\"Hello\") == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(test_tup)):\n        for j in range(len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                test_tup[i] = '-1'\n    test_tup.sort()\n    return test_tup\n\n",
        "generated_testcode": "",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if (n < 8):\n        return n\n    else:\n        res = n % 8\n        n = (n - res) // 8\n        if (res == 0):\n            return n\n        else:\n            return octal_To_Decimal(n)\n\n",
        "generated_testcode": "assert octal_To_Decimal(0) == 0\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    l,h = 0,n-1\n    while l<=h:\n        mid = l + (h-l)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            l = mid+1\n        else:\n            h = mid-1\n    return -1\n    \n# Test your function\narr = [2,1,3,5,6,4,7,8,9,0]\nx = 0\nn = len(arr)\nprint(first(arr,x,n))\n\n",
        "generated_testcode": "assert first([1,2,3,4,5,6,7,8,9,10], 5, 6) == 5\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if len(test_list[i][j]) > K:\n                test_list[i][j] = test_list[i][j][:K]\n            else:\n                test_list[i][j] = test_list[i][j][0:K]\n    return test_list\n\n",
        "generated_testcode": "",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tup1) > len(test_tup2):\n        test_tup1 = list(test_tup1)\n        test_tup2 = list(test_tup2)\n        test_tup1.sort()\n        test_tup2.sort()\n        exp = 1\n        for i in range(len(test_tup1)):\n            test_tup1[i] = pow(test_tup1[i], exp)\n            exp += 1\n        for j in range(len(test_tup2)):\n            test_tup2[j] = pow(test_tup2[j], exp)\n            exp += 1\n        return (test_tup1, test_tup2)\n    else:\n        test_tup1 = list(test_tup1)\n        test_tup2 = list(test_tup2)\n        test_tup1.sort()\n        test_tup2.sort()\n        exp = 1\n        for i in range(len(test_tup2)):\n            test_tup2[i] = pow(test_tup2[i], exp)\n            exp += 1\n        return (test_tup1, test_tup2)\n\n",
        "generated_testcode": "assert find_exponentio(1, (2, 3)) == 3\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #Write your code here\n    print(\"a:\",a)\n    print(\"b:\",b)\n    answer=0\n    for k in range(0,(b*(b-1))/2):\n        answer+=1\n        print(\"answer:\",answer)\n        if k==0:\n            if a>0:\n                a=a/2\n            else:\n                a=a*-1\n        elif k==a:\n            if a<0:\n                a=a*-1\n            else:\n                a=a/2\n        else:\n            if a>0:\n                a=a/2\n            else:\n                a=a*-1\n    if answer>2:\n        return answer\n    else:\n        return 0\n    \n    \n        \n    \n    \n    \n    \n    \n    \n",
        "generated_testcode": "assert largest_triangle(3,4) == 5\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    if(n <= 1): \n        return 0\n    elif (n % 2 == 0): \n        return highest_Power_of_2(n//2) + 1\n    else: \n        return highest_Power_of_2(3*n+1)\n\n",
        "generated_testcode": "assert highest_Power_of_2(2) == 1\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # find index position of the maximum value in given list\n    max_index = list1.index(max(list1))\n    # return the index position\n    return max_index\n\n",
        "generated_testcode": "assert position_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [0, 1, 3, 5, 8, 9]\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if(len(lst)==len(set(lst))): \n        print(\"The list is same\") \n    else: \n        print(\"The list is not same\") \n    \n# Driver code \nlst1 = [10, 20, 30, 40, 50] \nlst2 = [10, 20, 30, 40, 50, 60] \nchkList(lst1) \nchkList(lst2) ",
        "generated_testcode": "assert chkList([1,2,3,4,5]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    new_str = \"\"\n    for i in str1:\n        if i % 2 == 0:\n            new_str += i\n    return new_str\n\n",
        "generated_testcode": "assert remove_even(\"\") == \"\", \"Empty string should return an empty string\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    # Python program to find the hamming distance\n    # between two integers n1 and n2 \n    dist = 0 \n    for i in range(0, n1): \n        if (n2 & i) > 0 : \n            dist += 1\n    return dist \n\n",
        "generated_testcode": "assert hamming_Distance(1,2) == 0\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    char_count = {} \n    for i in s : \n        if i == c : \n            if i in char_count : \n                char_count[i] += 1\n            else : \n                char_count[i] = 1\n        else : \n            continue\n    return char_count\n\n",
        "generated_testcode": "assert count('hello', 'h') == 2\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # TODO: Write an efficient algorithm for the following idea\n    # (a) Start from the first element\n    # (b) Compare the previous element to the next element\n    # (c) Swap the element if it is less than the next element\n\n",
        "generated_testcode": "assert inversion_elements([1, 2, 3, 4, 5]) == [3, 5, 4, 2, 1]\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    return (test_tup[0], test_tup[1], test_tup[2])\n\n",
        "generated_testcode": "assert concatenate_elements((1, 2, 3)) == (1, 2, 3)\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  \n  #declaring the length of the longest repeating subsequence. \n  longest_length = 0\n  \n  # declaring a variable that will contain the unique string \n  unique_string = []\n  \n  #for loop to iterate through the string \n  for i in range(len(str)): \n    \n    # declaring a loop to iterate through the string \n    for j in range(i, len(str)): \n      \n      # if the current loop is equal to the previous loop \n      if str[i:j+1] in unique_string: \n        # increment the counter \n        unique_string.append(str[i:j+1])\n        # if the counter is greater than the length of the longest repeating subsequence, \n        # update the length \n        if len(unique_string) > longest_length: \n          longest_length = len(unique_string) \n        # increment the loop count \n        unique_string.clear()\n      else: \n        unique_string.append(str[i:j+1])\n      \n  # returning the length of the longest repeating subsequence \n  return longest_length\n  \n# driver code \nstr1 = \"PIPE\"\n\n",
        "generated_testcode": "assert find_longest_repeating_subseq('abcde') == 3\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return re.findall(r'^[\\d.]+$', str(num))\n\n",
        "generated_testcode": "assert is_decimal(1) == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    n=len(heap)\n    for i in range(n):\n        if (heap[i]<heap[0]):\n            heap[i]=heap[0]\n            heap[0]=heap[i]\n            a=i\n    return heap,a\n\n",
        "generated_testcode": "",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    regex = r\"[a-zA-Z0-9]\"\n    if not re.search(regex, string):\n        print(\"The string doesn't contain all the characters that are allowed\")\n        return False\n    else:\n        print(\"The string contains at least one allowed character\")\n        return True\n\n",
        "generated_testcode": "assert is_allowed_specific_char(\"abc\") == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    '''\n    The function accepts a positive integer n and returns the number of those bits set in it.\n    The nth bit of the number will be returned by count_Num(n//2)\n    \n    >>> count_Num(5)\n    1\n    >>> count_Num(20)\n    2\n    >>> count_Num(10)\n    1\n    '''\n    counter=0\n    while n:\n        if n & 1:\n            counter+=1\n        n>>=1\n    return counter\n\n",
        "generated_testcode": "assert count_Num(0) == 0\n",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return n ** 4\n\n",
        "generated_testcode": "assert fourth_Power_Sum(5) == 25\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    test_str1 = \"\".join(test_tup1)\n    test_str2 = \"\".join(test_tup2)\n    result = test_str1 + test_str2\n    return result\n\n",
        "generated_testcode": "assert concatenate_strings(('a', 'b'), ('c', 'd')) == 'abcd'\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    \n    degrees = radian * (180 / 3.14159)\n    return degrees\n\n",
        "generated_testcode": "assert degree_radian(0) == 0\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"Decode list to decode.\"\"\"\n\n",
        "generated_testcode": "",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for i in list1: \n        for j in list2: \n            if i == j: \n                return True \n    return False \n\n",
        "generated_testcode": "assert check_subset_list([1, 2, 3], [1, 2, 3]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    x=0\n    for i in range(0,len(str)): \n        if (str[i]==str[x]): \n            x+=1\n        else: \n            return str[x] \n    return -1\n\n",
        "generated_testcode": "",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    minimum_Operations = 0\n    \n    # While loop to count number of operations needed\n    while True:\n        \n        # Check if A and B have same digits\n        if A[-1] == B[-1]:\n            \n            # If A is equal to B, make it equal to A\n            if A[:-1] == B[:-1]:\n                \n                # Add 1 to the minimum number of operations\n                minimum_Operations += 1\n                \n                # Remove the last digit of A and B\n                A = A[:-1]\n                \n                # Add 1 to the minimum number of operations\n                minimum_Operations += 1\n                \n                # Remove the last digit of B and A\n                B = B[:-1]\n                \n            else:\n                \n                # If A is not equal to B, make it equal to A\n                if A[:-1] == B[:-1]:\n                    \n                    # If A is equal to B, add 1 to the minimum number of operations\n                    minimum_Operations += 1\n                    \n                    # Remove the last digit of A and B\n                    A = A[:-1]\n                    \n                    # Add 1 to the minimum number of operations\n                    minimum_Operations += 1\n                    \n                    # Remove the last digit of B and A\n                    B = B[:-1]\n                else:\n                    \n                    # If A is not equal to B, add 1 to the minimum number of operations\n                    minimum_Operations += 1\n                    \n                    # Remove the last digit of A and B\n                    ",
        "generated_testcode": "assert min_Operations(1,2) == 1\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Function to extract the minimum and maximum values of a tuple.\n    \n    Parameters\n    ----------\n    test_tup : tuple\n        A tuple that contains values.\n    K : int\n        An integer that is the size of the tuple.\n    \n    Returns\n    -------\n    minimum : int\n        An integer that is the minimum of the tuple.\n    maximum : int\n        An integer that is the maximum of the tuple.\n    \"\"\"\n    minimum = test_tup[0]\n    maximum = test_tup[0]\n    for i in range(1, len(test_tup)):\n        if test_tup[i] < minimum:\n            minimum = test_tup[i]\n        if test_tup[i] > maximum:\n            maximum = test_tup[i]\n    return minimum, maximum\n\n",
        "generated_testcode": "assert extract_min_max([1, 2, 3, 4, 5], 2) == (1, 3)\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if text[-1] =='':\n        text = text[:-1]\n    if text[-1] == ',':\n        text = text[:-1]\n    if text[-1] == '.':\n        text = text[:-1]\n    if text[-1] == ';':\n        text = text[:-1]\n    if text[-1] == ':':\n        text = text[:-1]\n    if n > 0:\n        for i in range(len(text)):\n            if i < n and text[i] =='':\n                text = text.replace(text[i], ':')\n            if i < n and text[i] == ',':\n                text = text.replace(text[i], '.')\n            if i < n and text[i] == '.':\n                text = text.replace(text[i], ';')\n            if i < n and text[i] == ';':\n                text = text.replace(text[i], ':')\n    return text\n\n",
        "generated_testcode": "assert replace_max_specialchar(\"Hello, World!\", 2) == \"Hello: World: Hello, World!\"\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    first_even = nums[0]\n    for i in range(len(nums)):\n        if first_even % 2 == 0 and i % 2 == 0:\n            first_even = nums[i]\n    return first_even\n\n",
        "generated_testcode": "assert first_even([1, 2, 3, 4, 5]) == 1\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Input : t=(1,2,3,4,5), x=6\n    # Output : True\n    # Input : t=(6,6,6,6,6), x=6\n    # Output : False\n\n",
        "generated_testcode": "assert check_type(('a', 'b', 'c')) == 'a'\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1:\n        return True\n    if n % 2 == 0:\n        if arr[n//2] == x:\n            return True\n    if arr[n//2] == x:\n        return is_majority(arr, n//2, x)\n    else:\n        return is_majority(arr, n//2, x)\n\n",
        "generated_testcode": "assert is_majority([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 3) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    while (n!=0):\n        result = result + n & 1\n        n = n >> 1\n    return result \n\n",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if low < high: \n        mid = (low + high) // 2\n        if arr[mid] <= arr[low]: \n            if arr[mid] > arr[high]: \n                return arr[mid] \n            elif arr[mid] > arr[low] and arr[high] > arr[mid]: \n                return arr[high] \n            else:\n                return arr[mid] \n        elif arr[mid] < arr[low]: \n            if arr[high] < arr[mid]: \n                return arr[high] \n            elif arr[low] < arr[mid]: \n                return arr[low] \n            else: \n                return arr[mid]\n        else: \n            if arr[mid] < arr[high]: \n                return arr[mid] \n            else: \n                return arr[low] \n    else: \n        return -1\n\n",
        "generated_testcode": "assert find_Min([1,2,3,4,5,6,7,8,9,10],0,9) == 5\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    odd_index = 0\n    while odd_index < len(str):\n        if str[odd_index % 2] == 'O':\n            str = str.replace(str[odd_index], '', 1)\n            odd_index += 1\n        else:\n            odd_index += 1\n    return str\n\n",
        "generated_testcode": "assert odd_values_string(\"abcd\") == \"abcd\"\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Code here\n    if a>b and a>c:\n        return a\n    if b>a and b>c:\n        return b\n    if c>a and c>b:\n        return c\n    \nprint(min_of_three(4,5,6))",
        "generated_testcode": "assert min_of_three(1,2,3) == 1\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    n = n & 0xFFFF  # find the highest bit in the given range\n    if n < l:\n        return False\n    if n > r:\n        return False\n    # first set all the bits to be set to zero in the given range\n    temp = 0\n    for i in range(l,r+1):\n        temp |= (n & 0x0001) << i\n    # then check that all the bits have been set to zero\n    if temp!= 0:\n        return False\n    # finally, set all bits to 1 to know it is unset\n    temp = 1\n    for i in range(l,r+1):\n        temp |= (n & 0x001F) << i\n    if temp!= 0:\n        return False\n    return True\n\n",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(0,0,1) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # initialize the array of negative numbers\n    # and the array of positive numbers\n    negative_array = []\n    positive_array = []\n    \n    # iterate through each element in the array\n    for element in arr:\n        \n        # if the element is less than 0, add it to the negative array\n        # and add it to the positive array\n        if element < 0:\n            negative_array.append(element)\n            positive_array.append(0)\n        \n        # if the element is greater than 0, add it to the positive array and add it to the negative array\n        elif element > 0:\n            positive_array.append(element)\n            negative_array.append(0)\n        \n    # return the arrays\n    return negative_array, positive_array\n\n",
        "generated_testcode": "assert re_arrange_array([1, 2, 3, 4, 5], 3) == [1, 2, 3, 4, 5, -1, -1, -1]\n",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(str1)):\n        if str1[i] == \" \":\n            str1 = str1.replace(str1[i],\"\")\n    return str1\n\n",
        "generated_testcode": "assert replace_blank(\"\", \"\") == \"\", \"Empty string should not be replaced\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # We create a new array by adding the numbers in the right triangle.\n    temp = [0] * (n + 1)\n    for x in range(n):\n        temp[x] = tri[x][0]\n    \n    # We initialize the maximum sum. \n    ans = 0\n    \n    # We start from the end of the array. \n    for i in range(n - 1, -1, -1):\n        # We start by checking whether the current value of the i-th element is more than the maximum sum.\n        if (tri[i][1] < ans and ans > temp[i]):\n            ans = temp[i]\n        # We update the maximum sum if the current value of the i-th element is less than the maximum sum.\n        elif (tri[i][1] > ans and ans > temp[i]):\n            ans = temp[i]\n    return ans\n\n",
        "generated_testcode": "assert max_sum([1, 2, 3], 3) == 6\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    list2=list1.copy()\n    list3=list(list1)\n    list4=[]\n    for i in range(len(list1)):\n        if list1[i] not in list4:\n            list4.append(list1[i])\n    for i in range(len(list1)):\n        if list1[i] not in list3:\n            list3.append(list1[i])\n    for i in range(len(list3)):\n        for j in range(n-1):\n            if list3[i] in list4:\n                list2.remove(list3[i])\n                break\n            else:\n                continue\n        else:\n            continue\n    return list2\n\n",
        "generated_testcode": "",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # define the height of the cylinder\n    h = round(h/2.54,3)\n    # define the radius of the cylinder\n    r = round(r,2)\n    return round(math.pi * r * h, 3)\n\n",
        "generated_testcode": "assert lateralsuface_cylinder(1,1) == 0\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return l**3\n\n",
        "generated_testcode": "assert volume_cube(3) == 6\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    return n & 0xFFFF\n\n",
        "generated_testcode": "assert even_bit_set_number(0) == 0\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(1,N+1):\n        j=i+1\n        a=i\n        while(a>1):\n            if(N%j==0):\n                b=N//j\n                c=N//a\n                if(N//j==b):\n                    if(b*a==N):\n                        break\n                    else:\n                        a=a+b\n                        b=c\n            a=a+1\n            if(N%i==0):\n                b=N//i\n                c=N//a\n                if(N//i==b):\n                    if(b*a==N):\n                        break\n                    else:\n                        a=a+b\n                        b=c\n    return a\n\n",
        "generated_testcode": "assert No_of_Triangle(3,3) == 3\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # variables to store data\n    counter = 0\n    test_list_length = len(test_list)\n    # variables for loop\n    for index in range(test_list_length):\n        for j in range(test_list_length):\n            if index == j:\n                pass\n            else:\n                if test_list[index][0] == test_list[j][0]:\n                    if test_list[index][1] == test_list[j][1]:\n                        if test_list[index][2] == test_list[j][2]:\n                            if test_list[index][3] == test_list[j][3]:\n                                counter += 1\n    # prints result\n    print(counter)\n    # if there are not duplicate elements\n    if counter == test_list_length:\n        print(\"no duplicates found\")\n    else:\n        print(\"no duplicate found\")\n\n",
        "generated_testcode": "",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    substr = 0\n    for i in range(0, len(str)): \n        for j in range(0, i + 1): \n            if str[j] == str[i]: \n                substr += 1\n        count += substr \n        substr = 0\n    return count \n\n",
        "generated_testcode": "assert number_of_substrings(\"abc\") == 3\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    num_of_sequences = 0\n    for i in range(0, m+1):\n        for j in range(0, n+1):\n            if j > i:\n                num_of_sequences = num_of_sequences + (2*(j-i))\n    print('total number of sequences:', num_of_sequences)\n\n",
        "generated_testcode": "assert get_total_number_of_sequences(3,2) == 2\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    list1.pop()\n    list1.append(list2)\n    return list1\n\n",
        "generated_testcode": "",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # your code goes here\n    for i in range(m):\n        for j in range(n):\n            for k in range(o):\n                print('*',end=\"\")\n            print(\"\")\n\n",
        "generated_testcode": "",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n\n",
        "generated_testcode": "assert count_charac(\"Hello World\") == \"3\"\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # create a empty array to store sorted values\n    new_arr = []\n    for elem in lst: \n        new_arr.append(elem[0])\n    \n    # sort the array \n    new_arr.sort()\n    print(\"New array:\",new_arr)\n    \n    # return the sorted array \n    return new_arr\n\n",
        "generated_testcode": "",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Base Case\n    if (N == 1): \n        return 2\n    \n    # If the current number is a perfect square \n    # then check if it is perfect \n    if (N % 2 == 0): \n        return 1 + next_Perfect_Square(N // 2) \n    else: \n        return next_Perfect_Square(N-1) \n\n",
        "generated_testcode": "assert next_Perfect_Square(5) == 15\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sub = []\n    global ans \n    sub.append(arr[0])\n    for i in range(1,n):\n        if arr[i] > arr[i-1]:\n            sub.append(arr[i])\n    ans = max(ans,sum(sub))\n    for i in range(n):\n        if arr[i] > arr[i-1]:\n            temp = arr[i]\n            arr[i] = arr[i-1]\n            arr[i-1] = temp \n            max_sum(arr,n)\n            arr[i] = temp \n\n",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 10\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    square_root_a = int(number / 2)\n    square_root_b = int(number / (2 * 10 ** (1/2)))\n    return square_root_a ** 2 + square_root_b ** 2\n\n",
        "generated_testcode": "assert babylonian_squareroot(1) == 0\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    if not str: \n        return 0\n        \n    n = len(str) \n    dp = [[0] * n for _ in range(n)] \n    # The dp table to store the longest palindromic subsequence \n    # for the given string \n    \n    # create the dp table \n    for i in range(n): \n        dp[i][i] = 1\n \n    # check the length of the longest palindromic subsequence. \n    # If the length of the longest palindromic subsequence \n    # is the given length, return that subsequence \n    \n    for i in range(n-2, -1, -1): \n        for j in range(i+1, n): \n            if str[i] == str[j]: \n                dp[i][j] = dp[i+1][j-1] + 2\n            else: \n                dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n \n    return dp[0][n-1]\n \n# Driver code to test above \nstr = \"ABABABA\"\nprint(lps(str))",
        "generated_testcode": "assert lps(\"abc\") == \"cab\"\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum_of_harmonic_series = 1\n    for x in range(1, n + 1):\n        sum_of_harmonic_series *= x\n    return sum_of_harmonic_series\n\n",
        "generated_testcode": "assert harmonic_sum(1) == 0\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # initialize two array to store intersection\n    intersection = []\n    for index1 in range(len(array_nums1)):\n        for index2 in range(len(array_nums2)):\n            # check if array_nums1[index1] is also array_nums2[index2]\n            # if so, add both to array_nums1[]\n            # if not, ignore index1\n            # if index1==index2, add intersection\n            if array_nums1[index1] == array_nums2[index2]:\n                intersection.append(array_nums1[index1])\n    return intersection\n\n",
        "generated_testcode": "assert intersection_array([1,2,3,4,5], [2,3,4,5,6]) == [2,3]\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(1 for element in tup if element == x) \n\n",
        "generated_testcode": "assert count_X([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 3\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list.insert(0,element)\n\n",
        "generated_testcode": "assert insert_element([1,2,3,4,5],5) == [1,2,3,4,5,5]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    try:\n        return (numbers.imag, numbers.real)\n    except:\n        return (0, 0)\n\n",
        "generated_testcode": "assert convert(1+2j) == (1+2j)\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list1.sort()\n    counter = 0\n    for i in list1:\n        if i.isnumeric():\n            counter += 1\n    return counter\n\n",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5]) == 3, \"count_integer should return 3\"\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    word_list = []\n    words = text.split()\n    for word in words:\n        if word[0] == 'a' or word[0] == 'e':\n            word_list.append(word)\n    return word_list\n\n",
        "generated_testcode": "assert words_ae(\"The quick brown fox jumps over the lazy dog\") == [\"The\", \"quick\", \"brown\", \"fox\", \"jumps\", \"over\", \"the\", \"lazy\", \"dog\"]\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    from itertools import combinations\n    return [''.join(item) for item in list(combinations(l, n))]\n\n",
        "generated_testcode": "",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    if n<=1:\n        return count\n    for i in range(2,n):\n        if is_prime(i):\n            count+=1\n    return count\n\n",
        "generated_testcode": "assert count_Primes_nums(10) == 2\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    temp = a\n    a = b\n    b = temp\n    return a,b\n\n",
        "generated_testcode": "assert swap_numbers(1,2) == 2, \"swap_numbers failed\"\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Method 1 - No using map\n    # return len([i for i in array_nums if i % 2!= 0])\n\n",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5]) == 2, \"Test 1 failed\"\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    max = 0\n    for i in test_tup1:\n        if i > max:\n            max = i\n    for i in test_tup2:\n        if i < max:\n            max = i\n    return max\n\n",
        "generated_testcode": "assert maximize_elements(('a', 'b'), ('c', 'd')) == 'c'\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    prime = [1, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\n    prime.append(0)\n    i = 2\n    while i < n: \n        if prime[i] == 0: \n            i += 1\n        else: \n            prime[i] = prime[i-1] + prime[i-2]\n        i += 1\n    return prime[n-1]\n\n",
        "generated_testcode": "assert newman_prime(1) == 1\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Divide two tuples using divmod method.\n    print(\"\\nDivision of the two tuples using divmod method\\n\")\n    div_tup1 = divmod(test_tup1[0], test_tup1[1])\n    div_tup2 = divmod(test_tup2[0], test_tup2[1])\n    print(f\"1st tuple: {div_tup1}\")\n    print(f\"2nd tuple: {div_tup2}\")\n    print(f\"Result: {div_tup1[0] / div_tup2[0]}\")\n    print(f\"Result: {div_tup1[1] / div_tup2[1]}\")\n    print(\"\\n\")\n\n",
        "generated_testcode": "assert division_elements(('1', '2'), ('3', '4')) == '3/4'\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    split_two_parts(list1, L)\n\n",
        "generated_testcode": "assert split_two_parts([1, 2, 3, 4, 5], 3) == [1, 2, 3]\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return {**d1,**d2}\n\n",
        "generated_testcode": "assert merge_dict({\"a\":1,\"b\":2},{\"c\":3,\"d\":4}) == {\"a\":1,\"b\":2,\"c\":3,\"d\":4}\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    if h_age >= 6:\n        return h_age + 3\n    elif h_age >= 4:\n        return h_age + 2\n    elif h_age >= 2:\n        return h_age + 1\n    else:\n        return h_age\nprint(dog_age(16))\n\n",
        "generated_testcode": "assert dog_age(1) == 1\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(0, len(S), step):\n        yield(S[i:i+step])\n\n",
        "generated_testcode": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    A = 0.25\n    B = 0.5\n    C = 0.5\n    D = 0.25\n    E = 0.75\n    F = 0.75\n    G = 0.25\n    H = 0.75\n    i = l\n    j = 0\n    m = 0\n    lateralsurface_l = (A + B + C + D + E + F + G + H) * i * j\n    return lateralsurface_l\n\n",
        "generated_testcode": "assert lateralsurface_cube(1) == 0\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n + 1):  \n        sum = sum + i * i  \n    print(\"The sum of squares of first \", n, \" natural numbers is : \", sum)  \n    print(\"\")  \n  \nsquare_Sum(5)  ",
        "generated_testcode": "assert square_Sum(5) == 25\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1,n+1):\n        for j in range(1,n+1):\n            if (i == 1 or j == 1):\n                count += 1\n    return count\n\n",
        "generated_testcode": "assert find_star_num(1) == 1\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    return(ord(k))\n\n",
        "generated_testcode": "assert ascii_value('a') == ord('a')\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(0,n):\n        if arr[i] % 2 == 0:\n            sum += arr[i]\n    return sum\n\n",
        "generated_testcode": "assert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10],10) == 55\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    even_sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum = n*(n+1)//2\n            if sum%3==0:\n                even_sum += sum\n    return even_sum\nn = int(input())\nprint(even_Power_Sum(n))",
        "generated_testcode": "assert even_Power_Sum(5) == 25\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    r_extract_count = 1\n    r_extract_result = []\n    for record in test_list:\n        r_extract_count = r_extract_count + 1\n        r_extract_result.append(record)\n    return r_extract_result\n\n",
        "generated_testcode": "",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Function to substract the contents of two tuples.\n    \n    Arguments:\n        test_tup1: A tuple (1,2,3)\n        test_tup2: A tuple (1,2,4,5,6)\n    \n    Returns:\n        result: A tuple (6,8,10)\n    \"\"\"\n    result = ()\n    for i in range(len(test_tup1)):\n        result += test_tup1[i] - test_tup2[i]\n    return result\n\n",
        "generated_testcode": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if(n==0):\n        return 0\n    elif(n==1):\n        return 1\n    elif(n==2):\n        return 1\n    else:\n        return even_binomial_Coeff_Sum(n-1) + even_binomial_Coeff_Sum(n-2)\n\n",
        "generated_testcode": "assert even_binomial_Coeff_Sum(5) == 15\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1: \n        return m - 1\n    else: \n        return get_Position(a, n-1, m)\n\n",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9,10],3,2) == [5,8]\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return 4*3.14*r*h\n# function to find the volume of a sphere\ndef volume_sphere(r):\n    return 3.14*(r**2)\n\n",
        "generated_testcode": "assert volume_cylinder(3,4) == 12\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return {k:v for (k,v) in dict.items() if (k in n)}\n\n",
        "generated_testcode": "assert dict_filter({'a': 1, 'b': 2, 'c': 3}, 2) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    count=0\n    for x in test_tup:\n        if x==test_tup[0]:\n            count+=1\n    return count\n#*******************************************************************************\n#        Question 7)\n#*******************************************************************************\n# Write a function to count the frequency of the elements in the given tuple.\ndef count_frequency_tuple(test_tup):\n    count=0\n    for x in test_tup:\n        count+=1\n    return count\n#*******************************************************************************\n#        Question 8)\n#*******************************************************************************\n# Write a function to calculate the mean.\ndef mean(test_tup):\n    return sum(test_tup)/len(test_tup)\n#*******************************************************************************\n#        Question 9)\n#*******************************************************************************\n# Write a function to calculate the median.\ndef median(test_tup):\n    test_tup.sort()\n    n=len(test_tup)\n    if n%2==0:\n        return (test_tup[int(n/2)-1] + test_tup[int(n/2)])/2\n    else:\n        return test_tup[int(n/2)]\n#*******************************************************************************\n#        Question 10)\n#*******************************************************************************\n# Write a function to calculate the standard deviation.\ndef standard_deviation(test_tup):\n    s=0\n    for i in test_tup:\n        s+=i\n    n=len(test_tup)",
        "generated_testcode": "assert count_first_elements((1, 2, 3, 4, 5)) == 1\n",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return n == int((n+1) / 2)\n \n# Function call to find deciagonal number\nn = int(input(\"Enter the nth deciagonal number: \")) \n \n# Displaying the nth deciagonal number\nprint(\"The deciagonal number is: \", n) \n \n# Displaying nth deciagonal number\nprint(\"The nth deciagonal number is: \", is_num_decagonal(n)) \n \n# Displaying nth deciagonal number\nprint(\"The nth deciagonal number is: \", is_num_decagonal(int(input(\"Enter the nth deciagonal number: \")))) \n \n# Function call to find deciagonal number\nprint(\"Deciagonal number is: \", is_num_decagonal(int(input(\"Enter the nth deciagonal number: \")))) ",
        "generated_testcode": "assert is_num_decagonal(1) == True\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return i\n\n",
        "generated_testcode": "assert sequential_search([1, 2, 3, 4, 5], 6) == True\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # List should be sorted, so this list has no duplicate values\n    # Unique values need to be checked\n    # If all unique values are returned,\n    # then the function should return True\n    # Else it should return False\n    uniques = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i]!= test_list[j]:\n                if test_list[i] in uniques:\n                    # If the two lists have the same values\n                    # then it should return True\n                    return True\n                uniques.append(test_list[i])\n    return False\n\n",
        "generated_testcode": "assert all_unique([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return [nums1[i] - nums2[i] for i in range(len(nums1))]\n\n",
        "generated_testcode": "assert sub_list([1,2,3,4,5], [2,3,4,5,6]) == [1,2,3,4,5,6]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    return (len(str(n)) == len(str(n))) \n\n",
        "generated_testcode": "assert validate(12) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in list:\n        if i!= element:\n            return False\n    return True\n\n",
        "generated_testcode": "assert check_element([1,2,3,4,5,6,7,8,9,10], 'a') == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #start of conditional statement\n    if text.find('a') >= 0 and text.find('b') >= 0 and text.find('c') >= 0:\n        return True\n    #end of conditional statement\n    return False\n\n",
        "generated_testcode": "assert text_match_two_three(\"aab\") == \"aab\"\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # base case\n    if n == 0 or k == 0:\n        return 0\n    \n    # k is even and k is odd\n    if k % 2 == 1:\n        a[n - 1] = a[n - 1] + a[n - 1]\n        return a[n - 1]\n\n",
        "generated_testcode": "assert max_sub_array_sum_repeated([1, 2, 3, 4, 5], 4, 2) == 5\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum += i ** 2\n    return sum\n\n",
        "generated_testcode": "assert square_Sum(5) == 25\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if len(arr)!= N:\n        return None\n    for i in range(N):\n        if arr[i]!= 0:\n            if modular_inverse(arr[:i] + arr[i + 1:], N, P) is not None:\n                return modular_inverse(arr[:i] + arr[i + 1:], N, P)\n    return P\n# Driver Program to test above function\narr = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]\nN = len(arr)\nprint(modular_inverse(arr, N, 1))\n\n",
        "generated_testcode": "assert modular_inverse(2, 3, 4) == 1\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if N <= 0:\n        return 0\n    elif N % 4 == 0 and N % 100!= 0 or N % 400 == 0:\n        return 1\n    else:\n        return odd_Days(N - 1) + 1\n\n",
        "generated_testcode": "assert odd_Days(2020) == 1\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    \n    return len(list1)\n    \nmax_length([\"a\",\"b\",\"c\"])\n\n",
        "generated_testcode": "assert max_length([1, 2, 3, 4, 5]) == 5\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if(n<=1):\n        return n\n    if(k<=1):\n        return k\n    return (count_no_of_ways(n-1, k) + count_no_of_ways(n-2, k))\n",
        "generated_testcode": "assert count_no_of_ways(2, 2) == 1\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if n<m:\n        return find(m,n)\n    if n==m:\n        return n\n    else:\n        return find(m,n%m)\n    \n\n",
        "generated_testcode": "assert find(2,3) == 1\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    side=h/2\n    angle=3.14159*(side**2)\n    return(angle*math.sqrt(w**2+h**2))\n\n",
        "generated_testcode": "assert otherside_rightangle(3,4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    '''This function returns the maximum value in the given heterogeneous list.'''\n    max_val = listval[0]\n    for val in listval:\n        if val > max_val:\n            max_val = val\n    return max_val\n\n",
        "generated_testcode": "assert max_val([1, 2, 3, 4, 5]) == 5\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    total = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            total += i\n    return total\n\n",
        "generated_testcode": "assert sum_div(10) == 100\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]<arr[j]:\n                count+=1\n    return count\ndef main():\n    n = int(input(\"Enter the size of the array: \"))\n    arr = []\n    for i in range(0,n):\n        element=int(input())\n        arr.append(element)\n    inv_count=get_Inv_Count(arr,n)\n    print(inv_count)\nmain()",
        "generated_testcode": "assert get_Inv_Count([1,2,3,4,5,6,7,8,9,10],5) == 3\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    out = []\n    for sublist in list1:\n        if isinstance(sublist, list):\n            for item in flatten_list(sublist):\n                out.append(item)\n        else:\n            out.append(sublist)\n    return out\n\n",
        "generated_testcode": "assert flatten_list([1, 2, [3, 4, [5, [6, 7], 8]], 9]) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    if len(l1) == 0:\n        return []\n    if len(l2) == 0:\n        return l1\n    if l1[0] == l2[0]:\n        result = [l1[0]]\n        for i in range(1, len(l1)):\n            result = result + l1[i]\n        return result\n\n",
        "generated_testcode": "assert intersection_nested_lists([1, 2, 3], [1, 2, 3, 4]) == [1, 2, 3, 4]\n",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    agg = 0\n    for el in stdata:\n        if agg <= el[1]:\n            agg = el[1]\n    return agg\n\n",
        "generated_testcode": "assert max_aggregate([(1, 2), (3, 4), (5, 6), (7, 8), (9, 10)]) == (9, 10)\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    def count_bit(n): \n        k = 0 \n        while n: \n            k += bin(n).count('1')\n            n >>= 1\n        return k \n    return count_bit(n)\n\n",
        "generated_testcode": "assert count_binary_seq(2) == 2\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Find the depth of each item\n    depth = [0] * len(d)\n    # Find the depth of each key\n    for i in range(len(d)):\n        for j in d[i].keys():\n            depth[i] = max(depth[i], d[i][j])\n    return depth\n\n",
        "generated_testcode": "assert dict_depth({1:2, 3:4, 5:6}) == 3\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    max_value = n & (n-1)\n    while n>0:\n        if (n & (n-1)):\n            max_value = max(max_value, n & (n-1))\n        n = n >> 1\n    return max_value\n\n",
        "generated_testcode": "assert set_Bit_Number(1) == 0\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    a.sort(reverse=True)   #Sort the list in reverse order\n    for i in range(n):\n        if a[i]==a[i+1]:\n            return True\n        return False\n    \n# Driver code to test above function\na = [1, 2, 2, 2, 3, 2, 3, 3, 3, 3]\nn = len(a)\nprint(solve(a,n))\n\n",
        "generated_testcode": "assert solve(1,1) == 0\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    x=0\n    for i in range(ranges[0],ranges[1]) :\n        if arr[index+i] == rotations[x] :\n            return True\n        else :\n            x=x+1\n    return False\n\n",
        "generated_testcode": "",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for word in words:\n        if word[0] == 'p':\n            return word[1:]\n\n",
        "generated_testcode": "assert start_withp(['p', 'a', 'apple', 'a', 'cat']) == ['apple', 'a', 'cat']\n",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    if index == n:\n        return a[k]\n    elif k >= 0 and k < n and index < n:\n        return max(a[index] + max_sum_increasing_subseq(a, n, index + 1, k),\n                   max_sum_increasing_subseq(a, n, index + 1, k + 1))\n    else:\n        return -1\n\n",
        "generated_testcode": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 0, 2) == 9\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return(tuplex[m:n])\n\n",
        "generated_testcode": "assert colon_tuplex((1,2,3),3,4) == (1,2,3,4)\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    while i < N:\n        n = -1\n        for j in range(N):\n            if nums1[i] > nums2[j]:\n                n = j\n                break\n        if n == -1:\n            print(\"No\")\n            i += 1\n            continue\n        i += 1\n        if i == N:\n            print(\"No\")\n            break\n        print(nums1[i], nums2[n])\n\n",
        "generated_testcode": "assert large_product([1, 2, 3], [4, 5, 6], 3) == [1, 2, 3, 4, 5, 6]\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # use the max function from the input class\n    # I have not found a way to do this\n    # I am taking this idea from the solution,\n    # that's the real solution\n    return max(a,b)\n\n",
        "generated_testcode": "assert maximum(1,2) == 2\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    str_lst = str1.split()\n    for i in range(len(str_lst)):\n        str_lst[i] = int(str_lst[i])\n\n",
        "generated_testcode": "",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    n &= 0xffffffff \n    while n > 0: \n        n &= n-1\n    return n \n \n# Create a function to return the number of bits set \n# for all numbers 0..255. \ndef number_of_bits(n): \n    return (2**(n-1))-1 \n \n# Create a function to return the number of bits \n# set for all unset bits 0..255. \ndef number_of_bits_set(n): \n    return number_of_bits(n) - (n & 0xffffffff) \n \n# Create a function to return the number of bits \n# set for all unset bits 0..255. \ndef number_of_bits_set_2(n): \n    return number_of_bits(n) - (n & 0xffffffff) \n \n# Create a function to return the number of bits \n# set for all unset bits 0..255. \ndef number_of_bits_set_3(n): \n    return number_of_bits(n) - (n & 0xffffffff) \n \n# Create a function to calculate the number of bits set \n# for all unset bits 0..255. \ndef number_of_bits_set_4(n): \n    return number_of_bits_set(n) - (n & 0xffffffff) \n \n# Create a function to calculate the number of bits set \n# for",
        "generated_testcode": "assert set_left_most_unset_bit(0) == 0\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    return r**3 * h**2\n\n",
        "generated_testcode": "assert volume_cone(1,1) == 1\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        if list1[i] > 0:\n            print(list1[i], end=\" \")\n        else:\n            print(\"-\", end=\" \")\n    print()\n\n",
        "generated_testcode": "assert pos_nos([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5], \"Test 1 failed\"\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Step 1: Find the maximum sum for each row\n    max_sum = []\n    for i in range(n) :\n        max_sum.append(grid[i][0])\n    \n    # Step 2: Find the maximum sum for each column\n    for i in range(n) :\n        for j in range(n) :\n            # Use the two matrix multiplication to get the maximum sum for each two adjacent rows\n            max_sum[j] += max(max_sum[j+1], grid[i][j])\n    return max(max_sum)\n\n",
        "generated_testcode": "",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    str = str.upper() \n    count = 0\n    for i in range(len(str)): \n        if str[i % 2] == 'e': \n            count += 1\n    return count \n  \n# Driver code \nstr = \"The quick brown fox jumps over the lazy dog\" \nprint(\"The maximum length of even word in string is\", find_Max_Len_Even(str)) ",
        "generated_testcode": "assert find_Max_Len_Even(\"\") == 0\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    \n    len_A = len(A)\n    index = 0\n    \n    for i in range(len_A-1):\n        if A[i] == x:\n            return i\n            \n    return -1\n        \n# O(n) Time | O(1) Space\ndef find_last_occurrence_2(A, x):\n    \n    len_A = len(A)\n    \n    for i in range(len_A-1):\n        if A[i] == x:\n            return i\n            \n    return -1\n    \nprint(find_last_occurrence([1,2,3,4,5,6,7], 3))\nprint(find_last_occurrence([1,2,3,4,5,6,7], 5))\nprint(find_last_occurrence([1,2,3,4,5,6,7], 2))\nprint(find_last_occurrence([1,2,3,4,5,6,7], 8))",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 4\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "  length = len(alist)\n  result = \"\"\n  for i in range(length):\n    result = result + str(alist[i])\n  return result\n\n",
        "generated_testcode": "",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    total = s*(s+1)//2\n    return total\n# driver function\nprint(\"Area of the box =\",max_volume(3))\n\n",
        "generated_testcode": "assert max_volume(3) == 6\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    result = re.findall('[A-Za-z]+', text)\n    return result\n\n",
        "generated_testcode": "assert find_long_word(\"abcdefghijklmnopqrstuvwxyz\") == \"abcdefghijklmnopqrstuvwxyz\"\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    s = 0\n    for i in range(n):\n        s = s + (i**2)\n    return s\n\n",
        "generated_testcode": "assert sum_difference(1) == 0\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(s)-1):\n        if s[i]!= s[i+1]:\n            return s[i+1]\n\n",
        "generated_testcode": "assert find_demlo(1) == 1\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(0, len(list1)):\n        min_index = i\n        for j in range(i + 1, len(list1)):\n            if list1[j] < list1[min_index]:\n                min_index = j\n        list1[i], list1[min_index] = list1[min_index], list1[i]\n    return list1\n\n",
        "generated_testcode": "assert position_min([1, 2, 3, 4, 5]) == [0, 1, 3, 4, 5]\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    out_of_place[cur] = -1 if arr[cur] < arr[cur + 1] else -1 if arr[cur] > arr[cur + 1] else arr[cur]\n\n",
        "generated_testcode": "",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(0, len(test_tuple) - 1):\n        sum = sum + test_tuple[i][1]\n    return sum\n\n",
        "generated_testcode": "assert sum_of_alternates((1, 2, 3, 4, 5)) == 10\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in range(1, n + 1):\n        for j in range(1, n + 1):\n            sum = i + j\n            if sum == n:\n                count += 1\n            if sum < n:\n                break\n    return count\n\n",
        "generated_testcode": "assert get_Min_Squares(5) == 1\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    max_count = 0\n    max_word = \"\"\n    for i in range(len(test_list)):\n        cnt = test_list[i].count(\"a\")\n        if cnt > max_count:\n            max_count = cnt\n            max_word = test_list[i]\n    return max_word\n\n",
        "generated_testcode": "",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if x == y and z == x + y:\n        return True\n    elif x + y == z or x == y + z:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_isosceles(1,2,3) == True\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # your code goes here\n    list_new=[]\n    for i in range(m):\n        list_new.append(list1[n-i-1])\n    list_new.reverse()\n    list_new.reverse()\n    return list_new\n\n",
        "generated_testcode": "assert rotate_left(['a', 'b', 'c', 'd'], 2, 3) == ['c', 'd', 'b', 'a'], \"Rotate left function failed\"\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(list)):\n        if list[i] < 0:\n            count += 1\n    print(count)\n\n",
        "generated_testcode": "assert neg_count(['a', 'b', 'c', 'd', 'e', 'f']) == 3\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r'[a-zA-Z]{3,}'\n    return re.findall(pattern, text)\n\n",
        "generated_testcode": "assert find_char('') == '', 'Empty string'\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n:\n        n &= n - 1\n        count += 1\n    return count\n\n",
        "generated_testcode": "assert count_unset_bits(0) == 0\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    char_freq = {}\n    for i in str1:\n        if i in char_freq:\n            char_freq[i] += 1\n        else:\n            char_freq[i] = 1\n    return char_freq\n\n",
        "generated_testcode": "assert char_frequency(str1) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': 1",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    i = 0\n    j = len(sub_li)-1\n    while i<len(sub_li) and j>i:\n        if sub_li[i]>sub_li[j]:\n            i+=1\n        else:\n            j-=1\n    return sub_li[i:]\n\n",
        "generated_testcode": "assert Sort(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f'], \"Test failed\"\n",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    if a > b + c or b > a + c or c > a + b:\n        return False\n    else:\n        return True\n\n",
        "generated_testcode": "assert check_Validity(1,2,3) == True\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    res=0\n    while n>=0:\n        res += d\n        n-=1\n    return res\n\n",
        "generated_testcode": "assert ap_sum(1,2,3) == 6\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    monthname = ''\n    month = 0\n    for i in range(len(monthname1)):\n        if (int(monthname1[i]) + 1) % 28 == 0:\n            month += 1\n        monthname += monthname1[i]\n    if month == 0:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_monthnum(monthname1) == True\n\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list_of_words = text.split()\n    for word in list_of_words:\n        if word.endswith('.'):\n            word = word[:-1]\n        if word.endswith('?'):\n            word = word[:-1]\n        if word.endswith('!'):\n            word = word[:-1]\n        if word.endswith('!!'):\n            word = word[:-2]\n        if word.endswith('?'):\n            word = word[:-1]\n        if word.endswith('!'):\n            word = word[:-1]\n        if word.endswith('!!'):\n            word = word[:-2]\n        if word.endswith(','):\n            word = word[:-1]\n        if word.endswith('.'):\n            word = word[:-1]\n        if word.endswith('!'):\n            word = word[:-1]\n        if word.endswith('!!'):\n            word = word[:-2]\n        if word.endswith(':'):\n            word = word[:-1]\n        if word.endswith(':'):\n            word = word[:-1]\n        if word.endswith('.'):\n            word = word[:-1]\n        if word.endswith('?'):\n            word = word[:-1]\n        if word.endswith('!'):\n            word = word[:-1]\n        if",
        "generated_testcode": "assert text_match_word('') == '', 'Empty string'\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    \n    i = 1\n    a = ''\n    for j in range(len(s)-1):\n        if s[j] == s[j+1]:\n            i += 1\n            a += s[j]\n        else:\n            break\n    return i\n  \nprint(check_Equality(\"abba\")) # 3\nprint(check_Equality(\"abacaba\")) # 4\nprint(check_Equality(\"aaabccccddeefee\")) # 3\nprint(check_Equality(\"aaabccccdeeff\")) # 4\nprint(check_Equality(\"abcdef\")) # 3\nprint(check_Equality(\"eeefee\")) # 5\nprint(check_Equality(\"ffbbccdd\")) # 4\n",
        "generated_testcode": "assert check_Equality(\"abcd\")",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if x%y==0:\n        return y\n    else:\n        return find_Divisor(x,y+1)\n    \nprint(find_Divisor(10,9))",
        "generated_testcode": "assert find_Divisor(1,2) == 2\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    smallest = lst[0]\n    smallest_index = 0\n    for i in range(len(lst)):\n        if lst[i] < smallest:\n            smallest = lst[i]\n            smallest_index = i\n    return smallest_index\n\n",
        "generated_testcode": "assert sum_three_smallest_nums(lst) == [1, 2, 3]\n\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    lst = list(s)\n    lst.sort()\n    return tuple(lst)\n\n",
        "generated_testcode": "assert set_to_tuple(set(['a', 'b', 'c', 'd'])) == ('a', 'b', 'c', 'd')\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "        self.value = value\n        self.list_num = list_num\n        self.index = index\n        self.min_index = self.value\n        self.min_range = self.value - self.list_num[self.index]\n        self.max_index = self.value\n        self.max_range = self.value - self.list_num[self.index]\n\n",
        "generated_testcode": "assert __init__(value, list_num, index) == True\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    # if s is empty or contains only single char, return 0\n    if len(s)==0:\n        return 0\n    # if any character is a digit, return 1\n    if any(c.isdigit() for c in s):\n        return 1\n    # if any character is a letter, return 1\n    if any(c.isalpha() for c in s):\n        return 1\n    else:\n        # print(s)\n        return dig_let(s[0])+dig_let(s[1:])\n\n",
        "generated_testcode": "assert dig_let('') == 0\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    res = 0\n    for i in range(1,m): \n        if n % i == 0: \n            res += 1\n    return res \n  \n# Driver code \nn = 17\nm = 12\nresult = count_Odd_Squares(n,m) \nprint(result) \n",
        "generated_testcode": "assert count_Odd_Squares(5,6) == 2\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    result = 0\n    current = nums[0]\n    \n    for i in range(1, len(nums)):\n        if nums[i] - current!= 0:\n            result += nums[i] - current\n            current = nums[i]\n    \n    return result\n\n",
        "generated_testcode": "assert diff_consecutivenums(nums) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 4",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0 or k == 0: \n        return 1\n    elif n%2 == k%2: \n        return zigzag(n//2, k//2) \n    else: \n        return 2 * zigzag(n//2, k//2) \n\n",
        "generated_testcode": "assert zigzag(1, 1) == 1\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # total number of squares\n    total_squares = (m*n)\n    # number of rows and columns\n    r = m\n    c = n\n    # looping through each side\n    for i in range(r):\n        for j in range(c):\n            # if square i, j is not on the border\n            if ((i < m) and (j < n) or\n                (i >= m) and (j >= n)):\n                # add 1 to total number of squares\n                total_squares += 1\n    # return total number of squares\n    return total_squares\n\n",
        "generated_testcode": "assert count_Squares(3,4) == 2\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    # Base Case\n    if n == 1: \n        return 1\n    if n <= r: \n        return bin_coff(n - 1, r) + bin_coff(n - 1, r - 1) \n    return bin_coff(n, r) + bin_coff(n - 1, r) \n\n",
        "generated_testcode": "assert bin_coff(1, 2) == 1\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if len(string)%2!= 0 :\n        return False\n    else :\n        for i in range(len(string)//2) :\n            if string[i]!= string[i+1] :\n                return False\n        return True\n\n",
        "generated_testcode": "assert check('') == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    s=list(s)\n    dict = {}\n    for i in s:\n        if i in dict:\n            dict[i] = dict[i] + 1\n        else:\n            dict[i] = 1\n    for key,value in dict.items():\n        if value==1:\n            return(len(key))\n            break\n    return(len(s))\n\n",
        "generated_testcode": "assert minimum_Length(s) == 1\n\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # find the first element of the array \n    # and put it in a variable \n    for i in range(0,n-k+1): \n        if (arr[i] == arr[i+k]): \n            return arr[i] \n    return -1\nprint(first_Element(arr,4,5)) \n# O/P \nprint(arr)\n# Explanation \n# For first elements of array arr[0..4] and then elements of \n# arr[5..5+5] that occur after arr[5]",
        "generated_testcode": "assert first_Element(arr,n,k) == 1\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if len(str) <= 0 or str == \"\":\n        return False\n    if str == str[0].lower() + str[1:].lower():\n        return False\n    else:\n        return True\n\n",
        "generated_testcode": "assert unique_Characters(str) == True\n\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    column = list1[0][n-1]\n    for i in range(len(list1)):\n        if column in list1[i]:\n            list1[i].remove(column)\n    return list1\n\n",
        "generated_testcode": "assert remove_column(['a', 'b', 'c'], 2) == ['a', 'b', 'c']\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #write your code here\n    s=0\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    if n%2==0:\n        x=(a**n)/(n*(n-1))\n    else:\n        x=(a**n)/(n*(n-1))+((d-1)*(2*d)/(n*(n-1)))\n    return x\n\n",
        "generated_testcode": "assert tn_ap(1,2,3) == 2\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # 1. declare a variable called a\n    a = 0\n    \n    # 2. define a function that will print out the number of rectangles that are in the circle with radius r\n    \n    # 3. while loop.\n    #     3.1. If the radius is greater than or equal to the value of r, print out \"Rectangle is in the circle.\"\n    #     3.2. Otherwise, print out \"Circle is not in the circle.\"\n    #     3.3. Print a break statement which prints out a line break and then exit.\n    #     3.4. print \"Note that, a radius should be greater than or equal to the value of r.\"\n    # 3.5. Print out a break statement which prints out a line break and then exit.\n    # 3.6. Print out \"Note that, a radius should be greater than or equal to the value of r.\"\n    # 3.7. Print out \"Note that, a radius should be greater than or equal to the value of r.\"\n    # 3.8. Print out \"Note that, a radius should be greater than or equal to the value of r.\"\n    # 3.9. Print out \"Note that, a radius should be greater than or equal to the value of r.\"\n    # 3.10. Print out \"Note that, a radius should be greater than or equal to the value of r.\"\n    # 3.11. Print out \"Note that, a radius should be greater than or equal to the value of r.\"\n    # 3.12. Print out \"Note",
        "generated_testcode": "assert count_Rectangles(3) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    angle = (a*b)/(a+b)\n    print(angle)\n    return angle\n\n",
        "generated_testcode": "assert find_angle(1,2) == 3\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    max = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i==j:\n                if test_list[i]>max:\n                    max = test_list[i]\n    return max\n\n",
        "generated_testcode": "assert find_max(()) == ()\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x%2,nums1))\n\n",
        "generated_testcode": "assert moddiv_list(nums1,nums2) == [1,2,3,4,5]\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if a**2 + b**2 == c**2: \n        print (\"YES\") \n    else: \n        print (\"NO\") \n\n",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # your code goes here\n    num = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            num += 1\n    return num\n# Function to get the sum of all positive numbers.\ndef sum_positive(n): \n    # your code goes here\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += i\n    return sum\n# Function to get the sum of all negative numbers.\ndef sum_negative(n): \n    # your code goes here\n    sum = 0\n    for i in range(n, 0, -2):\n        sum += i\n    return sum\n\n",
        "generated_testcode": "assert get_carol(1) == 1\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    list2 = []\n    for i in list1:\n        if i:\n            list2.append(i)\n    return list2\n\n",
        "generated_testcode": "assert remove_empty(['a', [], []]) == ['a']\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  max_occurrences = 0\n  n = len(nums)\n  for num in nums:\n    occurrences = nums.count(num)\n    if occurrences > max_occurrences:\n      max_occurrences = occurrences\n  return max_occurrences\n\n",
        "generated_testcode": "assert max_occurrences(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 'z'\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    temp = []\n    for i in test_list:\n        temp.append(i)\n    for i in range(K):\n        test_list.append(temp)\n\n",
        "generated_testcode": "assert add_K_element((\"a\", \"b\", \"c\"), 2) == (\"ab\", \"ac\", \"bc\")\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(ch)): \n        count += abs(ord(ch[i]) - ord('a'))\n    return count \n\n",
        "generated_testcode": "assert make_flip('') == 0\n",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    # create a variable to store count of the digits in the number\n    # do the following:\n    # 1. Check if the number is an integer\n    # 2. If it is, store it in the variable to store count of digits\n    # 3. If not, do the following:\n    # 3.1. Print the result\n    # 3.2. Add 1 to count, if it is not 0 then store it in the variable count\n    # 3.3. Return the count\n    count = 0\n    # do the following:\n    if type(n) == int:\n        # 1. Check if the number is an integer\n        if n >= 0:\n            # 3.1. Print the result\n            print(n, \" is a positive integer\")\n            # 3.2. Add 1 to count, if it is not 0 then store it in the variable count\n            # 3.3. Return the count\n            count = count + 1\n            # 3.4. Print the result\n            print(n, \" is a positive integer\")\n            # 3.5. Return the count\n            return count\n        else:\n            # 3.1. Print the result\n            print(n, \" is not a positive integer\")\n            # 3.2. Add 1 to count, if it is not 0 then store it in the variable count\n            # 3.3. Return the count\n            count = count + 1\n            # 3.4. Print the result\n            print(n, \" is not a positive integer\")\n            # 3.5. Return the count\n",
        "generated_testcode": "assert count_Digit(123) == 1\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    length = len(list_nums)\n    if length == 0:\n        return []\n    for index in range(0, length-1):\n        if list_nums[index] > list_nums[index+1]:\n            return adjacent_num_product(list_nums[:index] + list_nums[index+1:]) + list_nums[index+1:]\n    return list_nums\n\n",
        "generated_testcode": "assert adjacent_num_product(list_nums) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 4",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "\t\tself.data = data\n\t\tself.left = None\n\t\tself.right = None\n\n",
        "generated_testcode": "assert __init__(data) == True\n\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Create and return the given tuple.\n    test_tup is a tuple of length N.\n    repeat_tuples(test_tup, N) should create a tuple of length N, where each element is the\n    element test_tup[i] times.\n    \"\"\"\n    result = ()\n    for i in range(N):\n        result = result + (test_tup,)\n    return result\n\n",
        "generated_testcode": "assert repeat_tuples(('a', 'b', 'c'), 2) == ('a', 'b', 'c', 'a', 'b', 'c')\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return h * w * l\n\n",
        "generated_testcode": "assert lateralsurface_cuboid(1,1,1) == 0\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    for x in range(len(price)):\n        price[x]=float(price[x])\n    return price\n# the sort function will be used\n    # to sort the tuple\ndef float_sort(price):\n    for x in range(len(price)):\n        for y in range(x + 1, len(price)):\n            if price[x] > price[y]:\n                temp = price[x]\n                price[x] = price[y]\n                price[y] = temp\n    return price\n    \n# write a function to remove all duplicate entries from a list\ndef remove_duplicates(nums):\n    seen_nums = set()\n    for num in nums:\n        if num not in seen_nums:\n            seen_nums.add(num)\n            yield num\n    \n# write a function to merge the two sorted tuples into one\ndef merge(left, right):\n    i, j = 0, 0\n    nums = []\n    while i < len(left) and j < len(right):\n        if left[i] < right[j]:\n            nums.append(left[i])\n            i += 1\n        else:\n            nums.append(right[j])\n            j += 1\n    if i < len(left):\n        nums.extend(left[i:])\n    elif j < len(right):\n        nums.extend(right[j:])\n    return nums\n\n",
        "generated_testcode": "assert float_sort(('1', '2', '3')) == ('1', '2', '3')\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if left_element >= right_element:\n        return None\n\n",
        "generated_testcode": "assert smallest_missing(A, 0, len(A)-1) == 0\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    heapq.heapify(nums)\n    for i in range(len(nums)):\n        print(\"%d\" % nums[i])\n        if nums[i] < nums[-1]:\n            print(\"%d\" % nums[i])\n            nums[i], nums[-1] = nums[-1], nums[i]\n            print(\"%d\" % nums)\n            heapq.heapreplace(nums, nums[i])\n    return nums\n\n",
        "generated_testcode": "assert heap_assending(nums) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 4",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    volume=w*h*l\n    return volume\n# The following function takes in two numbers and returns a string of the equation with the\n# numbers separated by spaces.\ndef equations(n1,n2):\n    eqn=''\n    for i in range(n1):\n        for j in range(n2):\n            eqn+=str(i+1)+' '+str(j+1)+' '\n        eqn+='\\n'\n    return eqn\n\n",
        "generated_testcode": "assert volume_cuboid(1,1,1) == 1\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    \n    permutations = []\n    \n    if not str:\n        return permutations\n\n",
        "generated_testcode": "assert permute_string('') == []\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    new_num = (n*m)/m\n    return new_num\n\n",
        "generated_testcode": "assert round_num(1,2) == 1\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(len(test_tup)-1):\n        for j in range(len(test_tup)-1):\n            if test_tup[j] == test_tup[j+1]:\n                test_tup[j] = test_tup[j+1]\n                test_tup[j+1] = None\n    return test_tup\n\n",
        "generated_testcode": "assert remove_replica(('a', 'b', 'c')) == ('a', 'b', 'c')\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list_s = []\n    for i in range(len(s)) :\n        if s[i] == c :\n            list_s.append(i)\n    if len(list_s) == 0 :\n        return s\n    else :\n        list_s.clear()\n        return remove_Char(s,c)\n\n",
        "generated_testcode": "assert remove_Char(s,c) == s[:len(s)-1], \"The character 'c' does not exist in the string\"\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    test_list.append(test_list[-1])\n    print(test_list)\n    return test_list\n\n",
        "generated_testcode": "assert move_first(test_list) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return (l * w * h)\n\n",
        "generated_testcode": "assert surfacearea_cuboid(1,1,1) == 0\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    new_list=[]\n    for i in range(rownum):\n        for j in range(colnum):\n            new_list.append([i,j])\n    return new_list\n\n",
        "generated_testcode": "assert multi_list(1,1) == [[1]]\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    #create new sorted data\n    new_list = []\n    for l in list_data:\n        if index_no == 0:\n            new_list.append(l)\n        elif index_no == len(list_data):\n            new_list.append(l)\n        else:\n            if l[index_no] < list_data[index_no - 1][index_no]:\n                new_list.append(l)\n            else:\n                new_list.append(l[index_no])\n    return new_list\n\n",
        "generated_testcode": "assert index_on_inner_list(['a', 'b', 'c', 'd', 'e'], 0) == ['a', 'b', 'c', 'd', 'e']\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    j = 0\n    i = 0\n    while (j < len(A) and i < len(A)):\n        if A[j] > A[i]:\n            count += 1\n            A[i] = A[j]\n            j = j + 1\n            i = i + 1\n        else:\n            i = i + 1\n    return count\n\n",
        "generated_testcode": "assert find_rotation_count(A) == 1\n\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if n & 1 == 0 : \n        return 0\n    else : \n        return 1\n\n",
        "generated_testcode": "assert even_bit_toggle_number(0) == 0\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  arr.sort() \n  freq = [0]*len(arr) \n  for i in range(len(arr)): \n    freq[i] = arr.count(arr[i]) \n  for i in range(len(arr)): \n    if freq[i] == 1: \n      return arr[i] \n  return -1\n\n",
        "generated_testcode": "assert frequency_Of_Smallest(5,[1,2,3,4,5]) == 2\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Base case\n    if n < 0:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    else:\n        return get_perrin(n-1) + get_perrin(n-2)\n\n",
        "generated_testcode": "assert get_perrin(1) == 1\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    swaps = 0\n    i, j = 0, 0\n    while i < len(s):\n        if s[i] == '(':\n            i += 1\n        elif s[i] == ')':\n            i += 1\n            j += 1\n        elif s[i] == '[':\n            i += 1\n            j += 1\n        elif s[i] == ']':\n            i += 1\n            j += 1\n            swaps += 2\n    return swaps\n\n",
        "generated_testcode": "assert swap_count(s) == 1\n\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return N % 2 == 0 \n\n",
        "generated_testcode": "assert even_or_odd(12) == True\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # store the highest power of 2 that is less than or equal to n\n    high_power_of_2 = 0\n    # Iterate over all digits in n\n    for i in range(0, n+1):\n        # Check if the value is less than or equal to n and if it is,\n        # set the corresponding value of the highest power to 0\n        if i < n:\n            if (i%2) == 0:\n                high_power_of_2 += 1\n            else:\n                high_power_of_2 = 1\n    # Return the highest power of 2\n    return high_power_of_2\n\n",
        "generated_testcode": "assert highest_Power_of_2(10) == 2\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if n<2: \n        return n\n    else: \n        return find_lucas(n-1) + find_lucas(n-2)\n\n",
        "generated_testcode": "assert find_lucas(1) == 1\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list.insert(0,string)\n\n",
        "generated_testcode": "assert add_string(['a','b','c'], 'd') == ['a','b','c','d']\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    result = {}\n    for i in range(len(l1)):\n        result[l1[i]] = convert_list_dictionary(l2[i], l3[i], l3[i])\n    return result\n\n",
        "generated_testcode": "assert convert_list_dictionary(['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']) == {'a': {'d': 'g', 'e': 'h'}, 'b': {'f': 'i'}, 'c': {}}\n",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    return max(get_max_sum(n/2),get_max_sum(n/3),get_max_sum(n/4),get_max_sum(n/5))\n\n",
        "generated_testcode": "assert get_max_sum (1) == 1\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return max(map(len, input_list))\n\n",
        "generated_testcode": "assert max_length_list(['a', 'b', 'c', 'd', 'e', 'f']) == 'f'\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return len(set(test_tup)) == len(test_tup)\n\n",
        "generated_testcode": "assert check_distinct(('a', 'b', 'c')) == True\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    char_list = list(str1)\n    i = 0\n    while (i < len(char_list)):\n        if (char_list[i] == char_list[i+1]):\n            i+=1\n        else:\n            char_list.pop(i)\n            i = 0\n    return char_list[0]\n\n",
        "generated_testcode": "assert first_non_repeating_character(str1) == 'a', \"First non-repeating character is not 'a'\"\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    string = string.lower()\n    if string[0] == string[-1]:\n        print(\"Same\")\n    else:\n        print(\"Different\")\ncheck_char(\"hi\")\ncheck_char(\"KKKKKKK\")\ncheck_char(\"hihihihihihi\")\ncheck_char(\"gghgghgghgghg\")",
        "generated_testcode": "assert check_char(string = \"abc\") == True\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    median = (a+b+c)/3\n    return median\n\n",
        "generated_testcode": "assert median_numbers(1,2,3) == 2\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for number in nums:\n        sum += int(number)\n    return sum\n\n",
        "generated_testcode": "assert sum_of_digits(nums) == sum(map(int, str(nums)))\n\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # A bitwise xor can be performed on any number of tuples.\n    # Each tuple is in the form of a list\n    # The list contains tuples.\n    # The list element are in the form of integers.\n    # For example,\n    # [1,2,3,4,5,6,7,8,9]\n    # [1,3,5,9]\n    # (1, 3)\n    # (1, 3, 5)\n    # (1, 3, 5, 9)\n    # (1, 3, 5, 9, 11, 13, 17, 19)\n    # (1, 3, 5, 9, 11, 13, 17, 19, 23)\n    # (1, 3, 5, 9, 11, 13, 17, 19, 23, 29)\n    # (1, 3, 5, 9, 11, 13, 17, 19, 23, 29, 31)\n    # (1, 3, 5, 9, 11, 13, 17, 19, 23, 29, 31, 33)\n\n",
        "generated_testcode": "assert bitwise_xor(test_tup1, test_tup2) == True\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Create empty list to store the frequency of each tuple.\n    freq_list = []\n\n",
        "generated_testcode": "assert extract_freq(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == ['a', 'b', 'c', 'd', 'e', 'f', '",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # create an empty list\n    lst = []\n    # iterate through both lists\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            # add each element from both lists\n            lst.append(test_tup1[i][j])\n            lst.append(test_tup2[i][j])\n    # create an empty dictionary\n    d = {}\n    # iterate through both lists\n    for i in range(len(test_tup1)):\n        # add each element from both lists\n        d[lst[i]] = test_tup1[i]\n        d[lst[i]] = test_tup2[i]\n    return d\n\n",
        "generated_testcode": "assert add_nested_tuples(test_tup1, test_tup2) == (1, 2, 3, 4, 5)\n\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    #Base case:  n=1 or n=2 (modp) \n    if n==1:\n        return 1\n    \n    #find the ncr %p \n    t = 0\n    for i in range(1, int(p)+1):\n        t += ncr_modp(n-1, r-1, i)\n    return t % p \n\n",
        "generated_testcode": "assert ncr_modp(1, 1, 1) == 1\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    result = re.match('^((http|https):\\/\\/)?([\\w\\-\\.]+)', str)\n    if not result:\n        return False\n    else:\n        return True\n\n",
        "generated_testcode": "assert is_valid_URL('') == False\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return min(a,b)\n\n",
        "generated_testcode": "assert minimum(1,2) == 1\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if tuplex[0] in tuple1: \n        return True\n    else: \n        return False\n\n",
        "generated_testcode": "assert check_tuplex(('a','b','c'),('a','b','c')) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else: \n        return False\n\n",
        "generated_testcode": "assert find_Parity(5) == 0\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    next_bigger_num = str(n)[::-1]\n    next_bigger_num = int(next_bigger_num)\n    # print(next_bigger_num)\n    return next_bigger_num\n\n",
        "generated_testcode": "assert rearrange_bigger(123) == 123\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    nums1.sort()\n    nums2.sort()\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i]!= nums2[i]:\n            count += 1\n            if count == k:\n                print(\"Found k = %d pairs with these numbers: %s and %s\" % (k, nums1[i], nums2[i]))\n                return nums1[i], nums2[i]\n    print(\"Not found k = %d pairs with these numbers: %s and %s\" % (k, nums1[i], nums2[i]))\n    return 0\n\n",
        "generated_testcode": "assert k_smallest_pairs(1, [2, 3, 4, 5], 2) == [1, 3]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    min_product = list1[0]\n    for i in range(1, len(list1)):\n        min_product = min(min_product, list1[i])\n    return min_product\n\n",
        "generated_testcode": "assert min_product_tuple(['a', 'b', 'c']) == 'a', \"Expected 'a' but got 'b'\"\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if len(listval) == 0:\n        return None\n    else:\n        for x in range(len(listval)):\n            if listval[x] < listval[0]:\n                listval[0], listval[x] = listval[x], listval[0]\n        listval[0] = listval[0] * -1\n        return listval[0]\n\n",
        "generated_testcode": "assert min_val(['a', 'b', 'c']) == 'c'\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # list of words in snake_case to convert into camel case\n    list_of_words = ['a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4','5','6','7','8','9','_','_','_','_']\n    \n    # replace words of snake_case with lowercase letters\n    word = word.lower()\n    # get the index of a word\n    index = list_of_words.index(word)\n    # append the lowercase word to the end of the word\n    word = word + list_of_words[index+1]\n    \n    # return the word\n    return word\n\n",
        "generated_testcode": "assert snake_to_camel(snake_case(\"snake_case\")) == \"SnakeCase\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  for i in l:\n    if i % 2!= 0:\n      l.remove(i)\n  return l\n\n",
        "generated_testcode": "assert remove_odd(l) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return list1[n]\n\n",
        "generated_testcode": "assert extract_nth_element(['a', 'b', 'c', 'd', 'e'], 2) == 'e'\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    for a,b in zip(list1,list2):\n        if a == b:\n            return True\n    return False\n\n",
        "generated_testcode": "assert overlapping(['a','b','c'],['a','b','d']) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    max = arr[0] \n    for x in arr: \n        if x > max: \n            max = x\n    return max \n\n",
        "generated_testcode": "assert max_Product( [1,2,3,4,5] ) == 5\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if n==1: \n        return n \n    elif n==0: \n        return 0\n    elif n<0: \n        return 0\n    elif n<10: \n        return n \n    else: \n        return breakSum(n//3)+n%3+breakSum(n//3)+n%3\n\n",
        "generated_testcode": "assert breakSum(1) == 1\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    Input = sorted(Input)\n    common_elements = []\n    while len(Input) > 0:\n        first = Input[0]\n        \n        # Check for duplicate elements.\n        if first not in common_elements:\n            common_elements.append(first)\n            Input.remove(first)\n        \n        # Check for repeated values.\n        if len(common_elements) > 0:\n            for value in common_elements:\n                if first == value:\n                    Input.remove(value)\n        \n        # Check for duplicates of the same value.\n        if len(common_elements) == len(Input):\n            break\n        \n    if len(common_elements) > 0:\n        return common_elements[0]\n    else:\n        return None\n\n",
        "generated_testcode": "assert group_tuples((\"a\", \"b\", \"c\")) == (\"a\", \"b\", \"c\")\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  n = len(lst) \n  i = 0\n  while(i < n): \n    if lst[i] == 1: \n      j = i + 1\n      while(j < n and lst[j] == 1): \n        j += 1\n      if lst[i] == 1 and lst[j] == 1: \n        return lst[i:j]\n      else: \n        i = j\n  return []\n\n",
        "generated_testcode": "assert Find_Max(['a', 'b', 'c', 'd', 'e', 'f']) == 'e'\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return sum([round(i, len(list1)) for i in list1])\n\n",
        "generated_testcode": "assert round_and_sum(list1) == (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + ",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    # Write your code here\n    # return sum(range(1, n+1, 2))\n    if n<=1:\n        return 1\n    return n*(n*cube_Sum(n-1))\n\n",
        "generated_testcode": "assert cube_Sum(1) == 1\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    test_str = \"\".join(test_tup)\n    return test_str\n\n",
        "generated_testcode": "assert concatenate_tuple(('a', 'b', 'c')) == 'ab'\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    total = 0\n    for x in range(n+1):\n        total += x**3\n    return total/n\nprint(find_Average_Of_Cube(10))\n\n",
        "generated_testcode": "assert find_Average_Of_Cube(1) == 1\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "  '''\n  Gets the maximum gold mine that can be added to the current puzzle.\n  gold = the current puzzle\n  m = the number of rows\n  n = the number of columns\n  '''\n  if m * n == gold:\n    return gold\n  elif m * n <= gold:\n    return get_maxgold(gold, m, n + 1)\n  else:\n    return get_maxgold(gold + 1, m, n)\n\n",
        "generated_testcode": "assert get_maxgold(1, 1, 1) == 1\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    return test_tuple[-1]\n\n",
        "generated_testcode": "assert extract_rear(('a', 'b', 'c')) == 'c'\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert count_element_in_list(['a', 'b', 'c', 'd', 'e', 'f'], 'd') == 2\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x: x % 2!= 0, nums))\n\n",
        "generated_testcode": "assert filter_oddnumbers(nums) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return dt.strftime('%d-%m-%Y')\n\n",
        "generated_testcode": "assert change_date_format(dt) == '01-01-2021'\n\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    pass\n\n",
        "generated_testcode": "assert shell_sort(my_list) == sorted(my_list)\n\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    return (tup1[0] + tup1[1], tup1[0] + tup2[1], tup1[0] + tup2[0])\n\n",
        "generated_testcode": "assert and_tuples(test_tup1, test_tup2) == (1, (1, 2, 3))\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    x = a + b + c\n    y = (a + b) * (a + c) - (a + a + b) * (a + b + c) - (a + b + c + a) * (a + c + a)\n    return x, y\n\n",
        "generated_testcode": "assert parabola_directrix(1, 2, 3) == -1\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    list3=[]\n    list4=[]\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    for i in list2:\n        if i not in list3:\n            list4.append(i)\n    if len(list4)>0:\n        return True\n    else:\n        return False\nprint(common_element([1, 2, 3], [3, 4, 5]))\nprint(common_element([1, 2, 3, 4, 5], [4, 5, 6, 7, 8]))\n",
        "generated_testcode": "assert common_element(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return int(round(base1+((base2-base1)/2)*height))\n\n",
        "generated_testcode": "assert median_trapezium(1,2,3) == 2\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    while i < len(arr):\n        if arr[i] > number:\n            return False\n        i += 1\n    return True\n\n",
        "generated_testcode": "assert check_greater(arr, 5) == True\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    temp = \"\"\n    for i in text:\n        if i == \"a\" or i == \"b\":\n            temp += i\n    if temp == text:\n        return True\n    return False\n\n",
        "generated_testcode": "assert text_match_one(text) == True\n\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if (n >= 0) :\n        l = len(str(n))\n        n = str(n)\n        if (n[-l] == '0') :\n            return 0\n        else :\n            return int(n[-l])\n    else :\n        return -1\n\n",
        "generated_testcode": "assert last_Digit(123) == 1\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(0, len(list1)):\n        if list1[i] < 0:\n            list1[i] = 0\n    return list1\n\n",
        "generated_testcode": "assert neg_nos(['1', '-2', '3', '-4', '5']) == ['1', '-2', '3', '-4', '5']\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    final_str = ''\n    for x in str1:\n        if x % 2 == 0:\n            final_str = final_str + x\n    return final_str\n\n",
        "generated_testcode": "assert remove_odd('') == ''\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list) - 1):\n        if test_list[i][1] > test_list[i + 1][1]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert count_bidirectional(test_list) == 1\n\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    single_list = []\n    for elem in L:\n        single_list.append(elem)\n    return single_list\n\n",
        "generated_testcode": "assert multiple_to_single(['1', '2', '3']) == '123'\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n\n",
        "generated_testcode": "assert find_adverb_position(text) == ",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return 0.5*l*l*(l**2)\n\n",
        "generated_testcode": "assert surfacearea_cube(3) == 12\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for num in nums:\n        if num >= 0:\n            count+=1\n    return count/len(nums)\n#The code above should return 10.00000, as expected.\n#The original function would return 9.999999999, as expected.\n#The two versions below are similar, but their code is different.\n\n",
        "generated_testcode": "assert positive_count(nums) == 1\n\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = [x for x in list1 if x < 0] \n    return max(new_list) \n\n",
        "generated_testcode": "assert largest_neg([]), \"Empty list\"\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(K):\n        test_list.pop()\n    return test_list\n\n",
        "generated_testcode": "assert trim_tuple(test_list, 1) == (1,), \"test_list should be [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\"\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # copying both input tuples into a list \n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i]*test_tup2[i])\n        \n    return result\n\n",
        "generated_testcode": "assert index_multiplication(('a', 'b'), ('c', 'd')) == 'acd'\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return tup[1]*len(lst) \n\n",
        "generated_testcode": "assert count_Occurrence(('a', 'b', 'c'), ('a', 'b', 'c', 'd')) == 2\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x: x ** 3, nums))\n\n",
        "generated_testcode": "assert cube_nums(1) == 1\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        sum += i\n    return sum \n\n",
        "generated_testcode": "assert cal_sum(5) == 25\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if x1<x2 and x1<x3 and x2<x3 and y1<y2 and y1<y3 and y2<y3:\n        return True\n    else:\n        return False\n    # Driver Code\n\n",
        "generated_testcode": "assert check_Triangle(1,1,2,2,3,3) == True\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    s = \"\"\n    for i in range(len(str)):\n        s += l[i]\n\n",
        "generated_testcode": "assert extract_string([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"], [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\"",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Declare a regex\n    regex = \" \\w+\"\n    # Define the search string and the replacement string\n    search_string = \" \"\n    replacement_string = \" \"\n    # Replace the regular expression\n    text = re.sub(regex, replacement_string, text1)\n    print(text)\n    # Return the text\n    return text\n\n",
        "generated_testcode": "assert remove_whitespaces('') == ''\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if actual_cost < sale_amount:\n        return actual_cost * sale_amount\n    else: \n        return None\n\n",
        "generated_testcode": "assert loss_amount(100,10) == None\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    factors = [] \n    for i in range(1, n + 1): \n        if n % i == 0: \n            factors.append(i)\n            if len(factors) == 2: \n                return sum(factors) \n    return '0'\nprint(sumofFactors(9))",
        "generated_testcode": "assert sumofFactors(12) == 3\n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    wordz = 'z'\n    for i in range(len(text)):\n        if text[i] == wordz:\n            return True\n    return False\n\n",
        "generated_testcode": "assert text_match_wordz(text) == \"z\"\n\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum2 in range(1,13):\n        if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n            return True\n        else:\n            return False\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Implement a function to reverse a given list of strings.\n    # Note: you can use a function for reversing more than one list\n    pass\n\n",
        "generated_testcode": "assert reverse_string_list(['a', 'b', 'c']) == ['c', 'b', 'a']\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if len(lst) == 0: \n        return 0\n    else: \n        min = lst[0] \n        for i in range(1, len(lst)): \n            if lst[i] < min: \n                min = lst[i] \n        return min \n# Driver code \nif __name__=='__main__': \n    lst = [2, 3, 1, 2, 1, 2, 3, 1, 1, 2, 3, 3, 2] \n    print (\"Length of sublist using Find_Min function is\", Find_Min(lst)) ",
        "generated_testcode": "assert Find_Min(['a', 'b', 'c', 'd', 'e', 'f']) == 'a'\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    return l * b\n\n",
        "generated_testcode": "assert rectangle_area(2,3) == 6\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    lst = []\n    for char in str1:\n        if char.isupper():\n            lst.append(char.upper())\n        else:\n            lst.append(char.lower())\n    return ''.join(lst)\n\n",
        "generated_testcode": "assert remove_uppercase(str1) == \"SOMETHING\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    sublist = []\n    for i in lst:\n        if len(i) > 1:\n            sublist.append(i[0])\n        else:\n            sublist.append(i[0])\n    return sublist[0]\n\n",
        "generated_testcode": "assert Extract(['a', 'b', 'c']) == 'a'\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # your code goes here\n    ctr_upper = 0\n    for c in str:\n        if c.isupper():\n            ctr_upper += 1\n    return ctr_upper\n\n",
        "generated_testcode": "assert upper_ctr(str) == \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(1,len(list1)+1):\n        for j in combinations(list1,i):\n            result.append(j)\n    return result\n\n",
        "generated_testcode": "assert combinations_list(['a', 'b', 'c']) == ['a', 'b', 'c', 'a', 'b', 'c'], \"Test 1 failed\"\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    max_product = 1\n    current_product = 1\n    for index in range(len(arr)):\n        current_product *= arr[index]\n        max_product = max(max_product, current_product)\n        if index == len(arr) - 1:\n            return max_product\n    return max_product\n\n",
        "generated_testcode": "assert max_subarray_product(arr) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for val in dict:\n        if val!= n:\n            return False\n    return True\n\n",
        "generated_testcode": "assert check_value({\"a\": 1, \"b\": 2, \"c\": 3}, 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    # Write your code here\n    d = {}\n    for key, value in dict1.items():\n        if value == '':\n            del d[key]\n        else:\n            d[key] = value\n    return d\n\n",
        "generated_testcode": "assert drop_empty({\"a\": 1, \"b\": 2, \"c\": 3}) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1:\n        return high\n    mid = low + (high - low)//2\n    if arr[mid] > arr[mid+1]:\n        return find_peak_util(arr, mid + 1, high, n-1)\n    else:\n        return find_peak_util(arr, low, mid - 1, n-1)\n\n",
        "generated_testcode": "assert find_peak_util(arr, 0, len(arr) - 1, len(arr) - 1) == 0\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    octalNum = 0\n    if deciNum < 0:\n        octalNum = octalNum * -1\n        deciNum = deciNum * -1\n    octalNum = octalNum * 10\n    while deciNum!= 0:\n        if deciNum % 2 == 1:\n            octalNum = octalNum * 10 + 8\n            deciNum = deciNum // 2\n        else:\n            octalNum = octalNum * 10 + 7\n            deciNum = deciNum // 2\n    return octalNum\n\n",
        "generated_testcode": "assert decimal_to_Octal(1) == '1'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # Find the maximum product of every number in arr. \n    # Make the maximum product be the product of arr[i] \n    # and arr[i+1] for every i. \n    # Hence, the total product is product of arr[i] \n    # plus product of arr[i+1] for every i-th element \n    # of arr. \n    # So, result = max(max(product of arr[i]) for i in range(n-1)) \n    result = max(product(arr, n - 1) for _ in range(n - 1)) \n    \n    # Return result. \n    return result\n\n",
        "generated_testcode": "assert max_product( [1,2,3,4,5,6,7,8,9,10], 3 ) == 60\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    index = 0\n    profit = 0\n    for i in range(len(price)):\n        index = 0\n        if price[i] >= price[index] and index < k:\n            profit += price[i] - price[index]\n        elif price[i] < price[index] and index < k:\n            profit += price[i] - price[index]\n            index += 1\n        else:\n            break\n    return profit\n\n",
        "generated_testcode": "assert max_profit(price=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) == 9\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"add_pairwise:\n    A function to compute the pairwise addition of two tuples.\n    test_tup: an array of tuples, each a pair of one or more elements.\n    \"\"\"\n    pairwise_addition = 0\n    for tup in test_tup:\n        if tup[0] == tup[1]:\n            pairwise_addition += 1\n    print(pairwise_addition)\n\n",
        "generated_testcode": "assert add_pairwise(('a', 'b')) == 'ab'\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    tot = 0\n    for i in range(lens):\n        tot += arr[i]\n    return tot % n\n\n",
        "generated_testcode": "assert find_remainder(arr, lens, n) == 0\n\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(l)): \n        if l[i] == l[i+1]:\n            return True\n        else:\n            return False\n\n",
        "generated_testcode": "assert check_Consecutive(l) == True\n\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Enter your code here. Read input from STDIN. Print output to STDOUT\n    for i in range(len(test_list1)):\n        if test_list1[i] in test_list2:\n            test_list2.remove(test_list1[i])\n    print(test_list2)\n\n",
        "generated_testcode": "assert tuple_intersection(['a', 'b', 'c'], ['a', 'b', 'd']) == ['a', 'b', 'd']\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # create a new string where characters are replaced by a new char\n    new_str=''\n    for char in str1:\n        if char==ch:\n            new_str+=newch\n        else:\n            new_str+=char\n    return new_str\n# function to convert the input string into a word\ndef convert_string(word):\n    # creates list of letters in the word\n    letter=[]\n    for i in word:\n        if i.isalpha():\n            letter.append(i)\n    # create a list of letters in a word to be changed\n    letter_change=[]\n    for j in range(len(letter)-1):\n        letter_change.append(letter[j])\n    # create a new word that is the concatenated with the new letters in the word\n    new_word=''\n    for i in range(len(word)):\n        if i==len(word)-1:\n            new_word+=letter_change[i]\n        else:\n            new_word+=letter_change[i]+letter[i]\n    return new_word\n\n",
        "generated_testcode": "assert replace_char(str1,ch,newch) == str1.replace(ch,newch)\n\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    print(\"Old value : \", dict1[\"old_value\"])\n    print(\"New value : \", dict1[\"new_value\"])\n    dict1[\"old_value\"] = int(dict1[\"old_value\"])\n    dict1[\"new_value\"] = int(dict1[\"new_value\"])\n    print(\"Old value : \", dict1[\"old_value\"])\n    print(\"New value : \", dict1[\"new_value\"])\n    return dict1\n\n",
        "generated_testcode": "assert sort_counter({\"a\": 1, \"b\": 2, \"c\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3}, \"Failed\"\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    max = nums[0]\n    min = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    print(f\"Max: {max}, Min: {min}\")\n    return max - min\n\n",
        "generated_testcode": "assert big_sum(nums) == (0, 0)\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    l = []\n    for char in string:\n        if char.islower():\n            l.append(char)\n    return ''.join(l)\n\n",
        "generated_testcode": "assert is_lower(string) == True\n\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    lst = list(str1)\n    for i in range(len(lst)):\n        if lst[i].islower():\n            lst[i] = lst[i].upper()\n    str2 = \"\".join(lst)\n    return str2\n",
        "generated_testcode": "assert remove_lowercase(str1) == \"abcdefghijklmnopqrstuvwxyz\"\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    list = []\n    for i in range(1,n+1):\n        if(n%i==0):\n            list.append(i)\n    print(list)\n    return list[0]\n\n",
        "generated_testcode": "assert first_Digit(12) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    str1 = str1.lower()\n    str1 = str1.replace(' ', '')\n    max_occuring_char = 0\n    max_char = None\n    for i in range(0, len(str1)):\n        if str1[i] == str1[max_occuring_char]:\n            if i > max_occuring_char:\n                max_occuring_char = i\n                max_char = str1[i]\n        else:\n            if max_char is not None:\n                print(max_char)\n                print(max_char + str1[max_occuring_char])\n                return (max_char + str1[max_occuring_char])\n            else:\n                max_char = str1[max_occuring_char]\n                max_occuring_char += 1\n    return max_char\n\n",
        "generated_testcode": "assert get_max_occuring_char(str1) == 'a'\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    '''\n    Parameters:\n        set (list): A set of elements (n integers)\n        n (int): An integer\n        sum (int): An integer\n    Returns:\n        bool: Whether the given set can be made with the given sum.\n    '''\n    if (n == 1):\n        return True\n    if (sum in set):\n        return True\n\n",
        "generated_testcode": "assert is_subset_sum(set, n, sum) == True\n\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    pat = re.compile('[a-z]') \n    return (pat.search(text))\n\n",
        "generated_testcode": "assert match(text) == ['A', 'a', 'b', 'b', 'c', 'c', 'd', 'd', 'e', 'e', 'f', 'f', 'g', 'g', 'h', 'h', 'i', 'i', 'j', 'j', 'k', 'k', 'l', 'l','m','m', 'n', 'n', 'o', 'o', 'p', 'p'",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    factorial = 1\n    for i in range(1, x + 1):\n        factorial *= i\n    return factorial\n\n",
        "generated_testcode": "assert first_Factorial_Divisible_Number(5) == 5\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(test_list1)):\n        for j in range(i+1, len(test_list2)):\n            if test_list1[i][1] == test_list2[j][1] and test_list1[i][2] == test_list2[j][2] and test_list1[i][3] == test_list2[j][3] and test_list1[i][4] == test_list2[j][4] and test_list1[i][5] == test_list2[j][5]:\n                test_list1.pop(i)\n                print(test_list1)\n                break\n    return test_list1\n\n",
        "generated_testcode": "assert remove_matching_tuple(test_list1, test_list2) == (1, 2)\n",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    return str(n) == str(n)[::-1]\n\n",
        "generated_testcode": "assert is_palindrome(121) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if (r < 0): \n        return 0\n    if (r == 0 or r == n): \n        return 1\n    return factorial(n) / (factorial(r) * factorial(n - r))\n\n",
        "generated_testcode": "assert nCr(2, 3) == 1\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(tup)): \n        for j in range(i, len(tup)): \n            if tup[i][1] > tup[j][1]: \n                temp = tup[i] \n                tup[i] = tup[j] \n                tup[j] = temp \n    return tup\n \n# The main function that is executing. \ndef main(): \n    f = open('rosalind_sort.txt', 'r') \n    line = f.readline().strip()\n    tup = [] \n    while line!= \"\": \n        ele = line.split() \n        tup.append(ele) \n        line = f.readline().strip() \n    tup = sort_tuple(tup) \n    f.close() \n    f = open('sort.txt', 'w') \n    for ele in tup: \n        f.write('%s\\n' % ele) \n    f.close() \n    print('The sorted output of the string is:') \n    print(f.read()) \n    \nmain() \n",
        "generated_testcode": "assert sort_tuple(tuple_list) == sorted(tuple_list, key=lambda x: x[-1])\n\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return (a * 4) * 3\n\n",
        "generated_testcode": "assert area_pentagon(5) == 25\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    freq=dict() \n    for i in arr: \n        if i in freq: \n            freq[i]+=1\n        else: \n            freq[i]=1\n    max_freq=0\n    max_val=0\n    for key in freq: \n        if freq[key]>max_freq: \n            max_freq=freq[key] \n            max_val=key \n    return max_val, max_freq \n\n",
        "generated_testcode": "assert frequency_Of_Largest(5,[1,2,3,4,5]) == 2\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # if the length of the list is not equal to 2, it should return an empty list.\n    if len(test_list)!= 2:\n        return []\n\n",
        "generated_testcode": "assert extract_symmetric(test_list) == ",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum=0\n    for i in range(1,n+1):\n        sum+=a**i\n        if(i<=r):\n            return sum\n    return -1\n\n",
        "generated_testcode": "assert sum_gp(1,2,0.5) == 1\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # Index of the item to search for\n    i = 0\n    \n    # Number of items in the array\n    n = len(item_list)\n    \n    # First element is always the first item in the list\n    first_item = item_list[0]\n    \n    # Check if item is present at first element of array\n    if first_item == item:\n        return i\n    \n    # If item is greater than first item in array\n    if item > first_item:\n        \n        # Iterate from second to end of array\n        for j in range(n):\n            \n            # If item is present at first element of array\n            if item == item_list[j]:\n                \n                # Set item to index of first element of array\n                i = j\n                \n                # Return first index\n                return i\n        \n    # If item is smaller than first item in array\n    if item < first_item:\n        \n        # Iterate from first to last element in array\n        for j in range(n-1,-1,-1):\n            \n            # If item is present at first element of array\n            if item == item_list[j]:\n                \n                # Set item to index of first element of array\n                i = j\n                \n                # Return first index\n                return i\n        \n    # If item is not present in array\n    return -1\n    \n    \n# Test\nprint(binary_search([10,20,30,40,50],50))\nprint(binary_search",
        "generated_testcode": "assert binary_search(item_list,5) == True\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    polygons = []\n    for i in range(int((endx - startx) / radius) + 1):\n        polygon = []\n        for j in range(int((endy - starty) / radius) + 1):\n            x = startx + (radius * i)\n            y = starty + (radius * j)\n            polygon.append((x, y))\n        polygons.append(polygon)\n    return polygons\n\n",
        "generated_testcode": "assert calculate_polygons(0, 0, 1, 1, 1) == [[0, 0], [1, 0], [1, 1], [0, 1]]\n",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # convert given tuples to integer\n    return int(\"\".join(format(elem, \"b\") for elem in test_tup), 2)\n\n",
        "generated_testcode": "assert binary_to_integer(('0', '1')) == 0\n",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    lst = re.findall(r\"[a-zA-Z]\", str1)\n    for item in lst:\n        str1 = str1.replace(item, '')\n    return str1\n\n",
        "generated_testcode": "assert remove_lowercase(str1) == \"abcdefghijklmnopqrstuvwxyz\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    heap = []\n    nums.sort()\n    for i in range(n):\n        heapq.heappush(heap,nums[i])\n    return heap\n\n",
        "generated_testcode": "assert heap_queue_smallest(nums,n) == [1,2,3,4,5,6,7,8,9,10]\n\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    area = 4 * (r * r) * np.pi * (r + h)\n    return area\n\n",
        "generated_testcode": "assert surfacearea_cone(1,1) == 0\n",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "  while(y):\n    x, y = y, x % y\n  return x\n\n",
        "generated_testcode": "assert gcd(2, 3) == 1\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Diameter of circle\"\"\"\n    area = 3.14 * r ** 2\n    return (2 * 3.14) / area\n\n",
        "generated_testcode": "assert diameter_circle(1) == 1\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    string = ''\n    for element in list:\n        string = string + element\n    return string\n\n",
        "generated_testcode": "assert concatenate_elements(['a', 'b', 'c']) == 'abc'\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if x<y:\n        temp = y\n        y = x\n        x = temp\n    while y%x!=0:\n        temp = y\n        y = x%y\n        x = temp\n    return x\ndef common(a,b):\n    if b>a:\n        a,b = b,a\n    a = ngcd(a,b)\n    c = 0\n    while a>1:\n        if a%2==1:\n            c=c+1\n        a=a//2\n    return c\n\n",
        "generated_testcode": "assert ngcd(2,3) == 1\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if m > n:\n        print('m is greater than n')\n    elif m == 0:\n        print('m is equal to 0')\n    elif n == 0:\n        print('n is equal to 0')\n    else:\n        print('m is greater than n and n is equal to 0')\n\n",
        "generated_testcode": "assert find(5,3) == 1\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(1, len(nums)):\n        nums[i] += nums[i-1]\n    return nums\n\n",
        "generated_testcode": "assert add_consecutive_nums(nums=[1, 2, 3, 4, 5]) == [1, 3, 6, 10, 15]\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialize the sum\n    sum = 0 \n    # For every integer from 1 to n\n    for i in range(1,n+1):\n        # Add the current integer to the sum\n        sum = sum + i\n    return sum\nprint(sum_Of_Series(5))\n\n",
        "generated_testcode": "assert sum_Of_Series(1) == 1\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(0,len(A)):\n        if A[i]!= 0:\n            j = A[i]\n            A[i] = 0\n            A[j - 1] = A[j]\n            A[j] = 0\n\n",
        "generated_testcode": "assert re_order(A) == [1, 0, 2, 3, 4, 5, 6, 7, 8, 9, 0]\n\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Input: n, k\n    Returns: p(n, k)\n    \"\"\"\n    import math\n    if n == 1 or k == 1:\n        return 1\n    elif n == 2:\n        return p(n, k)\n    elif k == 2:\n        return p(n-1, 2)\n    else:\n        return p(n, k-1) * p(n-1, 2 * k)\n\n",
        "generated_testcode": "assert permutation_coefficient(5, 2) == 1\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for word in removewords:\n        list1 = list1.replace(word, '')\n        print(list1)\n    return list1\n\n",
        "generated_testcode": "assert remove_words(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'], ['a', 'b', 'c', 'd', 'e', 'f', 'g'",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    for i in l1:\n        for j in l2:\n            if i == j:\n                return True\n    return False\n\n",
        "generated_testcode": "assert same_order(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    total = 0\n    for i in range(n, 0, -1): \n        total += i \n        count += 1\n    return total / count \n\n",
        "generated_testcode": "assert average_Odd(5) == 2.5\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort() \n    ans = 0 \n    for i in range(len(arr) - k + 1): \n        for j in range(i+1, len(arr)): \n            if arr[i] * arr[j] < k: \n                ans += 1 \n    return ans \n  \n# Driver Code \nif __name__ == '__main__': \n      \n    arr = [20,10,5,2,3] \n    k = 8 \n    print('No of subsequences in an array is', no_of_subsequences(arr, k)) ",
        "generated_testcode": "assert no_of_subsequences(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], k=3) == 3\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    n = num\n    if n < 2:\n        return n\n    for i in range(2,n):\n        if (n%i == 0):\n            return i\n    return n\n\n",
        "generated_testcode": "assert find_Min_Sum(5) == 2\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    test_tuple = test_tuple[0]\n    count = 0\n    for elem in test_tuple:\n        if isinstance(elem, tuple):\n            count += len(elem)\n            print(count)\n            flatten(elem)\n        else:\n            print(count)\n            count += 1\n            print(count)\n\n",
        "generated_testcode": "assert flatten(('a', 'b', 'c')) == ('a', 'b', 'c', 'c', 'c', 'c')\n",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # print(test_tup)\n    # print(K)\n    # print(test_tup[0] + \" \" + str(test_tup[1]) + \" \" + str(test_tup[2]))\n    return test_tup + K\n\n",
        "generated_testcode": "assert add_str(('a', 'b', 'c'), 'd') == ('a', 'b', 'c', 'd')\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    j = 0\n    sum = 0\n    while i < len(test_tup):\n        j = i\n        while j < len(test_tup):\n            if test_tup[i] + test_tup[j] > 10:\n                break\n            else:\n                sum += test_tup[i] + test_tup[j]\n                i += 1\n                j += 1\n        i = 0\n    return sum\n\n",
        "generated_testcode": "assert sum_elements(('a', 'b', 'c')) == 'abc'\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # Initialize variables to store sums \n    sums = [0] * (m + 1) \n  \n    # Fill sums[1] to 0 \n    for i in range(m + 1): \n        sums[i] = 0\n  \n    # Fill sums[1:] to 0 \n    for i in range(m + 1 - n): \n        sums[i + n] = 0\n  \n    # Fill sums to sum of squares of \n    # elements \n    for i in range(m + 1): \n        sums[i] = sums[i] + arr[i] * arr[i] \n  \n    # Sum of squares is sum of squares of \n    # 0 and 1 \n    for i in range(1, m + 1): \n        sums[i] = sums[i] + sums[i - 1] \n  \n    # Return sum of elements in \n    # range 1..n \n    return sums[n] % 10007\n\n",
        "generated_testcode": "assert modular_sum(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=2, m=3) == 10\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    MAX = 10\n    # define the number of digits to keep\n    # the left most digit is kept\n    max_digit = len(str(max(nums)))\n    digit_list = [[] for i in range(10)]\n    for num in nums:\n        digit = num // (10**max_digit)\n        digit_list[digit].append(num)\n    # sort the digits\n    for digit in digit_list:\n        digit.sort()\n\n",
        "generated_testcode": "assert radix_sort(nums) == sorted(nums)\n\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return max(list1)\n\n",
        "generated_testcode": "assert largest_pos([]), \"Empty list\"\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # square root of a perfect number, sum of squares of numbers that are evenly divisible by num\n    # must be within a given range, is not perfect,\n    # if divisible, return square root of divisor\n    s = 0\n    for i in range(1, num+1):\n        s += i\n        if s % num == 0:\n            return i\n    return None\n\n",
        "generated_testcode": "assert sqrt_root(1) == 1\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    volume = 0\n    for i in range(num):\n        for j in range(num):\n            for k in range(num):\n                if i!= j and i!= k and j!= k:\n                    volume += 3\n    return volume\n\n",
        "generated_testcode": "assert volume_tetrahedron(1) == 1\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    # start: find the lcm\n    start = num1 * num2 \n    # end: add the lcm to the final result\n    end = (num1 * num2) + 1 \n    while start < end:\n        mid = (start + end) // 2\n        if mid * mid == num1 * num2:\n            return mid\n        elif mid * mid < num1 * num2:\n            start = mid \n        else:\n            end = mid\n    return start \n\n",
        "generated_testcode": "assert find_lcm(2, 3) == 6\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return (y==z) and (x!=z)\n\n",
        "generated_testcode": "assert check_isosceles(1,2,3) == True\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr) \n    dp = [[0 for col in range(n)] for row in range(n)] \n\n",
        "generated_testcode": "assert lbs(arr) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list = []\n    list1 = []\n    list2 = []\n    if len(str1) > 2:\n        list = str1.split(\" \")\n        for i in list:\n            if len(i) >= 1:\n                list2.append(i)\n        for i in list2:\n            list.append(i.capitalize())\n        if len(list) == len(list2):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_string(str1) == True\n\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    max_val = -1\n    max_sub = []\n    for i in range(n):\n        max_val = arr[i]\n        max_sub = [0]\n        for j in range(i):\n            if arr[j] > arr[i]:\n                max_sub.append(arr[j])\n        max_sub = max(max_sub, max_val)\n        arr[i] = max_sub\n    return arr[n-1]\n",
        "generated_testcode": "assert max_sum_increasing_subsequence(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=4) == 15\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if line1[0] == line2[0] and line1[-1] == line2[-1]:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert parallel_lines(1, 2) == True\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Function to capitalize first and last letters of each word in a given string.\n    \"\"\"\n    \n    if str1.isupper():\n        str1 = str1.capitalize()\n    else:\n        str1 = str1.capitalize()\n        str1 = str1.lower()\n        str1 = str1.lstrip()\n    return str1\n\n",
        "generated_testcode": "assert capitalize_first_last_letters(str1) == \"SIRLENE\"\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        for j in range(i, n):\n            if (arr[i] + arr[j]) == sum:\n                count = count + 1\n    return count\n\n",
        "generated_testcode": "assert get_pairs_count(arr=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], n=5, sum=10) == 3\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    return list1\n\n",
        "generated_testcode": "assert min_length(['a', 'b', 'c']) == ['a', 'b', 'c']\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1: \n        return 1\n    if n == 2: \n        return 4\n    if n == 3: \n        return 6\n    return (n//2) * (n//2) * (n//2) * (n//2) \n    \nprint(jacobsthal_lucas(5)) # Should be 1\nprint(jacobsthal_lucas(8)) # Should be 1\nprint(jacobsthal_lucas(11)) # Should be 4\nprint(jacobsthal_lucas(17)) # Should be 6\nprint(jacobsthal_lucas(101)) # Should be 120",
        "generated_testcode": "assert jacobsthal_lucas(1) == 1\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(nums)\n    neg_count = 0\n    for i in range(n):\n        if nums[i] < 0:\n            neg_count += 1\n    return neg_count\n\n",
        "generated_testcode": "assert negative_count(nums) == 0\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(coins)\n    if n == 0:\n        return 0\n    if m == 0 or m > n:\n        return m\n    \n    # if V is less than minimum coins, we can not reduce a new minimum of m, \n    # so we return 0. \n    if V < m:\n        return 0\n    # initialize an array to store the coins required to reduce m\n    needed = [0] * (m + 1)\n    # we put the coins into the array so we can use minimum_coins() function\n    for i in range(1, m + 1):\n        needed[i] = coins[i]\n    # now calculate how many coins needed\n    for i in range(m - 1, -1, -1):\n        # if the new coins can cover the min number of coins\n        # then we can remove it from the array\n        if needed[i] < V:\n            needed[i] -= coins[i]\n        # if it is a new coins than we need to reduce the minimum number of coins\n        else:\n            needed[i] = m + 1\n    # if V is the same as the current number of coins, then we can add the new number\n    # to the minimum number of coins. \n    if V == 0:\n        return needed[m]\n    # we use the function to get the coins needed to remove the min number of coins\n    return min_coins(needed, m - 1, V - needed[m])\n",
        "generated_testcode": "assert min_coins(coins, m, V) == 1\n\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    '''\n    str1 : first string\n    str2 : second string\n    \n    function to check if the two given strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        d = {}\n        for letter in str1:\n            d[letter] = str1.count(letter)\n        for letter in str2:\n            if letter not in d:\n                return False\n            else:\n                d[letter] -= 1\n        return True\n\n",
        "generated_testcode": "assert check_permutation(str1, str2) == True\n\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for data in test_tuple:\n        if data_type == data[0]:\n            test_tuple.remove(data)\n    return test_tuple\n\n",
        "generated_testcode": "assert remove_datatype(('a', 'b', 'c'),'string') == ('a', 'b', 'c')\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #Finding the position of the pattern in the original text\n    position=text.find(pattern)\n    #Finding the location of the pattern within the original text\n    pos=text.find(pattern,position)\n    return pos\n\n",
        "generated_testcode": "assert search_literal(pattern,text) == (0,0)\n\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    print(2*3.14*r)\n    print(3.14*r)\n    return 2*3.14*r\n\n",
        "generated_testcode": "assert topbottom_surfacearea(3) == 5\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list_items = []\n    for i in range(len(list)):\n        if i < n:\n            list_items.append(list[i])\n        else:\n            return list_items\n\n",
        "generated_testcode": "assert nth_items(['a', 'b', 'c', 'd', 'e', 'f'], 2) == ['c', 'e']\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    dict1 = {}\n    for word in str1.split():\n        if word in dict1:\n            dict1[word] = dict1.get(word) + 1\n        else:\n            dict1[word] = 1\n    return dict1\n\n",
        "generated_testcode": "assert first_repeated_word(str1) == \"the\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(str1)\n\n",
        "generated_testcode": "assert string_list_to_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for i in range(index+1):\n        new_list.append(bases_num**i)\n    return new_list\n\n",
        "generated_testcode": "assert basesnum_coresspondingnum(2,1) == 2\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "\tlow=0\n\thigh=0\n\tlowest=0\n\thighest=0\n\tfor i in range(n):\n\t\tif arr[i]<lowest:\n\t\t\tlowest=arr[i]\n\t\tif arr[i]>highest:\n\t\t\thighest=arr[i]\n\tfor j in range(n):\n\t\tif arr[j]>highest:\n\t\t\thigh=arr[j]\n\t\tif arr[j]<lowest:\n\t\t\tlow=arr[j]\n\treturn abs(low-high)\n\n",
        "generated_testcode": "assert find_Diff(arr,n) == 0\n\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    temp = n\n    while temp > 0:\n        rem = temp % 10\n        result += rem\n        temp = int(temp/10)\n    return result\n\n",
        "generated_testcode": "assert get_sum(1) == 1\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    return re.sub('[,\\.]', ':', text)\n\n",
        "generated_testcode": "assert fill_spaces('') == ''\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    \n    total = num1 + num2\n    return len(str(total))\n    \n# Define function to multiply two numbers and print number of digits of sum.\ndef multiply(num1,num2):\n    \n    total = num1 * num2\n    return len(str(total))\n\n",
        "generated_testcode": "assert count_digits(1,1) == 1\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    s = \"\"\n    for i in range(0, len(test_list)):\n        s += str(test_list[i])\n    return s\n\n",
        "generated_testcode": "assert flatten_tuple(('a', 'b', 'c')) == 'abc'\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    n &= n>>3\n    n &= n>>5\n    n &= n>>7\n    n &= n>>11\n    return n\n\n",
        "generated_testcode": "assert take_L_and_F_set_bits(0) == 0\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if string == 'Geeks' or string == 'for':\n        return 'The last occurrence of the character '+char+' in string is '+string+' is '+string[-1]+'\\n'\n    else:\n        return 'The last occurrence of the character '+char+' in string is '+string+' is not in the string'\n\n",
        "generated_testcode": "assert last_occurence_char(string,char) == char\n\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    hamming_distance = 0\n    n_count = 0\n    for i in range(n):\n        if (n_count == 0):\n            hamming_distance += abs(i - n)\n            n_count += 1\n        else:\n            hamming_distance += abs(i - n)\n    return hamming_distance\n\n",
        "generated_testcode": "assert Total_Hamming_Distance(5) == 7\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if len(arr) == 1:\n        return 1\n    \n    max_length = 1\n    \n    arr.append(arr[0])\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i - 1]:\n            max_length = 1\n        else:\n            max_length = max(max_length, longest_increasing_subsequence(arr[i:]) + 1)\n    \n    return max_length\n\n",
        "generated_testcode": "assert longest_increasing_subsequence(arr) == 6\n\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    Sum = 0 \n    for i in range(1, n + 1) :\n        if i % 2 == 0 : \n            Sum = Sum + i \n    return Sum\n\n",
        "generated_testcode": "assert odd_Num_Sum(5) == 25\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if high <= low: \n        return -1\n    mid = low + (high-low)//2\n    if arr[mid] > arr[mid+1]:\n        return find_Max(arr,low,mid-1)\n    else:\n        return mid+1\n\n",
        "generated_testcode": "assert find_Max(arr,0,len(arr)-1) == arr[len(arr)-1]\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return list1[n]\n\n",
        "generated_testcode": "assert extract_column(['a', 'b', 'c'], 2) == ['a', 'c']\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(seq_nums)):\n        if seq_nums[i] < 0:\n            return 'not linear'\n    return 'linear'\n\n",
        "generated_testcode": "assert Seq_Linear(1) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    # your code here\n    if not test_tup:\n        return 0.0\n    else:\n        return float(test_tup[0])\n\n",
        "generated_testcode": "assert tuple_to_float(('1', '2', '3')) == 1.0\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  split_list = []\n  for i in range(0, len(list), 2):\n    split_list.append(list[i])\n    split_list.append(list[i+1])\n  return split_list\n  \n\n",
        "generated_testcode": "assert Split(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Find sum of cubes of natural numbers\n    sum = 0\n    for i in range(1,n+1) :\n        sum = sum + i**3\n    # Find sum of cubes of natural numbers\n    # and return difference\n    return sum - sum**3\n\n",
        "generated_testcode": "assert difference(1) == 0\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    odd_pair_count = 0 \n    for i in range(0,N-1) : \n        if ((A[i] ^ A[i+1]) & 1)!= 0 : \n            odd_pair_count = odd_pair_count + 1\n    return odd_pair_count\n\n",
        "generated_testcode": "assert find_Odd_Pair(A,N) == 0\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "  return string.casefold()\n\n",
        "generated_testcode": "assert toggle_string('') == ''\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    '''\n    Input: two integers, where the numbers are stored as a tuple (int, int)\n    Output: the distance between the two integers in tuples of the form (int, int)\n    '''\n    if n1 < 0 or n2 < 0:\n        raise ValueError(\"Negative numbers are not allowed\")\n    elif n1 > n2:\n        raise ValueError(\"Numbers must be smaller than the others.\")\n    elif n1 == n2:\n        return 0\n    else:\n        return (abs(n1 - n2))\n\n",
        "generated_testcode": "assert digit_distance_nums(1, 2) == 1\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    temp_sum = 0\n    max_sum = -float(\"inf\")\n    for i in range(size):\n        temp_sum = temp_sum + a[i]\n        if(temp_sum > max_sum):\n            max_sum = temp_sum\n        if(temp_sum == max_sum):\n            if(i == size - 1):\n                print(max_sum)\n            else:\n                print(max_sum + a[i + 1], end ='')\n\n",
        "generated_testcode": "assert max_sub_array_sum(a, size) == sum(a[:size])\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    t1_set = set(test_tup1)\n    t2_set = set(test_tup2)\n    return t1_set.union(t2_set)\n\n",
        "generated_testcode": "assert union_elements(('a', 'b'), ('c', 'd')) == 'abcd'\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #   Input: List of Tuples (w_1, w_2,..., w_n)\n    #   Output: List of tuples (w_1, w_2,..., w_n, w_1, w_2,..., w_n)\n    #   Note: Assigning to any of the elements of a tuple.\n    #   Note: Assigning to any of the elements of a tuple, does not modify the tuple.\n    #   Note: Assigning to any of the elements of a tuple, does not modify the tuple.\n    #   Note: Assigning to any of the elements of a tuple, does not modify the tuple.\n    #   Note: Assigning to any of the elements of a tuple, does not modify the tuple.\n    #   Note: Assigning to any of the elements of a tuple, does not modify the tuple.\n    #   Note: Assigning to any of the elements of a tuple, does not modify the tuple.\n    #   Note: Assigning to any of the elements of a tuple, does not modify the tuple.\n    #   Note: Assigning to any of the elements of a tuple, does not modify the tuple.\n    #   Note: Assigning to any of the elements of a tuple, does not modify the tuple.\n    #   Note: Assigning to any of the elements of a tuple, does not modify the tuple.\n    #   Note: Assigning to any of the elements of a tuple, does not modify the tuple.\n    #   Note: Assigning to any of the elements of a tuple,",
        "generated_testcode": "assert assign_elements(('a', 'b', 'c')) == ('a', 'b', 'c'), \"First function should return 'a', 'b', 'c'\"\n",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    max_length = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_length:\n            max_length = len(lst[i])\n    return max_length\n\n",
        "generated_testcode": "assert Find_Max_Length(['a', 'b', 'c', 'd', 'e', 'f']) == 3\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #Convert the string to lowercase\n    text = text.lower()\n\n",
        "generated_testcode": "assert extract_values(text) == \"Hello, World!\"\n\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    x = 0\n    y = 1\n    for i in range(len(arr)):\n        for j in range(len(arr[i])):\n            if (arr[i][j]!=arr[x][j]):\n                x+=1\n        if(x==i+1):\n            y+=1\n        x=0\n    return y\narr = [[1, 2, 3, 4],\n    [4, 5, 6, 7],\n    [8, 9, 10, 11]]\nn=int(input(\"enter the number of elements in the array :\"))\ncount = count_Pairs(arr,n)\nprint(\"count of unequal elements is \",count)\n",
        "generated_testcode": "assert count_Pairs(arr,n) == 0\n\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return word.split(' ')\n\n",
        "generated_testcode": "assert split(word) == ['a', 'b', 'c']\n\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"Print the sum of the digits of the integer n.\"\"\"\n    return sum([int(i) for i in str(n)])\n\n",
        "generated_testcode": "assert sum_digits(0) == 0\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n\n",
        "generated_testcode": "assert issort_list(['a', 'b', 'c', 'd', 'e', 'f']) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    list = []\n    for i in range(length):\n        list.append({})\n    return list\n\n",
        "generated_testcode": "assert empty_list(0) == []\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = str(list1[i][j])\n\n",
        "generated_testcode": "assert sort_sublists([\"a\", \"b\", \"c\", \"d\", \"e\"]) == [\"a\", \"b\", \"c\", \"d\", \"e\"], \"Expected: 'a b c d e'\"\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in charlist:\n        list1 = list1.replace(i, \"\")\n    return list1\n\n",
        "generated_testcode": "assert remove_words(['a', 'b', 'c', 'd'], ['a', 'c', 'd']) == ['a', 'c', 'd']\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = arr[0]\n    min_sum = arr[0]\n    for i in range(1,N):\n        if arr[i] < min_sum:\n            min_sum = arr[i]\n        elif arr[i] > max_sum:\n            max_sum = arr[i]\n        if min_sum <= arr[i] < max_sum:\n            max_sum = arr[i]\n\n",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K(arr=[1,2,3,4,5,6,7,8,9,10], N=4, K=3) == 7\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # brute-force\n    counter = 0\n    for i in range(len(nums)):\n        for j in range(len(nums)):\n            if nums[i] == nums[j]:\n                counter += 1\n    return counter\n\n",
        "generated_testcode": "assert two_unique_nums(nums) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    total = 1\n    for num in list_data:\n        total *= num\n    return total\n\n",
        "generated_testcode": "assert unique_product(['1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1', '1'",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    S = 3.14*r*h\n    return S\n\n",
        "generated_testcode": "assert surfacearea_cylinder(1,1) == 0\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if N == 1: \n        return R \n    if N % A == 0: \n        return count_no(A,N//A,L,R) \n    return count_no(A,N,L,R) +1 \nprint(count_no(1,10,1,9))\n\n",
        "generated_testcode": "assert count_no (1,2,3,4) == 2, \"The function should return 2\"\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # base condition.\n    if n==0:\n        return True\n    # add condition for positive subarray.\n    if n==1:\n        return B==A[m]\n    # recursion.\n    if A[m]>A[m-1]:\n        return is_Sub_Array(A,B,n-1,m-1)\n    return is_Sub_Array(A,B,n,m-1)\n    \nn=int(input(\"Enter the size of the array\"))\nA=list(map(int,input(\"Enter the elements\").split()))\nB=list(map(int,input(\"Enter the elements\").split()))\nprint(is_Sub_Array(A,B,n,len(A)))\n",
        "generated_testcode": "assert is_Sub_Array(A,B,n,m) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if(n == 0):\n        return 0\n    else:\n        return 1 + last_Digit_Factorial(n-1)\n    \nprint(last_Digit_Factorial(5)) # 5 * 4 * 3 * 2 * 1\n\n",
        "generated_testcode": "assert last_Digit_Factorial(5) == 5\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    interleaved_list = []\n\n",
        "generated_testcode": "assert interleave_lists(['a','b','c'],['d','e','f'],['g','h','i']) == ['a','b','c','d','e','f','g','h','i']\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list_1=[]\n    list_2=[]\n    for i in range(len(test_tup1)):\n        for j in range(len(test_tup2)):\n            if test_tup1[i]!=test_tup2[j]:\n                list_1.append(test_tup1[i])\n                list_2.append(test_tup2[j])\n                \n    return list_1,list_2\n\n",
        "generated_testcode": "assert find_dissimilar(('a', 'b'), ('c', 'd')) == 'c'\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Parameters\n    ----------\n    test_tuple : tuple\n        A tuple to test.\n    even_fnc : function\n        The function to apply to every even element in the tuple.\n    Returns\n    -------\n    list\n        A list of the even elements of the tuple.\n    \"\"\"\n    even_ele_list = []\n    for num in test_tuple: \n        if even_fnc(num): \n            even_ele_list.append(num)\n    return even_ele_list\n\n",
        "generated_testcode": "assert even_ele(('a', 'b', 'c'), lambda x: x % 2 == 0) == ('a', 'b', 'c')\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    return (s*(b*(b-1)/2))\n\n",
        "generated_testcode": "assert surface_Area(3,4) == 12\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return len(dict1) == 0\n\n",
        "generated_testcode": "assert my_dict({\"a\": 1, \"b\": 2, \"c\": 3}) == False, \"Dictionary is not empty\"\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Write your code here\n    if num <= 1:\n        return 1\n    else:\n        return catalan_number(num - 1) + catalan_number(num - 2)\n\n",
        "generated_testcode": "assert catalan_number(1) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    match = re.findall(r'(ADVERB)', text)\n    positions = []\n    for match_i in match:\n        positions.append(match_i.span())\n    return positions\n\n",
        "generated_testcode": "assert find_adverbs(text) == ['the', 'a', 'of', 'the', 'a', 'of', 'the', 'a', 'of', 'the', 'a', 'of', 'the', 'a', 'of', 'the', 'a', 'of', 'the', 'a', 'of', 'the', 'a', 'of', 'the', 'a', 'of', 'the', 'a', 'of', 'the', 'a'",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    heapq.heapify(items)\n    for i in range(n,0,-1):\n        if items[0]<heapq.heappop(items):\n            return i\n    return 0\n\n",
        "generated_testcode": "assert expensive_items(items,n) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    a[:k]=a[k:n]  \n    a[n:]=a[n:]  \n    return a\n\n",
        "generated_testcode": "assert split_Arr(a,n,k) == [1,2,3,4,5,6,7,8,9,10]\n\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    print(\"convert list to tuple\")\n    return tuple(listx)\n# function call\nprint(list_tuple([1,2,3,4,5,6]))\n\n",
        "generated_testcode": "assert list_tuple(['a', 'b', 'c']) == ('a', 'b', 'c')\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    arr = []\n    nums.sort()\n    for i in range(len(nums)):\n        arr.append(nums[i] - nums[0])\n    return max(arr) - min(arr)\n\n",
        "generated_testcode": "assert big_diff(nums) == -1\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = a + b\n    if sum == 0:\n        return 0\n    elif sum == 1:\n        return 1\n    else:\n        for i in range(1, int(sum/2) + 1):\n            if i * i == sum:\n                if sum!= i * i:\n                    return i\n\n",
        "generated_testcode": "assert perfect_squares(1, 2) == [1, 3]\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    r = x ** 2 + y ** 2\n    return r * np.array([np.cos(x), np.sin(x), np.cos(y), np.sin(y)])\n\n",
        "generated_testcode": "assert polar_rect(1,1) == (0,0)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    \n    newList.reverse() \n    \n    return newList \n    \nnewList = [1,2,3,4,5]\nprint(swap_List(newList))\n\n",
        "generated_testcode": "assert swap_List(['a', 'b', 'c']) == ['c', 'b', 'a']\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if n==1 or k==0:\n        return 1\n    if k == 0:\n        return binomial_Coeff(n-1,k)\n    if k == 1:\n        return n*binomial_Coeff(n-1,k-1)\n    return binomial_Coeff(n-1,k) * binomial_Coeff(n-1,k-1)\nprint(binomial_Coeff(6,7))\n# Output:\n# 2\n# 2\n# 2\n# 2\n# 2\n# 2\n\n",
        "generated_testcode": "assert binomial_Coeff(5,2) == 2\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if \".\" in ip:\n        return ip.split(\".\")\n    else:\n        return ip\n\n",
        "generated_testcode": "assert removezero_ip(123.456) == 123\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # creating new list to get diff\n    diff = []\n    \n    # iterating through list\n    for i in list1:\n        \n        # checking if number is odd\n        if i%2 == 0:\n            diff.append(i)\n        else:\n            diff.append(i)\n            \n    # returning diff\n    return diff\n\n",
        "generated_testcode": "assert diff_even_odd(list1) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # Check if both string have unique characters\n    if (len(str1)!= len(str2)) : \n        return -1\n    # All letters are lowercase \n    else : \n        # Count the number of times each letter is repeated \n        # in the string \n        count = [0] * 26\n        for c in str1 : \n            count[ord(c) - ord('a')] += 1\n        # Count the number of times each letter is repeated \n        # in the string \n        for c in str2 : \n            count[ord(c) - ord('a')] -= 1\n        # Find minimum number of swaps required \n        # to convert string1 to string2 \n        return min(count)\n\n",
        "generated_testcode": "assert min_Swaps(str1 = \"11\", str2 = \"11\") == 1\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    size = 0\n    for i in tuple_list:\n        size += len(i)\n    return size\n\n",
        "generated_testcode": "assert tuple_size(()) == 0\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    mid = (m + n) // 2\n\n",
        "generated_testcode": "assert find_kth(arr1, arr2, len(arr1), len(arr2), 3) == 3\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    num_lst = [int(num) for num in str(number)]\n    num_len = len(num_lst)\n    summation = 0\n    for i in range(num_len):\n        summation += int(num_lst[i])\n    if summation == number:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert armstrong_number(123) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    sum_val = 0\n    for i in range(1, number + 1):\n        sum_val += i\n    sum_val /= number\n    return sum_val\n\n",
        "generated_testcode": "assert sum_average(1) == 1\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    return (n & 0x01) == 0x01\n\n",
        "generated_testcode": "assert is_Even(1) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "\t    self.a = a\n\t    self.b = b\n\t    self.chains = []\n\t    self.chains.append(self.a)\n\t    self.chains.append(self.b)\n\n",
        "generated_testcode": "assert __init__(a, b) == True\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    lst=list(str1)\n    for i in range(len(lst)):\n        if lst.count(lst[i])>1:\n            return lst[i]\n    return -1\n\n",
        "generated_testcode": "assert first_repeated_char(str1) == 'a', \"First repeated character is not 'a'\"\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return(get_lud(n-1))\n\n",
        "generated_testcode": "assert get_ludic(5) == 1\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # store words in list\n    words = list(s)\n    # reverse words and store in reverse list\n    reverse_list = list(reversed(words))\n    # join words back together\n    result = \"\".join(reverse_list)\n    # return reversed result\n    return result\n\n",
        "generated_testcode": "assert reverse_words('') == ''\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if num == 1:\n        return False\n    if num == 2:\n        return True\n    if num > 2 and num % 2 == 0:\n        return False\n    for i in range(3, int(num ** 0.5) + 1, 2):\n        if num % i == 0:\n            return False\n    return True\n\n",
        "generated_testcode": "assert prime_num(2) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    Converts degrees to radians.\n    :param degree: A number in degrees.\n    :return: A number in radians.\n    \"\"\"\n    return degree * (1/180.0)\n\n",
        "generated_testcode": "assert radian_degree(0) == 0\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # print(text)\n    # print(pattern)\n    match = re.search(pattern, text)\n    start = 0\n    end = -1\n\n",
        "generated_testcode": "assert find_literals(text, pattern) == (0, 0)\n\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    if n == 1: \n        return 1\n    elif n == 2: \n        return 1\n    else: \n        return bell_Number(n-1) + bell_Number(n-2) \n\n",
        "generated_testcode": "assert bell_Number(1) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    A_floor = floor((A+1)/(N+1))\n    B_floor = floor((B+1)/(N+1))\n    if A_floor < N:\n        A = A_floor*(N-A_floor)\n    else:\n        A = 0\n    if B_floor < N:\n        B = B_floor*(N-B_floor)\n    else:\n        B = 0\n    if (A + B) > 0:\n        return max([A,B])\n    else:\n        return min([A,B])\n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "generated_testcode": "assert floor_Min(1,2,3) == 1\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Function to remove the k'th element from a given list\n    '''\n    Args:\n        list1 ([type]): [description]\n        L (list): [description]\n    '''\n    # Initialize kth_element as a variable\n    kth_element = 0\n    # Initialize the index variable as a variable\n    index = 0\n    # While the index variable is less than or equal to the length of the list\n    while index <= len(L) - 1:\n        # If the index variable is equal to the length of the list\n        if index == len(L) - 1:\n            # If the kth_element is equal to the first element\n            if L[index] == kth_element:\n                # Delete the first element from the list\n                del list1[index]\n            # If the kth_element is not equal to the first element\n            else:\n                # If the index variable is greater than the length of the list\n                if index > len(L) - 2:\n                    # If the index variable is less than the length of the list\n                    if index <= len(L) - 3:\n                        # If the index variable is less than or equal to the length of the list\n                        # If the element to be deleted is less than the first element\n                        if L[index - 1] == L[index - 2] and L[index - 1] == L[index - 3]:\n                            # Delete the first element from the list\n                            del list1[index]\n                        # If the index variable is greater than",
        "generated_testcode": "assert remove_kth_element(['a', 'b', 'c', 'd', 'e'], ['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # O(n) - length of the list - n.\n\n",
        "generated_testcode": "assert max_of_nth(test_list, 2) == 2\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  # Loop through the other list, but do not include the first and last elements in the merged list\n  for i in range(1, len(lst)):\n    lst[i] = lst[i][1:] + lst[i][:1]  # For this, you only need one element at a time\n\n",
        "generated_testcode": "assert merge(['a', 'b', 'c']) == ['a', 'b', 'c', 'c', 'c', 'c']\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # your code goes here\n    maximum_value = test_list[0]\n    for item in test_list:\n        if item > maximum_value:\n            maximum_value = item\n    return maximum_value\n\n",
        "generated_testcode": "assert maximum_value(['a', 'b', 'c', 'd', 'e']) == ('d',)\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    # Write your code here.\n    cummulative_sum = 0\n    for item in test_list:\n        cummulative_sum += item\n    return cummulative_sum\n\n",
        "generated_testcode": "assert cummulative_sum(()) == 0\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(nums) / len(nums)\n\n",
        "generated_testcode": "assert average_tuple(()) == (0, 0)\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    result.append(test_tup1[0] % test_tup2[0])\n    result.append(test_tup1[1] % test_tup2[1])\n    result.append(test_tup1[2] % test_tup2[2])\n    result.append(test_tup1[3] % test_tup2[3])\n    return tuple(result)\n\n",
        "generated_testcode": "assert tuple_modulo(('a', 'b'), ('c', 'd')) == ('c', 'd')\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    # Code here\n    if a < 0 or b < 0 or d < 0: \n        return 0\n    if a == b and d == 0: \n        return 1\n    if a + d == b and d > 0: \n        return 2\n    if a - d == b and d > 0: \n        return 3\n    return 0\n# test cases\n#\n# test case 1\n# input = [-1,0,0,1,1,0,0,1,1,1,0,1,1,0,1,0,1,1,1,1,1,0,0,1,1,0,0,0,0,0]\n# output = 2\n# output = 5\n# output = 4\n# output = 0\n# test case 2\n# input = [0,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,",
        "generated_testcode": "assert min_Jumps(0, 0, 1) == 0\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x/y, nums1, nums2))\n\n",
        "generated_testcode": "assert div_list( [1,2,3,4], [1,2,3,4]) == [1,2,3,4], \"Test 1\"\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(test_str)):\n        test_str[i] = int(test_str[i])\n\n",
        "generated_testcode": "assert move_num(test_str) == \"123456789\"\n\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    l = [i for i in range(n)]\n    i = 0\n    for j in range(2, n):\n        for k in range(1, n):\n            if(j%k==0):\n                i = k\n                break\n\n",
        "generated_testcode": "assert largest_subset(2, 3) == 2\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(test_list)):\n        test_list[i] += K\n    return test_list\n\n",
        "generated_testcode": "assert increment_numerics([\"1\", \"2\", \"3\", \"4\", \"5\"], 1) == [\"1\", \"3\", \"6\", \"9\", \"12\"]\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0:\n        return None\n    \n    if n == 1:\n        return arr1[0]\n    if n % 2 == 0:\n        median1 = get_median(arr1[:int((n/2) )], arr1[int((n/2)):], n/2)\n        median2 = get_median(arr2[:int((n/2) )], arr2[int((n/2)):], n/2)\n        if median1 == median2:\n            return median1\n        else:\n            return (median1 + median2)/2\n    else:\n        median1 = get_median(arr1[:int((n/2) )], arr1[int((n/2)):], n/2)\n        median2 = get_median(arr2[:int((n/2) )], arr2[int((n/2)):], n/2)\n        if median1 == median2:\n            return median1\n        else:\n            return (median1 + median2)/2\n\n",
        "generated_testcode": "assert get_median(arr1, arr2, len(arr1)) == get_median(arr1, arr2, len(arr1))\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(map(lambda x: x**n, nums))\n\n",
        "generated_testcode": "assert nth_nums(nums=[1,2,3,4,5],n=3) == [1,4,9]\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if string[0].isupper():\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert is_upper(string = \"Hello World\") == True\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    # This variable will hold the new list \n    # and will contain the swapped elements \n    newList[0], newList[-1] = newList[-1], newList[0] \n    # This function returns a new list \n    return newList \n\n",
        "generated_testcode": "assert swap_List(['a', 'b', 'c']) == ['c', 'b', 'a']\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Define area of triangle\n    a = 0.5 * (r * (r - 1))\n    print(\"a =\", a)\n    # Find area of triangle\n    area = (1/2) * atan(r/sqrt(2))\n    print(\"area =\", area)\n    # Return area of triangle\n    return area\n\n",
        "generated_testcode": "assert triangle_area(3) == 6\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if start >= end: \n        return 0\n    if array[start] == 0: \n        return find_First_Missing(array,start+1,end) \n    else: \n        return start + 1\n    \ndef find_Second_Missing(array,start,end):\n    if start >= end: \n        return 0\n    if array[start] == 0: \n        return find_Second_Missing(array,start+1,end) \n    else: \n        return start + 1\n\n",
        "generated_testcode": "assert find_First_Missing(array,0,len(array)-1) == 0\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    string = string.replace(' ', '%20')\n    return string\n\n",
        "generated_testcode": "assert replace_spaces(string) == '%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%2",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    even_num = [] \n    odd_num = [] \n    for i in list:\n        if i % 2 == 0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    return even_num, odd_num\n\n",
        "generated_testcode": "assert Split(['1', '2', '3', '4', '5']) == ['1', '2', '3', '4', '5']\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Fill in this function\n    # The input is a tuple (x,y), which is the coordinate of the given element in the grid.\n    if len(sub) == 0: \n        sub = ele\n    if len(sub) == 1:\n        sub = (0,sub[0])\n    if len(sub) == 2:\n        sub = (sub[0],0)\n    if len(sub) == 3:\n        sub = (0,sub[0])\n    if len(sub) == 4:\n        sub = (sub[0], sub[1])\n    if len(sub) == 5:\n        sub = (0, sub[0])\n    if len(sub) == 6:\n        sub = (sub[0], 0)\n    if len(sub) == 7:\n        sub = (sub[0], sub[1])\n    if len(sub) == 8:\n        sub = (0, sub[0])\n    if len(sub) == 9:\n        sub = (sub[0], 0)\n    if len(sub) == 10:\n        sub = (sub[0], sub[1])\n    if len(sub) == 11:\n        sub = (sub[0], 0)\n    if len(sub) == 12:\n        sub = (sub[0], sub[1])\n    if len(sub) == 13:\n        sub = (sub[0], sub[1])\n    if len(sub) == 14:\n        sub = (sub[0], sub",
        "generated_testcode": "assert adjac(1, [1,2,3]) == [1,2,3], \"incorrect\"\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    text = re.sub(r' +','', text)\n    text = re.sub(r' +','', text.lower())\n    text = re.sub(r' +','', text.upper())\n    text = re.sub(r' +','', text.title())\n    return text\n\n",
        "generated_testcode": "assert replace_spaces(text) == \"Replace_spaces\"\n\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    zero_list = []\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_list.append(0)\n    zero_",
        "generated_testcode": "assert move_zero(['1', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0', '0'",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    s = 0\n    for i in range(0,n-1) : \n        s = s ^ arr[i]\n    return s\n# Driver Code \nif __name__ == \"__main__\" : \n    arr = [1,2,3,3,1,2,4,5,6,7,8]\n    n = len(arr)\n    print(\"Sum of XOR of all pairs is :\", pair_OR_Sum(arr,n))\n\n",
        "generated_testcode": "assert pair_OR_Sum(arr,n) == sum(arr)\n\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n + 1): \n        if i % 2 == 0:\n            sum += i ** 4 \n    return sum \n\n",
        "generated_testcode": "assert even_Power_Sum(5) == 25\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    max_heap = []\n    for value in iterable:\n        heapq.heappush(max_heap,-value)\n    \n    while max_heap:\n        val = heapq.heappop(max_heap)\n        print(\"Max Element =\",val)\n        heapq.heappush(max_heap,-val)\n\n",
        "generated_testcode": "assert heap_sort(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f'], 'Test failed'\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if (b**2) - (4*a*c) >= 0: \n        print(\"The equation is not solved.\")\n        return False\n    else: \n        print(\"The equation is solved\")\n        return True\n\n",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    \n    # Creating a dictionary with keys as customer ids and values as the total amount paid.\n    profit = {}\n    profit[\"Actual Cost\"] = actual_cost\n    profit[\"Sale Amount\"] = sale_amount\n    \n    # Initializing a minimum cost to 0.\n    minimum_cost = 0\n    \n    # Using a for loop to find the minimum amount to pay.\n    for customer_id in profit:\n        \n        # Calculate the total amount paid by that customer.\n        profit_amount = profit[customer_id]\n        \n        # Calculate the total profit and the minimum cost to add that profit.\n        profit_profit = profit_amount - sale_amount\n        minimum_cost += profit_profit\n        \n    # If the minimum cost is negative, return false.\n    if minimum_cost < 0:\n        return False\n    \n    # If the minimum profit is negative, return false.\n    if profit_profit < 0:\n        return False\n    \n    # Return true if the minimum cost is negative, false otherwise.\n    return True\n\n",
        "generated_testcode": "assert noprofit_noloss(100,10) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    C_w = v * (1.0 + 0.6215 * (t - 0.0001) + 0.224 * (t - 0.5285) + 0.0463 * (t - 1.1297))\n    return C_w\n\n",
        "generated_testcode": "assert wind_chill(10,0) == 0\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    function to remove the name from the names\n    if the name starts with a capital letter,\n    it will remove the capital letter\n    if the name is a digit, it will remove the digit\n    :param sample_names: list of names\n    :return: the name without the capital letter\n    \"\"\"\n    for i in sample_names:\n        if i[0].isupper():\n            sample_names[sample_names.index(i)] = i[1:]\n        elif i[0].isdigit():\n            sample_names[sample_names.index(i)] = i[1:]\n    return sample_names\n\n",
        "generated_testcode": "assert sample_nam([\"Alex\", \"Bob\", \"Angel\", \"Jimi\", \"Alan\", \"Ada\"]) == 15\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for index in range(len(items)):\n        if items[index] == '(':\n            items.pop(index)\n        if items[index] == ')':\n            items.pop(index-1)\n    return ''.join(items)\n\n",
        "generated_testcode": "assert remove_parenthesis('') == ''\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return (n % 4 == 3) or (n % 4 == 1) or (n % 4 == 0)\n\n",
        "generated_testcode": "assert is_nonagonal(1) == True\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for x in range(0, len(test_list)):\n        test_list_index = test_list.index(test_list[x])\n        if test_list_index % 2 == 0:\n            test_list[x] = ','.join(test_list[test_list_index - 1:test_list_index + 1].tolist())\n            test_list.pop(test_list_index)\n\n",
        "generated_testcode": "assert remove_similar_row(test_list) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param text: The text to be matched.\n    :return: If the text contains a word that starts with 'z' and ends with 'z', return\n        the matched string. Otherwise return None.\n    \"\"\"\n    # TODO: Write your code here\n    for i in range(len(text)):\n        if text[i].isupper() and text[i] == \"Z\":\n            return text[i:i+len(text)]\n        elif text[i].isupper() and text[i+1].isupper() and text[i+1] == \"Z\":\n            return text[i:i+len(text)]\n        elif text[i].isupper() and text[i+1].islower() and text[i+2].isupper() and text[i+2] == \"Z\":\n            return text[i:i+len(text)]\n        elif text[i].isupper() and text[i+1].isupper() and text[i+2].islower() and text[i+2] == \"Z\":\n            return text[i:i+len(text)]\n        elif text[i].isupper() and text[i+1].islower() and text[i+2].isupper() and text[i+2] == \"Z\":\n            return text[i:i+len(text)]\n\n",
        "generated_testcode": "assert text_match_wordz_middle('') == ''\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Base case\n    if k == 0: \n        print(input)\n        return\n    # Recursive case\n    reverse_Array_Upto_K(input, k-1) \n    reverse_Array_Upto_K(input, k) \n    print(input)\n \n# Driver code\nn = int(input())\narr = list(map(int, input().split()))\nk = int(input())\nreverse_Array_Upto_K(arr, k)\n\n",
        "generated_testcode": "assert reverse_Array_Upto_K(input, k) == [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    '''Returns the product of a value in the given tuples.'''\n    if (len(val) == 2):\n        if val[0] == val[1] :\n            return val[0] * val[1]\n    elif val[0] == val[1] :\n        return val[0] * val[1]\n    else:\n        return val[0] * val[2]\n    \n# Test program\nt = (10, 15, 20, 25, 30)\nprint(get_product(t))",
        "generated_testcode": "assert get_product(1, (1, 2, 3, 4, 5)) == 120\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in range(1,N+1):\n        for j in range(1,K+1):\n            if i**3+j**3==N**3:\n                count+=1\n    return count\n\n",
        "generated_testcode": "assert No_of_cubes(5,3) == 1\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return text.upper()\n\n",
        "generated_testcode": "assert split_upperstring(text) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(1, len(lst)):\n        lst[i], lst[0] = lst[0], lst[i]\n    return lst\n",
        "generated_testcode": "assert exchange_elements(lst) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 4",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  for i in range(m, n):\n    sum = 0\n    for j in range(i, i + m):\n      sum += nums[j]\n    nums[i] = sum\n    return nums\n\n",
        "generated_testcode": "assert sum_Range_list(nums=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10], m=3, n=5) == 55\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(n):\n        for j in range(m):\n            if(arr1[i][j]!= arr2[i][j]):\n                return False\n    return True\n\n",
        "generated_testcode": "assert are_Equal(arr1,arr2,n,m) == True\n\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if test_tup1[0] <= test_tup2[0] and test_tup1[1] <= test_tup2[1]:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_subset(('a', 'b'), ('a', 'c')) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in test_list:\n        temp = []\n        for j in i:\n            temp.append(j)\n        new_list.append(temp)\n    return new_list\n\n",
        "generated_testcode": "assert matrix_to_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]])",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    dictionary = {}\n    for k, v in l:\n        if dictionary.get(k) is None:\n            dictionary[k] = []\n        dictionary[k].append(v)\n    return dictionary\n\n",
        "generated_testcode": "assert grouping_dictionary({\"a\": 1, \"b\": 2, \"c\": 3}) == {'a': [1], 'b': [2], 'c': [3]}\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return ((l[0]+b[0])*2+l[1]+b[1])*2\n\n",
        "generated_testcode": "assert rectangle_perimeter(3,4) == 12\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  if n == 1 or n == 0 : \n    return 0\n  else : \n    return  n * fifth_Power_Sum(n-1) \nprint(fifth_Power_Sum(4))",
        "generated_testcode": "assert fifth_Power_Sum(5) == 25\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Set up variables for summing\n    sum_a = sum(a)\n    sum_b = sum(b)\n    # print(sum_a)\n    # print(sum_b)\n\n",
        "generated_testcode": "assert find_Min_Sum(a,b,n) == 0\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\" \n    :param n: integer\n    :return: the first digit of the factorial\n    \"\"\"\n    if n == 1:\n        return 1\n    else:\n        return n % 10\n    \n\n",
        "generated_testcode": "assert first_Digit(5) == 5\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list2=[]\n    for element in list1:\n        list2.append(list1.count(element))\n    return max(list2)\n\n",
        "generated_testcode": "assert max_occurrences(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == 'g'\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  for i in range(0,len(x)):\n    for j in range(0,i+1):\n      print(x[j], end=' ')\n      if(x[j]==x[i]):\n        print(end=' ')\n    print()\n    return \n\n",
        "generated_testcode": "assert Repeat(1) == 1\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for p in range(l1,l2+1):\n        if (p>=l1) and (p<=l2):\n            count = count + 1\n    if count!= 0:\n        return count,p\n    else:\n        return 0, 0\n\n",
        "generated_testcode": "assert find_Points(0,0,1,1) == 0\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = 0\n    \n    for i in range(n):\n        for j in range(i + 1, n):\n            for k in range(j + 1, n):\n                if arr[i] + arr[j] + arr[k] == 0:\n                    continue\n                elif arr[i] + arr[j] + arr[k] > max_sum:\n                    max_sum = arr[i] + arr[j] + arr[k]\n                \n    return max_sum\n            \nn = int(input(\"Enter a limit: \"))\n\n",
        "generated_testcode": "assert max_sum_of_three_consecutive(arr, n) == 0\n\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in dict1.values():\n        i.sort()\n\n",
        "generated_testcode": "assert sorted_dict({\"a\": 1, \"b\": 2, \"c\": 3}) == {\"a\": 1, \"b\": 2, \"c\": 3}, \"Function should return the same result\"\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # base case\n    if (n == 0): \n        return -1\n\n",
        "generated_testcode": "assert find_max_val(5, 10, 2) == 5\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    a = 0\n    b = 0\n    for i in range(0, n+1) : \n        a = a + i\n        if (i % 2 == 0) : \n            b = b + i\n    print(\"The average is\", a / n)\n    print(\"The average is\", b / n)\n\n",
        "generated_testcode": "assert average_Even(5) == 2.5\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(num_list)\n    for i in range(n - 1, 0, -1):\n        num_list[i], num_list[i - 1] = num_list[i - 1], num_list[i]\n    return num_list\n\n",
        "generated_testcode": "assert move_last(['a', 'b', 'c']) == ['c', 'b', 'a']\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert count_char(string=\"hello\",char=\"l\") == 1\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    vowels_count = 0 \n    for i in string: \n        if i in vowels: \n            vowels_count += 1 \n    return vowels_count \n\n",
        "generated_testcode": "assert Check_Vow(string, vowels) == 3\n\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return string.replace(char, '*')\n\n",
        "generated_testcode": "assert replace(string=\"hello\", char=\"h\") == \"hello\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    try:\n        ipaddress.IPv4Address(Ip)\n        return True\n    except ValueError:\n        return False\n    except AttributeError:\n        try:\n            socket.inet_aton(Ip)\n            return True\n        except socket.error:\n            return False\n\n",
        "generated_testcode": "assert check_IP(Ip) == True\n\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :type nums: List[int]\n    :rtype: bool\n    \"\"\"\n    # sorting the array for descending\n    nums = sorted(nums)\n\n",
        "generated_testcode": "assert decreasing_trend(nums) == True\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    i = n & (n - 1)\n    if (i & (i - 1)):\n        return i\n    else:\n        return n\n\n",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(0) == 0\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if num1 > num2 and num1 > num3: \n        max_num = num1 \n    elif num2 > num1 and num2 > num3: \n        max_num = num2 \n    else: \n        max_num = num3 \n    return max_num \n\n",
        "generated_testcode": "assert max_of_three(1,2,3) == 3\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    total = 0 \n    for el in list: \n        total += el \n    return total \n\n",
        "generated_testcode": "assert convert(['1', '2', '3']) == 1\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # creating a set to store all the unique words\n    word_set = set()\n    # looping through the string\n    for char in string:\n        # if it's a space, add it to the set\n        if char == \" \":\n            word_set.add(char)\n        # if it's an uppercase letter, add it to the set\n        elif ord(char) >= 65 and ord(char) <= 90:\n            word_set.add(char)\n        # if it's a lowercase letter, add it to the set\n        elif ord(char) >= 97 and ord(char) <= 122:\n            word_set.add(char)\n        # if it's a digit, add it to the set\n        elif char == \"0\" or char == \"1\" or char == \"2\" or char == \"3\" or char == \"4\" or char == \"5\" or char == \"6\" or char == \"7\" or char == \"8\" or char == \"9\":\n            word_set.add(char)\n    # return the count of unique words\n    return len(word_set)\n\n",
        "generated_testcode": "assert remove_duplicate(string) == \"hello\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "  if x+y<m+n:\n    return 20\n  else:\n    return x+y\n\n",
        "generated_testcode": "assert sum_nums(1, 2, 3, 4) == 20\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    regex = r'[^a-zA-Z0-9]'\n    return re.sub(regex, '', text1)\n\n",
        "generated_testcode": "assert remove_extra_char(text1) == \"abcdefghijklmnopqrstuvwxyz\"\n\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if a<b+c and b<a+c and c<a+b:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert validity_triangle(1,2,3) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return str1.replace(' ','')\n\n",
        "generated_testcode": "assert remove_spaces(str1) == \"  \"\n\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in ditionary:\n        if key == i[0]:\n            return i[1]\n    return 'Key not found'\n\n",
        "generated_testcode": "assert access_key(d, 'a') == 'a'\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # creating a list of positive numbers\n    lst = [i for i in nums if i >= 0]\n    # checking if the positive numbers are all positive or negative and that it is less than the max value\n    # if it is, we are good. Otherwise, we are not good.\n    if len(lst) == 0:\n        return 'No positive numbers'\n    if len(lst) == 1:\n        return \"No positive numbers, but only 1 number\"\n    if len(lst) == 2:\n        return \"Two positive numbers\"\n    # checking for the average value\n    avg = sum(lst) / len(lst)\n    # if the average is above max value, it is increasing, we are good. Otherwise, we are not good.\n    if avg > max(lst):\n        return 'Positive numbers are increasing, the average value is {}, but max value {}'.format(avg, max(lst))\n    else:\n        return 'Positive numbers are not increasing, the average value is {}, but max value {}'.format(avg, max(lst))\n\n",
        "generated_testcode": "assert increasing_trend(nums) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(2,n): \n        if (n % i) == 0: \n            return i \n    \n    \nprint(smallest_Divisor(1000))",
        "generated_testcode": "assert smallest_Divisor(12) == 2\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    mul = [None]*len(nums1)\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            mul[i] += nums1[i] * nums2[j]\n    return mul\n\n",
        "generated_testcode": "assert mul_list(nums1=[1,2,3,4],nums2=[2,3,4,5]) == [2,6,12,18]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    square = n * n\n    if n == square : \n        return True\n    else : \n        return False\n\n",
        "generated_testcode": "assert sum_Square(1) == 1\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(str)):\n        if str[i] == x:\n            count = count+1\n    return count\n\n",
        "generated_testcode": "assert count_Char(str,x) == 1\n\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(2, n+1):\n        isPrime = True\n        for j in range(2, i):\n            if i % j == 0:\n                isPrime = False\n                break\n        if isPrime:\n            sum += i\n    return sum\n\n",
        "generated_testcode": "assert sum_Of_Primes(10) == 100\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    freq_list = []\n    for element in test_tup:\n        freq_list.append(test_tup.count(element))\n\n",
        "generated_testcode": "assert freq_element(('a', 'b', 'c')) == 2\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if (b == 0):\n        return a\n    else:\n        return recur_gcd(b, a%b)\n\n",
        "generated_testcode": "assert recur_gcd(2, 3) == 1\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if a == b:\n        return a\n    else:\n        return len_complex(b,a%b)\n\n",
        "generated_testcode": "assert len_complex(1,1) == 1\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # first check if the element at that index is greater than any element of the array\n    if arr[n] < 0:\n        return abs(arr[n])\n    elif arr[n] > 0:\n        # now we have to check if the current element is not greater than any element of the array\n        for i in range(n, n + abs(arr[n])):\n            # if the current element is greater than any element of the array and if we are not out of bounds we return the current index\n            if arr[i] > 0 and i < n:\n                # then if the current element is greater than any element of the array and if we are not out of bounds we return the current index\n                if i >= n:\n                    return abs(i - n)\n            # if we are out of bounds we return the max index\n            elif i >= n:\n                return abs(i - n)\n\n",
        "generated_testcode": "assert min_jumps(arr, n) == 1\n\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]\n    return sum\n\n",
        "generated_testcode": "assert mul_consecutive_nums(nums) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 4",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(0, len(test_list)):\n        new_list.append(test_list[i][0])\n    new_list.sort()\n    return new_list\n\n",
        "generated_testcode": "assert group_element(['a', 'b', 'c']) == ['a', 'b', 'c']\n",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if (N == 0): \n        return 0 \n    elif (N == 1): \n        return 1 \n    else: \n        return last_Two_Digits(N-1) + last_Two_Digits(N-2) \nprint(last_Two_Digits(1))  # 1 \nprint(last_Two_Digits(2))  # 2 \nprint(last_Two_Digits(3))  # 3 \nprint(last_Two_Digits(4))  # 4 \nprint(last_Two_Digits(5))  # 5 \nprint(last_Two_Digits(6))  # 6 \nprint(last_Two_Digits(7))  # 7 \nprint(last_Two_Digits(8))  # 8 \nprint(last_Two_Digits(9))  # 9 \nprint(last_Two_Digits(10))  # 10",
        "generated_testcode": "assert last_Two_Digits(5) == 5\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = re.compile(r'(\\s+)', re.MULTILINE)\n    return pattern.sub(r'\\1', text1)\n\n",
        "generated_testcode": "assert remove_multiple_spaces(text1) == \"Hello world\"\n\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    #Make a new dictionary with only unique keys\n    unique_dict={}\n    #For every key, check if it exists in the dictionary\n    for key,val in test_dict.items():\n        if val not in unique_dict.values():\n            unique_dict[key]=val\n    return unique_dict\n\n",
        "generated_testcode": "assert extract_unique({\"a\": 1, \"b\": 2, \"c\": 3}) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    for element in test_tup2:\n        if element >= test_tup1[0]:\n            return True\n    return False\n\n",
        "generated_testcode": "assert check_greater(('a', 'b'), ('c', 'd')) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in list1: \n        for j in list2: \n            yield i,j \n\n",
        "generated_testcode": "assert zip_list(['a','b','c'],['d','e','f']) == ['a','b','c','d','e','f']\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return len([number for number in array_nums if number % 2 == 0])\n\n",
        "generated_testcode": "assert count_even(array_nums) == 2\n\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for key, value in test_dict.items():\n        for index in range(len(value)):\n            new_val = (index, key[index])\n            print(new_val)\n        print(test_dict)\n\n",
        "generated_testcode": "assert sort_dict_item({\"a\": 1, \"b\": 2, \"c\": 3}) == {'b': 2, 'c': 3, 'a': 1}\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    if len(str1) > len(str2) : \n        return -1\n    \n    if len(str1) == len(str2) : \n        return 0\n    \n    count = 0\n    \n    for i in range(0, len(str1)) : \n        if str1[i]!= str2[i] : \n            count += 1\n    \n    return count\n\n",
        "generated_testcode": "assert min_Swaps(str1 = \"11\", str2 = \"11\") == 1\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return sum([1 for el in li if min <= el <= max])\n\n",
        "generated_testcode": "assert count_range_in_list(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z'], 0, 5) == 3\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    n=len(arr)\n    s=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if arr[i]+arr[j]==arr[j]:\n                s=j\n                break\n    if s!=0:\n        return s\n    return n-1\n\n",
        "generated_testcode": "assert equilibrium_index(arr) == 0\n\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "dic):\n    \n    # Starting from last element of the key\n    j = len(key) - 1\n    min_val = sys.maxsize\n    \n    # Iterate through the dictionary and check all adjacent key's element\n    for key_i in range(i, len(dic)):\n        # Compute the max value\n        max_val = dic[key_i][key[key_i]]\n        \n        # If the key is smaller than the current element\n        if key[key_i] < max_val:\n            # Loop through all the adjacent elements\n            for j in range(key_i + 1, len(dic[key_i])):\n                # If the key_i's element is smaller than max_val, then subtract\n                # from the min_val\n                if dic[key_i][j] < max_val:\n                    min_val = min(min_val, dic[key_i][j])\n        \n        # If the element is smaller than the current element\n        if key[key_i] < min_val:\n            # Store the minimum value found so far\n            min_val = min(min_val, key[key_i])\n    \n    # Return the minimum value found so far\n    return min_val\n    \n# Driver Code\nif __name__ == '__main__':\n    \n    # create an empty dictionary\n    dic = {}\n    \n    # input array\n    arr = list(map(int, input().split()))\n",
        "generated_testcode": "assert find_ind(1, 0, 3, 2) == 2\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for key,val in d.items():\n        if key == x:\n            return True\n    return False\n\n",
        "generated_testcode": "assert is_key_present(d, 'a') == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    else:\n        return n*harmonic_sum(n-1)\n",
        "generated_testcode": "assert harmonic_sum(1) == 0\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    sort_of_list = []\n    sort_of_list = sorted(list1, key=len)\n    return sort_of_list\n\n",
        "generated_testcode": "assert sort_sublists(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\n",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Base case if the array is empty\n    if (m < 0): return False\n    if (n < 0): return False\n    if (n == 0): return True\n    # Check for the index of the first number in arr1 and arr2\n    first_index = m\n    second_index = n\n    for i in range(first_index, len(arr1)):\n        # If the current number is in arr2\n        if (arr1[i] in arr2):\n            # Increment the index of the current number by 1\n            second_index = second_index + 1\n        # Check if the current number is in arr1\n        else:\n            # If not, return False\n            return False\n        # Check if we have reached the end of the array\n        if (second_index >= len(arr2)):\n            return True\n    # If all numbers in arr2 are in arr1\n    return is_subset(arr2, second_index, arr1, n-first_index)\n    \n\n",
        "generated_testcode": "assert is_subset(arr1, m, arr2, n) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    i = 1\n    total_set_bits = 0\n    while i <= n:\n        total_set_bits += i\n        i += 1\n    return total_set_bits\n\n",
        "generated_testcode": "assert count_Set_Bits(1) == 0\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return list(string) \n\n",
        "generated_testcode": "assert Convert(\"Hello\"",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    dict_count={}\n    for i in test_list:\n        if i in dict_count:\n            dict_count[i]+=1\n        else:\n            dict_count[i]=1\n    return dict_count\ntest_list=[1,1,1,2,3,4,5,4,4,5,5,5,5,5,5,5,6,7,8,8,8,9,9,9,9,9,9]\nprint(get_unique(test_list))\n\n",
        "generated_testcode": "assert get_unique((\"apple\", \"banana\", \"cherry\")) == (\"apple\", \"banana\", \"cherry\")\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if len(test_tup)!= 3:\n        raise Exception('tuple not of 3 length')\n    else:\n        print(f'{test_tup[0]} -> {test_tup[1]} -> {test_tup[2]}')\n\n",
        "generated_testcode": "assert front_and_rear(('a', 'b', 'c')) == ('a', 'b', 'c')\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    n = str(n)\n    if n[0] == '0' and n[1] == '1': \n        return True\n    else:\n        return False\n    \n# Write a python function to calculate the sum of all the elements in a list.\ndef sum_all(lst):\n    return sum(lst)\n    \n# Write a python function to calculate the average of two numbers.\ndef average(n1, n2):\n    return round(n1 + n2)/2\n\n",
        "generated_testcode": "assert product_Equal(5) == 5\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return [[x for x in list1 if x not in list2] for list2 in list1]\n\n",
        "generated_testcode": "assert remove_duplicate(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == ['a', 'b', 'c', 'd', 'e', 'f', '",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #create a list of all valid values\n    valid_tup = []\n    for i in range(0,len(test_tup)):\n        if type(test_tup[i]) is int or type(test_tup[i]) is float or type(test_tup[i]) is str:\n            valid_tup.append(test_tup[i])\n    return valid_tup\n\n",
        "generated_testcode": "assert check_valid(('a', 'b', 'c')) == True\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    fac = [i for i in range(1, n+1)]  # create a list of all factors of n\n    for i in range(2, n):  # for every number 2 to the power of n\n        if not (fac[i] % fac[i-1]):  # if this number is not a factor of n-1\n            fac.remove(fac[i-1])  # remove the factor from the list\n            fac.append(fac[i-1]**2)  # add the squared factor of this number to the list\n            fac.append(fac[i-1]**3)  # add the squared factor of this number to the list\n    return len(fac)\n\n",
        "generated_testcode": "assert count_Fac(1) == 1\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    tuple_values = []\n    for i in test_str:\n        tuple_values.append(int(i))\n    return tuple(tuple_values)\n\n",
        "generated_testcode": "assert str_to_tuple(1) == (1,)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return a * (a + 1) * (2 * a + 1)\n\n",
        "generated_testcode": "assert rombus_perimeter(3) == 6\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # define mean and standard deviation\n    mean = sum(data)/len(data)\n    mean_deviation = 0\n    for i in range(len(data)):\n        mean_deviation += (data[i] - mean)**2\n    sd = math.sqrt(mean_deviation/(len(data)-2))\n\n",
        "generated_testcode": "assert sd_calc(data) == 0.0, \"Standard Deviation is not 0\"\n\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for i in list1:\n        if i not in new_list:\n            new_list.append(i)\n    return new_list\n\n",
        "generated_testcode": "assert alternate_elements(['a', 'b', 'c', 'd', 'e']) == ['c', 'd', 'e', 'b', 'a'], \"Test failed\"\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    b_index = 0\n    matches = []\n    while b_index < len(text):\n        if text[b_index:b_index+2] == 'b':\n            matches.append(text[b_index:b_index+2])\n            b_index += 2\n        else:\n            b_index += 1\n    return matches\n\n",
        "generated_testcode": "assert text_match(text) == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for key, value in test_dict.items():\n        test_tup[key] = value\n\n",
        "generated_testcode": "assert add_dict_to_tuple(('a', 'b'), {'c': 'd'}) == ('a', 'b', 'c', 'd')\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    paths = []\n    for i in range(0, N * N):\n        paths.append([])\n    for i in range(0, N * N):\n        paths[cost[i]].append(i)\n    return paths\n\n",
        "generated_testcode": "assert maxAverageOfPath(cost, N) == (N*N) // 2\n\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for student in students:\n        student[1] = student[1].replace(\",\",\"\")\n        student[1] = student[1].replace(\"(\",\"\")\n        student[1] = student[1].replace(\")\",\"\")\n        if (student[1].isdigit()):\n            if (int(student[1]) >= h and int(student[1]) <= h+100):\n                student[2] = student[2].replace(\",\",\"\")\n                student[2] = student[2].replace(\"(\",\"\")\n                student[2] = student[2].replace(\")\",\"\")\n                if (student[2].isdigit()):\n                    if (int(student[2]) >= w and int(student[2]) <= w+100):\n                        student[3] = student[3].replace(\",\",\"\")\n                        student[3] = student[3].replace(\"(\",\"\")\n                        student[3] = student[3].replace(\")\",\"\")\n                        if (student[3].isdigit()):\n                            if (int(student[3]) >= 100 and int(student[3]) <= 200):\n                                if (student[0] == \"L\"):\n                                    students.remove(student)\n                                    print(\"Student removed.\")\n                                    break\n                                else:\n                                    students.remove(student)\n                                    print(\"Student removed.\")\n                                    break\n    return students\n\n",
        "generated_testcode": "assert filter_data(students,h,w) == {'Mohan':'100', 'Sohan':'200', 'Soham':'300'}\n\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :type nums1: List[int]\n    :type nums2: List[int]\n    :rtype: int\n    \"\"\"\n    dic1 = {}\n    dic2 = {}\n    for ele in nums1:\n        if ele in dic1:\n            dic1[ele] += 1\n        else:\n            dic1[ele] = 1\n    for ele in nums2:\n        if ele in dic2:\n            dic2[ele] += 1\n        else:\n            dic2[ele] = 1\n\n",
        "generated_testcode": "assert count_same_pair(nums1, nums2) == 2\n\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    while power:\n        sum += (base ** power)\n        power -= 1\n    return sum\n\n",
        "generated_testcode": "assert power_base_sum(2, 3) == 6\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return re.findall(r\"[\\\"]\", text1)\n\n",
        "generated_testcode": "assert extract_quotation(text1) == \"The quick brown fox jumps over the lazy dog\"\n\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # your code goes here\n    new_tuple = tuple()\n    for i in range(len(test_tup)-1):\n        new_tuple = new_tuple + test_tup[i] * test_tup[i + 1]\n    return new_tuple\n\n",
        "generated_testcode": "assert multiply_elements(('a', 'b', 'c')) == 'abc'\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(S)):\n        if re.search('[a-zA-Z]', S[i]):\n            S[i] = ''\n        elif re.search('[0-9]', S[i]):\n            S[i] = ''\n    return S\n\n",
        "generated_testcode": "assert remove_char(S) == \"abcdefghijklmnopqrstuvwxyz\", \"Test failed\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for elem in lst1:\n        sum += elem\n    for elem in lst2:\n        sum += elem\n    return sum\n\n",
        "generated_testcode": "assert sum_list(['a','b','c'],['d','e','f']) == ['a','b','c','d','e','f']\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x,y: x+y,nums1,nums2))\n\n",
        "generated_testcode": "assert add_list(nums1=[1,2,3],nums2=[4,5,6]) == [1,2,3,4,5,6]\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    # code here\n    # Hint: You may need to use a loop. \n    # You may need to modify this code for other use cases.\n    x = []\n    for i in nums:\n        if i not in x:\n            x.append(i)\n    return x\n",
        "generated_testcode": "assert consecutive_duplicates(['a', 'a', 'b', 'b', 'c', 'c', 'c']) == ['a', 'b', 'c']\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return r**2 * (h/3)**2\n\n",
        "generated_testcode": "assert lateralsurface_cone(1,1) == 0\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    text = text.replace(' ',':')\n    text = text.replace('.',':')\n    text = text.replace(',','::')\n    text = text.replace('-','::')\n    text = text.replace('!','::')\n    text = text.replace('?','::')\n    text = text.replace('$','::')\n    text = text.replace(';','::')\n    text = text.replace('{','::')\n    text = text.replace('}','::')\n    text = text.replace('[','::')\n    text = text.replace(']','::')\n    text = text.replace('^','::')\n    text = text.replace('!','::')\n    text = text.replace('?','::')\n    text = text.replace('$','::')\n    text = text.replace(';','::')\n    text = text.replace('{','::')\n    text = text.replace('}','::')\n    text = text.replace('[','::')\n    text = text.replace(']','::')\n    text = text.replace('^','::')\n    text = text.replace('!','::')\n    text = text.replace('?','::')\n    text = text.replace('$','::')\n    return text\n\n",
        "generated_testcode": "assert replace_specialchar('') == ''\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    left = 0\n    right = len(A) - 1\n    while left < right:\n        mid = (left + right) // 2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            left = mid + 1\n        else:\n            right = mid\n    return None\n\n",
        "generated_testcode": "assert find_first_occurrence(A, 5) == 0\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum=0\n    for i in range(0,n):\n        for j in range(0,n):\n            sum+=arr[i][j]*arr[i][j+1]\n    return sum\n\n",
        "generated_testcode": "assert sum_Of_Subarray_Prod(arr,n) == sum(arr), \"Sum of all subarrays is not equal to sum of all subarrays\"\n\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # n = input()\n    b = bin(n)[2:]\n    if b[0] == '0' or b[-1] == '0':\n        n = n - 2 ** (len(b) - 1)\n    else:\n        n = n - 2 ** (len(b) - 2)\n    return n\n# This function will create a string with n as input and return it\ndef string_builder(n):\n    n = set_middle_bits(n)\n    s = ''\n    for i in range(len(n) - 1):\n        s += n[i]\n    s += n[len(n) - 1]\n    return s\n# This function will calculate the sum of the first n bits\ndef find_sum(n):\n    n = set_middle_bits(n)\n    # n = int(input())\n    s = 0\n    for i in range(len(n)):\n        s += int(n[i])\n    return s\n# This function will calculate the sum of the last n bits\ndef find_sum_by_loop(n):\n    n = set_middle_bits(n)\n    # n = int(input())\n    for i in range(len(n) - 1, -1, -1):\n        s = 0\n        for j in range(len(n) - 1, i - 1, -1):\n            s += int(n[j])\n        s += int(n[i])\n        n[i] = s\n",
        "generated_testcode": "assert set_middle_bits(0) == 0\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # code here\n\n",
        "generated_testcode": "assert left_insertion(a, x) == 0\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    vowels = ['a', 'e', 'i', 'o', 'u'] \n    for i in string: \n        if i in vowels: \n            return True\n    return False\n  \n# Driver program to test the above function  \nstring = \"AaEeIiOoUu\"\nprint(check_str(string))\n  \n# This code is contributed by Mohit Kumra.\n",
        "generated_testcode": "assert check_str(string = \"hello\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    sum=0\n    for i in range(1,n+1):\n        sum+=i**2\n    return sum\n\n",
        "generated_testcode": "assert geometric_sum(1) == 1\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    a = [i for i in range(1,n+1)]\n    print(a)\n    c = 0\n    for i in range(len(a)):\n        for j in range(i+1,len(a)):\n            if a[j] < a[i]:\n                c = a[i]\n                break\n    return c\n\n",
        "generated_testcode": "assert find_Index(1) == 0\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    tup_dict = {}\n    for i in range(len(test_tup)):\n        tup_dict[test_tup[i]] = i+1\n    return tup_dict\n\n",
        "generated_testcode": "assert tuple_to_dict(('a', 'b', 'c')) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in s :\n        if i not in s[0] :\n            return False\n        else :\n            continue\n    return True\n\n",
        "generated_testcode": "assert all_Characters_Same(s) == True\n\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    '''Compute the area of a tetrahedron'''\n    return float(side*side)\n\n",
        "generated_testcode": "assert area_tetrahedron(1) == 1\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(m):\n        print(list1)\n        list1.append(list1[-1])\n        list1.pop()\n        print(list1)\n        list1.insert(n,list1[-1])\n        n=n-1\n        print(list1)\n        print(n)\n        if n==0:\n            break\n    return n\n\n",
        "generated_testcode": "assert rotate_right(['a', 'b', 'c', 'd'], 2, 3) == ['c', 'd', 'b', 'a'], \"Rotate right function failed\"\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    if test_tup == ():\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_none(())\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    # create a dictionary to store the dictionary\n    d = {}\n    # iterate over the range (startnum to endnum)\n    for number in range(startnum, endnum + 1):\n        # if the number is divisible by any digit\n        if number % 10!= 0:\n            # if the number is in the dictionary, add it to the list\n            if number in d.keys():\n                d[number] += 1\n            # if the number is not in the dictionary, add it to the dictionary\n            else:\n                d[number] = 1\n    # create a list of the numbers for which the value is divisible by any digit\n    divider_list = list(d.keys())\n    # return the list of numbers whose value is divisible by any digit\n    return divider_list\n\n",
        "generated_testcode": "assert divisible_by_digits(1, 10) == [1, 2, 3, 4, 5, 6, 7, 8, 9]\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    return (r * a)\n\n",
        "generated_testcode": "assert sector_area(3,4) == 12\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # create 2D array to store diffrence between the strings \n    L = [[0 for x in range(n + 1)] for i in range(m + 1)] \n    # base case \n    for i in range(m + 1): \n        for j in range(n + 1): \n            L[i][j] = 0\n            \n    # Following steps to solve the problem are as follows: \n    # 1. Initialize all 4 vertices with 0s \n    # 2. For each character of X, for each character of Y, \n    #    compute the 4-connected substring L[i][j] \n    #    which is the LCS of X[:i] to Y[:j] \n    # 3. For each character of Y, \n    #    compute the 4-connected substring L[i][j] \n    #    which is the LCS of Y[:i] to X[:j] \n    # 4. For each character of Z, for each character of X, \n    #    compute the 4-connected substring L[i][j] \n    #    which is the LCS of X[:i] to Z[:j] \n    # 5. Return the length of the longest common subsequence \n    \n    for i in range(m): \n        for j in range(n): \n            if X[i] == Y[j] and o[j] == 0: \n                L[i + 1][j + 1] = 1",
        "generated_testcode": "assert lcs_of_three(X, Y, Z, m, n, o) == 3\n\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    new_str = ''\n    for word in str1.split():\n        if word[0] == word[0].upper() and word[1] == word[1].upper():\n            new_str += word[0].lower() +''\n        else:\n            new_str += word +''\n    return new_str\n\n",
        "generated_testcode": "assert capital_words_spaces(str1) == \"Hello World\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    nums_str.sort(reverse=True)\n    print(nums_str)\n\n",
        "generated_testcode": "assert sort_numeric_strings(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']) == ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    test_list.append(tuple(test_tup))\n    return test_list\n\n",
        "generated_testcode": "assert add_tuple(['a', 'b', 'c'], ('a', 'b', 'c')) == ['a', 'b', 'c', 'a', 'b', 'c']\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Base condition\n    if i >= len(arr):\n        return True\n\n",
        "generated_testcode": "assert check_min_heap(arr, 0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    # Create a list of first n numbers \n    # 2D list \n    # Each list element is a list \n    # containing the number of each set of elements \n    a = [0] * (n+1)\n    # Initialize a with 0 \n    # and 1 \n    a[0] = a[1] = 0 \n    # loop n \n    for i in range(n+1): \n        # Update a[i] \n        a[i] = i \n        # Update the jacobsthal number \n        # for every i \n        # and for every j \n        # for jacobsthal of \n        # the base case. \n        for j in range(n+1): \n            # case 1 \n            # if j-i > 0 \n            if j-i > 0: \n                # Update the jacobsthal \n                # number with the value \n                # of the next j \n                # j-i\n                a[i] = j-i \n    return a[n] \n",
        "generated_testcode": "assert jacobsthal_num(1) == 1\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Copy the list\n    min_list = []\n    for i in test_list:\n        min_list.append(i)\n    # Sort the list\n    min_list.sort()\n    # Check if k is greater than the length of list\n    if len(min_list) < K:\n        print(\"Please enter proper minimum k value\")\n    return min_list[K-1]\n    # Remove the kth smallest item from list\n    # so that it will be the minimum of all the other items\ndef k_min(test_list, k):\n    # First find minimum k numbers\n    print(\"Select k minimum value from the list using the function\")\n    print(\"Select minimum value using the list\")\n    min_list = []\n    for i in range(len(test_list)):\n        min_list.append(i)\n    min_list.sort()\n    print(min_list)\n    min_k_numbers = min_k(test_list, k)\n    print(min_k_numbers)\n    # Now find the min k numbers from the list\n    k_min_numbers = min_k(min_list, k-1)\n    print(k_min_numbers)\n    # If k is the minimum value then return the min k numbers\n    return min_k_numbers\n\n",
        "generated_testcode": "assert min_k(test_list, 2) == (1, 2)\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Use list comprehension\n    common_index_list = []\n    for index in range(len(l1)):\n        for index2 in range(len(l2)):\n            for index3 in range(len(l3)):\n                if l1[index] == l2[index2] and l1[index] == l3[index3]:\n                    common_index_list.append(index)\n    return common_index_list\n\n",
        "generated_testcode": "assert extract_index_list(['a', 'b', 'c'], ['a', 'b', 'c'], ['a', 'b', 'c']) == ['a', 'b', 'c']\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    smallest_num = numbers[0]\n    smallest_index = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] < smallest_num:\n            smallest_num = numbers[i]\n            smallest_index = i\n    return smallest_num, smallest_index\n\n",
        "generated_testcode": "assert second_smallest(numbers) == 1\n\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    start_match = text.lower().find('b')\n    end_match = start_match + 3\n    if start_match >= len(text) or end_match > len(text):\n        return False\n    elif text[start_match]!= 'a':\n        return False\n    elif text[end_match]!= '0' or text[end_match]!= '1':\n        return False\n    return True\n\n",
        "generated_testcode": "assert text_match_zero_one('') == '', 'Empty string'\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "assert count_reverse_pairs([\"abc\", \"cba\", \"d\", \"cd\", \"ab\", \"c\"]) == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    counter = 0\n    for i in list1:\n        if i not in list1[:counter]:\n            counter += 1\n    return counter\n\n",
        "generated_testcode": "assert unique_sublists(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == ",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Checks if a number is a valid decimal number\n    \"\"\"\n    str_num = str(num)\n    if(len(str_num) == 3):\n        for i in range(1, len(str_num)):\n            if(int(str_num[i-1]) <= int(str_num[i])):\n                print(\"Invalid Input\")\n                return False\n        return True\n    print(\"Invalid Input\")\n    return False\n\n",
        "generated_testcode": "assert is_decimal(1.1) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(n):\n        if arr[i] in arr[i+1:]:\n            return False\n    return True\n\n",
        "generated_testcode": "assert unique_Element(arr,n) == True\n\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    return math.sqrt((d)**2 + (a)**2)\n\n",
        "generated_testcode": "assert arc_length(0,0) == 0\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum3 in range(1, 13):\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_monthnumber_number(1) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    m = max(arr) \n    # print(m)\n    if len(arr) == 1:\n        return arr[0] - arr[0]\n    else:\n        return abs(arr[0] - m)\n\n",
        "generated_testcode": "assert find_Min_Diff(arr,n) == 0\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    num_ctr = 0\n    for char in str:\n        if char.isdigit():\n            num_ctr += 1\n    return num_ctr\n\n",
        "generated_testcode": "assert number_ctr(str) == 5\n\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    '''\n    Checks to see if there is any polite number.\n    '''\n    return True if n == 1 or n == 4 else False\n\n",
        "generated_testcode": "assert is_polite(1) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            if l1[i] > l1[j]:\n                yield (l1[i], l1[j])\n\n",
        "generated_testcode": "assert pair_wise(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == [('a', 'b'), ('a', 'c'), ('a', 'd'), (",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    output=0\n    for i in range(n):\n        for j in range(n):\n            if(arr[i]==arr[j] and arr[i]!=sum):\n                output+=1\n    return output\n\n",
        "generated_testcode": "assert get_Pairs_Count(arr,n,sum) == 1\n\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # checks if odd or even number\n    if x % 2 == 0: \n        return x \n    else: \n        return \"Odd\"\n\n",
        "generated_testcode": "assert check_Odd_Parity(5) == True\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    diff=[]\n    for i in li1:\n        if i not in li2:\n            diff.append(i)\n    return diff\n\n",
        "generated_testcode": "assert Diff(['a','b','c'],['a','b','d']) == 'a'\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n) :\n        if i % 4 == 0 : \n            sum += i ** 4\n    return sum\nprint(odd_Num_Sum(10)) # Should be 27\n\n",
        "generated_testcode": "assert odd_Num_Sum(5) == 25\n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    total_tokens = 0\n    tokens = 0\n\n",
        "generated_testcode": "assert check_expression(1) == True\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Write your code here.\n    remove_words = test_str.split()\n    \n    # Remove words with length K\n    remove_words = [word for word in remove_words if len(word) > K]\n    \n    # Iterate through all the words and remove them\n    for word in remove_words:\n        test_str = test_str.replace(word, '')\n    \n    return test_str\n\n",
        "generated_testcode": "assert remove_length(test_str, K) == \"abcdefghijklmnopqrstuvwxyz\", \"Test failed\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #Write your code here.\n    occurrence = [0 for i in range(len(text))]\n    position = [0 for i in range(len(pattern))]\n    for i in range(1,len(pattern)+1):\n        # print(i,occurrence,position)\n        for j in range(len(text)):\n            if pattern[i-1] in text[j:]:\n                # print(text[j:],pattern[i-1])\n                if (j+1)==len(text):\n                    position[i] = position[i-1]+1\n                    occurrence[j] += 1\n                elif (j+1)>len(text):\n                    break\n                else:\n                    # print(occurrence[j+1],j+1,position[i],position[i+1])\n                    if pattern[i-1] == text[j:j+position[i]] or pattern[i-1] == text[j:j+position[i]]:\n                        occurrence[j] += 1\n                    else:\n                        position[i] += 1\n    return occurrence,position\n",
        "generated_testcode": "assert occurance_substring(text=\"abc\",pattern=\"ab\") == 2\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    regex_email = '^(\\w|\\.|\\_|\\-)+[@](\\w|\\_|\\-|\\.)+[.]\\w{2,3}$'\n    if re.search(regex_email, email): \n        return True \n    return False\n\n",
        "generated_testcode": "assert check_email(email) == True\n\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return True\n    return False\n\n",
        "generated_testcode": "assert odd_position(nums) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count_vowels = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count_vowels += test_str.count(test_str[i])\n    return count_vowels\n\n",
        "generated_testcode": "assert count_vowels(test_str) == 3\n\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # your code goes here \n    for i in range(n): \n        if arr[i]==arr[i+1]: \n            arr[i+1]=0\n    arr=sorted(arr) \n    return sum(arr) \n    \n# Driver code \narr = [1,2,3,1,1,2,3,3] \nn = len(arr) \nprint(\"The sum of elements is : \", find_Sum(arr,n)) \n",
        "generated_testcode": "assert find_Sum(arr,n) == sum(set(arr))\n\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Set the size of sublists.\n    list_size = len(list1)\n    # Create a list for the sublists.\n    list_pack = [list1[0]]\n    # If the number of sublists is smaller than the size of lists\n    # do not create a sublist.\n    if list_size > list_pack[0]:\n        return list_pack\n    # Set the current sublist.\n    curr = list_pack[0]\n    # Iterate through the remaining sublists.\n    for i in range(1, list_size):\n        # Check if the sublist is a duplicate.\n        if list1[i] == list1[i-1]:\n            # Add the current sublist to the sublist to be packed.\n            curr.append(list1[i])\n        # If the current sublist is not a duplicate, create a sublist.\n        else:\n            # Pack the current sublist into the sublist to be packed.\n            pack_consecutive_duplicates(list1[i:])\n            # Add the current sublist to the sublist to be packed.\n            curr.append(list1[i])\n    # Return the sublists to their original order.\n    return pack_consecutive_duplicates(list1)\n\n",
        "generated_testcode": "assert pack_consecutive_duplicates(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd', 'e', 'e', 'e', 'f', 'f', 'f', 'g', 'g', 'g', 'h', 'h', 'i', 'i', 'j', 'j', 'k', 'k', 'l', 'l','m','m'",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list1 = list(set(list1))\n    list1.sort()\n    return len(list1)\n\n",
        "generated_testcode": "assert unique_sublists(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == ",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    output = []\n    for i in test_list:\n        for j in range(i):\n            output.append(j)\n    return output\n\n",
        "generated_testcode": "assert find_combinations(test_list) == ",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    if n == 1 : \n        return 0\n    elif n % 2 == 0 : \n        return 1 + count_Divisors(n-1) \n    else : \n        return count_Divisors(n-1) \n\n",
        "generated_testcode": "assert count_Divisors(5) == 2\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    i = 0\n    while i < len(arr):\n        if arr[i] % 2 == 1:\n            sum += arr[i]\n        i += 1\n    return sum\n\n",
        "generated_testcode": "assert Odd_Length_Sum(arr) == sum(range(1, len(arr) + 1))\n\n",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # convert rgb to hsv\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    max_r = 255.0\n    max_g = 255.0\n    max_b = 255.0\n    min_r = 0.0\n    min_g = 0.0\n    min_b = 0.0\n    if (r > max_r):\n        max_r = r\n    if (g > max_g):\n        max_g = g\n    if (b > max_b):\n        max_b = b\n    if (r < min_r):\n        min_r = r\n    if (g < min_g):\n        min_g = g\n    if (b < min_b):\n        min_b = b\n    h = max_r - min_r\n    s = max_g - min_g\n    v = max_b - min_b\n    # compute hsv value\n    if (h < 0.0):\n        h = 0.0\n    if (s < 0.0):\n        s = 0.0\n    if (v < 0.0):\n        v = 0.0\n    i = (float(h) + float(s) + float(v)) / 3.0\n    f = (float(max_r) - float(min_r)) / (float(max_g) - float(min_g))\n    a = min_r * (1.0 - f) +",
        "generated_testcode": "assert rgb_to_hsv(1, 1, 1) == (0.0, 0.0, 0.0)\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            sum = sum + i\n    return sum\n\n",
        "generated_testcode": "assert mul_even_odd(list1) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    t = tuple(map(int, test_str))\n    return t\n\n",
        "generated_testcode": "assert tuple_str_int(('a', 'b', 'c')) == ('a', 'b', 'c')\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    low = 0\n    high = len(a)-1\n    \n    while low <= high:\n        mid = (low + high)//2\n        if a[mid] < x:\n            low = mid+1\n        else:\n            high = mid-1\n    return low\n\n",
        "generated_testcode": "assert right_insertion(a, x) == 1\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    first_char_start = 0\n    second_char_start = 0\n    third_char_start = 0\n    for i in range(len(text)):\n        if text[i] == 'a':\n            if text[i+1] == 'b':\n                if text[i+2] == 'a':\n                    first_char_start = i+3\n                else:\n                    second_char_start = i+3\n        elif text[i] == 'a':\n            if text[i+1] == 'c':\n                if text[i+2] == 'b':\n                    third_char_start = i+3\n                else:\n                    first_char_start = i+3\n        else:\n            first_char_start = 0\n            second_char_start = 0\n            third_char_start = 0\n            for j in range(len(text)):\n                if text[j] == 'a':\n                    if text[j+1] == 'c':\n                        if text[j+2] == 'b':\n                            third_char_start = j+3\n                        else:\n                            second_char_start = j+3\n                    else:\n                        first_char_start = j+3\n                elif text[j] == 'a':\n                    if text[j+1] == 'c':\n                        if text[j+2] == 'a':\n                            third_char_start = j+3\n                        else:\n                            second_char_start = j+3",
        "generated_testcode": "assert text_match_three('') == ''\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return tuple(sorted(test_list) + sorted(test_str))\n\n",
        "generated_testcode": "assert new_tuple(['a', 'b', 'c'], 'a') == ('a', 'b', 'c')\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return round(s*l,2)\n\n",
        "generated_testcode": "assert perimeter_polygon(5,6) == 12\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(0,len(nums)-1):\n        if nums[i]%2==0 and nums[i]%2!=nums[i+1]:\n            return True\n    return False\nnums=[1,2,3,4,5,6,7,8,9,10]\nprint(even_position(nums))\n\n",
        "generated_testcode": "assert even_position(nums) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    print(test_tup)\n    (a,b,c) = test_tup\n    print(a,b,c)\n    return (a,b,c)\n\n",
        "generated_testcode": "assert remove_nested(('a', 'b', 'c')) == ('a', 'b', 'c')\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if input_list is None or len(input_list) == 0:\n        return 0\n    else: \n        return len(input_list) \nprint(count_list([1,2,3]))\n\n",
        "generated_testcode": "assert count_list(['a', 'b', 'c']) == 3, \"Test failed\"\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    m = -1\n    for i in range(n-1, -1, -1):\n        if arr[i] == x:\n            m = i\n            break\n        \n    return m\n\n",
        "generated_testcode": "assert last(arr,1,5) == 2\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return text[0] + text[1] + text[2] + text[3] + text[4]\n# Prints out the string \"hello\" starting at index 10.\nprint(text_starta_endb(\"hello\"))\n# Prints out the string \"hello\" ending at index 17.\nprint(text_starta_endb(\"hello\"))\n# Prints out the string \"hello\" starting at index 14.\nprint(text_starta_endb(\"hello\"))\n# Prints out the string \"hello\" ending at index 15.\nprint(text_starta_endb(\"hello\"))\n\n",
        "generated_testcode": "assert text_starta_endb(text) == 'aab'\n\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    from heapq import *\n    hq=[]\n    for i in items:\n        heappush(hq,-i)\n    for i in range(n):\n        try:\n            heappop(hq)\n            return -heapq.heappop(hq)\n        except IndexError:\n            return None\n            \n\n",
        "generated_testcode": "assert cheap_items(items,n) == [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n\n",
        "generated_testcode": "assert return_sum({\"a\": 1, \"b\": 2, \"c\": 3}) == 6\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n+1):\n        if i % 2 == 1:\n            sum += i\n    return sum\n\n",
        "generated_testcode": "assert sum_Odd(1) == 1\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    result = 0\n    for i in arr:\n        result += i\n    return result\n# call function\narr = [2, 4, 6, 8, 10]\nprint(sum(arr))\n\n",
        "generated_testcode": "assert _sum(arr) == sum(arr)\n\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    return ((n+d) % 2)*2 + (n%2)\n\n",
        "generated_testcode": "assert left_Rotate(5,1) == 1\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # your code goes here\n    new_text=''\n    for i in range(len(text)):\n        if text[i]==' ':\n            new_text=new_text+text[i]\n    return new_text\n",
        "generated_testcode": "assert remove_all_spaces('') == ''\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    print(x+y+z)\n    return len(list(filter(lambda x: x==x, (x,y,z))))\ntest_three_equal(10,30,40)\n\n",
        "generated_testcode": "assert test_three_equal(1,2,3) == 1\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    c=0\n    for i in range(n):\n        if arr[i]>arr[i+1]:\n            c+=1\n    return c\n\n",
        "generated_testcode": "assert count_Rotation(arr,n) == 3\n\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if (n % 2 == 0):\n        return False\n    else:\n        sq = int(n**0.5)\n        return True if sq == n else False\n# Driver code\nif __name__ == '__main__':\n    n = 1000\n    print(is_Perfect_Square(n))\n",
        "generated_testcode": "assert is_Perfect_Square(1) == True\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "\tfor i in range(n): \n\t\tif arr[i] % 2 == 0: \n\t\t\treturn False\n\treturn True\n\n",
        "generated_testcode": "assert is_Product_Even(arr=[1,2,3,4,5],n=6) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum_list = []\n    for i in range(len(lists)):\n        sum_list.append(sum(lists[i]))\n    return sorted(sum_list)\n\n",
        "generated_testcode": "assert max_sum_list(\n    [[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [7, 8, 9]\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    max_occurence = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            max_occurence += 1\n    return max_occurence\n\n",
        "generated_testcode": "assert max_run_uppercase(test_str) == \"A\"\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Return the first odd number in nums.\n    Your function should have one parameter, nums,\n    and should return the first odd number found in the list.\n\n",
        "generated_testcode": "assert first_odd(nums) == 1\n\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in test_tup:\n        if i in K:\n            return True\n    return False\n\n",
        "generated_testcode": "assert check_K(test_tup, 1) == True\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    if test_tup1 < test_tup2:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_smaller(('a', 'b', 'c'), ('a', 'b', 'd')) == True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    n=len(a)\n    for i in range(n):\n        if a[i]==b[i]==c[i]==d[i]:\n            continue\n        else:\n            return False\n    return True\n\n",
        "generated_testcode": "assert count_variable(1,2,3,4) == 1\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if test_list1 == test_list2:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_identical(test_list1, test_list2) == True\n\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if street.count('r') == 1:\n        return street[:street.find('r')] + 'rd.'\n    else:\n        return street\n\n",
        "generated_testcode": "assert road_rd('') == '', 'Expected an empty string, got {}'.format(road_rd(''))\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in str1:\n        count = count + 1\n    return count\n\n",
        "generated_testcode": "assert string_length('') == 0\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Define rombus parameters.\n    d = p+q\n    u = (d+2*p)/(d+2*p+q)\n    # Determine area of rombus.\n    area = 4*u*p*q\n    # Return the area.\n    return area\n\n",
        "generated_testcode": "assert rombus_area(1,1) == 0\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(n):\n        if arr[i] == 0:\n            arr[i] = -1\n        elif arr[i] == 1:\n            arr[i] = 2\n        else:\n            arr[i] = 1\n\n",
        "generated_testcode": "assert sort_by_dnf(arr, n) == [1, 2, 0]\n\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    print(*test_tup)\n\n",
        "generated_testcode": "assert clear_tuple(('a', 'b', 'c')) == ('a', 'b', 'c')\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return [x for x in nums if x%m==0 or x%n==0]\n\n",
        "generated_testcode": "assert div_of_nums(nums=[1,2,3,4,5,6,7,8,9,10],m=2,n=3) == [1,3,7]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    lower_ct=0\n    for i in str:\n        if i.islower():\n            lower_ct=lower_ct+1\n    return lower_ct\n\n",
        "generated_testcode": "assert lower_ctr(str) == 3, \"The function should return 3\"\n\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    This function takes a list of numbers and returns the frequency of consecutive duplicate numbers in the list\n    :param lists: A list of numbers to count the frequency of\n    :return: The count of each number\n    \"\"\"\n    nums_list = []\n    for item in lists:\n        if item not in nums_list:\n            nums_list.append(item)\n    nums_list.sort()\n    return nums_list\n\n",
        "generated_testcode": "assert count_duplic(['a', 'a', 'a', 'b', 'b', 'b', 'c', 'c', 'c', 'd', 'd', 'd', 'e', 'e', 'e', 'f', 'f', 'f', 'g', 'g', 'g', 'h', 'h', 'h', 'i', 'i', 'i', 'j', 'j', 'j', 'k', 'k', 'k'",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if monthnum1 >= 1 and monthnum1 <= 12:\n        print(\"The given month number contains 28 days.\")\n        return True\n    else:\n        print(\"The given month number is not between 1 and 12.\")\n        return False\n\n",
        "generated_testcode": "assert check_monthnum_number(1) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    merged_dictionary = {}\n    for key in dict1:\n        merged_dictionary[key] = dict1[key]\n    for key in dict2:\n        merged_dictionary[key] = dict2[key]\n    return merged_dictionary\n\n",
        "generated_testcode": "assert merge_dictionaries({\"a\":1,\"b\":2},{\"c\":3,\"d\":4}) == {\"a\":1,\"b\":2,\"c\":3,\"d\":4}\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if len(p) < 8:\n        return False\n    if not p.isalnum():\n        return False\n    return True\n\n",
        "generated_testcode": "assert pass_validity(1234) == True\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Function to check if a given substring is present in a given string.\n    \n    Arguments: \n    - string : String\n    - sample : String\n    \n    Returns: \n    - bool \n    \n    \"\"\"\n    # create a list of substring.\n    substring = []\n    for i in range(0, len(sample)) :\n        substring.append(sample[i:i+len(sample)-1])\n    for i in range(len(string)):\n        if string[i] in substring :\n            return True\n    return False\n    \n    \nif __name__ == \"__main__\":\n    \n    # Test cases\n    sample = \"TEST\"\n    string = \"TEST\"\n    \n    print(\"Pass\" if check_substring(string, sample) else \"Fail\")\n    string = \"ABABABA\"\n    sample = \"ABBABABA\"\n    print(\"Pass\" if check_substring(string, sample) else \"Fail\")\n    string = \"ABC\"\n    sample = \"ABCDCDC\"\n    print(\"Pass\" if check_substring(string, sample) else \"Fail\")\n    string = \"ABCDCDCabcdef\"\n    sample = \"ABCDCDCabcdefg\"\n    print(\"Pass\" if check_substring(string, sample) else \"Fail\")\n    string = \"ABABA\"\n    sample = \"ABABA\"\n    print(\"Pass\" if check_substring(string, sample) else",
        "generated_testcode": "assert check_substring(sample, \"abc\") == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  even = []\n  for i in l:\n    if i%2 == 0:\n      even.append(i)\n  return even\n\n",
        "generated_testcode": "assert remove_even(l) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if list_index < 0 or list_index > len(nums):\n        print(\"Invalid Index\")\n        return\n    else:\n        return nums[list_index]\n\n",
        "generated_testcode": "assert access_elements(nums, 0) == [1, 2, 3, 4, 5]\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if a>b: \n        if a>b: \n            return \"Equilateral\" \n        elif a==b: \n            return \"Equilateral\" \n        else: \n            return \"Isosceles\" \n    elif b>a: \n        if b>a: \n            return \"Isosceles\" \n        elif b==a: \n            return \"Isosceles\" \n        else: \n            return \"Scalene\" \n    elif a==b: \n        return \"Scalene\" \n    else: \n        return \"Isosceles\" \n\n",
        "generated_testcode": "assert check_Type_Of_Triangle(1,2,3) == \"Equilateral triangle\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum=0\n    for i in list1:\n        sum+=i[C]\n    return sum\n\n",
        "generated_testcode": "assert sum_column([\"a\", \"b\", \"c\"], [\"1\", \"2\", \"3\"]) == \"6\"\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count_alpha_dig = 0\n    for char in string:\n        if char.isalpha():\n            count_alpha_dig += 1\n    return count_alpha_dig\n\n",
        "generated_testcode": "assert count_alpha_dig_spl(string) == 5\n\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    freq_count = {} \n    output = {} \n    for char in input: \n        if char not in freq_count: \n            freq_count[char] = 0\n        freq_count[char] += 1\n    for key in freq_count: \n        if freq_count[key] > freq_count[key-1]: \n            output[key] = 1\n        else: \n            output[key] = 0\n    return output\n\n",
        "generated_testcode": "assert second_frequent(input) == \"a\"\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    return int(a*1.1**digits)\n\n",
        "generated_testcode": "assert round_up(1, 2) == 1\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] == arr[j]: \n                count += 1 \n    return count \n  \n# driver code to test the above function \narr = [1, 2, 3, 4, 5, 6, 7, 8, 9] \nn = len(arr) \nprint (\"Count of equal elements in given array is: \", count_Pairs(arr,n)) \n",
        "generated_testcode": "assert count_Pairs(arr,n) == 2\n\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # We are going to loop through the string\n    # and capture the maximum value in the string\n    # by using regular expressions. \n    # The extracted value is then added to the max_num variable\n    # The max_num variable is then returned.\n\n",
        "generated_testcode": "assert extract_max(input) == '1'\n\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    '''\n    DESCRIPTION:\n        This function takes a dictionary and returns a list of keys.\n        \n    '''\n    return list(dict.keys())\n\n",
        "generated_testcode": "assert get_key({\"a\": 1, \"b\": 2}) == [\"a\", \"b\"]\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    matrix = []\n    for i in range(n):\n        row = []\n        for j in range(n):\n            row.append(1)\n        matrix.append(row)\n    return matrix\n",
        "generated_testcode": "assert generate_matrix(1) == [[1]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    s = (y2-y1)/(x2-x1)\n    return s\n\n",
        "generated_testcode": "assert slope(1,2,3,4) == -1\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    left = 0\n    right = size - 1\n\n",
        "generated_testcode": "assert max_sub_array_sum(a,size) == size\n\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "  if n == 0: \n    return 0 \n  if n % 2 == 0: \n    return n * cube_Sum(n - 1) \n  return n * (n * cube_Sum(n - 1) + 1) \n  \nprint(cube_Sum(5)) \n  \n# Python program to find the cube root of a given number. \ndef find_cube_root(num): \n  \n  # Corner cases \n  if (num < 0): \n    return None \n  \n  # If number is an odd number, cube root will be 1 \n  if (num % 2 == 1): \n    return 1\n\n",
        "generated_testcode": "assert cube_Sum(1) == 1\n",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  '''\n  Check if s1,s2 have the same binary strings \n  and return the minimum number of swaps.\n  '''\n  count = 0\n  for i in range(len(s1)):\n    if s2[i] == 1 :\n      count += 1\n    elif s1[i] == 1 :\n      count -= 1\n  return count\n  \n\n",
        "generated_testcode": "assert min_Swaps(s1,s2) == 0\n\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return tup[0]\n\n",
        "generated_testcode": "assert sort_tuple(('a', 'b', 'c')) == ('c', 'b', 'a')\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if (a == 0) or (b == 0) or (c == 0):\n        return True\n    if (a*b) % c!= 0:\n        return False\n    return True\n\n",
        "generated_testcode": "assert Check_Solution(1,2,3) == -1\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 1: \n        return 0\n    if n == 1: \n        return 1\n    if arr[n - 1] > arr[n - 2]: \n        return get_inv_count(arr, n - 1) \n    return get_inv_count(arr, n - 1) + get_inv_count(arr, n - 2) \n \n# Print the number of inversions in arr \nprint(get_inv_count(arr, n)) \n\n",
        "generated_testcode": "assert get_inv_count(arr, n) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    size = arr_size\n    for i in range(0, size):\n        if(arr[i] % 2 == 1):\n            return arr[i]\n\n",
        "generated_testcode": "assert get_odd_occurence(arr, 5) == 2\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    h = []\n    for p in primes:\n        if p * p > n:\n            break\n        h.append(p * p)\n    q = []\n    heapq.heapify(h)\n    for i in range(n):\n        heapq.heappush(q, h.pop())\n    for i in range(n):\n        if q[0] * q[0] > q[1] * q[1]:\n            return q[0]\n        heapq.heappush(q, q[1] * q[1])\n    return q[0]\n\n",
        "generated_testcode": "assert nth_super_ugly_number(1, [2, 3, 5, 7]) == 1\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    # Base condition\n    if n==0 or k==0:\n        return 0\n    elif k == 1:\n        return n\n    elif n>0 and k<1:\n        return 0\n    elif n%2==0 and k%2==1:\n        return n//2\n    elif n%2==1 and k%2==0:\n        return n//2+1\n    elif n%2==0 and k%2==0:\n        return n//2+2\n\n",
        "generated_testcode": "assert get_Number(1, 2) == 1\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    if(n == 0): \n        return 0\n    else: \n        return 1 + find_Digits(n - 1)\n\n",
        "generated_testcode": "assert find_Digits(5) == 5\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    '''\n    Finds the minimum number of platforms required for a railway/bus station.\n    Parameters:\n        arr: an array of string integers representing the location of the bus\n        dep: a string representing the route of the bus\n        n: an integer representing the number of steps for the bus\n    '''\n    # find the minimum number of platforms\n    platforms = 0\n    for i in range(0, n, 1):\n        if arr[dep[i]] == 1:\n            platforms += 1\n    \n    return platforms \n\n",
        "generated_testcode": "assert find_platform(arr, dep, n) == 1\n\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return xs[:]\n\n",
        "generated_testcode": "assert lcopy(('a', 'b', 'c')) == 'abc'\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return (base1*height)/2\n\n",
        "generated_testcode": "assert area_trapezium(1,2,3) == 5\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # number to be searched \n    if N == 1: \n        return 1\n    count = 2\n    sum = 0\n    while count < N: \n        if N % count == 0: \n            sum = sum + count \n            N = N//count\n        else: \n            count = count + 1\n    return sum\n\n",
        "generated_testcode": "assert Sum(12) == 3\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": true,
        "answer": "    if a+b==c or a+c==b or b+c==a:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert is_triangleexists(1,2,3) == True\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    for i in range(1,N+1): \n        if i % 2 == 0: \n            Sum = Sum - i \n            print(Sum)\n\n",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(10,1) == 1\n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #Your code here\n    num_list.sort(reverse = True)\n    print(num_list)\n\n",
        "generated_testcode": "assert remove_negs(['1', '-2', '3', '-4', '5']) == ['1', '-2', '3', '-4', '5']\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    factors = []\n    while(n % 2 == 0): \n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n) + 1)): \n        if n % i == 0: \n            factors.append(i) \n            n = n // i\n    if n > 0: \n        factors.append(n)\n    return sum(factors)\n\n",
        "generated_testcode": "assert sum_of_odd_Factors(12) == 7\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for num in rawheap:\n        heapq.heappush(heap, -num)\n    while len(heap) > 1:\n        heapq.heappush(heap, -heapq.heappop(heap)+heapq.heappop(heap))\n    return heap\n\n",
        "generated_testcode": "assert raw_heap(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == ['a', 'b', 'c', 'd', 'e', 'f', '",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if x % 2 == 0: \n        print(f\"{x} is even\") \n    else: \n        print(f\"{x} is odd\") \n\n",
        "generated_testcode": "assert check_Even_Parity(5) == True\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  min = 0\n  if n == 1 : \n    return 1\n  elif n % 2 == 0 : \n    if arr[n // 2] > arr[n // 2 - 1]: \n      min = 2\n    else: \n      min = 1\n  else : \n    min = 1\n  if n % 2 == 0 : \n    if arr[n // 2] > arr[n // 2 + 1]: \n      min = 2\n    else: \n      min = 1\n  return min\n\n",
        "generated_testcode": "assert find_Min_Swaps(arr,n) == 0\n\n",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    new_list = []\n    for i in list1:\n        new_list.append(i)\n    return new_list\n\n",
        "generated_testcode": "assert listify_list(['a', 'b', 'c']) == ['a', 'b', 'c']\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    count = 0\n    for i in input_list:\n        for j in i:\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert count_list(['a', 'b', 'c']) == 3, \"count_list should return 3\"\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    # initialize an empty array\n    sub_arr = []\n    # iterate through the array\n    for i in range(len(my_list)):\n        # append the current element of the array\n        sub_arr.append(my_list[i])\n        # check if the array is empty\n        if not sub_arr:\n            return sub_arr\n    return sub_arr\n\n",
        "generated_testcode": "assert sub_lists(['a', 'b', 'c']) == ['a', 'b', 'c'], \"Test failed\"\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #create a set to store alphanumeric characters\n    alphanumeric = {\"[\", \"]\", \"!\", \"?\", \".\", \"*\", \"+\"}\n    for char in string:\n        if not char.isalnum():\n            return False\n    return True\n\n",
        "generated_testcode": "assert check_alphanumeric(string) == True\n\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(texts,key=lambda s: sorted(s))\n\n",
        "generated_testcode": "assert anagram_lambda([\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"],[\"eat\",\"tea\",\"tan\",\"ate\",\"nat\",\"bat\"]) == [[\"bat\"],[\"nat\",\"tan\"],[\"ate\",\"eat\",\"tea\"]]\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    text = text.split(\" \")\n    n_words = 0\n    for i in range(len(text)):\n        n_words = n_words + 1\n    freq = {}\n    for i in text:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    freq_sorted = sorted(freq.items(), key = lambda kv: kv[1])\n    return n_words, freq_sorted[-n:][::-1]\n\n",
        "generated_testcode": "assert n_common_words(text,2) == ['the', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'and', 'a', 'an",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # An empty list is used for faster search\n    d = [[] for i in range(n)]\n    # Initialize the d[i][j] list to be 0\n    for i in range(n):\n        d[i].append(0)\n    # Create a d[0] list with all 0s\n    for i in range(n):\n        d[i].append(0)\n    # Create a d[i][j] array to store the length of d[i][j]\n    # After iteration i, d[i][j] = d[i][j+1] + 1\n    d[0][0] = 1\n    # Create a temporary array to store the j's, i's, and indexes\n    # to find the length of the longest consecutive subsequences\n    temp_arr = [i for i in range(n)]\n    for i in range(1, n):\n        for j in range(i):\n            # If d[i][j] is greater than d[i][j+1]\n            # If d[i][j] is greater than or equal to d[i][j+1]\n            # If d[i][j] is less than d[i][j+1]\n            if d[i][j] > d[i][j+1]:\n                # If the indexes of d[i][j] and d[i][j+1]\n                # are the same then use the previous element\n                temp_arr[i] = j\n                d[i][j] =",
        "generated_testcode": "assert find_longest_conseq_subseq(arr, n) == 6\n\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # create a unique list to store the palindromes\n    palindromes = list(map(lambda x: x[::-1], texts))\n    \n    # return the palindromes if they are present in the list\n    # if they are not present, return None\n    return list(filter(lambda x: x == x[::-1], palindromes)) if len(palindromes) == len(set(palindromes)) else None\n\n",
        "generated_testcode": "assert palindrome_lambda([\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"]) == ",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # get the length of the nums list\n    len = len(nums)\n\n",
        "generated_testcode": "assert ntimes_list(nums,3) == [1,1,1,2,2,2,3,3,3]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return True if day_counter(monthname2) == 31 else False\n\n",
        "generated_testcode": "assert check_monthnumb(monthname2) == True\n\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    print(sum(arr))\n    sum=0\n    for i in range(0,n):\n        sum+=arr[i]\n    if(sum%2==0):\n        print(sum)\n        return sum\n    else:\n        print(\"Not possible to add that number\")\n        return \"Not possible to add that number\"\n\n",
        "generated_testcode": "assert min_Num(arr,n) == 1\n\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "  #Your code goes here\n  if len(a)>0:\n    return len(a.split()[-1])\n  else:\n    return 0\n#Note: This function should always receive a single string parameter,\n#and return the integer length of this string. \n#If the parameter is invalid, return 0 instead.\n\n",
        "generated_testcode": "assert length_Of_Last_Word('') == 0, \"The function should return 0\"\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    newList = []\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if i < leftrange and j < rigthrange:\n                newList.append(list1[i][j])\n            elif i >= leftrange and j >= rigthrange:\n                newList.append(list1[i][j])\n            else:\n                pass\n    return newList\n\n",
        "generated_testcode": "assert remove_list_range(['a', 'b', 'c', 'd', 'e', 'f'], 0, 2) == ['a', 'f']\n",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Return sum of numbers in nums that are positive.\n\n",
        "generated_testcode": "assert sum_positivenum(nums) == sum(nums), \"Sum of positive numbers is not equal to sum of numbers\"\n\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    temp = []\n    string1 = string1.lower()\n    string2 = string2.lower()\n    for i in range(len(string1)):\n        if string1[i] == string2[i]:\n            temp.append(i)\n    return len(temp)== len(set(temp))\n\n",
        "generated_testcode": "assert are_Rotations(string1,string2) == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    list1.sort() \n    list2.sort() \n    for i in list1: \n        if i in list2: \n            return True \n    return False \n   \n# Test it \nlist1 = [1,2,3,4] \nlist2 = [1,2,4,5] \nprint(check_subset(list1,list2)) ",
        "generated_testcode": "assert check_subset(['a','b','c'],['a','b','d']) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)\n\n",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return str1+str2\n    \n    # Write a function to check if a string is in a string.\ndef is_string_in_string(str,str2):\n    # convert the strings into lowercase.\n    str1 = str.lower()\n    str2 = str2.lower()\n    # check if the string 1 is in the string 2.\n    if check_Concat(str1,str2)==str:\n        print(f\"{str1} is in {str2}\")\n    else:\n        print(f\"{str1} is not in {str2}\")\n    \n# Now that you have implemented the function check_Concat, you should now complete this code to print:\n#      Hi there!\n#      Your score is 12.4\n# Check_Concat(\"Hey there!\",\"Hello\")\n# Check_Concat(\"Hey there\",\"world\")\n# Check_Concat(\"Hello\",\"world\")\n# Check_Concat(\"Hi there\", \"world\")\n# Check_Concat(\"Hi there\", \"Hello\")\n\n",
        "generated_testcode": "assert check_Concat(str1='abc',str2='def') == True\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    min_difference = test_list[0][0] - test_list[1][0]\n    for i in range(0, len(test_list)):\n        if test_list[i][0] - test_list[i][1] < min_difference:\n            min_difference = test_list[i][0] - test_list[i][1]\n    return min_difference\n\n",
        "generated_testcode": "assert min_difference(test_list) == (0, 0)\n\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    if(x > y):\n        greater = x\n    else:\n        greater = y\n    while(True):\n        if(greater % x == 0 and greater % y == 0):\n            break\n        greater += 1\n    return greater\n\n",
        "generated_testcode": "assert lcm(2, 3) == 6\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    temp_list = []\n    for i in range(len(str)) : \n        temp_list.append(str[i]) \n    for i in range(len(str)-1) : \n        if temp_list[i] > temp_list[i+1] : \n            temp_list[i], temp_list[i+1] = temp_list[i+1], temp_list[i]\n    return temp_list\n \ndef main() :\n    str = input(\"Enter a string to sort : \")\n    print(sort_String(str))\n \nif __name__ == '__main__' :\n    main()",
        "generated_testcode": "assert sort_String(str) == sorted(str)\n\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_tuple) < K:\n        return False\n    else:\n        return True\n\n",
        "generated_testcode": "assert check_tuples(('a', 'b', 'c'), 2) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    match_obj = re.search(r'\\w*a\\b', text)\n    if match_obj:\n        print(\"Match found\")\n    else:\n        print(\"No match found\")\n\n",
        "generated_testcode": "assert text_match(text) == True\n\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  if a == 0 and b!= 0 : \n    if c == 0 : \n      print (\"1\") \n    elif b == 0 : \n      print (\"2\") \n    else : \n      print (\"3\") \n  elif a == 0 : \n    if b == 0 : \n      print (\"4\") \n    else : \n      print (\"5\") \n  elif b == 0 : \n    print (\"6\") \n  elif c == 0 : \n    print (\"7\") \n  else : \n    if a**2 == (b**2 + c**2) : \n      print (\"8\") \n    elif a**2 > (b**2 + c**2) : \n      print (\"9\") \n    elif b**2 > (a**2 + c**2) : \n      print (\"10\") \n    elif a**2 > (b**2 + c**2) : \n      print (\"11\") \n    else : \n      print (\"12\") \n\n",
        "generated_testcode": "assert Check_Solution(1,2,3) == 1\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in list1:\n        if i % 2 == 0:\n            sum += i\n        else:\n            sum -= i\n    return sum\n\n",
        "generated_testcode": "assert sum_even_odd(list1) == [1, 3, 5, 7, 9]\n\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    perimeter=h*h+b*b+b*b\n    return perimeter\nprint(parallelogram_perimeter(3,4))\n\n",
        "generated_testcode": "assert parallelogram_perimeter(3,4) == 12\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    d=[]\n    for i in nums:\n        if i%m==0 and i%n==0:\n            d.append(i)\n    return d\n\n",
        "generated_testcode": "assert div_of_nums(nums=[1,2,3,4,5,6,7,8,9,10],m=3,n=2) == [1,3]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # your code goes here \n    for i in range(l,r+1):\n        if all_Bits_Set(n,i)==True:\n            print(\"All bits are set within the given range\",i)\n        else:\n            print(\"All bits are not set within the given range\",i)\n            \ndef all_Bits_Set(n,l,r):\n    bit=n&(n&(n>>l)|(n&(n>>r)))\n    if bit==0:\n        print(\"All bits are set within the given range\")\n    else:\n        print(\"All bits are not set within the given range\")\n \nall_Bits_Set_In_The_Given_Range(n=31,l=0,r=31)",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(0,0,1) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(str1)):\n        if str1[i]!= str2[i]:\n            return False\n    return True\n\n",
        "generated_testcode": "assert is_Isomorphic(str1,str2) == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(len(numbers)):\n        sum += numbers[i]\n    return sum / len(numbers)\n\n",
        "generated_testcode": "assert sum_num(numbers) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    return (n & 0x01) == 0 \n\n",
        "generated_testcode": "assert is_odd(3) == False\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Substitute the given tuples with the respective elements of the given tuples\n    \"\"\"\n    # Define the result\n    result = []\n    # Loop over all elements of the first tuple\n    for i in test_tup1:\n        # If element is a tuple\n        if isinstance(i, tuple):\n            # Loop over all elements of the second tuple\n            for j in test_tup2:\n                # If element is a tuple\n                if isinstance(j, tuple):\n                    # Substract the elements of the first tuple from the second tuple\n                    result.append(i[0] - j[0])\n                else:\n                    # If element is a string\n                    if isinstance(j, str):\n                        # Substract the element of the first tuple from the second tuple\n                        result.append(i[0] - j)\n        # If element is a list\n        elif isinstance(i, list):\n            # Loop over all elements of the second tuple\n            for j in test_tup2:\n                # If element is a tuple\n                if isinstance(j, tuple):\n                    # Substract the elements of the second tuple from the first tuple\n                    result.append(i[0] - j[0])\n                else:\n                    # If element is a string\n                    if isinstance(j, str):\n                        # Substract the element of the second tuple from the first tuple\n                        result.append(i[0] - j)\n        # If element is a dictionary\n        elif isinstance(i",
        "generated_testcode": "assert substract_elements(('a', 'b', 'c'), ('d', 'e', 'f')) == ('a', 'b', 'c', 'd', 'e', 'f')\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(lists)-1, -1, -1):\n        lists[i] = lists[i][::-1]\n\n",
        "generated_testcode": "assert reverse_list_lists(['a', 'b', 'c']) == ['c', 'b', 'a']\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(n) : \n        if arr1[i] == arr2[i] : \n            return i \n        \n    \ndef find_r(arr1,arr2,n) : \n    ind = -1\n    for i in range(n) : \n        if arr1[i]!= arr2[i] : \n            break\n        else : \n            ind = i\n    if ind == -1 : \n        return -1\n    else : \n        return ind \n\n",
        "generated_testcode": "assert find_Extra(arr1,arr2,n) == 0\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    temp_list = []\n    temp_list.append(len(str(A)))\n    temp_list.append(len(str(B)))\n    for x in range(len(temp_list)):\n        if x == 0:\n            continue\n        else:\n            if temp_list[x]!= temp_list[x-1]:\n                return False\n    return True\n\n",
        "generated_testcode": "assert same_Length(1,2) == True\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    new_text = ''\n    for char in text:\n        if char!='':\n            new_text += char\n    return new_text\n\n",
        "generated_testcode": "assert remove_spaces(text) == \"Hello world\"\n\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    len_lst = len(lst) \n    for i in range(0, len_lst): \n        for j in range(0, len_lst): \n            if (i!= j): \n                lst[i] = lst[j] \n    return lst \n \nprint(\"The Original List : \" + str(lst)) \nprint(\"Extract the last element : \" + str(Extract(lst))) ",
        "generated_testcode": "assert Extract(['a', 'b', 'c', 'd', 'e']) == ['c', 'd', 'e']\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    test_str_list = test_str.split(\",\")\n    test_float_list = []\n    for value in test_str_list:\n        test_float_list.append(float(value))\n    return test_float_list\n\n",
        "generated_testcode": "assert float_to_tuple(1.0) == (1,)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    max_sum = -10000000000\n    temp = 0\n    \n    for i in range(len(A)):\n        \n        for j in range(i):\n            \n            if A[i] < A[j] and A[i] + A[j] > max_sum:\n                max_sum = A[i] + A[j]\n                temp = A[i]\n                \n    return max_sum, temp\n\n",
        "generated_testcode": "assert max_sum_subseq(A) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # YOUR CODE HERE\n    return sorted(n)[-1]\n\n",
        "generated_testcode": "assert last([]), \"Empty list\"\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "  sentence = sentence.lower()\n  words = sentence.split()\n  for word in words:\n    if word == word:\n      return True\n  return False\n  \nsentence = \"This is a sentence containing a word\"\nword = \"word\"\nif is_Word_Present(sentence,word):\n  print(\"the word is present\")\nelse:\n  print(\"the word is not present\")\n\n",
        "generated_testcode": "assert is_Word_Present(sentence,word) == True\n\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    output_list = []\n    for i in range(n):\n        output_list.append(numbers[i])\n    return output_list\n\n",
        "generated_testcode": "assert extract_elements(numbers, 2) == [1, 3]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  for i in range(1,n): \n    for j in range(i): \n      if arr[j]>arr[i]: \n        swap(arr,i,j) \n  return arr \n  \n# function to swap elements in the array \ndef swap(arr, i, j): \n  temp = arr[i] \n  arr[i] = arr[j] \n  arr[j] = temp \n  \n# function to check if the array is sorted \ndef isSorted(arr): \n  n = len(arr) \n  for i in range(n-1): \n    if arr[i]>arr[i+1]: \n      return False\n  return True\n\n",
        "generated_testcode": "assert check(arr,n) == True\n\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    num_regex = re.compile(r'(\\d+)(?:\\d+)?')\n    match = num_regex.search(string)\n    if match is not None:\n        return f'Match found: {match.group(1)} {match.group(2)}'\n    else:\n        return 'No match found'\n\n",
        "generated_testcode": "assert match_num(5) == \"5\"\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    # Write your code here.\n    s = n\n    count = 1\n    while count < s:\n        count = 1\n        for i in range(n-count,n):\n            if i % count == 0:\n                count += 1\n        # print(f'{count}')\n        if count > s:\n            break\n        s += 1\n    return s",
        "generated_testcode": "assert smallest_multiple(1) == 1\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    d = d1.copy()\n    for k in d2:\n        d[k] = d2[k]\n    return d\n\n",
        "generated_testcode": "assert add_dict({\"a\":1,\"b\":2},{\"c\":3,\"d\":4}) == {\"a\":1,\"b\":2,\"c\":3,\"d\":4}\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    return sum(1 for i in range(n) if not int(bin(i)[2:].zfill(n)[::-1]) == 0)\n\n",
        "generated_testcode": "assert count_Unset_Bits(1) == 0\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return x % 2 == 0\n\n",
        "generated_testcode": "assert even_num(1) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Initialise empty dictionary to store the summation\n    # of co-efficients from 1 to end.\n    factorial_dict = {}\n    # Calculate the sum of co-efficients of 1 to end.\n    for i in range(start,end+1):\n        # Calculate the co-efficients of 1 to end.\n        factorial_dict[i] = start**i \n    # Iterate through the dictionary\n    for key, value in factorial_dict.items():\n        # Increment value of the key by value.\n        factorial_dict[key] += factorial_dict.get(key+1,0)\n    # Return the sum of the co-efficients.\n    return factorial_dict.get(end,0)\n\n",
        "generated_testcode": "assert factorial(1,2) == 1\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    url = 'https://www.theguardian.com' + url\n    page = requests.get(url)\n    soup = BeautifulSoup(page.content, 'html.parser')\n    match = re.search(r'<span class=\"span14\">(.*)</span>', str(soup))\n    if match:\n        return match.group(1)\n    return None\n\n",
        "generated_testcode": "assert extract_date(url) == (year, month, date)\n\n",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(n):\n        if (i+1) % n == 0:\n            print(i+1)\n\n",
        "generated_testcode": "assert lucky_num(1) == 1\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Write your code here\n    l = 0\n    r = n - 1\n    while l < r:\n        mid = (l + r) // 2\n        if arr[mid] == mid:\n            return mid\n        elif arr[mid] < mid:\n            l = mid + 1\n        else:\n            r = mid\n    return -1\n\n",
        "generated_testcode": "assert find_fixed_point(arr, n) == 0\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    index = int(math.sqrt(num))\n    if num < (2 ** index):\n        return\n    else:\n        palindrome = num - (2 ** index)\n        palindrome_as_string = str(palindrome)\n        if palindrome_as_string[-1] == '0':\n            palindrome_as_string = palindrome_as_string[:-1]\n        return palindrome_as_string\n\n",
        "generated_testcode": "assert previous_palindrome(12) == \"a\"\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # print(m, d, y)\n    if (d < 0 or d > 31 or y < 0 or y > 69):\n        raise ValueError('Invalid date')\n    else:\n        return d, m, y\n\n",
        "generated_testcode": "assert check_date(1, 1, 2020) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if len(nums) <= 1:\n        return nums[0] * nums[1] * nums[2]\n    arr = [0] * (len(nums) + 1)\n    heapq.heappush(arr, nums[0] * nums[1] * nums[2])\n    for i in range(3, len(nums) + 1):\n        heapq.heappush(arr, nums[i] * nums[i - 1] * nums[i - 2])\n    return arr[0]\n\n",
        "generated_testcode": "assert maximum_product(nums) == [1, 2, 3]\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return n ** k * (n - k) ** 2\n\n",
        "generated_testcode": "assert binomial_coeff(5, 2) == 2\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Returns True if the string ends with a number, False otherwise\"\"\"\n    if string[-1] in [',', '.', '-']:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert end_num('') == True\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    if len(s) % 2!= 0:\n        return False\n    else:\n        return True\n\n",
        "generated_testcode": "assert is_Two_Alter('') == True\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # If array_nums is not a list of positive numbers, then return\n    if not isinstance(array_nums, list):\n        return array_nums\n    # If array_nums is a list of positive numbers, then return new array with the largest value\n    # of positive numbers multiplied by -1.\n    elif isinstance(array_nums, list):\n        return [n * -1 for n in array_nums]\n    # If array_nums is a list of negative numbers, then return new array with the largest value\n    # of negative numbers multiplied by +1.\n    elif isinstance(array_nums, list):\n        return [n * +1 for n in array_nums]\n    # If array_nums is a single value, then return array with value of that value multiplied by -1\n    elif isinstance(array_nums, int):\n        return [array_nums] * -1\n    else:\n        return 'Error'\n\n",
        "generated_testcode": "assert rearrange_numbs(array_nums) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 4",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    min_sum = 0\n    i = 0\n    j = 0\n    k = 0\n    while i < arr_size and j < arr_size and k < arr_size:\n        sum = A[i] + A[j] + A[k]\n        if sum == sum_test:\n            if A[i] < min_sum:\n                min_sum = A[i]\n                \n            if A[j] < min_sum:\n                min_sum = A[j]\n                \n            if A[k] < min_sum:\n                min_sum = A[k]\n            \n        if sum < sum_test:\n            i += 1\n        elif sum > sum_test:\n            j += 1\n        elif sum == sum_test:\n            if A[i] < min_sum:\n                min_sum = A[i]\n            if A[j] < min_sum:\n                min_sum = A[j]\n            if A[k] < min_sum:\n                min_sum = A[k]\n        k += 1\n    return min_sum\n            \n\n",
        "generated_testcode": "assert find_triplet_array(A, arr_size, sum) == True\n\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if '_' in text:\n        return False\n    else:\n        for i in range(0, len(text) - 1):\n            if text[i] == '_':\n                if text[i + 1] == '_':\n                    return True\n    return False\n\n",
        "generated_testcode": "assert text_uppercase_lowercase(text) == ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']\n\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "  \n    # Base case: If n == 0, then we can return 0 \n    # because no elements can be removed from S \n    # because the elements are not subset \n    # hence we return 0 \n    if (n == 0): \n        return 0\n  \n    # If m!= n, then return -1 \n    if (m > n): \n        return -1\n  \n    # Now we have that we have two options \n    #  1. If S[n-1] is less than \n    #  or equal to the next element in S, \n    # then there is a subset S[n-1] \n    # from S[n]  \n    # and we have to remove all the elements \n    # from S[n-1] \n  \n    # So return the number of ways \n    # to remove elements from S[n-1] \n    return coin_change(S, m, n - 1) + coin_change(S, m - 1, n) \n  \n  \n# Driver code to test above function  \nS = [1, 2, 3, 4] \nn = 5\n  \nprint(coin_change(S, n, n-1))\n",
        "generated_testcode": "assert coin_change(S, m, n) == 1\n\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #for loop is used to print multiple items\n    for i in range(0, len(items)):\n        #for item in range(0,len(items)):\n        #multiply all items with 10\n        items[i] = items[i] * 10\n        print(items[i])\n\n",
        "generated_testcode": "assert multiply_list(['a', 'b', 'c']) == 'abc'\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    i = 0\n    while i < len(test_list):\n        if test_list[i] == None:\n            test_list.pop(i)\n        else:\n            i += 1\n    return test_list\n\n",
        "generated_testcode": "assert remove_tuple(()) == ()\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # this function takes in a tuple and an integer N and returns a list of tuples.\n    # it returns a list of tuples, not a list of lists.\n    return [(test_tup[i:i+N]) for i in range(0, len(test_tup), N)]\n\n",
        "generated_testcode": "assert chunk_tuples(('a', 'b', 'c'), 2) == ('a', 'b', 'c', 'a', 'b', 'c')\n",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Edge Case \n    if len(arr) <= 1: \n        return arr[0]\n    # Sort array using bubble sort \n    arr.sort() \n    # Recur for find the index of the largest product \n    for i in range(len(arr) - 1): \n        if arr[i] > arr[i + 1]: \n            return arr[i] \n    return arr[-1] \n\n",
        "generated_testcode": "assert max_product( [1,2,3,4,5] ) == 5\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    mini = None\n    mini_i = None\n    mini_j = None\n    for i in range(m-1, n):\n        for j in range(i+1, m):\n            # print(i,j)\n            # print(i,j,X[i],Y[j])\n            if (X[i] == Y[j]):\n                if mini == None:\n                    mini = X[i]\n                    mini_i = i\n                    mini_j = j\n                elif mini_i!= None and mini_j!= None:\n                    if (X[i] == mini):\n                        if X[mini_i] == mini:\n                            if X[mini_j] == mini:\n                                mini = X[i]\n                                mini_i = i\n                                mini_j = j\n                    else:\n                        continue\n                elif mini_i!= None:\n                    continue\n                elif mini_j!= None:\n                    continue\n                else:\n                    continue\n            else:\n                continue\n            break\n    return mini_i, mini_j\n\n",
        "generated_testcode": "assert super_seq(X, Y, m, n) == 4\n\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    return max(x,y)\n\n",
        "generated_testcode": "assert max_of_two( 1, 2 ) == 2\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Given a tuple, returns a new tuple containing the product of all the numbers in the tuple.\"\"\"\n    prod = 1\n    for i in range(len(nums)):\n        prod = prod * nums[i]\n    return prod\n\n",
        "generated_testcode": "assert mutiple_tuple(1,2,3,4,5,6,7,8,9,10) == 60\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Write your code here\n    # n <= k\n    if(n == k):\n        return 1\n    if(n < k):\n        return 0\n    return binomial_coeffi(n-1, k) + binomial_coeffi(n-1, k-n)\n\n",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 2\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "\t\tself.data = data # Assign data as a variable.\n\t\tself.leftChild = None # Assign leftChild as None.\n\t\tself.rightChild = None # Assign rightChild as None.\n\n",
        "generated_testcode": "assert __init__(1) == 1\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    dt = dt.split('-')\n    dt[2] = dt[2].split('.')\n    d = dt[0]\n    m = dt[1]\n    y = dt[2][2]\n    m = m.zfill(2)\n    y = y.zfill(4)\n    dd = d.zfill(2)\n    mm = m.zfill(2)\n    yyyy = y + '-' + mm + '-' + dd\n    return yyyy\n    \n# Write a function that converts a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format2(dt):\n    dt = dt.split('-')\n    dt[2] = dt[2].split('.')\n    d = dt[0]\n    m = dt[1]\n    yy = dt[2][2]\n    m = m.zfill(2)\n    yy = yy.zfill(4)\n    dd = d.zfill(2)\n    mm = m.zfill(2)\n    yyyy = y + '-' + mm + '-' + dd\n    return yyyy\n\n",
        "generated_testcode": "assert change_date_format(dt) == '01-01-2021'\n\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for element in tuplex:\n        if element == value:\n            count = count + 1\n    return count\n\n",
        "generated_testcode": "assert count_tuplex(('a', 'b', 'c'), 'a') == 1\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if text.count(\"a\")>1 or text.count(\"b\")>1:\n        return False\n    else:\n        return True\n\n",
        "generated_testcode": "assert text_match(text) == True\n\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1,number+1):\n        sum+=i\n    return sum\n\n",
        "generated_testcode": "assert sum_series(1) == 1\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    l_new = []\n    for i in l:\n        if not i in l_new:\n            l_new.append(i)\n    return l_new\n\n",
        "generated_testcode": "assert remove_duplic_list([\"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\", \"a\"",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return re.sub(r'(.)([A-Z][a-z]+)', r'\\1_\\2', text).lower()\n\n",
        "generated_testcode": "assert camel_to_snake('') == ''\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "\t#n is the target number and m is the nth order of a sequence \n\t#that is given by user\n\tl=list(range(1,n+1)) \n\ts=[] \n\twhile len(l)>=m: \n\t\ts.append(l[-1]) \n\t\tdel l[-1] \n\treturn s[-1] \n# User function to take array as input and print its element \n# Find the nth element.\ndef find_nth_element(a, n): \n\t# Base condition. \n\tif n==0: \n\t\tprint(a[0]) \n\t\treturn \n\t# Recursive condition \n\tfind_nth_element(a, n-1) \n\tprint(a[n-1]) \n# Driver code \narr = [1,2,3,4,5] \nn = len(arr) \nprint(\"The nth element is: \",end=\"\") \nfind_nth_element(arr, n) \n",
        "generated_testcode": "assert dealnnoy_num(1, 1) == 1\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    # Write your code here.\n    if number == 1:\n        return 1\n    return number * (series_sum(number - 1) + series_sum(number - 2) + series_sum(number - 3))\n\n",
        "generated_testcode": "assert series_sum(1) == 1\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    temp_list = []\n    for i in range(len(ord_list)):\n        temp_list.append(ord_list[i])\n    temp_list.sort()\n    test_list.sort(key=lambda x: temp_list.index(x))\n    return test_list\n\n",
        "generated_testcode": "assert re_arrange_tuples(test_list, ord_list) == ",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # list of characters\n    chars = list(str1)\n    # frequency list\n    freq = dict()\n    # count each character\n    for char in chars:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    # use max to return the character\n    max_char = \"\"\n    max_freq = 0\n    for char in chars:\n        if freq[char] > max_freq:\n            max_char = char\n            max_freq = freq[char]\n    return max_char\n\n",
        "generated_testcode": "assert max_char(str1) == 'a'\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Variable to store the index of the closest element\n    k = 0\n    # Variable to store the closest element\n    closest_value = 0\n    # A is the sorted array A\n    # B is the sorted array B\n    # C is the sorted array C\n    # p is the parameter p for the square-root function\n    # q is the parameter q for the square-root function\n    # r is the parameter r for the square-root function\n    # The two arrays must be of the same length\n    if len(A) > len(B) > len(C) or len(A) < len(B) < len(C):\n        return -1\n\n",
        "generated_testcode": "assert find_closet(A, B, C, 1, 2, 3) == [1, 2, 3]\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Sort the models using lambda function.\"\"\"\n    return sorted(models, key=lambda model: model['model_id'])\n",
        "generated_testcode": "assert sorted_models(models) == sorted(models, key=lambda x: x['model_id'])\n\n",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # create a maxheap\n    max_heap = []\n    # create a minheap\n    min_heap = []\n\n",
        "generated_testcode": "assert heap_sort(arr) == sorted(arr)\n\n",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    cnt = 0\n    for i in num:\n        if type(i) == tuple:\n            cnt += 1\n    return cnt\n\n",
        "generated_testcode": "assert count_elim(1) == 1\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"Checks if any element is present in the given list\n    \n    Args:\n        test_tup (tuple): The tuple in which the element is to be checked\n        check_list (list): The list to check if any element is present in the given list\n    \n    Returns:\n        bool: True if any element is present in the given list, False otherwise\n    \"\"\"\n    for element in check_list:\n        if element in test_tup:\n            return True\n    return False\n\n",
        "generated_testcode": "assert check_element(('a', 'b', 'c'), ['a', 'b', 'c']) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    heap = []\n    heapq.heapify(heap)\n    heapq.heappush(heap, num1[0])\n    heapq.heappush(heap, num2[0])\n    return heap\n\n",
        "generated_testcode": "assert combine_lists(1,2) == [1,2], \"First list should be [1,2]\"\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # with open(\"../files/input.txt\", \"r\") as f:\n    #     lines = f.readlines()\n    #\n    # lines = lines.split(\"\\n\")\n    # lines = lines[1:]\n    #\n    # for line in lines:\n    #     line = line.rstrip()\n    #     # print(line)\n    #     lst = line.split()\n    #     position = []\n    #     for ele in lst:\n    #         position.append(int(ele))\n    #     print(position)\n    #\n    #     print(\"Lines: \" + str(len(lines)) + \", \" + str(position))\n    #\n    #     for i in range(len(lines)):\n    #         print(lines[i].split())\n    #\n    #     # print(lines)\n    #\n    #     print(\"Lines: \" + str(len(lines)) + \", \" + str(position))\n    #\n    #     # for line in lines:\n    #     #     print(line.split())\n    #\n    #     print(\"Lines: \" + str(len(lines)) + \", \" + str(position))\n    #     # print(line.split())\n    #\n    #     print(\"Lines: \" + str(len(lines)) + \", \" + str(position))\n    #     print(\"Lines: \" + str(len(lines)) + \", \" + str(position",
        "generated_testcode": "assert num_position('') == 0\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    return set(t)\n\n",
        "generated_testcode": "assert tuple_to_set(('a', 'b', 'c')) == {'a', 'b', 'c'}\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    #initialize an empty list\n    list = []\n    #iterate over the string to create a list\n    for i in a:\n        #if there is a string that contains the element\n        if i in s:\n            #append the element to the list\n            list.append(i)\n    #sort the list of element\n    list.sort()\n    print(list)\n    #return the most common element\n    return list[-1]\n\n",
        "generated_testcode": "assert most_common_elem(s,a) == {'a': 1, 'b': 1, 'c': 1, 'd': 1, 'e': 1, 'f': 1, 'g': 1, 'h': 1, 'i': 1, 'j': 1, 'k': 1, 'l': 1,'m': 1, 'n': 1, 'o': 1, 'p': 1, 'q': 1, 'r': 1,'s': ",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return len(min(list1))\n\n",
        "generated_testcode": "assert len_log(['a', 'b', 'c', 'd']) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return tup1[index]\n\n",
        "generated_testcode": "assert get_item(('a','b'),0) == 'a'\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    digits = 0\n    for i in tup:\n        digits += len(str(i))\n    return digits\n\n",
        "generated_testcode": "assert count_digs(('1', '2', '3')) == 3, \"Expected 3, got: {}\".format(count_digs(('1', '2', '3')))\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    zodiac_sign ='sign'\n    if year == 2000:\n        zodiac_sign = '\u661f\u671f\u4e09'\n    elif year == 2001:\n        zodiac_sign = '\u661f\u671f\u56db'\n    elif year == 2002:\n        zodiac_sign = '\u661f\u671f\u4e94'\n    elif year == 2003:\n        zodiac_sign = '\u661f\u671f\u516d'\n    elif year == 2004:\n        zodiac_sign = '\u661f\u671f\u4e03'\n    elif year == 2005:\n        zodiac_sign = '\u661f\u671f\u516b'\n    elif year == 2006:\n        zodiac_sign = '\u661f\u671f\u4e5d'\n    elif year == 2007:\n        zodiac_sign = '\u661f\u671f\u5341'\n    elif year == 2008:\n        zodiac_sign = '\u661f\u671f\u5341\u4e00'\n    elif year == 2009:\n        zodiac_sign = '\u661f\u671f\u5341\u4e8c'\n    elif year == 2010:\n        zodiac_sign = '\u661f\u671f\u5341\u4e09'\n    elif year == 2011:\n        zodiac_sign = '\u661f\u671f\u5341\u56db'\n    elif year == 2012:\n        zodiac_sign = '\u661f\u671f\u5341\u4e94'\n    elif year == 2013:\n        zodiac_sign = '\u661f\u671f\u5341\u516d'\n    elif year == 2014:\n        zodiac_",
        "generated_testcode": "assert chinese_zodiac(2000) == 'Aries', 'Function chinese_zodiac(2000) should return \"Aries\" for the given year 2000'\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    test_list3 = []\n    for i in test_list2:\n        if i not in test_list1:\n            test_list3.append(i)\n    test_list1.sort()\n    test_list3.sort()\n    return test_list3\n\n",
        "generated_testcode": "assert max_similar_indices(['a', 'b', 'c'], ['a', 'b', 'c', 'd']) == 'a'\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    assert 1 <= n <= r <= p\n    if p == 1: \n        return n\n    if n == 1: \n        return r\n    return nCr_mod_p(n - 1, r, p // 2) + pCr_mod_p(n - 1, r, p // 2)\n\n",
        "generated_testcode": "assert nCr_mod_p(1, 1, 1) == 1\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Write your code here.\n    # Store last answer in answer variable\n    answer = [0] * n \n\n",
        "generated_testcode": "assert subset(ar, n) == 1\n\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    print(sale_amount)\n    print(actual_cost)\n    print(profit_amount(actual_cost,sale_amount))\n\n",
        "generated_testcode": "assert profit_amount(100,50) == 50\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "350M",
        "pass": 3,
        "correct": true,
        "answer": "    if n <= 2:\n        return True\n\n",
        "generated_testcode": "assert is_abundant(1) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    result = re.findall('[A-Z]', text)\n    return result\n\n",
        "generated_testcode": "assert split_list(text) == ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    a=bin(n)\n    firstSetBit=[]\n    for i in range(0,len(a)):\n        if a[i]=='1':\n            firstSetBit.append(i)\n    print(firstSetBit)\n    firstSetBit_index=firstSetBit[len(firstSetBit)-1]\n    print(\"Position of set bit in first set bit index is {}\".format(firstSetBit_index))\n    return firstSetBit_index\n\n",
        "generated_testcode": "assert get_First_Set_Bit_Pos(0) == 0\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Create an empty dictionary\n    roman = {\"I\": 1, \"V\": 5, \"X\": 10, \"L\": 50, \"C\": 100,\n             \"D\": 500, \"M\": 1000, \"IV\": 4, \"IX\": 9, \"VX\": 5,\n             \"XL\": 10, \"XC\": 90, \"CD\": 400, \"CM\": 900 }\n    \n    result = \"\"\n    \n    # Convert each number into a string and add the first letter in that number to the end\n    for i in range(num):\n        if i == 0:\n            result += roman[num]\n        else:\n            result += roman[num - i] + roman[i]\n    \n    return result\n    \n\n",
        "generated_testcode": "assert int_to_roman(1) == 'I'\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    s = 0 \n    for i in lst: \n        s = s + i \n    return s/len(lst) \n\n",
        "generated_testcode": "assert Average(['a', 'b', 'c', 'd']) == 'd'\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "350M",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 2\n    else:\n        return 3\n\n",
        "generated_testcode": "assert get_noOfways(3) == 2\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    \n    d = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000\n    }\n    l = len(s)\n    ans = 0\n    for i in range(l - 1):\n        if d.get(s[i]):\n            ans += d.get(s[i])\n            if i + 1 < l:\n                if d.get(s[i + 1]):\n                    ans -= d.get(s[i + 1])\n    return ans\n\n",
        "generated_testcode": "assert roman_to_int(1) == 1\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i\n    return sum\n\n",
        "generated_testcode": "assert sum_Natural(1) == 1\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    s = (x-y)*(z-x)\n    return s\ndef find_roots(a,b,c,d,e,f,g,h,i):\n    x = (-b+math.sqrt(b*b-4*a*c))/(2*a)\n    y = (-b-math.sqrt(b*b-4*a*c))/(2*a)\n    z = (-b+math.sqrt(b*b-4*a*c))/(2*a)\n    return (x,y,z)\ndef Newton_Root_Method(x,y,z):\n    x_m = (x+z)/2\n    y_m = (y+z)/2\n    z_m = (x+y)/2\n    delta_m = (y_m - x_m)\n    return (x_m, y_m, z_m, delta_m)\ndef main():\n    a = -1\n    b = 1\n    c = 0\n    d = 0\n    e = 0\n    f = 0\n    g = 0\n    h = 0\n    i = 0\n    x_0 = input(\"Enter the x value: \")\n    y_0 = input(\"Enter the y value: \")\n    z_0 = input(\"Enter the z value: \")\n    x = float(x_0)\n    y = float(y_0)\n    z = float(z_0)\n    y_1 = input",
        "generated_testcode": "assert discriminant_value(1,2,3) == -1\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    if len(s) % 2 == 0:\n        return True\n    else:\n        return False\nprint(word_len(\"Hello world\"))\n# Output\n# True\n# True\n# False\n\n",
        "generated_testcode": "assert word_len(s) == \"Even\"\n\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    snake_words = []\n    words = text.split()\n    for word in words:\n        snake_word = ''\n        for letter in word:\n            if letter.isalpha():\n                snake_word += letter.upper()\n        snake_words.append(snake_word)\n    return''.join(snake_words)\n\n",
        "generated_testcode": "assert camel_to_snake('') == ''\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    L = []\n    for el in tuple1:\n        if el!='':\n            L.append(el)\n    return tuple(L)\n    \n    #Add empty tuple to list\n    \n",
        "generated_testcode": "assert remove_empty(()) == ()\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    vowels = 'aAiIoOu'\n    check = 0\n    for i in string:\n        if i in vowels:\n            check += 1\n    return check\n\n",
        "generated_testcode": "assert check(string) == \"a\", \"The function should return 'a'\"\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # A: array of values\n    # B: upper bound for the given function\n    # N: number of iterations\n    \n    \"\"\"\n    The idea is to find the maximum possible value for the given periodic function.\n    Note the need for the '-', '+' and '*' signs.\n    Note the starting index is zero.\n    \"\"\"\n    \n    # Convert to integer\n    A = int(A)\n    B = int(B)\n    N = int(N)\n    \n    # Find the starting index\n    A_list = list(A)\n    for i in range(0,N):\n        if A_list[i] < B:\n            A_list[i] = A_list[i] - 1\n        else:\n            A_list[i] = B + 1\n            break\n    \n    # Return the answer\n    return A_list[N-1]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ",
        "generated_testcode": "assert floor_Max(1,2,3) == 3\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    list_to_join = []\n    for i in test_list:\n        if i[0] in list_to_join:\n            continue\n        list_to_join.append(i)\n    return list_to_join\n\n",
        "generated_testcode": "assert join_tuples(['a', 'b', 'c']) == 'a b c'\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "350M",
        "pass": 1,
        "correct": true,
        "answer": "    return min(x, y)\n\n",
        "generated_testcode": "assert min_of_two(1,2) == 1\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    # Use of collections.deque\n    nums = collections.deque()\n    nums.append((a, 0))\n    nums.append((b, 0))\n    nums.append((c, 0))\n\n",
        "generated_testcode": "assert maximum_segments(1, 1, 1, 1) == 1\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "350M",
        "pass": 2,
        "correct": true,
        "answer": "    return test_tup1 + test_tup2\n\n",
        "generated_testcode": "assert concatenate_nested(('a', 'b'), ('c', 'd')) == ('a', 'b', 'c', 'd')\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    return s[d:] + s[:d]\n\n",
        "generated_testcode": "assert left_rotate(s=\"abcde\",d=3) == \"cdeab\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "350M",
        "pass": 5,
        "correct": false,
        "answer": "    mini = 0\n    for i in range(len(A)):\n        mini += min(A[i])\n        \n    return mini\n\n",
        "generated_testcode": "assert min_sum_path( [[1,2,3],[5,6,7],[8,9,10]]) == 12\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]