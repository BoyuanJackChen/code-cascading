[
    {
        "number": 1,
        "prompt": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].\ndef min_cost(cost, m, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # If we are already at destination, then nothing \n    # further we can't go any further \n    if m == n == 0: \n        return 0\n    \n    # If we are at position m,n or if cost[m][n] > 0, then nothing further can be done \n    if (m == n == 0) or (cost[m][n] > 0): \n        return cost[m][n] \n\n",
        "generated_testcode": "assert min_cost([[1, 2, 3], \n                 [4, 8, 2], \n                 [1, 5, 3]], 1, 2) == 5\n",
        "test": "assert min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2) == 8\nassert min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2) == 12\nassert min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2) == 16",
        "canonical_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]"
    },
    {
        "number": 2,
        "prompt": "Write a function to find the similar elements from the given two tuple lists.\ndef similar_elements(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  for i in test_tup1:\n    for j in test_tup2:\n      if i == j:\n        print(i)\n\n",
        "generated_testcode": "assert similar_elements((1, 2, 3), (1, 2, 3)) == True\n",
        "test": "assert similar_elements((3, 4, 5, 6),(5, 7, 4, 10)) == (4, 5)\nassert similar_elements((1, 2, 3, 4),(5, 4, 3, 7)) == (3, 4)\nassert similar_elements((11, 12, 14, 13),(17, 15, 14, 13)) == (13, 14)",
        "canonical_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 3,
        "prompt": "Write a python function to identify non-prime numbers.\ndef is_not_prime(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n==1:\n        return False\n    if n==2:\n        return True\n    if n%2==0:\n        return False\n    i=3\n    while i<n:\n        if n%i==0:\n            return False\n        i+=2\n    return True\n\n",
        "generated_testcode": "assert is_not_prime(2) == True\n",
        "test": "assert is_not_prime(2) == False\nassert is_not_prime(10) == True\nassert is_not_prime(35) == True",
        "canonical_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result"
    },
    {
        "number": 4,
        "prompt": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_largest(nums,n):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    from heapq import heappush, heappop\n    max_heap = []\n    for num in nums:\n        heappush(max_heap, -num)\n    largest = -max_heap[0]\n    for i in range(1,n):\n        if -max_heap[0] < max_heap[i]:\n            largest = max_heap[i]\n            heappop(max_heap)\n            heappush(max_heap, -largest)\n    return largest\n\n",
        "generated_testcode": "assert heap_queue_largest([1,2,3,4,5],5) == 5\n",
        "test": "assert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],3)==[85, 75, 65] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],2)==[85, 75] \nassert heap_queue_largest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[85, 75, 65, 58, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums"
    },
    {
        "number": 5,
        "prompt": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.\ndef count_ways(n): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    x = (n - 1) * (n) \n    y = n * (n + 1) / 2\n    if x == y:\n        return 2\n    return int(x / y)\n\n",
        "generated_testcode": "assert count_ways(3) == 2\n",
        "test": "assert count_ways(2) == 3\nassert count_ways(8) == 153\nassert count_ways(12) == 2131",
        "canonical_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] "
    },
    {
        "number": 6,
        "prompt": "Write a python function to check whether the two numbers differ at one bit position only or not.\ndef is_Power_Of_Two (x): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return (x & (x - 1)) == 0 \n\n",
        "generated_testcode": "assert is_Power_Of_Two(1) == False\n",
        "test": "assert differ_At_One_Bit_Pos(13,9) == True\nassert differ_At_One_Bit_Pos(15,8) == False\nassert differ_At_One_Bit_Pos(2,4) == False",
        "canonical_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)"
    },
    {
        "number": 7,
        "prompt": "Write a function to find all words which are at least 4 characters long in a string by using regex.\ndef find_char_long(text):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    pattern = r'\\w{4,}'\n    regex = re.compile(pattern)\n    find = regex.findall(text)\n    return find\n\n",
        "generated_testcode": "assert find_char_long(\"\") == []\n",
        "test": "assert find_char_long('Please move back to stream') == ['Please', 'move', 'back', 'stream']\nassert find_char_long('Jing Eco and Tech') == ['Jing', 'Tech']\nassert find_char_long('Jhingai wulu road Zone 3') == ['Jhingai', 'wulu', 'road', 'Zone']",
        "canonical_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))"
    },
    {
        "number": 8,
        "prompt": "Write a function to find squares of individual elements in a list using lambda function.\ndef square_nums(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(map(lambda x: x**2, nums))\n\n",
        "generated_testcode": "assert square_nums([1, 2, 3, 4, 5]) == [1, 4, 9, 16, 25]\n",
        "test": "assert square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert square_nums([10,20,30])==([100,400,900])\nassert square_nums([12,15])==([144,225])",
        "canonical_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums"
    },
    {
        "number": 9,
        "prompt": "Write a python function to find the minimum number of rotations required to get the same string.\ndef find_Rotations(str): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    n = len(str)\n    a = [0] * n\n    a[0] = 1\n    for i in range(1, n): \n        a[i] = 1\n        for j in range(i): \n            if str[j]!= str[i]: \n                a[i] = max(a[i], a[j] + 1)\n    return a[n-1]\n\n",
        "generated_testcode": "assert find_Rotations(\"abc\") == 3\n",
        "test": "assert find_Rotations(\"aaaa\") == 1\nassert find_Rotations(\"ab\") == 2\nassert find_Rotations(\"abc\") == 3",
        "canonical_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n "
    },
    {
        "number": 10,
        "prompt": "Write a function to get the n smallest items from a dataset.\ndef small_nnum(list1,n):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    new_list=[]\n    for i in range(len(list1)):\n        if i<n:\n            new_list.append(list1[i])\n    return new_list\n\n",
        "generated_testcode": "assert small_nnum([1,2,3,4,5],2) == [1,2]\n",
        "test": "assert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[10,20]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[10,20,20,40,50]\nassert small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[10,20,20]",
        "canonical_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest"
    },
    {
        "number": 11,
        "prompt": "Write a python function to remove first and last occurrence of a given character from the string.\ndef remove_Occ(s,ch): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n    # The first occurrence of ch  \n    # is at  \n    # index 0  \n    i = 0\n    \n    # The last occurrence of ch  \n    # is at  \n    # index  \n    j = len(s)-1\n    \n    # Remove the first occurrence of  \n    # the ch in the given string.  \n    while i < j and s[i]!= ch: \n        i += 1\n  \n    # Remove the last occurrence of the  \n    # ch in the given string.  \n    while i < j and s[j]!= ch: \n        j -= 1\n  \n    # If the first occurrence is found,  \n    # remove it  \n    if i < j: \n        s = s[:i] + s[j+1:]\n  \n    return s\n\n",
        "generated_testcode": "assert remove_Occ(\"hello\", \"l\") == \"hello\", \"Should return hello\"\n",
        "test": "assert remove_Occ(\"hello\",\"l\") == \"heo\"\nassert remove_Occ(\"abcda\",\"a\") == \"bcd\"\nassert remove_Occ(\"PHP\",\"P\") == \"H\"",
        "canonical_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s "
    },
    {
        "number": 12,
        "prompt": "Write a function to sort a given matrix in ascending order according to the sum of its rows.\ndef sort_matrix(M):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # write your code here\n    # sort the rows\n    rows = sorted(range(len(M)), key=lambda x: sum(M[x]))\n    \n    # sort the columns\n    cols = sorted(range(len(M[0])), key=lambda x: sum([row[x] for row in M]))\n    \n    # zip rows with cols\n    M = [[M[i][j] for j in cols] for i in rows]\n    \n    return M\n\n",
        "generated_testcode": "assert sort_matrix(matrix) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n",
        "test": "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]\nassert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]\nassert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]",
        "canonical_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result"
    },
    {
        "number": 13,
        "prompt": "Write a function to count the most common words in a dictionary.\ndef count_common(words):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for word in words:\n        count += 1\n    return count\n\n",
        "generated_testcode": "assert count_common({\"hello\": 1, \"world\": 1, \"hello\": 2}) == {\"hello\": 2, \"world\": 1}\n",
        "test": "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]\nassert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]\nassert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]",
        "canonical_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n"
    },
    {
        "number": 14,
        "prompt": "Write a python function to find the volume of a triangular prism.\ndef find_Volume(l,b,h) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    #inputing the lengths of the sides \n    l = int(input(\"Enter the length of the sides : \")) \n    b = int(input(\"Enter the breadth of the sides : \")) \n    h = int(input(\"Enter the height of the sides : \")) \n    #calculating the volume of the triangle \n    V = 1/3 * l * b * h \n    print(\"The Volume of the triangle is = \", V) \n#pass the length and breadth to the function and find the volume \nfind_Volume(10,20,30) \n\n",
        "generated_testcode": "assert find_Volume(2,3,4) == 12\n",
        "test": "assert find_Volume(10,8,6) == 240\nassert find_Volume(3,2,2) == 6\nassert find_Volume(1,2,1) == 1",
        "canonical_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) "
    },
    {
        "number": 15,
        "prompt": "Write a function to split a string at lowercase letters.\ndef split_lowerstring(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # split the string at the lowercase letters and return the result\n    # in a list.\n    # e.g. split_lowerstring(\"abcdABCD\") should return [\"abcd\", \"ABCD\"]\n    # e.g. split_lowerstring(\"abcdAbcd\") should return [\"abcd\", \"abcd\"]\n    \n    #code\ndef split_lowerstring(text):\n    return text.split()\n\n",
        "generated_testcode": "assert split_lowerstring(\"This is a string\") == [\"This\", \"is\", \"a\", \"string\"]\n",
        "test": "assert split_lowerstring(\"AbCd\")==['bC','d']\nassert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']\nassert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']",
        "canonical_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))"
    },
    {
        "number": 16,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore.\ndef text_lowercase_underscore(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # your code here\n    return '_'.join(text.lower())\n\n",
        "generated_testcode": "assert text_lowercase_underscore('abc') == 'abc_', 'Should return abc_'\n",
        "test": "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')\nassert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')\nassert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 17,
        "prompt": "Write a function to find the perimeter of a square.\ndef square_perimeter(a):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    return 2*a\n    \n# Output: 5\n\n",
        "generated_testcode": "assert square_perimeter(3) == 6\n",
        "test": "assert square_perimeter(10)==40\nassert square_perimeter(5)==20\nassert square_perimeter(4)==16",
        "canonical_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 18,
        "prompt": "Write a function to remove characters from the first string which are present in the second string.\ndef str_to_list(string): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tlist_ = [] \n\tfor char in string: \n\t\tlist_.append(char) \n\treturn list_\n\n",
        "generated_testcode": "assert str_to_list(\"abc\", \"abc\") == \"\", \"Should return an empty string\"\n",
        "test": "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'\nassert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'\nassert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' ",
        "canonical_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) "
    },
    {
        "number": 19,
        "prompt": "Write a function to find whether a given array of integers contains any duplicate element.\ndef test_duplicate(arraynums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(arraynums) == 0:\n        return False\n    for i in range(0,len(arraynums)):\n        for j in range(0,len(arraynums)):\n            if arraynums[i] == arraynums[j] and i!=j:\n                return True\n    return False\n\n",
        "generated_testcode": "assert test_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\n",
        "test": "assert test_duplicate(([1,2,3,4,5]))==False\nassert test_duplicate(([1,2,3,4, 4]))==True\nassert test_duplicate([1,1,2,2,3,3,4,4,5])==True",
        "canonical_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     "
    },
    {
        "number": 20,
        "prompt": "Write a function to check if the given number is woodball or not.\ndef is_woodall(x): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if ((x == 7) or (x == 8) or (x == 9) or (x == 10) or (x == 11) or (x == 12) or (x == 13) or (x == 14)\n       or (x == 15) or (x == 16) or (x == 17) or (x == 18) or (x == 19) or (x == 20)):\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert is_woodall(1) == True\n",
        "test": "assert is_woodall(383) == True\nassert is_woodall(254) == False\nassert is_woodall(200) == False",
        "canonical_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 21,
        "prompt": "Write a function to find m number of multiples of n.\ndef multiples_of_num(m,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return (m*(n-1))+1\n\n",
        "generated_testcode": "assert multiples_of_num(3,5) == 15\n",
        "test": "assert multiples_of_num(4,3)== [3,6,9,12]\nassert multiples_of_num(2,5)== [5,10]\nassert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]",
        "canonical_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)"
    },
    {
        "number": 22,
        "prompt": "Write a function to find the first duplicate element in a given array of integers.\ndef find_first_duplicate(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Loop over array\n    for num in nums:\n        if nums[abs(num) - 1] < 0:\n            return abs(num)\n        else:\n            nums[abs(num) - 1] *= -1\n    return -1\n\n",
        "generated_testcode": "assert find_first_duplicate([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 8\n",
        "test": "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4\nassert find_first_duplicate([1, 2, 3, 4])==-1\nassert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1",
        "canonical_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate"
    },
    {
        "number": 23,
        "prompt": "Write a python function to find the maximum sum of elements of list in a list of lists.\ndef maximum_Sum(list1): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    max
        "generated_testcode": "assert maximum_Sum([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 30\n",
        "test": "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33\nassert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6\nassert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19",
        "canonical_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi "
    },
    {
        "number": 24,
        "prompt": "Write a function to convert the given binary number to its decimal equivalent.\ndef binary_to_decimal(binary): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    decimal, i = 0, 0\n    while (binary!= 0):\n        dec = binary % 10\n        decimal = decimal + dec * pow(2, i)\n        binary = binary // 10\n        i += 1\n    return decimal\n\n",
        "generated_testcode": "assert binary_to_decimal(0) == 0\n",
        "test": "assert binary_to_decimal(100) == 4\nassert binary_to_decimal(1011) == 11\nassert binary_to_decimal(1101101) == 109",
        "canonical_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)"
    },
    {
        "number": 25,
        "prompt": "Write a python function to find the product of non-repeated elements in a given array.\ndef find_Product(arr,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    res = 1\n    for i in range(n): \n        res *= arr[i] \n    return res\narr = [1, 2, 3, 4, 6, 6, 6, 7, 8] \nn = len(arr) \nprint(find_Product(arr,n)) \n\n",
        "generated_testcode": "assert find_Product([1,2,3,4,5,6,7,8,9,10],10) == 120\n",
        "test": "assert find_Product([1,1,2,3],4) == 6\nassert find_Product([1,2,3,1,1],5) == 6\nassert find_Product([1,1,4,5,6],5) == 120",
        "canonical_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; "
    },
    {
        "number": 26,
        "prompt": "Write a function to check if the given tuple list has all k elements.\ndef check_k_elements(test_list, K):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    for x in test_list:\n        if len(x)!= K:\n            return False\n    return True\n\n",
        "generated_testcode": "assert check_k_elements([(1, 2), (3, 4), (5, 6)], 2) == True\n",
        "test": "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True\nassert check_k_elements([(7, 7, 7), (7, 7)], 7) == True\nassert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False",
        "canonical_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) "
    },
    {
        "number": 27,
        "prompt": "Write a python function to remove all digits from a list of strings.\ndef remove(list): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    new_list = []\n    for i in list: \n        new_list.append(i.strip())\n    return new_list\n\n",
        "generated_testcode": "assert remove([\"1\", \"2\", \"3\"]) == [\"1\", \"2\", \"3\"]\n",
        "test": "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']\nassert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']\nassert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']",
        "canonical_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list"
    },
    {
        "number": 28,
        "prompt": "Write a python function to find binomial co-efficient.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  if (k > n): \n    return 0\n  if (k== 0 or k == n): \n    return 1\n  return binomial_Coeff(n-1, k) + binomial_Coeff(n-1, k-1) \n  \nn = 5\nk = 4\n  \n# Driver Code \nif (n > k): \n    print(\"INVALID INPUT\") \nelse: \n    print(\"Binomial Coefficient\", binomial_Coeff(n, k))\n\n",
        "generated_testcode": "assert binomial_Coeff(5,3) == 5\n",
        "test": "assert binomial_Coeff(5,2) == 10\nassert binomial_Coeff(4,3) == 4\nassert binomial_Coeff(3,2) == 3",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) "
    },
    {
        "number": 29,
        "prompt": "Write a python function to find the element occurring odd number of times.\ndef get_Odd_Occurrence(arr,arr_size):   \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    odd_count = 0;\n    for i in range(arr_size):\n        if (arr[i] % 2!= 0):\n            odd_count += 1\n    \n    if (odd_count == 0):\n        return -1\n    \n    for i in range(arr_size):\n        if (arr[i] % 2!= 0):\n            arr[i] = -1\n    \n    for i in range(arr_size):\n        if (arr[i] == -1):\n            arr[i] = 1\n            \n    return arr\n\n",
        "generated_testcode": "assert get_Odd_Occurrence([1,2,3,4,5,6,7,8,9,10],10) == 9\n",
        "test": "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1\nassert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3\nassert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5",
        "canonical_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1"
    },
    {
        "number": 30,
        "prompt": "Write a python function to count all the substrings starting and ending with same characters.\ndef check_Equality(s): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0; \n    for i in range(len(s)): \n        for j in range(i + 1, len(s)): \n            if (s[i] == s[j]): \n                count = count + 1; \n    print(\"The number of substrings with same characters: \" + str(count)); \ns = \"abcd\"; \ncheck_Equality(s);\n\n",
        "generated_testcode": "assert check_Equality(\"abcd\") == True, \"Should be True\"\n",
        "test": "assert count_Substring_With_Equal_Ends(\"abc\") == 3\nassert count_Substring_With_Equal_Ends(\"abcda\") == 6\nassert count_Substring_With_Equal_Ends(\"ab\") == 2",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 31,
        "prompt": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.\ndef func(nums, k):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if k > len(nums):\n        return None\n    q = []\n    d = {}\n    for i in nums:\n        d[i] = d.get(i, 0) + 1\n    for i in range(k):\n        q.append(d[nums[i]])\n    for i in range(k, len(nums)):\n        if q[0] < d[nums[i]]:\n            q.pop(0)\n            q.append(d[nums[i]])\n    return q\n\n",
        "generated_testcode": "assert func([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == [1, 2, 3, 4, 5]\n",
        "test": "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]\nassert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]",
        "canonical_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result"
    },
    {
        "number": 32,
        "prompt": "Write a python function to find the largest prime factor of a given number.\ndef max_Prime_Factors (n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tmax_prime = 1\n\twhile n!= 1:\n\t\tfor x in range(2,n+1):\n\t\t\tif (n%x) == 0:\n\t\t\t\tif max_prime < x:\n\t\t\t\t\tmax_prime = x\n\t\t\t\tn = n//x\n\t\t\t\tbreak\n\treturn max_prime\n\t\n# take input from the user \nn = int(input(\"Enter a number: \"))\nprint(\"The largest prime factor of the given number is\", max_Prime_Factors(n))\n",
        "generated_testcode": "assert max_Prime_Factors(6) == 2\n",
        "test": "assert max_Prime_Factors(15) == 5\nassert max_Prime_Factors(6) == 3\nassert max_Prime_Factors(2) == 2",
        "canonical_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)"
    },
    {
        "number": 33,
        "prompt": "Write a python function to convert a decimal number to binary number.\ndef decimal_To_Binary(N): \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "\tresult = '' \n\tif N == 0: \n\t\treturn '0'\n\twhile (N > 0): \n\t\tresult = str(N % 2) + result \n\t\tN = N // 2\n\treturn result \nprint(decimal_To_Binary(1)) \nprint(decimal_To_Binary(2)) \nprint(decimal_To_Binary(3)) \nprint(decimal_To_Binary(4)) \nprint(decimal_To_Binary(5)) \nprint(decimal_To_Binary(6)) \nprint(decimal_To_Binary(7)) \nprint(decimal_To_Binary(8)) \nprint(decimal_To_Binary(9)) \nprint(decimal_To_Binary(10)) \n",
        "generated_testcode": "assert decimal_To_Binary(0) == '0'\n",
        "test": "assert decimal_To_Binary(10) == 1010\nassert decimal_To_Binary(1) == 1\nassert decimal_To_Binary(20) == 10100",
        "canonical_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  "
    },
    {
        "number": 34,
        "prompt": "Write a python function to find the missing number in a sorted array.\ndef find_missing(ar,N): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    n = len(ar) \n    if n == 0: \n        return -1\n    if n == 1: \n        return ar[0] \n    if n == 2: \n        if ar[0]!= ar[1]: \n            return ar[0] \n        return ar[1] \n    low = 0\n    high = n-1\n    mid = n//2\n    while low <= high: \n        if ar[mid]!= mid + 1: \n            if ar[mid] > mid + 1: \n                low = mid + 1\n            else: \n                high = mid - 1\n        else: \n            return mid \n        mid = (low+high)//2\n    return mid \nar = [0,1,3,4,6,9,10]\nn = len(ar) \nprint(find_missing(ar,n)) \n\n",
        "generated_testcode": "assert find_missing([1,2,3,4,5,6,7,8,9,10],10) == 5\n",
        "test": "assert find_missing([1,2,3,5],4) == 4\nassert find_missing([1,3,4,5],4) == 2\nassert find_missing([1,2,3,5,6,7],5) == 4",
        "canonical_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) "
    },
    {
        "number": 35,
        "prompt": "Write a function to find the n-th rectangular number.\ndef find_rect_num(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    x = 1\n    res = 1\n    while(x<=n):\n        res = res*x\n        x = x+1\n    return res\nprint(find_rect_num(5))\nprint(find_rect_num(10))\nprint(find_rect_num(15))\n\n",
        "generated_testcode": "assert find_rect_num(1) == 1\n",
        "test": "assert find_rect_num(4) == 20\nassert find_rect_num(5) == 30\nassert find_rect_num(6) == 42",
        "canonical_solution": "def find_rect_num(n):\r\n  return n*(n + 1) "
    },
    {
        "number": 36,
        "prompt": "Write a python function to find the nth digit in the proper fraction of two given numbers.\ndef find_Nth_Digit(p,q,N) :  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return ((p * q) - (p + q)) % 10**N\n\n",
        "generated_testcode": "assert find_Nth_Digit(1,2,1) == 1\n",
        "test": "assert find_Nth_Digit(1,2,1) == 5\nassert find_Nth_Digit(3,5,1) == 6\nassert find_Nth_Digit(5,6,5) == 3",
        "canonical_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  "
    },
    {
        "number": 37,
        "prompt": "Write a function to sort a given mixed list of integers and strings.\ndef sort_mixed_list(mixed_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(mixed_list)):\n        if isinstance(mixed_list[i], int):\n            mixed_list[i] = str(mixed_list[i])\n    return sorted(mixed_list)\n\n",
        "generated_testcode": "assert sort_mixed_list([1, 'a', 'c', 'b']) == ['a', 'b', 'c', 1], \"Should be ['a', 'b', 'c', 1]\"\n",
        "test": "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']\nassert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
        "canonical_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part"
    },
    {
        "number": 38,
        "prompt": "Write a function to find the division of first even and odd number of a given list.\ndef div_even_odd(list1):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    even = 0\n    odd = 0\n    for i in list1:\n        if i % 2 == 0:\n            even += 1\n        else:\n            odd += 1\n    return even, odd\n\n",
        "generated_testcode": "assert div_even_odd([1, 2, 3, 4, 5]) == (2, 3)\n",
        "test": "assert div_even_odd([1,3,5,7,4,1,6,8])==4\nassert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert div_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    },
    {
        "number": 39,
        "prompt": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.\ndef rearange_string(S):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    N = len(S)\n    if N <= 1: return True\n    for i in range(N):\n        for j in range(i+1,N):\n            if S[i]!= S[j]:\n                return True\n    return False\n\n",
        "generated_testcode": "assert rearange_string(\"aab\") == True\n",
        "test": "assert rearange_string(\"aab\")==('aba')\nassert rearange_string(\"aabb\")==('abab')\nassert rearange_string(\"abccdd\")==('cdabcd')",
        "canonical_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")"
    },
    {
        "number": 40,
        "prompt": "Write a function to find frequency of the elements in a given list of lists using collections module.\ndef freq_element(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  freq = {}\n  for i in nums:\n    for j in i:\n      if j in freq:\n        freq[j] += 1\n      else:\n        freq[j] = 1\n  return freq\n\n",
        "generated_testcode": "assert freq_element(nums) == {1: 2, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1}\n\n",
        "test": "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})\nassert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})\nassert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})",
        "canonical_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result"
    },
    {
        "number": 41,
        "prompt": "Write a function to filter even numbers using lambda function.\ndef filter_evennumbers(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x: x % 2 == 0,nums))\n\n",
        "generated_testcode": "assert filter_evennumbers([1,2,3,4,5,6,7,8,9]) == [2,4,6,8,10]\n",
        "test": "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]\nassert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]\nassert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]",
        "canonical_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums"
    },
    {
        "number": 42,
        "prompt": "Write a python function to find the sum of repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum_1 = 0\n    for i in range(0, n): \n        sum_1 += arr[i] \n    print(sum_1) \n  \n# Driver Code \narr = [1, 2, 3, 4, 4, 4] \nn = len(arr) \nfind_Sum(arr, n)\n",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9,10],10) == 45\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3\nassert find_Sum([1,2,3,1,1],5) == 3\nassert find_Sum([1,1,2],3) == 2",
        "canonical_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])"
    },
    {
        "number": 43,
        "prompt": "Write a function to find sequences of lowercase letters joined with an underscore using regex.\ndef text_match(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    #pattern = '([a-z]{1})([a-z]{1})'\n    #pattern = '([a-z])+'\n    pattern = '([a-z]{2,})'\n    match = re.findall(pattern, text)\n    return match\n\n",
        "generated_testcode": "assert text_match(\"abc\") == \"abc\", \"Should return abc\"\n",
        "test": "assert text_match(\"aab_cbbbc\") == 'Found a match!'\nassert text_match(\"aab_Abbbc\") == 'Not matched!'\nassert text_match(\"Aaab_abbbc\") == 'Not matched!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 44,
        "prompt": "Write a function that matches a word at the beginning of a string.\ndef text_match_string(text):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return text.startswith('hello')\n#\n# a = 'hello'\n# print(a, text_match_string(a))\n# # returns 'hello' True\n#\n# a = 'hello world'\n# print(a, text_match_string(a))\n# # returns 'hello' True\n#\n# a = 'heelooo'\n# print(a, text_match_string(a))\n# # returns False False\n#\n# a = 'hello'\n# print(a, text_match_string(a))\n# # returns 'hello' True\n#\n# a ='my world'\n# print(a, text_match_string(a))\n# # returns'my' True\n#\n# a ='my!'\n# print(a, text_match_string(a))\n# # returns'my' True\n#\n# a = '!'\n# print(a, text_match_string(a))\n# # returns '!' False\n#\n# a = ''\n# print(a, text_match_string(a))\n# # returns '!' False\n#\n# a = 'heeloo!'\n# print(a, text_match_string(a))\n# # returns 'heeloo' True\n#\n# a = 'hello'\n# print(a, text_match_string(a))\n# # returns 'hello' True\n#\n# a = 'hello world'\n# print(a, text_match_string(a))\n# # returns '",
        "generated_testcode": "assert text_match_string('hello') == True\n",
        "test": "assert text_match_string(\" python\")==('Not matched!')\nassert text_match_string(\"python\")==('Found a match!')\nassert text_match_string(\"  lang\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 45,
        "prompt": "Write a function to find the gcd of the given array elements.\ndef find_gcd(x, y): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    while(y): \n        x, y = y, x % y \n  \n    return x \n\n",
        "generated_testcode": "assert find_gcd(2, 4) == 2\n",
        "test": "assert get_gcd([2, 4, 6, 8, 16]) == 2\nassert get_gcd([1, 2, 3]) == 1\nassert get_gcd([2, 4, 6, 8]) == 2 ",
        "canonical_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd"
    },
    {
        "number": 46,
        "prompt": "Write a python function to determine whether all the numbers are different from each other are not.\ndef test_distinct(data):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(data) > 1\n\n",
        "generated_testcode": "assert test_distinct([1,2,3,4,5]) == True\n",
        "test": "assert test_distinct([1,5,7,9]) == True\nassert test_distinct([2,4,5,5,7,9]) == False\nassert test_distinct([1,2,3]) == True",
        "canonical_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;"
    },
    {
        "number": 47,
        "prompt": "Write a python function to find the last digit when factorial of a divides factorial of b.\ndef compute_Last_Digit(A,B): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    A=A-1\n    B=B-1\n    return (A%B)+1\n\n",
        "generated_testcode": "assert compute_Last_Digit(5,5) == 1\n",
        "test": "assert compute_Last_Digit(2,4) == 2\nassert compute_Last_Digit(6,8) == 6\nassert compute_Last_Digit(1,2) == 2",
        "canonical_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10"
    },
    {
        "number": 48,
        "prompt": "Write a python function to set all odd bits of a given number.\ndef odd_bit_set_number(n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    return ((n | (n - 1)) + 1)\n\n",
        "generated_testcode": "assert odd_bit_set_number(0) == 0\n",
        "test": "assert odd_bit_set_number(10) == 15\nassert odd_bit_set_number(20) == 21\nassert odd_bit_set_number(30) == 31",
        "canonical_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)"
    },
    {
        "number": 49,
        "prompt": "Write a function to extract every first or specified element from a given two-dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    first = []\n    # We need to move from the first position of the list to the last element of the list,\n    # in the end, we need to put the list back to the first position of the list\n    for i in range(N):\n        first.append(nums[i][0])\n    return first\n\n",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 1\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    "
    },
    {
        "number": 50,
        "prompt": "Write a function to find the list with minimum length using lambda function.\ndef min_length_list(input_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    l = len(input_list)\n    return min(input_list, key=lambda x: len(x))\n\n",
        "generated_testcode": "assert min_length_list([1,2,3,4,5]) == 1\n",
        "test": "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])\nassert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])",
        "canonical_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)"
    },
    {
        "number": 51,
        "prompt": "Write a function to print check if the triangle is equilateral or not.\ndef check_equilateral(x,y,z):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if (x==y) and (y==z) and (x==z):\n        return True\n    else:\n        return False\nprint(check_equilateral(1,2,3))\nprint(check_equilateral(2,2,2))\n\n",
        "generated_testcode": "assert check_equilateral(1,1,1) == True\n",
        "test": "assert check_equilateral(6,8,12)==False \nassert check_equilateral(6,6,12)==False\nassert check_equilateral(6,6,6)==True",
        "canonical_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 52,
        "prompt": "Write a function to caluclate area of a parallelogram.\ndef parallelogram_area(b,h):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return b*h\n\n",
        "generated_testcode": "assert parallelogram_area(3,4) == 6\n",
        "test": "assert parallelogram_area(10,20)==200\nassert parallelogram_area(15,20)==300\nassert parallelogram_area(8,9)==72",
        "canonical_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area"
    },
    {
        "number": 53,
        "prompt": "Write a python function to check whether the first and last characters of a given string are equal or not.\ndef check_Equality(str):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if str[0]==str[-1]:\n        print(\"True\")\n    else:\n        print(\"False\")\n\n",
        "generated_testcode": "assert check_Equality(\"abc\") == True, \"First character should be equal to second character\"\n",
        "test": "assert check_Equality(\"abcda\") == \"Equal\"\nassert check_Equality(\"ab\") == \"Not Equal\"\nassert check_Equality(\"mad\") == \"Not Equal\"",
        "canonical_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") "
    },
    {
        "number": 54,
        "prompt": "Write a function to sort the given array by using counting sort.\ndef counting_sort(my_list):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  max_count = max(my_list)\n  counts = [0] * (max_count + 1)\n  for item in my_list:\n    counts[item] += 1\n  j = 0\n  for i in range(max_count):\n    for k in range(counts[i]):\n      my_list[j] = i\n      j += 1\n  return my_list\n\n",
        "generated_testcode": "assert counting_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]\nassert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]\nassert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]",
        "canonical_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list"
    },
    {
        "number": 55,
        "prompt": "Write a function to find t-nth term of geometric series.\ndef tn_gp(a,n,r):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    if r==0:\n        return 1\n    else:\n        return a*tn_gp(a,n-1,r-1)\n\n",
        "generated_testcode": "assert tn_gp(2,3,1) == 2\n",
        "test": "assert tn_gp(1,5,2)==16\nassert tn_gp(1,5,4)==256\nassert tn_gp(2,6,3)==486",
        "canonical_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn"
    },
    {
        "number": 56,
        "prompt": "Write a python function to check if a given number is one less than twice its reverse.\ndef rev(num):    \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return int(str(num)[::-1])\nprint(rev(123))\n\n",
        "generated_testcode": "assert rev(1) == 1\n",
        "test": "assert check(70) == False\nassert check(23) == False\nassert check(73) == True",
        "canonical_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  "
    },
    {
        "number": 57,
        "prompt": "Write a python function to find the largest number that can be formed with the given digits.\ndef find_Max_Num(arr,n) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n    max_val = -999999999\n  \n    # If we don't find a bigger number, return -1 \n    if (arr[n-1] > max_val) : \n        return -1\n  \n    # This would be the index for the next element \n    index = n - 1\n  \n    # Since we start from the left, we need to loop to the right to get the maximum \n    for i in range(n-1, 0, -1) : \n        if arr[i] > arr[index] : \n            index = i \n  \n    # We need to return arr[index] since it would be the largest number that can be formed \n    # by choosing the next element from the remaining array \n    return arr[index] \n  \n# Driver code \narr = [ 2, 5, 3, 4 ] \nn = len(arr) \nprint (\"The maximum number is \" + str(find_Max_Num(arr, n))) \n  \n# This code is contributed by Saket Modi \n",
        "generated_testcode": "assert find_Max_Num([1,2,3,4,5],5) == 15\n",
        "test": "assert find_Max_Num([1,2,3],3) == 321\nassert find_Max_Num([4,5,6,1],4) == 6541\nassert find_Max_Num([1,2,3,9],4) == 9321",
        "canonical_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num "
    },
    {
        "number": 58,
        "prompt": "Write a python function to check whether the given two integers have opposite sign or not.\ndef opposite_Signs(x,y): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return x*y <0 and y*x < 0\n  \n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\n",
        "generated_testcode": "assert opposite_Signs(1, -1) == True\n",
        "test": "assert opposite_Signs(1,-2) == True\nassert opposite_Signs(3,2) == False\nassert opposite_Signs(-10,-10) == False",
        "canonical_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); "
    },
    {
        "number": 59,
        "prompt": "Write a function to find the nth octagonal number.\ndef is_octagonal(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return n*(3*n - 1)/2\n\n",
        "generated_testcode": "assert is_octagonal(1) == 1\n",
        "test": "assert is_octagonal(5) == 65\nassert is_octagonal(10) == 280\nassert is_octagonal(15) == 645",
        "canonical_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n "
    },
    {
        "number": 60,
        "prompt": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.\ndef max_len_sub( arr, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # code here \n    max_len = 1\n    curr_len = 1\n    for i in range(1, n): \n        if arr[i] - arr[i-1] > 0: \n            curr_len += 1\n        else: \n            curr_len = 1\n        if curr_len > max_len: \n            max_len = curr_len \n    return max_len \n  \n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\n",
        "generated_testcode": "assert max_len_sub([1, 2, 3, 4, 5], 5) == 3\n",
        "test": "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5\nassert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4\nassert max_len_sub([9, 11, 13, 15, 18], 5) == 1",
        "canonical_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max"
    },
    {
        "number": 61,
        "prompt": "Write a python function to count number of substrings with the sum of digits equal to their length.\ndef count_Substrings(s,n):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "\tcount = 0\n\tfor i in range(len(s)):\n\t\t# print(i,s[i])\n\t\ttemp_count = 1\n\t\ttemp_sum = 0\n\t\tfor j in range(i,len(s)):\n\t\t\t# print(j,s[j])\n\t\t\tif s[j]==s[i]:\n\t\t\t\ttemp_sum += int(s[j])\n\t\t\tif j-i+1==temp_sum:\n\t\t\t\tcount += 1\n\t\t\t\ttemp_count += 1\n\t\t\telse:\n\t\t\t\tbreak\n\treturn count\n\n",
        "generated_testcode": "assert count_Substrings(\"123456789\",9) == 1\n",
        "test": "assert count_Substrings('112112',6) == 6\nassert count_Substrings('111',3) == 6\nassert count_Substrings('1101112',7) == 12",
        "canonical_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count"
    },
    {
        "number": 62,
        "prompt": "Write a python function to find smallest number in a list.\ndef smallest_num(xs):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    smallest_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest_num:\n            smallest_num = xs[i]\n    return smallest_num\n\n",
        "generated_testcode": "assert smallest_num([1, 2, 3, 4, 5]) == 1\n",
        "test": "assert smallest_num([10, 20, 1, 45, 99]) == 1\nassert smallest_num([1, 2, 3]) == 1\nassert smallest_num([45, 46, 50, 60]) == 45",
        "canonical_solution": "def smallest_num(xs):\n  return min(xs)\n"
    },
    {
        "number": 63,
        "prompt": "Write a function to find the maximum difference between available pairs in the given tuple list.\ndef max_difference(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    temp = []\n    for i in range(0,len(test_list)):\n        for j in range(i+1, len(test_list)):\n            temp.append(test_list[i] - test_list[j])\n    return max(temp)\n\n",
        "generated_testcode": "assert max_difference([(1, 2), (3, 4), (5, 6)]) == 3\n",
        "test": "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7\nassert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15\nassert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23",
        "canonical_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) "
    },
    {
        "number": 64,
        "prompt": "Write a function to sort a list of tuples using lambda.\ndef subject_marks(subjectmarks):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    for i in range(len(subjectmarks)):\n        for j in range(i+1,len(subjectmarks)):\n            if(subjectmarks[i][1]>subjectmarks[j][1]):\n                temp=subjectmarks[i]\n                subjectmarks[i]=subjectmarks[j]\n                subjectmarks[j]=temp\n    return subjectmarks\n\n",
        "generated_testcode": "assert subject_marks([(1,2),(3,4),(5,6)]) == [(1,2),(3,4),(5,6)]\n",
        "test": "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]\nassert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])\nassert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])",
        "canonical_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks"
    },
    {
        "number": 65,
        "prompt": "Write a function of recursion list sum.\ndef recursive_list_sum(data_list):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(data_list) == 1:\n        return data_list[0]\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n\n",
        "generated_testcode": "assert recursive_list_sum([1,2,3,4,5]) == 15\n",
        "test": "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21\nassert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106\nassert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210",
        "canonical_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total"
    },
    {
        "number": 66,
        "prompt": "Write a python function to count positive numbers in a list.\ndef pos_count(list):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "\tcount = 0\n\tfor i in range(0, len(list)):\n\t\tif list[i]>0:\n\t\t\tcount += 1\n\treturn count\n\n",
        "generated_testcode": "assert pos_count([1,2,3,4,5,6,7,8,9,10]) == 10, \"Should be 10\"\n",
        "test": "assert pos_count([1,-2,3,-4]) == 2\nassert pos_count([3,4,5,-1]) == 3\nassert pos_count([1,2,3,4]) == 4",
        "canonical_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count "
    },
    {
        "number": 67,
        "prompt": "Write a function to find the number of ways to partition a set of bell numbers.\ndef bell_number(n):   \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 1:\n        return 1\n    \n    return bell_number(n-1) + bell_number(n-2)\n\n",
        "generated_testcode": "assert bell_number(1) == 1\n",
        "test": "assert bell_number(2)==2\nassert bell_number(10)==115975\nassert bell_number(56)==6775685320645824322581483068371419745979053216268760300",
        "canonical_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] "
    },
    {
        "number": 68,
        "prompt": "Write a python function to check whether the given array is monotonic or not.\ndef is_Monotonic(A): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    \n    # A is empty\n    if len(A)==0:\n        return True\n    \n    # A is not empty, check if it is sorted.\n    if len(A)>1 and A[0]<=A[-1]:\n        # check if all subarrays are sorted.\n        for i in range(len(A)-1):\n            if A[i]>=A[i+1]:\n                return False\n        \n        # if every subarray is sorted, check if A is monotonic.\n        return True\n    \n    # A is not sorted, check if it is monotonic.\n    return False\n\n",
        "generated_testcode": "assert is_Monotonic([1,2,3,4,5,6,7,8,9,10]) == True\n",
        "test": "assert is_Monotonic([6, 5, 4, 4]) == True\nassert is_Monotonic([1, 2, 2, 3]) == True\nassert is_Monotonic([1, 3, 2]) == False",
        "canonical_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) "
    },
    {
        "number": 69,
        "prompt": "Write a function to check whether a list contains the given sublist or not.\ndef is_sublist(l, s):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(s) > len(l):\n        return False\n    for i in range(len(l) - len(s) + 1):\n        if l[i: i + len(s)] == s:\n            return True\n    return False\n\n",
        "generated_testcode": "assert is_sublist([1, 2, 3], [1, 2]) == True\n",
        "test": "assert is_sublist([2,4,3,5,7],[3,7])==False\nassert is_sublist([2,4,3,5,7],[4,3])==True\nassert is_sublist([2,4,3,5,7],[1,6])==False",
        "canonical_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set"
    },
    {
        "number": 70,
        "prompt": "Write a function to find whether all the given tuples have equal length or not.\ndef find_equal_tuple(Input, k):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(Input) == 1:\n        if len(Input[0]) == k:\n            return True\n        else:\n            return False\n    else:\n        x = len(Input[0])\n        for i in range(len(Input)):\n            if x!= len(Input[i]):\n                return False\n        return True\n\n",
        "generated_testcode": "assert find_equal_tuple([(1, 2), (3, 4), (5, 6)], 2) == True\n",
        "test": "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'\nassert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'\nassert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'",
        "canonical_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")"
    },
    {
        "number": 71,
        "prompt": "Write a function to sort a list of elements using comb sort.\ndef comb_sort(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    gap = len(nums)\n    gap = int(gap/3)\n    while gap > 0:\n        for i in range(gap, len(nums)):\n            temp = nums[i]\n            j = i - gap\n            while j >= 0 and nums[j] > temp:\n                nums[j + gap] = nums[j]\n                j = j - gap\n            nums[j + gap] = temp\n        gap = int(gap/3)\n\n",
        "generated_testcode": "assert comb_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]\nassert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]\nassert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]",
        "canonical_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums"
    },
    {
        "number": 72,
        "prompt": "Write a python function to check whether the given number can be represented as difference of two squares or not.\ndef dif_Square(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return ((int)(n * (n + 1) / 2)) \n  \nn = int(input())\nif dif_Square(n) == n: \n    print(\"Yes\") \nelse: \n    print(\"No\")\n",
        "generated_testcode": "assert dif_Square(1) == True\n",
        "test": "assert dif_Square(5) == True\nassert dif_Square(10) == False\nassert dif_Square(15) == True",
        "canonical_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False"
    },
    {
        "number": 73,
        "prompt": "Write a function to split the given string with multiple delimiters by using regex.\ndef multiple_split(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = r'(<li>|</li>|<br>)';\n    return re.split(pattern, text)\n    # Use re.split() method if you want to use <li> or <br> as delimiters.\n    # Put them as single character then split with the pattern.\n    # Regex will split on the delimiters provided.\n\n",
        "generated_testcode": "assert multiple_split('') == []\n",
        "test": "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']\nassert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']\nassert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']",
        "canonical_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))"
    },
    {
        "number": 74,
        "prompt": "Write a function to check whether it follows the sequence given in the patterns array.\ndef is_samepatterns(colors, patterns):    \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    color_index = 0\n    pattern_index = 0\n    while pattern_index < len(patterns):\n        if colors[color_index]!= patterns[pattern_index]:\n            return False\n        color_index += 1\n        pattern_index += 1\n    return True\n\n",
        "generated_testcode": "assert is_samepatterns(['red', 'green', 'blue'], ['red', 'green', 'blue']) == True\n",
        "test": "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False \nassert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False ",
        "canonical_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True"
    },
    {
        "number": 75,
        "prompt": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.\ndef find_tuples(test_list, K):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result_list = []\n    for test_tuple in test_list:\n        result_list.append(tuple(filter(lambda x: x % K == 0, test_tuple)))\n    return result_list\n\n",
        "generated_testcode": "assert find_tuples([(1, 2), (3, 4), (5, 6)], 3) == [(1, 2), (3, 4)]\n",
        "test": "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'\nassert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'\nassert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'",
        "canonical_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 76,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for i in range(0,m):\n        for j in range(0,n):\n            if i == 0 or j == 0:\n                count += 1\n            else:\n                if i * i + j * j == m * n:\n                    count += 1\n    return count\nprint(\"The number of squares in a rectangle is: \" + str(count_Squares(2,3)))\n\n",
        "generated_testcode": "assert count_Squares(3,4) == 6\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(2,2) == 5\nassert count_Squares(1,1) == 1",
        "canonical_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))"
    },
    {
        "number": 77,
        "prompt": "Write a python function to find the difference between sum of even and odd digits.\ndef is_Diff(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum_of_even = 0\n    sum_of_odd = 0\n    while n: \n        sum_of_even += n % 10\n        n = n // 10\n    while n: \n        sum_of_odd += n % 10\n        n = n // 10\n    return sum_of_even - sum_of_odd\n\n",
        "generated_testcode": "assert is_Diff(12) == 2\n",
        "test": "assert is_Diff (12345) == False\nassert is_Diff(1212112) == True\nassert is_Diff(1212) == False",
        "canonical_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) "
    },
    {
        "number": 78,
        "prompt": "Write a python function to find number of integers with odd number of set bits.\ndef count_With_Odd_SetBits(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        n = n & (n-1) # remove all bits in n except last bit. \n        count += 1\n    return count \n\n",
        "generated_testcode": "assert count_With_Odd_SetBits(0) == 0\n",
        "test": "assert count_With_Odd_SetBits(5) == 3\nassert count_With_Odd_SetBits(10) == 5\nassert count_With_Odd_SetBits(15) == 8",
        "canonical_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans "
    },
    {
        "number": 79,
        "prompt": "Write a python function to check whether the length of the word is odd or not.\ndef word_len(s): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(s)%2!= 0\nprint(word_len('Hello'))\n\n",
        "generated_testcode": "assert word_len('hello') == True\n",
        "test": "assert word_len(\"Hadoop\") == False\nassert word_len(\"great\") == True\nassert word_len(\"structure\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 80,
        "prompt": "Write a function to find the nth tetrahedral number.\ndef tetrahedral_number(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n < 1: \n        return None\n    \n    if n == 1:\n        return 1\n\n",
        "generated_testcode": "assert tetrahedral_number(1) == 1\n",
        "test": "assert tetrahedral_number(5) == 35.0\nassert tetrahedral_number(6) == 56.0\nassert tetrahedral_number(7) == 84.0",
        "canonical_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6"
    },
    {
        "number": 81,
        "prompt": "Write a function to zip the two given tuples.\ndef zip_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    zipped = (tuple(zip(test_tup1, test_tup2)))\n    return zipped\n\n",
        "generated_testcode": "assert zip_tuples((1, 2), (3, 4)) == ((1, 3), (2, 4))\n",
        "test": "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]\nassert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]\nassert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]",
        "canonical_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) "
    },
    {
        "number": 82,
        "prompt": "Write a function to find the volume of a sphere.\ndef volume_sphere(r):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Parameters:\n    r (int): radius of the sphere.\n    \n    Returns:\n    int: volume of the sphere.\n    \"\"\"\n    vol = (4/3)*(3.142)**3*r**3\n    return vol\n\n",
        "generated_testcode": "assert volume_sphere(1) == 4.18840892\n",
        "test": "assert volume_sphere(10)==4188.790204786391\nassert volume_sphere(25)==65449.84694978735\nassert volume_sphere(20)==33510.32163829113",
        "canonical_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume"
    },
    {
        "number": 83,
        "prompt": "Write a python function to find the character made by adding all the characters of the given string.\ndef get_Char(strr):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = ''  \n    for i in range(0, len(strr)):  \n        result = result + strr[i]  \n    return result  \n      \n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\nif __name__=='__main__':\n    t=int(input())\n    for _ in range(t):\n        strr=input()\n        \n        print(get_Char(strr))\n\n",
        "generated_testcode": "assert get_Char(\"Hello\") == \"H\", \"Should return H\"\n",
        "test": "assert get_Char(\"abc\") == \"f\"\nassert get_Char(\"gfg\") == \"t\"\nassert get_Char(\"ab\") == \"c\"",
        "canonical_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)"
    },
    {
        "number": 84,
        "prompt": "Write a function to find the n-th number in newman conway sequence.\ndef sequence(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    x=n\n    sequence=[0,1]\n    while(x>0):\n        x=x-1\n        if x%2==0:\n            sequence.append(sequence[x//2])\n        else:\n            sequence.append(sequence[x-1]+sequence[x//2])\n    return sequence[n]\n\n",
        "generated_testcode": "assert sequence(1) == 1\n",
        "test": "assert sequence(10) == 6\nassert sequence(2) == 1\nassert sequence(3) == 2",
        "canonical_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))"
    },
    {
        "number": 85,
        "prompt": "Write a function to find the surface area of a sphere.\ndef surfacearea_sphere(r):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if r < 0:\n        return 0\n    return 4 * math.pi * r ** 2\n\n",
        "generated_testcode": "assert surfacearea_sphere(1) == 28.274333882308138\n",
        "test": "assert surfacearea_sphere(10)==1256.6370614359173\nassert surfacearea_sphere(15)==2827.4333882308138\nassert surfacearea_sphere(20)==5026.548245743669",
        "canonical_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea"
    },
    {
        "number": 86,
        "prompt": "Write a function to find nth centered hexagonal number.\ndef centered_hexagonal_number(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n==1:\n        return 1\n    return (pow(3,n-1)*(2*n*pow(3,n-1)-1)/(6*n*n-4))+1\n\n",
        "generated_testcode": "assert centered_hexagonal_number(1) == 1\n",
        "test": "assert centered_hexagonal_number(10) == 271\nassert centered_hexagonal_number(2) == 7\nassert centered_hexagonal_number(9) == 217",
        "canonical_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1"
    },
    {
        "number": 87,
        "prompt": "Write a function to merge three dictionaries into a single expression.\ndef merge_dictionaries_three(dict1,dict2, dict3):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return {**dict1,**dict2,**dict3}\n\n",
        "generated_testcode": "assert merge_dictionaries_three(dict1,dict2,dict3) == {'a': 1, 'b': 2, 'c': 3}\n\n",
        "test": "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}\nassert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict"
    },
    {
        "number": 88,
        "prompt": "Write a function to get the frequency of the elements in a list.\ndef freq_count(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    dictionary = dict()\n    for i in range(len(list1)):\n        if list1[i] in dictionary:\n            dictionary[list1[i]] += 1\n        else:\n            dictionary[list1[i]] = 1\n    return dictionary\n\n",
        "generated_testcode": "assert freq_count([1,2,3,4,5,6,7,8,9,10]) == (1,2,3,4,5,6,7,8,9,10)\n",
        "test": "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) \nassert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) \nassert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) ",
        "canonical_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count"
    },
    {
        "number": 89,
        "prompt": "Write a function to find the closest smaller number than n.\ndef closest_num(N):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if N > 0:\n        while N > 0:\n            if N % 2 == 0:\n                N = N // 2\n            else:\n                N = N // 2 + 1\n            if N < abs(N - 1):\n                return abs(N - 1)\n    else:\n        return 0\n\n",
        "generated_testcode": "assert closest_num(1) == 0\n",
        "test": "assert closest_num(11) == 10\nassert closest_num(7) == 6\nassert closest_num(12) == 11",
        "canonical_solution": "def closest_num(N):\r\n  return (N - 1)"
    },
    {
        "number": 90,
        "prompt": "Write a python function to find the length of the longest word.\ndef len_log(list1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    max=0\n    for i in range(len(list1)):\n        if len(list1[i])>max:\n            max=len(list1[i])\n    return max\n\n",
        "generated_testcode": "assert len_log([]) == 0\n",
        "test": "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7\nassert len_log([\"a\",\"ab\",\"abc\"]) == 3\nassert len_log([\"small\",\"big\",\"tall\"]) == 5",
        "canonical_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max"
    },
    {
        "number": 91,
        "prompt": "Write a function to check if a substring is present in a given list of string values.\ndef find_substring(str1, sub_str):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n\n",
        "generated_testcode": "assert find_substring(\"abcabc\", \"abc\") == True\n",
        "test": "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False\nassert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True",
        "canonical_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False"
    },
    {
        "number": 92,
        "prompt": "Write a function to check whether the given number is undulating or not.\ndef is_undulating(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    sum=0\n    while n!=0:\n        r=n%10\n        sum+=r**2\n        n=n//10\n    return sum==1\nprint(is_undulating(123456789))\nprint(is_undulating(123))\n\n",
        "generated_testcode": "assert is_undulating(1) == True\n",
        "test": "assert is_undulating(\"1212121\") == True\nassert is_undulating(\"1991\") == False\nassert is_undulating(\"121\") == True",
        "canonical_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True"
    },
    {
        "number": 93,
        "prompt": "Write a function to calculate the value of 'a' to the power 'b'.\ndef power(a,b):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    c = a ** b\n    return c\nprint(power(2,3))\n\n",
        "generated_testcode": "assert power(2,3) == 8\n",
        "test": "assert power(3,4) == 81\nassert power(2,3) == 8\nassert power(5,5) == 3125",
        "canonical_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)"
    },
    {
        "number": 94,
        "prompt": "Write a function to extract the index minimum value record from the given tuples.\ndef index_minimum(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    minimum = test_list[0]\n    index = 0\n    for index in range(len(test_list)):\n        if minimum > test_list[index]:\n            minimum = test_list[index]\n    return index, minimum\n\n",
        "generated_testcode": "assert index_minimum([(1, 2), (3, 4), (5, 6)]) == (0, 2)\n",
        "test": "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'\nassert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'\nassert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'",
        "canonical_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) "
    },
    {
        "number": 95,
        "prompt": "Write a python function to find the minimum length of sublist.\ndef Find_Min_Length(lst):  \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    min=1000000\n    for i in range(len(lst)):\n        for j in range(i,len(lst)):\n            if min>len(lst[i:j+1]):\n                min=len(lst[i:j+1])\n    return min\n    \n#3)Write a python program to find the count of sublists whose sum is divisible by 5.\n# 5,10,15,20,25\n# 5,10,15,20\n# 5,10,20,25\n# 5,15,20,25\n# 5,10,20,25\n# 5,15,20\n# 5,10,15\n# 5,15,10\n# 5,10,15\n\n",
        "generated_testcode": "assert Find_Min_Length([1,2,3,4,5]) == 1\n",
        "test": "assert Find_Min_Length([[1],[1,2]]) == 1\nassert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2\nassert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3",
        "canonical_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength "
    },
    {
        "number": 96,
        "prompt": "Write a python function to find the number of divisors of a given integer.\ndef divisor(n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 1\n    for i in range(1,n):\n        if n % i == 0:\n            count += 1\n    return count\nn = int(input())\nprint(divisor(n))\n\n",
        "generated_testcode": "assert divisor(4) == 2\n",
        "test": "assert divisor(15) == 4 \nassert divisor(12) == 6\nassert divisor(9) == 3",
        "canonical_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x"
    },
    {
        "number": 97,
        "prompt": "Write a function to find frequency count of list of lists.\ndef frequency_lists(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for item in list1:\n        count = 0\n        for i in list1:\n            if item == i:\n                count += 1\n        print(count)\n        \n#frequency_lists([[1,2,2,2], [3,4], [1,2,3,3,4]])\n\n",
        "generated_testcode": "assert frequency_lists([\"a\", \"b\", \"c\", \"a\", \"b\", \"c\"]) == {'a': 3, 'b': 2, 'c': 2}\n\n",
        "test": "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}\nassert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}\nassert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}",
        "canonical_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n"
    },
    {
        "number": 98,
        "prompt": "Write a function to multiply all the numbers in a list and divide with the length of the list.\ndef multiply_num(numbers):  \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 1  \n    for num in numbers: \n        result = result * num \n    return result \n\n",
        "generated_testcode": "assert multiply_num([1,2,3,4]) == 24\n",
        "test": "assert multiply_num((8, 2, 3, -1, 7))==-67.2\nassert multiply_num((-10,-20,-30))==-2000.0\nassert multiply_num((19,15,18))==1710.0",
        "canonical_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) "
    },
    {
        "number": 99,
        "prompt": "Write a function to convert the given decimal number to its binary equivalent.\ndef decimal_to_binary(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "  return bin(n).replace(\"0b\", \"\")\n\n",
        "generated_testcode": "assert decimal_to_binary(0) == '0'\n",
        "test": "assert decimal_to_binary(8) == '1000'\nassert decimal_to_binary(18) == '10010'\nassert decimal_to_binary(7) == '111' ",
        "canonical_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") "
    },
    {
        "number": 100,
        "prompt": "Write a function to find the next smallest palindrome of a specified number.\ndef next_smallest_palindrome(num):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if num == \"\":\n        return \"\"\n    \n    if num == \"9\":\n        return \"1\"\n    if num == \"99\":\n        return \"9\"\n\n",
        "generated_testcode": "assert next_smallest_palindrome(121) == 121\n",
        "test": "assert next_smallest_palindrome(99)==101\nassert next_smallest_palindrome(1221)==1331\nassert next_smallest_palindrome(120)==121",
        "canonical_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i"
    },
    {
        "number": 101,
        "prompt": "Write a function to find the kth element in the given array.\ndef kth_element(arr, n, k):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0:\n        return -1\n    s = 0\n    e = n - 1\n    while s <= e:\n        mid = int(s + (e - s) / 2)\n        if mid == k - 1:\n            return arr[mid]\n        if mid > k - 1:\n            if arr[mid] > arr[mid + 1]:\n                return arr[mid]\n            e = mid - 1\n        else:\n            if arr[mid] < arr[mid + 1]:\n                return arr[mid + 1]\n            s = mid + 1\n\n",
        "generated_testcode": "assert kth_element([1, 2, 3, 4, 5], 5, 2) == 3\n",
        "test": "assert kth_element([12,3,5,7,19], 5, 2) == 3\nassert kth_element([17,24,8,23], 4, 3) == 8\nassert kth_element([16,21,25,36,4], 5, 4) == 36",
        "canonical_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]"
    },
    {
        "number": 102,
        "prompt": "Write a function to convert snake case string to camel case string.\ndef snake_to_camel(word):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # your code here\n    #return (word[0].lower() + word[1:].title())\n    return word.title()\n\n",
        "generated_testcode": "assert snake_to_camel('snake_case') =='snakeCase'\n",
        "test": "assert snake_to_camel('python_program')=='PythonProgram'\nassert snake_to_camel('python_language')==('PythonLanguage')\nassert snake_to_camel('programming_language')==('ProgrammingLanguage')",
        "canonical_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 103,
        "prompt": "Write a function to find eulerian number a(n, m).\ndef eulerian_num(n, m): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    euler = [[0]*m for i in range(n)] \n    if n < m: \n        return 0\n    cnt = 0\n    for i in range(n): \n        for j in range(m): \n            if i!= j and euler[i][j] == 0: \n                cnt += 1\n                euler[i][j] = euler[j][i] = cnt \n    return euler\n\n",
        "generated_testcode": "assert eulerian_num(2, 2) == 1\n",
        "test": "assert eulerian_num(3, 1) == 4\nassert eulerian_num(4, 1) == 11\nassert eulerian_num(5, 3) == 26",
        "canonical_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))"
    },
    {
        "number": 104,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists using lambda function.\ndef sort_sublists(input_list):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "  return sorted(input_list, key=lambda x: x)\n\n",
        "generated_testcode": "assert sort_sublists(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\n",
        "test": "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]\nassert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]",
        "canonical_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r"
    },
    {
        "number": 105,
        "prompt": "Write a python function to count true booleans in the given list.\ndef count(lst):   \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  return lst.count(True)\n\n",
        "generated_testcode": "assert count([True, False, True, True, False]) == 3\n",
        "test": "assert count([True,False,True]) == 2\nassert count([False,False]) == 0\nassert count([True,True,True]) == 3",
        "canonical_solution": "def count(lst):   \r\n    return sum(lst) "
    },
    {
        "number": 106,
        "prompt": "Write a function to add the given list to the given tuples.\ndef add_lists(test_list, test_tup):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # TODO: Implement this function.\n    for i in range(len(test_list)):\n        print(i, test_list[i])\n        test_tup = (test_list[i], test_tup)\n    print(test_tup)\n\n",
        "generated_testcode": "assert add_lists([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)\nassert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)\nassert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)",
        "canonical_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) "
    },
    {
        "number": 107,
        "prompt": "Write a python function to count hexadecimal numbers for a given range.\ndef count_Hexadecimal(L,R) :  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 0\n    for i in range(L,R+1) :\n        if i < 16:\n            if i%2==0:\n                result += 1\n            if i%2!=0:\n                result -= 1\n        elif i >= 16 and i < 32:\n            if i%2==0:\n                result += 1\n            if i%2!=0:\n                result -= 1\n        elif i >= 32 and i < 48:\n            if i%2==0:\n                result += 1\n            if i%2!=0:\n                result -= 1\n        elif i >= 48 and i < 64:\n            if i%2==0:\n                result += 1\n            if i%2!=0:\n                result -= 1\n        elif i >= 64 and i < 80:\n            if i%2==0:\n                result += 1\n            if i%2!=0:\n                result -= 1\n        elif i >= 80 and i < 96:\n            if i%2==0:\n                result += 1\n            if i%2!=0:\n                result -= 1\n        elif i >= 96 and i < 112:\n            if i%2==0:\n                result += 1\n            if i%2!=0:\n                result -= 1\n        elif i >= 112 and i < 128:\n            if i%2==0:\n                result += 1\n            if i%2!=0:\n                result -= 1\n        elif i >= 128 and i",
        "generated_testcode": "assert count_Hexadecimal(0,10) == 0\n",
        "test": "assert count_Hexadecimal(10,15) == 6\nassert count_Hexadecimal(2,4) == 0\nassert count_Hexadecimal(15,16) == 1",
        "canonical_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  "
    },
    {
        "number": 108,
        "prompt": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.\ndef merge_sorted_list(num1,num2,num3):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    my_list =[]\n    my_list = sorted([num1,num2,num3])\n    return my_list\n#print(merge_sorted_list([1,3,5],[2,4,6],[2,3,6]))\n\n",
        "generated_testcode": "assert merge_sorted_list(num1,num2,num3) == num1 + num2 + num3\n\n",
        "test": "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]\nassert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]\nassert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]",
        "canonical_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)"
    },
    {
        "number": 109,
        "prompt": "Write a python function to find the count of rotations of a binary string with odd value.\ndef odd_Equivalent(s,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(0, n): \n        if(s[i]!= s[n - i - 1]): \n            count += 1\n    return count \n\n",
        "generated_testcode": "assert odd_Equivalent(s = \"10101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010101010",
        "test": "assert odd_Equivalent(\"011001\",6) == 3\nassert odd_Equivalent(\"11011\",5) == 4\nassert odd_Equivalent(\"1010\",4) == 2",
        "canonical_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 110,
        "prompt": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.\ndef extract_missing(test_list, strt_val, stop_val):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    if strt_val > stop_val:\n        return False\n    else:\n        return test_list[strt_val:stop_val]\n\n",
        "generated_testcode": "assert extract_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == [2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]\nassert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]",
        "canonical_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) "
    },
    {
        "number": 111,
        "prompt": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item\ndef common_in_nested_lists(nestedlist):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    '''\n    Write a function to find common elements in given nested lists.\n    '''\n    result = []\n    for i in range(len(nestedlist)):\n        for j in range(len(nestedlist[i])):\n            if nestedlist[i][j] in result:\n                return result\n            else:\n                result.append(nestedlist[i][j])\n    return result\n",
        "generated_testcode": "assert common_in_nested_lists([[1, 2], [3], [4, 5, 6]]) == [1, 2, 4, 5, 6]\n",
        "test": "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]\nassert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]\nassert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]",
        "canonical_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result"
    },
    {
        "number": 112,
        "prompt": "Write a python function to find the perimeter of a cylinder.\ndef perimeter(diameter,height) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  perimeter = diameter*2+height*2 \n  return perimeter \n  print (perimeter(3,4)) \n\n",
        "generated_testcode": "assert(perimeter(2,3) == 5)\n",
        "test": "assert perimeter(2,4) == 12\nassert perimeter(1,2) == 6\nassert perimeter(3,1) == 8",
        "canonical_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  "
    },
    {
        "number": 113,
        "prompt": "Write a function to check if a string represents an integer or not.\ndef check_integer(text):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if text.isdigit():\n        return True\n    return False\n\n",
        "generated_testcode": "assert check_integer('1') == True\n",
        "test": "assert check_integer(\"python\")==False\nassert check_integer(\"1\")==True\nassert check_integer(\"12345\")==True",
        "canonical_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False"
    },
    {
        "number": 114,
        "prompt": "Write a function to assign frequency to each tuple in the given tuple list.\ndef assign_freq(test_list):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return_dict = {}\n    for tup in test_list:\n        if (tup in return_dict):\n            return_dict[tup] += 1\n        else:\n            return_dict[tup] = 1\n    return return_dict\n\n",
        "generated_testcode": "assert assign_freq([('a', 1), ('b', 2), ('c', 3)]) == {('a', 1): 1, ('b', 2): 1, ('c', 3): 1}\n",
        "test": "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'\nassert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'\nassert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'",
        "canonical_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) "
    },
    {
        "number": 115,
        "prompt": "Write a function to check whether all dictionaries in a list are empty or not.\ndef empty_dit(list1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for ele in list1:\n        if ele:\n            return False\n        else:\n            return True\n\n",
        "generated_testcode": "assert empty_dit([{},{},{}]) == True\n",
        "test": "assert empty_dit([{},{},{}])==True\nassert empty_dit([{1,2},{},{}])==False\nassert empty_dit({})==True",
        "canonical_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit"
    },
    {
        "number": 116,
        "prompt": "Write a function to convert a given tuple of positive integers into an integer.\ndef tuple_to_int(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    return sum(nums)\n\n",
        "generated_testcode": "assert tuple_to_int((1, 2, 3)) == 6\n",
        "test": "assert tuple_to_int((1,2,3))==123\nassert tuple_to_int((4,5,6))==456\nassert tuple_to_int((5,6,7))==567",
        "canonical_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result"
    },
    {
        "number": 117,
        "prompt": "Write a function to convert all possible convertible elements in the list to float.\ndef list_to_float(test_list):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(test_list)):\n        try:\n            test_list[i] = float(test_list[i])\n        except ValueError:\n            continue\n    return test_list\n\n",
        "generated_testcode": "assert list_to_float([1, 2, 3, 4, 5]) == [1.0, 2.0, 3.0, 4.0, 5.0]\n",
        "test": "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'\nassert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'\nassert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'",
        "canonical_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) "
    },
    {
        "number": 118,
        "prompt": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.\ndef string_to_list(string): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = string.split() \n    return new_list\n\n",
        "generated_testcode": "assert string_to_list(\"https://www.google.com\") == ['https', 'www.google.com']\n",
        "test": "assert string_to_list(\"python programming\")==['python','programming']\nassert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']\nassert string_to_list(\"write a program\")==['write','a','program']",
        "canonical_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst"
    },
    {
        "number": 119,
        "prompt": "Write a python function to find the element that appears only once in a sorted array.\ndef search(arr,n) :\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(n) :\n        if (arr[i] == 1 and i == 0 or arr[i] == 1 and i == n - 1) :\n            return i\n\n",
        "generated_testcode": "assert search([1,2,3,4,5,6,7,8,9,10],5) == 5\n",
        "test": "assert search([1,1,2,2,3],5) == 3\nassert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8\nassert search([1,2,2,3,3,4,4],7) == 1",
        "canonical_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)"
    },
    {
        "number": 120,
        "prompt": "Write a function to find the maximum product from the pairs of tuples within a given list.\ndef max_product_tuple(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 1\n    max1 = -1\n    for i in range(len(list1)-1):\n        for j in range(i+1, len(list1)):\n            if list1[i] * list1[j] > result:\n                result = list1[i] * list1[j]\n                max1 = list1[i]\n                max2 = list1[j]\n    print(max1, max2, result)\n\n",
        "generated_testcode": "assert max_product_tuple([(1, 2), (3, 4), (5, 6)]) == 6\n",
        "test": "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36\nassert max_product_tuple([(10,20), (15,2), (5,10)] )==200\nassert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484",
        "canonical_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max"
    },
    {
        "number": 121,
        "prompt": "Write a function to find the triplet with sum of the given array\ndef check_triplet(A, n, sum, count):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    j = n-1\n    while(i<j):\n        if(A[i] + A[j] == sum):\n            if(count == 1):\n                print(\"Triplet found with sum\", sum)\n                return 1\n            else:\n                count = 1\n                print(\"Triplet found with sum\", sum)\n        elif(A[i] + A[j] < sum):\n            i = i + 1\n        else:\n            j = j - 1\n    return 0\n\n",
        "generated_testcode": "assert check_triplet([1, 2, 3, 4, 5], 5, 10, 3) == True\n",
        "test": "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True\nassert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False\nassert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True",
        "canonical_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)"
    },
    {
        "number": 122,
        "prompt": "Write a function to find n\u2019th smart number.\ndef smartNumber(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 1: \n        return 1\n    else: \n        return (n * (n + 1)) // 2\n\n",
        "generated_testcode": "assert smartNumber(1) == 1\n",
        "test": "assert smartNumber(1) == 30\nassert smartNumber(50) == 273\nassert smartNumber(1000) == 2664",
        "canonical_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] "
    },
    {
        "number": 123,
        "prompt": "Write a function to sum all amicable numbers from 1 to a specified number.\ndef amicable_numbers_sum(limit):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  sum_amicable = 0\n  for i in range(1, limit+1):\n    n = sum_amicable(i)\n    if n!= 0 and n!= 1:\n      sum_amicable += n\n  return sum_amicable\n\n",
        "generated_testcode": "assert amicable_numbers_sum(1000) == 233168\n",
        "test": "assert amicable_numbers_sum(999)==504\nassert amicable_numbers_sum(9999)==31626\nassert amicable_numbers_sum(99)==0",
        "canonical_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)"
    },
    {
        "number": 124,
        "prompt": "Write a function to get the angle of a complex number.\ndef angle_complex(a,b):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return (math.atan2(b.imag,b.real)+math.pi)%(2*math.pi)\n\n",
        "generated_testcode": "assert angle_complex(1+2j, 3+4j) == 0.7853981633974483\n",
        "test": "assert angle_complex(0,1j)==1.5707963267948966 \nassert angle_complex(2,1j)==0.4636476090008061\nassert angle_complex(0,2j)==1.5707963267948966",
        "canonical_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle"
    },
    {
        "number": 125,
        "prompt": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\ndef find_length(string, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    str = \"\" \n    count0 = 0\n    count1 = 0\n    for i in range(len(string)): \n        if string[i] == '0': \n            count0 += 1\n        else: \n            count1 += 1\n        str += string[i] \n  \n    return max(count0, count1) \n\n",
        "generated_testcode": "assert find_length(binary_string, n) == 6\n\n",
        "test": "assert find_length(\"11000010001\", 11) == 6\nassert find_length(\"10111\", 5) == 1\nassert find_length(\"11011101100101\", 14) == 2 ",
        "canonical_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0"
    },
    {
        "number": 126,
        "prompt": "Write a python function to find the sum of common divisors of two given numbers.\ndef sum(a,b): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tdef gcd(a, b): \n\t\twhile a!= b: \n\t\t\tif a > b: \n\t\t\t\ta = a - b \n\t\t\telse: \n\t\t\t\tb = b - a \n\t\treturn a \n\tif gcd(a, b) == 1: \n\t\treturn a + b \n\telse: \n\t\treturn gcd(a, b) \n\n",
        "generated_testcode": "assert sum(2,4) == 6\n",
        "test": "assert sum(10,15) == 6\nassert sum(100,150) == 93\nassert sum(4,6) == 3",
        "canonical_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 127,
        "prompt": "Write a function to multiply two integers without using the * operator in python.\ndef multiply_int(x, y):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return x * y\n\n",
        "generated_testcode": "assert multiply_int(2, 3) == 6\n",
        "test": "assert multiply_int(10,20)==200\nassert multiply_int(5,10)==50\nassert multiply_int(4,8)==32",
        "canonical_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)"
    },
    {
        "number": 128,
        "prompt": "Write a function to shortlist words that are longer than n from a given list of words.\ndef long_words(n, str):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return [word for word in str if len(word) > n]\n# alternative way\n# return [word for word in str if len(word) > n]\n\n",
        "generated_testcode": "assert long_words(3, ['hello', 'hi', 'howdy', 'heyas']) == ['hello', 'hi', 'howdy']\n",
        "test": "assert long_words(3,\"python is a programming language\")==['python','programming','language']\nassert long_words(2,\"writing a program\")==['writing','program']\nassert long_words(5,\"sorting list\")==['sorting']",
        "canonical_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t"
    },
    {
        "number": 129,
        "prompt": "Write a function to calculate magic square.\ndef magic_square_test(my_matrix):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(my_matrix)\n    if n > 0 and n == len(my_matrix[0]):\n        if n == 3:\n            for i in range(n):\n                if my_matrix[i][i]!= 1:\n                    return False\n            return True\n        else:\n            return False\n    else:\n        return False\n\n",
        "generated_testcode": "assert magic_square_test([[1, 2, 3],\n                          [4, 5, 6],\n                          [7, 8, 9]]) == True, \"Should be True\"\n",
        "test": "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True\nassert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False",
        "canonical_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True"
    },
    {
        "number": 130,
        "prompt": "Write a function to find the item with maximum frequency in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    d = {}\n    max_count = 0\n    for i in nums:\n        if i in d:\n            d[i] += 1\n            if d[i] > max_count:\n                max_count = d[i]\n        else:\n            d[i] = 1\n    return max_count\n\n",
        "generated_testcode": "assert max_occurrences(nums) == 1\n\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)\nassert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)\nassert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result"
    },
    {
        "number": 131,
        "prompt": "Write a python function to reverse only the vowels of a given string.\ndef reverse_vowels(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    vowels = set('aeiou')\n    str1 = list(str1)\n    print(str1)\n    str2 = []\n    for i in range(len(str1)):\n        if str1[i] not in vowels:\n            str2.append(str1[i])\n        else:\n            str2.append(str1[i])\n    print(str2)\n    str3 = ''.join(str2)\n    print(str3)\n\n",
        "generated_testcode": "assert reverse_vowels(\"hello\") == \"holle\"\n",
        "test": "assert reverse_vowels(\"Python\") == \"Python\"\nassert reverse_vowels(\"USA\") == \"ASU\"\nassert reverse_vowels(\"ab\") == \"ab\"",
        "canonical_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string"
    },
    {
        "number": 132,
        "prompt": "Write a function to convert tuple to a string.\ndef tup_string(tup1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return ''.join(map(str, tup1))\n# Output:\n# (1, 2, 3) -> '123'\n# (1, '2', '3') -> '123'\n\n",
        "generated_testcode": "assert tup_string((1,2,3)) == '123'\n",
        "test": "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")\nassert tup_string(('p','y','t','h','o','n'))==(\"python\")\nassert tup_string(('p','r','o','g','r','a','m'))==(\"program\")",
        "canonical_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str"
    },
    {
        "number": 133,
        "prompt": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.\ndef sum_negativenum(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(list(filter(lambda x:x<0,nums)))\n\n",
        "generated_testcode": "assert sum_negativenum([-1, -2, -3, -4, -5]) == -1\n",
        "test": "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32\nassert sum_negativenum([10,15,-14,13,-18,12,-20])==-52\nassert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894",
        "canonical_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)"
    },
    {
        "number": 134,
        "prompt": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.\ndef check_last (arr,n,p): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(0,p):\n        if arr[n-1]%2==0:\n            return \"even\"\n        elif arr[n-1]%2!=0:\n            return \"odd\"\n    return \"NA\"\narr = [1,2,3,4,5]\nn=len(arr)\np=3\nprint(check_last(arr,n,p))\n\n",
        "generated_testcode": "assert check_last([1,2,3,4,5],5,2) == True\n",
        "test": "assert check_last([5,7,10],3,1) == \"ODD\"\nassert check_last([2,3],2,3) == \"EVEN\"\nassert check_last([1,2,3],3,1) == \"ODD\"",
        "canonical_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      "
    },
    {
        "number": 135,
        "prompt": "Write a function to find the nth hexagonal number.\ndef hexagonal_num(n): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "  n = int(n)\n  if n == 0:\n    return 1\n  else:\n    return hexagonal_num(n-1)+6*(n-1)\n\n",
        "generated_testcode": "assert hexagonal_num(1) == 1\n",
        "test": "assert hexagonal_num(10) == 190\nassert hexagonal_num(5) == 45\nassert hexagonal_num(7) == 91",
        "canonical_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) "
    },
    {
        "number": 136,
        "prompt": "Write a function to calculate electricity bill.\ndef cal_electbill(units):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    bill = 0.0\n    if units <= 1000:\n        bill = units * 0.5\n    elif units <= 10000:\n        bill = units * 0.7\n    else:\n        bill = units * 0.8\n    return bill\n\n",
        "generated_testcode": "assert cal_electbill(1) == 0.0\n",
        "test": "assert cal_electbill(75)==246.25\nassert cal_electbill(265)==1442.75\nassert cal_electbill(100)==327.5",
        "canonical_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total"
    },
    {
        "number": 137,
        "prompt": "Write a function to find the ration of zeroes in an array of integers.\ndef zero_count(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  zeroes = 0\n  ones = 0\n  for i in nums:\n    if i == 0:\n      zeroes += 1\n    elif i == 1:\n      ones += 1\n  return zeroes/ones\n\n",
        "generated_testcode": "assert zero_count([0, 1, 0, 1, 0, 1, 0, 1, 0, 1]) == 3\n",
        "test": "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15\nassert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00\nassert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00",
        "canonical_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 138,
        "prompt": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\ndef is_Sum_Of_Powers_Of_Two(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "      \n    # If sum of powers of 2 <= n then n must be \n    # a power of 2 \n    while(1): \n        if ((n & (n - 1)) == 0): \n            break\n        else: \n            n = n - 1\n    if (n <= 0): \n        return False\n    return True\n\n",
        "generated_testcode": "assert is_Sum_Of_Powers_Of_Two(1) == True\n",
        "test": "assert is_Sum_Of_Powers_Of_Two(10) == True\nassert is_Sum_Of_Powers_Of_Two(7) == False\nassert is_Sum_Of_Powers_Of_Two(14) == True",
        "canonical_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True"
    },
    {
        "number": 139,
        "prompt": "Write a function to find the circumference of a circle.\ndef circle_circumference(r):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    circumference = r * 2 * 3.141592\n    return circumference\n\n",
        "generated_testcode": "assert circle_circumference(1) == 3.14\n",
        "test": "assert circle_circumference(10)==62.830000000000005\nassert circle_circumference(5)==31.415000000000003\nassert circle_circumference(4)==25.132",
        "canonical_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter"
    },
    {
        "number": 140,
        "prompt": "Write a function to extract elements that occur singly in the given tuple list.\ndef extract_singly(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in test_list:\n        if test_list.count(i) == 1:\n            print(i)\n#testing\nextract_singly(tuple_list)\n\n",
        "generated_testcode": "assert extract_singly([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n",
        "test": "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]\nassert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]\nassert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]",
        "canonical_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) "
    },
    {
        "number": 141,
        "prompt": "Write a function to sort a list of elements using pancake sort.\ndef pancake_sort(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Write your code here\n    n = len(nums)\n    i = n - 1\n    s = 0\n    while i >= 0:\n        if nums[i] < nums[i-1]:\n            nums[i], nums[i-1] = nums[i-1], nums[i]\n            nums[i], nums[s] = nums[s], nums[i]\n            s += 1\n        i -= 1\n\n",
        "generated_testcode": "assert pancake_sort([3, 2, 4, 1]) == [1, 2, 3, 4]\n",
        "test": "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]\nassert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]\nassert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]",
        "canonical_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums"
    },
    {
        "number": 142,
        "prompt": "Write a function to count the same pair in three given lists.\ndef count_samepair(list1,list2,list3):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    count=0\n    for i in range(0,len(list1)):\n        for j in range(0,len(list2)):\n            for k in range(0,len(list3)):\n                if(list1[i]==list2[j] and list1[i]==list3[k]):\n                    count=count+1\n    return count\nprint(count_samepair([1,2,3,4,5,6,7],[1,2,3,4,5,6,7],[1,2,3,4,5,6,7]))\n\n",
        "generated_testcode": "assert count_samepair([1,2,3,4,5], [2,3,4,5,6], [3,4,5,6,7]) == 3\n",
        "test": "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3\nassert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4\nassert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5",
        "canonical_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result"
    },
    {
        "number": 143,
        "prompt": "Write a function to find number of lists present in the given tuple.\ndef find_lists(Input): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    Lis = [] \n    for i in range(len(Input)): \n        if type(Input[i]) == type([]): \n            Lis.append(Input[i]) \n    print(Lis) \n\n",
        "generated_testcode": "assert find_lists((1,2,3,4,5,6,7,8,9,10)) == 1, \"Should be 1\"\n",
        "test": "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2\nassert find_lists(([1, 2], [3, 4], [5, 6]))  == 3\nassert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1",
        "canonical_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) "
    },
    {
        "number": 144,
        "prompt": "Write a python function to find the sum of absolute differences in all pairs of the given array.\ndef sum_Pairs(arr,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n    # Declare a result and initialize sum with 0 \n    result = 0\n    sum = 0\n  \n    # Traverse the array once \n    for i in range(n): \n  \n        # Traverse the array again, this time with i+1 \n        for j in range(i+1,n): \n  \n            # Calculate absolute difference and add it to the result \n            result += abs(arr[i]-arr[j]) \n  \n    # Return the final result \n    return result\n  \n# Driver Code \narr = [ 1, 2, 3, 4 ] \nn = len(arr) \nprint(sum_Pairs(arr,n)) ",
        "generated_testcode": "assert sum_Pairs([1,2,3,4],4) == 5\n",
        "test": "assert sum_Pairs([1,8,9,15,16],5) == 74\nassert sum_Pairs([1,2,3,4],4) == 10\nassert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188",
        "canonical_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum"
    },
    {
        "number": 145,
        "prompt": "Write a python function to find the maximum difference between any two elements in a given array.\ndef max_Abs_Diff(arr,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    max_diff = 0\n    for i in range(n): \n        for j in range(i+1,n): \n            abs_diff = abs(arr[i] - arr[j]) \n            if max_diff < abs_diff: \n                max_diff = abs_diff \n    return max_diff\n\n",
        "generated_testcode": "assert max_Abs_Diff([1,2,3,4,5],5) == 3\n",
        "test": "assert max_Abs_Diff((2,1,5,3),4) == 4\nassert max_Abs_Diff((9,3,2,5,1),5) == 8\nassert max_Abs_Diff((3,2,1),3) == 2",
        "canonical_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) "
    },
    {
        "number": 146,
        "prompt": "Write a function to find the ascii value of total characters in a string.\ndef ascii_value_string(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    print(\"The ASCII value of a string is \", sum(ord(i) for i in str1))\n\n",
        "generated_testcode": "assert ascii_value_string(\"Hello World\") == \"65\"\n",
        "test": "assert ascii_value_string(\"python\")==112\nassert ascii_value_string(\"Program\")==80\nassert ascii_value_string(\"Language\")==76",
        "canonical_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])"
    },
    {
        "number": 147,
        "prompt": "Write a function to find the maximum total path sum in the given triangle.\ndef max_path_sum(tri, m, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Triangle\n    for i in range(m - 2, -1, -1): \n        for j in range(n): \n            tri[i][j] += max(tri[i + 1][j], tri[i + 1][j + 1])\n    return tri[0][0]\n\n",
        "generated_testcode": "assert max_path_sum([[1, 2, 3], \n                     [4, 5, 6], \n                     [7, 8, 9]], 3, 3) == 30\n",
        "test": "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14\nassert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 \nassert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53",
        "canonical_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]"
    },
    {
        "number": 148,
        "prompt": "Write a function to divide a number into two parts such that the sum of digits is maximum.\ndef sum_digits_single(x) : \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    if x<10 :\n        return x\n    else :\n        y = 0\n        while x :\n            x, rem = divmod(x, 10)\n            y = rem + y\n        return sum_digits_single(y)\n\n",
        "generated_testcode": "assert sum_digits_single(12) == 3, \"Should be 3\"\n",
        "test": "assert sum_digits_twoparts(35)==17\nassert sum_digits_twoparts(7)==7\nassert sum_digits_twoparts(100)==19",
        "canonical_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) "
    },
    {
        "number": 149,
        "prompt": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.\ndef longest_subseq_with_diff_one(arr, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0:\n        return 0\n    dp = [1]*n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] == arr[j]:\n                if arr[i] == arr[i-1]:\n                    continue\n                else:\n                    dp[i] = max(dp[i], dp[j] + dp[i])\n    return max(dp)\n\n",
        "generated_testcode": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5], 5) == 3\n",
        "test": "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6\nassert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3\nassert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7",
        "canonical_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result"
    },
    {
        "number": 150,
        "prompt": "Write a python function to find whether the given number is present in the infinite sequence or not.\ndef does_Contain_B(a,b,c): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(a, b): \n        if (i == c): \n            return \"Yes\"\n        else: \n            return \"No\"\n\n",
        "generated_testcode": "assert does_Contain_B(1,2,3) == True\n",
        "test": "assert does_Contain_B(1,7,3) == True\nassert does_Contain_B(1,-3,5) == False\nassert does_Contain_B(3,2,5) == False",
        "canonical_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 151,
        "prompt": "Write a python function to check whether the given number is co-prime or not.\ndef gcd(p,q):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    while q!= 0:\n        p, q = q, p % q\n    return p\n\n",
        "generated_testcode": "assert gcd(2,4) == 2\n",
        "test": "assert is_coprime(17,13) == True\nassert is_coprime(15,21) == False\nassert is_coprime(25,45) == False",
        "canonical_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1"
    },
    {
        "number": 152,
        "prompt": "Write a function to sort the given array by using merge sort.\ndef merge(a,b):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    n1,n2 = len(a),len(b)\n    if n1 == 0:\n        return b\n    if n2 == 0:\n        return a\n    result = []\n    i,j = 0,0\n    while i<n1 and j<n2:\n        if a[i]<=b[j]:\n            result.append(a[i])\n            i+=1\n        else:\n            result.append(b[j])\n            j+=1\n    if i<n1:\n        result += a[i:]\n    if j<n2:\n        result += b[j:]\n    return result\ndef sort(a):\n    if len(a)==1:\n        return a\n    mid = len(a)//2\n    left = sort(a[:mid])\n    right = sort(a[mid:])\n    return merge(left,right)\na = [7,2,5,3,9,4,6]\nprint(sort(a))\n#Output\n#[2, 3, 4, 5, 6, 7, 9]\n\n",
        "generated_testcode": "assert merge([1,2,3,4], [5,6,7,8]) == [1,2,3,4,5,6,7,8]\n",
        "test": "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]\nassert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]\nassert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]",
        "canonical_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n"
    },
    {
        "number": 153,
        "prompt": "Write a function to find the vertex of a parabola.\ndef parabola_vertex(a, b, c): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    import math\n    return (-b+math.sqrt(b**2-4*a*c))/(2*a)\n\n",
        "generated_testcode": "assert parabola_vertex(1, 2, 3) == (1, 2)\n",
        "test": "assert parabola_vertex(5,3,2)==(-0.3, 1.55)\nassert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)\nassert parabola_vertex(2,4,6)==(-1.0, 4.0)",
        "canonical_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex"
    },
    {
        "number": 154,
        "prompt": "Write a function to extract every specified element from a given two dimensional list.\ndef specified_element(nums, N):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(nums)):\n        for j in range(len(nums[0])):\n            if j == N:\n                result.append(nums[i][j])\n    return result\n\n",
        "generated_testcode": "assert specified_element([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 2) == [[1, 2], [4, 5], [7, 8]]\n",
        "test": "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]\nassert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]",
        "canonical_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result"
    },
    {
        "number": 155,
        "prompt": "Write a python function to toggle all even bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    #your code here\n    return (n ^ (n >> 1))\n\n",
        "generated_testcode": "assert even_bit_toggle_number(0) == 0\n",
        "test": "assert even_bit_toggle_number(10) == 0\nassert even_bit_toggle_number(20) == 30\nassert even_bit_toggle_number(30) == 20",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 156,
        "prompt": "Write a function to convert a tuple of string values to a tuple of integer values.\ndef tuple_int_str(tuple_str):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(int(i) for i in tuple_str)\n#\n# print(tuple_int_str(('10', '5', '20')))\n\n",
        "generated_testcode": "assert tuple_int_str(('1', '2', '3')) == (1, 2, 3)\n",
        "test": "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))\nassert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))\nassert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))",
        "canonical_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result"
    },
    {
        "number": 157,
        "prompt": "Write a function to reflect the run-length encoding from a list.\ndef encode_list(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n  new_list = []\n  for i in range(len(list1)):\n    count = 0\n    for j in range(i + 1, len(list1)):\n      if list1[i] == list1[j]:\n        count += 1\n        if count == 2:\n          break\n    new_list.append(count)\n  return new_list\n\n",
        "generated_testcode": "assert encode_list([1, 2, 3, 4, 5]) == '111221'\n",
        "test": "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]\nassert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]\nassert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]",
        "canonical_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]"
    },
    {
        "number": 158,
        "prompt": "Write a python function to find k number of operations required to make all elements equal.\ndef min_Ops(arr,n,k): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    # Initialize the variable to store \n    # number of operations \n    count = 0\n    # Consider all possible subarrays \n    # of size k and calculate operations \n    for i in range(n-k+1): \n        # Check if all elements of \n        # given subarray are equal \n        if arr[i]!= arr[i+k-1]: \n            # if not equal, increment count \n            count += 1\n            # write code here \n    # return total operations \n    return count \n# Driver code \narr = [1, 2, 3, 4, 1, 2] \nn = len(arr) \nk = 3\nprint(min_Ops(arr,n,k)) \n# This code is contributed by \n# Smitha Dinesh Semwal ",
        "generated_testcode": "assert min_Ops([1,2,3,4,5],5,3) == 3\n",
        "test": "assert min_Ops([2,2,2,2],4,3) == 0\nassert min_Ops([4,2,6,8],4,3) == -1\nassert min_Ops([21,33,9,45,63],5,6) == 24",
        "canonical_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) "
    },
    {
        "number": 159,
        "prompt": "Write a function to print the season for the given month and day.\ndef month_season(month,days):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Determines the season given a month and day\"\"\"\n    season = \"\"\n    if month == 1 or month == 2:\n        season = \"winter\"\n    elif month == 3 or month == 4:\n        season = \"spring\"\n    elif month == 5 or month == 6:\n        season = \"summer\"\n    elif month == 7 or month == 8:\n        season = \"autumn\"\n    print(\"The season for the month {} and day {} is {}\".format(month,days,season))\n\n",
        "generated_testcode": "assert month_season(1,31) == \"winter\"\n",
        "test": "assert month_season('January',4)==('winter')\nassert month_season('October',28)==('autumn')\nassert month_season('June',6)==('spring')",
        "canonical_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season"
    },
    {
        "number": 160,
        "prompt": "Write a function to find x and y that satisfies ax + by = n.\ndef solution (a, b, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    x = None\n    y = None\n    \n    if(a == 0):\n        if(b == 0):\n            return x,y\n        else:\n            x = -n / b\n            y = -n / a\n            return x,y\n    if(a == 0):\n        if(b == 0):\n            return x,y\n        else:\n            x = -n / b\n            y = n / a\n            return x,y\n    if(a == 0):\n        if(b == 0):\n            return x,y\n        else:\n            x = n / b\n            y = -n / a\n            return x,y\n    if(a == 0):\n        if(b == 0):\n            return x,y\n        else:\n            x = -n / b\n            y = n / a\n            return x,y\n    if(a == 0):\n        if(b == 0):\n            return x,y\n    x = (n * b - a * n)/(a * a + b * b)\n    y = (n * a - b * n)/(a * a + b * b)\n    return x,y\n    \n    \n    \nprint(solution(1,1,3))\n# (3.0, 1.0)\nprint(solution(1,-1,3))\n# (1.0, 2.0)\nprint(solution(2,3,5))\n# (2.0, 1.0)\n",
        "generated_testcode": "assert solution(1, 1, 3) == (1, 1)\n",
        "test": "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)\nassert solution(4, 2, 7) == 'No solution'\nassert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)",
        "canonical_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") "
    },
    {
        "number": 161,
        "prompt": "Write a function to remove all elements from a given list present in another list.\ndef remove_elements(list1, list2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    temp=[]\n    for i in list1:\n        if i not in list2:\n            temp.append(i)\n    return temp\n\n",
        "generated_testcode": "assert remove_elements([1,2,3,4,5], [2,3,4,5]) == [1,4,5]\n",
        "test": "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]\nassert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]",
        "canonical_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result"
    },
    {
        "number": 162,
        "prompt": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).\ndef sum_series(n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if n <= 0:\n        return 0\n    return (n + n - 2 + n - 4)\nprint(sum_series(4)) # Should be 10\nprint(sum_series(9)) # Should be 78\nprint(sum_series(8)) # Should be 144\n# expected output: sum_series(5) should return 10\n\n",
        "generated_testcode": "assert sum_series(5) == 5\n",
        "test": "assert sum_series(6)==12\nassert sum_series(10)==30\nassert sum_series(9)==25",
        "canonical_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)"
    },
    {
        "number": 163,
        "prompt": "Write a function to calculate the area of a regular polygon.\ndef area_polygon(s,l):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    area=0\n    for i in range(0,s):\n        area+=(l**2)/(4*s)\n    return area\n\n",
        "generated_testcode": "assert area_polygon(3,4) == 12\n",
        "test": "assert area_polygon(4,20)==400.00000000000006\nassert area_polygon(10,15)==1731.1969896610804\nassert area_polygon(9,7)==302.90938549487214",
        "canonical_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area"
    },
    {
        "number": 164,
        "prompt": "Write a python function to check whether the sum of divisors are same or not.\ndef divSum(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    divisor = 1\n    sum_div = 0\n    while divisor <= n: \n        if n % divisor == 0: \n            sum_div += divisor \n        divisor += 1\n    if sum_div == n: \n        print(n, \"is a perfect number\") \n    else: \n        print(n, \"is not a perfect number\") \n    \nn = 4\ndivSum(n) \nn = 6\ndivSum(n) \nn = 13\ndivSum(n) \n",
        "generated_testcode": "assert divSum(12) == True, \"Should be True\"\n",
        "test": "assert areEquivalent(36,57) == False\nassert areEquivalent(2,4) == False\nassert areEquivalent(23,47) == True",
        "canonical_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); "
    },
    {
        "number": 165,
        "prompt": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.\ndef count_char_position(str1): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    res = 0\n    for i in range(0,len(str1)): \n        if str1[i].isupper(): \n            res = res + 1\n        elif str1[i].islower(): \n            res = res + 1\n        else: \n            continue\n    return res \nprint(count_char_position(\"cAnder\"))\n\n",
        "generated_testcode": "assert count_char_position(\"\") == 0\n",
        "test": "assert count_char_position(\"xbcefg\") == 2\nassert count_char_position(\"ABcED\") == 3\nassert count_char_position(\"AbgdeF\") == 5",
        "canonical_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars "
    },
    {
        "number": 166,
        "prompt": "Write a python function to count the pairs with xor as an even number.\ndef find_even_Pair(A,N): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(0,N): \n        for j in range(i+1,N): \n            if ((A[i] ^ A[j]) & 1): \n                return 1\n    return 0\n\n",
        "generated_testcode": "assert find_even_Pair([1,2,3,4,5,6,7,8,9,10],10) == True\n",
        "test": "assert find_even_Pair([5,4,7,2,1],5) == 4\nassert find_even_Pair([7,2,8,1,0,5,11],7) == 9\nassert find_even_Pair([1,2,3],3) == 1",
        "canonical_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; "
    },
    {
        "number": 167,
        "prompt": "Write a python function to find smallest power of 2 greater than or equal to n.\ndef next_Power_Of_2(n): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return 1 << ((n - 1).bit_length())\n\n",
        "generated_testcode": "assert next_Power_Of_2(1) == 1\n",
        "test": "assert next_Power_Of_2(0) == 1\nassert next_Power_Of_2(5) == 8\nassert next_Power_Of_2(17) == 32",
        "canonical_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; "
    },
    {
        "number": 168,
        "prompt": "Write a python function to find the frequency of a number in a given array.\ndef frequency(a,x): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tn = len(a) \n\tf = 0\n\tfor i in range(0,n): \n\t\tif (a[i] == x): \n\t\t\tf += 1\n\treturn f\n\n",
        "generated_testcode": "assert frequency([1,2,3,4,5,6,7,8,9,10],5) == 3\n",
        "test": "assert frequency([1,2,3],4) == 0\nassert frequency([1,2,2,3,3,3,4],3) == 3\nassert frequency([0,1,2,3,1,2],1) == 2",
        "canonical_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count "
    },
    {
        "number": 169,
        "prompt": "Write a function to calculate the nth pell number.\ndef get_pell(n): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    # Base condition \n    if n <= 1: \n        return 1\n    \n    # General case \n    return get_pell(n-1) * 2 + 1\n\n",
        "generated_testcode": "assert get_pell(1) == 1\n",
        "test": "assert get_pell(4) == 12\nassert get_pell(7) == 169\nassert get_pell(8) == 408",
        "canonical_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b "
    },
    {
        "number": 170,
        "prompt": "Write a function to find sum of the numbers in a list between the indices of a specified range.\ndef sum_range_list(list1, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n\n",
        "generated_testcode": "assert sum_range_list([1, 2, 3, 4, 5], 1, 4) == 15\n",
        "test": "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16\nassert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38",
        "canonical_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 171,
        "prompt": "Write a function to find the perimeter of a pentagon.\ndef perimeter_pentagon(a):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return ((1 + 1 + 1 + 1 + 1 + 1) * a) / 2\n\n",
        "generated_testcode": "assert(perimeter_pentagon(5) == 10)\n",
        "test": "assert perimeter_pentagon(5)==25\nassert perimeter_pentagon(10)==50\nassert perimeter_pentagon(15)==75",
        "canonical_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter"
    },
    {
        "number": 172,
        "prompt": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item\ndef count_occurance(s):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    new_list.append(s[:])\n    count = 0\n    for i in range(len(s)):\n        if s[i] == \"s\":\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert count_occurance(\"std\") == 2\n",
        "test": "assert count_occurance(\"letstdlenstdporstd\") == 3\nassert count_occurance(\"truststdsolensporsd\") == 1\nassert count_occurance(\"makestdsostdworthit\") == 2",
        "canonical_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count"
    },
    {
        "number": 173,
        "prompt": "Write a function to remove everything except alphanumeric characters from a string.\ndef remove_splchar(text): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return \"\".join(e for e in text if e.isalnum())\n\n",
        "generated_testcode": "assert remove_splchar(\"abcd\") == \"abcd\", \"Should return abcd\"\n",
        "test": "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')\nassert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')\nassert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')",
        "canonical_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))"
    },
    {
        "number": 174,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists.\ndef group_keyvalue(l):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    d = dict()\n    for k, v in l:\n        if k not in d:\n            d[k] = []\n        d[k].append(v)\n    return d\n\n",
        "generated_testcode": "assert group_keyvalue(['a', 'b', 'c', 'd', 'e', 'f', 'g']) == {'a': ['a', 'b', 'c'], 'b': ['b', 'c', 'd'], 'c': ['c', 'd', 'e'], 'd': ['d', 'e', 'f'], 'e': ['e', 'f', 'g']}\n\n",
        "test": "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}\nassert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}\nassert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}",
        "canonical_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result"
    },
    {
        "number": 175,
        "prompt": "Write a function to verify validity of a string of parentheses.\ndef is_valid_parenthese( str1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    \n    count = 0\n    if len(str1) % 2 == 0:\n        for i in range(len(str1)):\n            if str1[i] == '(':\n                count += 1\n            if str1[i] == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return True\n    \n    else:\n        for i in range(len(str1)):\n            if str1[i] == '(':\n                count += 1\n            if str1[i] == ')':\n                count -= 1\n            if count < 0:\n                return False\n        return True\n    \ndef valid_parens(string):\n    if string == \"\":\n        return True\n    if len(string) % 2!= 0:\n        return False\n    \n    left_count = 0\n    for i in range(len(string)):\n        if string[i] == '(':\n            left_count += 1\n        if string[i] == ')':\n            left_count -= 1\n            if left_count < 0:\n                return False\n    if left_count!= 0:\n        return False\n    \n    return True\n    \n# ----------------------------------------------------------------------\n# D - Expense report\n# ----------------------------------------------------------------------\n# Implement a function that receives a list of expenses and returns the\n# sum of their values. If a negative number appears in the list, print an error message and don't return it.\n\n",
        "generated_testcode": "assert is_valid_parenthese(\"()\") == True\n",
        "test": "assert is_valid_parenthese(\"(){}[]\")==True\nassert is_valid_parenthese(\"()[{)}\")==False\nassert is_valid_parenthese(\"()\")==True",
        "canonical_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0"
    },
    {
        "number": 176,
        "prompt": "Write a function to find the perimeter of a triangle.\ndef perimeter_triangle(a,b,c):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    perimeter = a + b + c\n    return perimeter\n\n",
        "generated_testcode": "assert(perimeter_triangle(1,2,3) == 6)\n",
        "test": "assert perimeter_triangle(10,20,30)==60\nassert perimeter_triangle(3,4,5)==12\nassert perimeter_triangle(25,35,45)==105",
        "canonical_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    },
    {
        "number": 177,
        "prompt": "Write a python function to find two distinct numbers such that their lcm lies within the given range.\ndef answer(L,R): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if L>R:\n        return -1\n    for i in range(L,R):\n        for j in range(L,R):\n            if i*j>R and i*j<R:\n                return i,j\n\n",
        "generated_testcode": "assert answer(10,20) == 10\n",
        "test": "assert answer(3,8) == (3,6)\nassert answer(2,6) == (2,4)\nassert answer(1,3) == (1,2)",
        "canonical_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) "
    },
    {
        "number": 178,
        "prompt": "Write a function to search some literals strings in a string.\ndef string_literals(patterns,text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    patterns = re.findall(patterns,text)\n    return patterns\n\n",
        "generated_testcode": "assert string_literals(\"abc\",\"abc\") == True\n",
        "test": "assert string_literals(['language'],'python language')==('Matched!')\nassert string_literals(['program'],'python language')==('Not Matched!')\nassert string_literals(['python'],'programming language')==('Not Matched!')",
        "canonical_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')"
    },
    {
        "number": 179,
        "prompt": "Write a function to find if the given number is a keith number or not.\ndef is_num_keith(x): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n    # Declare an array to store all prime factors of x. \n    # Initialize all values as 1 \n    primes = [1] * x \n  \n    # Loop to calculate all the prime factors \n    for i in range(2, x): \n          \n        # If the number is divisible by any of the prime numbers then \n        # make its value 0 in the prime array \n        if x % i == 0: \n            primes[i] = 0\n  \n    # Iterate through all the prime array \n    for i in range(0, x): \n        if primes[i] == 0: \n            print(i) \n            return True\n    return False\n  \n# Iterate from 2 to 10 and find the keith numbers \nfor i in range(2, 11): \n    if is_num_keith(i): \n        print(i)\n\n",
        "generated_testcode": "assert is_num_keith(1) == True\n",
        "test": "assert is_num_keith(14) == True\nassert is_num_keith(12) == False\nassert is_num_keith(197) == True",
        "canonical_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) "
    },
    {
        "number": 180,
        "prompt": "Write a function to calculate distance between two points using latitude and longitude.\ndef distance_lat_long(slat,slon,elat,elon):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    import math\n    x = slon-elon\n    y = slat-elat\n    dist = math.sqrt(x**2 + y**2)\n    print(dist)\n    return dist\n\n",
        "generated_testcode": "assert distance_lat_long(45,45,45,45) == 0\n",
        "test": "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429\nassert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514\nassert distance_lat_long(10,20,30,40)==6783.751974994595",
        "canonical_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist"
    },
    {
        "number": 181,
        "prompt": "Write a function to find the longest common prefix in the given set of strings.\ndef common_prefix_util(str1, str2): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    n1 = len(str1) \n    n2 = len(str2) \n    for i in range(n1): \n        if not str1[i] == str2[0]: \n            return str1[0:i] \n    return str1[0:n2] \n\n",
        "generated_testcode": "assert common_prefix_util(\"abc\", \"abd\") == \"a\"\n",
        "test": "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'\nassert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'\nassert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'",
        "canonical_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) "
    },
    {
        "number": 182,
        "prompt": "Write a function to find uppercase, lowercase, special character and numeric values using regex.\ndef find_character(string):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = re.findall('[^\\s\\W]', string)\n    print(result)\n    for i in result:\n        print(i)\n\n",
        "generated_testcode": "assert find_character('') == '', 'Empty string should return empty string'\n",
        "test": "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])\nassert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])\nassert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])",
        "canonical_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters"
    },
    {
        "number": 183,
        "prompt": "Write a function to count all the distinct pairs having a difference of k in any array.\ndef count_pairs(arr, n, k):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    ans = 0\n\n",
        "generated_testcode": "assert count_pairs([1, 2, 3, 4, 5], 5, 2) == 2\n",
        "test": "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2\nassert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5\nassert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3",
        "canonical_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count"
    },
    {
        "number": 184,
        "prompt": "Write a function to find all the values in a list that are greater than a specified number.\ndef greater_specificnum(list,num):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "\tfinal_list = []\n\tfor i in range(len(list)):\n\t\tif list[i] > num:\n\t\t\tfinal_list.append(list[i])\n\treturn final_list\n\n",
        "generated_testcode": "assert greater_specificnum([1,2,3,4,5],2) == [3,4,5], \"Should be [3,4,5]\"\n",
        "test": "assert greater_specificnum([220, 330, 500],200)==True\nassert greater_specificnum([12, 17, 21],20)==False\nassert greater_specificnum([1,2,3,4],10)==False",
        "canonical_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum"
    },
    {
        "number": 185,
        "prompt": "Write a function to find the focus of a parabola.\ndef parabola_focus(a, b, c): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    '''\n    a is height of the parabola\n    b is slope of the parabola\n    c is intercept of the parabola\n    '''\n    return (c-(b**2/4))/a\n    # Write a function that given a, b, and c returns f(a).\n\n",
        "generated_testcode": "assert parabola_focus(1, 2, 3) == 1.5\n",
        "test": "assert parabola_focus(5,3,2)==(-0.3, 1.6)\nassert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)\nassert parabola_focus(2,4,6)==(-1.0, 4.125)",
        "canonical_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus"
    },
    {
        "number": 186,
        "prompt": "Write a function to search some literals strings in a string by using regex.\ndef check_literals(text, patterns):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for pattern in patterns:\n        match = re.search(pattern, text)\n        if match is not None:\n            return f'Found pattern \"{pattern}\"'\n    return 'No patterns found!'\n\n",
        "generated_testcode": "assert check_literals(\"This is a string with some literals\", \"is\") == True\n",
        "test": "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'\nassert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'",
        "canonical_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')"
    },
    {
        "number": 187,
        "prompt": "Write a function to find the longest common subsequence for the given two sequences.\ndef longest_common_subsequence(X, Y, m, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tif m == 0 or n == 0: \n\t\treturn 0\n  \n\telif X[m-1] == Y[n-1]: \n\t\treturn 1 + longest_common_subsequence(X, Y, m-1, n-1) \n  \n\telse: \n\t\treturn max(longest_common_subsequence(X, Y, m, n-1), \n\t\t\t\t\t\t\t\t\t\t\tlongest_common_subsequence(X, Y, m-1, n)) \n\n",
        "generated_testcode": "assert longest_common_subsequence('abcde', 'ace', 3, 5) == 3\n",
        "test": "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4\nassert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3\nassert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2",
        "canonical_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))"
    },
    {
        "number": 188,
        "prompt": "Write a python function to check whether the given number can be represented by product of two squares or not.\ndef prod_Square(n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sq1 = n // 4\n    sq2 = n // 2\n    sq3 = n // 4\n    sq4 = n // 2\n    if sq1*sq1 == n or sq2*sq2 == n or sq3*sq3 == n or sq4*sq4 == n:\n        print(\"true\")\n    else:\n        print(\"false\")\n\n",
        "generated_testcode": "assert prod_Square(1) == True\n",
        "test": "assert prod_Square(25) == False\nassert prod_Square(30) == False\nassert prod_Square(16) == True",
        "canonical_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;"
    },
    {
        "number": 189,
        "prompt": "Write a python function to find the first missing positive number.\ndef first_Missing_Positive(arr,n): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    # Traverse all array elements \n    for i in range(0, n): \n        if arr[i]<0 or arr[i]>n : \n            arr[i]=0\n    # If any element is negative, replace it with 0 \n    # negative numbers are absent in the list \n    for i in range(0, n): \n        if arr[i]<0: \n            arr[i]=0\n    # If all elements are positive, return -1 \n    for i in range(0, n): \n        if arr[i]>n: \n            return i \n    return n \n\n",
        "generated_testcode": "assert first_Missing_Positive([1,2,0],3) == 3\n",
        "test": "assert first_Missing_Positive([1,2,3,-1,5],5) == 4\nassert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2\nassert first_Missing_Positive([0,1,2,5,-8],5) == 3",
        "canonical_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)"
    },
    {
        "number": 190,
        "prompt": "Write a python function to count the number of integral co-ordinates that lie inside a square.\ndef count_Intgral_Points(x1,y1,x2,y2): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    # your code goes here\n    \n    # Using if, else, and elif \n    if (x1 <= x2 and y1 <= y2) or (x1 >= x2 and y1 >= y2): \n        return 1 \n    else: \n        return 0 \n  \n# Driver code \n  \n# x1 = 1\n# y1 = 1\n# x2 = 3\n# y2 = 3\nx1 = 2\ny1 = 3\nx2 = 5\ny2 = 5\ncount_Intgral_Points(x1,y1,x2,y2) \n",
        "generated_testcode": "assert count_Intgral_Points(1,1,2,2) == 1\n",
        "test": "assert count_Intgral_Points(1,1,4,4) == 4\nassert count_Intgral_Points(1,2,1,2) == 1\nassert count_Intgral_Points(4,2,6,4) == 1",
        "canonical_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) "
    },
    {
        "number": 191,
        "prompt": "Write a function to check whether the given month name contains 30 days or not.\ndef check_monthnumber(monthname3):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    months_30 = ['january','march','may', 'july', 'august', 'october', 'october', 'december']\n    months_30.remove(monthname3)\n    for i in months_30:\n        if monthname3 == i:\n            return False\n    return True\n    \n# Checking for leap year\ndef leapyear(year):\n    return year % 4 == 0 and (year % 100!= 0 or year % 400 == 0)\n\n",
        "generated_testcode": "assert check_monthnumber('February') == True\n",
        "test": "assert check_monthnumber(\"February\")==False\nassert check_monthnumber(\"June\")==True\nassert check_monthnumber(\"April\")==True",
        "canonical_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 192,
        "prompt": "Write a python function to check whether a string has atleast one letter and one number.\ndef check_String(str): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    l = list(str) \n    if len(l) == 0: \n        return False\n    for i in l: \n        if i.isalpha() or i.isdigit(): \n            return True\n    return False\n\n",
        "generated_testcode": "assert check_String(\"Hello\") == True\n",
        "test": "assert check_String('thishasboth29') == True\nassert check_String('python') == False\nassert check_String ('string') == False",
        "canonical_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n "
    },
    {
        "number": 193,
        "prompt": "Write a function to remove the duplicates from the given tuple.\ndef remove_tuple(test_tup):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(dict.fromkeys(test_tup))\n\n",
        "generated_testcode": "assert remove_tuple((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n",
        "test": "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)\nassert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)\nassert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)",
        "canonical_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) "
    },
    {
        "number": 194,
        "prompt": "Write a python function to convert octal number to decimal number.\ndef octal_To_Decimal(n):  \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    decimal = 0 \n    for i in range(len(str(n))):  \n        decimal = decimal + int(str(n)[i]) * (8 ** (len(str(n)) - i - 1))\n    return decimal\n\n",
        "generated_testcode": "assert octal_To_Decimal(0o0) == 0\n",
        "test": "assert octal_To_Decimal(25) == 21\nassert octal_To_Decimal(30) == 24\nassert octal_To_Decimal(40) == 32",
        "canonical_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; "
    },
    {
        "number": 195,
        "prompt": "Write a python function to find the first position of an element in a sorted array.\ndef first(arr,x,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(0,n): \n        if(arr[i] == x): \n            return i; \n    return -1; \n  \n  \n# Driver Code \narr = [1,3,3,5,7,7]; \nx = 7; \nn = len(arr); \nprint(\"First occurrence of \",x,\" is at index \", \nfirst(arr,x,n)); \n  \n# This code is contributed by Ryuga \n",
        "generated_testcode": "assert first([1,2,3,4,5,6,7,8,9],5,9) == 5\n",
        "test": "assert first([1,2,3,4,5,6,6],6,6) == 5\nassert first([1,2,2,2,3,2,2,4,2],2,9) == 1\nassert first([1,2,3],1,3) == 0",
        "canonical_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res"
    },
    {
        "number": 196,
        "prompt": "Write a function to remove all the tuples with length k.\ndef remove_tuples(test_list, K):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(test_list) - 1, -1, -1):\n        if len(test_list[i]) == K:\n            test_list.pop(i)\n\n",
        "generated_testcode": "assert remove_tuples([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == [(1, 2), (3, 4), (5, 6)]\n",
        "test": "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]\nassert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]\nassert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]",
        "canonical_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) "
    },
    {
        "number": 197,
        "prompt": "Write a function to perform the exponentiation of the given two tuples.\ndef find_exponentio(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Write your code here\n    if len(test_tup1) == 2:\n        return math.pow(test_tup1[0], test_tup1[1]), 'Recursion Error'\n    elif len(test_tup2) == 2:\n        return math.pow(test_tup2[0], test_tup2[1]), 'Recursion Error'\n    elif len(test_tup1) == 1:\n        return math.pow(test_tup1[0], 1), test_tup2\n    else:\n        return math.pow(test_tup1[0], test_tup1[1]), math.pow(test_tup2[0], test_tup2[1])\n\n",
        "generated_testcode": "assert find_exponentio((1, 2), (3, 4)) == (81, 64)\n",
        "test": "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)\nassert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)\nassert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)",
        "canonical_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n"
    },
    {
        "number": 198,
        "prompt": "Write a function to find the largest triangle that can be inscribed in an ellipse.\ndef largest_triangle(a,b): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    assert a>0 and b>0, 'a and b must be positive'\n    if a == b:\n        return a**2\n    return a**2 + b**2 + (a*b)**2\n\n",
        "generated_testcode": "assert largest_triangle(1,1) == 1\n",
        "test": "assert largest_triangle(4,2)==10.392304845413264\nassert largest_triangle(5,7)==4.639421805988064\nassert largest_triangle(9,1)==105.2220865598093",
        "canonical_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area "
    },
    {
        "number": 199,
        "prompt": "Write a python function to find highest power of 2 less than or equal to given number.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n==0: \n        return 0 \n    while(n%2==0): \n        n = n//2\n    return n \n\n",
        "generated_testcode": "assert highest_Power_of_2(1) == 1\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; "
    },
    {
        "number": 200,
        "prompt": "Write a function to find all index positions of the maximum values in a given list.\ndef position_max(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    #max = list1[0]\n    #index = 0\n    max = list1[0]\n    index = 0\n    for i in range(len(list1)):\n        if list1[i] > max:\n            max = list1[i]\n            index = i\n    return index\n\n",
        "generated_testcode": "assert position_max([1,2,3,4,5,6,7,8,9]) == [0,1,2,3,4,5,6,7,8]\n",
        "test": "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]\nassert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]\nassert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]",
        "canonical_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result"
    },
    {
        "number": 201,
        "prompt": "Write a python function to check whether the elements in a list are same or not.\ndef chkList(lst): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return any(x==lst[0] for x in lst)\n\n",
        "generated_testcode": "assert chkList([1,2,3,4,5]) == True\n",
        "test": "assert chkList(['one','one','one']) == True\nassert chkList(['one','Two','Three']) == False\nassert chkList(['bigdata','python','Django']) == False",
        "canonical_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1"
    },
    {
        "number": 202,
        "prompt": "Write a function to remove even characters in a string.\ndef remove_even(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if not str1:\n        return str1\n    else:\n        new_str = \"\"\n        for char in str1:\n            if char.isnumeric():\n                new_str += char\n        return new_str\n\n",
        "generated_testcode": "assert remove_even(\"abcde\") == \"abcd\", \"Should remove even characters\"\n",
        "test": "assert remove_even(\"python\")==(\"pto\")\nassert remove_even(\"program\")==(\"porm\")\nassert remove_even(\"language\")==(\"lnug\")",
        "canonical_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 203,
        "prompt": "Write a python function to find the hamming distance between given two integers.\ndef hamming_Distance(n1,n2) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    n1 = str(bin(n1))\n    n2 = str(bin(n2))\n    if n1.find('0') == n2.find('0'):\n        return count\n    else:\n        count = n1.count('1') + n2.count('1')\n        return count\n",
        "generated_testcode": "assert hamming_Distance(1,2) == 1\n",
        "test": "assert hamming_Distance(4,8) == 2\nassert hamming_Distance(2,4) == 2\nassert hamming_Distance(1,2) == 2",
        "canonical_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  "
    },
    {
        "number": 204,
        "prompt": "Write a python function to count the occurrence of a given character in a string.\ndef count(s,c) : \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in s : \n        if i == c : \n            count = count + 1\n    return count\n\n",
        "generated_testcode": "assert count('hello', 'l') == 2\n",
        "test": "assert count(\"abcc\",\"c\") == 2\nassert count(\"ababca\",\"a\") == 3\nassert count(\"mnmm0pm\",\"m\") == 4",
        "canonical_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res "
    },
    {
        "number": 205,
        "prompt": "Write a function to find the inversions of tuple elements in the given tuple list.\ndef inversion_elements(test_tup):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    inversion = 0\n    for i in range(len(test_tup)):\n        for j in range(i+1,len(test_tup)):\n            if test_tup[i] > test_tup[j]:\n                inversion += 1\n    return inversion\n\n",
        "generated_testcode": "assert inversion_elements([1, 2, 3, 4, 5]) == 0\n",
        "test": "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)\nassert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)\nassert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)",
        "canonical_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) "
    },
    {
        "number": 206,
        "prompt": "Write a function to perform the adjacent element concatenation in the given tuples.\ndef concatenate_elements(test_tup):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    tup1 = tuple(test_tup)\n    tup2 = tuple(test_tup[::-1])\n    return tup1 + tup2\nprint(concatenate_elements((1,2,3,4,5)))\n\n",
        "generated_testcode": "assert concatenate_elements((1, 2, 3, 4, 5)) == '12345', \"Should be 12345\"\n",
        "test": "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')\nassert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')\nassert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')",
        "canonical_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 207,
        "prompt": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.\ndef find_longest_repeating_subseq(str): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n    # Initialize the table of size str.length + 1 \n    # (+ 1 to account for'' character) \n    # and initialize result as 0. \n    result = 0\n    length = len(str) \n  \n    # Create a table to store results of subproblems \n    table = [[0 for j in range(length)] for i in range(length)] \n  \n    # Fill the table using recurrence relation. \n    # The table is filled in diagonal fashion, \n    # and for first column, we have to consider \n    # all strings of length 1. \n    # For each of the other columns, we already \n    # know strings of length 1 (from the previous column) \n    # and also the current substring from the previous \n    # column. So, we just need to fill the table diagonally. \n    # For each column except the last column, the \n    # strings of length 2 and above can be obtained \n    # by removing the last character of the previous \n    # column and adding the same character in this column. \n    for i in range(length): \n  \n        # Fill the table row-wise. \n        for j in range(length): \n  \n            # If the current character is same, \n            # add 1 to its count, else 0. \n            if (str[i] == str[j]): \n                table[i][j] = table[i - 1][j - 1] + 1\n            else",
        "generated_testcode": "assert find_longest_repeating_subseq(\"abcabc\") == 3\n",
        "test": "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3\nassert find_longest_repeating_subseq(\"aabb\") == 2\nassert find_longest_repeating_subseq(\"aab\") == 1",
        "canonical_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]"
    },
    {
        "number": 208,
        "prompt": "Write a function to check the given decimal with a precision of 2 by using regex.\ndef is_decimal(num):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if str(num).count(\".\")==1:\n        n1 = num.split(\".\")\n        if int(n1[0]) == 0:\n            if int(n1[1]) == 0:\n                return True\n        else:\n            return False\n    else:\n        return False\n\n",
        "generated_testcode": "assert is_decimal(1.1) == True\n",
        "test": "assert is_decimal('123.11') == True\nassert is_decimal('0.21') == True\nassert is_decimal('123.1214') == False",
        "canonical_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)"
    },
    {
        "number": 209,
        "prompt": "Write a function to delete the smallest element from the given heap and then insert a new item.\ndef heap_replace(heap,a):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    value = heap[0]\n    \n    if heap[0] > heap[1]:\n        heap[0], heap[1] = heap[1], heap[0]\n\n",
        "generated_testcode": "assert heap_replace([1,2,3,4,5],2) == [1,2,3,4,5]\n",
        "test": "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]\nassert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]",
        "canonical_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap"
    },
    {
        "number": 210,
        "prompt": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.\ndef is_allowed_specific_char(string):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\timport re\n\tx = re.search(\"[a-z]\",string)\n\ty = re.search(\"[A-Z]\",string)\n\tz = re.search(\"[0-9]\",string)\n\tif x and y and z:\n\t\tprint(\"True\")\n\telse:\n\t\tprint(\"False\")\n\n",
        "generated_testcode": "assert is_allowed_specific_char(\"A23G4H3\") == True\n",
        "test": "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True\nassert is_allowed_specific_char(\"*&%@#!}{\") == False\nassert is_allowed_specific_char(\"HELLOhowareyou98765\") == True",
        "canonical_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)"
    },
    {
        "number": 211,
        "prompt": "Write a python function to count numbers whose oth and nth bits are set.\ndef count_Num(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while (n): \n        count += (n & 1) \n        n >>= 1\n    return count \n\n",
        "generated_testcode": "assert count_Num(0) == 0\n",
        "test": "assert count_Num(2) == 1\nassert count_Num(3) == 2\nassert count_Num(1) == 1",
        "canonical_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count "
    },
    {
        "number": 212,
        "prompt": "Write a python function to find the sum of fourth power of n natural numbers.\ndef fourth_Power_Sum(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    sum_of_fourth_power = 0\n    for i in range(1, n+1):\n        sum_of_fourth_power += i**4\n    return sum_of_fourth_power\n\n",
        "generated_testcode": "assert fourth_Power_Sum(1) == 1\n",
        "test": "assert fourth_Power_Sum(2) == 17\nassert fourth_Power_Sum(4) == 354\nassert fourth_Power_Sum(6) == 2275",
        "canonical_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum"
    },
    {
        "number": 213,
        "prompt": "Write a function to perform the concatenation of two string tuples.\ndef concatenate_strings(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    first_string = str(test_tup1[0]) + str(test_tup2[0])\n    second_string = str(test_tup1[1]) + str(test_tup2[1])\n    return first_string, second_string\n\n",
        "generated_testcode": "assert concatenate_strings(('a', 'b'), ('c', 'd')) == 'abc'\n",
        "test": "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')\nassert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')\nassert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')",
        "canonical_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 214,
        "prompt": "Write a function to convert radians to degrees.\ndef degree_radian(radian):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    degrees = radian * 180 / math.pi\n    return degrees\n\n",
        "generated_testcode": "assert degree_radian(math.pi/2) == 90\n",
        "test": "assert degree_radian(90)==5156.620156177409\nassert degree_radian(60)==3437.746770784939\nassert degree_radian(120)==6875.493541569878",
        "canonical_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree"
    },
    {
        "number": 215,
        "prompt": "Write a function to decode a run-length encoded given list.\ndef decode_list(alist):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    newlist = []\n    for i in range(len(alist)):\n        if alist[i]!= 0:\n            newlist.append(alist[i])\n        if alist[i] == 0:\n            newlist.append(newlist.pop() + newlist.pop())\n    return newlist\n\n",
        "generated_testcode": "assert decode_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]\nassert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']\nassert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]"
    },
    {
        "number": 216,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset_list(list1, list2): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    # To find subset, iterate through list1 and check if any element \n    # of list1 is present in list2.\n    if len(list1) > 0:\n        for i in range(len(list1)): \n            if list1[i] in list2: \n                list2.remove(list1[i])\n            else: \n                return False\n        return True\n    else: \n        return False\n\n",
        "generated_testcode": "assert check_subset_list([1, 2, 3], [1, 2, 3]) == True\n",
        "test": "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False\nassert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True\nassert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False",
        "canonical_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist "
    },
    {
        "number": 217,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_Repeated_Char(str): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tstr = str.lower()\n\tstr = ''.join(ch for ch in str if ch.isalnum())\n\tstr = ''.join(set(str))\n\tstr = str.strip()\n\tdict_str = {}\n\tfor i in str:\n\t\tdict_str[i] = str.count(i)\n\n",
        "generated_testcode": "assert first_Repeated_Char(\"abcd\") == \"d\"\n",
        "test": "assert first_Repeated_Char(\"Google\") == \"o\"\nassert first_Repeated_Char(\"data\") == \"a\"\nassert first_Repeated_Char(\"python\") == '\\0'",
        "canonical_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'"
    },
    {
        "number": 218,
        "prompt": "Write a python function to find the minimum operations required to make two numbers equal.\ndef min_Operations(A,B):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    if A == B:\n        return count\n    if A < B:\n        while A!= B:\n            A = A - 1\n            count = count + 1\n        return count\n    elif A > B:\n        while A!= B:\n            A = A + 1\n            count = count + 1\n        return count\n\n",
        "generated_testcode": "assert min_Operations(10,20) == 2\n",
        "test": "assert min_Operations(2,4) == 1\nassert min_Operations(4,10) == 4\nassert min_Operations(1,4) == 3",
        "canonical_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1"
    },
    {
        "number": 219,
        "prompt": "Write a function to extract maximum and minimum k elements in the given tuple.\ndef extract_min_max(test_tup, K):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  print(test_tup[:K])\n  print(test_tup[-K:])\n  print(test_tup[-K:])\n  print(test_tup[:-K])\n\n",
        "generated_testcode": "assert extract_min_max((1, 2, 3, 4, 5), 2) == (1, 4)\n",
        "test": "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)\nassert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)\nassert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)",
        "canonical_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) "
    },
    {
        "number": 220,
        "prompt": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.\ndef replace_max_specialchar(text,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    text = text.replace(' ',':')\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    if n>=1:\n        text = text.replace(':',' ')\n        text = text.replace(' ',':')\n    else:\n        text = text.replace(':',' ')\n    return text\n\n",
        "generated_testcode": "assert replace_max_specialchar(text,n) == \"This is a test of the emergency broadcast network\"\n\n",
        "test": "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')\nassert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')\nassert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')",
        "canonical_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))"
    },
    {
        "number": 221,
        "prompt": "Write a python function to find the first even number in a given list of numbers.\ndef first_even(nums):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in nums:\n        if i%2 ==0:\n            return i\n\n",
        "generated_testcode": "assert first_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 2\n",
        "test": "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4\nassert first_even([2, 3, 4]) == 2\nassert first_even([5, 6, 7]) == 6",
        "canonical_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even"
    },
    {
        "number": 222,
        "prompt": "Write a function to check if all the elements in tuple have same data type or not.\ndef check_type(test_tuple):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) is not type(test_tuple[0]):\n            return False\n    return True\n\n",
        "generated_testcode": "assert check_type((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == True, \"All elements are of same data type\"\n",
        "test": "assert check_type((5, 6, 7, 3, 5, 6) ) == True\nassert check_type((1, 2, \"4\") ) == False\nassert check_type((3, 2, 1, 4, 5) ) == True",
        "canonical_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) "
    },
    {
        "number": 223,
        "prompt": "Write a function to check for majority element in the given sorted array.\ndef is_majority(arr, n, x):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    \n    left = 0\n    right = n-1\n    \n    while left <= right:\n        mid = (left+right) // 2\n        if arr[mid] == x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    if left >= n // 2:\n        return True\n    return False\n\n",
        "generated_testcode": "assert is_majority([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10, 5) == True\n",
        "test": "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True\nassert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False\nassert is_majority([1, 1, 1, 2, 2], 5, 1) == True",
        "canonical_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1"
    },
    {
        "number": 224,
        "prompt": "Write a python function to count set bits of a given number.\ndef count_Set_Bits(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while(n): \n        count = count + (n & 1) \n        n = n >> 1 \n    return count \n\n",
        "generated_testcode": "assert count_Set_Bits(0) == 0\n",
        "test": "assert count_Set_Bits(2) == 1\nassert count_Set_Bits(4) == 1\nassert count_Set_Bits(6) == 2",
        "canonical_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count "
    },
    {
        "number": 225,
        "prompt": "Write a python function to find the minimum element in a sorted and rotated array.\ndef find_Min(arr,low,high): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\t\n\tif (high >= low): \n\t\tmid = int(low + (high - low)/2) \n\t\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and \n\t\t\t(mid == len(arr) - 1 or arr[mid] <= arr[mid + 1])): \n\t\t\treturn mid \n\t\telif (arr[mid] > arr[0]): \n\t\t\treturn find_Min(arr, low, mid - 1) \n\t\telse: \n\t\t\treturn find_Min(arr, mid + 1, high) \n\telse: \n\t\treturn low \n\n",
        "generated_testcode": "assert find_Min([1,2,3,4,5,6,7,8,9],0,9) == 1\n",
        "test": "assert find_Min([1,2,3,4,5],0,4) == 1\nassert find_Min([4,6,8],0,2) == 4\nassert find_Min([2,3,5,7,9],0,4) == 2",
        "canonical_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; "
    },
    {
        "number": 226,
        "prompt": "Write a python function to remove the characters which have odd index values of a given string.\ndef odd_values_string(str):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result=''\n    for i in range(len(str)):\n        if i%2!=0:\n            result+=str[i]\n    print(result)\n\n",
        "generated_testcode": "assert odd_values_string(\"abcd\") == \"bcd\"\n",
        "test": "assert odd_values_string('abcdef') == 'ace'\nassert odd_values_string('python') == 'pto'\nassert odd_values_string('data') == 'dt'",
        "canonical_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result"
    },
    {
        "number": 227,
        "prompt": "Write a function to find minimum of three numbers.\ndef min_of_three(a,b,c): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if a <= b and a <= c: \n        return a \n    elif b <= a and b <= c: \n        return b \n    else: \n        return c \n\n",
        "generated_testcode": "assert min_of_three(1,2,3) == 1\n",
        "test": "assert min_of_three(10,20,0)==0\nassert min_of_three(19,15,18)==15\nassert min_of_three(-10,-20,-30)==-30",
        "canonical_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest "
    },
    {
        "number": 228,
        "prompt": "Write a python function to check whether all the bits are unset in the given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return not (n & (1 << l)) and not (n & (1 << r))   \n\n",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(5,0,4) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True\nassert all_Bits_Set_In_The_Given_Range(17,2,4) == True\nassert all_Bits_Set_In_The_Given_Range(39,4,6) == False",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False"
    },
    {
        "number": 229,
        "prompt": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.\ndef re_arrange_array(arr, n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n):\n        if arr[i] < 0:\n            count += 1\n    arr = count + arr\n    return arr\n\n",
        "generated_testcode": "assert re_arrange_array(arr, n) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31, -3",
        "test": "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]\nassert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]\nassert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]",
        "canonical_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr"
    },
    {
        "number": 230,
        "prompt": "Write a function to replace blank spaces with any character in a string.\ndef replace_blank(str1,char):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    i=0\n    for i in range(len(str1)):\n        if(str1[i]==' '):\n            str1=str1[:i]+char+str1[i+1:]\n    return str1\n\n",
        "generated_testcode": "assert replace_blank(\"a b c\",' ') == \"a b c\", \"Should be a b c\"\n",
        "test": "assert replace_blank(\"hello people\",'@')==(\"hello@people\")\nassert replace_blank(\"python program language\",'$')==(\"python$program$language\")\nassert replace_blank(\"blank space\",\"-\")==(\"blank-space\")",
        "canonical_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2"
    },
    {
        "number": 231,
        "prompt": "Write a function to find the maximum sum in the given right triangle of numbers.\ndef max_sum(tri, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tfor i in range(n): \n\t\tfor j in range(i + 1): \n\t\t\tprint(tri[i][j], end ='') \n\t\tprint(\"\") \n\tfor i in range(1, n): \n\t\tfor j in range(i): \n\t\t\tprint(tri[i][j], end ='') \n\t\tprint(\"\") \n\n",
        "generated_testcode": "assert max_sum([[1, 2, 3], \n                [4, 5, 6], \n                [7, 8, 9]], 3) == 27\n\n",
        "test": "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6\nassert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 \nassert max_sum([[2], [3,2], [13,23,12]], 3) == 28",
        "canonical_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))"
    },
    {
        "number": 232,
        "prompt": "Write a function to get the n largest items from a dataset.\ndef larg_nnum(list1,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    import heapq\n    list1=sorted(list1)\n    list2=[]\n    for i in range(n):\n        heapq.heappush(list2,list1[n-i-1])\n    print(list2)\n\n",
        "generated_testcode": "assert larg_nnum([1,2,3,4,5],2) == [3,4]\n",
        "test": "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]\nassert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]",
        "canonical_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest"
    },
    {
        "number": 233,
        "prompt": "Write a function to find the lateral surface area of a cylinder.\ndef lateralsuface_cylinder(r,h):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return (2*pi*r*h)+pi*r**2\n\n",
        "generated_testcode": "assert lateralsuface_cylinder(1,1) == 2\n",
        "test": "assert lateralsuface_cylinder(10,5)==314.15000000000003\nassert lateralsuface_cylinder(4,5)==125.66000000000001\nassert lateralsuface_cylinder(4,10)==251.32000000000002",
        "canonical_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface"
    },
    {
        "number": 234,
        "prompt": "Write a function to find the volume of a cube.\ndef volume_cube(l):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"Returns the volume of a cube with length l.\n    >>> volume_cube(1)\n    1\n    >>> volume_cube(5)\n    100\n    >>> volume_cube(13)\n    1300\n    \"\"\"\n    return l * l * l\n\n",
        "generated_testcode": "assert volume_cube(1) == 1\n",
        "test": "assert volume_cube(3)==27\nassert volume_cube(2)==8\nassert volume_cube(5)==125",
        "canonical_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume"
    },
    {
        "number": 235,
        "prompt": "Write a python function to set all even bits of a given number.\ndef even_bit_set_number(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  \n    # set all even bits\n    n = n | 0x55555555\n    \n    # set all odd bits\n    n = n & 0xaaaaaaaa\n    \n    # return the number after OR operation\n    return n\n\n",
        "generated_testcode": "assert even_bit_set_number(0) == 0\n",
        "test": "assert even_bit_set_number(10) == 10\nassert even_bit_set_number(20) == 30\nassert even_bit_set_number(30) == 30",
        "canonical_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) "
    },
    {
        "number": 236,
        "prompt": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.\ndef No_of_Triangle(N,K):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            for k in range(j+1, N):\n                if(abs(j-i) == abs(k-j)):\n                    count += 1\n                elif(abs(j-i) + abs(k-j) == abs(k-j)):\n                    count += 1\n    return count\n\n",
        "generated_testcode": "assert No_of_Triangle(3,3) == 3\n",
        "test": "assert No_of_Triangle(4,2) == 7\nassert No_of_Triangle(4,3) == 3\nassert No_of_Triangle(1,3) == -1",
        "canonical_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;"
    },
    {
        "number": 237,
        "prompt": "Write a function to check the occurrences of records which occur similar times in the given tuples.\ndef check_occurences(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    tuple_dict = {}\n    for each_tuple in test_list:\n        if tuple_dict.get(each_tuple):\n            tuple_dict[each_tuple] += 1\n        else:\n            tuple_dict[each_tuple] = 1\n    for each_tuple in tuple_dict:\n        if tuple_dict[each_tuple] > len(test_list) / 2:\n            return each_tuple\n    return -1\n\n",
        "generated_testcode": "assert check_occurences(test_list) == True\n\n",
        "test": "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}\nassert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}\nassert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}",
        "canonical_solution": "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = dict(Counter(tuple(ele) for ele in map(sorted, test_list)))\r\n  return  (res) "
    },
    {
        "number": 238,
        "prompt": "Write a python function to count number of non-empty substrings of a given string.\ndef number_of_substrings(str): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    n = len(str) \n    for i in range(0, n): \n        for j in range(i, n): \n            substring = str[i:j + 1] \n            if len(substring) and substring.isalpha(): \n                count += 1\n    return count\nprint(\"The number of substrings with non-empty characters:\", number_of_substrings(\"the quick brown fox jumps over the lazy dog\"))",
        "generated_testcode": "assert number_of_substrings(\"\") == 0, \"Empty string\"\n",
        "test": "assert number_of_substrings(\"abc\") == 6\nassert number_of_substrings(\"abcd\") == 10\nassert number_of_substrings(\"abcde\") == 15",
        "canonical_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); "
    },
    {
        "number": 239,
        "prompt": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.\ndef get_total_number_of_sequences(m,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 1: \n        return 1\n    number_of_sequences = 0\n    for x in range(m): \n        number_of_sequences += get_total_number_of_sequences(n - 1, m) * (2 ** x) \n    return number_of_sequences \n\n",
        "generated_testcode": "assert get_total_number_of_sequences(10,5) == 5\n",
        "test": "assert get_total_number_of_sequences(10, 4) == 4\nassert get_total_number_of_sequences(5, 2) == 6\nassert get_total_number_of_sequences(16, 3) == 84",
        "canonical_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]"
    },
    {
        "number": 240,
        "prompt": "Write a function to replace the last element of the list with another list.\ndef replace_list(list1,list2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    list1[len(list1)-1] = list2\n    return list1\n\n",
        "generated_testcode": "assert replace_list([1,2,3,4,5], [1,2,3,4,6]) == [1,2,3,4,6], \"Should be 6\"\n",
        "test": "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]\nassert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]\nassert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]",
        "canonical_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n"
    },
    {
        "number": 241,
        "prompt": "Write a function to generate a 3d array having each element as '*'.\ndef array_3d(m,n,o):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    array=[]\n    for i in range(m):\n        array.append(['*']*n)\n    for i in range(o):\n        for j in range(n):\n            array[i][j]='*'\n    return array\narray=array_3d(3,3,2)\nfor i in range(len(array)):\n    print(*array[i])",
        "generated_testcode": "assert array_3d(3,4,5) == [['*'] * 4] * 5\n",
        "test": "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]\nassert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]\nassert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]",
        "canonical_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d"
    },
    {
        "number": 242,
        "prompt": "Write a function to count total characters in a string.\ndef count_charac(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return len(str1)\n\n",
        "generated_testcode": "assert count_charac(\"Hello World\") == 12\n",
        "test": "assert count_charac(\"python programming\")==18\nassert count_charac(\"language\")==8\nassert count_charac(\"words\")==5",
        "canonical_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total"
    },
    {
        "number": 243,
        "prompt": "Write a function to sort the given list based on the occurrence of first element of tuples.\ndef sort_on_occurence(lst): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    \n    # Removing first element of each tuple\n    new_lst = []\n    for tup in lst:\n        new_lst.append(tup[1:])\n    lst = new_lst\n    \n    # Sorting based on occurrence of first element of each tuple\n    lst.sort(key = lambda x: x[0])\n    \n    # Removing first element of each tuple\n    for tup in lst:\n        tup = tup[1:]\n    return lst\n\n",
        "generated_testcode": "assert sort_on_occurence(['a', 'b', 'c', 'd', 'e', 'f']) == ['a', 'b', 'c', 'd', 'e', 'f'], \"Should be ['a', 'b', 'c', 'd', 'e', 'f']\"\n",
        "test": "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]\nassert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]\nassert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]",
        "canonical_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) "
    },
    {
        "number": 244,
        "prompt": "Write a python function to find the next perfect square greater than a given number.\ndef next_Perfect_Square(N): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    # Base Case \n    if (N == 1): \n        return 1\n  \n    # If N is not perfect square  \n    if ((N * N) % 1!= 0): \n        return int(N + 1)  \n  \n    # If N is perfect square  \n    if (N >= 1):  \n        return int(N * N) \n  \n# Driver Program  \nprint(next_Perfect_Square(15)) \n  \n# This code is contributed by Anant Agarwal. ",
        "generated_testcode": "assert next_Perfect_Square(1) == 1\n",
        "test": "assert next_Perfect_Square(35) == 36\nassert next_Perfect_Square(6) == 9\nassert next_Perfect_Square(9) == 16",
        "canonical_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN "
    },
    {
        "number": 245,
        "prompt": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.\ndef max_sum(arr, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = 0\n    i = 0\n    while(i < n): \n        j = i + 1\n        while(j < n): \n            current_sum = arr[i] + arr[j] \n            if(current_sum > max_sum): \n                max_sum = current_sum\n            j = j + 1\n        i = i + 1\n    return max_sum\n    \narr = []\nn = int(input())\nfor i in range(n):\n    arr.append(int(input()))\nprint(max_sum(arr, n))",
        "generated_testcode": "assert max_sum([1, 2, 3, 4, 5], 5) == 15\n",
        "test": "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194\nassert max_sum([80, 60, 30, 40, 20, 10], 6) == 210\nassert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138",
        "canonical_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum"
    },
    {
        "number": 246,
        "prompt": "Write a function for computing square roots using the babylonian method.\ndef babylonian_squareroot(number):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "\t'''\n\tCompute the square root using the Babylonian method.\n\t'''\n\tguess = number/2.0\n\tepsilon = 0.00001\n\twhile abs(guess**2 - number) > epsilon:\n\t\tguess = guess - (guess**2 - number)/(2*guess)\n\treturn guess\n\n",
        "generated_testcode": "assert(babylonian_squareroot(4) == 2)\n",
        "test": "assert babylonian_squareroot(10)==3.162277660168379\nassert babylonian_squareroot(2)==1.414213562373095\nassert babylonian_squareroot(9)==3.0",
        "canonical_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;"
    },
    {
        "number": 247,
        "prompt": "Write a function to find the longest palindromic subsequence in the given string.\ndef lps(str): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(str) \n  \n    # Create a table to store lengths of  \n    # longest palindromic subsequences \n    L = [[0 for x in range(n)]  \n          for y in range(n)] \n  \n    # Fill dp_table in bottom up manner \n    for i in range(n): \n        for j in range(n): \n            if (i == 0 or j == 0): \n                L[i][j] = 1\n            elif str[i] == str[j]: \n                L[i][j] = L[i - 1][j - 1] + 2\n            else: \n                L[i][j] = max(L[i - 1][j], L[i][j - 1]) \n  \n    # Find the length of the  \n    # longest palindromic subsequence \n    return (L[n - 1][n - 1]) \n\n",
        "generated_testcode": "assert lps(\"abcdcba\") == \"dcb\"\n",
        "test": "assert lps(\"TENS FOR TENS\") == 5 \nassert lps(\"CARDIO FOR CARDS\") == 7\nassert lps(\"PART OF THE JOURNEY IS PART\") == 9 ",
        "canonical_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]"
    },
    {
        "number": 248,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    \"\"\"\n    >>> harmonic_sum(5)\n    11.0\n    >>> harmonic_sum(10)\n    42.0\n    >>> harmonic_sum(15)\n    77.0\n    \"\"\"\n    \"*** YOUR CODE HERE ***\"\n    return 1 + (1/2) * (n - 1)\n\n",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(7) == 2.5928571428571425\nassert harmonic_sum(4) == 2.083333333333333\nassert harmonic_sum(19) == 3.547739657143682",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) "
    },
    {
        "number": 249,
        "prompt": "Write a function to find the intersection of two arrays using lambda function.\ndef intersection_array(array_nums1,array_nums2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(set(array_nums1) & set(array_nums2))\n\n",
        "generated_testcode": "assert intersection_array(array_nums1,array_nums2) == [1,2,3,4,5]\n\n",
        "test": "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]\nassert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]",
        "canonical_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result"
    },
    {
        "number": 250,
        "prompt": "Write a python function to count the occcurences of an element in a tuple.\ndef count_X(tup, x): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    tup_count = 0\n    for i in tup: \n        if i == x: \n            tup_count += 1\n    return tup_count\nt = int(input())\nfor i in range(t):\n    n = int(input())\n    tup = tuple(map(int, input().strip().split()))\n    x = int(input())\n    print(count_X(tup, x))",
        "generated_testcode": "assert count_X((1, 2, 3, 4, 5), 1) == 4\n",
        "test": "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3\nassert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4",
        "canonical_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count "
    },
    {
        "number": 251,
        "prompt": "Write a function to insert an element before each element of a list.\ndef insert_element(list,element):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list)):\n        list.insert(i,element)\n\n",
        "generated_testcode": "assert insert_element([1,2,3,4,5],6) == [1,2,3,4,6,5]\n",
        "test": "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] \nassert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] \nassert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] ",
        "canonical_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list"
    },
    {
        "number": 252,
        "prompt": "Write a python function to convert complex numbers to polar coordinates.\ndef convert(numbers):    \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # convert polar coordinates\n    # polar coordinates: angle and magnitude\n    for number in numbers:\n        # convert to cartesian coordinates\n        x = number.real\n        y = number.imag\n        print(x, y)\n\n",
        "generated_testcode": "assert convert(complex(1, 2)) == (1.0, 3.14)\n",
        "test": "assert convert(1) == (1.0, 0.0)\nassert convert(4) == (4.0,0.0)\nassert convert(5) == (5.0,0.0)",
        "canonical_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) "
    },
    {
        "number": 253,
        "prompt": "Write a python function to count integers from a given list.\ndef count_integer(list1):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    for num in list1:\n        if isinstance(num, int):\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert count_integer([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10, \"Should be 10\"\n",
        "test": "assert count_integer([1,2,'abc',1.2]) == 2\nassert count_integer([1,2,3]) == 3\nassert count_integer([1,1.2,4,5.1]) == 2",
        "canonical_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr"
    },
    {
        "number": 254,
        "prompt": "Write a function to find all words starting with 'a' or 'e' in a given string.\ndef words_ae(text):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for i in range(len(text)):\n        if text[i] == 'a' or text[i] == 'e':\n            result.append(text[i:i + len(text)])\n    return result\n\n",
        "generated_testcode": "assert words_ae(\"a\") == [\"a\"]\n",
        "test": "assert words_ae(\"python programe\")==['ame']\nassert words_ae(\"python programe language\")==['ame','anguage']\nassert words_ae(\"assert statement\")==['assert', 'atement']",
        "canonical_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list"
    },
    {
        "number": 255,
        "prompt": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.\ndef combinations_colors(l, n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if l == n:\n        print(l)\n        return\n    if l < n:\n        print(l)\n        return\n    for i in range(l, len(colors)):\n        colors[i] = None\n        combinations_colors(l+1, n)\n        colors[i] = 'gray'\n    return\n\n",
        "generated_testcode": "assert combinations_colors([1, 2, 3], 2) == [[1, 2], [1, 3], [2, 3]]\n",
        "test": "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]\nassert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]",
        "canonical_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r"
    },
    {
        "number": 256,
        "prompt": "Write a python function to count the number of prime numbers less than a given non-negative number.\ndef count_Primes_nums(n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < 3:\n        return 0\n    prime_nums = []\n    isPrime = [True] * n\n    isPrime[0] = isPrime[1] = False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if isPrime[i]:\n            for j in range(i * i, n, i):\n                isPrime[j] = False\n    count = 0\n    for i in range(n):\n        if isPrime[i]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert count_Primes_nums(10) == 5\n",
        "test": "assert count_Primes_nums(5) == 2\nassert count_Primes_nums(10) == 4\nassert count_Primes_nums(100) == 25",
        "canonical_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr"
    },
    {
        "number": 257,
        "prompt": "Write a function to swap two numbers.\ndef swap_numbers(a,b):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    temp=a\n    a=b\n    b=temp\n    return a,b\n#Example:\na=2\nb=3\nswap_numbers(a,b)\nprint(a,b)\na=4\nb=5\nswap_numbers(a,b)\nprint(a,b)",
        "generated_testcode": "assert swap_numbers(1,2) == 2, \"Should swap 1 and 2\"\n",
        "test": "assert swap_numbers(10,20)==(20,10)\nassert swap_numbers(15,17)==(17,15)\nassert swap_numbers(100,200)==(200,100)",
        "canonical_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)"
    },
    {
        "number": 258,
        "prompt": "Write a function to find number of odd elements in the given list using lambda function.\ndef count_odd(array_nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return len(list(filter(lambda x: x%2==1, array_nums)))\n\n",
        "generated_testcode": "assert count_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n",
        "test": "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4\nassert count_odd([10,15,14,13,-18,12,-20])==2\nassert count_odd([1, 2, 4, 8, 9])==2",
        "canonical_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd"
    },
    {
        "number": 259,
        "prompt": "Write a function to maximize the given two tuples.\ndef maximize_elements(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if test_tup1[0] > test_tup2[0]:\n        print(f\"First Tuple: {test_tup1}\")\n    elif test_tup1[0] == test_tup2[0]:\n        if test_tup1[1] > test_tup2[1]:\n            print(f\"First Tuple: {test_tup1}\")\n        else:\n            print(f\"Second Tuple: {test_tup2}\")\n    else:\n        print(f\"Second Tuple: {test_tup2}\")\n\n",
        "generated_testcode": "assert maximize_elements((1, 2), (3, 4)) == (4, 3)\n",
        "test": "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))\nassert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))\nassert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))",
        "canonical_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 260,
        "prompt": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.\ndef newman_prime(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tn = n+1\n\tm = -1\n\tp = 2\n\twhile(p * p <= n): \n\t\twhile (n % p == 0): \n\t\t\tn = n // p \n\t\t\tm = m + 1\n\t\tp = p + 1\n\tif (n > 1): \n\t\tm = m + 1\n\treturn m\n\n",
        "generated_testcode": "assert newman_prime(1) == 2\n",
        "test": "assert newman_prime(3) == 7 \nassert newman_prime(4) == 17\nassert newman_prime(5) == 41",
        "canonical_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)"
    },
    {
        "number": 261,
        "prompt": "Write a function to perform mathematical division operation across the given tuples.\ndef division_elements(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Divide two tuples element by element\"\"\"\n    print(test_tup1[0]/test_tup2[0])\n    print(test_tup1[1]/test_tup2[1])\n\n",
        "generated_testcode": "assert division_elements((1, 2), (2, 3)) == (1, 0.5)\n",
        "test": "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)\nassert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)\nassert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)",
        "canonical_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 262,
        "prompt": "Write a function to split a given list into two parts where the length of the first part of the list is given.\ndef split_two_parts(list1, L):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    L1 = int(len(list1) / 2)\n    L2 = L - L1\n    list1 = list1[:L1]\n    list2 = list1[L1:]\n    return list1, list2\n\n",
        "generated_testcode": "assert split_two_parts([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6, 7, 8, 9]]\n",
        "test": "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])\nassert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])\nassert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])",
        "canonical_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]"
    },
    {
        "number": 263,
        "prompt": "Write a function to merge two dictionaries.\ndef merge_dict(d1,d2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    merged = {}\n    for k,v in d1.items():\n        merged[k] = v\n    for k,v in d2.items():\n        if k in merged:\n            merged[k] += v\n        else:\n            merged[k] = v\n    return merged\n    \n# Test Cases\nd1 = { 'a': 100, 'b': 200, 'c': 300 }\nd2 = { 'a': 100, 'b': 300, 'd': 400 }\nprint (merge_dict(d1,d2)) # Should print {'a': 300, 'b': 200, 'c': 300, 'd': 400}\n\n",
        "generated_testcode": "assert merge_dict({1:10,2:20},{3:30,4:40}) == {1:10,2:20,3:30,4:40}\n",
        "test": "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}\nassert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}\nassert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}",
        "canonical_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d"
    },
    {
        "number": 264,
        "prompt": "Write a function to calculate a dog's age in dog's years.\ndef dog_age(h_age):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if h_age >= 0:\n        return ((h_age * 7) + 4)\n    else:\n        return ((-h_age * 7) - 8)\n\n",
        "generated_testcode": "assert dog_age(10) == 10\n",
        "test": "assert dog_age(12)==61\nassert dog_age(15)==73\nassert dog_age(24)==109",
        "canonical_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age"
    },
    {
        "number": 265,
        "prompt": "Write a function to split a list for every nth element.\ndef list_split(S, step):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return [S[i::step] for i in range(step)]\n\n",
        "generated_testcode": "assert list_split([1, 2, 3, 4, 5, 6, 7, 8, 9], 3) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n",
        "test": "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] \nassert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] \nassert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] ",
        "canonical_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]"
    },
    {
        "number": 266,
        "prompt": "Write a function to find the lateral surface area of a cube.\ndef lateralsurface_cube(l):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return (l*l*l)\n\n",
        "generated_testcode": "assert lateralsurface_cube(1) == 1\n",
        "test": "assert lateralsurface_cube(5)==100\nassert lateralsurface_cube(9)==324\nassert lateralsurface_cube(10)==400",
        "canonical_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA"
    },
    {
        "number": 267,
        "prompt": "Write a python function to find the sum of squares of first n odd natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "   \n    sum = 0\n    for i in range(1, n+1): \n        if i%2!=0: \n            sum = sum + i**2\n    return sum\n    # Driver Code\nn = int(input())\nprint(square_Sum(n))\n\n",
        "generated_testcode": "assert square_Sum(5) == 25\n",
        "test": "assert square_Sum(2) == 10\nassert square_Sum(3) == 35\nassert square_Sum(4) == 84",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) "
    },
    {
        "number": 268,
        "prompt": "Write a function to find the n'th star number.\ndef find_star_num(n): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 1\n    while(i<n):\n        i = i + 1\n    return i\n\n",
        "generated_testcode": "assert find_star_num(1) == 1\n",
        "test": "assert find_star_num(3) == 37\nassert find_star_num(4) == 73\nassert find_star_num(5) == 121",
        "canonical_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) "
    },
    {
        "number": 269,
        "prompt": "Write a function to find the ascii value of a character.\ndef ascii_value(k):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return ord(k)\n# a = 'G'\n# print(ord(a))\n# b =''\n# print(ord(b))\n\n",
        "generated_testcode": "assert ascii_value('a') == 97\n",
        "test": "assert ascii_value('A')==65\nassert ascii_value('R')==82\nassert ascii_value('S')==83",
        "canonical_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)"
    },
    {
        "number": 270,
        "prompt": "Write a python function to find the sum of even numbers at even positions.\ndef sum_even_and_even_index(arr,n):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    even_sum=0\n    even_count=0\n    odd_count=0\n    for i in range(0,n):\n        if arr[i]%2==0:\n            even_count+=1\n            even_sum+=arr[i]\n    for i in range(0,n):\n        if arr[i]%2!=0:\n            odd_count+=1\n    if even_count==0 or odd_count==0:\n        return 0\n    else:\n        return even_sum\narr =[1,2,3,4,5,6,7]\nn=len(arr)\nans=sum_even_and_even_index(arr,n)\nprint(ans)\n",
        "generated_testcode": "assert sum_even_and_even_index([1,2,3,4,5,6,7,8,9,10],10) == 30\n",
        "test": "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30\nassert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26\nassert sum_even_and_even_index([5, 6, 12, 1],4) == 12",
        "canonical_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum"
    },
    {
        "number": 271,
        "prompt": "Write a python function to find the sum of fifth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tsum = 0\n\tfor i in range(n): \n\t\tif (i ** 5) % 2 == 0: \n\t\t\tsum += i ** 5\n\tprint(\"The sum of the even power of first\", n, \"natural numbers is: \", sum) \n\t\nn = int(input())\neven_Power_Sum(n) \n",
        "generated_testcode": "assert even_Power_Sum(5) == 0\n",
        "test": "assert even_Power_Sum(2) == 1056\nassert even_Power_Sum(3) == 8832\nassert even_Power_Sum(1) == 32",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 272,
        "prompt": "Write a function to perfom the rear element extraction from list of tuples records.\ndef rear_extract(test_list):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(test_list)-1,0,-1):\n        return test_list[i]\n\n",
        "generated_testcode": "assert rear_extract([(1, 2), (3, 4), (5, 6)]) == (5, 6)\n",
        "test": "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]\nassert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]\nassert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]",
        "canonical_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) "
    },
    {
        "number": 273,
        "prompt": "Write a function to substract the contents of one tuple with corresponding index of other tuple.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    temp_tuple = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            temp_tuple += (test_tup1[i] - test_tup2[i], )\n        else:\n            temp_tuple += (test_tup1[i] - test_tup2[i], )\n    return temp_tuple\n\n",
        "generated_testcode": "assert substract_elements((1, 2, 3), (1, 2, 3)) == (0, 0, 0)\n",
        "test": "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)\nassert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)\nassert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 274,
        "prompt": "Write a python function to find sum of even index binomial coefficients.\ndef even_binomial_Coeff_Sum( n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    sum = 1\n    for i in range(0, n): \n        sum = sum * (i + 1)\n    return (sum)\n\n",
        "generated_testcode": "assert even_binomial_Coeff_Sum(5) == 120\n",
        "test": "assert even_binomial_Coeff_Sum(4) == 8\nassert even_binomial_Coeff_Sum(6) == 32\nassert even_binomial_Coeff_Sum(2) == 2",
        "canonical_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) "
    },
    {
        "number": 275,
        "prompt": "Write a python function to find the position of the last removed element from the given array.\ndef get_Position(a,n,m): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    #Initialization of length \n    l = 0\n    \n    #Initialization of i \n    i = 0\n    \n    #Initialization of j \n    j = n - 1\n    \n    #Initialization of k \n    k = 0\n    \n    #While loop to check whether there are more than two elements \n    while (j >= 0):\n        \n        #Check whether current element is less than the pivot\n        if a[j] < a[k]:\n            \n            #Swap the element with the last element in the array\n            a[j], a[l] = a[l], a[j]\n            \n            #Increment the length \n            l += 1\n            \n            #Move the j pointer\n            j -= 1\n            \n        #If the current element is greater than the pivot element, move the pointer ahead of the array\n        else:\n            \n            #Move the j pointer ahead of the array \n            j -= 1\n        \n    #After sorting, last element will be at the position -1. Return it\n    return l\n\n",
        "generated_testcode": "assert get_Position([1,2,3,4,5,6,7,8,9,10],10,5) == 5\n",
        "test": "assert get_Position([2,5,4],3,2) == 2\nassert get_Position([4,3],2,2) == 2\nassert get_Position([1,2,3,4],4,1) == 4",
        "canonical_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1"
    },
    {
        "number": 276,
        "prompt": "Write a function to find the volume of a cylinder.\ndef volume_cylinder(r,h):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"This function takes the radius and the height of a cylinder and computes its volume.\n    \"\"\"\n    return 3.14 * (r ** 2) * h\n\n",
        "generated_testcode": "assert volume_cylinder(1,2) == 3.14\n",
        "test": "assert volume_cylinder(10,5)==1570.7500000000002\nassert volume_cylinder(4,5)==251.32000000000002\nassert volume_cylinder(4,10)==502.64000000000004",
        "canonical_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume"
    },
    {
        "number": 277,
        "prompt": "Write a function to filter a dictionary based on values.\ndef dict_filter(dict,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    dict1={}\n    for i in dict:\n        if dict[i]==n:\n            dict1[i]=dict[i]\n    print(dict1)\n\n",
        "generated_testcode": "assert dict_filter({1:10,2:20,3:30,4:40},2) == {2:20,3:30,4:40}\n",
        "test": "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}\nassert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}",
        "canonical_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result"
    },
    {
        "number": 278,
        "prompt": "Write a function to find the element count that occurs before the record in the given tuple.\ndef count_first_elements(test_tup):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return test_tup[1]\n    \n# Test Cases\n# Simple Tuple\nprint(count_first_elements((3, 3, 6, 1, 2, 2, 6))) # 2\nprint(count_first_elements((3, 5, 2, 2, 6, 2, 2))) # 0\nprint(count_first_elements((1, 1, 1, 2, 2, 3, 3))) # 4\n\n",
        "generated_testcode": "assert count_first_elements((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 5\n",
        "test": "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3\nassert count_first_elements((2, 9, (5, 7), 11) ) == 2\nassert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4",
        "canonical_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) "
    },
    {
        "number": 279,
        "prompt": "Write a function to find the nth decagonal number.\ndef is_num_decagonal(n): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    # code here\n    num_decagonal = 0\n    while n:\n        num_decagonal += 1\n        n -= 1\n    return num_decagonal\n\n",
        "generated_testcode": "assert is_num_decagonal(1) == 1\n",
        "test": "assert is_num_decagonal(3) == 27\nassert is_num_decagonal(7) == 175\nassert is_num_decagonal(10) == 370",
        "canonical_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n "
    },
    {
        "number": 280,
        "prompt": "Write a function to search an element in the given array by using sequential search.\ndef sequential_search(dlist, item):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n\n",
        "generated_testcode": "assert sequential_search([1, 2, 3, 4, 5], 5) == 4\n",
        "test": "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)\nassert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)\nassert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)",
        "canonical_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos"
    },
    {
        "number": 281,
        "prompt": "Write a python function to check if the elements of a given list are unique or not.\ndef all_unique(test_list):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(test_list) == len(set(test_list))\n\n",
        "generated_testcode": "assert all_unique([1,2,3,4,5]) == True\n",
        "test": "assert all_unique([1,2,3]) == True\nassert all_unique([1,2,1,2]) == False\nassert all_unique([1,2,3,4,5]) == True",
        "canonical_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True"
    },
    {
        "number": 282,
        "prompt": "Write a function to substaract two lists using map and lambda function.\ndef sub_list(nums1,nums2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x,y:x-y,nums1,nums2))\n\n",
        "generated_testcode": "assert sub_list([1,2,3,4,5], [2,4,6,8,10]) == [1,3,5,7,9]\n",
        "test": "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]\nassert sub_list([1,2],[3,4])==[-2,-2]\nassert sub_list([90,120],[50,70])==[40,50]",
        "canonical_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 283,
        "prompt": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.\ndef validate(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if n>10:\n        return False\n    else:\n        str1=str(n)\n        for i in range(0,len(str1)):\n            if int(str1[i])>n:\n                return False\n        return True\n        \n        \n#Input:\n# Number to be validated\n# Output:\n# If the number is valid, return true. Else return false\ndef check(n):\n    if(validate(n)):\n        return True\n    else:\n        return False\n        \n#check(5)\n#check(10)\n#check(555)\n\n",
        "generated_testcode": "assert validate(123) == True\n",
        "test": "assert validate(1234) == True\nassert validate(51241) == False\nassert validate(321) == True",
        "canonical_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True"
    },
    {
        "number": 284,
        "prompt": "Write a function to check whether all items of a list are equal to a given string.\ndef check_element(list,element):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return element in list\n\n",
        "generated_testcode": "assert check_element([1,2,3,4,5],5) == True\n",
        "test": "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False\nassert check_element([1,2,3,4],7)==False\nassert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True",
        "canonical_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element"
    },
    {
        "number": 285,
        "prompt": "Write a function that matches a string that has an a followed by two to three 'b'.\ndef text_match_two_three(text):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if \"ab\" in text:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert text_match_two_three('ab') == True\n",
        "test": "assert text_match_two_three(\"ac\")==('Not matched!')\nassert text_match_two_three(\"dc\")==('Not matched!')\nassert text_match_two_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 286,
        "prompt": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.\ndef max_sub_array_sum_repeated(a, n, k): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    max_so_far = 0\n    for i in range(0, n - k + 1, 1):\n        s = 0\n        for j in range(0, k):\n            s += a[i + j]\n        max_so_far = max(max_so_far, s)\n    return max_so_far\n\n",
        "generated_testcode": "assert max_sub_array_sum_repeated([2, 3, 5, 6, 7], 5, 2) == 21\n",
        "test": "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30\nassert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59\nassert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1",
        "canonical_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far"
    },
    {
        "number": 287,
        "prompt": "Write a python function to find the sum of squares of first n even natural numbers.\ndef square_Sum(n):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 1\n    total = 0\n    while count <= n:\n        if count % 2 == 0:\n            total += count ** 2\n        count += 1\n    return total\n    # Write a python function to find the sum of squares of first n natural numbers.\ndef square_Sum(n):\n  \n    return sum(i * i for i in range(1, n + 1))\n\n",
        "generated_testcode": "assert square_Sum(5) == 25\n",
        "test": "assert square_Sum(2) == 20\nassert square_Sum(3) == 56\nassert square_Sum(4) == 120",
        "canonical_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)"
    },
    {
        "number": 288,
        "prompt": "Write a function to count array elements having modular inverse under given prime number p equal to itself.\ndef modular_inverse(arr, N, P):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    if (P == 1):\n        return -1\n    if (P == 0):\n        return -1\n    if (N == P):\n        return 0\n    while (P % 2 == 0):\n        P = P // 2\n    for i in range(1, N):\n        if ((i * P + 1) % N == 0):\n            if (i == 0):\n                continue\n            j = pow(i, (P - 2), N)\n            if (j == -1 or j == N):\n                return -1\n            return j\n    return -1\n\n",
        "generated_testcode": "assert modular_inverse([1, 2, 3, 4], 5, 7) == 2\n",
        "test": "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2\nassert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3\nassert modular_inverse([2, 3, 4, 5], 4, 6) == 1",
        "canonical_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element"
    },
    {
        "number": 289,
        "prompt": "Write a python function to calculate the number of odd days in a given year.\ndef odd_Days(N): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if N % 2!= 0: \n        return 1\n    else: \n        return 0\n  \n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\nif __name__ == '__main__':\n    t = int(input())\n    for _ in range(t):\n        n = int(input())\n        print(odd_Days(n))\n# } Driver Code Ends\n",
        "generated_testcode": "assert odd_Days(2020) == 1\n",
        "test": "assert odd_Days(100) == 5\nassert odd_Days(50) ==6\nassert odd_Days(75) == 2",
        "canonical_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd "
    },
    {
        "number": 290,
        "prompt": "Write a function to find the list of lists with maximum length.\ndef max_length(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    m = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > m:\n            m = len(list1[i])\n    return m\n\n",
        "generated_testcode": "assert max_length([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == [[4, 5, 6], [7, 8, 9]]\n",
        "test": "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])\nassert max_length([[5], [15,20,25]])==(3, [15,20,25])",
        "canonical_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)"
    },
    {
        "number": 291,
        "prompt": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\ndef count_no_of_ways(n, k): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0: \n        return 0\n    if n < k: \n        return 0\n    if k == 1: \n        return n \n    return count_no_of_ways(n - 1, k) + count_no_of_ways(n - 1, k - 1) \n  \n",
        "generated_testcode": "assert count_no_of_ways(3, 2) == 3\n",
        "test": "assert count_no_of_ways(2, 4) == 16\nassert count_no_of_ways(3, 2) == 6\nassert count_no_of_ways(4, 4) == 228",
        "canonical_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]"
    },
    {
        "number": 292,
        "prompt": "Write a python function to find quotient of two numbers.\ndef find(n,m):  \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    try:\n        div=n//m\n        return div\n    except ZeroDivisionError:\n        print(\"div by zero\")\n    except TypeError:\n        print(\"invalid input\")\n    \n    \n    \n#a=int(input(\"enter first number\"))\n#b=int(input(\"enter second number\"))\n#print(find(a,b))\n\n",
        "generated_testcode": "assert find(10,5) == 2\n",
        "test": "assert find(10,3) == 3\nassert find(4,2) == 2\nassert find(20,5) == 4",
        "canonical_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)"
    },
    {
        "number": 293,
        "prompt": "Write a function to find the third side of a right angled triangle.\ndef otherside_rightangle(w,h):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return (w**2 + h**2)**0.5\n    \n#Write a function to find the area of a triangle using three sides of a right angled triangle.\ndef triangle(w,h):\n    return 0.5*w*h\n\n",
        "generated_testcode": "assert otherside_rightangle(3,4) == 5\n",
        "test": "assert otherside_rightangle(7,8)==10.63014581273465\nassert otherside_rightangle(3,4)==5\nassert otherside_rightangle(7,15)==16.55294535724685",
        "canonical_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s"
    },
    {
        "number": 294,
        "prompt": "Write a function to find the maximum value in a given heterogeneous list.\ndef max_val(listval):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return max(listval)\n\n",
        "generated_testcode": "assert max_val([1, 2, 3, 4, 5]) == 5\n",
        "test": "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5\nassert max_val(['Python', 15, 20, 25])==25\nassert max_val(['Python', 30, 20, 40, 50, 'version'])==50",
        "canonical_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)"
    },
    {
        "number": 295,
        "prompt": "Write a function to return the sum of all divisors of a number.\ndef sum_div(number):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    divisor_sum = 1\n    for i in range(2, number):\n        if number % i == 0:\n            divisor_sum += i\n    return divisor_sum\n\n",
        "generated_testcode": "assert sum_div(12) == 6, \"Should be 6\"\n",
        "test": "assert sum_div(8)==7\nassert sum_div(12)==16\nassert sum_div(7)==1",
        "canonical_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)"
    },
    {
        "number": 296,
        "prompt": "Write a python function to count inversions in an array.\ndef get_Inv_Count(arr,n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  \n    # code here\n    \n    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n  \n            if arr[i] > arr[j]: \n                count += 1\n  \n    return count\n\n",
        "generated_testcode": "assert get_Inv_Count([1,2,3,4,5,6,7,8,9,10],10) == 0\n",
        "test": "assert get_Inv_Count([1,20,6,4,5],5) == 5\nassert get_Inv_Count([1,2,1],3) == 1\nassert get_Inv_Count([1,2,5,6,1],5) == 3",
        "canonical_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count "
    },
    {
        "number": 297,
        "prompt": "Write a function to flatten a given nested list structure.\ndef flatten_list(list1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    list2 = []\n    for i in list1:\n        if type(i) == type([]):\n            list2.extend(flatten_list(i))\n        else:\n            list2.append(i)\n    return list2\n\n",
        "generated_testcode": "assert flatten_list([1, 2, 3]) == [1, 2, 3], \"First\"\n",
        "test": "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]\nassert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]\nassert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]",
        "canonical_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list "
    },
    {
        "number": 298,
        "prompt": "Write a function to find the nested list elements which are present in another list.\ndef intersection_nested_lists(l1, l2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    result = []\n    for x in l1:\n        if x in l2:\n            result.append(x)\n    return result\n\n",
        "generated_testcode": "assert intersection_nested_lists([1,2,3], [1,2,3]) == [1,2,3], \"Should return the list of elements that are present in both lists\"\n",
        "test": "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]\nassert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]\nassert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]",
        "canonical_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result"
    },
    {
        "number": 299,
        "prompt": "Write a function to calculate the maximum aggregate from the list of tuples.\ndef max_aggregate(stdata):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    # TODO: Implement max_aggregate\n    #print(stdata)\n    stdata.sort(key=lambda x: x[0])\n    #print(stdata)\n    #print(stdata[-1][0])\n    #print(stdata[-1][1])\n    return stdata[-1][1]\n\n",
        "generated_testcode": "assert max_aggregate([(1, 2), (3, 4), (5, 6)]) == 6\n",
        "test": "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)\nassert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)\nassert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)",
        "canonical_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])"
    },
    {
        "number": 300,
        "prompt": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\ndef count_binary_seq(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    res = 0\n    for i in range(2**n): \n        s = bin(i) \n        a = s.count('1')\n        if s.count('0') == n - 1 and a == n - 1: \n            res += 1\n    return res \n  \n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\n",
        "generated_testcode": "assert count_binary_seq(2) == 3\n",
        "test": "assert count_binary_seq(1) == 2.0\nassert count_binary_seq(2) == 6.0\nassert count_binary_seq(3) == 20.0",
        "canonical_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res "
    },
    {
        "number": 301,
        "prompt": "Write a function to find the depth of a dictionary.\ndef dict_depth(d):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if not isinstance(d, dict):\n        return 0\n    else:\n        return max([dict_depth(v) for v in d.values()]) + 1\n\n",
        "generated_testcode": "assert dict_depth({1:2,3:4}) == 2\n",
        "test": "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4\nassert dict_depth({'a':1, 'b': {'c':'python'}})==2\nassert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3",
        "canonical_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0"
    },
    {
        "number": 302,
        "prompt": "Write a python function to find the most significant bit number which is also a set bit.\ndef set_Bit_Number(n): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    \n    # Initialize result variable\n    result = 0\n    \n    # Traverse all bits of 'n'\n    for i in range(32): \n        \n        # If the bit value is '1' then add the value of 'n' \n        # to'result'\n        if (n & (1 << i)): \n            result = result + (1 << i) \n            \n    return result\n\n",
        "generated_testcode": "assert set_Bit_Number(0) == 0\n",
        "test": "assert set_Bit_Number(6) == 4\nassert set_Bit_Number(10) == 8\nassert set_Bit_Number(18) == 16",
        "canonical_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)"
    },
    {
        "number": 303,
        "prompt": "Write a python function to check whether the count of inversion of two types are same or not.\ndef solve(a,n):   \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    c = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]<a[j]:\n                c += 1\n    return c\n\n",
        "generated_testcode": "assert solve(1,1) == True\n",
        "test": "assert solve([1,0,2],3) == True\nassert solve([1,2,0],3) == False\nassert solve([1,2,1],3) == True",
        "canonical_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True"
    },
    {
        "number": 304,
        "prompt": "Write a python function to find element at a given index after number of rotations.\ndef find_Element(arr,ranges,rotations,index) :  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    for i in range(len(arr)) :  \n        if i == index :\n            if arr[i] == 0 :\n                for j in range(index+1,len(arr)) :\n                    arr[j] = arr[j-1]\n            if arr[i] == 1 :\n                for j in range(index+1,len(arr)) :\n                    arr[j] = arr[j-1]\n            return arr[index]\n\n",
        "generated_testcode": "assert find_Element([1,2,3,4,5,6,7,8,9,10],3,2,4) == 5\n",
        "test": "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3\nassert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3\nassert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1",
        "canonical_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] "
    },
    {
        "number": 305,
        "prompt": "Write a function to match two words from a list of words starting with letter 'p'.\ndef start_withp(words):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tresult=[]\n\tfor word in words:\n\t\tif word.startswith('p'):\n\t\t\tresult.append(word)\n\treturn result\n\n",
        "generated_testcode": "assert start_withp(['pizza', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas', 'pizzas'",
        "test": "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')\nassert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')\nassert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')",
        "canonical_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()"
    },
    {
        "number": 306,
        "prompt": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .\ndef max_sum_increasing_subseq(a, n, index, k):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    print(\"Sum of max increasing subsequence:\", end=' ')\n    print(find_max_sum(a, n, index))\n\n",
        "generated_testcode": "assert max_sum_increasing_subseq([1, 2, 3, 4, 5], 5, 2, 3) == 10\n",
        "test": "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11\nassert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7\nassert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71",
        "canonical_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]"
    },
    {
        "number": 307,
        "prompt": "Write a function to get a colon of a tuple.\ndef colon_tuplex(tuplex,m,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if m==len(tuplex):\n        return tuplex[:n]\n    else:\n        return tuplex[:m] + (colon_tuplex(tuplex,m+1,n),)\n\n",
        "generated_testcode": "assert colon_tuplex((1,2,3),1,2) == (1,2)\n",
        "test": "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) \nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))\nassert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)",
        "canonical_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon"
    },
    {
        "number": 308,
        "prompt": "Write a function to find the specified number of largest products from two given lists.\ndef large_product(nums1, nums2, N):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Write your code here\n    if len(nums1) == 0 or len(nums2) == 0:\n        return None\n    result = []\n    for i in range(0, N):\n        result.append(max(nums1[i] * nums2[i], nums1[i] * nums2[N - 1 - i], nums2[i] * nums1[N - 1 - i]))\n    return result\n\n",
        "generated_testcode": "assert large_product([1, 2, 3], [4, 5, 6], 2) == 60\n",
        "test": "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]\nassert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]",
        "canonical_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result"
    },
    {
        "number": 309,
        "prompt": "Write a python function to find the maximum of two numbers.\ndef maximum(a,b):   \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if a>b:\n        return a\n    else:\n        return b\n\n",
        "generated_testcode": "assert maximum(2,3) == 3\n",
        "test": "assert maximum(5,10) == 10\nassert maximum(-1,-2) == -1\nassert maximum(9,7) == 9",
        "canonical_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 310,
        "prompt": "Write a function to convert a given string to a tuple.\ndef string_to_tuple(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    str1 = str1[1:-1]\n    return tuple(int(i) for i in str1.split(','))\n\n",
        "generated_testcode": "assert(string_to_tuple(\"(1,2,3)\") == (1,2,3))\n",
        "test": "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')\nassert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')",
        "canonical_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 311,
        "prompt": "Write a python function to set the left most unset bit.\ndef set_left_most_unset_bit(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\treturn (n | (1 << (32 - 1))) - (1 << (32 - 1))\n  \n# A function to display the left most \n# unset bit \ndef display_left_most_unset_bit(n): \n\tif n == 0: \n\t\tprint (\"All bits are set\") \n\telse: \n\t\tprint (\"Left most unset bit is at position \" + str(n) + \".\") \n  \n# Driver program \nn = int(input(\"Enter a number: \")) \ndisplay_left_most_unset_bit(n) \n",
        "generated_testcode": "assert set_left_most_unset_bit(0) == 0\n",
        "test": "assert set_left_most_unset_bit(10) == 14\nassert set_left_most_unset_bit(12) == 14\nassert set_left_most_unset_bit(15) == 15",
        "canonical_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) "
    },
    {
        "number": 312,
        "prompt": "Write a function to find the volume of a cone.\ndef volume_cone(r,h):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return math.pi*(r**2)*h\n\n",
        "generated_testcode": "assert volume_cone(1,1) == 1.5\n",
        "test": "assert volume_cone(5,12)==314.15926535897927\nassert volume_cone(10,15)==1570.7963267948965\nassert volume_cone(19,17)==6426.651371693521",
        "canonical_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume"
    },
    {
        "number": 313,
        "prompt": "Write a python function to print positive numbers in a list.\ndef pos_nos(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in list1:\n        if i > 0:\n            print(i, end=\" \")\npos_nos([-2, -1, 0, 1, 2, 3, 4])\nprint(\" \")\n\n",
        "generated_testcode": "assert pos_nos([1,2,3,4,5,6,7,8,9,10]) == True\n",
        "test": "assert pos_nos([-1,-2,1,2]) == 1,2\nassert pos_nos([3,4,-5]) == 3,4\nassert pos_nos([-2,-3,1]) == 1",
        "canonical_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num "
    },
    {
        "number": 314,
        "prompt": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.\ndef max_sum_rectangular_grid(grid, n) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = float('-inf') \n    for i in range(n - 2) : \n        for j in range(i + 1, n - 1) : \n            # Sum of the elements on the left \n            sum_left = 0\n            for k in range(i) : \n                sum_left += grid[k][j]\n            # Sum of the elements on the right \n            sum_right = 0\n            for k in range(i + 1, j + 1) : \n                sum_right += grid[k][j]\n            # Maximum of the sum in both the directions \n            max_sum = max(max_sum, sum_left + sum_right) \n    return max_sum \ngrid = [[1, 2, 3], \n        [4, 5, 6], \n        [7, 8, 9]] \nn = len(grid) \nprint(\"Maximum sum is\", max_sum_rectangular_grid(grid, n)) \n\n",
        "generated_testcode": "assert max_sum_rectangular_grid([[1, 2, 3], \n                                 [4, 5, 6], \n                                 [7, 8, 9]], 3) == 9\n",
        "test": "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7\nassert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24\nassert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81",
        "canonical_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)"
    },
    {
        "number": 315,
        "prompt": "Write a python function to find the first maximum length of even word.\ndef find_Max_Len_Even(str): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    max = 0\n    i = 0\n    for i in range(0, len(str)): \n        if(str[i] == \" \"): \n            if(i!= 0): \n                i = i + 1\n            continue\n        if(int(str[i]) % 2 == 0): \n            if(max < i - i + 1): \n                max = i - i + 1\n                print(max)\n        else: \n            i = i + 1\n  \n    return max\n\n",
        "generated_testcode": "assert find_Max_Len_Even(\"\") == 0\n",
        "test": "assert find_Max_Len_Even(\"python language\") == \"language\"\nassert find_Max_Len_Even(\"maximum even length\") == \"length\"\nassert find_Max_Len_Even(\"eve\") == \"-1\"",
        "canonical_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] "
    },
    {
        "number": 316,
        "prompt": "Write a function to find the index of the last occurrence of a given number in a sorted array.\ndef find_last_occurrence(A, x):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(A) == 0:\n        return -1\n    # Find the index of the first element that is greater than x\n    start = 0\n    end = len(A) - 1\n    while start <= end:\n        mid = (start + end) // 2\n        if x == A[mid]:\n            return mid\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n    return -1\n\n",
        "generated_testcode": "assert find_last_occurrence([1, 2, 3, 3, 3, 3, 4, 5], 3) == 6\n",
        "test": "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3\nassert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9\nassert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6",
        "canonical_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result "
    },
    {
        "number": 317,
        "prompt": "Write a function to reflect the modified run-length encoding from a list.\ndef modified_encode(alist):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    new_list = []\n    for i in range(len(alist)):\n        if i == 0:\n            new_list.append(alist[i])\n        else:\n            if alist[i] == alist[i - 1]:\n                new_list[-1] += 1\n            else:\n                new_list.append(alist[i])\n    return new_list\n\n",
        "generated_testcode": "assert modified_encode([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]\nassert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']\nassert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']",
        "canonical_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]"
    },
    {
        "number": 318,
        "prompt": "Write a python function to find the maximum volume of a cuboid with given sum of sides.\ndef max_volume (s): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\ta = s[0] \n\tb = s[1] \n\tc = s[2] \n\td = s[3]\n\te = s[4]\n\tf = s[5]\n\tg = s[6]\n\th = s[7]\n\ti = s[8]\n\tj = s[9]\n\tk = s[10]\n\tl = s[11]\n\tm = s[12]\n\tn = s[13]\n\to = s[14]\n\tp = s[15]\n\tq = s[16]\n\tr = s[17]\n\ts = s[18]\n\tt = s[19]\n\tu = s[20]\n\tv = s[21]\n\tw = s[22]\n\tx = s[23]\n\ty = s[24]\n\tz = s[25]\n\tif a+b+c >= d and a+d+e >= g and a+g+f >= h and a+h+i >= j and a+j+k >= n and a+n+l >= o and a+o+p >= q and a+q+r >= t and a+t+s >= u and a+u+v >= w and a+w+x >= y and a+y+z >= z:\n\t\treturn (a+b+c+d+e+g+h+i+j+k+n+o+p+q+r+s+u+v+w",
        "generated_testcode": "assert max_volume(3, 4, 5) == 30, \"Should be 30\"\n",
        "test": "assert max_volume(8) == 18\nassert max_volume(4) == 2\nassert max_volume(1) == 0",
        "canonical_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue "
    },
    {
        "number": 319,
        "prompt": "Write a function to find all five characters long word in the given string by using regex.\ndef find_long_word(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    words = re.findall(r'\\b(\\w{5})', text)\n    print(words)\n    return words\n\n",
        "generated_testcode": "assert find_long_word(\"This is a test\") == \"test\"\n",
        "test": "assert find_long_word('Please move back to strem') == ['strem']\nassert find_long_word('4K Ultra HD streaming player') == ['Ultra']\nassert find_long_word('Streaming Media Player') == ['Media']",
        "canonical_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))"
    },
    {
        "number": 320,
        "prompt": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.\ndef sum_difference(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    sum_n = n*(n+1)//2\n    sum_2n = (n*(n+1)*(2*n+1))//6\n    return sum_n - sum_2n\n\n",
        "generated_testcode": "assert sum_difference(1) == 0\n",
        "test": "assert sum_difference(12)==5434\nassert sum_difference(20)==41230\nassert sum_difference(54)==2151270",
        "canonical_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares"
    },
    {
        "number": 321,
        "prompt": "Write a function to find the demlo number for the given number.\ndef find_demlo(s): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    k = 0; \n    i = 0; \n    while(k < s): \n        k = 2 * i + 1; \n        i = i + 1; \n    return i - 1; \n\n",
        "generated_testcode": "assert find_demlo(12) == 1\n",
        "test": "assert find_demlo(\"111111\") == '12345654321'\nassert find_demlo(\"1111\") == '1234321'\nassert find_demlo(\"13333122222\") == '123456789101110987654321'",
        "canonical_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t"
    },
    {
        "number": 322,
        "prompt": "Write a function to find all index positions of the minimum values in a given list.\ndef position_min(list1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(list1) == 1:\n        return 0\n    min_val = list1[0]\n    min_index = 0\n    for i in range(1, len(list1)):\n        if list1[i] < min_val:\n            min_val = list1[i]\n            min_index = i\n    return min_index\n\n",
        "generated_testcode": "assert position_min([1,2,3,4,5]) == 0\n",
        "test": "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]\nassert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]\nassert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]",
        "canonical_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result"
    },
    {
        "number": 323,
        "prompt": "Write a function to re-arrange the given array in alternating positive and negative items.\ndef right_rotate(arr, n, out_of_place, cur):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(n):\n        if arr[i] < 0:\n            out_of_place.insert(0, cur)\n            cur += 1\n            arr[i], arr[cur] = arr[cur], arr[i]\n        else:\n            arr[i], arr[cur] = arr[cur], arr[i]\n    return arr, cur\n\n",
        "generated_testcode": "assert right_rotate([1, 2, 3, 4, 5, 6, 7], 7, 2, 3) == [3, 4, 5, 6, 7, 1, 2]\n",
        "test": "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]\nassert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]\nassert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]",
        "canonical_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr"
    },
    {
        "number": 324,
        "prompt": "Write a function to extract the sum of alternate chains of tuples.\ndef sum_of_alternates(test_tuple):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return sum(test_tuple)\n# print(sum_of_alternates((1,2,3)))\n\n",
        "generated_testcode": "assert sum_of_alternates((1,2,3,4,5,6,7,8,9,10)) == 55, \"Should be 55\"\n",
        "test": "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)\nassert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)\nassert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)",
        "canonical_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) "
    },
    {
        "number": 325,
        "prompt": "Write a python function to find the minimum number of squares whose sum is equal to a given number.\ndef get_Min_Squares(n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    count = 0\n    \n    for i in range(1, n+1):\n        count += find_Min_Squares(i)\n        \n    return count\n\n",
        "generated_testcode": "assert get_Min_Squares(5) == 2\n",
        "test": "assert get_Min_Squares(6) == 3\nassert get_Min_Squares(2) == 2\nassert get_Min_Squares(4) == 1",
        "canonical_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;"
    },
    {
        "number": 326,
        "prompt": "Write a function to get the word with most number of occurrences in the given strings list.\ndef most_occurrences(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Your code here\n    result_dict = {}\n    for i in test_list:\n        result_dict[i] = test_list.count(i)\n    return max(result_dict, key=result_dict.get)\n\n",
        "generated_testcode": "assert most_occurrences([\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"",
        "test": "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'\nassert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'\nassert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'",
        "canonical_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) "
    },
    {
        "number": 327,
        "prompt": "Write a function to print check if the triangle is isosceles or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if x==y==z:\n        print(\"Isoceles\")\n    elif x==y!=z or y==z!=x or x==z!=y:\n        print(\"Isoceles\")\n    else:\n        print(\"Not Isoceles\")\n    \n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n# Driver Code \nif __name__=='__main__':\n    t = int(input())\n    for i in range(t):\n        x,y,z = list(map(int, input().strip().split()))\n        check_isosceles(x,y,z)\n# } Driver Code Ends\n",
        "generated_testcode": "assert check_isosceles(1,2,3) == True, \"Should be True\"\n",
        "test": "assert check_isosceles(6,8,12)==False \nassert check_isosceles(6,6,12)==True\nassert check_isosceles(6,16,20)==False",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 328,
        "prompt": "Write a function to rotate a given list by specified number of items to the left direction.\ndef rotate_left(list1,m,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    list1[:]=list1[m:n+1]\n    list1.append(m)\n\n",
        "generated_testcode": "assert rotate_left([1,2,3,4,5],2,3) == [3,4,5,1,2]\n",
        "test": "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]\nassert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]",
        "canonical_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result"
    },
    {
        "number": 329,
        "prompt": "Write a python function to count negative numbers in a list.\ndef neg_count(list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in list:\n        if i < 0:\n            count += 1\n    print(\"count:\",count)\n\n",
        "generated_testcode": "assert neg_count([1,2,3,4,5,-6,7,8,9]) == 5\n",
        "test": "assert neg_count([-1,-2,3,-4,-5]) == 4\nassert neg_count([1,2,3]) == 0\nassert neg_count([1,2,-3,-10,20]) == 2",
        "canonical_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count "
    },
    {
        "number": 330,
        "prompt": "Write a function to find all three, four, five characters long words in the given string by using regex.\ndef find_char(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = list()\n    for i in range(len(text)-2):\n        if text[i] == text[i+2]:\n            result.append(text[i:i+3])\n    return result\n\n",
        "generated_testcode": "assert find_char(\"This is a test\") == ['this', 'is', 'a', 'test']\n",
        "test": "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']\nassert find_char('Certain service are subject to change MSR') == ['are', 'MSR']\nassert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']",
        "canonical_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))"
    },
    {
        "number": 331,
        "prompt": "Write a python function to count unset bits of a given number.\ndef count_unset_bits(n): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    while n: \n        count += n & 1\n        n >>= 1\n    return count \n\n",
        "generated_testcode": "assert count_unset_bits(0) == 0\n",
        "test": "assert count_unset_bits(2) == 1\nassert count_unset_bits(4) == 2\nassert count_unset_bits(6) == 1",
        "canonical_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  "
    },
    {
        "number": 332,
        "prompt": "Write a function to count character frequency of a given string.\ndef char_frequency(str1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    dict1 = {}\n    for i in str1:\n        keys = dict1.keys()\n        if i in keys:\n            dict1[i] += 1\n        else:\n            dict1[i] = 1\n    return dict1\n# freq = char_frequency(\"aabbbc\")\n# print(freq)\n\n",
        "generated_testcode": "assert char_frequency(\"\") == {}\n",
        "test": "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}\nassert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}\nassert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}",
        "canonical_solution": "def char_frequency(str1):\r\n    dict = {}\r\n    for n in str1:\r\n        keys = dict.keys()\r\n        if n in keys:\r\n            dict[n] += 1\r\n        else:\r\n            dict[n] = 1\r\n    return dict"
    },
    {
        "number": 333,
        "prompt": "Write a python function to sort a list according to the second element in sublist.\ndef Sort(sub_li): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    sub_li.sort(key = lambda i:i[1]) \n    return sub_li\n\n",
        "generated_testcode": "assert Sort([[1,2],[3,4],[5,6]]) == [[1,2],[3,4],[5,6]]\n",
        "test": "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]\nassert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]\nassert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]",
        "canonical_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li "
    },
    {
        "number": 334,
        "prompt": "Write a python function to check whether the triangle is valid or not if sides are given.\ndef check_Validity(a,b,c):  \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if(a+b>c and a+c>b and b+c>a):\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_Validity(3,4,5) == True, \"Triangle is not valid\"\n",
        "test": "assert check_Validity(1,2,3) == False\nassert check_Validity(2,3,5) == False\nassert check_Validity(7,10,5) == True",
        "canonical_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        "
    },
    {
        "number": 335,
        "prompt": "Write a function to find the sum of arithmetic progression.\ndef ap_sum(a,n,d):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "  return sum(range(a,a+n*d,d))\n\n",
        "generated_testcode": "assert ap_sum(1,2,1) == 3\n",
        "test": "assert ap_sum(1,5,2)==25\nassert ap_sum(2,6,4)==72\nassert ap_sum(1,4,5)==34",
        "canonical_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total"
    },
    {
        "number": 336,
        "prompt": "Write a function to check whether the given month name contains 28 days or not.\ndef check_monthnum(monthname1):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    monthnamelist = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September',\n                     'October', 'November', 'December']\n    if monthname1 in monthnamelist:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_monthnum('February') == True\n",
        "test": "assert check_monthnum(\"February\")==True\nassert check_monthnum(\"January\")==False\nassert check_monthnum(\"March\")==False",
        "canonical_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 337,
        "prompt": "Write a function that matches a word at the end of a string, with optional punctuation.\ndef text_match_word(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return re.match(r'^.+[^\\.]+$', text)\n\n",
        "generated_testcode": "assert text_match_word(\"Hello, world!\") == True\n",
        "test": "assert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"python.\")==('Found a match!')\nassert text_match_word(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'"
    },
    {
        "number": 338,
        "prompt": "Write a python function to count the number of substrings with same first and last characters.\ndef check_Equality(s): \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    if (len(s)==0): \n        return 0\n    count = 1\n    for i in range(1, len(s)): \n        if (s[i]==s[i-1]): \n            count += 1\n    return count \n\n",
        "generated_testcode": "assert check_Equality(\"abcd\") == True, \"Should be True\"\n",
        "test": "assert count_Substring_With_Equal_Ends('aba') == 4\nassert count_Substring_With_Equal_Ends('abcab') == 7\nassert count_Substring_With_Equal_Ends('abc') == 3",
        "canonical_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; "
    },
    {
        "number": 339,
        "prompt": "Write a python function to find the maximum occuring divisor in an interval.\ndef find_Divisor(x,y):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # finding factor_1, factor_2\n    factor_1=1\n    while(x%factor_1==0):\n        factor_1=factor_1+1\n    factor_2=1\n    while(y%factor_2==0):\n        factor_2=factor_2+1\n    \n    # finding the common divisor\n    divisor=max(factor_1,factor_2)\n    \n    # finding the max_divisor\n    max_divisor=divisor\n    \n    while(divisor<=y):\n        if(x%divisor==0 and y%divisor==0):\n            if(divisor>max_divisor):\n                max_divisor=divisor\n        divisor+=1\n    \n    print(\"The max_divisor is : \",max_divisor)\n    \n# test case\n# find_Divisor(10,20)\n\n",
        "generated_testcode": "assert find_Divisor(10,20) == 5\n",
        "test": "assert find_Divisor(2,2) == 2\nassert find_Divisor(2,5) == 2\nassert find_Divisor(5,10) == 2",
        "canonical_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2"
    },
    {
        "number": 340,
        "prompt": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.\ndef sum_three_smallest_nums(lst):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    lst.sort()\n    return sum(lst[0:3])\n\n",
        "generated_testcode": "assert sum_three_smallest_nums([1, 2, 3, 4, 5]) == 6, \"Should be 6\"\n",
        "test": "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37\nassert sum_three_smallest_nums([1,2,3,4,5]) == 6\nassert sum_three_smallest_nums([0,1,2,3,4,5]) == 6",
        "canonical_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])"
    },
    {
        "number": 341,
        "prompt": "Write a function to convert the given set into ordered tuples.\ndef set_to_tuple(s):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    l = []\n    for i in s:\n        l.append(tuple(i))\n    return tuple(l)\n\n",
        "generated_testcode": "assert set_to_tuple({\"a\", \"b\", \"c\"}) == ((\"a\",), (\"b\",), (\"c\",))\n",
        "test": "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)\nassert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)\nassert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)",
        "canonical_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)"
    },
    {
        "number": 342,
        "prompt": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.\n    def __init__(self, value, list_num, index):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "        self.value = value\n        self.list_num = list_num\n        self.index = index\n\n",
        "generated_testcode": "assert smallest_range([1, 2, 3], [4, 5, 6], [7, 8, 9]) == (1, 3)\n",
        "test": "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)\nassert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)\nassert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)",
        "canonical_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])"
    },
    {
        "number": 343,
        "prompt": "Write a function to calculate the number of digits and letters in a string.\ndef dig_let(s):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return len(s) - s.count(' ')\n\n",
        "generated_testcode": "assert dig_let(\"\") == 0\n",
        "test": "assert dig_let(\"python\")==(6,0)\nassert dig_let(\"program\")==(7,0)\nassert dig_let(\"python3.0\")==(6,2)",
        "canonical_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)"
    },
    {
        "number": 344,
        "prompt": "Write a python function to find number of elements with odd factors in a given range.\ndef count_Odd_Squares(n,m): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # code here \n    count = 0\n    for i in range(n, m+1): \n        for j in range(1, i+1): \n            if i % j == 0: \n                count += 1\n                \n    return count \n\n",
        "generated_testcode": "assert count_Odd_Squares(5,10) == 5\n",
        "test": "assert count_Odd_Squares(5,100) == 8\nassert count_Odd_Squares(8,65) == 6\nassert count_Odd_Squares(2,5) == 1",
        "canonical_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) "
    },
    {
        "number": 345,
        "prompt": "Write a function to find the difference between two consecutive numbers in a given list.\ndef diff_consecutivenums(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return max(nums) - min(nums)\n\n",
        "generated_testcode": "assert diff_consecutivenums([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]\nassert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]\nassert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]",
        "canonical_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 346,
        "prompt": "Write a function to find entringer number e(n, k).\ndef zigzag(n, k): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Initialize result \n    res = 1\n  \n    # Traverse all elements \n    for i in range(n): \n  \n        # Print previous k numbers \n        if i < k: \n            print (res, end = \" \") \n            res += 1\n  \n        # Print current k numbers \n        else: \n            print (res, end = \" \") \n            res -= 1\n  \n    # Print kth number \n    print (res, end = \" \") \n  \n# Driver Code \nif __name__ == \"__main__\": \n  \n    # Given n = 5, k = 2\n    n = 5\n    k = 2\n    zigzag(n, k) \n  \n# This code is contributed by Saket Modi ",
        "generated_testcode": "assert zigzag(5, 3) == 2\n",
        "test": "assert zigzag(4, 3) == 5\nassert zigzag(4, 2) == 4\nassert zigzag(3, 1) == 1",
        "canonical_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)"
    },
    {
        "number": 347,
        "prompt": "Write a python function to count the number of squares in a rectangle.\ndef count_Squares(m,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(0,m): \n        for j in range(0,n): \n            if (i + j) <= m and (i - j) >= 0: \n                count = count + 1\n    return count \n    \n#Problem 6.\n#Write a python function to check whether a given string is a palindrome or not. \ndef isPalindrome(str): \n    str = str.lower() \n    str = str.replace(\" \", \"\") \n    i = 0\n    j = len(str) - 1\n    while i <= j: \n        if str[i]!= str[j]: \n            return False\n        i = i + 1\n        j = j - 1\n    return True\n",
        "generated_testcode": "assert count_Squares(3,4) == 6\n",
        "test": "assert count_Squares(4,3) == 20\nassert count_Squares(1,2) == 2\nassert count_Squares(2,2) == 5",
        "canonical_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6"
    },
    {
        "number": 348,
        "prompt": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.\ndef bin_coff(n, r): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Helper function \n    def bin_coff_aux(n, r): \n        if n == 0: \n            return 1\n        else: \n            return bin_coff_aux(n - 1, r) + bin_coff_aux(n, r - 1) \n  \n    return bin_coff_aux(n, r) \n\n",
        "generated_testcode": "assert bin_coff(3, 2) == 2\n",
        "test": "assert find_ways(4) == 2\nassert find_ways(6) == 5\nassert find_ways(8) == 14",
        "canonical_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) "
    },
    {
        "number": 349,
        "prompt": "Write a python function to check whether the given string is a binary string or not.\ndef check(string) :\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "\tcount = 0\n\tfor i in range(len(string)) :\n\t\tif string[i] == '1' :\n\t\t\tcount += 1\n\tif count == len(string) :\n\t\tprint(\"It is a binary string.\")\n\telse :\n\t\tprint(\"It is not a binary string.\")\n\n",
        "generated_testcode": "assert check('') == True\n",
        "test": "assert check(\"01010101010\") == \"Yes\"\nassert check(\"name0\") == \"No\"\nassert check(\"101\") == \"Yes\"",
        "canonical_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") "
    },
    {
        "number": 350,
        "prompt": "Write a python function to minimize the length of the string by removing occurrence of only one character.\ndef minimum_Length(s) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 1\n    for i in range(len(s)): \n        if (s[i] not in s[0:i]): \n            count += 1\n    return count \n  \n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\n",
        "generated_testcode": "assert minimum_Length(\"aabcccccaaa\") == \"aabcccccaaa\"\n",
        "test": "assert minimum_Length(\"mnm\") == 1\nassert minimum_Length(\"abcda\") == 3\nassert minimum_Length(\"abcb\") == 2",
        "canonical_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc "
    },
    {
        "number": 351,
        "prompt": "Write a python function to find the first element occurring k times in a given array.\ndef first_Element(arr,n,k): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(n): \n        if arr[i] == k: \n            return arr[i]\n  \n    return -1\n  \n#{ \n#  Driver Code Starts\n\n",
        "generated_testcode": "assert first_Element([1,2,3,4,5,6,7,8,9,10],10,3) == 3\n",
        "test": "assert first_Element([0,1,2,3,4,5],6,1) == 0\nassert first_Element([1,2,1,3,4],5,2) == 1\nassert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2",
        "canonical_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1"
    },
    {
        "number": 352,
        "prompt": "Write a python function to check whether all the characters in a given string are unique.\ndef unique_Characters(str):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    dict = {}\n    for i in range(len(str)):\n        if str[i] in dict:\n            return False\n        else:\n            dict[str[i]] = 1\n    return True\n\n",
        "generated_testcode": "assert unique_Characters(\"abcdefghijklmnopqrstuvwxyz\") == True\n",
        "test": "assert unique_Characters('aba') == False\nassert unique_Characters('abc') == True\nassert unique_Characters('abab') == False",
        "canonical_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;"
    },
    {
        "number": 353,
        "prompt": "Write a function to remove a specified column from a given nested list.\ndef remove_column(list1, n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for i in list1:\n        new_list.append(i[:n] + i[n + 1:])\n    return new_list\n\n",
        "generated_testcode": "assert remove_column([[1, 2], [3, 4], [5, 6]], 1) == [[1, 2], [3, 4], [5, 6]]\n",
        "test": "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]\nassert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]\nassert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]",
        "canonical_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1"
    },
    {
        "number": 354,
        "prompt": "Write a function to find t-nth term of arithemetic progression.\ndef tn_ap(a,n,d):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return (a+(n-1)*d)\n\n",
        "generated_testcode": "assert tn_ap(1,1,1) == 1\n",
        "test": "assert tn_ap(1,5,2)==9\nassert tn_ap(2,6,4)==22\nassert tn_ap(1,4,5)==16",
        "canonical_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn"
    },
    {
        "number": 355,
        "prompt": "Write a python function to count the number of rectangles in a circle of radius r.\ndef count_Rectangles(radius):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    total = 0  \n    for i in range(1, radius):  \n        total += (radius - i)*(radius - i)/2\n    return total  \n\n",
        "generated_testcode": "assert count_Rectangles(1) == 1\n",
        "test": "assert count_Rectangles(2) == 8\nassert count_Rectangles(1) == 1\nassert count_Rectangles(0) == 0",
        "canonical_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles "
    },
    {
        "number": 356,
        "prompt": "Write a function to find the third angle of a triangle using two angles.\ndef find_angle(a,b):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    third_angle=180-(a+b)\n    return third_angle\n\n",
        "generated_testcode": "assert find_angle(90,45) == 45\n",
        "test": "assert find_angle(47,89)==44\nassert find_angle(45,95)==40\nassert find_angle(50,40)==90",
        "canonical_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n"
    },
    {
        "number": 357,
        "prompt": "Write a function to find the maximum element of all the given tuple records.\ndef find_max(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tmax=0\n\tfor i in test_list:\n\t\tif i>max:\n\t\t\tmax=i\n\treturn max\n\n",
        "generated_testcode": "assert find_max([(1, 2), (3, 4), (5, 6)]) == 6\n",
        "test": "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10\nassert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11\nassert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12",
        "canonical_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) "
    },
    {
        "number": 358,
        "prompt": "Write a function to find modulo division of two lists using map and lambda function.\ndef moddiv_list(nums1,nums2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(map(lambda x,y:x%y,nums1,nums2))\n\n",
        "generated_testcode": "assert moddiv_list([1,2,3,4], [2,4,6,8]) == [1,1,3,0]\n",
        "test": "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]\nassert moddiv_list([3,2],[1,4])==[0, 2]\nassert moddiv_list([90,120],[50,70])==[40, 50]",
        "canonical_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 359,
        "prompt": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if a == 0: \n        if b == 0: \n            if c == 0: \n                print(\"The solution are imaginary\") \n            else: \n                print(\"The solution are 0\") \n        else: \n            print(\"The solution are imaginary\") \n    else: \n        D = (b * b) - (4 * a * c) \n        if D < 0: \n            print(\"The solutions are imaginary\") \n        else: \n            X1 = (-b + D ** 0.5) / (2 * a) \n            X2 = (-b - D ** 0.5) / (2 * a) \n            print(\"The solutions are\",X1,\",\",X2) \n\n",
        "generated_testcode": "assert Check_Solution(1,2,3) == True\n",
        "test": "assert Check_Solution(1,3,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"\nassert Check_Solution(1,-5,6) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 360,
        "prompt": "Write a function to find the n\u2019th carol number.\ndef get_carol(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if (n == 1): \n        return 0\n    if (n == 2): \n        return 1\n    if (n == 3): \n        return 0\n    return get_carol(n - 1) + get_carol(n - 2)\nfor _ in range(int(input())):\n    n = int(input())\n    print(get_carol(n))\n",
        "generated_testcode": "assert get_carol(1) == 1\n",
        "test": "assert get_carol(2) == 7\nassert get_carol(4) == 223\nassert get_carol(5) == 959",
        "canonical_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2"
    },
    {
        "number": 361,
        "prompt": "Write a function to remove empty lists from a given list of lists.\ndef remove_empty(list1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  for l in list1:\n    if l ==[]:\n      list1.remove(l)\n  return list1\n\n",
        "generated_testcode": "assert remove_empty([[], [1, 2, 3], [], [4, 5, 6]]) == [[1, 2, 3], [4, 5, 6]]\n",
        "test": "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']\nassert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']",
        "canonical_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty"
    },
    {
        "number": 362,
        "prompt": "Write a python function to find the item with maximum occurrences in a given list.\ndef max_occurrences(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in nums:\n        if nums.count(i) > count:\n            count = nums.count(i)\n    return count\n\n",
        "generated_testcode": "assert max_occurrences([1,2,3,4,5,6,7,8,9,10]) == 10\n",
        "test": "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2\nassert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0\nassert max_occurrences([1,2,3,1,2,4,1]) == 1",
        "canonical_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 363,
        "prompt": "Write a function to add the k elements to each element in the tuple.\ndef add_K_element(test_list, K):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(len(test_list)):\n        if i + K <= len(test_list):\n            result.append(test_list[i:i+K])\n        else:\n            result.append(test_list[i:])\n    return result\n\n",
        "generated_testcode": "assert add_K_element([1, 2, 3, 4, 5], 3) == (1, 2, 3, 4, 5, 1, 2, 3, 4, 5)\n",
        "test": "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]\nassert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]\nassert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]",
        "canonical_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) "
    },
    {
        "number": 364,
        "prompt": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.\ndef make_flip(ch): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return ch.count('1') == 1\n\n",
        "generated_testcode": "assert make_flip('01010101') == 3\n",
        "test": "assert min_flip_to_make_string_alternate(\"0001010111\") == 2\nassert min_flip_to_make_string_alternate(\"001\") == 1\nassert min_flip_to_make_string_alternate(\"010111011\") == 2 ",
        "canonical_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) "
    },
    {
        "number": 365,
        "prompt": "Write a python function to count the number of digits of a given number.\ndef count_Digit(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    while n:\n        count += 1\n        n //= 10\n    return count\n\n",
        "generated_testcode": "assert count_Digit(123) == 3\n",
        "test": "assert count_Digit(12345) == 5\nassert count_Digit(11223305) == 8\nassert count_Digit(4123459) == 7",
        "canonical_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count"
    },
    {
        "number": 366,
        "prompt": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.\ndef adjacent_num_product(list_nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    #create empty list to store the products\n    #iterate through list_nums\n    #if num in previous and next element, add and then update max\n    #else append to new list\n    max_product = -1\n    product_list = []\n    previous = None\n    #iterate through list_nums\n    for num in list_nums:\n        if previous and previous + 1 == num:\n            product = previous * num\n            #print(f\"previous: {previous}   num: {num}\")\n            #print(f\"product: {product}\")\n            #update max\n            max_product = max(max_product, product)\n        else:\n            product_list.append(num)\n        previous = num\n    #print(f\"{product_list}\")\n    return max_product\n\n",
        "generated_testcode": "assert adjacent_num_product([1, 2, 3, 4, 5]) == 60\n",
        "test": "assert adjacent_num_product([1,2,3,4,5,6]) == 30\nassert adjacent_num_product([1,2,3,4,5]) == 20\nassert adjacent_num_product([2,3]) == 6",
        "canonical_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))"
    },
    {
        "number": 367,
        "prompt": "Write a function to check if a binary tree is balanced or not.\n\tdef __init__(self, data): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\n",
        "generated_testcode": "assert(isBalanced(root) == True)\n\n",
        "test": "assert is_tree_balanced(root) == False\nassert is_tree_balanced(root1) == True\nassert is_tree_balanced(root2) == False ",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef get_height(root): \r\n\tif root is None: \r\n\t\treturn 0\r\n\treturn max(get_height(root.left), get_height(root.right)) + 1\r\ndef is_tree_balanced(root): \r\n\tif root is None: \r\n\t\treturn True\r\n\tlh = get_height(root.left) \r\n\trh = get_height(root.right) \r\n\tif (abs(lh - rh) <= 1) and is_tree_balanced( \r\n\troot.left) is True and is_tree_balanced( root.right) is True: \r\n\t\treturn True\r\n\treturn False"
    },
    {
        "number": 368,
        "prompt": "Write a function to repeat the given tuple n times.\ndef repeat_tuples(test_tup, N):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    \"\"\"\n    >>> tuple_1 = (1, 2, 3)\n    >>> tuple_2 = (4, 5, 6)\n    >>> tuple_3 = (7, 8, 9)\n    >>> repeat_tuples(tuple_1, 3)\n    (1, 2, 3, 1, 2, 3, 1, 2, 3)\n    >>> repeat_tuples(tuple_2, 2)\n    (4, 5, 4, 5, 6, 4, 5, 6)\n    >>> repeat_tuples(tuple_3, 3)\n    (7, 8, 7, 8, 7, 8, 7, 8, 7, 8, 7, 8)\n    \"\"\"\n    result = tuple(test_tup)\n    return result*N\n\n",
        "generated_testcode": "assert repeat_tuples((1, 2, 3), 3) == (1, 2, 3, 1, 2, 3, 1, 2, 3)\n",
        "test": "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))\nassert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))\nassert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))",
        "canonical_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) "
    },
    {
        "number": 369,
        "prompt": "Write a function to find the lateral surface area of cuboid\ndef lateralsurface_cuboid(l,w,h):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    surf_area = 2*l*w + 2*w*h + 2*h*l + 2*l*h\n    return surf_area\n\n",
        "generated_testcode": "assert lateralsurface_cuboid(1,2,3) == 6\n",
        "test": "assert lateralsurface_cuboid(8,5,6)==156\nassert lateralsurface_cuboid(7,9,10)==320\nassert lateralsurface_cuboid(10,20,30)==1800",
        "canonical_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA"
    },
    {
        "number": 370,
        "prompt": "Write a function to sort a tuple by its float element.\ndef float_sort(price):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if type(price) is not tuple:\n        raise TypeError\n    else:\n        return sorted(price, key=float)\n\n",
        "generated_testcode": "assert float_sort((1,2,3,4,5,6,7,8,9,10)) == (10,9,8,7,6,5,4,3,2,1)\n",
        "test": "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] \nassert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] \nassert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] ",
        "canonical_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort"
    },
    {
        "number": 371,
        "prompt": "Write a function to find the smallest missing element in a sorted array.\ndef smallest_missing(A, left_element, right_element):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(A)\n    if left_element <= right_element:\n        middle_element = left_element + (right_element - left_element) // 2\n        if (middle_element < n) and (A[middle_element] == middle_element):\n            return smallest_missing(A, middle_element + 1, right_element)\n        elif (middle_element < n) and (A[middle_element]!= middle_element):\n            return smallest_missing(A, left_element, middle_element - 1)\n        else:\n            return middle_element\n    else:\n        return -1\n\n",
        "generated_testcode": "assert smallest_missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 1, 10) == 2\n",
        "test": "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7\nassert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3\nassert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0",
        "canonical_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)"
    },
    {
        "number": 372,
        "prompt": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.\ndef heap_assending(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    size = len(nums)\n    for i in range(size // 2 - 1, -1, -1):\n        siftdown(nums, i, size)\n    for i in range(size - 1, 0, -1):\n        nums[0], nums[i] = nums[i], nums[0]\n        siftdown(nums, 0, i)\n    return nums\n\n",
        "generated_testcode": "assert heap_assending([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]\nassert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result"
    },
    {
        "number": 373,
        "prompt": "Write a function to find the volume of a cuboid.\ndef volume_cuboid(l,w,h):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return (l*w*h)\n\n",
        "generated_testcode": "assert volume_cuboid(2,3,4) == 24\n",
        "test": "assert volume_cuboid(1,2,3)==6\nassert volume_cuboid(5,7,9)==315\nassert volume_cuboid(10,15,21)==3150",
        "canonical_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume"
    },
    {
        "number": 374,
        "prompt": "Write a function to print all permutations of a given string including duplicates.\ndef permute_string(str):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    if len(str) < 2:\n        return [str]\n    else:\n        res = []\n        for i in range(len(str)):\n            sub_str = str[:i] + str[i + 1:]\n            perms = permute_string(sub_str)\n            for j in perms:\n                res.append(str[i] + j)\n        return res\n\n",
        "generated_testcode": "assert permute_string('abc') == ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n\n",
        "test": "assert permute_string('ab')==['ab', 'ba']\nassert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']\nassert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']",
        "canonical_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list"
    },
    {
        "number": 375,
        "prompt": "Write a function to round the given number to the nearest multiple of a specific number.\ndef round_num(n,m):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return n+m-n%m\n\n",
        "generated_testcode": "assert round_num(5,2) == 3\n",
        "test": "assert round_num(4722,10)==4720\nassert round_num(1111,5)==1110\nassert round_num(219,2)==218",
        "canonical_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)"
    },
    {
        "number": 376,
        "prompt": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.\ndef remove_replica(test_tup):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    unique_tup = (len(test_tup) == len(set(test_tup)))\n    if unique_tup:\n        for i in range(len(test_tup)):\n            if test_tup[i] in test_tup:\n                test_tup[i] = 0\n        return test_tup\n    else:\n        test_tup = (tuple(set(test_tup)))\n        return test_tup\n\n",
        "generated_testcode": "assert remove_replica(('a', 'b', 'c', 'd', 'e', 'f', 'a')) == ('a', 'b', 'c', 'd', 'e', 'f', 'f')\n",
        "test": "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')\nassert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')\nassert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')",
        "canonical_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)"
    },
    {
        "number": 377,
        "prompt": "Write a python function to remove all occurrences of a character in a given string.\ndef remove_Char(s,c) :  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(s)): \n        if (s[i] == c): \n            s = s[:i] + s[i+1:] \n    return s\nstring = \"applaudits\"\nprint(remove_Char(string,'a'))",
        "generated_testcode": "assert remove_Char(\"Hello World\", \"l\") == \"Hello World\"\n",
        "test": "assert remove_Char(\"aba\",'a') == \"b\"\nassert remove_Char(\"toggle\",'g') == \"tole\"\nassert remove_Char(\"aabbc\",'b') == \"aac\"",
        "canonical_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) "
    },
    {
        "number": 378,
        "prompt": "Write a python function to shift last element to first position in the given list.\ndef move_first(test_list):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(test_list) == 0:\n        return False\n    else:\n        test_list.insert(0, test_list.pop())\n        return test_list\n\n",
        "generated_testcode": "assert move_first([1,2,3,4,5]) == [5,1,2,3,4]\n",
        "test": "assert move_first([1,2,3,4]) == [4,1,2,3]\nassert move_first([0,1,2,3]) == [3,0,1,2]\nassert move_first([9,8,7,1]) == [1,9,8,7]",
        "canonical_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list"
    },
    {
        "number": 379,
        "prompt": "Write a function to find the surface area of a cuboid.\ndef surfacearea_cuboid(l,w,h):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code here\n    return l*w*h\n\n",
        "generated_testcode": "assert surfacearea_cuboid(1,2,3) == 6\n",
        "test": "assert surfacearea_cuboid(1,2,3)==22\nassert surfacearea_cuboid(5,7,9)==286\nassert surfacearea_cuboid(10,15,21)==1350",
        "canonical_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA"
    },
    {
        "number": 380,
        "prompt": "Write a function to generate a two-dimensional array.\ndef multi_list(rownum,colnum):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    arr = []\n    for i in range(rownum):\n        arr.append([])\n        for j in range(colnum):\n            arr[i].append(0)\n    return arr\n\n",
        "generated_testcode": "assert multi_list(2,3) == [[1,2,3],[4,5,6]]\n",
        "test": "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] \nassert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]\nassert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]",
        "canonical_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n"
    },
    {
        "number": 381,
        "prompt": "Write a function to sort a list of lists by a given index of the inner list.\ndef index_on_inner_list(list_data, index_no):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    list_data = sorted(list_data, key=lambda i: i[index_no])\n    return list_data\n\n",
        "generated_testcode": "assert index_on_inner_list(list_data, index_no) == sorted(list_data, key=lambda x: x[index_no])\n\n",
        "test": "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]\nassert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]",
        "canonical_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result"
    },
    {
        "number": 382,
        "prompt": "Write a function to find the number of rotations in a circularly sorted array.\ndef find_rotation_count(A):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  count = 0\n  if len(A) == 0:\n    return count\n  for i in range(0,len(A)-1):\n    if A[i] > A[i+1]:\n      count += 1\n    else:\n      continue\n  return count\nA = [-7,4,8,0,1,2]\nprint(find_rotation_count(A))\n\n",
        "generated_testcode": "assert find_rotation_count([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3\nassert find_rotation_count([8, 9, 10,2, 5, 6]) == 3\nassert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0",
        "canonical_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1"
    },
    {
        "number": 383,
        "prompt": "Write a python function to toggle all odd bits of a given number.\ndef even_bit_toggle_number(n) : \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    bit_list = list(format(n, 'b'))\n    odd_bit_count = 0\n    for i in range(len(bit_list)):\n        if bit_list[i] == '0':\n            odd_bit_count += 1\n    if odd_bit_count > 1:\n        bit_list[0] = '1' if bit_list[0] == '0' else '0'\n    bit_list = ''.join(bit_list)\n    return int(bit_list, 2)\n\n",
        "generated_testcode": "assert even_bit_toggle_number(0) == 0\n",
        "test": "assert even_bit_toggle_number(10) == 15\nassert even_bit_toggle_number(20) == 1\nassert even_bit_toggle_number(30) == 11",
        "canonical_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res "
    },
    {
        "number": 384,
        "prompt": "Write a python function to find the frequency of the smallest value in a given array.\ndef frequency_Of_Smallest(n,arr): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    freq = {}\n    for i in range(0, n): \n        if(arr[i] in freq): \n            freq[arr[i]] += 1\n        else: \n            freq[arr[i]] = 1\n    min_val = min(freq.values())\n    return (min_val)\n\n",
        "generated_testcode": "assert frequency_Of_Smallest(5, [1, 2, 3, 4, 5]) == 1\n",
        "test": "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1\nassert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1\nassert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3",
        "canonical_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 385,
        "prompt": "Write a function to find the n'th perrin number using recursion.\ndef get_perrin(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 2:\n        return n\n    else:\n        return n*get_perrin(n-1)\n\n",
        "generated_testcode": "assert get_perrin(1) == 1\n",
        "test": "assert get_perrin(9) == 12\nassert get_perrin(4) == 2\nassert get_perrin(6) == 5",
        "canonical_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)"
    },
    {
        "number": 386,
        "prompt": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.\ndef swap_count(s):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    cnt = 0\n    for i in range(len(s)):\n        if s[i] == \"(\":\n            cnt += 1\n        elif s[i] == \")\":\n            cnt -= 1\n        if cnt < 0:\n            return -1\n    return cnt\n\n",
        "generated_testcode": "assert swap_count(\"(()())\") == 0\n",
        "test": "assert swap_count(\"[]][][\") == 2\nassert swap_count(\"[[][]]\") == 0\nassert swap_count(\"[[][]]][\") == 1",
        "canonical_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap"
    },
    {
        "number": 387,
        "prompt": "Write a python function to check whether the hexadecimal number is even or odd.\ndef even_or_odd(N): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    return N if N % 2 == 0 else N + 1\n\n",
        "generated_testcode": "assert even_or_odd(0) == False\n",
        "test": "assert even_or_odd(\"AB3454D\") ==\"Odd\"\nassert even_or_odd(\"ABC\") == \"Even\"\nassert even_or_odd(\"AAD\") == \"Odd\"",
        "canonical_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") "
    },
    {
        "number": 388,
        "prompt": "Write a python function to find the highest power of 2 that is less than or equal to n.\ndef highest_Power_of_2(n): \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    if n <= 1: \n        return n \n    else: \n        n = n // 2 \n        return highest_Power_of_2(n) \n  \n#n = 12\n#highest_Power_of_2(n) = 6\n  \n# Find the sum of the digits of Pi.\n\n",
        "generated_testcode": "assert highest_Power_of_2(1) == 1\n",
        "test": "assert highest_Power_of_2(10) == 8\nassert highest_Power_of_2(19) == 16\nassert highest_Power_of_2(32) == 32",
        "canonical_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; "
    },
    {
        "number": 389,
        "prompt": "Write a function to find the n'th lucas number.\ndef find_lucas(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 0: \n        return 0\n    if n == 1: \n        return 2\n    return find_lucas(n-1) + find_lucas(n-2)\nprint(find_lucas(5))\n\n",
        "generated_testcode": "assert find_lucas(1) == 2\n",
        "test": "assert find_lucas(9) == 76\nassert find_lucas(4) == 7\nassert find_lucas(3) == 4",
        "canonical_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) "
    },
    {
        "number": 390,
        "prompt": "Write a function to insert a given string at the beginning of all items in a list.\ndef add_string(list,string):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list)):\n        list[i] = string + list[i]\n\n",
        "generated_testcode": "assert add_string(['a','b','c'], 'hello') == ['hello','a','b','c']\n",
        "test": "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']\nassert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']\nassert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']",
        "canonical_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string"
    },
    {
        "number": 391,
        "prompt": "Write a function to convert more than one list to nested dictionary.\ndef convert_list_dictionary(l1, l2, l3):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(l1)):\n        temp = []\n        for j in range(len(l2)):\n            temp.append(l1[i] + l2[j])\n        l3.append(dict(zip(l2, temp)))\n\n",
        "generated_testcode": "assert convert_list_dictionary(['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']) == {'a': {'d': 'g', 'e': 'h', 'f': 'i'}, 'b': {'d': 'g', 'e': 'h', 'f': 'i'}, 'c': {'d': 'g', 'e': 'h', 'f': 'i",
        "test": "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]\nassert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]\nassert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]",
        "canonical_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result"
    },
    {
        "number": 392,
        "prompt": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\ndef get_max_sum (n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tif n <= 1:\n\t\treturn n\n\telse:\n\t\treturn max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n\n",
        "generated_testcode": "assert get_max_sum(5) == 15\n",
        "test": "assert get_max_sum(60) == 106\nassert get_max_sum(10) == 12\nassert get_max_sum(2) == 2",
        "canonical_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]"
    },
    {
        "number": 393,
        "prompt": "Write a function to find the list with maximum length using lambda function.\ndef max_length_list(input_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return max(len(list) for list in input_list)\n\n",
        "generated_testcode": "assert max_length_list([1,2,3,4,5]) == 5\n",
        "test": "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])\nassert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])\nassert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])",
        "canonical_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)"
    },
    {
        "number": 394,
        "prompt": "Write a function to check if given tuple is distinct or not.\ndef check_distinct(test_tup):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    x = set(test_tup)\n    if len(x) == len(test_tup):\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_distinct((1,2,3,4)) == True\n",
        "test": "assert check_distinct((1, 4, 5, 6, 1, 4)) == False\nassert check_distinct((1, 4, 5, 6)) == True\nassert check_distinct((2, 3, 4, 5, 6)) == True",
        "canonical_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) "
    },
    {
        "number": 395,
        "prompt": "Write a python function to find the first non-repeated character in a given string.\ndef first_non_repeating_character(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    str1 = '''aabacdac'''\n    if len(str1) == 1:\n        return str1[0]\n    \n    char_occ = {}\n    for char in str1:\n        if char in char_occ:\n            char_occ[char] += 1\n        else:\n            char_occ[char] = 1\n    for char in str1:\n        if char_occ[char] == 1:\n            return char\n    return None\n\n",
        "generated_testcode": "assert first_non_repeating_character(\"abcd\") == \"e\"\n",
        "test": "assert first_non_repeating_character(\"abcabc\") == None\nassert first_non_repeating_character(\"abc\") == \"a\"\nassert first_non_repeating_character(\"ababc\") == \"c\"",
        "canonical_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None"
    },
    {
        "number": 396,
        "prompt": "Write a function to check whether the given string starts and ends with the same character or not using regex.\ndef check_char(string): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return True if (re.search('^[a-zA-Z]*$',string) and re.search('[a-zA-Z]*$',string)) else False\n  \n  \n# Return a string which is the concatenation of the first and last character of the given String \n# separated by the provided separator. \ndef separator(string, separator): \n    return string.strip()[0] + separator + string.strip()[-1] \n  \n  \n# An input list of strings. Return a list of strings where each string in the input list is \n# separated by ';'.\ndef sep_list(list): \n    return (','.join(list).split(','))\n  \n  \n# Given a list of strings, return a list of strings where each string in the list is \n# concatenated by '.'\ndef sep_dot(list):\n    return (','.join(list).split(','))\n  \n  \n# Given a string and a list of integers, return a list of integers where each integer \n# in the list is repeated the number of times in the input string.\ndef repeat(string, list):\n    return (list * int(string.count(list[0])))\n  \n  \n# Given a string, return a new string which is the reverse of the given string.\ndef reverse(string): \n    return string[::-1]\n  \n  \n# Given a string, return a new string where all characters 'a' are replaced",
        "generated_testcode": "assert check_char(\"abc\") == True\n",
        "test": "assert check_char(\"abba\") == \"Valid\"\nassert check_char(\"a\") == \"Valid\"\nassert check_char(\"abcd\") == \"Invalid\"",
        "canonical_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" "
    },
    {
        "number": 397,
        "prompt": "Write a function to find the median of three specific numbers.\ndef median_numbers(a,b,c):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    numbers = sorted([a,b,c])\n    if len(numbers) == 1:\n        return numbers[0]\n    elif len(numbers) == 2:\n        return (numbers[0]+numbers[1])/2\n    elif len(numbers) == 3:\n        return (numbers[0]+numbers[1]+numbers[2])/3\n    else:\n        return (numbers[0]+numbers[1]+numbers[2]+numbers[3])/4\n\n",
        "generated_testcode": "assert median_numbers(1,2,3) == 2\n",
        "test": "assert median_numbers(25,55,65)==55.0\nassert median_numbers(20,10,30)==20.0\nassert median_numbers(15,45,75)==45.0",
        "canonical_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median"
    },
    {
        "number": 398,
        "prompt": "Write a function to compute the sum of digits of each number of a given list.\ndef sum_of_digits(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for num in nums:\n        sum += num % 10\n    return sum\n\n",
        "generated_testcode": "assert sum_of_digits([1, 2, 3, 4, 5]) == 15\n",
        "test": "assert sum_of_digits([10,2,56])==14\nassert sum_of_digits([[10,20,4,5,'b',70,'a']])==19\nassert sum_of_digits([10,20,-4,5,-70])==19",
        "canonical_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())"
    },
    {
        "number": 399,
        "prompt": "Write a function to perform the mathematical bitwise xor operation across the given tuples.\ndef bitwise_xor(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\t(x1, x2) = test_tup1\n\t(y1, y2) = test_tup2\n\treturn ((x1 & y1) ^ (x1 & y2) ^ (x2 & y1) ^ (x2 & y2)), \n\n",
        "generated_testcode": "assert bitwise_xor((1, 2), (3, 4)) == (1, 3)\n",
        "test": "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)\nassert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)\nassert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)",
        "canonical_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 400,
        "prompt": "Write a function to extract the frequency of unique tuples in the given list order irrespective.\ndef extract_freq(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    my_list = []\n    for i in test_list:\n        my_list.append(i)\n        my_list = list(dict.fromkeys(my_list))\n    return my_list\n\n",
        "generated_testcode": "assert extract_freq(test_list) == {(1, 2): 1, (2, 1): 1, (3, 4): 1, (4, 3): 1, (5, 6): 1, (6, 5): 1}\n\n",
        "test": "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3\nassert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4\nassert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4",
        "canonical_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)"
    },
    {
        "number": 401,
        "prompt": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.\ndef add_nested_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    res = ()\n    for i in range(len(test_tup1)):\n        if len(test_tup1[i])!= len(test_tup2[i]):\n            res = False\n            break\n        res = tuple(map(lambda a, b: a + b, test_tup1[i], test_tup2[i]))\n    return res\n\n",
        "generated_testcode": "assert add_nested_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))\nassert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))\nassert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))",
        "canonical_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 402,
        "prompt": "Write a function to compute the value of ncr%p.\ndef ncr_modp(n, r, p): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    if (n < r or n < 0 or r < 0 or p < 0): \n        return 0\n  \n    if (r > n or r > n - r): \n        return 0\n  \n    # Initialize result \n    result = 1\n  \n    # calculate ncr%p for all \n    # possible values of (r, n-r) \n    for i in range(n-r+1): \n        result = (result * (n-i)) % p \n  \n    # Reduce by Inverse of \n    # Euler's Totient Function \n    result = (result * pow(result, p-2, p)) % p \n  \n    return result\n  \ndef compute_ncr_p(n, r): \n    # Using Euler's Totient Function \n    t = factorization(n) \n    p = 1\n    for i in range(len(t)): \n        p = p * (t[i] - r + 1) \n        p = p % n \n    return p \n\n",
        "generated_testcode": "assert ncr_modp(2, 2, 5) == 1\n",
        "test": "assert ncr_modp(10,2,13)==6\nassert ncr_modp(15,12,43)==25\nassert ncr_modp(17,9,18)==10",
        "canonical_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] "
    },
    {
        "number": 403,
        "prompt": "Write a function to check if a url is valid or not using regex.\ndef is_valid_URL(str):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    import re\n    url_regex = re.compile(r'^https?://|www.')\n    if url_regex.search(str):\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert is_valid_URL('http://google.com') == True\n",
        "test": "assert is_valid_URL(\"https://www.google.com\") == True\nassert is_valid_URL(\"https:/www.gmail.com\") == False\nassert is_valid_URL(\"https:// www.redit.com\") == False",
        "canonical_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False"
    },
    {
        "number": 404,
        "prompt": "Write a python function to find the minimum of two numbers.\ndef minimum(a,b):   \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if a>b:\n        return b\n    else:\n        return a\n\n",
        "generated_testcode": "assert minimum(2,3) == 1\n",
        "test": "assert minimum(1,2) == 1\nassert minimum(-5,-4) == -5\nassert minimum(0,0) == 0",
        "canonical_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b "
    },
    {
        "number": 405,
        "prompt": "Write a function to check whether an element exists within a tuple.\ndef check_tuplex(tuplex,tuple1): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(tuple1)):\n        if tuplex == tuple1[i]:\n            print('True')\n            return True\n    print('False')\n    return False\n\n",
        "generated_testcode": "assert check_tuplex((1,2,3),(1,2,3)) == True\n",
        "test": "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False\nassert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True",
        "canonical_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 406,
        "prompt": "Write a python function to find the parity of a given number.\ndef find_Parity(x): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    if x % 2 == 0:\n        return 'EVEN'\n    else:\n        return 'ODD'\n    \n# A function to find the sum of a given list of integers. \ndef sum_List(x): \n    \n    sum = 0\n    for i in x:\n        sum = sum + i\n    return sum\n\n",
        "generated_testcode": "assert find_Parity(5) == 0\n",
        "test": "assert find_Parity(12) == \"Even Parity\"\nassert find_Parity(7) == \"Odd Parity\"\nassert find_Parity(10) == \"Even Parity\"",
        "canonical_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); "
    },
    {
        "number": 407,
        "prompt": "Write a function to create the next bigger number by rearranging the digits of a given number.\ndef rearrange_bigger(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    str_num = str(n)\n    if len(str_num) == 1:\n        return n\n    else:\n        return int(''.join(sorted(str_num, reverse=True)))\n\n",
        "generated_testcode": "assert rearrange_bigger(1234) == 4321\n",
        "test": "assert rearrange_bigger(12)==21\nassert rearrange_bigger(10)==False\nassert rearrange_bigger(102)==120",
        "canonical_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False"
    },
    {
        "number": 408,
        "prompt": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.\ndef k_smallest_pairs(nums1, nums2, k):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if not nums1 or not nums2: return []\n    if k > len(nums1)*len(nums2): return []\n\n",
        "generated_testcode": "assert k_smallest_pairs([1, 3, 7, 8, 10], [2, 4, 6, 8, 10], 3) == [[1, 2], [3, 4], [7, 8]]\n",
        "test": "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]\nassert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]\nassert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]",
        "canonical_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs"
    },
    {
        "number": 409,
        "prompt": "Write a function to find the minimum product from the pairs of tuples within a given list.\ndef min_product_tuple(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  min_product = list1[0][0] * list1[0][1]\n  for i in range(1, len(list1)):\n    if min_product > list1[i][0] * list1[i][1]:\n      min_product = list1[i][0] * list1[i][1]\n  return min_product\nprint(min_product_tuple([(1, 2), (3, 4), (5, 6), (8, 6)]))\n\n",
        "generated_testcode": "assert min_product_tuple([(1, 2), (3, 4), (5, 6)]) == 24\n",
        "test": "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8\nassert min_product_tuple([(10,20), (15,2), (5,10)] )==30\nassert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100",
        "canonical_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min"
    },
    {
        "number": 410,
        "prompt": "Write a function to find the minimum value in a given heterogeneous list.\ndef min_val(listval):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    min_val = 0\n    if len(listval) == 0:\n        return \"list is empty\"\n    else:\n        min_val = listval[0]\n        for val in listval:\n            if val < min_val:\n                min_val = val\n        return min_val\n\n",
        "generated_testcode": "assert min_val([1,2,3,4,5]) == 1\n",
        "test": "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2\nassert min_val(['Python', 15, 20, 25])==15\nassert min_val(['Python', 30, 20, 40, 50, 'version'])==20",
        "canonical_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val"
    },
    {
        "number": 411,
        "prompt": "Write a function to convert the given snake case string to camel case string by using regex.\ndef snake_to_camel(word):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = word.split(\"_\")\n    return \"\".join(x.title() for x in result)\n\n",
        "generated_testcode": "assert snake_to_camel(\"snake_case\") == \"snakeCase\"\n",
        "test": "assert snake_to_camel('android_tv') == 'AndroidTv'\nassert snake_to_camel('google_pixel') == 'GooglePixel'\nassert snake_to_camel('apple_watch') == 'AppleWatch'",
        "canonical_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))"
    },
    {
        "number": 412,
        "prompt": "Write a python function to remove odd numbers from a given list.\ndef remove_odd(l):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return l[::2]\n\n",
        "generated_testcode": "assert remove_odd([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\n",
        "test": "assert remove_odd([1,2,3]) == [2]\nassert remove_odd([2,4,6]) == [2,4,6]\nassert remove_odd([10,20,3]) == [10,20]",
        "canonical_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 413,
        "prompt": "Write a function to extract the nth element from a given list of tuples.\ndef extract_nth_element(list1, n):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "  return list1[n-1]\n\n",
        "generated_testcode": "assert extract_nth_element([(1, 2), (3, 4), (5, 6)], 2) == (3, 4)\n",
        "test": "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]\nassert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]",
        "canonical_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result"
    },
    {
        "number": 414,
        "prompt": "Write a python function to check whether the value exists in a sequence or not.\ndef overlapping(list1,list2):  \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if set(list1) & set(list2):\n        return True\n    else:\n        return False\n    \n\n",
        "generated_testcode": "assert overlapping([1,2,3,4,5,6,7,8,9,10], [1,2,3,4,5,6,7,8,9,10]) == True\n",
        "test": "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False\nassert overlapping([1,2,3],[4,5,6]) == False\nassert overlapping([1,4,5],[1,4,5]) == True",
        "canonical_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0"
    },
    {
        "number": 415,
        "prompt": "Write a python function to find a pair with highest product from a given array of integers.\ndef max_Product(arr): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    \n    # Initialize maximum product \n    max_product = -1\n    \n    # Iterate through elements of array \n    for i in range(0, len(arr)): \n        \n        # Initialize current product \n        current_product = 1\n        \n        # Iterate through all elements of array \n        for j in range(i + 1, len(arr)): \n            current_product *= arr[j] \n            \n            if current_product > max_product: \n                max_product = current_product \n            \n    return max_product \n\n",
        "generated_testcode": "assert max_Product([1, 2, 3, 4, 5]) == 120\n",
        "test": "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)\nassert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)\nassert max_Product([1,2,3]) == (2,3)",
        "canonical_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    "
    },
    {
        "number": 416,
        "prompt": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.\ndef breakSum(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  if n == 0:\n    return 0\n  if n % 3 == 0:\n    return breakSum(n//3) + n\n  if n % 3 == 1:\n    return breakSum(n//3) + n\n  if n % 3 == 2:\n    return breakSum(n//3) + n\n  return breakSum(n//3) + n\n\n",
        "generated_testcode": "assert breakSum(10) == 10\n",
        "test": "assert breakSum(12) == 13\nassert breakSum(24) == 27\nassert breakSum(23) == 23",
        "canonical_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]"
    },
    {
        "number": 417,
        "prompt": "Write a function to find common first element in given list of tuple.\ndef group_tuples(Input): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n    d = {}\n    for t in Input: \n        key = t[0]\n        if key in d:\n            d[key].append(t)\n        else:\n            d[key] = [t]\n    return list(d.values())\n\n",
        "generated_testcode": "assert group_tuples(Input) == (1, 2, 3)\n\n",
        "test": "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]\nassert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]\nassert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]",
        "canonical_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] "
    },
    {
        "number": 418,
        "prompt": "Write a python function to find the sublist having maximum length.\ndef Find_Max(lst): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "\tlength = len(lst) \n\tsub_list = [] \n\tfor i in range(0, length): \n\t\tfor j in range(i+1, length): \n\t\t\tsub_list.append(lst[i:j+1]) \n\tprint (sub_list) \n\t#return (max(sub_list, key = len)) \n\tmax_sub = max(sub_list, key = len) \n\treturn max_sub \n\t#code here \n\n",
        "generated_testcode": "assert Find_Max([1,2,3,4,5,6,7,8,9]) == [1,2,3,4,5,6,7,8,9]\n",
        "test": "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']\nassert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]\nassert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]",
        "canonical_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList"
    },
    {
        "number": 419,
        "prompt": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\ndef round_and_sum(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    total = 0\n    for i in list1:\n        total += i\n        i = round(i)\n    return total\n\n",
        "generated_testcode": "assert round_and_sum([1, 2, 3, 4, 5]) == 30\n",
        "test": "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243\nassert round_and_sum([5,2,9,24.3,29])==345\nassert round_and_sum([25.0,56.7,89.2])==513",
        "canonical_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum"
    },
    {
        "number": 420,
        "prompt": "Write a python function to find the cube sum of first n even natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    '''returns the cube sum of first n natural numbers'''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum\n\n",
        "generated_testcode": "assert cube_Sum(5) == (25)\n",
        "test": "assert cube_Sum(2) == 72\nassert cube_Sum(3) == 288\nassert cube_Sum(4) == 800",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum"
    },
    {
        "number": 421,
        "prompt": "Write a function to concatenate each element of tuple by the delimiter.\ndef concatenate_tuple(test_tup):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    concatenated_tup = ''\n    for i in test_tup:\n        concatenated_tup = concatenated_tup + str(i)\n    return concatenated_tup\n\n",
        "generated_testcode": "assert concatenate_tuple(('a', 'b', 'c')) == 'abc', \"Should be 'abc'\"\n",
        "test": "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'\nassert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'\nassert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'",
        "canonical_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) "
    },
    {
        "number": 422,
        "prompt": "Write a python function to find the average of cubes of first n natural numbers.\ndef find_Average_Of_Cube(n):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    i = 1\n    total = 0\n    while(i<=n):\n        total = total + (i*i*i)\n        i = i+1\n        print(\"i = \",i)\n    print(total)\n    return total\n\n",
        "generated_testcode": "assert find_Average_Of_Cube(5) == 1\n",
        "test": "assert find_Average_Of_Cube(2) == 4.5\nassert find_Average_Of_Cube(3) == 12\nassert find_Average_Of_Cube(1) == 1",
        "canonical_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) "
    },
    {
        "number": 423,
        "prompt": "Write a function to solve gold mine problem.\ndef get_maxgold(gold, m, n): \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    def get_max(arr, i, j): \n        \n        if (i >= m or j >= n or i < 0 or j < 0): \n            return 0\n        \n        if (gold[i][j] == 'X'): \n            return 0\n        \n        if (arr[i][j] == -1): \n            return 0\n        \n        return arr[i][j] + get_max(arr, i + 1, j) + get_max(arr, i, j + 1)\n    \n    \n    arr = [[-1 for i in range(n)]for j in range(m)] \n    max_gold = 0\n    for i in range(m): \n        for j in range(n): \n            arr[i][j] = get_max(arr, i, j)\n            if (max_gold < arr[i][j]): \n                max_gold = arr[i][j]\n    return max_gold\n\n",
        "generated_testcode": "assert get_maxgold(gold = [[1, 3, 1], \n                           [2, 2, 4], \n                           [3, 1, 1]], \n                   m = 3, \n                   n = 3) == 6\n\n",
        "test": "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16\nassert get_maxgold([[10,20],[30,40]],2,2)==70\nassert get_maxgold([[4,9],[3,7]],2,2)==13",
        "canonical_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res "
    },
    {
        "number": 424,
        "prompt": "Write a function to extract only the rear index element of each string in the given tuple.\ndef extract_rear(test_tuple):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return (test_tuple[-1])\n\n",
        "generated_testcode": "assert extract_rear(('abc', 'xyz', 'z', 'abc')) == 'abc'\n",
        "test": "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']\nassert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']\nassert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']",
        "canonical_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) "
    },
    {
        "number": 425,
        "prompt": "Write a function to count the number of sublists containing a particular element.\ndef count_element_in_list(list1, x): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(0, len(list1)):\n        if x == list1[i]:\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert count_element_in_list([1, 2, 3, 4, 5], 3) == 2\n",
        "test": "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3\nassert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1",
        "canonical_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr"
    },
    {
        "number": 426,
        "prompt": "Write a function to filter odd numbers using lambda function.\ndef filter_oddnumbers(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    result = list(filter(lambda n: n%2!= 0, nums))\n    return result\n\n",
        "generated_testcode": "assert filter_oddnumbers([1,2,3,4,5,6,7,8,9,10]) == [1,3,5,7,9]\n",
        "test": "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]\nassert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]\nassert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]",
        "canonical_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums"
    },
    {
        "number": 427,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.\ndef change_date_format(dt):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    try:\n        return dt.strftime('%d-%m-%Y')\n    except:\n        return None\nprint(change_date_format('12-30-1990'))\nprint(change_date_format('25-12-1997'))\n\n",
        "generated_testcode": "assert change_date_format(\"12-12-2020\") == \"12-12-2020\"\n",
        "test": "assert change_date_format(\"2026-01-02\") == '02-01-2026'\nassert change_date_format(\"2020-11-13\") == '13-11-2020'\nassert change_date_format(\"2021-04-26\") == '26-04-2021'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    },
    {
        "number": 428,
        "prompt": "Write a function to sort the given array by using shell sort.\ndef shell_sort(my_list):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    N = len(my_list)\n    gap = N // 2\n    while gap > 0:\n        for i in range(gap, N):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n\n",
        "generated_testcode": "assert shell_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]\nassert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]\nassert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]",
        "canonical_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list"
    },
    {
        "number": 429,
        "prompt": "Write a function to extract the elementwise and tuples from the given two tuples.\ndef and_tuples(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    l1 = list(test_tup1)\n    l2 = list(test_tup2)\n    l3 = []\n    for i in range(len(l1)):\n        if l1[i] and l2[i]:\n            l3.append(l1[i])\n            l3.append(l2[i])\n    return tuple(l3)\n\n",
        "generated_testcode": "assert and_tuples((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)\nassert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)\nassert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)",
        "canonical_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 430,
        "prompt": "Write a function to find the directrix of a parabola.\ndef parabola_directrix(a, b, c): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    delta = (b**2 - 4*a*c)\n    print(delta)\n    if delta > 0:\n        x1 = (-b + math.sqrt(delta))/(2*a)\n        x2 = (-b - math.sqrt(delta))/(2*a)\n        print(x1)\n        print(x2)\n    else:\n        print(\"Parabola does not have any real roots.\")\n\n",
        "generated_testcode": "assert parabola_directrix(1, 2, 3) == (1, 2)\n",
        "test": "assert parabola_directrix(5,3,2)==-198\nassert parabola_directrix(9,8,4)==-2336\nassert parabola_directrix(2,4,6)==-130",
        "canonical_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix"
    },
    {
        "number": 431,
        "prompt": "Write a function that takes two lists and returns true if they have at least one common element.\ndef common_element(list1, list2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    # Write your code here.\n    #return any(ele in list1 for ele in list2)\n    for ele in list1:\n        if ele in list2:\n            return True\n    return False\n\n",
        "generated_testcode": "assert common_element([1, 2, 3], [1, 2, 3]) == True\n",
        "test": "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True\nassert common_element([1,2,3,4,5], [6,7,8,9])==None\nassert common_element(['a','b','c'], ['d','b','e'])==True",
        "canonical_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result"
    },
    {
        "number": 432,
        "prompt": "Write a function to find the median of a trapezium.\ndef median_trapezium(base1,base2,height):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return (base1+base2)/2 + height/2\n\n",
        "generated_testcode": "assert median_trapezium(1,2,3) == 2\n",
        "test": "assert median_trapezium(15,25,35)==20\nassert median_trapezium(10,20,30)==15\nassert median_trapezium(6,9,4)==7.5",
        "canonical_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median"
    },
    {
        "number": 433,
        "prompt": "Write a function to check whether the entered number is greater than the elements of the given array.\ndef check_greater(arr, number):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in arr:\n        if num > number:\n            return True\n    return False\n\n",
        "generated_testcode": "assert check_greater([1, 2, 3, 4], 5) == False\n",
        "test": "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'\nassert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'\nassert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'",
        "canonical_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    },
    {
        "number": 434,
        "prompt": "Write a function that matches a string that has an a followed by one or more b's.\ndef text_match_one(text):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return text.find('ab') >= 0\n\n",
        "generated_testcode": "assert text_match_one(\"ab\") == True\n",
        "test": "assert text_match_one(\"ac\")==('Not matched!')\nassert text_match_one(\"dc\")==('Not matched!')\nassert text_match_one(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n"
    },
    {
        "number": 435,
        "prompt": "Write a python function to find the last digit of a given number.\ndef last_Digit(n) :\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return (n % 10)\n    \nprint(\"The last digit of\",n,\"is\",last_Digit(n))\n\n",
        "generated_testcode": "assert last_Digit(12345) == 4\n",
        "test": "assert last_Digit(123) == 3\nassert last_Digit(25) == 5\nassert last_Digit(30) == 0",
        "canonical_solution": "def last_Digit(n) :\r\n    return (n % 10) "
    },
    {
        "number": 436,
        "prompt": "Write a python function to print negative numbers in a list.\ndef neg_nos(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in list1:\n        if i < 0:\n            print(\"{} is a negative number\".format(i))\n    else:\n        print(\"No negative numbers\")\n\n",
        "generated_testcode": "assert neg_nos([1, -2, 3, -4, 5]) == [-1, -2, -3, -4, -5]\n",
        "test": "assert neg_nos([-1,4,5,-6]) == -1,-6\nassert neg_nos([-1,-2,3,4]) == -1,-2\nassert neg_nos([-7,-6,8,9]) == -7,-6",
        "canonical_solution": "def neg_nos(list1):\r\n  for num in list1: \r\n    if num < 0: \r\n       return num "
    },
    {
        "number": 437,
        "prompt": "Write a function to remove odd characters in a string.\ndef remove_odd(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tnewstr = \"\"\n\tfor i in str1:\n\t\tif ord(i) < 128:\n\t\t\tnewstr += i\n\treturn newstr\n\t\nprint(remove_odd('abcd')) # 'abc'\nprint(remove_odd('aBcDeF')) # 'abcdef'\nprint(remove_odd('ABcdeF')) # 'abcdef'\nprint(remove_odd('abcde')) # 'abcde'\nprint(remove_odd('abcdeABCdeF')) # 'abcdeABCdeF'\nprint(remove_odd('ABCdeF')) # 'ABCdeF'\nprint(remove_odd('a')) # 'a'\nprint(remove_odd('ab')) # 'ab'\nprint(remove_odd('abc')) # 'abc'\nprint(remove_odd('abcABCdeF')) # 'abcABCdeF'\n\n",
        "generated_testcode": "assert remove_odd(\"Hello\") == \"H\"\n",
        "test": "assert remove_odd(\"python\")==(\"yhn\")\nassert remove_odd(\"program\")==(\"rga\")\nassert remove_odd(\"language\")==(\"agae\")",
        "canonical_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2"
    },
    {
        "number": 438,
        "prompt": "Write a function to count bidirectional tuple pairs.\ndef count_bidirectional(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    '''\n    return the count of bidirectional tuple pairs\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            t1 = test_list[i]\n            t2 = test_list[j]\n            if t1 == t2[::-1]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "assert count_bidirectional([(1, 2), (2, 1)]) == 2\n",
        "test": "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'\nassert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'\nassert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'",
        "canonical_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) "
    },
    {
        "number": 439,
        "prompt": "Write a function to convert a list of multiple integers into a single integer.\ndef multiple_to_single(L):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return reduce(lambda x,y: x*y, L)\n\n",
        "generated_testcode": "assert multiple_to_single([1, 2, 3, 4, 5]) == 120\n",
        "test": "assert multiple_to_single([11, 33, 50])==113350\nassert multiple_to_single([-1,2,3,4,5,6])==-123456\nassert multiple_to_single([10,15,20,25])==10152025",
        "canonical_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x"
    },
    {
        "number": 440,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence.\ndef find_adverb_position(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return [\n        (i, i+1)\n        for i in range(len(text))\n        if text[i] == 'RB'\n    ]\n# Check your answer\ntest_find_adverb_position(\"The food is delicious, but I think I'll need something else. I'm going to check that out.\")\ntest_find_adverb_position(\"The food is delicious, but I'm going to check that out. I'm going to check that out.\")\ntest_find_adverb_position(\"I am a crazy person, but I'm going to make you believe that you are a normal person. That is, if you ask me if I'm crazy, I'm only going to tell you that I am.\")\ntest_find_adverb_position(\"I am a crazy person, but I'm going to make you believe that you are a normal person. That is, if you ask me if I'm crazy, I'm only going to tell you that I am.\")\n\n",
        "generated_testcode": "assert find_adverb_position(\"I am an adverb\") == (1, 3)\n",
        "test": "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')\nassert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')\nassert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')",
        "canonical_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))"
    },
    {
        "number": 441,
        "prompt": "Write a function to find the surface area of a cube.\ndef surfacearea_cube(l):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return 6 * l ** 2\n\n",
        "generated_testcode": "assert surfacearea_cube(1) == 6\n",
        "test": "assert surfacearea_cube(5)==150\nassert surfacearea_cube(3)==54\nassert surfacearea_cube(10)==600",
        "canonical_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea"
    },
    {
        "number": 442,
        "prompt": "Write a function to find the ration of positive numbers in an array of integers.\ndef positive_count(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return len([n for n in nums if n > 0]) / len(nums)\n",
        "generated_testcode": "assert positive_count([1, 2, 3, 4, 5]) == 0.25\n",
        "test": "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54\nassert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69\nassert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56",
        "canonical_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 443,
        "prompt": "Write a python function to find the largest negative number from the given list.\ndef largest_neg(list1): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    largest_neg = list1[0]\n    for i in range(len(list1)): \n        if list1[i] > largest_neg: \n            largest_neg = list1[i]\n    return largest_neg\n\n",
        "generated_testcode": "assert largest_neg([-1, -2, -3, -4, -5]) == -5\n",
        "test": "assert largest_neg([1,2,3,-4,-6]) == -6\nassert largest_neg([1,2,3,-8,-9]) == -9\nassert largest_neg([1,2,3,4,-1]) == -1",
        "canonical_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 444,
        "prompt": "Write a function to trim each tuple by k in the given tuple list.\ndef trim_tuple(test_list, K):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return([x[:K] for x in test_list])\n\n",
        "generated_testcode": "assert trim_tuple(test_list, K) == [(1, 2), (3, 4), (5, 6)]\n\n",
        "test": "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'\nassert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'\nassert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'",
        "canonical_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) "
    },
    {
        "number": 445,
        "prompt": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.\ndef index_multiplication(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    tup1 = list(test_tup1)\n    tup2 = list(test_tup2)\n    result = tuple(a * b for a, b in zip(tup1, tup2))\n    return result\n\n",
        "generated_testcode": "assert index_multiplication((1, 2, 3), (4, 5, 6)) == (4, 10, 18)\n",
        "test": "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))\nassert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))\nassert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))",
        "canonical_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 446,
        "prompt": "Write a python function to count the occurence of all elements of list in a tuple.\ndef count_Occurrence(tup, lst): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    occ = 0\n    for i in range(0,len(tup)):\n        if tup[i] in lst:\n            occ += 1\n    return occ\n\n",
        "generated_testcode": "assert count_Occurrence((1,2,3,4,5), (1,2,3,4,5)) == 5\n",
        "test": "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3\nassert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6\nassert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2",
        "canonical_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  "
    },
    {
        "number": 447,
        "prompt": "Write a function to find cubes of individual elements in a list using lambda function.\ndef cube_nums(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return [n ** 3 for n in nums]\n\n",
        "generated_testcode": "assert cube_nums([1, 2, 3, 4, 5]) == [1, 8, 27, 64, 125]\n",
        "test": "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]\nassert cube_nums([10,20,30])==([1000, 8000, 27000])\nassert cube_nums([12,15])==([1728, 3375])",
        "canonical_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums"
    },
    {
        "number": 448,
        "prompt": "Write a function to calculate the sum of perrin numbers.\ndef cal_sum(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    while (n > 0): \n        sum += (n % 10) \n        n = (n - (n % 10)) / 10\n    return sum\nprint(cal_sum(1001))\n\n",
        "generated_testcode": "assert cal_sum(1) == 1\n",
        "test": "assert cal_sum(9) == 49\nassert cal_sum(10) == 66\nassert cal_sum(11) == 88",
        "canonical_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum"
    },
    {
        "number": 449,
        "prompt": "Write a python function to check whether the triangle is valid or not if 3 points are given.\ndef check_Triangle(x1,y1,x2,y2,x3,y3): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  if (abs(x2-x3)<(y2-y3)) and (abs(y3-y2)<(x2-x3)) and (abs(x1-x3)<(y1-y2)) and (abs(y1-y3)<(x1-x2)): \n    print(\"Triangle is valid\") \n  else: \n    print(\"Triangle is not valid\") \n  \nx1,y1,x2,y2,x3,y3=input().split() \nx1,y1,x2,y2,x3,y3=float(x1),float(y1),float(x2),float(y2),float(x3),float(y3) \ncheck_Triangle(x1,y1,x2,y2,x3,y3)\n\n",
        "generated_testcode": "assert check_Triangle(1,2,3,4,5,6) == True, \"Triangle is not valid\"\n",
        "test": "assert check_Triangle(1,5,2,5,4,6) == 'Yes'\nassert check_Triangle(1,1,1,4,1,5) == 'No'\nassert check_Triangle(1,1,1,1,1,1) == 'No'",
        "canonical_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') "
    },
    {
        "number": 450,
        "prompt": "Write a function to extract specified size of strings from a give list of string values.\ndef extract_string(str, l):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    count = 0\n    new_list = []\n    for i in range(len(str)):\n        if count == l:\n            break\n        new_list.append(str[i])\n        count += 1\n    return new_list\n\n",
        "generated_testcode": "assert extract_string(['a', 'b', 'c', 'd', 'e', 'f'], 2) == ['a', 'b']\n",
        "test": "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']\nassert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']",
        "canonical_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result"
    },
    {
        "number": 451,
        "prompt": "Write a function to remove all whitespaces from the given string using regex.\ndef remove_whitespaces(text1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    new_text = re.sub(\"\\s\", \"\", text1)\n    return new_text\n\n",
        "generated_testcode": "assert remove_whitespaces(\"  hello world  \") == \"hello world\"\n",
        "test": "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'\nassert remove_whitespaces(' Google    Dart ') == 'GoogleDart'\nassert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'",
        "canonical_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))"
    },
    {
        "number": 452,
        "prompt": "Write a function that gives loss amount if the given amount has loss else return none.\ndef loss_amount(actual_cost,sale_amount): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    loss_amount = float(actual_cost) - float(sale_amount)\n    if loss_amount <= 0:\n        return 0\n    else:\n        return loss_amount\n\n",
        "generated_testcode": "assert loss_amount(100,50) == 50\n",
        "test": "assert loss_amount(1500,1200)==None\nassert loss_amount(100,200)==100\nassert loss_amount(2000,5000)==3000",
        "canonical_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None"
    },
    {
        "number": 453,
        "prompt": "Write a python function to find the sum of even factors of a number.\ndef sumofFactors(n) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 1\n    for i in range(2,n) : \n        if (n % i == 0) : \n            sum += i\n    return sum \n\n",
        "generated_testcode": "assert sumofFactors(12) == 6, \"Test 1 Failed\"\n",
        "test": "assert sumofFactors(18) == 26\nassert sumofFactors(30) == 48\nassert sumofFactors(6) == 8",
        "canonical_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res "
    },
    {
        "number": 454,
        "prompt": "Write a function that matches a word containing 'z'.\ndef text_match_wordz(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = re.search('z', text)\n    if result:\n        print(result.group())\n    else:\n        print('Not found')\n\n",
        "generated_testcode": "assert text_match_wordz('hello world') == True\n",
        "test": "assert text_match_wordz(\"pythonz.\")==('Found a match!')\nassert text_match_wordz(\"xyz.\")==('Found a match!')\nassert text_match_wordz(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 455,
        "prompt": "Write a function to check whether the given month number contains 31 days or not.\ndef check_monthnumb_number(monthnum2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_monthnumb_number(1) == True\n",
        "test": "assert check_monthnumb_number(5)==True\nassert check_monthnumb_number(2)==False\nassert check_monthnumb_number(6)==False",
        "canonical_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 456,
        "prompt": "Write a function to reverse strings in a given list of string values.\ndef reverse_string_list(stringlist):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return stringlist[::-1]\n\n",
        "generated_testcode": "assert reverse_string_list([\"hello\", \"world\"]) == [\"world\", \"hello\"], \"Should reverse the list\"\n",
        "test": "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']\nassert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']\nassert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']",
        "canonical_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result"
    },
    {
        "number": 457,
        "prompt": "Write a python function to find the sublist having minimum length.\ndef Find_Min(lst): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tmin_length = lst[0] \n\tn = len(lst) \n\tfor i in range(1, n): \n\t\tif len(lst[i]) < min_length: \n\t\t\tmin_length = len(lst[i]) \n\treturn min_length \n\n",
        "generated_testcode": "assert Find_Min([1,2,3,4,5]) == [1,2,3,4]\n",
        "test": "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]\nassert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]\nassert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']",
        "canonical_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList"
    },
    {
        "number": 458,
        "prompt": "Write a function to find the area of a rectangle.\ndef rectangle_area(l,b):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return l*b\n\n",
        "generated_testcode": "assert rectangle_area(3,4) == 12\n",
        "test": "assert rectangle_area(10,20)==200\nassert rectangle_area(10,5)==50\nassert rectangle_area(4,2)==8",
        "canonical_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area"
    },
    {
        "number": 459,
        "prompt": "Write a function to remove uppercase substrings from a given string by using regex.\ndef remove_uppercase(str1):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "\timport re\n\treturn re.sub(\"[A-Z]\", \"\", str1)\n\n",
        "generated_testcode": "assert remove_uppercase(\"\") == \"\"\n",
        "test": "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'\nassert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'\nassert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'",
        "canonical_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)"
    },
    {
        "number": 460,
        "prompt": "Write a python function to get the first element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(lst)): \n        print(lst[i][0]) \n  \n# Driver Code \nlst = [['Apple', 'Google', 'Microsoft'], ['Java', 'Python', 'Ruby', 'PHP'], \n       ['English', 'Spanish', 'Hindi', 'French'], ['Australia', 'New Zealand', 'Sri Lanka', 'India', 'China', 'South Africa']] \nExtract(lst) ",
        "generated_testcode": "assert Extract([[1,2,3], [4,5,6], [7,8,9]]) == 1\n",
        "test": "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]\nassert Extract([[1,2,3],[4, 5]]) == [1,4]\nassert Extract([[9,8,1],[1,2]]) == [9,1]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] "
    },
    {
        "number": 461,
        "prompt": "Write a python function to count the upper case characters in a given string.\ndef upper_ctr(str):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    upper_count = 0\n    for i in range(0, len(str)):\n        if str[i].isupper():\n            upper_count += 1\n    print(upper_count)\n\n",
        "generated_testcode": "assert upper_ctr('Hello World') == 6\n",
        "test": "assert upper_ctr('PYthon') == 1\nassert upper_ctr('BigData') == 1\nassert upper_ctr('program') == 0",
        "canonical_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr"
    },
    {
        "number": 462,
        "prompt": "Write a function to find all possible combinations of the elements of a given list.\ndef combinations_list(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    all_combinations = []\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            for k in range(j+1,len(list1)):\n                all_combinations.append([list1[i],list1[j],list1[k]])\n    return all_combinations\nprint(combinations_list([1,2,3]))\n\n",
        "generated_testcode": "assert combinations_list(['a', 'b', 'c']) == [['a', 'b', 'c'], ['a', 'c', 'b'], ['b', 'a', 'c'], ['b', 'c', 'a'], ['c', 'a', 'b'], ['c', 'b', 'a']]\n\n",
        "test": "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]\nassert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]\nassert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]",
        "canonical_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result"
    },
    {
        "number": 463,
        "prompt": "Write a function to find the maximum product subarray of the given array.\ndef max_subarray_product(arr):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Your code here\n    total = 0\n    max_product = 0\n\n",
        "generated_testcode": "assert max_subarray_product([1, 2, 3, 4, 5]) == 60\n",
        "test": "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112\nassert max_subarray_product([6, -3, -10, 0, 2]) == 180 \nassert max_subarray_product([-2, -40, 0, -2, -3]) == 80",
        "canonical_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far"
    },
    {
        "number": 464,
        "prompt": "Write a function to check if all values are same in a dictionary.\ndef check_value(dict, n):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(dict)):\n        if i < n - 1:\n            if dict[i]!= dict[i + 1]:\n                return False\n    return True\n\n",
        "generated_testcode": "assert check_value({1: 1, 2: 2, 3: 3}, 1) == True\n",
        "test": "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True\nassert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False",
        "canonical_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result"
    },
    {
        "number": 465,
        "prompt": "Write a function to drop empty items from a given dictionary.\ndef drop_empty(dict1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for key,value in dict1.items():\n        if not value:\n            del dict1[key]\n    return dict1\n\n",
        "generated_testcode": "assert drop_empty({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}\nassert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}\nassert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}",
        "canonical_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1"
    },
    {
        "number": 466,
        "prompt": "Write a function to find the peak element in the given array.\ndef find_peak_util(arr, low, high, n): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "  \n    if (high <= low): \n        return -1\n    mid = low + (high - low) // 2\n    if ((mid == 0 or arr[mid - 1] <= arr[mid]) and \\\n            (mid == n - 1 or arr[mid + 1] <= arr[mid])): \n        return mid \n      \n    if (mid > 0 and arr[mid - 1] > arr[mid]): \n        return find_peak_util(arr, low, mid - 1, n) \n      \n    return find_peak_util(arr, mid + 1, high, n) \n\n",
        "generated_testcode": "assert find_peak_util([1, 2, 3, 4, 5, 6, 7], 0, 7, 7) == 6\n",
        "test": "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2\nassert find_peak([2, 3, 4, 5, 6], 5) == 4\nassert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 ",
        "canonical_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) "
    },
    {
        "number": 467,
        "prompt": "Write a python function to convert decimal number to octal number.\ndef decimal_to_Octal(deciNum):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    octalNum = ''\n    while(deciNum > 0):\n        octalNum += str(deciNum%8)\n        deciNum = deciNum // 8\n    print('The octal equivalent of decimal number is:',octalNum)\n    return octalNum\ndecimal_to_Octal(18)\n\n",
        "generated_testcode": "assert decimal_to_Octal(10) == '1010'\n",
        "test": "assert decimal_to_Octal(10) == 12\nassert decimal_to_Octal(2) == 2\nassert decimal_to_Octal(33) == 41",
        "canonical_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)"
    },
    {
        "number": 468,
        "prompt": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\ndef max_product(arr, n ): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    max_ending = 1\n    min_ending = 1\n    for i in range(0,n):\n        if(max_ending<=1 or min_ending<=1):\n            max_ending = 1\n            min_ending = 1\n        max_ending = max(arr[i],arr[i]*max_ending,arr[i]*min_ending)\n        min_ending = min(arr[i],arr[i]*min_ending,arr[i]*max_ending)\n    return max_ending\n\n",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5], 5) == 120\n",
        "test": "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 \nassert max_product([4, 42, 55, 68, 80], 5) == 50265600\nassert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 ",
        "canonical_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)"
    },
    {
        "number": 469,
        "prompt": "Write a function to find the maximum profit earned from a maximum of k stock transactions\ndef max_profit(price, k):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if price is None or len(price) < k:\n        return 0\n\n",
        "generated_testcode": "assert max_profit([1, 2, 3, 4, 5], 2) == 3\n",
        "test": "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10\nassert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7\nassert max_profit([10, 6, 8, 4, 2], 2) == 2",
        "canonical_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]"
    },
    {
        "number": 470,
        "prompt": "Write a function to find the pairwise addition of the elements of the given tuples.\ndef add_pairwise(test_tup):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = test_tup[0]\n    for i in range(1, len(test_tup)):\n        result = result + test_tup[i]\n    print(result)\n\n",
        "generated_testcode": "assert add_pairwise((1, 2, 3, 4)) == (2, 4, 6, 8)\n",
        "test": "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)\nassert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)\nassert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)",
        "canonical_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 471,
        "prompt": "Write a python function to find remainder of array multiplication divided by n.\ndef find_remainder(arr, lens, n): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    rem = 0\n    for i in range(lens): \n        rem += arr[i] * n \n    return rem % n \n\n",
        "generated_testcode": "assert find_remainder([1, 2, 3, 4], 4, 5) == 0\n",
        "test": "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9\nassert find_remainder([1,1,1],3,1) == 0\nassert find_remainder([1,2,1],3,2) == 0",
        "canonical_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n "
    },
    {
        "number": 472,
        "prompt": "Write a python function to check whether the given list contains consecutive numbers or not.\ndef check_Consecutive(l): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    \n    for i in range(0, len(l)): \n        if(i == 0 or l[i]!= l[i - 1] + 1):\n            if(i == len(l)-1 or l[i]!= l[i + 1] - 1):\n                return False\n    return True\n\n",
        "generated_testcode": "assert check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True, \"Should return True\"\n",
        "test": "assert check_Consecutive([1,2,3,4,5]) == True\nassert check_Consecutive([1,2,3,5,6]) == False\nassert check_Consecutive([1,2,1]) == False",
        "canonical_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) "
    },
    {
        "number": 473,
        "prompt": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\ndef tuple_intersection(test_list1, test_list2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    list1 = set(test_list1)\n    list2 = set(test_list2)\n    print(list1.intersection(list2))\n\n",
        "generated_testcode": "assert tuple_intersection([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4)]\n",
        "test": "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}\nassert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}\nassert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}",
        "canonical_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)"
    },
    {
        "number": 474,
        "prompt": "Write a function to replace characters in a string.\ndef replace_char(str1,ch,newch):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    list1=list(str1)\n    for i in range(len(list1)):\n        if list1[i]==ch:\n            list1[i]=newch\n    str2=\"\".join(list1)\n    return str2\n\n",
        "generated_testcode": "assert replace_char(\"abc\",\"a\",\"A\") == \"Abc\"\n",
        "test": "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")\nassert replace_char(\"character\",'c','a')==(\"aharaater\")\nassert replace_char(\"python\",'l','a')==(\"python\")",
        "canonical_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2"
    },
    {
        "number": 475,
        "prompt": "Write a function to sort counter by value.\ndef sort_counter(dict1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    a = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    for i in a:\n        print(i)\n        dict1[i[0]] = i[1]\n    return dict1\n\n",
        "generated_testcode": "assert sort_counter({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]\nassert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]\nassert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]",
        "canonical_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter"
    },
    {
        "number": 476,
        "prompt": "Write a python function to find the sum of the largest and smallest value in a given array.\ndef big_sum(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "\tif len(nums) < 2:\n\t\treturn nums[0]\n\treturn nums[0] + big_sum(nums[1:])\n\n",
        "generated_testcode": "assert big_sum([1, 2, 3, 4, 5]) == 15\n",
        "test": "assert big_sum([1,2,3]) == 4\nassert big_sum([-1,2,3,4]) == 3\nassert big_sum([2,3,6]) == 8",
        "canonical_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum"
    },
    {
        "number": 477,
        "prompt": "Write a python function to convert the given string to lower case.\ndef is_lower(string):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = True\n    for i in range(len(string)):\n        if ord(string[i]) >= 97 and ord(string[i]) <= 122:\n            continue\n        else:\n            result = False\n            break\n    return result\n    \n#Input String\nprint(\"Enter a string :\")\nstring = input()\n\n",
        "generated_testcode": "assert is_lower(\"Hello\") == True\n",
        "test": "assert is_lower(\"InValid\") == \"invalid\"\nassert is_lower(\"TruE\") == \"true\"\nassert is_lower(\"SenTenCE\") == \"sentence\"",
        "canonical_solution": "def is_lower(string):\r\n  return (string.lower())"
    },
    {
        "number": 478,
        "prompt": "Write a function to remove lowercase substrings from a given string.\ndef remove_lowercase(str1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    result = str1\n    for i in range(len(str1)):\n        if str1[i] >= 'a' and str1[i] <= 'z':\n            result = result[:i] + result[i+1:]\n    return result\n\n",
        "generated_testcode": "assert remove_lowercase(\"\") == \"\"\n",
        "test": "assert remove_lowercase(\"PYTHon\")==('PYTH')\nassert remove_lowercase(\"FInD\")==('FID')\nassert remove_lowercase(\"STRinG\")==('STRG')",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result"
    },
    {
        "number": 479,
        "prompt": "Write a python function to find the first digit of a given number.\ndef first_Digit(n) :  \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    s = str(n) \n    return int(s[0])\n    \n\n",
        "generated_testcode": "assert first_Digit(123) == 1\n",
        "test": "assert first_Digit(123) == 1\nassert first_Digit(456) == 4\nassert first_Digit(12) == 1",
        "canonical_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) "
    },
    {
        "number": 480,
        "prompt": "Write a python function to find the maximum occurring character in a given string.\ndef get_max_occuring_char(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = {}\n    for i in str1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return max(count.items(), key=operator.itemgetter(1))[0]\n\n",
        "generated_testcode": "assert get_max_occuring_char(\"abcd\") == \"d\"\n",
        "test": "assert get_max_occuring_char(\"data\") == \"a\"\nassert get_max_occuring_char(\"create\") == \"e\"\nassert get_max_occuring_char(\"brilliant girl\") == \"i\"",
        "canonical_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch"
    },
    {
        "number": 481,
        "prompt": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.\ndef is_subset_sum(set, n, sum):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[False]*(sum+1) for i in range(n+1)]\n    for i in range(n+1):\n        dp[i][0] = True\n    for i in range(1, sum+1):\n        dp[0][i] = False\n    for i in range(1, n+1):\n        for j in range(1, sum+1):\n            if j>=set[i-1]:\n                dp[i][j] = dp[i-1][j] or dp[i-1][j-set[i-1]]\n            else:\n                dp[i][j] = dp[i-1][j]\n    return dp[n][sum]\n",
        "generated_testcode": "assert is_subset_sum([1, 2, 3], 4, 5) == True\n",
        "test": "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False\nassert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True",
        "canonical_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])"
    },
    {
        "number": 482,
        "prompt": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.\ndef match(text): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    pattern = r'[A-Z][a-z]+'\n    if re.match(pattern, text): \n        return \"YES\"\n    else: \n        return \"NO\"\n\n",
        "generated_testcode": "assert match(\"AaBbCc\") == True\n",
        "test": "assert match(\"Geeks\") == 'Yes'\nassert match(\"geeksforGeeks\") == 'Yes'\nassert match(\"geeks\") == 'No'",
        "canonical_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') "
    },
    {
        "number": 483,
        "prompt": "Write a python function to find the first natural number whose factorial is divisible by x.\ndef first_Factorial_Divisible_Number(x): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(1, x): \n        if (x % i == 0): \n            j = i \n            while (j <= x): \n                if (x % j == 0): \n                    break\n                j = j + 1\n            if (j > x): \n                print(x, \" is the first natural number whose factorial is divisible by \", x) \n                return\n          \n\n",
        "generated_testcode": "assert first_Factorial_Divisible_Number(5) == 5\n",
        "test": "assert first_Factorial_Divisible_Number(10) == 5\nassert first_Factorial_Divisible_Number(15) == 5\nassert first_Factorial_Divisible_Number(5) == 4",
        "canonical_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i "
    },
    {
        "number": 484,
        "prompt": "Write a function to remove the matching tuples from the given two tuples.\ndef remove_matching_tuple(test_list1, test_list2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    test_list1_copy = test_list1[:]\n    test_list2_copy = test_list2[:]\n    test_list1_copy.sort()\n    test_list2_copy.sort()\n    test_list1_copy = remove_matching_numbers(test_list1_copy)\n    test_list2_copy = remove_matching_numbers(test_list2_copy)\n    test_list1_copy = list(dict.fromkeys(test_list1_copy))\n    test_list2_copy = list(dict.fromkeys(test_list2_copy))\n    print(test_list1_copy)\n    print(test_list2_copy)\n    if test_list1_copy == test_list2_copy:\n        return None\n    else:\n        return (test_list1_copy, test_list2_copy)\n    # for item1 in test_list1_copy:\n    #     for item2 in test_list2_copy:\n    #         if item1 == item2:\n    #             test_list1_copy.remove(item1)\n    #             test_list2_copy.remove(item2)\n    # return test_list1_copy, test_list2_copy\n\n",
        "generated_testcode": "assert remove_matching_tuple(test_list1, test_list2) == (('a', 'b'), ('c', 'd'))\n",
        "test": "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]\nassert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]\nassert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]",
        "canonical_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) "
    },
    {
        "number": 485,
        "prompt": "Write a function to find the largest palindromic number in the given array.\ndef is_palindrome(n) : \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "\tn = str(n) \n\ti = 0\n\tj = len(n) - 1\n\twhile (i < j) : \n\t\tif (n[i]!= n[j]) : \n\t\t\treturn False\n\t\ti += 1\n\t\tj -= 1\n\treturn True\n\t\n# Write a function to find the largest palindromic number in the given array.\ndef palindrome(n) : \n\tn = str(n) \n\ti = 0\n\tj = len(n) - 1\n\twhile (i < j) : \n\t\tif (n[i]!= n[j]) : \n\t\t\tn = n[:j] + n[i+1:]\n\t\t\ti = 0\n\t\t\tj = len(n) - 1\n\t\t\tif (is_palindrome(n) == True) : \n\t\t\t\treturn n\n\t\ti += 1\n\t\tj -= 1\n\treturn -1\n\n",
        "generated_testcode": "assert is_palindrome(121) == True\n",
        "test": "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545\nassert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5\nassert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9",
        "canonical_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1"
    },
    {
        "number": 486,
        "prompt": "Write a function to compute binomial probability for the given number.\ndef nCr(n, r): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if n < r: \n        return 0\n    return math.factorial(n) // (math.factorial(n - r) * math.factorial(r)) \n\n",
        "generated_testcode": "assert nCr(5, 2) == 5\n",
        "test": "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185\nassert binomial_probability(11, 6, 2.0/4) == 0.2255859375\nassert binomial_probability(12, 7, 3.0/5) == 0.227030335488",
        "canonical_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) "
    },
    {
        "number": 487,
        "prompt": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return tup[-1]  \n    \ntup = tuple(map(int, input().split())) \nnew_tup = sorted(tup, key = sort_tuple) \nprint (tuple(new_tup)) \n\n",
        "generated_testcode": "assert sort_tuple([(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\n",
        "test": "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]\nassert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]\nassert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup"
    },
    {
        "number": 488,
        "prompt": "Write a function to find the area of a pentagon.\ndef area_pentagon(a):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return a * 0.25 * ((5 * a) + (5 * a))\n\n",
        "generated_testcode": "assert area_pentagon(5) == 20\n",
        "test": "assert area_pentagon(5)==43.01193501472417\nassert area_pentagon(10)==172.0477400588967\nassert area_pentagon(15)==387.10741513251753",
        "canonical_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area"
    },
    {
        "number": 489,
        "prompt": "Write a python function to find the frequency of the largest value in a given array.\ndef frequency_Of_Largest(n,arr): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    hash_map = {} \n    for i in range(n): \n        if arr[i] not in hash_map: \n            hash_map[arr[i]] = 1\n        else: \n            hash_map[arr[i]] += 1\n    largest = max(hash_map, key=hash_map.get)\n    return hash_map[largest]\n\n",
        "generated_testcode": "assert frequency_Of_Largest(5, [1, 2, 3, 4, 5]) == 1\n",
        "test": "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2\nassert frequency_Of_Largest(3,[5,6,5]) == 1\nassert frequency_Of_Largest(4,[2,7,7,7]) == 3",
        "canonical_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq "
    },
    {
        "number": 490,
        "prompt": "Write a function to extract all the pairs which are symmetric in the given tuple list.\ndef extract_symmetric(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for i in range(0, len(test_list)):\n        if test_list[i] == test_list[(i + 1) % len(test_list)]:\n            result.append(test_list[i])\n    return result\n\n",
        "generated_testcode": "assert extract_symmetric([(1, 2), (2, 1)]) == [(1, 2), (2, 1)]\n",
        "test": "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}\nassert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}\nassert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}",
        "canonical_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) "
    },
    {
        "number": 491,
        "prompt": "Write a function to find the sum of geometric progression series.\ndef sum_gp(a,n,r):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += a*(r**i)\n    return sum\n\n",
        "generated_testcode": "assert sum_gp(1,2,1) == 2\n",
        "test": "assert sum_gp(1,5,2)==31\nassert sum_gp(1,5,4)==341\nassert sum_gp(2,6,3)==728",
        "canonical_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total"
    },
    {
        "number": 492,
        "prompt": "Write a function to search an element in the given array by using binary search.\ndef binary_search(item_list,item):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    low = 0\n    high = len(item_list)-1\n    found = False\n    while low <= high and not found:\n        mid = (low + high) // 2\n        if item_list[mid] == item:\n            found = True\n        else:\n            if item < item_list[mid]:\n                high = mid-1\n            else:\n                low = mid+1\n    return found\n\n",
        "generated_testcode": "assert binary_search([1,2,3,4,5,6,7,8,9,10],5) == True\n",
        "test": "assert binary_search([1,2,3,5,8], 6) == False\nassert binary_search([7, 8, 9, 10, 13], 10) == True\nassert binary_search([11, 13, 14, 19, 22, 36], 23) == False",
        "canonical_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found"
    },
    {
        "number": 493,
        "prompt": "Write a function to calculate a grid of hexagon coordinates where function returns a list of lists containing 6 tuples of x, y point coordinates.\ndef calculate_polygons(startx, starty, endx, endy, radius):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    x_step = (endx - startx) / 5\n    y_step = (endy - starty) / 5\n    x_coord = startx\n    y_coord = starty\n    while x_coord <= endx:\n        while y_coord <= endy:\n            print(x_coord, y_coord)\n            yield x_coord, y_coord\n            y_coord += y_step\n        y_coord = starty\n        x_coord += x_step\n\n",
        "generated_testcode": "assert calculate_polygons(0, 0, 10, 10, 5) == [[0, 0], [5, 0], [10, 0], [15, 0], [20, 0], [25, 0]]\n",
        "test": "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]\nassert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]\nassert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]",
        "canonical_solution": "import math\r\ndef calculate_polygons(startx, starty, endx, endy, radius):\r\n    sl = (2 * radius) * math.tan(math.pi / 6)\r\n    p = sl * 0.5\r\n    b = sl * math.cos(math.radians(30))\r\n    w = b * 2\r\n    h = 2 * sl   \r\n    startx = startx - w\r\n    starty = starty - h\r\n    endx = endx + w\r\n    endy = endy + h\r\n    origx = startx\r\n    origy = starty\r\n    xoffset = b\r\n    yoffset = 3 * p\r\n    polygons = []\r\n    row = 1\r\n    counter = 0\r\n    while starty < endy:\r\n        if row % 2 == 0:\r\n            startx = origx + xoffset\r\n        else:\r\n            startx = origx\r\n        while startx < endx:\r\n            p1x = startx\r\n            p1y = starty + p\r\n            p2x = startx\r\n            p2y = starty + (3 * p)\r\n            p3x = startx + b\r\n            p3y = starty + h\r\n            p4x = startx + w\r\n            p4y = starty + (3 * p)\r\n            p5x = startx + w\r\n            p5y = starty + p\r\n            p6x = startx + b\r\n            p6y = starty\r\n            poly = [\r\n                (p1x, p1y),\r\n                (p2x, p2y),\r\n                (p3x, p3y),\r\n                (p4x, p4y),\r\n                (p5x, p5y),\r\n                (p6x, p6y),\r\n                (p1x, p1y)]\r\n            polygons.append(poly)\r\n            counter += 1\r\n            startx += w\r\n        starty += yoffset\r\n        row += 1\r\n    return polygons"
    },
    {
        "number": 494,
        "prompt": "Write a function to convert the given binary tuple to integer.\ndef binary_to_integer(test_tup):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    :param test_tup: tuple\n    :return: integer\n    \"\"\"\n    a = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == \"1\":\n            a += pow(2, i)\n    return a\n# another way\ndef binary_to_integer_using_math(test_tup):\n    \"\"\"\n    :param test_tup: tuple\n    :return: integer\n    \"\"\"\n    return int(\"\".join(map(str, test_tup)), 2)\n# another way\ndef binary_to_integer_using_bin(test_tup):\n    \"\"\"\n    :param test_tup: tuple\n    :return: integer\n    \"\"\"\n    res = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] == \"1\":\n            res += 2**(len(test_tup)-i-1)\n    return res\n\n",
        "generated_testcode": "assert binary_to_integer((0, 0, 0, 1)) == 0\n",
        "test": "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'\nassert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'\nassert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'",
        "canonical_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) "
    },
    {
        "number": 495,
        "prompt": "Write a function to remove lowercase substrings from a given string by using regex.\ndef remove_lowercase(str1):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    return re.sub(r'(?i)[a-z]', '', str1)\n\n",
        "generated_testcode": "assert remove_lowercase(\"\") == \"\"\n",
        "test": "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'\nassert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'\nassert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'",
        "canonical_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)"
    },
    {
        "number": 496,
        "prompt": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.\ndef heap_queue_smallest(nums,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if nums==None or n<1:\n        return -1\n    heap = []\n    for i in range(n):\n        heapq.heappush(heap, nums[i])\n    return heapq.heappop(heap)\nnums = [3,5,7,8,9,2,1]\nn = 4\nprint(heap_queue_smallest(nums, n))\n'''\n\n",
        "generated_testcode": "assert heap_queue_smallest([1,2,3,4,5],5) == 1\n",
        "test": "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] \nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]\nassert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]",
        "canonical_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums"
    },
    {
        "number": 497,
        "prompt": "Write a function to find the surface area of a cone.\ndef surfacearea_cone(r,h):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  #Initialize the surface area of a cone as 0\n  surface_area = 0\n\n",
        "generated_testcode": "assert surfacearea_cone(1,1) == 2\n",
        "test": "assert surfacearea_cone(5,12)==282.7433388230814\nassert surfacearea_cone(10,15)==880.5179353159282\nassert surfacearea_cone(19,17)==2655.923961165254",
        "canonical_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA"
    },
    {
        "number": 498,
        "prompt": "Write a python function to find gcd of two positive integers.\ndef gcd(x, y):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    x = abs(x)\n    y = abs(y)\n    while x!= 0 and y!= 0:\n        if x > y:\n            x = x % y\n        else:\n            y = y % x\n    return x + y\n\n",
        "generated_testcode": "assert gcd(2, 4) == 2\n",
        "test": "assert gcd(12, 17) == 1\nassert gcd(4,6) == 2\nassert gcd(2,9) == 1",
        "canonical_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd"
    },
    {
        "number": 499,
        "prompt": "Write a function to find the diameter of a circle.\ndef diameter_circle(r):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    radius = r\n    if r > 0:\n        radius = radius - 1\n    return radius * 2 + 1\n\n",
        "generated_testcode": "assert diameter_circle(1) == 1\n",
        "test": "assert diameter_circle(10)==20\nassert diameter_circle(40)==80\nassert diameter_circle(15)==30",
        "canonical_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter"
    },
    {
        "number": 500,
        "prompt": "Write a function to concatenate all elements of the given list into a string.\ndef concatenate_elements(list):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    result_str = ''\n    for el in list:\n        result_str = result_str + str(el)\n    return result_str\n\n",
        "generated_testcode": "assert concatenate_elements([1, 2, 3]) == \"123\"\n",
        "test": "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'\nassert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'\nassert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'",
        "canonical_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) "
    },
    {
        "number": 501,
        "prompt": "Write a python function to find common divisor between two numbers in a given pair.\ndef ngcd(x,y):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if x<y:\n        t=x\n        x=y\n        y=t\n    if x%y==0:\n        return y\n    else:\n        return ngcd(y,x%y)\n\n",
        "generated_testcode": "assert ngcd(2,4) == 2\n",
        "test": "assert num_comm_div(2,4) == 2\nassert num_comm_div(2,8) == 2\nassert num_comm_div(12,24) == 6",
        "canonical_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result"
    },
    {
        "number": 502,
        "prompt": "Write a python function to find remainder of two numbers.\ndef find(n,m):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    r=0\n    if n>m:\n        for i in range(n,m+1):\n            if i%n==0 and i%m==0:\n                r=i\n    else:\n        for i in range(m,n+1):\n            if i%n==0 and i%m==0:\n                r=i\n    return r\n#{ \n#Driver Code Starts.\n\n",
        "generated_testcode": "assert find(2,4) == 0\n",
        "test": "assert find(3,3) == 0\nassert find(10,3) == 1\nassert find(16,5) == 1",
        "canonical_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)"
    },
    {
        "number": 503,
        "prompt": "Write a function to add consecutive numbers of a given list.\ndef add_consecutive_nums(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(nums)\n\n",
        "generated_testcode": "assert add_consecutive_nums([1, 2, 3, 4, 5]) == 15\n",
        "test": "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]\nassert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]\nassert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]",
        "canonical_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 504,
        "prompt": "Write a python function to find the cube sum of first n natural numbers.\ndef sum_Of_Series(n): \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 1: \n        return 1 \n    return n + sum_Of_Series(n - 1) \n\n",
        "generated_testcode": "assert sum_Of_Series(5) == (1+2+3+4+5)\n",
        "test": "assert sum_Of_Series(5) == 225\nassert sum_Of_Series(2) == 9\nassert sum_Of_Series(3) == 36",
        "canonical_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum"
    },
    {
        "number": 505,
        "prompt": "Write a function to move all zeroes to the end of the given array.\ndef re_order(A):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    i = 0\n    n = len(A)\n    while i < n:\n        if A[i]!= 0:\n            i += 1\n        else:\n            j = i + 1\n            while j < n:\n                if A[j] == 0:\n                    j += 1\n                else:\n                    break\n            A = A[:i] + A[i:j] + A[j:]\n            break\n    return A\n\n",
        "generated_testcode": "assert re_order([1, 2, 3, 4, 0, 0, 0, 0, 0, 0]) == [1, 2, 3, 4, 0, 0, 0, 0, 0, 0]\n",
        "test": "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]\nassert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]\nassert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]",
        "canonical_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A"
    },
    {
        "number": 506,
        "prompt": "Write a function to calculate the permutation coefficient of given p(n, k).\ndef permutation_coefficient(n, k): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return math.factorial(n)/(math.factorial(n - k) * math.factorial(k)) \n\n",
        "generated_testcode": "assert permutation_coefficient(2, 2) == 1\n",
        "test": "assert permutation_coefficient(10, 2) == 90\nassert permutation_coefficient(10, 3) == 720\nassert permutation_coefficient(10, 1) == 10",
        "canonical_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] "
    },
    {
        "number": 507,
        "prompt": "Write a function to remove specific words from a given list.\ndef remove_words(list1, removewords):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    list2 = []\n    for i in list1:\n        for j in removewords:\n            if j in i:\n                i = i.replace(j,'')\n        list2.append(i)\n    return list2\n\n",
        "generated_testcode": "assert remove_words(['a', 'b', 'c', 'd', 'e', 'f'], ['a', 'b', 'c']) == ['d', 'e', 'f'], \"Should return ['d', 'e', 'f']\"\n",
        "test": "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']\nassert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']",
        "canonical_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  "
    },
    {
        "number": 508,
        "prompt": "Write a function to check if the common elements between two given lists are in the same order or not.\ndef same_order(l1, l2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return sorted(l1) == sorted(l2)\n\n",
        "generated_testcode": "assert same_order([1, 2, 3], [3, 2, 1]) == True\n",
        "test": "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True\nassert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False\nassert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
        "canonical_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2"
    },
    {
        "number": 509,
        "prompt": "Write a python function to find the average of odd numbers till a given odd number.\ndef average_Odd(n) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    i = 1\n    while (i <= n) : \n        sum = sum + i  \n        i = i + 2\n    print(\"The average of odd numbers till \" + str(n) + \" is \" + str(sum/n)) \n\n",
        "generated_testcode": "assert(average_Odd(1) == 0)\n",
        "test": "assert average_Odd(9) == 5\nassert average_Odd(5) == 3\nassert average_Odd(11) == 6",
        "canonical_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count "
    },
    {
        "number": 510,
        "prompt": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.\ndef no_of_subsequences(arr, k): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    left = 0\n    right = 0\n\n",
        "generated_testcode": "assert no_of_subsequences([1, 2, 3, 4, 5], 5) == 5\n",
        "test": "assert no_of_subsequences([1,2,3,4], 10) == 11\nassert no_of_subsequences([4,8,7,2], 50) == 9\nassert no_of_subsequences([5,6,7,8], 15) == 4",
        "canonical_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]"
    },
    {
        "number": 511,
        "prompt": "Write a python function to find minimum sum of factors of a given number.\ndef find_Min_Sum(num): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "  \n    # Initializing the variables \n    cnt = 0\n    sum = 0\n  \n    # Iterating the number of times \n    # and calculating the sum of factors \n    while (num!= 0): \n        cnt += 1\n        sum = sum + (num % 10)\n        num = num // 10\n  \n    # Returning the minimum sum  \n    return sum + num\n    \n",
        "generated_testcode": "assert find_Min_Sum(12) == 3\n",
        "test": "assert find_Min_Sum(12) == 7\nassert find_Min_Sum(105) == 15\nassert find_Min_Sum(2) == 2",
        "canonical_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum"
    },
    {
        "number": 512,
        "prompt": "Write a function to count the element frequency in the mixed nested tuple.\ndef flatten(test_tuple): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    final_tuple = [] \n    for x in test_tuple: \n        if isinstance(x, tuple): \n            final_tuple.extend(flatten(x)) \n        else: \n            final_tuple.append(x) \n    return final_tuple\n\n",
        "generated_testcode": "assert flatten((1,2,3,4,5,6,7,8,9,10)) == (1,2,3,4,5,6,7,8,9,10)\n",
        "test": "assert count_element_freq((5, 6, (5, 6), 7, (8, 9), 9) ) == {5: 2, 6: 2, 7: 1, 8: 1, 9: 2}\nassert count_element_freq((6, 7, (6, 7), 8, (9, 10), 10) ) == {6: 2, 7: 2, 8: 1, 9: 1, 10: 2}\nassert count_element_freq((7, 8, (7, 8), 9, (10, 11), 11) ) == {7: 2, 8: 2, 9: 1, 10: 1, 11: 2}",
        "canonical_solution": "def flatten(test_tuple): \r\n\tfor tup in test_tuple: \r\n\t\tif isinstance(tup, tuple): \r\n\t\t\tyield from flatten(tup) \r\n\t\telse: \r\n\t\t\tyield tup \r\ndef count_element_freq(test_tuple):\r\n  res = {}\r\n  for ele in flatten(test_tuple):\r\n    if ele not in res:\r\n      res[ele] = 0\r\n    res[ele] += 1\r\n  return (res) "
    },
    {
        "number": 513,
        "prompt": "Write a function to convert tuple into list by adding the given string after every element.\ndef add_str(test_tup, K):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(test_tup)):\n        test_tup = test_tup[:i] + (K,) + test_tup[i:]\n    return test_tup\n\n",
        "generated_testcode": "assert add_str((1, 2, 3), 'Hello') == (1, 2, 3, 'Hello')\n",
        "test": "assert add_str((5, 6, 7, 4, 9) , \"FDF\") == [5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']\nassert add_str((7, 8, 9, 10) , \"PF\") == [7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']\nassert add_str((11, 14, 12, 1, 4) , \"JH\") == [11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']",
        "canonical_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) "
    },
    {
        "number": 514,
        "prompt": "Write a function to find the summation of tuple elements in the given tuple list.\ndef sum_elements(test_tup):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    sum_result = 0\n    for element in test_tup:\n        sum_result += element\n    return sum_result\n\n",
        "generated_testcode": "assert sum_elements((1,2,3,4,5)) == 15\n",
        "test": "assert sum_elements((7, 8, 9, 1, 10, 7)) == 42\nassert sum_elements((1, 2, 3, 4, 5, 6)) == 21\nassert sum_elements((11, 12 ,13 ,45, 14)) == 95",
        "canonical_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) "
    },
    {
        "number": 515,
        "prompt": "Write a function to check if there is a subset with sum divisible by m.\ndef modular_sum(arr, n, m): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  \n    # Sort the array \n    arr.sort() \n  \n    # Check if sum divisible by m \n    # Try all possible subsets \n    for i in range(0, (n - 1)): \n  \n        # Skip if current element is \n        # already present in the subset \n        if (arr[i] == 0): \n            continue\n  \n        # Try a subset of size i + 1 \n        # if sum is divisible by m \n        k = 1\n        while (k <= m): \n            if ((arr[i] + k) % m == 0): \n                return True\n            k += 1\n  \n    # If we reach here then \n    # no subset is possible \n    return False\n  \n# Driver Code \narr = [1, 2, 3, 6, 7, 8] \nm = 3\nn = len(arr) \nif (modular_sum(arr, n, m) == False): \n    print (\"No Subset Sum Divisible by m\") \nelse: \n    print (\"Yes Subset Sum Divisible by m\") \n",
        "generated_testcode": "assert modular_sum([1, 2, 3, 4, 5], 5, 3) == True\n",
        "test": "assert modular_sum([3, 1, 7, 5], 4, 6) == True\nassert modular_sum([1, 7], 2, 5) == False\nassert modular_sum([1, 6], 2, 5) == False",
        "canonical_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]"
    },
    {
        "number": 516,
        "prompt": "Write a function to sort a list of elements using radix sort.\ndef radix_sort(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    max_bit = max(nums)\n    bit_places = []\n    for i in range(max_bit + 1):\n        bit_places.append([])\n    for i in range(len(nums)):\n        bit_places[nums[i] // 10].append(nums[i])\n    sorted_nums = []\n    for j in range(10):\n        sorted_nums += bit_places[j]\n    return sorted_nums\n\n",
        "generated_testcode": "assert radix_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert radix_sort([15, 79, 25, 68, 37]) == [15, 25, 37, 68, 79]\nassert radix_sort([9, 11, 8, 7, 3, 2]) == [2, 3, 7, 8, 9, 11]\nassert radix_sort([36, 12, 24, 26, 29]) == [12, 24, 26, 29, 36]",
        "canonical_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums"
    },
    {
        "number": 517,
        "prompt": "Write a python function to find the largest postive number from the given list.\ndef largest_pos(list1): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    list1.sort()\n    return list1[-1]\nprint(largest_pos([1,-5,2,4,-3,6,3,-6]))\n\n",
        "generated_testcode": "assert largest_pos([1, 2, 3, 4, 5]) == 5\n",
        "test": "assert largest_pos([1,2,3,4,-1]) == 4\nassert largest_pos([0,1,2,-5,-1,6]) == 6\nassert largest_pos([0,0,1,0]) == 1",
        "canonical_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max"
    },
    {
        "number": 518,
        "prompt": "Write a function to find the square root of a perfect number.\ndef sqrt_root(num):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    start = 0\n    end = num\n    guess = (start+end)//2\n    while guess**2!= num:\n        if guess**2 > num:\n            end = guess -1\n            guess = (start+end)//2\n        else:\n            start = guess + 1\n            guess = (start+end)//2\n    return guess\n\n",
        "generated_testcode": "assert sqrt_root(9) == 3\n",
        "test": "assert sqrt_root(4)==2\nassert sqrt_root(16)==4\nassert sqrt_root(400)==20",
        "canonical_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root "
    },
    {
        "number": 519,
        "prompt": "Write a function to calculate volume of a tetrahedron.\ndef volume_tetrahedron(num):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Complete this function\n    s1 = num / 3.0\n    s2 = s1 * 2.0\n    s3 = s2 * 4.0\n    s4 = s3 * 2.0\n    s5 = s4 * 3.0\n    s6 = s5 * 3.0\n    s7 = s6 * 4.0\n    s8 = s7 * 2.0\n    s9 = s8 * 3.0\n    s10 = s9 * 4.0\n    s11 = s10 * 2.0\n    s12 = s11 * 3.0\n    s13 = s12 * 4.0\n    s14 = s13 * 3.0\n    s15 = s14 * 4.0\n    s16 = s15 * 2.0\n    s17 = s16 * 3.0\n    s18 = s17 * 4.0\n    s19 = s18 * 2.0\n    s20 = s19 * 3.0\n    s21 = s20 * 4.0\n    s22 = s21 * 2.0\n    s23 = s22 * 3.0\n    s24 = s23 * 4.0\n    s25 = s24 * 2.0\n    s26 = s25 * 3.0\n    s27 = s26 * 4.0\n    s28 = s27 * 2.0\n    s29 = s28 * 3.0\n    s30 = s29 * 4.0\n    s31 = s30 * 2.0\n    s32 =",
        "generated_testcode": "assert volume_tetrahedron(1) == 1\n",
        "test": "assert volume_tetrahedron(10)==117.85\nassert volume_tetrahedron(15)==397.75\nassert volume_tetrahedron(20)==942.81",
        "canonical_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)"
    },
    {
        "number": 520,
        "prompt": "Write a function to find the lcm of the given array elements.\ndef find_lcm(num1, num2): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if num1 < num2: \n        num1, num2 = num2, num1 \n  \n    while num1 % num2!= 0: \n        num1, num2 = num2, num1 % num2 \n  \n    return num1 \n  \n# Input 1:  \n# nums = [1, 2, 4, 8]\n# Output:   \n# 48\n  \n# Input 2:  \n# nums = [2, 4, 8, 16]\n# Output:  \n# 32\n",
        "generated_testcode": "assert find_lcm(3, 6) == 3\n",
        "test": "assert get_lcm([2, 7, 3, 9, 4]) == 252\nassert get_lcm([1, 2, 8, 3]) == 24\nassert get_lcm([3, 8, 4, 10, 5]) == 120",
        "canonical_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm "
    },
    {
        "number": 521,
        "prompt": "Write a function to print check if the triangle is scalene or not.\ndef check_isosceles(x,y,z):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if x==y or x==z or y==z:\n        return False\n    else:\n        return True\n\n",
        "generated_testcode": "assert check_isosceles(1,2,3) == True\n",
        "test": "assert check_isosceles(6,8,12)==True\nassert check_isosceles(6,6,12)==False\nassert check_isosceles(6,15,20)==True",
        "canonical_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False"
    },
    {
        "number": 522,
        "prompt": "Write a function to find the longest bitonic subsequence for the given array.\ndef lbs(arr): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr) \n    if (n == 0): \n        return 0\n    dp = [[0] * n for _ in range(n)] \n    for l in range(1, n): \n        for j in range(0, n-l): \n            i = j + l \n            if (l == 1): \n                dp[j][i] = 1\n            else: \n                if arr[j] < arr[i]: \n                    dp[j][i] = dp[j+1][i] \n                else: \n                    dp[j][i] = max(dp[j][i-1], dp[j+1][i]) \n    return dp[0][n-1] \n\n",
        "generated_testcode": "assert lbs([1, 3, 5, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]) == 5\n",
        "test": "assert lbs([0 , 8 , 4, 12, 2, 10 , 6 , 14 , 1 , 9 , 5 , 13, 3, 11 , 7 , 15]) == 7\nassert lbs([1, 11, 2, 10, 4, 5, 2, 1]) == 6\nassert lbs([80, 60, 30, 40, 20, 10]) == 5",
        "canonical_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum"
    },
    {
        "number": 523,
        "prompt": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.\ndef check_string(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return lambda x: x in str1 and len(x) == 1\nprint(check_string('oOoOoo'))\n# check_string('oOoOoo')\n# check_string('OoOoo')\n# check_string('oO')\n# check_string('o')\n# check_string('oOoOoo')\n# check_string('OoOoO')\n# check_string('oOoOoo')\n\n",
        "generated_testcode": "assert check_string('Hello') == True\n",
        "test": "assert check_string('python')==['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']\nassert check_string('123python')==['String must have 1 upper case character.']\nassert check_string('123Python')==['Valid string.']",
        "canonical_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  "
    },
    {
        "number": 524,
        "prompt": "Write a function to find the sum of maximum increasing subsequence of the given array.\ndef max_sum_increasing_subsequence(arr, n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    \n    # Initialize the maximum sum and \n    # result arrays \n    result = [0] * n \n    max_sum = 0\n  \n    # Traverse through all array elements \n    for i in range(n): \n  \n        # Find the maximum of first \n        # i elements, taking result of \n        # previous array element \n        # and current element as \n        # current element \n        result[i] = max(result[i-1], arr[i]) \n  \n        # Keep adding the current \n        # result element to the sum \n        max_sum += result[i] \n  \n    print(\"Maximum sum of all the\",n,\"increasing subsequence is:\",max_sum) \n    return max_sum \n  \n  \n# Driver code \narr = [10, 22, 9, 33, 21, 50, 41, 60] \nn = len(arr) \nprint(\"Maximum sum of all the\",n,\"increasing subsequence is:\",max_sum_increasing_subsequence(arr, n)) \n  \n",
        "generated_testcode": "assert max_sum_increasing_subsequence([1, 2, 3, 4, 5], 5) == 15\n",
        "test": "assert max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7) == 106\nassert max_sum_increasing_subsequence([3, 4, 5, 10], 4) == 22\nassert max_sum_increasing_subsequence([10, 5, 4, 3], 4) == 10",
        "canonical_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max"
    },
    {
        "number": 525,
        "prompt": "Write a python function to check whether two given lines are parallel or not.\ndef parallel_lines(line1, line2):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    if (line1[0] - line2[0]) == 0:\n        if (line1[1] - line2[1]) == 0:\n            return False\n    if (line1[1] - line2[1]) == 0:\n        if (line1[0] - line2[0]) == 0:\n            return False\n    return True\n\n",
        "generated_testcode": "assert(parallel_lines([1,2,3],[4,5,6]) == True)\n",
        "test": "assert parallel_lines([2,3,4], [2,3,8]) == True\nassert parallel_lines([2,3,4], [4,-3,8]) == False\nassert parallel_lines([3,3],[5,5]) == True",
        "canonical_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]"
    },
    {
        "number": 526,
        "prompt": "Write a python function to capitalize first and last letters of each word of a given string.\ndef capitalize_first_last_letters(str1):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    return \" \".join([word.capitalize() for word in str1.split()])\n\n",
        "generated_testcode": "assert capitalize_first_last_letters(\"hello world\") == \"Hello World\"\n",
        "test": "assert capitalize_first_last_letters(\"python\") == \"PythoN\"\nassert capitalize_first_last_letters(\"bigdata\") == \"BigdatA\"\nassert capitalize_first_last_letters(\"Hadoop\") == \"HadooP\"",
        "canonical_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  "
    },
    {
        "number": 527,
        "prompt": "Write a function to find all pairs in an integer array whose sum is equal to a given number.\ndef get_pairs_count(arr, n, sum):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    arr.sort()\n    count = 0\n    i = 0\n    j = n - 1\n    while i < j:\n        if arr[i] + arr[j] == sum:\n            count += 1\n            i += 1\n            j -= 1\n        elif arr[i] + arr[j] > sum:\n            j -= 1\n        else:\n            i += 1\n    return count\n\n",
        "generated_testcode": "assert get_pairs_count([1, 2, 3, 4, 5], 5, 6) == 2\n",
        "test": "assert get_pairs_count([1, 5, 7, -1, 5], 5, 6) == 3\nassert get_pairs_count([1, 5, 7, -1], 4, 6) == 2\nassert get_pairs_count([1, 1, 1, 1], 4, 2) == 6",
        "canonical_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 528,
        "prompt": "Write a function to find the list of lists with minimum length.\ndef min_length(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    min_len = len(list1[0])\n    min_list = []\n\n",
        "generated_testcode": "assert min_length([[1,2,3],[4,5,6],[7,8,9]]) == [[1,2,3],[4,5,6]]\n",
        "test": "assert min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])\nassert min_length([[1], [5, 7], [10, 12, 14,15]])==(1, [1])\nassert min_length([[5], [15,20,25]])==(1, [5])",
        "canonical_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     "
    },
    {
        "number": 529,
        "prompt": "Write a function to find the nth jacobsthal-lucas number.\ndef jacobsthal_lucas(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  #your code here\n  return n\n\n",
        "generated_testcode": "assert jacobsthal_lucas(1) == 1\n",
        "test": "assert jacobsthal_lucas(5) == 31\nassert jacobsthal_lucas(2) == 5\nassert jacobsthal_lucas(4) == 17",
        "canonical_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]"
    },
    {
        "number": 530,
        "prompt": "Write a function to find the ration of negative numbers in an array of integers.\ndef negative_count(nums):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    count_of_neg = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            count_of_neg = count_of_neg + 1\n    return count_of_neg / len(nums)\n\n",
        "generated_testcode": "assert negative_count([-1, -2, -3, -4, -5]) == 1\n",
        "test": "assert negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.31\nassert negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.44",
        "canonical_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)"
    },
    {
        "number": 531,
        "prompt": "Write a function to find minimum number of coins that make a given value.\ndef min_coins(coins, m, V): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(coins)  \n  \n    # To store minimum number of coins needed. \n    dp = [[0 for i in range(V + 1)] for i in range(m + 1)] \n  \n    # Fill the entries for 0 value case (since there are no coins for 0 value case). \n    for i in range(m + 1): \n        dp[i][0] = 0\n  \n    # If value is smaller than 0, there are no coins for that value. \n    # So minimum number of coins is 0. \n    for i in range(1, n + 1): \n        dp[0][i] = i \n  \n    # Build the table. \n    for i in range(1, m + 1): \n        for j in range(1, V + 1): \n  \n            # If the coin inserted is bigger than j, \n            # we can't get j change, we have to get the previous change. \n            if coins[i - 1] > j: \n                dp[i][j] = dp[i][j - 1] \n  \n            # If we get change for this coin, we need to check if we get change for \n            # changing j - coins[i - 1] (or changing j + coins[i - 1]). \n            else: \n                # To get change for changing j - coins[i - 1], we need to get change for \n                # changing j - coins[i - 1] + 1 (or changing j + 1",
        "generated_testcode": "assert min_coins([1, 2, 5], 5, 11) == 3\n",
        "test": "assert min_coins([9, 6, 5, 1] ,4,11)==2\nassert min_coins([4,5,6,7,8,9],6,9)==1\nassert min_coins([1, 2, 3],3,4)==2",
        "canonical_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res "
    },
    {
        "number": 532,
        "prompt": "Write a function to check if the two given strings are permutations of each other.\ndef check_permutation(str1, str2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(str1)!= len(str2):\n        return False\n    return set(str1) == set(str2)\n# Using set\n# Time: O(n); Space: O(n)\n\n",
        "generated_testcode": "assert check_permutation(\"abc\", \"bca\") == True\n",
        "test": "assert check_permutation(\"abc\", \"cba\") == True\nassert check_permutation(\"test\", \"ttew\") == False\nassert check_permutation(\"xxyz\", \"yxzx\") == True",
        "canonical_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True"
    },
    {
        "number": 533,
        "prompt": "Write a function to remove particular data type elements from the given tuple.\ndef remove_datatype(test_tuple, data_type):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == data_type:\n            test_tuple.pop(i)\n            break\n    return test_tuple\n\n",
        "generated_testcode": "assert remove_datatype((1, 2, 3, 4, 5), int) == (1, 2, 3, 4, 5)\n",
        "test": "assert remove_datatype((4, 5, 4, 7.7, 1.2), int) == [7.7, 1.2]\nassert remove_datatype((7, 8, 9, \"SR\"), str) == [7, 8, 9]\nassert remove_datatype((7, 1.1, 2, 2.2), float) == [7, 2]",
        "canonical_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) "
    },
    {
        "number": 534,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.\ndef search_literal(pattern,text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    if pattern not in text:\n        print(\"No match\")\n        return -1\n    else:\n        location = text.find(pattern)\n        print(location)\n        return location\n\n",
        "generated_testcode": "assert search_literal(\"abc\",\"abc\") == 0\n",
        "test": "assert search_literal('python','python programming language')==(0,6)\nassert search_literal('programming','python programming language')==(7,18)\nassert search_literal('language','python programming language')==(19,27)",
        "canonical_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)"
    },
    {
        "number": 535,
        "prompt": "Write a function to find the top or bottom surface area of a cylinder.\ndef topbottom_surfacearea(r):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    pi = 3.14159\n    return 2 * pi * r * r\n\n",
        "generated_testcode": "assert topbottom_surfacearea(1) == 2\n",
        "test": "assert topbottom_surfacearea(10)==314.15000000000003\nassert topbottom_surfacearea(5)==78.53750000000001\nassert topbottom_surfacearea(4)==50.264",
        "canonical_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea"
    },
    {
        "number": 536,
        "prompt": "Write a function to select the nth items of a list.\ndef nth_items(list,n):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    count = 0\n    for i in list:\n        count += 1\n        if count == n:\n            return i\n\n",
        "generated_testcode": "assert nth_items([1,2,3,4,5],1) == 1\n",
        "test": "assert nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9],2)==[1, 3, 5, 7, 9] \nassert nth_items([10,15,19,17,16,18],3)==[10,17] \nassert nth_items([14,16,19,15,17],4)==[14,17]",
        "canonical_solution": "def nth_items(list,n):\r\n return list[::n]"
    },
    {
        "number": 537,
        "prompt": "Write a python function to find the first repeated word in a given string.\ndef first_repeated_word(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    str1 = str1.lower()\n    dict = {}\n    str2 = str1.split()\n    for item in str2:\n        if item in dict:\n            print(item)\n        else:\n            dict[item] = 1\n    return None\n\n",
        "generated_testcode": "assert first_repeated_word(\"The quick brown fox jumps over the lazy dog\") == \"quick\"\n",
        "test": "assert first_repeated_word(\"ab ca bc ab\") == \"ab\"\nassert first_repeated_word(\"ab ca bc\") == 'None'\nassert first_repeated_word(\"ab ca bc ca ab bc\") == \"ca\"",
        "canonical_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'"
    },
    {
        "number": 538,
        "prompt": "Write a python function to convert a given string list to a tuple.\ndef string_list_to_tuple(str1):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(str1)\nprint(string_list_to_tuple(['red', 'green', 'blue']))\n\n",
        "generated_testcode": "assert string_list_to_tuple([\"a\", \"b\", \"c\"]) == (\"a\", \"b\", \"c\")\n",
        "test": "assert string_list_to_tuple((\"python 3.0\")) == ('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')\nassert string_list_to_tuple((\"bigdata\")) == ('b', 'i', 'g', 'd', 'a', 't', 'a')\nassert string_list_to_tuple((\"language\")) == ('l', 'a', 'n', 'g', 'u', 'a', 'g','e')",
        "canonical_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result"
    },
    {
        "number": 539,
        "prompt": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.\ndef basesnum_coresspondingnum(bases_num,index):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    power = 1\n    i = 0\n    while(i<index):\n        power = power*bases_num\n        i = i+1\n    return power\n\n",
        "generated_testcode": "assert basesnum_coresspondingnum(2,3) == 8\n",
        "test": "assert basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100],[1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]\nassert basesnum_coresspondingnum([1, 2, 3, 4, 5, 6, 7],[10, 20, 30, 40, 50, 60, 70])==[1, 1048576, 205891132094649, 1208925819614629174706176, 88817841970012523233890533447265625, 48873677980689257489322752273774603865660850176, 143503601609868434285603076356671071740077383739246066639249]\nassert basesnum_coresspondingnum([4, 8, 12, 16, 20, 24, 28],[3, 6, 9, 12, 15, 18, 21])==[64, 262144, 5159780352, 281474976710656, 32768000000000000000, 6979147079584381377970176, 2456510688823056210273111113728]",
        "canonical_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result"
    },
    {
        "number": 540,
        "prompt": "Write a python function to find the difference between highest and least frequencies in a given array.\ndef find_Diff(arr,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # sort the array and store the frequency of  \n    # elements in dictionary \n    count_map = {}\n    for i in range(n): \n        if (arr[i] in count_map): \n            count_map[arr[i]] += 1\n        else: \n            count_map[arr[i]] = 1\n    # get the least value and most value \n    # from the dictionary \n    min_freq = min(count_map.values()) \n    max_freq = max(count_map.values()) \n    \n    # Iterate over the dictionary and get the  \n    # keys whose value equals to min_freq or max_freq. \n    diff = [] \n    for key in count_map: \n        if count_map[key] == min_freq or count_map[key] == max_freq: \n            diff.append(key) \n    return diff \n  \n\n",
        "generated_testcode": "assert find_Diff([1,2,3,4,5,6,7,8,9,10],10) == 1\n",
        "test": "assert find_Diff([1,1,2,2,7,8,4,5,1,4],10) == 2\nassert find_Diff([1,7,9,2,3,3,1,3,3],9) == 3\nassert find_Diff([1,2,1,2],4) == 0",
        "canonical_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count "
    },
    {
        "number": 541,
        "prompt": "Write a function to find if the given number is abundant or not.\ndef get_sum(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "  \n    # Find the sum of all numbers \n    # below n \n    s = 0\n    for i in range(1,n): \n        if (n % i == 0): \n            s = s + i \n  \n    # If sum is greater than n \n    # then n is not a prime number \n    return (s > n) \n  \n# Driver code \nif __name__ == \"__main__\": \n    n = 28\n    if get_sum(n) == True: \n        print(n,\" is abundant\") \n    else: \n        print(n,\" is not abundant\") \n  \n# This code is contributed by Saket Modi ",
        "generated_testcode": "assert get_sum(12) == True\n",
        "test": "assert check_abundant(12) == True\nassert check_abundant(15) == False\nassert check_abundant(18) == True",
        "canonical_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    },
    {
        "number": 542,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.\ndef fill_spaces(text):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    import re\n    return re.sub(' ', ':', text)\n    \n    \n#Test.assert_equals(fill_spaces('This is a text with: some spaces and.dot'),\n#   'This is a text with: some spaces and :dot')\n#Test.assert_equals(fill_spaces('This is a text with: some spaces and.dot: with: punctuation'),\n#   'This is a text with: some spaces and :dot: with: punctuation')\n\n",
        "generated_testcode": "assert fill_spaces(\"This is a test\") == \"This:is:a:test\"\n",
        "test": "assert fill_spaces('Boult Curve Wireless Neckband') == 'Boult:Curve:Wireless:Neckband'\nassert fill_spaces('Stereo Sound Sweatproof') == 'Stereo:Sound:Sweatproof'\nassert fill_spaces('Probass Curve Audio') == 'Probass:Curve:Audio'",
        "canonical_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))"
    },
    {
        "number": 543,
        "prompt": "Write a function to add two numbers and print number of digits of sum.\ndef count_digits(num1,num2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = num1 + num2\n    result = sum\n    count = 0\n    while result!= 0:\n        count = count + 1\n        result = result//10\n    return count\n\n",
        "generated_testcode": "assert count_digits(1,2) == 2\n",
        "test": "assert count_digits(9875,10)==(4)\nassert count_digits(98759853034,100)==(11)\nassert count_digits(1234567,500)==(7)",
        "canonical_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count"
    },
    {
        "number": 544,
        "prompt": "Write a function to flatten the tuple list to a string.\ndef flatten_tuple(test_list):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    res = ''\n    for i in test_list:\n        if isinstance(i, tuple):\n            res += ''.join(flatten_tuple(i))\n        else:\n            res += str(i)\n    return res\n\n",
        "generated_testcode": "assert flatten_tuple([1, 2, 3]) == '123', \"Should be '123'\"\n",
        "test": "assert flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')]) == '1 4 6 5 8 2 9 1 10'\nassert flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')]) == '2 3 4 6 9 3 2 2 11'\nassert flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')]) == '14 21 9 24 19 12 29 23 17'",
        "canonical_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) "
    },
    {
        "number": 545,
        "prompt": "Write a python function to toggle only first and last bits of a given number.\ndef take_L_and_F_set_bits(n) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    n = n & 0x55555555\n    return n\n\n",
        "generated_testcode": "assert take_L_and_F_set_bits(0b1010101) == 0b1010101\n",
        "test": "assert toggle_F_and_L_bits(10) == 3\nassert toggle_F_and_L_bits(15) == 6\nassert toggle_F_and_L_bits(20) == 5",
        "canonical_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) "
    },
    {
        "number": 546,
        "prompt": "Write a function to find the last occurrence of a character in a string.\ndef last_occurence_char(string,char):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    #loop through string\n    for i in range(len(string)-1,0,-1):\n        #compare char with each character in the string\n        if char == string[i]:\n            #return the position\n            return i\n\n",
        "generated_testcode": "assert last_occurence_char(\"hello world\", \"l\") == 5\n",
        "test": "assert last_occurence_char(\"hello world\",'l')==10\nassert last_occurence_char(\"language\",'g')==7\nassert last_occurence_char(\"little\",'y')==None",
        "canonical_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1"
    },
    {
        "number": 547,
        "prompt": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.\ndef Total_Hamming_Distance(n):   \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    Hamming_Dist = 0\n    count = 0\n    while n!= 1:\n        if n % 2 == 0:\n            n = n // 2\n            count += 1\n        else:\n            n = 3 * n + 1\n            count += 1\n    print(\"Number of operations: \", count)\n    print(\"Hamming distance: \", Hamming_Dist)\n\n",
        "generated_testcode": "assert Total_Hamming_Distance(10) == 5\n",
        "test": "assert Total_Hamming_Distance(4) == 7\nassert Total_Hamming_Distance(2) == 3\nassert Total_Hamming_Distance(5) == 8",
        "canonical_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum"
    },
    {
        "number": 548,
        "prompt": "Write a function to find the length of the longest increasing subsequence of the given sequence.\ndef longest_increasing_subsequence(arr): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "  \n    if len(arr) < 2: \n        return len(arr) \n  \n    # The array of size len(arr) is initially filled with \n    # one element having value of 0 \n    size = len(arr) \n    lis = [1 for i in range(size)] \n  \n    # Calculating length of lis \n    # and maximum element in lis[] using \n    # loop. \n    for i in range(1, size): \n        for j in range(0, i): \n            if arr[i] > arr[j] and lis[i] < lis[j] + 1: \n                lis[i] = lis[j] + 1\n  \n    # Calculating length of lis \n    return max(lis) \n  \n# Driver Code \narr = [10, 22, 9, 33, 21, 50, 41, 60] \nprint(longest_increasing_subsequence(arr)) \n",
        "generated_testcode": "assert longest_increasing_subsequence([1, 2, 3, 4, 5]) == 5\n",
        "test": "assert longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60]) == 5\nassert longest_increasing_subsequence([3, 10, 2, 1, 20]) == 3\nassert longest_increasing_subsequence([50, 3, 10, 7, 40, 80]) == 4 ",
        "canonical_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum"
    },
    {
        "number": 549,
        "prompt": "Write a python function to find the sum of fifth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1): \n        if i % 2!= 0:\n            sum += i**5\n    return sum\nprint(odd_Num_Sum(10))\n\n",
        "generated_testcode": "assert odd_Num_Sum(5) == 30\n",
        "test": "assert odd_Num_Sum(1) == 1\nassert odd_Num_Sum(2) == 244\nassert odd_Num_Sum(3) == 3369",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm "
    },
    {
        "number": 550,
        "prompt": "Write a python function to find the maximum element in a sorted and rotated array.\ndef find_Max(arr,low,high): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if high >= low: \n        mid = (high + low) // 2; \n        if arr[mid] > arr[high]: \n            return find_Max(arr, low, mid - 1); \n        elif arr[mid] < arr[high]: \n            return find_Max(arr, mid + 1, high); \n        else: \n            return arr[mid]; \n    else: \n        return arr[low]; \n\n",
        "generated_testcode": "assert find_Max([1,2,3,4,5,6,7,8,9],0,9) == 9\n",
        "test": "assert find_Max([2,3,5,6,9],0,4) == 9\nassert find_Max([3,4,5,2,1],0,4) == 5\nassert find_Max([1,2,3],0,2) == 3",
        "canonical_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) "
    },
    {
        "number": 551,
        "prompt": "Write a function to extract a specified column from a given nested list.\ndef extract_column(list1, n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return [col for row in list1 for col in row[n]]\n\n",
        "generated_testcode": "assert extract_column([[1, 2], [3, 4], [5, 6]], 1) == [1, 3, 5]\n",
        "test": "assert extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[1, 2, 1]\nassert extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[3, -5, 1]\nassert extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[1, 5, 1, 13, 5, 9]",
        "canonical_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result "
    },
    {
        "number": 552,
        "prompt": "Write a python function to check whether a given sequence is linear or not.\ndef Seq_Linear(seq_nums):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    length = len(seq_nums)\n    if length == 1:\n        return True\n    \n    for i in range(length):\n        if seq_nums[i] == 0:\n            continue\n        else:\n            for j in range(i + 1, length):\n                if seq_nums[i] + seq_nums[j] == seq_nums[j] + seq_nums[i]:\n                    return True\n    return False\n\n",
        "generated_testcode": "assert Seq_Linear([1,2,3,4,5]) == True\n",
        "test": "assert Seq_Linear([0,2,4,6,8,10]) == \"Linear Sequence\"\nassert Seq_Linear([1,2,3]) == \"Linear Sequence\"\nassert Seq_Linear([1,5,2]) == \"Non Linear Sequence\"",
        "canonical_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\""
    },
    {
        "number": 553,
        "prompt": "Write a function to convert the given tuple to a floating-point number.\ndef tuple_to_float(test_tup):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return float(test_tup[0] + test_tup[1]/100)\n\n",
        "generated_testcode": "assert tuple_to_float((1, 2, 3)) == 1.0\n",
        "test": "assert tuple_to_float((4, 56)) == 4.56\nassert tuple_to_float((7, 256)) == 7.256\nassert tuple_to_float((8, 123)) == 8.123",
        "canonical_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) "
    },
    {
        "number": 554,
        "prompt": "Write a python function to find odd numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    odd_numbers = [] \n    for i in range(len(list)): \n        if list[i]%2!= 0: \n            odd_numbers.append(list[i]) \n    return odd_numbers \n\n",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n",
        "test": "assert Split([1,2,3,4,5,6]) == [1,3,5]\nassert Split([10,11,12,13]) == [11,13]\nassert Split([7,8,9,1]) == [7,9,1]",
        "canonical_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li"
    },
    {
        "number": 555,
        "prompt": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.\ndef difference(n) :  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum1=0\n    sum2=0\n    for i in range(1,n+1) :\n        sum1=sum1+(i*i*i)\n        sum2=sum2+(i)\n    print(sum1-sum2)\ndifference(int(input(\"enter the number\")))\n\n",
        "generated_testcode": "assert difference(5) == 25\n",
        "test": "assert difference(3) == 30\nassert difference(5) == 210\nassert difference(2) == 6",
        "canonical_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  "
    },
    {
        "number": 556,
        "prompt": "Write a python function to count the pairs with xor as an odd number.\ndef find_Odd_Pair(A,N) : \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    # Code here \n    count = 0\n    for i in range(N) : \n        if A[i] == 0 : \n            count = count + 1\n            j = i + 1\n            while (j < N and A[j] == 0) : \n                count = count + 1\n                j += 1\n        elif A[i] == 1 : \n            count = count + 1\n            j = i + 1\n            while (j < N and A[j] == 1) : \n                count = count + 1\n                j += 1\n    return count \n    # A = [0,1,0,1]\n    # N = 4\n    # print(find_Odd_Pair(A,N))\n    \n    \n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\n",
        "generated_testcode": "assert find_Odd_Pair([1,2,3,4,5,6,7,8,9,10],10) == True\n",
        "test": "assert find_Odd_Pair([5,4,7,2,1],5) == 6\nassert find_Odd_Pair([7,2,8,1,0,5,11],7) == 12\nassert find_Odd_Pair([1,2,3],3) == 2",
        "canonical_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  "
    },
    {
        "number": 557,
        "prompt": "Write a function to toggle characters case in a string.\ndef toggle_string(string):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    assert type(string) == str\n    toggled = \"\"\n    for letter in string:\n        if letter.isupper():\n            toggled += letter.lower()\n        else:\n            toggled += letter.upper()\n    return toggled\nprint(toggle_string(\"Hello\"))\n\n",
        "generated_testcode": "assert toggle_string(\"Hello\") == \"hELLO\"\n",
        "test": "assert toggle_string(\"Python\")==(\"pYTHON\")\nassert toggle_string(\"Pangram\")==(\"pANGRAM\")\nassert toggle_string(\"LIttLE\")==(\"liTTle\")",
        "canonical_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1"
    },
    {
        "number": 558,
        "prompt": "Write a python function to find the digit distance between two integers.\ndef digit_distance_nums(n1, n2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    n = abs(n1 - n2)\n    d = 0\n    while n:\n        d += 1\n        n = n // 10\n    return d\n\n",
        "generated_testcode": "assert digit_distance_nums(1, 2) == 1\n",
        "test": "assert digit_distance_nums(1,2) == 1\nassert digit_distance_nums(23,56) == 6\nassert digit_distance_nums(123,256) == 7",
        "canonical_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))"
    },
    {
        "number": 559,
        "prompt": "Write a function to find the largest sum of contiguous subarray in the given array.\ndef max_sub_array_sum(a, size):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n\n",
        "generated_testcode": "assert max_sub_array_sum([-2, 1, -3, 4, -1, 2, 1, -5, 4], 7) == 6\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8) == 7\nassert max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8) == 8\nassert max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8) == 10",
        "canonical_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far"
    },
    {
        "number": 560,
        "prompt": "Write a function to find the union of elements of the given tuples.\ndef union_elements(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return tuple(set(test_tup1).union(test_tup2))\n\n",
        "generated_testcode": "assert union_elements((1, 2, 3), (2, 3, 4)) == (1, 2, 3, 4)\n",
        "test": "assert union_elements((3, 4, 5, 6),(5, 7, 4, 10) ) == (3, 4, 5, 6, 7, 10)\nassert union_elements((1, 2, 3, 4),(3, 4, 5, 6) ) == (1, 2, 3, 4, 5, 6)\nassert union_elements((11, 12, 13, 14),(13, 15, 16, 17) ) == (11, 12, 13, 14, 15, 16, 17)",
        "canonical_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) "
    },
    {
        "number": 561,
        "prompt": "Write a function to assign with each element, its pair elements from other similar pairs in the given tuple.\ndef assign_elements(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (test_list[i] == test_list[j]):\n                test_list[i] = test_list[i],test_list[j]\n                \n            \n    return test_list\n\n",
        "generated_testcode": "assert assign_elements(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == {'a': 'b', 'b': 'c', 'c': 'd'",
        "test": "assert assign_elements([(5, 3), (7, 5), (2, 7), (3, 8), (8, 4)] ) == {3: [8], 5: [3], 7: [5], 2: [7], 8: [4], 4: []}\nassert assign_elements([(6, 4), (9, 4), (3, 8), (4, 9), (9, 5)] ) == {4: [9], 6: [4], 9: [4, 5], 8: [], 3: [8], 5: []}\nassert assign_elements([(6, 2), (6, 8), (4, 9), (4, 9), (3, 7)] ) == {2: [], 6: [2, 8], 8: [], 9: [], 4: [9, 9], 7: [], 3: [7]}",
        "canonical_solution": "def assign_elements(test_list):\r\n  res = dict()\r\n  for key, val in test_list:\r\n    res.setdefault(val, [])\r\n    res.setdefault(key, []).append(val)\r\n  return (res) "
    },
    {
        "number": 562,
        "prompt": "Write a python function to find the maximum length of sublist.\ndef Find_Max_Length(lst):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    max_length = 0\n    for sub in lst:\n        if (max_length < len(sub)):\n            max_length = len(sub)\n    return max_length\n\n",
        "generated_testcode": "assert Find_Max_Length([1,2,3,4,5]) == 5\n",
        "test": "assert Find_Max_Length([[1],[1,4],[5,6,7,8]]) == 4\nassert Find_Max_Length([[0,1],[2,2,],[3,2,1]]) == 3\nassert Find_Max_Length([[7],[22,23],[13,14,15],[10,20,30,40,50]]) == 5",
        "canonical_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength "
    },
    {
        "number": 563,
        "prompt": "Write a function to extract values between quotation marks of a string.\ndef extract_values(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return text[1:len(text) - 1]\n\n",
        "generated_testcode": "assert extract_values(\"This is a string with 'quotation marks' in it.\") == ['This', 'is', 'a','string', 'with', 'quotation','marks', 'in', 'it.']\n",
        "test": "assert extract_values('\"Python\", \"PHP\", \"Java\"')==['Python', 'PHP', 'Java']\nassert extract_values('\"python\",\"program\",\"language\"')==['python','program','language']\nassert extract_values('\"red\",\"blue\",\"green\",\"yellow\"')==['red','blue','green','yellow']",
        "canonical_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))"
    },
    {
        "number": 564,
        "prompt": "Write a python function to count unequal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(n): \n        for j in range(i + 1, n): \n            if (arr[i]!= arr[j]): \n                count += 1\n    return count\n#{ \n#  Driver Code Starts\n\n",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5,6,7,8,9,10],10) == 5\n",
        "test": "assert count_Pairs([1,2,1],3) == 2\nassert count_Pairs([1,1,1,1],4) == 0\nassert count_Pairs([1,2,3,4,5],5) == 10",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 565,
        "prompt": "Write a python function to split a string into characters.\ndef split(word): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(word) \n  \n# Driver Code \nstr = 'Python'\nprint(split(str)) \n\n",
        "generated_testcode": "assert split(\"hello\") == ['h', 'e', 'l', 'l', 'o']\n",
        "test": "assert split('python') == ['p','y','t','h','o','n']\nassert split('Name') == ['N','a','m','e']\nassert split('program') == ['p','r','o','g','r','a','m']",
        "canonical_solution": "def split(word): \r\n    return [char for char in word] "
    },
    {
        "number": 566,
        "prompt": "Write a function to get the sum of a non-negative integer.\ndef sum_digits(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  return sum(map(int, list(str(n))))\n\n",
        "generated_testcode": "assert sum_digits(0) == 0\n",
        "test": "assert sum_digits(345)==12\nassert sum_digits(12)==3\nassert sum_digits(97)==16",
        "canonical_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))"
    },
    {
        "number": 567,
        "prompt": "Write a function to check whether a specified list is sorted or not.\ndef issort_list(list1):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(list1) - 1):\n        if list1[i] > list1[i + 1]:\n            return False\n    return True\n\n",
        "generated_testcode": "assert issort_list([1,2,3,4,5]) == True\n",
        "test": "assert issort_list([1,2,4,6,8,10,12,14,16,17])==True\nassert issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])==False\nassert issort_list([1, 2, 4, 6, 8, 10,15,14,20])==False",
        "canonical_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result"
    },
    {
        "number": 568,
        "prompt": "Write a function to create a list of empty dictionaries.\ndef empty_list(length):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return [{} for _ in range(length)]\n\n",
        "generated_testcode": "assert empty_list(3) == [{}, {}, {}]\n",
        "test": "assert empty_list(5)==[{},{},{},{},{}]\nassert empty_list(6)==[{},{},{},{},{},{}]\nassert empty_list(7)==[{},{},{},{},{},{},{}]",
        "canonical_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list"
    },
    {
        "number": 569,
        "prompt": "Write a function to sort each sublist of strings in a given list of lists.\ndef sort_sublists(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n\n",
        "generated_testcode": "assert sort_sublists(['a', 'b', 'c', 'd', 'e']) == ['a', 'b', 'c', 'd', 'e']\n",
        "test": "assert sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]\nassert sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])==[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]\nassert sort_sublists([['a','b'],['d','c'],['g','h'] , ['f','e']])==[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]",
        "canonical_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result"
    },
    {
        "number": 570,
        "prompt": "Write a function to remove words from a given list of strings containing a character or string.\ndef remove_words(list1, charlist):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    newlist=[]\n    for i in list1:\n        if charlist not in i:\n            newlist.append(i)\n    print(newlist)\n\n",
        "generated_testcode": "assert remove_words([\"hello\", \"hi\", \"howdy\", \"heyas\"], \"o\") == [\"hello\", \"hi\", \"howdy\", \"heyas\"]\n",
        "test": "assert remove_words(['Red color', 'Orange#', 'Green', 'Orange @', \"White\"],['#', 'color', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['&', '+', '@'])==['Red', '', 'Green', 'Orange', 'White']\nassert remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'],['@'])==['Red &', 'Orange+', 'Green', 'Orange', 'White']",
        "canonical_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list"
    },
    {
        "number": 571,
        "prompt": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.\ndef max_sum_pair_diff_lessthan_K(arr, N, K): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # The largest sum possible formed from \n    # the array given. \n    max_sum = 0\n    # The sum of the pairs that are not \n    # part of the maximum sum. \n    smallest_pair_sum = 0\n  \n    # Initialize the array for pairs \n    # and initialize their sum. \n    pairs = [] \n    for i in range(0, N): \n        pairs.append([arr[i], 0]) \n  \n    # Sort the array elements in increasing order \n    # of their first element. \n    pairs.sort(key = lambda x: x[0]) \n  \n    # Now traverse the array elements in the sorted order. \n    # If the sum of the current pair is less than K, \n    # then we can ignore this pair and increment \n    # the sum by the pair[1]. \n    for i in range(0, N): \n        smallest_pair_sum += pairs[i][1] \n        # If the sum of the current pair is less than \n        # or equal to K, then we can ignore this pair \n        # and increment the sum by the pair[1] \n        if (smallest_pair_sum >= K): \n            smallest_pair_sum = smallest_pair_sum - pairs[i][1] \n            break\n  \n    # Find the maximum sum possible from pairs which \n    # are not part of the current sum and add it to \n    # the",
        "generated_testcode": "assert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5], 5, 3) == 10\n",
        "test": "assert max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4) == 62\nassert max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12) == 25\nassert max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6) == 21",
        "canonical_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]"
    },
    {
        "number": 572,
        "prompt": "Write a python function to remove two duplicate numbers from a given number of lists.\ndef two_unique_nums(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # return set(nums)\n    # return list(set(nums))\n    return list(set(nums))\n\n",
        "generated_testcode": "assert two_unique_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == True\n",
        "test": "assert two_unique_nums([1,2,3,2,3,4,5]) == [1, 4, 5]\nassert two_unique_nums([1,2,3,2,4,5]) == [1, 3, 4, 5]\nassert two_unique_nums([1,2,3,4,5]) == [1, 2, 3, 4, 5]",
        "canonical_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]"
    },
    {
        "number": 573,
        "prompt": "Write a python function to calculate the product of the unique numbers of a given list.\ndef unique_product(list_data):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    product_of_unique = 1\n    for i in list_data:\n        product_of_unique = product_of_unique * i\n    return product_of_unique\n\n",
        "generated_testcode": "assert unique_product([1, 2, 3, 4, 5]) == 120\n",
        "test": "assert unique_product([10, 20, 30, 40, 20, 50, 60, 40]) ==  720000000\nassert unique_product([1, 2, 3, 1,]) == 6\nassert unique_product([7, 8, 9, 0, 1, 1]) == 0",
        "canonical_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p"
    },
    {
        "number": 574,
        "prompt": "Write a function to find the surface area of a cylinder.\ndef surfacearea_cylinder(r,h):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return 2*pi*r*(r+h)\n\n",
        "generated_testcode": "assert surfacearea_cylinder(1,1) == 2\n",
        "test": "assert surfacearea_cylinder(10,5)==942.45\nassert surfacearea_cylinder(4,5)==226.18800000000002\nassert surfacearea_cylinder(4,10)==351.848",
        "canonical_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea"
    },
    {
        "number": 575,
        "prompt": "Write a python function to find nth number in a sequence which is not a multiple of a given number.\ndef count_no (A,N,L,R): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(L,R+1): \n        if(i % A == 0): \n            count = count + 1\n    return (count) \nn = 3\na = 4\nseq = [4,3,2,4,1,2,3,4,2] \nprint(count_no(a,n,0,len(seq)-1))\n\n",
        "generated_testcode": "assert count_no([1,2,3,4,5,6,7,8,9,10],2,5,10) == True\n",
        "test": "assert count_no(2,3,1,10) == 5\nassert count_no(3,6,4,20) == 11\nassert count_no(5,10,4,20) == 16",
        "canonical_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) "
    },
    {
        "number": 576,
        "prompt": "Write a python function to check whether an array is subarray of another or not.\ndef is_Sub_Array(A,B,n,m): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(0, n): \n        for j in range(0, m): \n            if(A[i] == B[j]): \n                count += 1\n            if(count == n): \n                return True\n    return False\n    \n    \n    #{ \n#Driver Code Starts\n#Initial Template for Python 3\n\n",
        "generated_testcode": "assert is_Sub_Array(A = [1,2,3,4,5,6,7,8,9],B = [1,2,3,4,5],n = 5,m = 9) == True\n",
        "test": "assert is_Sub_Array([1,4,3,5],[1,2],4,2) == False\nassert is_Sub_Array([1,2,1],[1,2,1],3,3) == True\nassert is_Sub_Array([1,0,2,2],[2,2,0],4,3) ==False",
        "canonical_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; "
    },
    {
        "number": 577,
        "prompt": "Write a python function to find the last digit in factorial of a given number.\ndef last_Digit_Factorial(n): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    fac = 1\n    while n // 10!= 0: \n        fac = fac * 10\n        n = n // 10\n    return fac * (n % 10)\nprint(last_Digit_Factorial(1234))\nprint(last_Digit_Factorial(10000))\n\n",
        "generated_testcode": "assert last_Digit_Factorial(5) == 5\n",
        "test": "assert last_Digit_Factorial(4) == 4\nassert last_Digit_Factorial(21) == 0\nassert last_Digit_Factorial(30) == 0",
        "canonical_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0"
    },
    {
        "number": 578,
        "prompt": "Write a function to interleave lists of the same length.\ndef interleave_lists(list1,list2,list3):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        if i == 0:\n            list3.append(list1[i])\n            list3.append(list2[i])\n        else:\n            list3.append(list1[i])\n            list3.append(list2[i])\n    return list3\n\n",
        "generated_testcode": "assert interleave_lists([1,2,3],['a','b','c'],['d','e','f']) == ['1','a','2','b','3','d','e','f']\n",
        "test": "assert interleave_lists([1,2,3,4,5,6,7],[10,20,30,40,50,60,70],[100,200,300,400,500,600,700])==[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]\nassert interleave_lists([10,20],[15,2],[5,10])==[10,15,5,20,2,10]\nassert interleave_lists([11,44], [10,15], [20,5])==[11,10,20,44,15,5]",
        "canonical_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result"
    },
    {
        "number": 579,
        "prompt": "Write a function to find the dissimilar elements in the given two tuples.\ndef find_dissimilar(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  diss_elts = []\n  for i in range(len(test_tup1)):\n    if test_tup1[i]!= test_tup2[i]:\n      diss_elts.append(test_tup1[i])\n  return diss_elts\n\n",
        "generated_testcode": "assert find_dissimilar((1, 2, 3), (1, 2, 4)) == (2, 3)\n",
        "test": "assert find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10)) == (3, 6, 7, 10)\nassert find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9)) == (1, 4, 7, 9)\nassert find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36)) == (34, 36, 11, 25)",
        "canonical_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) "
    },
    {
        "number": 580,
        "prompt": "Write a function to extract the even elements in the nested mixed tuple.\ndef even_ele(test_tuple, even_fnc): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    final_tuple = [] \n    for i in range(0,len(test_tuple)):\n        if test_tuple[i] % 2 == 0: \n            final_tuple.append(even_fnc(test_tuple[i]))\n    return tuple(final_tuple)\n# for tuple, the final_tuple is different from the one in python 3.7.5 due to the return\ntest_tuple = (1,2,3,(4,5,6),'hello',5,5)\nprint('The tuple original is: ',test_tuple)\nprint(even_ele(test_tuple, lambda x:x))\n# print(even_ele(test_tuple, lambda x:x)) # This gives an error because the return is different in python 3.7.5\n\n",
        "generated_testcode": "assert even_ele((1, 2, 3, 4, 5, 6, 7, 8, 9, 10), lambda x: x % 2 == 0) == (2, 4, 6, 8)\n",
        "test": "assert extract_even((4, 5, (7, 6, (2, 4)), 6, 8)) == (4, (6, (2, 4)), 6, 8)\nassert extract_even((5, 6, (8, 7, (4, 8)), 7, 9)) == (6, (8, (4, 8)))\nassert extract_even((5, 6, (9, 8, (4, 6)), 8, 10)) == (6, (8, (4, 6)), 8, 10)",
        "canonical_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) "
    },
    {
        "number": 581,
        "prompt": "Write a python function to find the surface area of the square pyramid.\ndef surface_Area(b,s): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    surface = (1/3)*s*s*b \n    return surface \n\n",
        "generated_testcode": "assert surface_Area(2,3) == 12\n",
        "test": "assert surface_Area(3,4) == 33\nassert surface_Area(4,5) == 56\nassert surface_Area(1,2) == 5",
        "canonical_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) "
    },
    {
        "number": 582,
        "prompt": "Write a function to check if a dictionary is empty or not.\ndef my_dict(dict1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  if dict1 == {}:\n    print(\"The dictionary is empty.\")\n  else:\n    print(\"The dictionary is not empty.\")\n\n",
        "generated_testcode": "assert my_dict({}) == True\n",
        "test": "assert my_dict({10})==False\nassert my_dict({11})==False\nassert my_dict({})==True",
        "canonical_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True"
    },
    {
        "number": 583,
        "prompt": "Write a function for nth catalan number.\ndef catalan_number(num):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if num == 0 or num == 1:\n        return 1\n\n",
        "generated_testcode": "assert catalan_number(1) == 1\n",
        "test": "assert catalan_number(10)==16796\nassert catalan_number(9)==4862\nassert catalan_number(7)==429",
        "canonical_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num"
    },
    {
        "number": 584,
        "prompt": "Write a function to find all adverbs and their positions in a given sentence by using regex.\ndef find_adverbs(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  import re\n  list = []\n  list1 = re.finditer(r\"\\b(?:R|r)\\b\", text)\n  for m in list1:\n    list.append((m.group(), m.start()))\n  return list\n\n",
        "generated_testcode": "assert find_adverbs(\"I am an NLPer\") == ['an', 'am', 'am', 'am']\n",
        "test": "assert find_adverbs(\"Clearly, he has no excuse for such behavior.\") == '0-7: Clearly'\nassert find_adverbs(\"Please handle the situation carefuly\") == '28-36: carefuly'\nassert find_adverbs(\"Complete the task quickly\") == '18-25: quickly'",
        "canonical_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))"
    },
    {
        "number": 585,
        "prompt": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.\ndef expensive_items(items,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    price_heap=[]\n    output=[]\n    for i in range(0,n):\n        heapq.heappush(price_heap,items[i][1])\n    for i in range(0,len(items)):\n        if(i>=n):\n            break\n        while(len(price_heap)!=0 and price_heap[0]<items[i][1]):\n            heapq.heappop(price_heap)\n        output.append([items[i][0],items[i][1]])\n    return output\n\n",
        "generated_testcode": "assert expensive_items([(1,2),(2,3),(3,4),(4,5),(5,6)],2) == [(1,2),(3,4)]\n",
        "test": "assert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-2', 'price': 555.22}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}],2)==[{'name': 'Item-2', 'price': 555.22},{'name': 'Item-1', 'price': 101.1}]\nassert expensive_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-2', 'price': 555.22}]",
        "canonical_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items"
    },
    {
        "number": 586,
        "prompt": "Write a python function to split the array and add the first part to the end.\ndef split_Arr(a,n,k):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(n):  \n        for j in range(i+1,n):  \n            a[i], a[j] = a[j], a[i]  \n    for i in range(k):  \n        a[i], a[n-k] = a[n-k], a[i]  \na = [1,2,3,4,5,6,7]  \nn = len(a)  \nk = 3  \nsplit_Arr(a, n, k)  \nprint(a)  \n========================================================\n# Write a python function to multiply all the elements in the array.\ndef multiply_elem(a):\n    mul = 1\n    for i in range(len(a)):\n        mul = mul * a[i]\n    return mul  \na = [1, 2, 3, 4]\nprint(multiply_elem(a))\n========================================================\n# Write a python function to count the number of even numbers in the array.\ndef even_count(a):\n    count = 0\n    for i in range(len(a)):\n        if a[i] % 2 == 0:\n            count = count + 1\n    return count  \na = [2, 6, 1, 8, 3, 5]\nprint(even_count(a))\n========================================================\n# Write a python function to check if an element is present in the array.\ndef check_in(a,b):\n    if b in a:\n        return",
        "generated_testcode": "assert split_Arr([1,2,3,4,5,6,7,8,9],3,3) == [[1,2,3],[4,5,6],[7,8,9]]\n",
        "test": "assert split_Arr([12,10,5,6,52,36],6,2) == [5,6,52,36,12,10]\nassert split_Arr([1,2,3,4],4,1) == [2,3,4,1]\nassert split_Arr([0,1,2,3,4,5,6,7],8,3) == [3,4,5,6,7,0,1,2]",
        "canonical_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) "
    },
    {
        "number": 587,
        "prompt": "Write a function to convert a list to a tuple.\ndef list_tuple(listx):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    l=[]\n    for i in range(0,len(listx)):\n        l.append(listx[i])\n    t=tuple(l)\n    return t\nprint(list_tuple([1,2,3]))\nprint(list_tuple([]))\n\n",
        "generated_testcode": "assert list_tuple([1,2,3]) == (1,2,3)\n",
        "test": "assert list_tuple([5, 10, 7, 4, 15, 3])==(5, 10, 7, 4, 15, 3)\nassert list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])==(2, 4, 5, 6, 2, 3, 4, 4, 7)\nassert list_tuple([58,44,56])==(58,44,56)",
        "canonical_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex"
    },
    {
        "number": 588,
        "prompt": "Write a python function to find the difference between largest and smallest value in a given array.\ndef big_diff(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return max(nums) - min(nums)\n\n",
        "generated_testcode": "assert big_diff([1, 2, 3, 4, 5]) == 3\n",
        "test": "assert big_diff([1,2,3,4]) == 3\nassert big_diff([4,5,12]) == 8\nassert big_diff([9,2,3]) == 7",
        "canonical_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff"
    },
    {
        "number": 589,
        "prompt": "Write a function to find perfect squares between two given numbers.\ndef perfect_squares(a, b):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Write a code to calculate perfect squares between two numbers a and b\n    # and return count of perfect squares\n    # Input\n    # a = 5\n    # b = 13\n    # Output\n    # 7\n    #\n    # a = 3\n    # b = 10\n    # Output\n    # 4\n    print(a, b)\n    x = 0\n    for i in range(a,b):\n        if (i*i) == i:\n            x += 1\n            print(i, x)\n    return x\n\n",
        "generated_testcode": "assert perfect_squares(1, 1) == 1\n",
        "test": "assert perfect_squares(1,30)==[1, 4, 9, 16, 25]\nassert perfect_squares(50,100)==[64, 81, 100]\nassert perfect_squares(100,200)==[100, 121, 144, 169, 196]",
        "canonical_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists"
    },
    {
        "number": 590,
        "prompt": "Write a function to convert polar coordinates to rectangular coordinates.\ndef polar_rect(x,y):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    rect_x = x*math.cos(math.radians(y))\n    rect_y = x*math.sin(math.radians(y))\n    return rect_x,rect_y\nrect_x,rect_y = polar_rect(4,90)\nprint(rect_x)\nprint(rect_y)",
        "generated_testcode": "assert polar_rect(1,1) == (1,1)\n",
        "test": "assert polar_rect(3,4)==((5.0, 0.9272952180016122), (-2+2.4492935982947064e-16j))\nassert polar_rect(4,7)==((8.06225774829855, 1.0516502125483738), (-2+2.4492935982947064e-16j))\nassert polar_rect(15,17)==((22.67156809750927, 0.8478169733934057), (-2+2.4492935982947064e-16j))",
        "canonical_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)"
    },
    {
        "number": 591,
        "prompt": "Write a python function to interchange the first and last elements in a list.\ndef swap_List(newList): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    x=newList[0]\n    newList[0]=newList[len(newList)-1]\n    newList[len(newList)-1]=x \n    return newList\n\n",
        "generated_testcode": "assert swap_List([1,2,3,4,5]) == [5,4,3,2,1]\n",
        "test": "assert swap_List([12, 35, 9, 56, 24]) == [24, 35, 9, 56, 12]\nassert swap_List([1, 2, 3]) == [3, 2, 1]\nassert swap_List([4, 5, 6]) == [6, 5, 4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList "
    },
    {
        "number": 592,
        "prompt": "Write a python function to find sum of product of binomial co-efficients.\ndef binomial_Coeff(n,k): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    b = binomial_coeff(n, k)\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (b[i][k])\n    return sum\n\n",
        "generated_testcode": "assert binomial_Coeff(5,3) == 5\n",
        "test": "assert sum_Of_product(3) == 15\nassert sum_Of_product(4) == 56\nassert sum_Of_product(1) == 1",
        "canonical_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); "
    },
    {
        "number": 593,
        "prompt": "Write a function to remove leading zeroes from an ip address.\ndef removezero_ip(ip):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return ip.replace('.','')\n\n",
        "generated_testcode": "assert removezero_ip('192.168.0.1') == '192.168.1.1'\n",
        "test": "assert removezero_ip(\"216.08.094.196\")==('216.8.94.196') \nassert removezero_ip(\"12.01.024\")==('12.1.24') \nassert removezero_ip(\"216.08.094.0196\")==('216.8.94.196') ",
        "canonical_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r"
    },
    {
        "number": 594,
        "prompt": "Write a function to find the difference of first even and odd number of a given list.\ndef diff_even_odd(list1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    n1,n2 = 0,0\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            n1 +=1\n        else:\n            n2 +=1\n    if n1>n2:\n        return n1-n2\n    else:\n        return n2-n1\n\n",
        "generated_testcode": "assert diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 0, \"Should be 0\"\n",
        "test": "assert diff_even_odd([1,3,5,7,4,1,6,8])==3\nassert diff_even_odd([1,2,3,4,5,6,7,8,9,10])==1\nassert diff_even_odd([1,5,7,9,10])==9",
        "canonical_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)"
    },
    {
        "number": 595,
        "prompt": "Write a python function to count minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    #code here \n    i, j = 0, 0\n    swaps = 0\n    \n    while i < len(str1) and j < len(str2):\n        if str1[i]!= str2[j]:\n            if str1[i] == '0':\n                i += 1\n            else:\n                j += 1\n            swaps += 1\n        else:\n            i += 1\n            j += 1\n    return swaps\n    \n\n",
        "generated_testcode": "assert min_Swaps('01010101','01010101') == 0\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"111\",\"000\") == \"Not Possible\"\nassert min_Swaps(\"111\",\"110\") == \"Not Possible\"",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 596,
        "prompt": "Write a function to find the size of the given tuple.\ndef tuple_size(tuple_list):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    size = len(tuple_list)\n    return size\n\n",
        "generated_testcode": "assert tuple_size([1, 2, 3]) == 3\n",
        "test": "assert tuple_size((\"A\", 1, \"B\", 2, \"C\", 3) ) == sys.getsizeof((\"A\", 1, \"B\", 2, \"C\", 3))\nassert tuple_size((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\") ) == sys.getsizeof((1, \"Raju\", 2, \"Nikhil\", 3, \"Deepanshu\"))\nassert tuple_size(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\"))  ) == sys.getsizeof(((1, \"Lion\"), ( 2, \"Tiger\"), (3, \"Fox\"), (4, \"Wolf\")))",
        "canonical_solution": "import sys \r\ndef tuple_size(tuple_list):\r\n  return (sys.getsizeof(tuple_list)) "
    },
    {
        "number": 597,
        "prompt": "Write a function to find kth element from the given two sorted arrays.\ndef find_kth(arr1, arr2, m, n, k):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    k_index = -1\n    while k > 0:\n        if m == 0:\n            sum += arr2[n - k]\n            k -= 1\n            m = m + 1\n        elif n == 0:\n            sum += arr1[m - k]\n            k -= 1\n            n = n + 1\n        elif arr1[m - 1] > arr2[n - 1]:\n            sum += arr1[m - 1]\n            m -= 1\n        else:\n            sum += arr2[n - 1]\n            n -= 1\n\n",
        "generated_testcode": "assert find_kth([1, 2, 3, 4, 5], [2, 3, 4, 5], 3, 5, 3) == 3\n",
        "test": "assert find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5) == 6\nassert find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7) == 256\nassert find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6) == 8",
        "canonical_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]"
    },
    {
        "number": 598,
        "prompt": "Write a function to check whether the given number is armstrong or not.\ndef armstrong_number(number):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "\tvalue = 0\n\tstring = str(number)\n\tfor i in range(len(string)):\n\t\tvalue += int(string[i])**len(string)\n\treturn number == value\n\n",
        "generated_testcode": "assert armstrong_number(153) == True\n",
        "test": "assert armstrong_number(153)==True\nassert armstrong_number(259)==False\nassert armstrong_number(4458)==False",
        "canonical_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False"
    },
    {
        "number": 599,
        "prompt": "Write a function to find sum and average of first n natural numbers.\ndef sum_average(number):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, number + 1):\n        sum = sum + i\n    average = sum / number\n    print(sum)\n    print(average)\n\n",
        "generated_testcode": "assert sum_average(5) == 10\n",
        "test": "assert sum_average(10)==(55, 5.5)\nassert sum_average(15)==(120, 8.0)\nassert sum_average(20)==(210, 10.5)",
        "canonical_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)"
    },
    {
        "number": 600,
        "prompt": "Write a python function to check whether the given number is even or not using bitwise operator.\ndef is_Even(n) : \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if(n & 1) : \n        return False\n    else: \n        return True\n\n",
        "generated_testcode": "assert is_Even(2) == True\n",
        "test": "assert is_Even(1) == False\nassert is_Even(2) == True\nassert is_Even(3) == False",
        "canonical_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 601,
        "prompt": "Write a function to find the longest chain which can be formed from the given set of pairs.\n\tdef __init__(self, a, b): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\t\tself.root = Node(0) \n\t\tself.a = a \n\t\tself.b = b \n\t\tself.root.left = self.root.right = None\n\t\tself.len_a = self.len_b = self.min_l = self.max_l = 0\n\t\tself.get_min_max_length()\n\t\tself.root = self.min_l\n\t\tself.a = a\n\t\tself.b = b\n\t\n\tdef get_min_max_length(self):\n\t\tfor i in range(len(self.a)):\n\t\t\tfor j in range(i+1, len(self.b)):\n\t\t\t\tif self.a[i] == self.b[j]:\n\t\t\t\t\tself.min_l = self.max_l = 1\n\t\t\t\t\tself.a = self.a[:i] + self.a[i+1:]\n\t\t\t\t\tself.b = self.b[:j] + self.b[j+1:]\n\t\t\t\t\tbreak\n\t\t\t\telse:\n\t\t\t\t\tif self.min_l == 0:\n\t\t\t\t\t\tself.min_l = self.max_l = 0\n\t\t\t\t\tif self.min_l < i-j:\n\t\t\t\t\t\tself.min_l = i-j\n\t\t\t\t\tif self.max_l < j-i:\n\t\t\t\t\t\tself.max_l = j-i\n\n",
        "generated_testcode": "assert longest_chain([(1, 2), (2, 3), (3, 4), (4, 5)]) == 2\n",
        "test": "assert max_chain_length([Pair(5, 24), Pair(15, 25),Pair(27, 40), Pair(50, 60)], 4) == 3\nassert max_chain_length([Pair(1, 2), Pair(3, 4),Pair(5, 6), Pair(7, 8)], 4) == 4\nassert max_chain_length([Pair(19, 10), Pair(11, 12),Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5) == 5",
        "canonical_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max"
    },
    {
        "number": 602,
        "prompt": "Write a python function to find the first repeated character in a given string.\ndef first_repeated_char(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\ts = set(str1)\n\tfor i in s:\n\t\tif str1.count(i)>1:\n\t\t\tprint(i)\n\t\t\treturn\n\n",
        "generated_testcode": "assert first_repeated_char(\"abcdefg\") == \"e\"\n",
        "test": "assert first_repeated_char(\"abcabc\") == \"a\"\nassert first_repeated_char(\"abc\") == \"None\"\nassert first_repeated_char(\"123123\") == \"1\"",
        "canonical_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\""
    },
    {
        "number": 603,
        "prompt": "Write a function to get a lucid number smaller than or equal to n.\ndef get_ludic(n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return (n * (n + 1) // 2) % (n - 1)\n\n",
        "generated_testcode": "assert get_ludic(10) == 9\n",
        "test": "assert get_ludic(10) == [1, 2, 3, 5, 7]\nassert get_ludic(25) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25]\nassert get_ludic(45) == [1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]",
        "canonical_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics"
    },
    {
        "number": 604,
        "prompt": "Write a function to reverse words in a given string.\ndef reverse_words(s):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    s_list = s.split()\n    s_list.reverse()\n    return''.join(s_list)\n\n",
        "generated_testcode": "assert reverse_words(\"hello world\") == \"dlrow olleh\", \"Should reverse the words\"\n",
        "test": "assert reverse_words(\"python program\")==(\"program python\")\nassert reverse_words(\"java language\")==(\"language java\")\nassert reverse_words(\"indian man\")==(\"man indian\")",
        "canonical_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))"
    },
    {
        "number": 605,
        "prompt": "Write a function to check if the given integer is a prime number.\ndef prime_num(num):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True if num!= 1 else False\n\n",
        "generated_testcode": "assert prime_num(7) == True\n",
        "test": "assert prime_num(13)==True\nassert prime_num(7)==True\nassert prime_num(-1010)==False",
        "canonical_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False"
    },
    {
        "number": 606,
        "prompt": "Write a function to convert degrees to radians.\ndef radian_degree(degree):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    rad = degree * (math.pi / 180)\n    return rad\n\n",
        "generated_testcode": "assert radian_degree(90) == 1.5707963267948966\n",
        "test": "assert radian_degree(90)==1.5707963267948966\nassert radian_degree(60)==1.0471975511965976\nassert radian_degree(120)==2.0943951023931953",
        "canonical_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian"
    },
    {
        "number": 607,
        "prompt": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.\ndef find_literals(text, pattern):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    try:\n        if re.search(pattern, text):\n            return re.search(pattern, text).span()\n        else:\n            return \"no match\"\n    except:\n        return \"no match\"\n\n",
        "generated_testcode": "assert find_literals(\"abc\", \"abc\") == 0\n",
        "test": "assert find_literals('The quick brown fox jumps over the lazy dog.', 'fox') == ('fox', 16, 19)\nassert find_literals('Its been a very crazy procedure right', 'crazy') == ('crazy', 16, 21)\nassert find_literals('Hardest choices required strongest will', 'will') == ('will', 35, 39)",
        "canonical_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)"
    },
    {
        "number": 608,
        "prompt": "Write a python function to find nth bell number.\ndef bell_Number(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if(n == 0): \n        return 0\n    if (n == 1): \n        return 1\n    first = 1\n    second = 1\n    for i in range(2, n+1):\n        third = first + second \n        first = second\n        second = third\n    return third\n",
        "generated_testcode": "assert bell_Number(1) == 1\n",
        "test": "assert bell_Number(2) == 2\nassert bell_Number(3) == 5\nassert bell_Number(4) == 15",
        "canonical_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] "
    },
    {
        "number": 609,
        "prompt": "Write a python function to find minimum possible value for the given periodic function.\ndef floor_Min(A,B,N):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    f = lambda x: (math.sin(x))**2\n    while N >= 0:\n        m = f(A)\n        if m > f(B):\n            return (A+1)\n        else:\n            A += 1\n            N -= 1\n    return (A)\nA = int(input('Enter the starting point'))\nB = int(input('Enter the ending point'))\nN = int(input('Enter the number of points'))\nx = floor_Min(A,B,N)\nprint(x)\n\n",
        "generated_testcode": "assert floor_Min(1,2,3) == 1\n",
        "test": "assert floor_Min(10,20,30) == 15\nassert floor_Min(1,2,1) == 0\nassert floor_Min(11,10,9) == 9",
        "canonical_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 610,
        "prompt": "Write a python function to remove the k'th element from a given list.\ndef remove_kth_element(list1, L):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        if i == L:\n            list1.pop(i)\n    return list1\n\n",
        "generated_testcode": "assert remove_kth_element([1,2,3,4,5], 2) == [1,2,3,5], \"Should be [1,2,3,5]\"\n",
        "test": "assert remove_kth_element([1,1,2,3,4,4,5,1],3)==[1, 1, 3, 4, 4, 5, 1]\nassert remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4],4)==[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]\nassert remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10],5)==[10,10,15,19, 18, 17, 26, 26, 17, 18, 10]",
        "canonical_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]"
    },
    {
        "number": 611,
        "prompt": "Write a function to find the maximum of nth column from the given tuple list.\ndef max_of_nth(test_list, N):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    maximum = test_list[0][N - 1]\n    for item in test_list:\n        if item[N - 1] > maximum:\n            maximum = item[N - 1]\n    return maximum\n\n",
        "generated_testcode": "assert max_of_nth([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 2) == 8\n",
        "test": "assert max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 19\nassert max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 10\nassert max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1) == 11",
        "canonical_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 612,
        "prompt": "Write a python function to merge the first and last elements separately in a list of lists.\ndef merge(lst):  \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 0\n    l = len(lst)\n    while i < l-1:\n        if lst[i] > lst[i+1]:\n            lst[i], lst[i+1] = lst[i+1], lst[i]\n        i+=1\n    return lst\n\n",
        "generated_testcode": "assert merge([[1, 2], [3, 4], [5, 6]]) == [[1, 2], [3, 4], [5, 6]]\n",
        "test": "assert merge([['x', 'y'], ['a', 'b'], ['m', 'n']]) == [['x', 'a', 'm'], ['y', 'b', 'n']]\nassert merge([[1, 2], [3, 4], [5, 6], [7, 8]]) == [[1, 3, 5, 7], [2, 4, 6, 8]]\nassert merge([['x', 'y','z' ], ['a', 'b','c'], ['m', 'n','o']]) == [['x', 'a', 'm'], ['y', 'b', 'n'],['z', 'c','o']]",
        "canonical_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] "
    },
    {
        "number": 613,
        "prompt": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.\ndef maximum_value(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    a_list=[]\n    for i in test_list:\n        x=i[1]\n        a_list.append(x)\n    maximum = max(a_list)\n    return (maximum,a_list.index(maximum))\n\n",
        "generated_testcode": "assert maximum_value([(1, 2), (3, 4), (5, 6)]) == (5, 6)\n",
        "test": "assert maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])]) == [('key1', 5), ('key2', 4), ('key3', 9)]\nassert maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])]) == [('key1', 6), ('key2', 5), ('key3', 10)]\nassert maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])]) == [('key1', 7), ('key2', 6), ('key3', 11)]",
        "canonical_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) "
    },
    {
        "number": 614,
        "prompt": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.\ndef cummulative_sum(test_list):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(len(test_list)):\n        sum += test_list[i]\n    return sum\n\n",
        "generated_testcode": "assert cummulative_sum([1,2,3,4,5]) == 15\n",
        "test": "assert cummulative_sum([(1, 3), (5, 6, 7), (2, 6)]) == 30\nassert cummulative_sum([(2, 4), (6, 7, 8), (3, 7)]) == 37\nassert cummulative_sum([(3, 5), (7, 8, 9), (4, 8)]) == 44",
        "canonical_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)"
    },
    {
        "number": 615,
        "prompt": "Write a function to find average value of the numbers in a given tuple of tuples.\ndef average_tuple(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    total = 0\n    for i in range(len(nums)):\n        total += nums[i]\n    avg = total/len(nums)\n    return avg\n\n",
        "generated_testcode": "assert average_tuple([(1, 2), (3, 4), (5, 6)]) == 3.5\n",
        "test": "assert average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))==[30.5, 34.25, 27.0, 23.25]\nassert average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))== [25.5, -18.0, 3.75]\nassert average_tuple( ((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))==[305.0, 342.5, 270.0, 232.5]",
        "canonical_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result"
    },
    {
        "number": 616,
        "prompt": "Write a function to perfom the modulo of tuple elements in the given two tuples.\ndef tuple_modulo(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(x % y for x, y in zip(test_tup1, test_tup2))\n\n",
        "generated_testcode": "assert tuple_modulo((1, 2, 3), (4, 5, 6)) == (1, 2, 3)\n",
        "test": "assert tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5)) == (0, 4, 5, 1)\nassert tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6)) == (5, 5, 6, 1)\nassert tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7)) == (5, 6, 7, 1)",
        "canonical_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) "
    },
    {
        "number": 617,
        "prompt": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\ndef min_Jumps(a, b, d): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if a == d:\n        return 0\n    if d - a == 1:\n        return 1\n    if a == 0:\n        return -1\n    return min_Jumps(a-1, b, d) + min_Jumps(a, b-1, d)\n\n",
        "generated_testcode": "assert min_Jumps(1, 1, 1) == 0\n",
        "test": "assert min_Jumps(3,4,11)==3.5\nassert min_Jumps(3,4,0)==0\nassert min_Jumps(11,14,11)==1",
        "canonical_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2"
    },
    {
        "number": 618,
        "prompt": "Write a function to divide two lists using map and lambda function.\ndef div_list(nums1,nums2):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "  list1=map(lambda x:x%2==0,nums1)\n  list2=map(lambda x:x%2==0,nums2)\n  div=list(list1)\n  div.extend(list2)\n  print(list(div))\ndiv_list([1,2,3,4],[5,6,7,8])\n\n",
        "generated_testcode": "assert div_list([1,2,3,4], [1,2,3,4]) == None\n",
        "test": "assert div_list([4,5,6],[1, 2, 3])==[4.0,2.5,2.0]\nassert div_list([3,2],[1,4])==[3.0, 0.5]\nassert div_list([90,120],[50,70])==[1.8, 1.7142857142857142]",
        "canonical_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 619,
        "prompt": "Write a function to move all the numbers in it to the given string.\ndef move_num(test_str):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    new_str = \"\"\n    for i in test_str:\n        new_str += str(i)\n    return new_str\n\n",
        "generated_testcode": "assert move_num(\"abc\") == \"cba\"\n",
        "test": "assert move_num('I1love143you55three3000thousand') == 'Iloveyouthreethousand1143553000'\nassert move_num('Avengers124Assemble') == 'AvengersAssemble124'\nassert move_num('Its11our12path13to14see15things16do17things') == 'Itsourpathtoseethingsdothings11121314151617'",
        "canonical_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) "
    },
    {
        "number": 620,
        "prompt": "Write a function to find the largest subset where each pair is divisible.\ndef largest_subset(a, n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        dp[i][i] = 1\n    for i in range(n - 1, -1, -1):\n        for j in range(i + 1, n):\n            if a[i] % a[j] == 0:\n                dp[i][j] = max(dp[i + 1][j], dp[i][j - 1]) + 1\n    return dp[0][n - 1]\n\n",
        "generated_testcode": "assert largest_subset([1, 2, 3, 4, 5], 5) == [1, 2, 3, 4, 5]\n",
        "test": "assert largest_subset([ 1, 3, 6, 13, 17, 18 ], 6) == 4\nassert largest_subset([10, 5, 3, 15, 20], 5) == 3\nassert largest_subset([18, 1, 3, 6, 13, 17], 6) == 4",
        "canonical_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)"
    },
    {
        "number": 621,
        "prompt": "Write a function to increment the numeric values in the given strings by k.\ndef increment_numerics(test_list, K):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(test_list)):\n        test_list[i] = str(int(test_list[i]) + K)\n    return test_list\n\n",
        "generated_testcode": "assert increment_numerics([\"1\", \"2\", \"3\"], 1) == [\"2\", \"3\", \"4\"], \"Should increment the numeric values in the given strings by k\"\n",
        "test": "assert increment_numerics([\"MSM\", \"234\", \"is\", \"98\", \"123\", \"best\", \"4\"] , 6) == ['MSM', '240', 'is', '104', '129', 'best', '10']\nassert increment_numerics([\"Dart\", \"356\", \"is\", \"88\", \"169\", \"Super\", \"6\"] , 12) == ['Dart', '368', 'is', '100', '181', 'Super', '18']\nassert increment_numerics([\"Flutter\", \"451\", \"is\", \"44\", \"96\", \"Magnificent\", \"12\"] , 33) == ['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']",
        "canonical_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res "
    },
    {
        "number": 622,
        "prompt": "Write a function to find the median of two sorted arrays of same size.\ndef get_median(arr1, arr2, n):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    arr1.extend(arr2)\n    arr1.sort()\n    return arr1[n // 2]\n\n",
        "generated_testcode": "assert get_median([1, 2, 3, 4], [5, 6, 7, 8], 4) == 3\n",
        "test": "assert get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5) == 16.0\nassert get_median([2, 4, 8, 9], [7, 13, 19, 28], 4) == 8.5\nassert get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6) == 25.0",
        "canonical_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2"
    },
    {
        "number": 623,
        "prompt": "Write a function to find the n-th power of individual elements in a list using lambda function.\ndef nth_nums(nums,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    nums = [x**n for x in nums]\n    return nums\n\n",
        "generated_testcode": "assert nth_nums([1,2,3,4],2) == 9\n",
        "test": "assert nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2)==[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]\nassert nth_nums([10,20,30],3)==([1000, 8000, 27000])\nassert nth_nums([12,15],5)==([248832, 759375])",
        "canonical_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums"
    },
    {
        "number": 624,
        "prompt": "Write a python function to convert the given string to upper case.\ndef is_upper(string):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return string.isupper()\n\n",
        "generated_testcode": "assert is_upper('Hello') == False\n",
        "test": "assert is_upper(\"person\") ==\"PERSON\"\nassert is_upper(\"final\") == \"FINAL\"\nassert is_upper(\"Valid\") == \"VALID\"",
        "canonical_solution": "def is_upper(string):\r\n  return (string.upper())"
    },
    {
        "number": 625,
        "prompt": "Write a python function to interchange first and last elements in a given list.\ndef swap_List(newList): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    first = newList[0]\n    newList[0] = newList[-1] \n    newList[-1] = first \n    return newList\n  \nList = list(map(int, input().split()))\nnewList = swap_List(List) \nprint(\"After interchange:\", newList)\n\n",
        "generated_testcode": "assert swap_List([1,2,3,4,5]) == [5,1,2,3,4]\n",
        "test": "assert swap_List([1,2,3]) == [3,2,1]\nassert swap_List([1,2,3,4,4]) == [4,2,3,4,1]\nassert swap_List([4,5,6]) == [6,5,4]",
        "canonical_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList "
    },
    {
        "number": 626,
        "prompt": "Write a python function to find the largest triangle that can be inscribed in the semicircle.\ndef triangle_area(r) :  \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "   \n    def max_triangle_area(r) :  \n        if r <= 1:\n            return r * r\n        else :\n            return (r * r) * 1.25\n    return max_triangle_area(r)\n\n",
        "generated_testcode": "assert triangle_area(1) == 1\n",
        "test": "assert triangle_area(0) == 0\nassert triangle_area(-1) == -1\nassert triangle_area(2) == 4",
        "canonical_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r "
    },
    {
        "number": 627,
        "prompt": "Write a python function to find the smallest missing number from the given array.\ndef find_First_Missing(array,start,end): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    while start<=end: \n        mid=(start+end)//2\n        if mid<len(array) and array[mid]==mid+1: \n            mid+=1\n        if mid>len(array) or array[mid]<=mid: \n            print(mid) \n            return mid \n        if array[mid]>mid: \n            start=mid+1\n        else: \n            end=mid-1\n    return -1\n\n",
        "generated_testcode": "assert find_First_Missing([1,2,3,4,5,6,7,8,9,10],0,10) == 1\n",
        "test": "assert find_First_Missing([0,1,2,3],0,3) == 4\nassert find_First_Missing([0,1,2,6,9],0,4) == 3\nassert find_First_Missing([2,3,5,8,9],0,4) == 0",
        "canonical_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) "
    },
    {
        "number": 628,
        "prompt": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.\ndef replace_spaces(string):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return string.replace(\" \", \"%20\")\n\n",
        "generated_testcode": "assert replace_spaces(\"This is a test\") == \"This is a test%20\"\n",
        "test": "assert replace_spaces(\"My Name is Dawood\") == 'My%20Name%20is%20Dawood'\nassert replace_spaces(\"I am a Programmer\") == 'I%20am%20a%20Programmer'\nassert replace_spaces(\"I love Coding\") == 'I%20love%20Coding'",
        "canonical_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)"
    },
    {
        "number": 629,
        "prompt": "Write a python function to find even numbers from a mixed list.\ndef Split(list): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    return[i for i in list if i%2 == 0]\ndef Find_Even(list): \n    return len(list)\ndef list_test():\n    list=[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20]\n    print(Split(list))\n    print(Find_Even(Split(list)))\n\n",
        "generated_testcode": "assert Split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [2, 4, 6, 8, 10]\n",
        "test": "assert Split([1,2,3,4,5]) == [2,4]\nassert Split([4,5,6,7,8,0,1]) == [4,6,8,0]\nassert Split ([8,12,15,19]) == [8,12]",
        "canonical_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li"
    },
    {
        "number": 630,
        "prompt": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.\ndef adjac(ele, sub = []): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(ele)): \n        x = ele[0] - 1 if (i % 2 == 0) else ele[0] + 1\n        y = ele[1] - 1 if (i // 2 == 0) else ele[1] + 1\n        sub.append((x, y))\n    return sub\n\n",
        "generated_testcode": "assert adjac((1,2)) == [(0,1), (1,0), (1,2), (2,1)]\n",
        "test": "assert get_coordinates((3, 4)) == [[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]\nassert get_coordinates((4, 5)) ==[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]\nassert get_coordinates((5, 6)) == [[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]",
        "canonical_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) "
    },
    {
        "number": 631,
        "prompt": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.\ndef replace_spaces(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    regex = re.compile('\\s')\n    return regex.sub('_',text)\n\n",
        "generated_testcode": "assert replace_spaces(\"This is a test\") == \"this_is_a_test\"\n",
        "test": "assert replace_spaces('Jumanji The Jungle') == 'Jumanji_The_Jungle'\nassert replace_spaces('The Avengers') == 'The_Avengers'\nassert replace_spaces('Fast and Furious') == 'Fast_and_Furious'",
        "canonical_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)"
    },
    {
        "number": 632,
        "prompt": "Write a python function to move all zeroes to the end of the given list.\ndef move_zero(num_list):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    counter = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[counter], num_list[i] = num_list[i], num_list[counter]\n            counter += 1\n    return num_list\n\n",
        "generated_testcode": "assert move_zero([1, 2, 3, 4, 0, 0, 0, 0, 0, 0]) == [1, 2, 3, 4, 0, 0, 0, 0, 0, 0]\n",
        "test": "assert move_zero([1,0,2,0,3,4]) == [1,2,3,4,0,0]\nassert move_zero([2,3,2,0,0,4,0,5,0]) == [2,3,2,4,5,0,0,0,0]\nassert move_zero([0,1,0,1,1]) == [1,1,1,0,0]",
        "canonical_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 633,
        "prompt": "Write a python function to find the sum of xor of all pairs of numbers in the given array.\ndef pair_OR_Sum(arr,n) : \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    if n==0:\n        return 0\n    if n==1:\n        return 1\n    s = 0\n    for i in range(1,n):\n        s = s^arr[i]\n    return s\narr = [3,2,4,5]\nn = len(arr)\nprint(pair_OR_Sum(arr,n))\n",
        "generated_testcode": "assert pair_OR_Sum([1,2,3,4],4) == 5\n",
        "test": "assert pair_OR_Sum([5,9,7,6],4) == 47\nassert pair_OR_Sum([7,3,5],3) == 12\nassert pair_OR_Sum([7,3],2) == 4",
        "canonical_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans "
    },
    {
        "number": 634,
        "prompt": "Write a python function to find the sum of fourth power of first n even natural numbers.\ndef even_Power_Sum(n): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n):\n        if i%2 == 0:\n            sum += i**4\n    return sum\n\n",
        "generated_testcode": "assert even_Power_Sum(4) == 16\n",
        "test": "assert even_Power_Sum(2) == 272\nassert even_Power_Sum(3) == 1568\nassert even_Power_Sum(4) == 5664",
        "canonical_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; "
    },
    {
        "number": 635,
        "prompt": "Write a function to push all values into a heap and then pop off the smallest values one at a time.\ndef heap_sort(iterable):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    h = []\n    for value in iterable:\n        heapq.heappush(h, value)\n    return [heapq.heappop(h) for i in range(len(h))]\n\n",
        "generated_testcode": "assert heap_sort([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n",
        "test": "assert heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\nassert heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]\nassert heap_sort( [7, 1, 9, 5])==[1,5,7,9]",
        "canonical_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]"
    },
    {
        "number": 636,
        "prompt": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.\ndef Check_Solution(a,b,c): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    delta = (b*b)-(4*a*c) \n    if delta < 0 : \n        return False\n    else : \n        sqrt_val = (delta**0.5) \n    r1 = (-b + sqrt_val)/(2*a) \n    r2 = (-b - sqrt_val)/(2*a) \n    return (r1==r2) \n  \n#Provide different values for  a, b, c and test your program \na = 3\nb = 4\nc = -8\nif (Check_Solution(a,b,c) == True): \n    print(\"Roots are real and equal\")\nelse : \n    print(\"Roots are not real and unequal\")\n",
        "generated_testcode": "assert Check_Solution(1,0,0) == True\n",
        "test": "assert Check_Solution(2,0,2) == \"Yes\"\nassert Check_Solution(2,-5,2) == \"Yes\"\nassert Check_Solution(1,2,3) == \"No\"",
        "canonical_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); "
    },
    {
        "number": 637,
        "prompt": "Write a function to check whether the given amount has no profit and no loss\ndef noprofit_noloss(actual_cost,sale_amount): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if actual_cost == sale_amount:\n        print(\"No Profit and No Loss!\")\n    else:\n        print(\"Profit and Loss\")\n\n",
        "generated_testcode": "assert noprofit_noloss(100,50) == True\n",
        "test": "assert noprofit_noloss(1500,1200)==False\nassert noprofit_noloss(100,100)==True\nassert noprofit_noloss(2000,5000)==False",
        "canonical_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 638,
        "prompt": "Write a function to calculate wind chill index.\ndef wind_chill(v,t):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"Calculate the wind chill index\"\"\"\n    #Calculate the wind chill index\n    if v == 0:\n        return 0\n    else:\n        return -42.379 + (2.04901523*t) + (10.14333127*v**0.16) - (0.22475541*t**0.16)\n    \n#Calling wind_chill with the values -42.37, 10.14, 2.49, 1.73\nprint('The wind chill index is', wind_chill(0,0))\n\n",
        "generated_testcode": "assert wind_chill(10,20) == -17.22\n",
        "test": "assert wind_chill(120,35)==40\nassert wind_chill(40,70)==86\nassert wind_chill(10,100)==116",
        "canonical_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))"
    },
    {
        "number": 639,
        "prompt": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\ndef sample_nam(sample_names):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    l = []\n    for name in sample_names:\n        if name[0].lower() not in l:\n            l.append(name[0].lower())\n    return len(l)\nprint(sample_nam(['Gaurav', 'Bob', 'Bob', 'Ravi', 'Ravi', 'Saurav', 'Saurav']))\n\n",
        "generated_testcode": "assert sample_nam(['John', 'Bob', 'Mosh', 'Sarah']) == 6\n",
        "test": "assert sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])==16\nassert sample_nam([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==10\nassert sample_nam([\"abcd\", \"Python\", \"abba\", \"aba\"])==6",
        "canonical_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))"
    },
    {
        "number": 640,
        "prompt": "Write a function to remove the parenthesis area in a string.\ndef remove_parenthesis(items):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    \n    items = items.strip(\"()\")\n    return items\n\n",
        "generated_testcode": "assert remove_parenthesis(\"(1+2)\") == \"1+2\"\n",
        "test": "assert remove_parenthesis([\"python (chrome)\"])==(\"python\")\nassert remove_parenthesis([\"string(.abc)\"])==(\"string\")\nassert remove_parenthesis([\"alpha(num)\"])==(\"alpha\")",
        "canonical_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))"
    },
    {
        "number": 641,
        "prompt": "Write a function to find the nth nonagonal number.\ndef is_nonagonal(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  \n    # Base case \n    if (n == 1): \n        return 1; \n  \n    # If the answer lies in 1st diagonal \n    if (n % 2 == 0): \n        return 2 * is_nonagonal(n - 1); \n  \n    # If the answer lies in 2nd diagonal \n    else: \n        return (is_nonagonal(n - 1) + 1); \n  \n# Driver program \nn = 3; \nprint(is_nonagonal(n)); \n  \n# This code is contributed by shubhamsingh10\n",
        "generated_testcode": "assert is_nonagonal(1) == 1\n",
        "test": "assert is_nonagonal(10) == 325\nassert is_nonagonal(15) == 750\nassert is_nonagonal(18) == 1089",
        "canonical_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) "
    },
    {
        "number": 642,
        "prompt": "Write a function to remove similar rows from the given tuple matrix.\ndef remove_similar_row(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # create an empty array to store the results\n    result = []\n\n",
        "generated_testcode": "assert remove_similar_row(test_list) == ",
        "test": "assert remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]] ) == {((2, 2), (4, 6)), ((3, 2), (4, 5))}\nassert remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]] ) == {((4, 3), (5, 6)), ((3, 3), (5, 7))}\nassert remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]] ) =={((4, 4), (6, 8)), ((5, 4), (6, 7))}",
        "canonical_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) "
    },
    {
        "number": 643,
        "prompt": "Write a function that matches a word containing 'z', not at the start or end of the word.\ndef text_match_wordz_middle(text):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  middle_string = text[1:]\n  middle_string = middle_string[:-1]\n  if middle_string.find('z')!= -1:\n    return True\n  else:\n    return False\n\n",
        "generated_testcode": "assert text_match_wordz_middle('the quick zebra') == True\n",
        "test": "assert text_match_wordz_middle(\"pythonzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"xyzabc.\")==('Found a match!')\nassert text_match_wordz_middle(\"  lang  .\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 644,
        "prompt": "Write a python function to reverse an array upto a given position.\ndef reverse_Array_Upto_K(input, k): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(input) \n    \n    if k >= n: \n        return \n    \n    start = 0\n    end = n - 1\n    while start < end: \n        input[start], input[end] = input[end], input[start] \n        start += 1\n        end -= 1\n    \n    reverse_Array_Upto_K(input, k + 1) \n\n",
        "generated_testcode": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5], 3) == [5, 4, 3, 2, 1]\n",
        "test": "assert reverse_Array_Upto_K([1, 2, 3, 4, 5, 6],4) == [4, 3, 2, 1, 5, 6]\nassert reverse_Array_Upto_K([4, 5, 6, 7], 2) == [5, 4, 6, 7]\nassert reverse_Array_Upto_K([9, 8, 7, 6, 5],3) == [7, 8, 9, 6, 5]",
        "canonical_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) "
    },
    {
        "number": 645,
        "prompt": "Write a function to find the product of it\u2019s kth index in the given tuples.\ndef get_product(val) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\treturn val[k-1] * val[k-2] * val[k-3]\n\n",
        "generated_testcode": "assert get_product([(1, 2), (3, 4), (5, 6)], 2) == 24\n",
        "test": "assert find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2) == 665\nassert find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1) == 280\nassert find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0) == 210",
        "canonical_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) "
    },
    {
        "number": 646,
        "prompt": "Write a python function to count number of cubes of size k in a cube of size n.\ndef No_of_cubes(N,K):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tn=0\n\tfor i in range(N+1):\n\t\tfor j in range(i+1):\n\t\t\tfor k in range(j+1):\n\t\t\t\tif(k==0 or k==i or k==j):\n\t\t\t\t\tcontinue\n\t\t\t\tif((k*k)==(i*i)+(j*j)+(k*k)):\n\t\t\t\t\tn=n+1\n\treturn n\n\n",
        "generated_testcode": "assert No_of_cubes(3,2) == 6\n",
        "test": "assert No_of_cubes(2,1) == 8\nassert No_of_cubes(5,2) == 64\nassert No_of_cubes(1,1) == 1",
        "canonical_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No"
    },
    {
        "number": 647,
        "prompt": "Write a function to split a string at uppercase letters.\ndef split_upperstring(text):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    return text.split()\n\n",
        "generated_testcode": "assert split_upperstring(\"This is a test\") == [\"This\", \"is\", \"a\", \"test\"]\n",
        "test": "assert split_upperstring(\"PythonProgramLanguage\")==['Python','Program','Language']\nassert split_upperstring(\"PythonProgram\")==['Python','Program']\nassert split_upperstring(\"ProgrammingLanguage\")==['Programming','Language']",
        "canonical_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 648,
        "prompt": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.\ndef exchange_elements(lst):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(lst)-1, 1, -1):\n        if i % 2 == 0:\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n    return lst\n\n",
        "generated_testcode": "assert exchange_elements([1, 2, 3, 4, 5]) == [2, 3, 4, 1, 5]\n",
        "test": "assert exchange_elements([0,1,2,3,4,5])==[1, 0, 3, 2, 5, 4] \nassert exchange_elements([5,6,7,8,9,10])==[6,5,8,7,10,9] \nassert exchange_elements([25,35,45,55,75,95])==[35,25,55,45,95,75] ",
        "canonical_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))"
    },
    {
        "number": 649,
        "prompt": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.\ndef sum_Range_list(nums, m, n):                                                                                                                                                                                                \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(nums[m:n+1])\n\n",
        "generated_testcode": "assert sum_Range_list([1, 2, 3, 4, 5], 2, 4) == 9, \"Should be 9\"\n",
        "test": "assert sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12],8,10) == 29\nassert sum_Range_list([1,2,3,4,5],1,2) == 5\nassert sum_Range_list([1,0,1,2,5,6],4,5) == 11",
        "canonical_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   "
    },
    {
        "number": 650,
        "prompt": "Write a python function to check whether the given two arrays are equal or not.\ndef are_Equal(arr1,arr2,n,m):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(n):\n        for j in range(m):\n            if arr1[i]==arr2[j]:\n                return True\n    return False\n\n",
        "generated_testcode": "assert are_Equal([1,2,3,4], [1,2,3,4], 4, 4) == True\n",
        "test": "assert are_Equal([1,2,3],[3,2,1],3,3) == True\nassert are_Equal([1,1,1],[2,2,2],3,3) == False\nassert are_Equal([8,9],[4,5,6],2,3) == False",
        "canonical_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True"
    },
    {
        "number": 651,
        "prompt": "Write a function to check if one tuple is a subset of another tuple.\ndef check_subset(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if len(test_tup1) > len(test_tup2):\n        return False\n    if len(test_tup1) == len(test_tup2):\n        for i in range(0, len(test_tup2)):\n            if test_tup1[i]!= test_tup2[i]:\n                return False\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_subset((1, 2, 3), (1, 2, 3)) == True\n",
        "test": "assert check_subset((10, 4, 5, 6), (5, 10)) == True\nassert check_subset((1, 2, 3, 4), (5, 6)) == False\nassert check_subset((7, 8, 9, 10), (10, 8)) == True",
        "canonical_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) "
    },
    {
        "number": 652,
        "prompt": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.\ndef matrix_to_list(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    nested_list = []\n    for j in range(len(test_list)):\n        nested_list.append(test_list[j][i] for i in range(len(test_list[j])))\n    return nested_list\n\n",
        "generated_testcode": "assert matrix_to_list(test_list) == [[1, 2, 3],\n                                      [4, 5, 6],\n                                      [7, 8, 9]]\n\n",
        "test": "assert matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]]) == '[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]'\nassert matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]]) == '[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]'\nassert matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]]) == '[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]'",
        "canonical_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))"
    },
    {
        "number": 653,
        "prompt": "Write a function to group a sequence of key-value pairs into a dictionary of lists using collections module.\ndef grouping_dictionary(l):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    d = {}\n    for i in range(len(l)):\n        if l[i][0] not in d:\n            d[l[i][0]] = []\n        d[l[i][0]].append(l[i][1])\n    return d\n\n",
        "generated_testcode": "assert grouping_dictionary([('a', 1), ('b', 2), ('c', 3)]) == {'a': [1], 'b': [2], 'c': [3]}\n",
        "test": "assert grouping_dictionary([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])== ({'yellow': [1, 3], 'blue': [2, 4], 'red': [1]})\nassert grouping_dictionary([('yellow', 10), ('blue', 20), ('yellow', 30), ('blue', 40), ('red', 10)])== ({'yellow': [10, 30], 'blue': [20, 40], 'red': [10]})\nassert grouping_dictionary([('yellow', 15), ('blue', 25), ('yellow', 35), ('blue', 45), ('red', 15)])== ({'yellow': [15, 35], 'blue': [25, 45], 'red': [15]})",
        "canonical_solution": "from collections import defaultdict\r\ndef grouping_dictionary(l):\r\n    d = defaultdict(list)\r\n    for k, v in l:\r\n        d[k].append(v)\r\n    return d"
    },
    {
        "number": 654,
        "prompt": "Write a function to find the perimeter of a rectangle.\ndef rectangle_perimeter(l,b):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    perimeter=2*(l+b)\n    return perimeter\n\n",
        "generated_testcode": "assert rectangle_perimeter(2,3) == 6\n",
        "test": "assert rectangle_perimeter(10,20)==60\nassert rectangle_perimeter(10,5)==30\nassert rectangle_perimeter(4,2)==12",
        "canonical_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter"
    },
    {
        "number": 655,
        "prompt": "Write a python function to find the sum of fifth power of n natural numbers.\ndef fifth_Power_Sum(n) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tsum = 0\n\tfor i in range(1,n+1) :\n\t\tsum += i**5\n\treturn sum\n\n",
        "generated_testcode": "assert fifth_Power_Sum(5) == 25\n",
        "test": "assert fifth_Power_Sum(2) == 33\nassert fifth_Power_Sum(4) == 1300\nassert fifth_Power_Sum(3) == 276",
        "canonical_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm "
    },
    {
        "number": 656,
        "prompt": "Write a python function to find the minimum sum of absolute differences of two arrays.\ndef find_Min_Sum(a,b,n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code here\n    i = 0\n    j = 0\n    diff = 0\n    while i < n and j < n:\n        diff = abs(a[i] - b[j])\n        i = i + 1\n        j = j + 1\n    return diff\n\n",
        "generated_testcode": "assert find_Min_Sum([1,2,3,4], [1,2,3,4], 4) == 0\n",
        "test": "assert find_Min_Sum([3,2,1],[2,1,3],3) == 0\nassert find_Min_Sum([1,2,3],[4,5,6],3) == 9\nassert find_Min_Sum([4,1,8,7],[2,3,6,5],4) == 6",
        "canonical_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum"
    },
    {
        "number": 657,
        "prompt": "Write a python function to find the first digit in factorial of a given number.\ndef first_Digit(n) : \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "\tif n <= 0 : \n\t\treturn 0\n\tif n == 1 or n == 2 or n == 3 or n == 4 or n == 5 or n == 6 or n == 7 or n == 8 or n == 9: \n\t\treturn n\n\telse : \n\t\tcount = 1\n\t\tcount += first_Digit(n - 1) * (10 ** (count - 1))\n\t\treturn count\n\n",
        "generated_testcode": "assert first_Digit(5) == 5\n",
        "test": "assert first_Digit(5) == 1\nassert first_Digit(10) == 3\nassert first_Digit(7) == 5",
        "canonical_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) "
    },
    {
        "number": 658,
        "prompt": "Write a function to find the item with maximum occurrences in a given list.\ndef max_occurrences(list1):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    max = 0\n    a = list1[0]\n    for i in range(len(list1)):\n        if max < list1.count(a):\n            max = list1.count(a)\n            item = a\n    return item\n\n",
        "generated_testcode": "assert max_occurrences(['a', 'a', 'b', 'b', 'c', 'c', 'c']) == 'c'\n",
        "test": "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,4,6,9,1,2])==2\nassert max_occurrences([1, 3,5, 7,1, 3,13, 15, 17,5, 7,9,1, 11])==1\nassert max_occurrences([1, 2, 3,2, 4, 5,1, 1, 1])==1",
        "canonical_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    },
    {
        "number": 659,
        "prompt": "Write a python function to print duplicants from a list of integers.\ndef Repeat(x): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    l = [] \n    for i in range(len(x)): \n        count = 0\n        for j in range(len(x)): \n            if x[i] == x[j] and i!= j: \n                count = count + 1\n        l.append(count) \n    for i in range(len(l)): \n        if l[i] > 1: \n            print(x[i],end=\" \") \n\n",
        "generated_testcode": "assert Repeat(1) == 1\n",
        "test": "assert Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20]) == [20, 30, -20, 60]\nassert Repeat([-1, 1, -1, 8]) == [-1]\nassert Repeat([1, 2, 3, 1, 2,]) == [1, 2]",
        "canonical_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated "
    },
    {
        "number": 660,
        "prompt": "Write a python function to choose points from two ranges such that no point lies in both the ranges.\ndef find_Points(l1,r1,l2,r2): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    a = min(l1, l2) \n    b = min(r1, r2) \n    c = max(l1, l2) \n    d = max(r1, r2) \n  \n    if b < c or d < a: \n        print(\"No Points in common\") \n  \n    elif a <= b and c <= d: \n        print(\"All Points lie in range\") \n  \n    else: \n        print(\"No Points in common\") \n  \n  \nl1 = 2\nr1 = 4\nl2 = 5\nr2 = 7\nfind_Points(l1,r1,l2,r2) ",
        "generated_testcode": "assert find_Points(1,2,3,4) == (1,3), \"Test 1 failed\"\n",
        "test": "assert find_Points(5,10,1,5) == (1,10)\nassert find_Points(3,5,7,9) == (3,9)\nassert find_Points(1,5,2,8) == (1,8)",
        "canonical_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)"
    },
    {
        "number": 661,
        "prompt": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.\ndef max_sum_of_three_consecutive(arr, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    max_sum = -float('inf')\n    \n    # Kadane's algorithm \n    # This algorithm will return the maximum possible sum if we take a single element \n    # from the array in the following steps: \n    #   1) Initialize the starting variables as -infinity \n    #   2) Consider the current window of array from index 0 to the current index \n    #      of the array \n    #   3) Consider the current window of array from index 1 to the current index \n    #      of the array \n    #   4) Consider the current window of array from index 2 to the current index \n    #      of the array \n    #   5) If the current window of array is a sum of three elements, update max_sum \n    #      by adding that window to the result \n    #   6) Update the starting variables by adding the current value of the array \n    #      to the window variable \n    #   7) Iterate over the array starting from the next element \n    #      if you reach the end of the array, then the sum of the window must be \n    #      the maximum possible sum \n    for i in range(n): \n        max_sum = max(max_sum, (arr[i]+arr[i+1]+arr[i+2]) )\n    return max_sum \n\n",
        "generated_testcode": "assert max_sum_of_three_consecutive([1, 2, 3, 4, 5], 5) == 15\n",
        "test": "assert max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5) == 2101\nassert max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5) == 5013\nassert max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8) == 27",
        "canonical_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]"
    },
    {
        "number": 662,
        "prompt": "Write a function to sort a list in a dictionary.\ndef sorted_dict(dict1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    dict2 = {}\n    list1 = []\n    list2 = []\n    for i in range(0, len(dict1)):\n        for key, value in dict1.items():\n            if value not in list1:\n                list1.append(value)\n            else:\n                list2.append(value)\n    for i in range(0, len(list1)):\n        for key, value in dict1.items():\n            if list1[i] == value:\n                dict2[key] = value\n    for i in range(0, len(list2)):\n        for key, value in dict1.items():\n            if list2[i] == value:\n                dict2[key] = value\n    return dict2\n\n",
        "generated_testcode": "assert sorted_dict({'a': 1, 'b': 2, 'c': 3}) == {'a': 1, 'b': 2, 'c': 3}\n",
        "test": "assert sorted_dict({'n1': [2, 3, 1], 'n2': [5, 1, 2], 'n3': [3, 2, 4]})=={'n1': [1, 2, 3], 'n2': [1, 2, 5], 'n3': [2, 3, 4]}\nassert sorted_dict({'n1': [25,37,41], 'n2': [41,54,63], 'n3': [29,38,93]})=={'n1': [25, 37, 41], 'n2': [41, 54, 63], 'n3': [29, 38, 93]}\nassert sorted_dict({'n1': [58,44,56], 'n2': [91,34,58], 'n3': [100,200,300]})=={'n1': [44, 56, 58], 'n2': [34, 58, 91], 'n3': [100, 200, 300]}",
        "canonical_solution": "def sorted_dict(dict1):\r\n  sorted_dict = {x: sorted(y) for x, y in dict1.items()}\r\n  return sorted_dict"
    },
    {
        "number": 663,
        "prompt": "Write a function to find the largest possible value of k such that k modulo x is y.\ndef find_max_val(n, x, y): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    k = 0\n    while k * x < y: \n        k += 1\n    return k\n# Time: O(logn) + O(logn) + O(logn) = O(2logn) = O(n)\n# Space: O(1)\n\n",
        "generated_testcode": "assert find_max_val(5, 2, 3) == 2\n",
        "test": "assert find_max_val(15, 10, 5) == 15\nassert find_max_val(187, 10, 5) == 185\nassert find_max_val(16, 11, 1) == 12",
        "canonical_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) "
    },
    {
        "number": 664,
        "prompt": "Write a python function to find the average of even numbers till a given even number.\ndef average_Even(n) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    sum = 0\n    count = 0\n    while sum <= n : \n        sum = sum + (2 * count) \n        count += 1\n    return (sum / count) \n\n",
        "generated_testcode": "assert(average_Even(5) == 2.0)\n",
        "test": "assert average_Even(2) == 2\nassert average_Even(4) == 3\nassert average_Even(100) == 51",
        "canonical_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count "
    },
    {
        "number": 665,
        "prompt": "Write a python function to shift first element to the end of given list.\ndef move_last(num_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    num_list[-1], num_list[0] = num_list[0], num_list[-1]\n    return num_list\n\n",
        "generated_testcode": "assert move_last([1,2,3,4,5]) == [5,1,2,3,4]\n",
        "test": "assert move_last([1,2,3,4]) == [2,3,4,1]\nassert move_last([2,3,4,1,5,0]) == [3,4,1,5,0,2]\nassert move_last([5,4,3,2,1]) == [4,3,2,1,5]",
        "canonical_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)"
    },
    {
        "number": 666,
        "prompt": "Write a function to count occurrence of a character in a string.\ndef count_char(string,char):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in string:\n        if i == char:\n            count = count+1\n    return count\n\n",
        "generated_testcode": "assert count_char(\"hello world\", \"h\") == 1\n",
        "test": "assert count_char(\"Python\",'o')==1\nassert count_char(\"little\",'t')==2\nassert count_char(\"assert\",'s')==2",
        "canonical_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count"
    },
    {
        "number": 667,
        "prompt": "Write a python function to count number of vowels in the string.\ndef Check_Vow(string, vowels): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0 \n    for i in range(0, len(string)): \n        if (string[i] in vowels): \n            count = count + 1\n    return count \n  \n# Driver program to test above function \nstring = \"sivakumar\"\nvowels = \"aeiou\"\nprint(Check_Vow(string, vowels)) \n",
        "generated_testcode": "assert Check_Vow(\"Hello World\", \"aeiou\") == True, \"Should be True\"\n",
        "test": "assert Check_Vow('corner','AaEeIiOoUu') == 2\nassert Check_Vow('valid','AaEeIiOoUu') == 2\nassert Check_Vow('true','AaEeIiOoUu') ==2",
        "canonical_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n"
    },
    {
        "number": 668,
        "prompt": "Write a python function to replace multiple occurence of character by single.\ndef replace(string, char): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return char.join(string.split(char)) \n  \n# Test program \nstring = 'Geeksforgeeks'\nchar = 'G'\nresult = replace(string, char) \nprint (\"The resultant string is : \", result) \n\n",
        "generated_testcode": "assert replace(\"abcabc\", \"a\") == \"abcabc\"\n",
        "test": "assert replace('peep','e') == 'pep'\nassert replace('Greek','e') == 'Grek'\nassert replace('Moon','o') == 'Mon'",
        "canonical_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string "
    },
    {
        "number": 669,
        "prompt": "Write a function to check whether the given ip address is valid or not using regex.\ndef check_IP(Ip): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "\tIP = Ip.split(\".\") \n\tif (len(IP) == 4) and (1 <= int(IP[0]) <= 223) and (int(IP[0])!= 127) and (int(IP[0])!= 169 or int(IP[1])!= 254) and (0 <= int(IP[1]) <= 255 and 0 <= int(IP[2]) <= 255 and 0 <= int(IP[3]) <= 255): \n\t\treturn True\n\treturn False\n\n",
        "generated_testcode": "assert check_IP(\"192.168.1.1\") == True\n",
        "test": "assert check_IP(\"192.168.0.1\") == 'Valid IP address'\nassert check_IP(\"110.234.52.124\") == 'Valid IP address'\nassert check_IP(\"366.1.2.2\") == 'Invalid IP address'",
        "canonical_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") "
    },
    {
        "number": 670,
        "prompt": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.\ndef decreasing_trend(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i+1] < nums[i]:\n            return False\n    return True\n\n",
        "generated_testcode": "assert decreasing_trend([1, 2, 3, 4, 5]) == True\n",
        "test": "assert decreasing_trend([-4,-3,-2,-1]) == True\nassert decreasing_trend([1,2,3]) == True\nassert decreasing_trend([3,2,1]) == False",
        "canonical_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 671,
        "prompt": "Write a python function to set the right most unset bit.\ndef get_Pos_Of_Right_most_Set_Bit(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    # rightmost set bit is 1. \n    # If the rightmost set bit is 0, \n    # then the number is 0. \n    count = 0\n    if n == 0: \n        return 0\n    while n > 0: \n        if n & 1: \n            return count \n        count += 1\n        n = n >> 1\n\n",
        "generated_testcode": "assert get_Pos_Of_Right_most_Set_Bit(0) == 0\n",
        "test": "assert set_Right_most_Unset_Bit(21) == 23\nassert set_Right_most_Unset_Bit(11) == 15\nassert set_Right_most_Unset_Bit(15) == 15",
        "canonical_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) "
    },
    {
        "number": 672,
        "prompt": "Write a function to find maximum of three numbers.\ndef max_of_three(num1,num2,num3): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if(num1 >= num2) and (num1 >= num3): \n        return num1 \n    elif(num2 >= num1) and (num2 >= num3): \n        return num2 \n    else: \n        return num3 \n        \n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\n",
        "generated_testcode": "assert max_of_three(1,2,3) == 3\n",
        "test": "assert max_of_three(10,20,30)==30\nassert max_of_three(55,47,39)==55\nassert max_of_three(10,49,30)==49",
        "canonical_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    },
    {
        "number": 673,
        "prompt": "Write a python function to convert a list of multiple integers into a single integer.\ndef convert(list): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(list) \n  \nlist = [1, 2, 3] \nprint(convert(list)) \n\n",
        "generated_testcode": "assert convert([1, 2, 3]) == 6\n",
        "test": "assert convert([1,2,3]) == 123\nassert convert([4,5,6]) == 456\nassert convert([7,8,9]) == 789",
        "canonical_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) "
    },
    {
        "number": 674,
        "prompt": "Write a function to remove duplicate words from a given string using collections module.\ndef remove_duplicate(string):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    from collections import defaultdict\n    s = defaultdict(int)\n    for i in string.split(\" \"):\n        s[i] += 1\n    return \" \".join([i for i in s.keys() if s[i] == 1])\n\n",
        "generated_testcode": "assert remove_duplicate(\"hello world\") == \"hello world\"\n",
        "test": "assert remove_duplicate(\"Python Exercises Practice Solution Exercises\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Python\")==(\"Python Exercises Practice Solution\")\nassert remove_duplicate(\"Python Exercises Practice Solution Practice\")==(\"Python Exercises Practice Solution\")",
        "canonical_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result"
    },
    {
        "number": 675,
        "prompt": "Write a function to add two integers. however, if the sum is between the given range it will return 20.\ndef sum_nums(x, y,m,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if x + y <= m and x + y >= n:\n        return 20\n    return x + y\nprint(sum_nums(1, 2, 10,20))",
        "generated_testcode": "assert sum_nums(1, 2, 3, 4) == 10\n",
        "test": "assert sum_nums(2,10,11,20)==20\nassert sum_nums(15,17,1,10)==32\nassert sum_nums(10,15,5,30)==20",
        "canonical_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums"
    },
    {
        "number": 676,
        "prompt": "Write a function to remove everything except alphanumeric characters from the given string by using regex.\ndef remove_extra_char(text1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # pattern = re.compile('[^a-zA-Z0-9]')\n    pattern = re.compile('[^a-zA-Z0-9\\s]')\n    # pattern = re.compile('[^a-zA-Z0-9\\s]')\n    # pattern = re.compile('[^\\w]')\n    pattern = re.compile('[^\\s]')\n    # pattern = re.compile('[^\\s\\w]')\n    # pattern = re.compile('[^\\w\\s]')\n    # pattern = re.compile('[^\\s\\w]')\n    # pattern = re.compile('[^\\s\\w]')\n    # pattern = re.compile('[^\\s\\w\\d]')\n    # pattern = re.compile('[^\\s\\w\\d]')\n    # pattern = re.compile('[^\\s\\w\\d\\s]')\n    # pattern = re.compile('[^\\s\\w\\d\\s]')\n    # pattern = re.compile('[^\\s\\w\\d\\s]')\n    # pattern = re.compile('[^\\s\\w\\d\\s]')\n    # pattern = re.compile('[^\\s\\w\\d\\s]')\n    # pattern = re.compile('[^\\s\\w\\d\\s]')\n    # pattern",
        "generated_testcode": "assert remove_extra_char(\"abcd123\") == \"abc123\"\n",
        "test": "assert remove_extra_char('**//Google Android// - 12. ') == 'GoogleAndroid12'\nassert remove_extra_char('****//Google Flutter//*** - 36. ') == 'GoogleFlutter36'\nassert remove_extra_char('**//Google Firebase// - 478. ') == 'GoogleFirebase478'",
        "canonical_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))"
    },
    {
        "number": 677,
        "prompt": "Write a function to check if the triangle is valid or not.\ndef validity_triangle(a,b,c):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if (a <= 0 or b <= 0 or c <= 0):\n        return False\n    elif (a + b > c) and (a + c > b) and (b + c > a):\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert validity_triangle(1,1,1) == True\n",
        "test": "assert validity_triangle(60,50,90)==False\nassert validity_triangle(45,75,60)==True\nassert validity_triangle(30,50,100)==True",
        "canonical_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False"
    },
    {
        "number": 678,
        "prompt": "Write a python function to remove spaces from a given string.\ndef remove_spaces(str1):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    str1 = str1.strip()\n    return str1\n\n",
        "generated_testcode": "assert remove_spaces(\"  hello world  \") == \"hello world\", \"Should return hello world\"\n",
        "test": "assert remove_spaces(\"a b c\") == \"abc\"\nassert remove_spaces(\"1 2 3\") == \"123\"\nassert remove_spaces(\" b c\") == \"bc\"",
        "canonical_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1"
    },
    {
        "number": 679,
        "prompt": "Write a function to access dictionary key\u2019s element by index.\ndef access_key(ditionary,key):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return ditionary[key]\n\n",
        "generated_testcode": "assert access_key({'a': 1, 'b': 2, 'c': 3}, 'a') == 1\n",
        "test": "assert access_key({'physics': 80, 'math': 90, 'chemistry': 86},0)== 'physics'\nassert access_key({'python':10, 'java': 20, 'C++':30},2)== 'C++'\nassert access_key({'program':15,'computer':45},1)== 'computer'",
        "canonical_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]"
    },
    {
        "number": 680,
        "prompt": "Write a python function to check whether a sequence of numbers has an increasing trend or not.\ndef increasing_trend(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(nums)-1):\n        if nums[i+1] > nums[i]:\n            return True\n    return False\n\n",
        "generated_testcode": "assert increasing_trend([1, 2, 3, 4, 5]) == True\n",
        "test": "assert increasing_trend([1,2,3,4]) == True\nassert increasing_trend([4,3,2,1]) == False\nassert increasing_trend([0,1,4,9]) == True",
        "canonical_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 681,
        "prompt": "Write a python function to find the smallest prime divisor of a number.\ndef smallest_Divisor(n): \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    i = 2\n    while(i*i <= n): \n        if (n % i == 0): \n            return i  \n        i += 1\n    return n  \n  \n# { \n#  Driver Code Starts\n#Initial Template for Python 3\nimport math\n\n",
        "generated_testcode": "assert smallest_Divisor(12) == 2\n",
        "test": "assert smallest_Divisor(10) == 2\nassert smallest_Divisor(25) == 5\nassert smallest_Divisor(31) == 31",
        "canonical_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; "
    },
    {
        "number": 682,
        "prompt": "Write a function to multiply two lists using map and lambda function.\ndef mul_list(nums1,nums2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return map(lambda num1,num2: num1*num2,nums1,nums2)\nprint(mul_list([1,2,3],[4,5,6]))\n\n",
        "generated_testcode": "assert mul_list([1,2,3,4], [5,6,7,8]) == [5,12,21,40]\n",
        "test": "assert mul_list([1, 2, 3],[4,5,6])==[4,10,18]\nassert mul_list([1,2],[3,4])==[3,8]\nassert mul_list([90,120],[50,70])==[4500,8400]",
        "canonical_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 683,
        "prompt": "Write a python function to check whether the given number can be represented by sum of two squares or not.\ndef sum_Square(n) : \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "\treturn (int(n**0.5))**2\n\n",
        "generated_testcode": "assert sum_Square(1) == True\n",
        "test": "assert sum_Square(25) == True\nassert sum_Square(24) == False\nassert sum_Square(17) == True",
        "canonical_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False"
    },
    {
        "number": 684,
        "prompt": "Write a python function to count occurences of a character in a repeated string.\ndef count_Char(str,x): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 0\n    for i in range(len(str)):\n        if str[i] == x:\n            result = result+1\n    return result\n\n",
        "generated_testcode": "assert count_Char(\"hello\", \"h\") == 1\n",
        "test": "assert count_Char(\"abcac\",'a') == 4\nassert count_Char(\"abca\",'c') == 2\nassert count_Char(\"aba\",'a') == 7",
        "canonical_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  "
    },
    {
        "number": 685,
        "prompt": "Write a python function to find sum of prime numbers between 1 to n.\ndef sum_Of_Primes(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    s = 0\n    for i in range(1,n+1): \n        if (isPrime(i)): \n            s += i\n    return s \n    \n# Python program to find prime numbers in a range \n# Function to find prime numbers in a range \ndef isPrime(n): \n    # Corner cases \n    if (n <= 1): \n        return False\n    if (n <= 3): \n        return True\n  \n    # This is checked so that we can skip  \n    # middle five numbers in below loop \n    if (n % 2 == 0 or n % 3 == 0): \n        return False\n  \n    i = 5\n    while(i * i <= n): \n        if (n % i == 0 or n % (i + 2) == 0): \n            return False\n        i = i + 6\n  \n    return True\n  \n# Driver Program \ndef main(): \n    n = 5\n    print(\"Sum of prime numbers between\", 1, \"to\", n, \"is\", sum_Of_Primes(n)) \n  \n# This call to main() will run the \n# program when this module is executed \nif __name__ == \"__main__\": \n    main()",
        "generated_testcode": "assert sum_Of_Primes(10) == 23\n",
        "test": "assert sum_Of_Primes(10) == 17\nassert sum_Of_Primes(20) == 77\nassert sum_Of_Primes(5) == 10",
        "canonical_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum"
    },
    {
        "number": 686,
        "prompt": "Write a function to find the frequency of each element in the given list.\ndef freq_element(test_tup):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    #initialise empty dictionary\n    freq_element_dict = {}\n    #Loop through each element in the list\n    for element in test_tup:\n        #if element already exists in the dictionary, increment frequency\n        if element in freq_element_dict:\n            freq_element_dict[element] += 1\n        #else, add key and value of 1\n        else:\n            freq_element_dict[element] = 1\n    return freq_element_dict\n\n",
        "generated_testcode": "assert freq_element(('a', 'b', 'c', 'a', 'b', 'c')) == {'a': 3, 'b': 2, 'c': 2}\n\n",
        "test": "assert freq_element((4, 5, 4, 5, 6, 6, 5, 5, 4) ) == '{4: 3, 5: 4, 6: 2}'\nassert freq_element((7, 8, 8, 9, 4, 7, 6, 5, 4) ) == '{7: 2, 8: 2, 9: 1, 4: 2, 6: 1, 5: 1}'\nassert freq_element((1, 4, 3, 1, 4, 5, 2, 6, 2, 7) ) == '{1: 2, 4: 2, 3: 1, 5: 1, 2: 2, 6: 1, 7: 1}'",
        "canonical_solution": "from collections import defaultdict \r\ndef freq_element(test_tup):\r\n  res = defaultdict(int)\r\n  for ele in test_tup:\r\n    res[ele] += 1\r\n  return (str(dict(res))) "
    },
    {
        "number": 687,
        "prompt": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.\ndef recur_gcd(a, b):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if b == 0:\n        return a\n    else:\n        return recur_gcd(b, a % b)\n\n",
        "generated_testcode": "assert recur_gcd(2, 6) == 2\n",
        "test": "assert recur_gcd(12,14) == 2\nassert recur_gcd(13,17) == 1\nassert recur_gcd(9, 3) == 3",
        "canonical_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)"
    },
    {
        "number": 688,
        "prompt": "Write a function to get the length of a complex number.\ndef len_complex(a,b):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # Complex numbers can be written as a.real + i*a.imaginary\n    return math.sqrt(a**2 + b**2)\n\n",
        "generated_testcode": "assert len_complex(1,2) == 3\n",
        "test": "assert len_complex(3,4)==5.0\nassert len_complex(9,10)==13.45362404707371\nassert len_complex(7,9)==11.40175425099138",
        "canonical_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length"
    },
    {
        "number": 689,
        "prompt": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block\ndef min_jumps(arr, n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if n == 0 or arr[0] == 0:\n        return -1\n    step = 0\n    max_step = 0\n    for i in range(n):\n        if arr[i] > max_step:\n            max_step = arr[i]\n            step = 1\n        elif arr[i] < max_step:\n            step += 1\n    return step\n\n",
        "generated_testcode": "assert min_jumps([3, 4, 2, 1, 2], 5) == 3\n",
        "test": "assert min_jumps([1, 3, 6, 1, 0, 9], 6) == 3\nassert min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11) == 3\nassert min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11) == 10",
        "canonical_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]"
    },
    {
        "number": 690,
        "prompt": "Write a function to multiply consecutive numbers of a given list.\ndef mul_consecutive_nums(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    result = 1\n    for i in nums:\n        result = result * i\n    return result\n\n",
        "generated_testcode": "assert mul_consecutive_nums([1, 2, 3, 4, 5]) == 120\n",
        "test": "assert mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[1, 3, 12, 16, 20, 30, 42]\nassert mul_consecutive_nums([4, 5, 8, 9, 6, 10])==[20, 40, 72, 54, 60]\nassert mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 6, 12, 20, 30, 42, 56, 72, 90]",
        "canonical_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result"
    },
    {
        "number": 691,
        "prompt": "Write a function to group the 1st elements on the basis of 2nd elements in the given tuple list.\ndef group_element(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in test_list:\n        print(i[0], i[1])\n\n",
        "generated_testcode": "assert group_element(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == (('a', 'b', 'c', 'd', 'e', 'f'",
        "test": "assert group_element([(6, 5), (2, 7), (2, 5), (8, 7), (9, 8), (3, 7)]) == {5: [6, 2], 7: [2, 8, 3], 8: [9]}\nassert group_element([(7, 6), (3, 8), (3, 6), (9, 8), (10, 9), (4, 8)]) == {6: [7, 3], 8: [3, 9, 4], 9: [10]}\nassert group_element([(8, 7), (4, 9), (4, 7), (10, 9), (11, 10), (5, 9)]) == {7: [8, 4], 9: [4, 10, 5], 10: [11]}",
        "canonical_solution": "from itertools import groupby \r\ndef group_element(test_list):\r\n  res = dict()\r\n  for key, val in groupby(sorted(test_list, key = lambda ele: ele[1]), key = lambda ele: ele[1]):\r\n    res[key] = [ele[0] for ele in val] \r\n  return (res)\r\n"
    },
    {
        "number": 692,
        "prompt": "Write a python function to find the last two digits in factorial of a given number.\ndef last_Two_Digits(N): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if N <= 9: \n        return N \n    else: \n        return (N // 10) + (N % 10) \n  \n#{ \n#Driver Code Starts.\n\n",
        "generated_testcode": "assert last_Two_Digits(5) == 5\n",
        "test": "assert last_Two_Digits(7) == 40\nassert last_Two_Digits(5) == 20\nassert last_Two_Digits(2) == 2",
        "canonical_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) "
    },
    {
        "number": 693,
        "prompt": "Write a function to remove multiple spaces in a string by using regex.\ndef remove_multiple_spaces(text1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    p = re.compile(r'\\s+')\n    return p.sub(' ', text1)\n\n",
        "generated_testcode": "assert remove_multiple_spaces(\"  hello world  \") == \"hello world\", \"Should return hello world\"\n",
        "test": "assert remove_multiple_spaces('Google      Assistant') == 'Google Assistant'\nassert remove_multiple_spaces('Quad      Core') == 'Quad Core'\nassert remove_multiple_spaces('ChromeCast      Built-in') == 'ChromeCast Built-in'",
        "canonical_solution": "import re\r\ndef remove_multiple_spaces(text1):\r\n  return (re.sub(' +',' ',text1))"
    },
    {
        "number": 694,
        "prompt": "Write a function to extract unique values from the given dictionary values.\ndef extract_unique(test_dict):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    result = set()\n    for value in test_dict:\n        result.add(value)\n    return result\n\n",
        "generated_testcode": "assert extract_unique({1:1, 2:1, 3:1, 4:1, 5:1}) == {1, 2, 3, 4, 5}\n",
        "test": "assert extract_unique({'msm' : [5, 6, 7, 8],'is' : [10, 11, 7, 5],'best' : [6, 12, 10, 8],'for' : [1, 2, 5]} ) == [1, 2, 5, 6, 7, 8, 10, 11, 12]\nassert extract_unique({'Built' : [7, 1, 9, 4],'for' : [11, 21, 36, 14, 9],'ISP' : [4, 1, 21, 39, 47],'TV' : [1, 32, 38]} ) == [1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]\nassert extract_unique({'F' : [11, 13, 14, 17],'A' : [12, 11, 15, 18],'N' : [19, 21, 15, 36],'G' : [37, 36, 35]}) == [11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]",
        "canonical_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res"
    },
    {
        "number": 695,
        "prompt": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.\ndef check_greater(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return True\n    return False\n\n",
        "generated_testcode": "assert check_greater((1, 2, 3), (2, 3, 4)) == True\n",
        "test": "assert check_greater((10, 4, 5), (13, 5, 18)) == True\nassert check_greater((1, 2, 3), (2, 1, 4)) == False\nassert check_greater((4, 5, 6), (5, 6, 7)) == True",
        "canonical_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 696,
        "prompt": "Write a function to zip two given lists of lists.\ndef zip_list(list1,list2):  \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    result =[]  \n    for i,j in zip(list1,list2):  \n        result.append([i,j])  \n    return result  \n\n",
        "generated_testcode": "assert zip_list([1,2,3],[4,5,6]) == [[1,4],[2,5],[3,6]]\n",
        "test": "assert zip_list([[1, 3], [5, 7], [9, 11]] ,[[2, 4], [6, 8], [10, 12, 14]] )==[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]\nassert zip_list([[1, 2], [3, 4], [5, 6]] ,[[7, 8], [9, 10], [11, 12]] )==[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]\nassert zip_list([['a','b'],['c','d']] , [['e','f'],['g','h']] )==[['a','b','e','f'],['c','d','g','h']]",
        "canonical_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result"
    },
    {
        "number": 697,
        "prompt": "Write a function to find number of even elements in the given list using lambda function.\ndef count_even(array_nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum([num % 2 == 0 for num in array_nums])\n\n",
        "generated_testcode": "assert count_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10, \"Should be 10\"\n",
        "test": "assert count_even([1, 2, 3, 5, 7, 8, 9, 10])==3\nassert count_even([10,15,14,13,-18,12,-20])==5\nassert count_even([1, 2, 4, 8, 9])==3",
        "canonical_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even"
    },
    {
        "number": 698,
        "prompt": "Write a function to sort dictionary items by tuple product of keys for the given dictionary with tuple keys.\ndef sort_dict_item(test_dict):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(test_dict.items(), key=lambda item: item[0]*item[1])\n\n",
        "generated_testcode": "assert sort_dict_item({'a': 1, 'b': 2, 'c': 3}) == {'c': 3, 'a': 1, 'b': 2}\n",
        "test": "assert sort_dict_item({(5, 6) : 3, (2, 3) : 9, (8, 4): 10, (6, 4): 12} ) == {(2, 3): 9, (6, 4): 12, (5, 6): 3, (8, 4): 10}\nassert sort_dict_item({(6, 7) : 4, (3, 4) : 10, (9, 5): 11, (7, 5): 13} ) == {(3, 4): 10, (7, 5): 13, (6, 7): 4, (9, 5): 11}\nassert sort_dict_item({(7, 8) : 5, (4, 5) : 11, (10, 6): 12, (8, 6): 14} ) == {(4, 5): 11, (8, 6): 14, (7, 8): 5, (10, 6): 12}",
        "canonical_solution": "def sort_dict_item(test_dict):\r\n  res = {key: test_dict[key] for key in sorted(test_dict.keys(), key = lambda ele: ele[1] * ele[0])}\r\n  return  (res) \r\n"
    },
    {
        "number": 699,
        "prompt": "Write a python function to find the minimum number of swaps required to convert one binary string to another.\ndef min_Swaps(str1,str2) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tcount = 0\n\tif len(str1)!= len(str2) :\n\t\tprint(\"Invalid Input\")\n\t\treturn\n\telse :\n\t\tfor i in range(len(str1)) :\n\t\t\tif str1[i]!= str2[i] :\n\t\t\t\tcount += 1\n\t\t\t\tx = str1[i]\n\t\t\t\tstr1 = str1.replace(x,'',1)\n\t\t\t\tstr2 = str2.replace(x,'',1)\n\t\tprint(count)\n\n",
        "generated_testcode": "assert min_Swaps('01010101','01010101') == 0\n",
        "test": "assert min_Swaps(\"1101\",\"1110\") == 1\nassert min_Swaps(\"1111\",\"0100\") == \"Not Possible\"\nassert min_Swaps(\"1110000\",\"0001101\") == 3",
        "canonical_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") "
    },
    {
        "number": 700,
        "prompt": "Write a function to count the number of elements in a list which are within a specific range.\ndef count_range_in_list(li, min, max):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    c = 0\n    for i in range(len(li)):\n        if li[i] > min and li[i] < max:\n            c += 1\n    return c\n\n",
        "generated_testcode": "assert count_range_in_list([1, 2, 3, 4, 5], 1, 5) == 4\n",
        "test": "assert count_range_in_list([10,20,30,40,40,40,70,80,99],40,100)==6\nassert count_range_in_list(['a','b','c','d','e','f'],'a','e')==5\nassert count_range_in_list([7,8,9,15,17,19,45],15,20)==3",
        "canonical_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr"
    },
    {
        "number": 701,
        "prompt": "Write a function to find the equilibrium index of the given array.\ndef equilibrium_index(arr):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    left = 0\n    right = len(arr) - 1\n\n",
        "generated_testcode": "assert equilibrium_index([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 5\n",
        "test": "assert equilibrium_index([1, 2, 3, 4, 1, 2, 3]) == 3\nassert equilibrium_index([-7, 1, 5, 2, -4, 3, 0]) == 3\nassert equilibrium_index([1, 2, 3]) == -1",
        "canonical_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1"
    },
    {
        "number": 702,
        "prompt": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.\ndef find_ind(key, i, n, \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "             arr, arr_ind,\n             remove, remove_ind):\n    while True:\n        # print(i)\n        if i == n:\n            break\n        if arr[i] == key:\n            remove.append(remove_ind[arr_ind[i]])\n            remove_ind.pop(arr_ind[i])\n            arr_ind.pop(i)\n            remove_ind.append(i)\n            arr_ind.append(i)\n            i -= 1\n            if i == 0:\n                break\n        else:\n            i += 1\n    return remove\n\n",
        "generated_testcode": "assert find_ind(arr, 0, len(arr), 3) == 1\n",
        "test": "assert removals([1, 3, 4, 9, 10,11, 12, 17, 20], 9, 4) == 5\nassert removals([1, 5, 6, 2, 8], 5, 2) == 3\nassert removals([1, 2, 3 ,4, 5, 6], 6, 3) == 2",
        "canonical_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans"
    },
    {
        "number": 703,
        "prompt": "Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if x in d:\n        print(\"Key is present in the Dictionary\")\n    else:\n        print(\"Key is not present in the Dictionary\")\n        \n    \n# Write a function to check whether the given key is present in the dictionary or not.\ndef is_key_present(d,x):\n    return x in d\n\n",
        "generated_testcode": "assert is_key_present({1:2,3:4},1) == True\n",
        "test": "assert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},5)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},6)==True\nassert is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60},10)==False",
        "canonical_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False"
    },
    {
        "number": 704,
        "prompt": "Write a function to calculate the harmonic sum of n-1.\ndef harmonic_sum(n):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1,n+1):\n        sum += 1/i\n    return sum\nprint(harmonic_sum(3))\n# Output: 2.5\n\n",
        "generated_testcode": "assert harmonic_sum(1) == 1\n",
        "test": "assert harmonic_sum(10)==2.9289682539682538\nassert harmonic_sum(4)==2.083333333333333\nassert harmonic_sum(7)==2.5928571428571425 ",
        "canonical_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    },
    {
        "number": 705,
        "prompt": "Write a function to sort a list of lists by length and value.\ndef sort_sublists(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    list1.sort(key=len)\n    list1.sort(key=lambda x: x[1])\n    return list1\n# Solution\n\n",
        "generated_testcode": "assert sort_sublists(list1) == [[1, 2], [3, 4], [5, 6], [7, 8]]\n\n",
        "test": "assert sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])==[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]\nassert sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])==[[1], [7], [2, 3], [10, 11], [4, 5, 6]]\nassert sort_sublists([[\"python\"],[\"java\",\"C\",\"C++\"],[\"DBMS\"],[\"SQL\",\"HTML\"]])==[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]",
        "canonical_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1"
    },
    {
        "number": 706,
        "prompt": "Write a function to find whether an array is subset of another array.\ndef is_subset(arr1, m, arr2, n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(n): \n        if arr1[i] not in arr2: \n            return False\n    return True\n\n",
        "generated_testcode": "assert is_subset([1, 2, 3], 3, [1, 2, 3], 3) == True\n",
        "test": "assert is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4) == True\nassert is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3) == True\nassert is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3) == False",
        "canonical_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t"
    },
    {
        "number": 707,
        "prompt": "Write a python function to count the total set bits from 1 to n.\ndef count_Set_Bits(n) :  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    c = 0\n    while(n): \n        c += n & 1\n        n >>= 1\n    return c \n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\n",
        "generated_testcode": "assert count_Set_Bits(1) == 0\n",
        "test": "assert count_Set_Bits(16) == 33\nassert count_Set_Bits(2) == 2\nassert count_Set_Bits(14) == 28",
        "canonical_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  "
    },
    {
        "number": 708,
        "prompt": "Write a python function to convert a string to a list.\ndef Convert(string): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    list1 = list(string.split(\" \")) \n    return list1 \n\n",
        "generated_testcode": "assert Convert(\"Hello\") == [\"H\", \"e\", \"l\", \"l\", \"o\"]\n",
        "test": "assert Convert('python program') == ['python','program']\nassert Convert('Data Analysis') ==['Data','Analysis']\nassert Convert('Hadoop Training') == ['Hadoop','Training']",
        "canonical_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li "
    },
    {
        "number": 709,
        "prompt": "Write a function to count unique keys for each value present in the tuple.\ndef get_unique(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    unique_keys = {}\n    for item in test_list:\n        unique_keys[item] = item\n    return unique_keys\n\n",
        "generated_testcode": "assert get_unique(('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z')) == 26\n",
        "test": "assert get_unique([(3, 4), (1, 2), (2, 4), (8, 2), (7, 2), (8, 1), (9, 1), (8, 4), (10, 4)] ) == '{4: 4, 2: 3, 1: 2}'\nassert get_unique([(4, 5), (2, 3), (3, 5), (9, 3), (8, 3), (9, 2), (10, 2), (9, 5), (11, 5)] ) == '{5: 4, 3: 3, 2: 2}'\nassert get_unique([(6, 5), (3, 4), (2, 6), (11, 1), (8, 22), (8, 11), (4, 3), (14, 3), (11, 6)] ) == '{5: 1, 4: 1, 6: 2, 1: 1, 22: 1, 11: 1, 3: 2}'",
        "canonical_solution": "from collections import defaultdict \r\ndef get_unique(test_list):\r\n  res = defaultdict(list)\r\n  for sub in test_list:\r\n    res[sub[1]].append(sub[0])\r\n  res = dict(res)\r\n  res_dict = dict()\r\n  for key in res:\r\n    res_dict[key] = len(list(set(res[key])))\r\n  return (str(res_dict)) "
    },
    {
        "number": 710,
        "prompt": "Write a function to access the initial and last data of the given tuple record.\ndef front_and_rear(test_tup):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return (test_tup[0], test_tup[-1])\n\n",
        "generated_testcode": "assert front_and_rear((1, 2, 3, 4, 5)) == (1, 5), \"Should return (1, 5)\"\n",
        "test": "assert front_and_rear((10, 4, 5, 6, 7)) == (10, 7)\nassert front_and_rear((1, 2, 3, 4, 5)) == (1, 5)\nassert front_and_rear((6, 7, 8, 9, 10)) == (6, 10)",
        "canonical_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) "
    },
    {
        "number": 711,
        "prompt": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.\ndef product_Equal(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    even_prod = 1; \n    odd_prod = 1; \n  \n    # Iterate the digits of number \n    for i in range(len(str(n))): \n        if (i % 2 == 0): \n            even_prod *= int(str(n)[i]) \n  \n        else: \n            odd_prod *= int(str(n)[i]) \n  \n    if (even_prod == odd_prod): \n        return True\n    else: \n        return False\nn = int(input())\nif product_Equal(n): \n    print(\"true\") \nelse: \n    print(\"false\")",
        "generated_testcode": "assert product_Equal(1234) == True, \"Product of digits at even and odd places is not equal\"\n",
        "test": "assert product_Equal(2841) == True\nassert product_Equal(1234) == False\nassert product_Equal(1212) == False",
        "canonical_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False"
    },
    {
        "number": 712,
        "prompt": "Write a function to remove duplicates from a list of lists.\ndef remove_duplicate(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    list1 = sorted(list1)\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i] == list1[j]:\n                list1.pop(j)\n    return list1\nprint(remove_duplicate(list1))",
        "generated_testcode": "assert remove_duplicate([[1, 2], [1, 2], [1, 2]]) == [[1, 2], [1, 2]]\n",
        "test": "assert remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[[10, 20], [30, 56, 25], [33], [40]] \nassert remove_duplicate([\"a\", \"b\", \"a\", \"c\", \"c\"] )==[\"a\", \"b\", \"c\"]\nassert remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1] )==[1, 3, 5, 6]",
        "canonical_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate"
    },
    {
        "number": 713,
        "prompt": "Write a function to check if the given tuple contains all valid values or not.\ndef check_valid(test_tup):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for element in test_tup:\n        if element <= 0:\n            return False\n    return True\n\n",
        "generated_testcode": "assert check_valid((1, 2, 3, 4, 5)) == True, \"Test 1 Failed\"\n",
        "test": "assert check_valid((True, True, True, True) ) == True\nassert check_valid((True, False, True, True) ) == False\nassert check_valid((True, True, True, True) ) == True",
        "canonical_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) "
    },
    {
        "number": 714,
        "prompt": "Write a python function to count the number of distinct power of prime factor of given number.\ndef count_Fac(n):  \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    c = 0 \n    if n == 1: \n        return 0\n    \n    while(n % 2 == 0): \n        c = c + 1\n        n = n // 2\n  \n    for i in range(3,int(math.sqrt(n))+1,2): \n        while(n % i== 0): \n            c = c + 1\n            n = n // i \n      \n    if n > 2: \n        c = c + 1\n  \n    return c \n  \n# Driver Program \n  \nprint(count_Fac(10)) \n  \n# This code is contributed by HarshalKandane \n",
        "generated_testcode": "assert count_Fac(1) == 0\n",
        "test": "assert count_Fac(24) == 3\nassert count_Fac(12) == 2\nassert count_Fac(4) == 1",
        "canonical_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count "
    },
    {
        "number": 715,
        "prompt": "Write a function to convert the given string of integers into a tuple.\ndef str_to_tuple(test_str):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    str_list = []\n    tup = tuple(str_list)\n    return tup\n\n",
        "generated_testcode": "assert str_to_tuple(\"1,2,3\") == (1,2,3)\n",
        "test": "assert str_to_tuple(\"1, -5, 4, 6, 7\") == (1, -5, 4, 6, 7)\nassert str_to_tuple(\"1, 2, 3, 4, 5\") == (1, 2, 3, 4, 5)\nassert str_to_tuple(\"4, 6, 9, 11, 13, 14\") == (4, 6, 9, 11, 13, 14)",
        "canonical_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 716,
        "prompt": "Write a function to find the perimeter of a rombus.\ndef rombus_perimeter(a):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return 2*a\n\n",
        "generated_testcode": "assert rombus_perimeter(1) == 2\n",
        "test": "assert rombus_perimeter(10)==40\nassert rombus_perimeter(5)==20\nassert rombus_perimeter(4)==16",
        "canonical_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    },
    {
        "number": 717,
        "prompt": "Write a function to calculate the standard deviation.\ndef sd_calc(data):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    mean = data_mean(data)\n    var = data_variance(data)\n    sd = math.sqrt(var)\n    return sd\n\n",
        "generated_testcode": "assert sd_calc([1, 2, 3, 4, 5]) == 0.5\n",
        "test": "assert sd_calc([4, 2, 5, 8, 6])== 2.23606797749979\nassert sd_calc([1,2,3,4,5,6,7])==2.160246899469287\nassert sd_calc([5,9,10,15,6,4])==4.070217029430577",
        "canonical_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean"
    },
    {
        "number": 718,
        "prompt": "Write a function to create a list taking alternate elements from another given list.\ndef alternate_elements(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    list2=[]\n    for i in range(0, len(list1)):\n        if i % 2 == 0:\n            list2.append(list1[i])\n    print(list2)\n    \n    \nalternate_elements([1,2,3,4,5,6,7,8])\n\n",
        "generated_testcode": "assert alternate_elements([1, 2, 3, 4, 5]) == [1, 3, 5, 2, 4]\n",
        "test": "assert alternate_elements([\"red\", \"black\", \"white\", \"green\", \"orange\"])==['red', 'white', 'orange']\nassert alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])==[2, 3, 0, 8, 4]\nassert alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
        "canonical_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result "
    },
    {
        "number": 719,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's.\ndef text_match(text):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "  return True if text.find('ab')!= -1 else False\n\n",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"ac\")==('Found a match!')\nassert text_match(\"dc\")==('Not matched!')\nassert text_match(\"abba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 720,
        "prompt": "Write a function to add a dictionary to the tuple.\ndef add_dict_to_tuple(test_tup, test_dict):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return (test_tup[0], test_tup[1], test_dict)\n\n",
        "generated_testcode": "assert add_dict_to_tuple(test_tup, test_dict) == (test_tup, test_dict)\n\n",
        "test": "assert add_dict_to_tuple((4, 5, 6), {\"MSAM\" : 1, \"is\" : 2, \"best\" : 3} ) == (4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})\nassert add_dict_to_tuple((1, 2, 3), {\"UTS\" : 2, \"is\" : 3, \"Worst\" : 4} ) == (1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})\nassert add_dict_to_tuple((8, 9, 10), {\"POS\" : 3, \"is\" : 4, \"Okay\" : 5} ) == (8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})",
        "canonical_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) "
    },
    {
        "number": 721,
        "prompt": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.\ndef maxAverageOfPath(cost, N): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # if N == 1: \n    #     return float('-inf') \n    # else: \n    #     return max(maxAverageOfPath(cost, N//2), maxAverageOfPath(cost, N-1)) + cost[N-1][N-1] \n    dp = [[0 for i in range(N)] for j in range(N)] \n    for i in range(N): \n        for j in range(N): \n            if (i == 0 or j == 0): \n                dp[i][j] = cost[i][j] \n            else: \n                dp[i][j] = cost[i][j] + max(dp[i - 1][j], dp[i][j - 1]) \n    return float(dp[N - 1][N - 1] / (N * N)) \n  \n# Driver program to test above function \ncost = [[1, 3, 7], \n        [10, 20, 1], \n        [1, 10, 1]] \nprint(\"Maximum average path is\", \n      maxAverageOfPath(cost, len(cost))) \n  \n# This code is contributed by Anju  \n",
        "generated_testcode": "assert maxAverageOfPath([[1, 2, 3], \n                        [4, 5, 6], \n                        [7, 8, 9]], 3) == 9\n",
        "test": "assert maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3) == 5.2\nassert maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3) == 6.2\nassert maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3) == 7.2 ",
        "canonical_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)"
    },
    {
        "number": 722,
        "prompt": "Write a function to filter the height and width of students which are stored in a dictionary.\ndef filter_data(students,h,w):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(students)):\n        if(students[i]['height']>h and students[i]['width']>w):\n            print(students[i]['name'])\n\n",
        "generated_testcode": "assert filter_data({'name': 'John', 'height': 6.5, 'weight': 160}, 6.5, 160) == {'name': 'John', 'height': 6.5, 'weight': 160}\n",
        "test": "assert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},6.0,70)=={'Cierra Vega': (6.2, 70)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.9,67)=={'Cierra Vega': (6.2, 70),'Kierra Gentry': (6.0, 68)}\nassert filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)},5.7,64)=={'Cierra Vega': (6.2, 70),'Alden Cantrell': (5.9, 65),'Kierra Gentry': (6.0, 68),'Pierre Cox': (5.8, 66)}",
        "canonical_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    "
    },
    {
        "number": 723,
        "prompt": "Write a function to count the same pair in two given lists using map function.\ndef count_same_pair(nums1, nums2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    return len(set(nums1).intersection(set(nums2)))\n\n",
        "generated_testcode": "assert count_same_pair([1, 2, 3, 4], [2, 3, 4, 5]) == 2\n",
        "test": "assert count_same_pair([1, 2, 3, 4, 5, 6, 7, 8],[2, 2, 3, 1, 2, 6, 7, 9])==4\nassert count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==11\nassert count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17],[2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==1",
        "canonical_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result"
    },
    {
        "number": 724,
        "prompt": "Write a function to calculate the sum of all digits of the base to the specified power.\ndef power_base_sum(base, power):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return base**power\nprint(power_base_sum(4, 3))\n\n",
        "generated_testcode": "assert power_base_sum(2, 3) == 8\n",
        "test": "assert power_base_sum(2,100)==115\nassert power_base_sum(8,10)==37\nassert power_base_sum(8,15)==62",
        "canonical_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])"
    },
    {
        "number": 725,
        "prompt": "Write a function to extract values between quotation marks of the given string by using regex.\ndef extract_quotation(text1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    quotation_pattern = r'\\\"'\n    matches = re.finditer(quotation_pattern, text1, re.DOTALL)\n    for match in matches:\n        print(match.group())\n\n",
        "generated_testcode": "assert extract_quotation(\"Hi, I'm a student.\") == \"Hi, I'm a student.\"\n",
        "test": "assert extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"') == ['A53', 'multi', 'Processor']\nassert extract_quotation('Cast your \"favorite\" entertainment \"apps\"') == ['favorite', 'apps']\nassert extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support') == ['4k Ultra HD', 'HDR 10']",
        "canonical_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))"
    },
    {
        "number": 726,
        "prompt": "Write a function to multiply the adjacent elements of the given tuple.\ndef multiply_elements(test_tup):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    result = 1\n    for i in range(len(test_tup)):\n        result *= test_tup[i]\n    return result\n\n",
        "generated_testcode": "assert multiply_elements((1, 2, 3, 4)) == 24\n",
        "test": "assert multiply_elements((1, 5, 7, 8, 10)) == (5, 35, 56, 80)\nassert multiply_elements((2, 4, 5, 6, 7)) == (8, 20, 30, 42)\nassert multiply_elements((12, 13, 14, 9, 15)) == (156, 182, 126, 135)",
        "canonical_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) "
    },
    {
        "number": 727,
        "prompt": "Write a function to remove all characters except letters and numbers using regex\ndef remove_char(S):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    import re\n    pattern = re.compile(\"[^a-z0-9]\")\n    new_str = pattern.sub(\"\",S)\n    return new_str\n\n",
        "generated_testcode": "assert remove_char(\"abcd\") == \"abc\"\n",
        "test": "assert remove_char(\"123abcjw:, .@! eiw\") == '123abcjweiw'\nassert remove_char(\"Hello1234:, ! Howare33u\") == 'Hello1234Howare33u'\nassert remove_char(\"Cool543Triks@:, Make@987Trips\") == 'Cool543TriksMake987Trips' ",
        "canonical_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result"
    },
    {
        "number": 728,
        "prompt": "Write a function to sum elements in two lists.\ndef sum_list(lst1,lst2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  sum = 0\n  for x in range(0, len(lst1)):\n    sum += lst1[x]\n  for x in range(0, len(lst2)):\n    sum += lst2[x]\n  return sum\n\n",
        "generated_testcode": "assert sum_list([1,2,3], [4,5,6]) == 13\n",
        "test": "assert sum_list([10,20,30],[15,25,35])==[25,45,65]\nassert sum_list([1,2,3],[5,6,7])==[6,8,10]\nassert sum_list([15,20,30],[15,45,75])==[30,65,105]",
        "canonical_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list"
    },
    {
        "number": 729,
        "prompt": "Write a function to add two lists using map and lambda function.\ndef add_list(nums1,nums2):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return list(map(lambda x,y:x+y,nums1,nums2))\nprint(add_list([1,2,3,4],[2,3,4,5]))\n\n",
        "generated_testcode": "assert add_list([1,2,3], [4,5,6]) == [5,7,9]\n",
        "test": "assert add_list([1, 2, 3],[4,5,6])==[5, 7, 9]\nassert add_list([1,2],[3,4])==[4,6]\nassert add_list([10,20],[50,70])==[60,90]",
        "canonical_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)"
    },
    {
        "number": 730,
        "prompt": "Write a function to remove consecutive duplicates of a given list.\ndef consecutive_duplicates(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    i = 0\n    while i < len(nums)-1:\n        if nums[i] == nums[i+1]:\n            nums.pop(i)\n        else:\n            i+=1\n    return nums\nprint(consecutive_duplicates([1,2,3,3,3]))\n\n",
        "generated_testcode": "assert consecutive_duplicates([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == False\n",
        "test": "assert consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4 ])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]\nassert consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[10, 15, 19, 18, 17, 26, 17, 18, 10]\nassert consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==['a', 'b', 'c', 'd']",
        "canonical_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] "
    },
    {
        "number": 731,
        "prompt": "Write a function to find the lateral surface area of a cone.\ndef lateralsurface_cone(r,h):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return 2*pi*r*h\nprint(\"Surface area of a cone is:\",lateralsurface_cone(1,2))\n\n",
        "generated_testcode": "assert lateralsurface_cone(1,1) == 2\n",
        "test": "assert lateralsurface_cone(5,12)==204.20352248333654\nassert lateralsurface_cone(10,15)==566.3586699569488\nassert lateralsurface_cone(19,17)==1521.8090132193388",
        "canonical_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA"
    },
    {
        "number": 732,
        "prompt": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.\ndef replace_specialchar(text):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n\n",
        "generated_testcode": "assert replace_specialchar(\"This is a test\") == \"This:is:a:test\"\n",
        "test": "assert replace_specialchar('Python language, Programming language.')==('Python:language::Programming:language:')\nassert replace_specialchar('a b c,d e f')==('a:b:c:d:e:f')\nassert replace_specialchar('ram reshma,ram rahim')==('ram:reshma:ram:rahim')",
        "canonical_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r"
    },
    {
        "number": 733,
        "prompt": "Write a function to find the index of the first occurrence of a given number in a sorted array.\ndef find_first_occurrence(A, x):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    low = 0\n    high = len(A) - 1\n    \n    while low <= high:\n        mid = (low + high) // 2\n        if A[mid] == x:\n            if mid == 0 or A[mid-1]!= x:\n                return mid\n            else:\n                high = mid - 1\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n\n",
        "generated_testcode": "assert find_first_occurrence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 4\n",
        "test": "assert find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 1\nassert find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 2\nassert find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6) == 4",
        "canonical_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result"
    },
    {
        "number": 734,
        "prompt": "Write a python function to find sum of products of all possible subarrays.\ndef sum_Of_Subarray_Prod(arr,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    l=1\n    r=0\n    i=1\n    j=0\n    s=0\n    while i<n:\n        while j<=n:\n            s=s+arr[i]*arr[j]\n            j=j+1\n        i=i+1\n        r=r+l\n        l=1\n        j=0\n        print(s)\n        s=0\n    return l,r\ndef sum_Of_Subarray_Prod_Iterative(arr,n):\n    s=0\n    for i in range(n):\n        for j in range(n):\n            s=s+arr[i]*arr[j]\n    return s\ndef sum_Of_Subarray_Prod_Recursive(arr,n):\n    if n<2:\n        return 0\n    else:\n        return arr[0]*arr[1]+(sum_Of_Subarray_Prod_Recursive(arr[1:],n-1))\narr=[1,2,3,4,5]\nsum_Of_Subarray_Prod_Iterative(arr,len(arr))\nsum_Of_Subarray_Prod_Recursive(arr,len(arr))\nsum_Of_Subarray_Prod(arr,len(arr))\n",
        "generated_testcode": "assert sum_Of_Subarray_Prod([1,2,3,4],4) == 24\n",
        "test": "assert sum_Of_Subarray_Prod([1,2,3],3) == 20\nassert sum_Of_Subarray_Prod([1,2],2) == 5\nassert sum_Of_Subarray_Prod([1,2,3,4],4) == 84",
        "canonical_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)"
    },
    {
        "number": 735,
        "prompt": "Write a python function to toggle bits of the number except the first and the last bit.\ndef set_middle_bits(n):  \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    n &= ~(1 << (n.bit_length() - 2))\n    return n\n\n",
        "generated_testcode": "assert set_middle_bits(0b1010101) == 0b1010101\n",
        "test": "assert toggle_middle_bits(9) == 15\nassert toggle_middle_bits(10) == 12\nassert toggle_middle_bits(11) == 13",
        "canonical_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) "
    },
    {
        "number": 736,
        "prompt": "Write a function to locate the left insertion point for a specified value in sorted order.\ndef left_insertion(a, x):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    l = 0\n    h = len(a) - 1\n\n",
        "generated_testcode": "assert left_insertion([1, 2, 3, 4, 5], 5) == 3\n",
        "test": "assert left_insertion([1,2,4,5],6)==4\nassert left_insertion([1,2,4,5],3)==2\nassert left_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i"
    },
    {
        "number": 737,
        "prompt": "Write a function to check whether the given string is starting with a vowel or not using regex.\ndef check_str(string): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "\timport re\n\tres = re.findall(\"[aeiouAEIOU]\", string)\n\tif len(res) == 0:\n\t\treturn False\n\treturn True\n\n",
        "generated_testcode": "assert check_str(\"Hello\") == True\n",
        "test": "assert check_str(\"annie\") == 'Valid'\nassert check_str(\"dawood\") == 'Invalid'\nassert check_str(\"Else\") == 'Valid'",
        "canonical_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") "
    },
    {
        "number": 738,
        "prompt": "Write a function to calculate the geometric sum of n-1.\ndef geometric_sum(n):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if n == 0:\n        return 1\n    else:\n        return n * geometric_sum(n - 1)\n\n",
        "generated_testcode": "assert geometric_sum(1) == 1\n",
        "test": "assert geometric_sum(7) == 1.9921875\nassert geometric_sum(4) == 1.9375\nassert geometric_sum(8) == 1.99609375",
        "canonical_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)"
    },
    {
        "number": 739,
        "prompt": "Write a python function to find the index of smallest triangular number with n digits.\ndef find_Index(n): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return(sum(i*(i+1)//2 for i in range(n))-n+1)\n \n#{ \n#  Driver Code Starts\n#Initial Template for Python 3\n\n",
        "generated_testcode": "assert find_Index(1) == 0\n",
        "test": "assert find_Index(2) == 4\nassert find_Index(3) == 14\nassert find_Index(4) == 45",
        "canonical_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); "
    },
    {
        "number": 740,
        "prompt": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.\ndef tuple_to_dict(test_tup):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    my_dict = {}\n    for i in range(0, len(test_tup) - 1):\n        my_dict[test_tup[i]] = test_tup[i + 1]\n    return my_dict\n\n",
        "generated_testcode": "assert tuple_to_dict((1, 2, 3, 4)) == {1: 2, 2: 3, 3: 4}\n",
        "test": "assert tuple_to_dict((1, 5, 7, 10, 13, 5)) == {1: 5, 7: 10, 13: 5}\nassert tuple_to_dict((1, 2, 3, 4, 5, 6)) == {1: 2, 3: 4, 5: 6}\nassert tuple_to_dict((7, 8, 9, 10, 11, 12)) == {7: 8, 9: 10, 11: 12}",
        "canonical_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) "
    },
    {
        "number": 741,
        "prompt": "Write a python function to check whether all the characters are same or not.\ndef all_Characters_Same(s) :\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  if len(s) == len(set(s)) :\n    return True\n  else :\n    return False\n\n",
        "generated_testcode": "assert(all_Characters_Same(\"abc\") == True)\n",
        "test": "assert all_Characters_Same(\"python\") == False\nassert all_Characters_Same(\"aaa\") == True\nassert all_Characters_Same(\"data\") == False",
        "canonical_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True"
    },
    {
        "number": 742,
        "prompt": "Write a function to caluclate the area of a tetrahedron.\ndef area_tetrahedron(side):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Get the areas of the 4 edges.\n    a = (1/4) * side * side\n    b = (1/4) * side * side\n    c = (1/4) * side * side\n    d = (1/4) * side * side\n    \n    # Use the dot product to get the area.\n    area = (a + b + c + d) *.25\n    \n    return area\n\n",
        "generated_testcode": "assert area_tetrahedron(1) == 1\n",
        "test": "assert area_tetrahedron(3)==15.588457268119894\nassert area_tetrahedron(20)==692.8203230275509\nassert area_tetrahedron(10)==173.20508075688772",
        "canonical_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area"
    },
    {
        "number": 743,
        "prompt": "Write a function to rotate a given list by specified number of items to the right direction.\ndef rotate_right(list1,m,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    list1[:]=list1[m:]+list1[:m]\n    return list1\n\n",
        "generated_testcode": "assert rotate_right([1,2,3,4,5],2,3) == [3,4,5,1,2]\n",
        "test": "assert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[8, 9, 10, 1, 2, 3, 4, 5, 6]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]\nassert rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]",
        "canonical_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result"
    },
    {
        "number": 744,
        "prompt": "Write a function to check if the given tuple has any none value or not.\ndef check_none(test_tup):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    for i in range(len(test_tup)):\n        if test_tup[i] is None:\n            return True\n    return False\n\n",
        "generated_testcode": "assert check_none(('a', None, 'b', None, 'c', None)) == True\n",
        "test": "assert check_none((10, 4, 5, 6, None)) == True\nassert check_none((7, 8, 9, 11, 14)) == False\nassert check_none((1, 2, 3, 4, None)) == True",
        "canonical_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) "
    },
    {
        "number": 745,
        "prompt": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.\ndef divisible_by_digits(startnum, endnum):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    answers = []\n    for num in range(startnum, endnum):\n        numstr = str(num)\n        all_digits = True\n        for d in numstr:\n            if int(d) not in range(2, 9):\n                all_digits = False\n                break\n        if all_digits:\n            answers.append(num)\n    return answers\n\n",
        "generated_testcode": "assert divisible_by_digits(1, 10) == True\n",
        "test": "assert divisible_by_digits(1,22)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]\nassert divisible_by_digits(1,15)==[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]\nassert divisible_by_digits(20,25)==[22, 24]",
        "canonical_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]"
    },
    {
        "number": 746,
        "prompt": "Write a function to find area of a sector.\ndef sector_area(r,a):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    return (r**2)*a\n\n",
        "generated_testcode": "assert sector_area(1,1) == 1\n",
        "test": "assert sector_area(4,45)==6.285714285714286\nassert sector_area(9,45)==31.82142857142857\nassert sector_area(9,360)==None",
        "canonical_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea"
    },
    {
        "number": 747,
        "prompt": "Write a function to find the longest common subsequence for the given three string sequence.\ndef lcs_of_three(X, Y, Z, m, n, o): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n    dp_table = [[[0 for x in range(o+1)] for y in range(n+1)] for z in range(m+1)] \n  \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    dp_table[i][j][k] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    dp_table[i][j][k] = dp_table[i-1][j-1][k-1] + 1\n                else: \n                    dp_table[i][j][k] = max(dp_table[i][j-1][k], dp_table[i][j][k-1], dp_table[i-1][j][k])\n  \n    return dp_table[m][n][o] \n  \nX = \"abcdefg\"\nY = \"ace\"\nZ = \"acdfeg\"\nprint(\"Length of the LCS is: \", lcs_of_three(X, Y, Z, len(X), len(Y), len(Z)))",
        "generated_testcode": "assert lcs_of_three('abc', 'ac', 'ad', 3, 3, 3) == 'abc'\n",
        "test": "assert lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5) == 2\nassert lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13) == 5 \nassert lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5) == 3",
        "canonical_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]"
    },
    {
        "number": 748,
        "prompt": "Write a function to put spaces between words starting with capital letters in a given string by using regex.\ndef capital_words_spaces(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = re.split(r\"([A-Z][a-z]+)\", str1)\n    final_string = \"\"\n    for word in result:\n        if word!= \"\":\n            final_string += word.capitalize() + \" \"\n    return final_string\n\n",
        "generated_testcode": "assert capital_words_spaces(\"This is a test\") == \"This is a test\"\n",
        "test": "assert capital_words_spaces(\"Python\") == 'Python'\nassert capital_words_spaces(\"PythonProgrammingExamples\") == 'Python Programming Examples'\nassert capital_words_spaces(\"GetReadyToBeCodingFreak\") == 'Get Ready To Be Coding Freak'",
        "canonical_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)"
    },
    {
        "number": 749,
        "prompt": "Write a function to sort a given list of strings of numbers numerically.\ndef sort_numeric_strings(nums_str):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    # write your solution here\n    nums_str = [s.strip(' ') for s in nums_str]\n    return sorted(nums_str, key=float)\n\n",
        "generated_testcode": "assert sort_numeric_strings([\"1\", \"2\", \"3\", \"4\", \"5\"]) == [\"1\", \"2\", \"3\", \"4\", \"5\"]\n",
        "test": "assert sort_numeric_strings( ['4','12','45','7','0','100','200','-12','-500'])==[-500, -12, 0, 4, 7, 12, 45, 100, 200]\nassert sort_numeric_strings(['2','3','8','4','7','9','8','2','6','5','1','6','1','2','3','4','6','9','1','2'])==[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]\nassert sort_numeric_strings(['1','3','5','7','1', '3','13', '15', '17','5', '7 ','9','1', '11'])==[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]",
        "canonical_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result"
    },
    {
        "number": 750,
        "prompt": "Write a function to add the given tuple to the given list.\ndef add_tuple(test_list, test_tup):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    test_list.append(test_tup)\n\n",
        "generated_testcode": "assert add_tuple([1, 2, 3], (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert add_tuple([5, 6, 7], (9, 10)) == [5, 6, 7, 9, 10]\nassert add_tuple([6, 7, 8], (10, 11)) == [6, 7, 8, 10, 11]\nassert add_tuple([7, 8, 9], (11, 12)) == [7, 8, 9, 11, 12]",
        "canonical_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) "
    },
    {
        "number": 751,
        "prompt": "Write a function to check if the given array represents min heap or not.\ndef check_min_heap(arr, i):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    \"\"\"\n    Check if the given array represents min heap or not\n    \"\"\"\n    if i == 0:\n        return True\n    if arr[i] < arr[i - 1]:\n        return False\n    return check_min_heap(arr, i - 1)\n\n",
        "generated_testcode": "assert check_min_heap([1, 2, 3, 4, 5], 0) == True\n",
        "test": "assert check_min_heap([1, 2, 3, 4, 5, 6], 0) == True\nassert check_min_heap([2, 3, 4, 5, 10, 15], 0) == True\nassert check_min_heap([2, 10, 4, 5, 3, 15], 0) == False",
        "canonical_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child"
    },
    {
        "number": 752,
        "prompt": "Write a function to find the nth jacobsthal number.\ndef jacobsthal_num(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n <= 0:\n        return 0\n    elif n == 1:\n        return 1\n    else: \n        return n*(n-1)/2\n\n",
        "generated_testcode": "assert jacobsthal_num(1) == 1\n",
        "test": "assert jacobsthal_num(5) == 11\nassert jacobsthal_num(2) == 1\nassert jacobsthal_num(4) == 5",
        "canonical_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]"
    },
    {
        "number": 753,
        "prompt": "Write a function to find minimum k records from tuple list.\ndef min_k(test_list, K):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # write your code here\n    # return the records with min value to the min_k list\n    min_k = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            min_k.append(test_list[i][0:K])\n    return min_k\n\n",
        "generated_testcode": "assert min_k([(1, 2), (3, 4), (5, 6), (7, 8)], 2) == (1, 2)\n",
        "test": "assert min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2) == [('Akash', 2), ('Akshat', 4)]\nassert min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3) == [('Akash', 3), ('Angat', 5), ('Nepin', 9)]\nassert min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1) == [('Ayesha', 9)]",
        "canonical_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) "
    },
    {
        "number": 754,
        "prompt": "Write a function to find common index elements from three lists.\ndef extract_index_list(l1, l2, l3):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    res = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                if l1[i] not in res:\n                    res.append(l1[i])\n    return res\n\n",
        "generated_testcode": "assert extract_index_list([1, 2, 3], [1, 2, 3], [1, 2, 3]) == [1, 2, 3], \"Should return the common elements\"\n",
        "test": "assert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 7]\nassert extract_index_list([1, 1, 3, 4, 5, 6, 7],[0, 1, 2, 3, 4, 6, 5],[0, 1, 2, 3, 4, 6, 7])==[1, 6]\nassert extract_index_list([1, 1, 3, 4, 6, 5, 6],[0, 1, 2, 3, 4, 5, 7],[0, 1, 2, 3, 4, 5, 7])==[1, 5]",
        "canonical_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result"
    },
    {
        "number": 755,
        "prompt": "Write a function to find the second smallest number in a list.\ndef second_smallest(numbers):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    # your code here\n    numbers.sort()\n    return numbers[1]\n\n",
        "generated_testcode": "assert second_smallest([1, 2, 3, 4, 5]) == 2\n",
        "test": "assert second_smallest([1, 2, -8, -2, 0, -2])==-2\nassert second_smallest([1, 1, -0.5, 0, 2, -2, -2])==-0.5\nassert second_smallest([2,2])==None",
        "canonical_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] "
    },
    {
        "number": 756,
        "prompt": "Write a function that matches a string that has an a followed by zero or one 'b'.\ndef text_match_zero_one(text):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return text.find('ab') == 0 or text.find('ab') == -1\n\n",
        "generated_testcode": "assert text_match_zero_one('ab') == True\n",
        "test": "assert text_match_zero_one(\"ac\")==('Found a match!')\nassert text_match_zero_one(\"dc\")==('Not matched!')\nassert text_match_zero_one(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 757,
        "prompt": "Write a function to count the pairs of reverse strings in the given string list.\ndef count_reverse_pairs(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in range(0, len(test_list) - 1):\n        for j in range(i + 1, len(test_list)):\n            if test_list[i] == test_list[j] and test_list[i]!= test_list[j - 1]:\n                count += 1\n    return count\n\n",
        "generated_testcode": "assert count_reverse_pairs([\"abcd\", \"dcba\", \"cbad\"]) == 2\n",
        "test": "assert count_reverse_pairs([\"julia\", \"best\", \"tseb\", \"for\", \"ailuj\"])== '2'\nassert count_reverse_pairs([\"geeks\", \"best\", \"for\", \"skeeg\"]) == '1'\nassert count_reverse_pairs([\"makes\", \"best\", \"sekam\", \"for\", \"rof\"]) == '2' ",
        "canonical_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)"
    },
    {
        "number": 758,
        "prompt": "Write a function to count number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for i in range(len(list1)):\n        temp = list1[i]\n        for j in range(i, len(list1)):\n            if(temp == list1[j]):\n                count += 1\n                break\n    return count\n\n",
        "generated_testcode": "assert unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 4\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]] )=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[10, 20, 30, 40], [60, 70, 50, 50], [90, 100, 200]])=={(10, 20, 30, 40): 1, (60, 70, 50, 50): 1, (90, 100, 200): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in  list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 759,
        "prompt": "Write a function to check a decimal with a precision of 2.\ndef is_decimal(num):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    if num == round(num, 2):\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert is_decimal(1.1) == True\n",
        "test": "assert is_decimal('123.11')==True\nassert is_decimal('e666.86')==False\nassert is_decimal('3.124587')==False",
        "canonical_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)"
    },
    {
        "number": 760,
        "prompt": "Write a python function to check whether an array contains only one distinct element or not.\ndef unique_Element(arr,n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(n-1):\n        if arr.count(arr[i])==1:\n            return True\n    return False\nprint(unique_Element([1,2,4,1,1,1,2],7))\n\n",
        "generated_testcode": "assert unique_Element([1,2,3,4,5,6,7,8,9,10],10) == True\n",
        "test": "assert unique_Element([1,1,1],3) == 'YES'\nassert unique_Element([1,2,1,2],4) == 'NO'\nassert unique_Element([1,2,3,4,5],5) == 'NO'",
        "canonical_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')"
    },
    {
        "number": 761,
        "prompt": "Write a function to caluclate arc length of an angle.\ndef arc_length(d,a):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    l = (a * 3.1416) / 180\n    return l*d\n\n",
        "generated_testcode": "assert(arc_length(1,0) == 0)\n",
        "test": "assert arc_length(9,45)==3.5357142857142856\nassert arc_length(9,480)==None\nassert arc_length(5,270)==11.785714285714285",
        "canonical_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength"
    },
    {
        "number": 762,
        "prompt": "Write a function to check whether the given month number contains 30 days or not.\ndef check_monthnumber_number(monthnum3):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_monthnumber_number(1) == True\n",
        "test": "assert check_monthnumber_number(6)==True\nassert check_monthnumber_number(2)==False\nassert check_monthnumber_number(12)==False",
        "canonical_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 763,
        "prompt": "Write a python function to find the minimum difference between any two elements in a given array.\ndef find_Min_Diff(arr,n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "\tmin_diff = arr[1] - arr[0] \n\tfor i in range(1,n): \n\t\tmin_diff = min(min_diff,arr[i] - arr[i-1]) \n\treturn min_diff \narr = [1,2,3,4,6] \nn = len(arr) \nprint(\"Minimum difference is\",find_Min_Diff(arr,n)) \n\n",
        "generated_testcode": "assert find_Min_Diff([1,2,3,4,5],5) == 1\n",
        "test": "assert find_Min_Diff((1,5,3,19,18,25),6) == 1\nassert find_Min_Diff((4,3,2,6),4) == 1\nassert find_Min_Diff((30,5,20,9),4) == 4",
        "canonical_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff "
    },
    {
        "number": 764,
        "prompt": "Write a python function to count numeric values in a given string.\ndef number_ctr(str):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\treturn len([x for x in str if x.isnumeric()])\n\n",
        "generated_testcode": "assert number_ctr(\"1,2,3,4,5,6,7,8,9,10\") == 10\n",
        "test": "assert number_ctr('program2bedone') == 1\nassert number_ctr('3wonders') ==1\nassert number_ctr('123') == 3",
        "canonical_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr"
    },
    {
        "number": 765,
        "prompt": "Write a function to find nth polite number.\ndef is_polite(n): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    # Write your code here\n    n_10 = n // 10 \n    n_1 = n % 10 \n    if n_10 == 0:\n        return True \n    if n_1 == 0:\n        return True \n    if n_1 >= 5:\n        return False \n    return True \n\n",
        "generated_testcode": "assert is_polite(1) == True\n",
        "test": "assert is_polite(7) == 11\nassert is_polite(4) == 7\nassert is_polite(9) == 13",
        "canonical_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) "
    },
    {
        "number": 766,
        "prompt": "Write a function to iterate over all pairs of consecutive items in a given list.\ndef pair_wise(l1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    length = len(l1)\n    for i in range(length-1):\n        print(l1[i], l1[i+1])\n\n",
        "generated_testcode": "assert pair_wise([1, 2, 3, 4, 5]) == [(1, 2), (2, 3), (3, 4), (4, 5)]\n",
        "test": "assert pair_wise([1,1,2,3,3,4,4,5])==[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]\nassert pair_wise([1,5,7,9,10])==[(1, 5), (5, 7), (7, 9), (9, 10)]\nassert pair_wise([1,2,3,4,5,6,7,8,9,10])==[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]",
        "canonical_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp"
    },
    {
        "number": 767,
        "prompt": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.\ndef get_Pairs_Count(arr,n,sum):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i]+arr[j]==sum:\n                count+=1\n    return count\n\n",
        "generated_testcode": "assert get_Pairs_Count([1,2,3,4,5],5,6) == 2\n",
        "test": "assert get_Pairs_Count([1,1,1,1],4,2) == 6\nassert get_Pairs_Count([1,5,7,-1,5],5,6) == 3\nassert get_Pairs_Count([1,-2,3],3,1) == 1",
        "canonical_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count"
    },
    {
        "number": 768,
        "prompt": "Write a python function to check for odd parity of a given number.\ndef check_Odd_Parity(x): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    \n    if x % 2!= 0: \n        return True\n    else: \n        return False\n#code to test above function \ncheck_Odd_Parity(6) \ncheck_Odd_Parity(7) \ncheck_Odd_Parity(8) \ncheck_Odd_Parity(4) \ncheck_Odd_Parity(9) \n#code to test above function \n \n#we will now test the above function with the list\nlst1=[1,4,3,5]\nif any(check_Odd_Parity(x) for x in lst1):\n    print(\"Odd Parity List\")\nelse:\n    print(\"Even Parity List\")\n#code to test above function \n \n#list, tuple, string, dictionary\nlst2=[1,4,3,5,6,7,8]\ntup=(1,2,3,4)\nstr=\"mystring\"\ndct={1:\"one\",2:\"two\"}\n#code to test above function \n\n",
        "generated_testcode": "assert check_Odd_Parity(5) == True, \"Should be True\"\n",
        "test": "assert check_Odd_Parity(13) == True\nassert check_Odd_Parity(21) == True\nassert check_Odd_Parity(18) == False",
        "canonical_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 769,
        "prompt": "Write a python function to get the difference between two lists.\ndef Diff(li1,li2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    li_dif = [i for i in li1 + li2 if i not in li1 or i not in li2]\n    return li_dif\n\n",
        "generated_testcode": "assert Diff([1,2,3],[1,2,3]) == 0\n",
        "test": "assert (Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])) == [10, 20, 30, 15]\nassert (Diff([1,2,3,4,5], [6,7,1])) == [2,3,4,5,6,7]\nassert (Diff([1,2,3], [6,7,1])) == [2,3,6,7]",
        "canonical_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n "
    },
    {
        "number": 770,
        "prompt": "Write a python function to find the sum of fourth power of first n odd natural numbers.\ndef odd_Num_Sum(n) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if n > 1 : \n        for i in range(2, n) : \n            if i%2!= 0 : \n                print(i)\n        \n        sum = 0\n        for i in range(1, n+1) : \n            sum += i**4\n        return sum\n    else : \n        print('Please enter a value > 1')\n\n",
        "generated_testcode": "assert odd_Num_Sum(5) == 0\n",
        "test": "assert odd_Num_Sum(2) == 82\nassert odd_Num_Sum(3) == 707\nassert odd_Num_Sum(4) == 3108",
        "canonical_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm "
    },
    {
        "number": 771,
        "prompt": "Write a function to check if the given expression is balanced or not.\ndef check_expression(exp):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    stack = []\n    for i in exp:\n        if i == '(':\n            stack.append(i)\n        elif i == ')':\n            if stack:\n                stack.pop()\n            else:\n                return False\n    if not stack:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_expression(\"(a+b)*(c+d)\") == True\n",
        "test": "assert check_expression(\"{()}[{}]\") == True\nassert check_expression(\"{()}[{]\") == False\nassert check_expression(\"{()}[{}][]({})\") == True",
        "canonical_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack"
    },
    {
        "number": 772,
        "prompt": "Write a function to remove all the words with k length in the given string.\ndef remove_length(test_str, K):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n    new_str = test_str.replace(K,\"\")\n    \n    return new_str\n\n",
        "generated_testcode": "assert remove_length(\"hello world\", 1) == \"hll wrld\"\n",
        "test": "assert remove_length('The person is most value tet', 3) == 'person is most value'\nassert remove_length('If you told me about this ok', 4) == 'If you me about ok'\nassert remove_length('Forces of darkeness is come into the play', 4) == 'Forces of darkeness is the'",
        "canonical_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) "
    },
    {
        "number": 773,
        "prompt": "Write a function to find the occurrence and position of the substrings within a string.\ndef occurance_substring(text,pattern):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count=0\n    for i in range(0,len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            count+=1\n    return count\n\n",
        "generated_testcode": "assert occurance_substring(\"abcabcabcabc\", \"abc\") == (3, 0)\n",
        "test": "assert occurance_substring('python programming, python language','python')==('python', 0, 6)\nassert occurance_substring('python programming,programming language','programming')==('programming', 7, 18)\nassert occurance_substring('python programming,programming language','language')==('language', 31, 39)",
        "canonical_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)"
    },
    {
        "number": 774,
        "prompt": "Write a function to check if the string is a valid email address or not using regex.\ndef check_email(email): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    if len(email)>7:\n        if \"@\" in email:\n            if \".\" in email:\n                if email.count(\"@\") == 1 and email.count(\".\") == 1:\n                    if email.count(\" \") == 0:\n                        if len(email.split(\"@\")[1])>3 and len(email.split(\"@\")[0])>=3:\n                            if len(email.split(\"@\")[0])>=1:\n                                if len(email.split(\".\")[0])>=1:\n                                    if len(email.split(\".\")[1])>=1:\n                                        return True\n    return False\n    \n\n",
        "generated_testcode": "assert check_email(\"someone@gmail.com\") == True, \"Not a valid email address\"\n",
        "test": "assert check_email(\"ankitrai326@gmail.com\") == 'Valid Email'\nassert check_email(\"my.ownsite@ourearth.org\") == 'Valid Email'\nassert check_email(\"ankitaoie326.com\") == 'Invalid Email'",
        "canonical_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") "
    },
    {
        "number": 775,
        "prompt": "Write a python function to check whether every odd index contains odd numbers of a given list.\ndef odd_position(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2 == 1:\n                return False\n    return True\nprint(odd_position([1,2,3,4,5,6,7,8,9,10]))\n\n",
        "generated_testcode": "assert odd_position([1, 2, 3, 4, 5]) == True\n",
        "test": "assert odd_position([2,1,4,3,6,7,6,3]) == True\nassert odd_position([4,1,2]) == True\nassert odd_position([1,2,3]) == False",
        "canonical_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 776,
        "prompt": "Write a function to count those characters which have vowels as their neighbors in the given string.\ndef count_vowels(test_str):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    dic = {}\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in dic:\n            dic[test_str[i]] += 1\n        else:\n            dic[test_str[i]] = 1\n    for i in range(len(test_str)):\n        if test_str[i] in dic and dic[test_str[i]]!= 0:\n            if test_str[i-1] in dic and dic[test_str[i-1]]!= 0:\n                dic[test_str[i-1]] -= 1\n                count += 1\n                dic[test_str[i]] -= 1\n            elif test_str[i+1] in dic and dic[test_str[i+1]]!= 0:\n                dic[test_str[i+1]] -= 1\n                count += 1\n                dic[test_str[i]] -= 1\n    return count\n\n",
        "generated_testcode": "assert count_vowels(\"\") == 0, \"Empty string\"\n",
        "test": "assert count_vowels('bestinstareels') == 7\nassert count_vowels('partofthejourneyistheend') == 12\nassert count_vowels('amazonprime') == 5",
        "canonical_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) "
    },
    {
        "number": 777,
        "prompt": "Write a python function to find the sum of non-repeated elements in a given array.\ndef find_Sum(arr,n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "\tsum = 0\n\tfor i in range(n):\n\t\tsum = sum + arr[i] \n\treturn sum\n\n",
        "generated_testcode": "assert find_Sum([1,2,3,4,5,6,7,8,9,10],10) == 55\n",
        "test": "assert find_Sum([1,2,3,1,1,4,5,6],8) == 21\nassert find_Sum([1,10,9,4,2,10,10,45,4],9) == 71\nassert find_Sum([12,10,9,45,2,10,10,45,10],9) == 78",
        "canonical_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum"
    },
    {
        "number": 778,
        "prompt": "Write a function to pack consecutive duplicates of a given list elements into sublists.\ndef pack_consecutive_duplicates(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(list1) < 2:\n        return list1\n    if list1[0]!= list1[1]:\n        return [list1[0],list1[1:]]\n    else:\n        return pack_consecutive_duplicates(list1[1:])\n\n",
        "generated_testcode": "assert pack_consecutive_duplicates(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']) == [['a', 'b', 'c', 'd', 'e', 'f'",
        "test": "assert pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])==[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]\nassert pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])==[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]\nassert pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])==[['a', 'a'], ['b'], ['c'], ['d', 'd']]",
        "canonical_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]"
    },
    {
        "number": 779,
        "prompt": "Write a function to count the number of unique lists within a list.\ndef unique_sublists(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  count = 0\n  unique_list = []\n  for i in range(len(list1)):\n    for j in range(i+1, len(list1)):\n      if list1[i] not in unique_list:\n        unique_list.append(list1[i])\n      if list1[j] not in unique_list:\n        unique_list.append(list1[j])\n  return len(unique_list)\nprint(unique_sublists([1,1,1,2,2,2]))\n\n",
        "generated_testcode": "assert unique_sublists([[1, 2, 3], [1, 2, 3], [1, 2, 3], [1, 2, 3]]) == 4\n",
        "test": "assert unique_sublists([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]])=={(1, 3): 2, (5, 7): 2, (13, 15, 17): 1, (9, 11): 1}\nassert unique_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])=={('green', 'orange'): 2, ('black',): 1, ('white',): 1}\nassert unique_sublists([[1, 2], [3, 4], [4, 5], [6, 7]])=={(1, 2): 1, (3, 4): 1, (4, 5): 1, (6, 7): 1}",
        "canonical_solution": "def unique_sublists(list1):\r\n    result ={}\r\n    for l in list1: \r\n        result.setdefault(tuple(l), list()).append(1) \r\n    for a, b in result.items(): \r\n        result[a] = sum(b)\r\n    return result"
    },
    {
        "number": 780,
        "prompt": "Write a function to find the combinations of sums with tuples in the given tuple list.\ndef find_combinations(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    res = []\n    temp = []\n    for t in test_list:\n        temp = t\n        for i in range(1, len(t)):\n            t = t[1:]\n            new_list = []\n            for i in range(len(temp)+1):\n                new_list.append(temp[:i]+temp[i:])\n            res.extend(new_list)\n    return res\n\n",
        "generated_testcode": "assert find_combinations([(1, 2), (3, 4), (5, 6)]) == [(1, 2), (3, 4), (5, 6)]\n",
        "test": "assert find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)]) == [(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]\nassert find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)]) == [(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]\nassert find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)]) == [(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]",
        "canonical_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) "
    },
    {
        "number": 781,
        "prompt": "Write a python function to check whether the count of divisors is even or odd.\ndef count_Divisors(n) : \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "\tcnt = 0\n\tfor i in range(1,int(n**0.5)+1) : \n\t\tif n % i == 0: \n\t\t\tcnt += 2\n\treturn cnt \n\n",
        "generated_testcode": "assert count_Divisors(10) == 4\n",
        "test": "assert count_Divisors(10) == \"Even\"\nassert count_Divisors(100) == \"Odd\"\nassert count_Divisors(125) == \"Even\"",
        "canonical_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") "
    },
    {
        "number": 782,
        "prompt": "Write a python function to find the sum of all odd length subarrays.\ndef Odd_Length_Sum(arr):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    arr_sum = 0\n    for i in range(len(arr)):\n        if len(arr) >= i:\n            arr_sum += arr[i]\n    return arr_sum\n\n",
        "generated_testcode": "assert Odd_Length_Sum([1,2,3,4,5]) == 15\n",
        "test": "assert Odd_Length_Sum([1,2,4]) == 14\nassert Odd_Length_Sum([1,2,1,2]) == 15\nassert Odd_Length_Sum([1,7]) == 8",
        "canonical_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum"
    },
    {
        "number": 783,
        "prompt": "Write a function to convert rgb color to hsv color.\ndef rgb_to_hsv(r, g, b):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    r_min = min(r, g, b)\n    r_max = max(r, g, b)\n    delta = float(r_max - r_min)\n    if delta == 0:\n        h = 0\n    else:\n        if r_max == r:\n            h = 60 * (((g - b) / delta) % 6)\n        if r_max == g:\n            h = 60 * (((b - r) / delta) + 2)\n        if r_max == b:\n            h = 60 * (((r - g) / delta) + 4)\n    if h < 0:\n        h += 360\n    if h == 360:\n        h -= 360\n    return h, s, v\n\n",
        "generated_testcode": "assert rgb_to_hsv(255, 255, 255) == (1.0, 1.0, 1.0)\n",
        "test": "assert rgb_to_hsv(255, 255, 255)==(0, 0.0, 100.0)\nassert rgb_to_hsv(0, 215, 0)==(120.0, 100.0, 84.31372549019608)\nassert rgb_to_hsv(10, 215, 110)==(149.26829268292684, 95.34883720930233, 84.31372549019608)",
        "canonical_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v"
    },
    {
        "number": 784,
        "prompt": "Write a function to find the product of first even and odd number of a given list.\ndef mul_even_odd(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    list2 = list1.copy()\n    i = 0\n    even_sum = 0\n    odd_sum = 0\n    while i < len(list1):\n        if list2[i] % 2 == 0:\n            even_sum += list2[i]\n        else:\n            odd_sum += list2[i]\n        i += 1\n    print(even_sum, odd_sum)\n\n",
        "generated_testcode": "assert mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 720\n",
        "test": "assert mul_even_odd([1,3,5,7,4,1,6,8])==4\nassert mul_even_odd([1,2,3,4,5,6,7,8,9,10])==2\nassert mul_even_odd([1,5,7,9,10])==10",
        "canonical_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)"
    },
    {
        "number": 785,
        "prompt": "Write a function to convert tuple string to integer tuple.\ndef tuple_str_int(test_str):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    test_str_list = test_str.strip('()').split(',')\n    test_int_list = []\n    for i in test_str_list:\n        test_int_list.append(int(i))\n    return tuple(test_int_list)\n\n",
        "generated_testcode": "assert tuple_str_int(\"(1,2,3)\") == (1,2,3)\n",
        "test": "assert tuple_str_int(\"(7, 8, 9)\") == (7, 8, 9)\nassert tuple_str_int(\"(1, 2, 3)\") == (1, 2, 3)\nassert tuple_str_int(\"(4, 5, 6)\") == (4, 5, 6)",
        "canonical_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) "
    },
    {
        "number": 786,
        "prompt": "Write a function to locate the right insertion point for a specified value in sorted order.\ndef right_insertion(a, x):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if x < a[0]:\n        return 0\n    if x > a[len(a) - 1]:\n        return len(a)\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = lo + (hi - lo) // 2\n        if x == a[mid]:\n            return mid\n        elif x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n",
        "generated_testcode": "assert right_insertion([1, 2, 3, 4, 5], 5) == 4\n",
        "test": "assert right_insertion([1,2,4,5],6)==4\nassert right_insertion([1,2,4,5],3)==2\nassert right_insertion([1,2,4,5],7)==4",
        "canonical_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i"
    },
    {
        "number": 787,
        "prompt": "Write a function that matches a string that has an a followed by three 'b'.\ndef text_match_three(text):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  return text.find('ab') >= 0\n\n",
        "generated_testcode": "assert text_match_three('ababab') == True\n",
        "test": "assert text_match_three(\"ac\")==('Not matched!')\nassert text_match_three(\"dc\")==('Not matched!')\nassert text_match_three(\"abbbba\")==('Found a match!')",
        "canonical_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 788,
        "prompt": "Write a function to create a new tuple from the given string and list.\ndef new_tuple(test_list, test_str):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    :param test_list: string and list\n    :param test_str: string\n    :return: tuple\n    \"\"\"\n    # We have to list() because the string to tuple is not allowed to be tuple\n    test_list = list(test_list)\n    test_list.append(test_str)\n    return tuple(test_list)\n\n",
        "generated_testcode": "assert new_tuple(['a', 'b', 'c'], 'abc') == ('a', 'b', 'c')\n",
        "test": "assert new_tuple([\"WEB\", \"is\"], \"best\") == ('WEB', 'is', 'best')\nassert new_tuple([\"We\", \"are\"], \"Developers\") == ('We', 'are', 'Developers')\nassert new_tuple([\"Part\", \"is\"], \"Wrong\") == ('Part', 'is', 'Wrong')",
        "canonical_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) "
    },
    {
        "number": 789,
        "prompt": "Write a function to calculate the perimeter of a regular polygon.\ndef perimeter_polygon(s,l):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return ((s*s+s)+(2*l*s))/2\nprint(perimeter_polygon(2,3))\n\n",
        "generated_testcode": "assert(perimeter_polygon(3,4) == 12)\n",
        "test": "assert perimeter_polygon(4,20)==80\nassert perimeter_polygon(10,15)==150\nassert perimeter_polygon(9,7)==63",
        "canonical_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter"
    },
    {
        "number": 790,
        "prompt": "Write a python function to check whether every even index contains even numbers of a given list.\ndef even_position(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  for i in range(len(nums)):\n    if i%2==0 and nums[i]%2==0:\n      return True\n  return False\n\n",
        "generated_testcode": "assert even_position([1, 2, 3, 4, 5]) == True\n",
        "test": "assert even_position([3,2,1]) == False\nassert even_position([1,2,3]) == False\nassert even_position([2,1,4]) == True",
        "canonical_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))"
    },
    {
        "number": 791,
        "prompt": "Write a function to remove the nested record from the given tuple.\ndef remove_nested(test_tup):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    final_tup = ()\n    for i in test_tup:\n        if type(i) == tuple:\n            for j in i:\n                final_tup = final_tup + (j,)\n        else:\n            final_tup = final_tup + (i,)\n    return final_tup\n\n",
        "generated_testcode": "assert remove_nested((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10)\n",
        "test": "assert remove_nested((1, 5, 7, (4, 6), 10)) == (1, 5, 7, 10)\nassert remove_nested((2, 6, 8, (5, 7), 11)) == (2, 6, 8, 11)\nassert remove_nested((3, 7, 9, (6, 8), 12)) == (3, 7, 9, 12)",
        "canonical_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) "
    },
    {
        "number": 792,
        "prompt": "Write a python function to count the number of lists in a given number of lists.\ndef count_list(input_list): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    \n    # initializing count variable to zero \n    count = 0\n    \n    # iterating each item in list \n    for x in range(len(input_list)): \n        \n        # checking if list is empty \n        if input_list[x]!= []: \n            \n            # incrementing count by one \n            count += 1\n            \n    # returning count \n    return count \n\n",
        "generated_testcode": "assert count_list([[1,2,3], [4,5,6], [7,8,9]]) == 3\n",
        "test": "assert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]]) == 4\nassert count_list([[1,2],[2,3],[4,5]]) == 3\nassert count_list([[1,0],[2,0]]) == 2",
        "canonical_solution": "def count_list(input_list): \r\n    return len(input_list)"
    },
    {
        "number": 793,
        "prompt": "Write a python function to find the last position of an element in a sorted array.\ndef last(arr,x,n):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    #initialize left and right pointers\n    left=0\n    right=n-1\n    \n    #loop to search for the element\n    while left<=right:\n        mid=(left+right)//2\n        if arr[mid]==x:\n            #if found return the index of the element\n            return mid\n        elif x>arr[mid]:\n            #if x is greater than mid increase the left pointer by 1\n            left=mid+1\n        else:\n            #if x is smaller than mid decrease the right pointer by 1\n            right=mid-1\n    \n    #element not found\n    return -1\n\n",
        "generated_testcode": "assert last([1,2,3,4,5],5,5) == 4\n",
        "test": "assert last([1,2,3],1,3) == 0\nassert last([1,1,1,2,3,4],1,6) == 2\nassert last([2,3,2,3,6,8,9],3,8) == 3",
        "canonical_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res"
    },
    {
        "number": 794,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\ndef text_starta_endb(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return re.search(r'a.+b', text)\n\n",
        "generated_testcode": "assert text_starta_endb('abc') == True\n",
        "test": "assert text_starta_endb(\"aabbbb\")==('Found a match!')\nassert text_starta_endb(\"aabAbbbc\")==('Not matched!')\nassert text_starta_endb(\"accddbbjjj\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')"
    },
    {
        "number": 795,
        "prompt": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.\ndef cheap_items(items,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    items_hq = []\n    for i in range(n):\n        items_hq.append(items[i])\n    heapq.heapify(items_hq)\n    price_list = []\n    while len(items_hq) > 0:\n        price = heapq.heappop(items_hq)\n        price_list.append(price)\n    return price_list\n\n",
        "generated_testcode": "assert cheap_items([1,2,3,4,5,6,7,8,9,10],5) == [1,2,3,4,5]\n",
        "test": "assert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],1)==[{'name': 'Item-1', 'price': 101.1}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}],2)==[{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}]\nassert cheap_items([{'name': 'Item-1', 'price': 101.1},{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09},{'name': 'Item-4', 'price': 22.75}],1)==[{'name': 'Item-4', 'price': 22.75}]",
        "canonical_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items"
    },
    {
        "number": 796,
        "prompt": "Write function to find the sum of all items in the given dictionary.\ndef return_sum(dict):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum_of_items = 0\n    for i in dict:\n        sum_of_items += dict[i]\n    return sum_of_items\n\n",
        "generated_testcode": "assert return_sum({1:2, 3:4, 5:6}) == 21\n",
        "test": "assert return_sum({'a': 100, 'b':200, 'c':300}) == 600\nassert return_sum({'a': 25, 'b':18, 'c':45}) == 88\nassert return_sum({'a': 36, 'b':39, 'c':49}) == 124",
        "canonical_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum"
    },
    {
        "number": 797,
        "prompt": "Write a python function to find the sum of all odd natural numbers within the range l and r.\ndef sum_Odd(n): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n): \n        if i % 2!= 0: \n            sum += i \n    return sum\n\n",
        "generated_testcode": "assert sum_Odd(1) == 0\n",
        "test": "assert sum_in_Range(2,5) == 8\nassert sum_in_Range(5,7) == 12\nassert sum_in_Range(7,13) == 40",
        "canonical_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)"
    },
    {
        "number": 798,
        "prompt": "Write a python function to find the sum of an array.\ndef _sum(arr):  \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    # your code here\n    sum = 0\n    for num in arr:\n        sum += num\n    return sum\n\n",
        "generated_testcode": "assert _sum([1,2,3,4,5]) == 15\n",
        "test": "assert _sum([1, 2, 3]) == 6\nassert _sum([15, 12, 13, 10]) == 50\nassert _sum([0, 1, 2]) == 3",
        "canonical_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  "
    },
    {
        "number": 799,
        "prompt": "Write a python function to left rotate the bits of a given number.\ndef left_Rotate(n,d):   \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    mask = (1 << d) - 1\n    return (n << d) | (n >> (32 - d)) & mask \n\n",
        "generated_testcode": "assert left_Rotate(10,2) == 8\n",
        "test": "assert left_Rotate(16,2) == 64\nassert left_Rotate(10,2) == 40\nassert left_Rotate(99,3) == 792",
        "canonical_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  "
    },
    {
        "number": 800,
        "prompt": "Write a function to remove all whitespaces from a string.\ndef remove_all_spaces(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return''.join(text.split())\n\n",
        "generated_testcode": "assert remove_all_spaces(\"  hello world  \") == \"hello world\", \"Should remove all spaces\"\n",
        "test": "assert remove_all_spaces('python  program')==('pythonprogram')\nassert remove_all_spaces('python   programming    language')==('pythonprogramminglanguage')\nassert remove_all_spaces('python                     program')==('pythonprogram')",
        "canonical_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))"
    },
    {
        "number": 801,
        "prompt": "Write a python function to count the number of equal numbers from three given integers.\ndef test_three_equal(x,y,z):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  count = 0\n  for i in range(3):\n    if x[i] == y[i] == z[i]:\n      count += 1\n  return count\n\n",
        "generated_testcode": "assert test_three_equal(1,2,3) == 1\n",
        "test": "assert test_three_equal(1,1,1) == 3\nassert test_three_equal(-1,-2,-3) == 0\nassert test_three_equal(1,2,2) == 2",
        "canonical_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))"
    },
    {
        "number": 802,
        "prompt": "Write a python function to count the number of rotations required to generate a sorted array.\ndef count_Rotation(arr,n):   \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    cnt=0\n    while(isSorted(arr,0,n-1)==False):\n        for i in range(0,n-1):\n            if arr[i]>arr[i+1]:\n                arr[i],arr[i+1]=arr[i+1],arr[i]\n                cnt=cnt+1\n    return cnt\n\n",
        "generated_testcode": "assert count_Rotation([1,2,3,4,5],5) == 1\n",
        "test": "assert count_Rotation([3,2,1],3) == 1\nassert count_Rotation([4,5,1,2,3],5) == 2\nassert count_Rotation([7,8,9,1,2,3],6) == 3",
        "canonical_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0"
    },
    {
        "number": 803,
        "prompt": "Write a python function to check whether the given number is a perfect square or not.\ndef is_Perfect_Square(n) :\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(2,n//2):\n        if n%i == 0:\n            return False\n        return True\n    \n\n",
        "generated_testcode": "assert is_Perfect_Square(1) == False\n",
        "test": "assert is_Perfect_Square(10) == False\nassert is_Perfect_Square(36) == True\nassert is_Perfect_Square(14) == False",
        "canonical_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False"
    },
    {
        "number": 804,
        "prompt": "Write a python function to check whether the product of numbers is even or not.\ndef is_Product_Even(arr,n): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    \n    # Code here \n    for i in range(0,n): \n        for j in range(1,n): \n            if(arr[i]*arr[j]<0): \n                continue\n            if(arr[i]*arr[j]%2==0): \n                return 1\n    return 0\n\n",
        "generated_testcode": "assert is_Product_Even([1,2,3,4,5],10) == True\n",
        "test": "assert is_Product_Even([1,2,3],3) == True\nassert is_Product_Even([1,2,1,4],4) == True\nassert is_Product_Even([1,1],2) == False",
        "canonical_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False"
    },
    {
        "number": 805,
        "prompt": "Write a function to find the list in a list of lists whose sum of elements is the highest.\ndef max_sum_list(lists):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    max_sum = -999999999999\n    for list in lists:\n        sum = 0\n        for elem in list:\n            sum += elem\n        if sum > max_sum:\n            max_sum = sum\n    return max_sum\n\n",
        "generated_testcode": "assert max_sum_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 9\n",
        "test": "assert max_sum_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[10, 11, 12] \nassert max_sum_list([[3,2,1], [6,5,4], [12,11,10]])==[12,11,10] \nassert max_sum_list([[2,3,1]])==[2,3,1] ",
        "canonical_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)"
    },
    {
        "number": 806,
        "prompt": "Write a function to find maximum run of uppercase characters in the given string.\ndef max_run_uppercase(test_str):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    # Your code here\n    # for i in range(0, len(test_str)):\n    #     if test_str[i] > test_str[i+1]:\n    #         return i\n    # return len(test_str)\n    res = 0\n    curr = 0\n    for i in range(len(test_str)):\n        if ord(test_str[i]) >= ord('A') and ord(test_str[i]) <= ord('Z'):\n            curr += 1\n            if curr > res:\n                res = curr\n        else:\n            curr = 0\n    return res\nprint(max_run_uppercase('B'))\nprint(max_run_uppercase('Z'))\nprint(max_run_uppercase('A'))\n\n",
        "generated_testcode": "assert max_run_uppercase(\"\") == 0\n",
        "test": "assert max_run_uppercase('GeMKSForGERksISBESt') == 5\nassert max_run_uppercase('PrECIOusMOVemENTSYT') == 6\nassert max_run_uppercase('GooGLEFluTTER') == 4",
        "canonical_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)"
    },
    {
        "number": 807,
        "prompt": "Write a python function to find the first odd number in a given list of numbers.\ndef first_odd(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n\n",
        "generated_testcode": "assert first_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1\n",
        "test": "assert first_odd([1,3,5]) == 1\nassert first_odd([2,4,1,3]) == 1\nassert first_odd ([8,9,1]) == 9",
        "canonical_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd"
    },
    {
        "number": 808,
        "prompt": "Write a function to check if the given tuples contain the k or not.\ndef check_K(test_tup, K):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return len(test_tup) >= K\n\n",
        "generated_testcode": "assert check_K((1, 2, 3, 4, 5), 3) == True\n",
        "test": "assert check_K((10, 4, 5, 6, 8), 6) == True\nassert check_K((1, 2, 3, 4, 5, 6), 7) == False\nassert check_K((7, 8, 9, 44, 11, 12), 11) == True",
        "canonical_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 809,
        "prompt": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.\ndef check_smaller(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n\n",
        "generated_testcode": "assert check_smaller((1, 2, 3), (2, 3, 4)) == True\n",
        "test": "assert check_smaller((1, 2, 3), (2, 3, 4)) == False\nassert check_smaller((4, 5, 6), (3, 4, 5)) == True\nassert check_smaller((11, 12, 13), (10, 11, 12)) == True",
        "canonical_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 810,
        "prompt": "Write a function to iterate over elements repeating each as many times as its count.\ndef count_variable(a,b,c,d):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    list1 = []\n    for i in range(0,a+1):\n        for j in range(0,b+1):\n            for k in range(0,c+1):\n                for l in range(0,d+1):\n                    list1.append(i*10000+j*100+k*10+l)\n    return list1\n\n",
        "generated_testcode": "assert count_variable(1,2,3,4) == 1\n",
        "test": "assert count_variable(4,2,0,-2)==['p', 'p', 'p', 'p', 'q', 'q'] \nassert count_variable(0,1,2,3)==['q', 'r', 'r', 's', 's', 's'] \nassert count_variable(11,15,12,23)==['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']",
        "canonical_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())"
    },
    {
        "number": 811,
        "prompt": "Write a function to check if two lists of tuples are identical or not.\ndef check_identical(test_list1, test_list2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return test_list1 == test_list2\n\n",
        "generated_testcode": "assert check_identical([(1, 2), (3, 4)], [(1, 2), (3, 4)]) == True\n",
        "test": "assert check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)]) == True\nassert check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)]) == False\nassert check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)]) == True",
        "canonical_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) "
    },
    {
        "number": 812,
        "prompt": "Write a function to abbreviate 'road' as 'rd.' in a given string.\ndef road_rd(street):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return street.replace('road', 'rd.')\n\n",
        "generated_testcode": "assert road_rd('road') == 'rd.'\n",
        "test": "assert road_rd(\"ravipadu Road\")==('ravipadu Rd.')\nassert road_rd(\"palnadu Road\")==('palnadu Rd.')\nassert road_rd(\"eshwar enclave Road\")==('eshwar enclave Rd.')",
        "canonical_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))"
    },
    {
        "number": 813,
        "prompt": "Write a function to find length of the string.\ndef string_length(str1):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "  return len(str1)\n\n",
        "generated_testcode": "assert string_length(\"\") == 0\n",
        "test": "assert string_length('python')==6\nassert string_length('program')==7\nassert string_length('language')==8",
        "canonical_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count"
    },
    {
        "number": 814,
        "prompt": "Write a function to find the area of a rombus.\ndef rombus_area(p,q):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    A = p*q\n    return A\n\n",
        "generated_testcode": "assert rombus_area(1,1) == 1\n",
        "test": "assert rombus_area(10,20)==100\nassert rombus_area(10,5)==25\nassert rombus_area(4,2)==4",
        "canonical_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area"
    },
    {
        "number": 815,
        "prompt": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.\ndef sort_by_dnf(arr, n):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    for i in range(n):\n        if arr[i] == 0:\n            tmp = arr[i]\n            for j in range(i + 1, n):\n                if arr[j] == tmp:\n                    tmp = arr[j]\n                    arr[i], arr[j] = arr[j], arr[i]\n                    break\n    return arr\n\n",
        "generated_testcode": "assert sort_by_dnf([0, 1, 2], 3) == [0, 1, 2]\n",
        "test": "assert sort_by_dnf([1,2,0,1,0,1,2,1,1], 9) == [0, 0, 1, 1, 1, 1, 1, 2, 2]\nassert sort_by_dnf([1,0,0,1,2,1,2,2,1,0], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]\nassert sort_by_dnf([2,2,1,0,0,0,1,1,2,1], 10) == [0, 0, 0, 1, 1, 1, 1, 2, 2, 2]",
        "canonical_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr"
    },
    {
        "number": 816,
        "prompt": "Write a function to clear the values of the given tuples.\ndef clear_tuple(test_tup):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in test_tup:\n        i = None\n    return test_tup\n\n",
        "generated_testcode": "assert clear_tuple((1, 2, 3)) == (1, 2, 3), \"Should return (1, 2, 3)\"\n",
        "test": "assert clear_tuple((1, 5, 3, 6, 8)) == ()\nassert clear_tuple((2, 1, 4 ,5 ,6)) == ()\nassert clear_tuple((3, 2, 5, 6, 8)) == ()",
        "canonical_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) "
    },
    {
        "number": 817,
        "prompt": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x: (x%m == 0) or (x%n == 0),nums))\n\n",
        "generated_testcode": "assert div_of_nums([1,2,3,4,5],2,3) == True\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],19,13)==[19, 65, 57, 39, 152, 190]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[2, 5, 8, 10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10, 15, 20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 818,
        "prompt": "Write a python function to count lower case letters in a given string.\ndef lower_ctr(str):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    ctr=0\n    for i in range(len(str)):\n        if(str[i].isalpha()==True):\n            ctr+=1\n    print(ctr)\n\n",
        "generated_testcode": "assert lower_ctr('Hello World') == 6\n",
        "test": "assert lower_ctr('abc') == 3\nassert lower_ctr('string') == 6\nassert lower_ctr('Python') == 5",
        "canonical_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr"
    },
    {
        "number": 819,
        "prompt": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.\ndef count_duplic(lists):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count_d=0\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            if i!=j and lists[i]==lists[j]:\n                count_d+=1\n    return count_d\n\n",
        "generated_testcode": "assert count_duplic(list1) == 1\n",
        "test": "assert count_duplic([1,2,2,2,4,4,4,5,5,5,5])==([1, 2, 4, 5], [1, 3, 3, 4])\nassert count_duplic([2,2,3,1,2,6,7,9])==([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])\nassert count_duplic([2,1,5,6,8,3,4,9,10,11,8,12])==([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])",
        "canonical_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n"
    },
    {
        "number": 820,
        "prompt": "Write a function to check whether the given month number contains 28 days or not.\ndef check_monthnum_number(monthnum1):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if monthnum1==2:\n        if 28 in range(1,31):\n            return 1\n        else:\n            return 0\n    else:\n        if monthnum1 in range(1,13):\n            return 1\n        else:\n            return 0\n\n",
        "generated_testcode": "assert check_monthnum_number(1) == True\n",
        "test": "assert check_monthnum_number(2)==True\nassert check_monthnum_number(1)==False\nassert check_monthnum_number(3)==False",
        "canonical_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 821,
        "prompt": "Write a function to merge two dictionaries into a single expression.\ndef merge_dictionaries(dict1,dict2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    final_dict={**dict1,**dict2}\n    return final_dict\n\n",
        "generated_testcode": "assert merge_dictionaries({1:10,2:20},{3:30,4:40}) == {1:10,2:20,3:30,4:40}\n",
        "test": "assert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}\nassert merge_dictionaries({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}\nassert merge_dictionaries({ \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}",
        "canonical_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict"
    },
    {
        "number": 822,
        "prompt": "Write a function to return true if the password is valid.\ndef pass_validity(p):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    # Use the methods discussed in Section 2.5.5.3.\n    return True\n\n",
        "generated_testcode": "assert pass_validity(\"a\") == True\n",
        "test": "assert pass_validity(\"password\")==False\nassert pass_validity(\"Password@10\")==True\nassert pass_validity(\"password@10\")==False",
        "canonical_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False"
    },
    {
        "number": 823,
        "prompt": "Write a function to check if the given string starts with a substring using regex.\ndef check_substring(string, sample) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n    # Create a Regex object \n    reg = re.compile(sample)\n  \n    # Check if the string contains the required substring \n    if reg.search(string) : \n        return True\n    else : \n        return False\n\n",
        "generated_testcode": "assert check_substring('abc', 'abc') == True\n",
        "test": "assert check_substring(\"dreams for dreams makes life fun\", \"makes\") == 'string doesnt start with the given substring'\nassert check_substring(\"Hi there how are you Hi alex\", \"Hi\") == 'string starts with the given substring'\nassert check_substring(\"Its been a long day\", \"been\") == 'string doesnt start with the given substring'",
        "canonical_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")"
    },
    {
        "number": 824,
        "prompt": "Write a python function to remove even numbers from a given list.\ndef remove_even(l):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return [i for i in l if i % 2!= 0]\n\n",
        "generated_testcode": "assert remove_even([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == [1, 3, 5, 7, 9]\n",
        "test": "assert remove_even([1,3,5,2]) == [1,3,5]\nassert remove_even([5,6,7]) == [5,7]\nassert remove_even([1,2,3,4]) == [1,3]",
        "canonical_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l"
    },
    {
        "number": 825,
        "prompt": "Write a python function to access multiple elements of specified index from a given list.\ndef access_elements(nums, list_index):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if list_index <= len(nums):\n        return nums[list_index]\n    else:\n        return None\n\n",
        "generated_testcode": "assert access_elements([1, 2, 3, 4, 5], 0) == 1\n",
        "test": "assert access_elements([2,3,8,4,7,9],[0,3,5]) == [2, 4, 9]\nassert access_elements([1, 2, 3, 4, 5],[1,2]) == [2,3]\nassert access_elements([1,0,2,3],[0,1]) == [1,0]",
        "canonical_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result"
    },
    {
        "number": 826,
        "prompt": "Write a python function to find the type of triangle from the given sides.\ndef check_Type_Of_Triangle(a,b,c): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if (a + b <= c) or (a + c <= b) or (b + c <= a): \n        print(\"Not a valid triangle\") \n    if a == b == c: \n        print(\"Equilateral triangle\") \n    elif a!= b!= c!= a: \n        print(\"Scalene triangle\") \n    else: \n        print(\"Isosceles triangle\") \n  \n\n",
        "generated_testcode": "assert check_Type_Of_Triangle(3,4,5) == \"Equilateral\"\n",
        "test": "assert check_Type_Of_Triangle(1,2,3) == \"Obtuse-angled Triangle\"\nassert check_Type_Of_Triangle(2,2,2) == \"Acute-angled Triangle\"\nassert check_Type_Of_Triangle(1,0,1) == \"Right-angled Triangle\"",
        "canonical_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") "
    },
    {
        "number": 827,
        "prompt": "Write a function to sum a specific column of a list in a given list of lists.\ndef sum_column(list1, C):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    column = []\n    for i in list1:\n        column.append(i[C])\n    return sum(column)\n\n",
        "generated_testcode": "assert sum_column([[1, 2, 3], [4, 5, 6], [7, 8, 9]], 1) == 15\n",
        "test": "assert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],0)==12\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],1)==15\nassert sum_column( [[1,2,3,2],[4,5,6,2],[7,8,9,5],],3)==9",
        "canonical_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result"
    },
    {
        "number": 828,
        "prompt": "Write a function to count alphabets,digits and special charactes in a given string.\ndef count_alpha_dig_spl(string):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return(len(string)-string.count(' ')-string.count('.')-string.count('-')-\n           string.count('_')-string.count(';')-string.count('#')-string.count('$')-string.count('%')-\n           string.count('&')-string.count('^')-string.count('(')-string.count(')')-string.count('*')-\n           string.count('+')-string.count('-')-string.count('=')-string.count('{')-string.count('}')-\n           string.count('[')-string.count(']')-string.count('`')-string.count('~')-string.count('|')-\n           string.count('\\\\')-string.count('\\'')-string.count('\\\"'))\n\n",
        "generated_testcode": "assert count_alpha_dig_spl('') == (0, 0, 0)\n",
        "test": "assert count_alpha_dig_spl(\"abc!@#123\")==(3,3,3)\nassert count_alpha_dig_spl(\"dgsuy@#$%&1255\")==(5,4,5)\nassert count_alpha_dig_spl(\"fjdsif627348#%$^&\")==(6,6,5)",
        "canonical_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   "
    },
    {
        "number": 829,
        "prompt": "Write a function to find out the second most repeated (or frequent) string in the given sequence.\ndef second_frequent(input): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    d = {} \n    for i in input: \n        if i in d: \n            d[i] = d[i] + 1\n        else: \n            d[i] = 1\n    keys = d.keys() \n    count = 1\n    max_count = 1\n    second_key = None\n    for i in keys:\n        if d[i] > count:\n            second_key = i\n            count = d[i]\n            if count > max_count:\n                max_count = count\n    return second_key \n",
        "generated_testcode": "assert second_frequent(\"\") == None\n",
        "test": "assert second_frequent(['aaa','bbb','ccc','bbb','aaa','aaa']) == 'bbb'\nassert second_frequent(['abc','bcd','abc','bcd','bcd','bcd']) == 'abc'\nassert second_frequent(['cdma','gsm','hspa','gsm','cdma','cdma']) == 'gsm'",
        "canonical_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) "
    },
    {
        "number": 830,
        "prompt": "Write a function to round up a number to specific digits.\ndef round_up(a, digits):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    result = ((10 ** digits) * a) // 10\n    return result + 1\n\n",
        "generated_testcode": "assert round_up(1, 1) == 2\n",
        "test": "assert round_up(123.01247,0)==124\nassert round_up(123.01247,1)==123.1\nassert round_up(123.01247,2)==123.02",
        "canonical_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)"
    },
    {
        "number": 831,
        "prompt": "Write a python function to count equal element pairs from the given array.\ndef count_Pairs(arr,n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tcount = 0\n\tfor i in range(0, n - 1): \n\t\tfor j in range(i + 1, n): \n\t\t\tif (arr[i] == arr[j]): \n\t\t\t\tcount += 1\n\treturn count\n\n",
        "generated_testcode": "assert count_Pairs([1,2,3,4,5],5) == 2\n",
        "test": "assert count_Pairs([1,1,1,1],4) == 6\nassert count_Pairs([1,5,1],3) == 1\nassert count_Pairs([3,2,1,7,8,9],6) == 0",
        "canonical_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; "
    },
    {
        "number": 832,
        "prompt": "Write a function to extract the maximum numeric value from a string by using regex.\ndef extract_max(input): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    max_int = re.findall(\"\\d+\", input)\n    print(max_int)\n    if len(max_int) == 0:\n        return -1\n    else:\n        return max(max_int)\n\n",
        "generated_testcode": "assert extract_max(\"1\") == 1\n",
        "test": "assert extract_max('100klh564abc365bg') == 564\nassert extract_max('hello300how546mer231') == 546\nassert extract_max('its233beenalong343journey234') == 343",
        "canonical_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)"
    },
    {
        "number": 833,
        "prompt": "Write a function to get dictionary keys as a list.\ndef get_key(dict): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return list(dict.keys()) \n\n",
        "generated_testcode": "assert get_key({1:2, 3:4}) == [1, 3]\n",
        "test": "assert get_key({1:'python',2:'java'})==[1,2]\nassert get_key({10:'red',20:'blue',30:'black'})==[10,20,30]\nassert get_key({27:'language',39:'java',44:'little'})==[27,39,44]",
        "canonical_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list"
    },
    {
        "number": 834,
        "prompt": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.\ndef generate_matrix(n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    ans = []\n    l = 1\n    k = 0\n    for i in range(n):\n        ans.append([])\n        for j in range(n):\n            ans[i].append(l)\n            l = l * 2\n    for i in range(n):\n        if k > n:\n            break\n        for j in range(k, n):\n            ans[j][i] = l\n            l = l * 2\n        k += 1\n        if k > n:\n            break\n        for j in range(k, n):\n            ans[i][j] = l\n            l = l * 2\n        k += 1\n    for i in range(n):\n        if k > n:\n            break\n        for j in range(k, n):\n            ans[j][n - 1 - i] = l\n            l = l * 2\n        k += 1\n        if k > n:\n            break\n        for j in range(k, n):\n            ans[n - 1 - i][j] = l\n            l = l * 2\n    return ans\n\n",
        "generated_testcode": "assert generate_matrix(3) == [[1, 2, 3], [8, 9, 4], [7, 6, 5]]\n",
        "test": "assert generate_matrix(3)==[[1, 2, 3], [8, 9, 4], [7, 6, 5]] \nassert generate_matrix(2)==[[1,2],[4,3]]\nassert generate_matrix(7)==[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]",
        "canonical_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix"
    },
    {
        "number": 835,
        "prompt": "Write a python function to find the slope of a line.\ndef slope(x1,y1,x2,y2): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return (y2-y1)/(x2-x1) \n  \n# Driver code \nx1 = 10\ny1 = 5\nx2 = 20\ny2 = 40\nslope(x1,y1,x2,y2)\n",
        "generated_testcode": "assert slope(1,2,3,4) == 1.0\n",
        "test": "assert slope(4,2,2,5) == -1.5\nassert slope(2,4,4,6) == 1\nassert slope(1,2,4,2) == 0",
        "canonical_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  "
    },
    {
        "number": 836,
        "prompt": "Write a function to find length of the subarray having maximum sum.\ndef max_sub_array_sum(a,size): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    max_sum = 0; \n    curr_sum = 0; \n    \n    for i in range(0, size): \n        curr_sum = 0; \n        for j in range(i, size): \n            curr_sum += a[j]; \n            max_sum = max(curr_sum, max_sum); \n    return max_sum; \n\n",
        "generated_testcode": "assert max_sub_array_sum([-2,1,-3,4,-1,2,1,-5,4],7) == 6\n",
        "test": "assert max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3],8) == 5\nassert max_sub_array_sum([1, -2, 1, 1, -2, 1],6) == 2\nassert max_sub_array_sum([-1, -2, 3, 4, 5],5) == 3",
        "canonical_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)"
    },
    {
        "number": 837,
        "prompt": "Write a python function to find the cube sum of first n odd natural numbers.\ndef cube_Sum(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sum = 0\n    for i in range(1, n+1):\n        sum = sum + i**3\n    return sum\nprint(cube_Sum(4))\n\n",
        "generated_testcode": "assert cube_Sum(5) == 55\n",
        "test": "assert cube_Sum(2) == 28\nassert cube_Sum(3) == 153\nassert cube_Sum(4) == 496",
        "canonical_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum"
    },
    {
        "number": 838,
        "prompt": "Write a python function to find minimum number swaps required to make two binary strings equal.\ndef min_Swaps(s1,s2) :  \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(s1)  \n  \n    count = 0 \n  \n    i = 0\n    j = 0\n    while(i<n and j<n): \n  \n        if (s1[i]!= s2[j]) : \n            if (s1[i] == '0') : \n                s1 = '1' + s1[1:] \n                count += 1\n            else : \n                s1 = '0' + s1[1:] \n                count += 1\n  \n        i += 1\n        j += 1\n  \n    return count \nprint(min_Swaps(s1 = \"11010101\", s2 = \"01011110\"))\n",
        "generated_testcode": "assert min_Swaps('01010101','01010101') == 0\n",
        "test": "assert min_Swaps(\"0011\",\"1111\") == 1\nassert min_Swaps(\"00011\",\"01001\") == 2\nassert min_Swaps(\"111\",\"111\") == 0",
        "canonical_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  "
    },
    {
        "number": 839,
        "prompt": "Write a function to sort the tuples alphabetically by the first item of each tuple.\ndef sort_tuple(tup): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # sorting using second item of each tuple \n    tup.sort(key = lambda x: x[1]) \n    return tup\n\n",
        "generated_testcode": "assert sort_tuple((1, 2, 3, 4, 5)) == (1, 2, 3, 4, 5)\n",
        "test": "assert sort_tuple([(\"Amana\", 28), (\"Zenat\", 30), (\"Abhishek\", 29),(\"Nikhil\", 21), (\"B\", \"C\")]) == [('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]\nassert sort_tuple([(\"aaaa\", 28), (\"aa\", 30), (\"bab\", 29), (\"bb\", 21), (\"csa\", \"C\")]) == [('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]\nassert sort_tuple([(\"Sarala\", 28), (\"Ayesha\", 30), (\"Suman\", 29),(\"Sai\", 21), (\"G\", \"H\")]) == [('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]",
        "canonical_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    },
    {
        "number": 840,
        "prompt": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.\ndef Check_Solution(a,b,c):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    D = b**2 - 4*a*c  \n    if D > 0 :  \n        x1 = (-b + D**0.5)/(2*a)  \n        x2 = (-b - D**0.5)/(2*a)  \n        print(\"Roots are:\",x1,\",\",x2)  \n    elif D == 0:  \n        x = -b/(2*a)  \n        print(\"Roots are:\",x)  \n    else:  \n        print(\"Roots are complex\")  \n  \na = 1\nb = -4\nc = 8\nCheck_Solution(a,b,c)  \n  \n#Q1 Write a python function to print the character in a string where the length of string is odd and print it in upper case\ndef PrintUpper(str):  \n    if len(str)%2!=0:  \n        print(str[0].upper(),end=\"\")  \n    else:  \n        print(str,end=\"\")  \n  \nstr = \"This is a test\"\nPrintUpper(str)  \n  \n#Q2 Write a python function to print the character in a string where the length of string is even and print it in lower case\ndef PrintLower(str):  \n    if len(str)%2==0:  \n        print(str[0].lower(),end=\"\")  \n    else:  \n        print(str,end=\"\")  \n  \nstr = \"This is a test\"\nPrintLower(",
        "generated_testcode": "assert Check_Solution(1,0,0) == True, \"Solution 1 is wrong\"\n",
        "test": "assert Check_Solution(2,0,-1) == \"Yes\"\nassert Check_Solution(1,-5,6) == \"No\"\nassert Check_Solution(2,0,2) == \"Yes\"",
        "canonical_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  "
    },
    {
        "number": 841,
        "prompt": "Write a function to count the number of inversions in the given array.\ndef get_inv_count(arr, n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return get_inv_count_aux(arr, n, 0, n - 1) \n  \ndef get_inv_count_aux(arr, n, l, h): \n    inv_count = 0\n    if l >= h: \n        return inv_count\n    if arr[l] < arr[h]: \n        inv_count += get_inv_count_aux(arr, n, l + 1, h)\n    else: \n        inv_count += get_inv_count_aux(arr, n, l + 1, h - 1)\n        inv_count += (h - l) + 1\n    return inv_count \n  \n# Test Program \narr = [1, 5, 4, 3, 2] \nn = len(arr) \ninv_count = get_inv_count(arr, n) \nprint (\"Array is\", arr, \n      \"and it has\", inv_count, \"inversions\") \n",
        "generated_testcode": "assert get_inv_count([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 0\n",
        "test": "assert get_inv_count([1, 20, 6, 4, 5], 5) == 5\nassert get_inv_count([8, 4, 2, 1], 4) == 6\nassert get_inv_count([3, 1, 2], 3) == 2",
        "canonical_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count "
    },
    {
        "number": 842,
        "prompt": "Write a function to find the number which occurs for odd number of times in the given array.\ndef get_odd_occurence(arr, arr_size):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # your code here\n    occurence_count = 0\n    for i in range(arr_size):\n        if arr[i] % 2!= 0:\n            occurence_count = occurence_count + 1\n            if occurence_count % 2 == 0:\n                return arr[i]\n    return -1\n\n",
        "generated_testcode": "assert get_odd_occurence([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == 5\n",
        "test": "assert get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13) == 5\nassert get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7) == 3\nassert get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7) == 5",
        "canonical_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1"
    },
    {
        "number": 843,
        "prompt": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\ndef nth_super_ugly_number(n, primes):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    numbers = [1] + primes + [2]\n    result = 0\n\n",
        "generated_testcode": "assert nth_super_ugly_number(3, [2, 7, 13, 19]) == 19\n",
        "test": "assert nth_super_ugly_number(12,[2,7,13,19])==32\nassert nth_super_ugly_number(10,[2,7,13,19])==26\nassert nth_super_ugly_number(100,[2,7,13,19])==5408",
        "canonical_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    },
    {
        "number": 844,
        "prompt": "Write a python function to find the kth element in an array containing odd elements first and then even elements.\ndef get_Number(n, k): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tarr = [] \n\tfor i in range(n): \n\t\tarr.append(int(input())) \n\tfor i in range(n): \n\t\tif i == k: \n\t\t\tcontinue\n\t\tif arr[i] % 2 == 0: \n\t\t\tarr[i], arr[k] = arr[k], arr[i] \n\treturn arr[k] \n\n",
        "generated_testcode": "assert get_Number([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5) == 9\n",
        "test": "assert get_Number(8,5) == 2\nassert get_Number(7,2) == 3\nassert get_Number(5,2) == 3",
        "canonical_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; "
    },
    {
        "number": 845,
        "prompt": "Write a python function to count the number of digits in factorial of a given number.\ndef find_Digits(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if n <= 0: \n        return 0\n    c = 0\n    while n!= 0: \n        c += 1\n        n //= 10\n    return c \n\n",
        "generated_testcode": "assert find_Digits(5) == 5\n",
        "test": "assert find_Digits(7) == 4\nassert find_Digits(5) == 3\nassert find_Digits(4) == 2",
        "canonical_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; "
    },
    {
        "number": 846,
        "prompt": "Write a function to find the minimum number of platforms required for a railway/bus station.\ndef find_platform(arr, dep, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    arr.sort() \n    dep.sort() \n    i = 1\n    j = 0\n    result = 1\n    while i < n and j < n: \n        if arr[i] < dep[j]: \n            i += 1\n            result += 1\n        else: \n            j += 1\n    return result\n\n",
        "generated_testcode": "assert find_platform([1, 2, 3, 4, 5, 6], 4, 6) == 2\n",
        "test": "assert find_platform([900, 940, 950, 1100, 1500, 1800],[910, 1200, 1120, 1130, 1900, 2000],6)==3\nassert find_platform([100,200,300,400],[700,800,900,1000],4)==4\nassert find_platform([5,6,7,8],[4,3,2,1],4)==1",
        "canonical_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result"
    },
    {
        "number": 847,
        "prompt": "Write a python function to copy a list from a singleton tuple.\ndef lcopy(xs):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    t = ()\n    for x in xs:\n        t = t + (x,)\n    return t\n\n",
        "generated_testcode": "assert lcopy([1,2,3]) == (1,2,3)\n",
        "test": "assert lcopy([1, 2, 3]) == [1, 2, 3]\nassert lcopy([4, 8, 2, 10, 15, 18]) == [4, 8, 2, 10, 15, 18]\nassert lcopy([4, 5, 6]) == [4, 5, 6]\n",
        "canonical_solution": "def lcopy(xs):\n  return xs[:]\n"
    },
    {
        "number": 848,
        "prompt": "Write a function to find the area of a trapezium.\ndef area_trapezium(base1,base2,height):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    area = (base1+base2)*height/2\n    return area\nprint(area_trapezium(2,3,5))\n\n",
        "generated_testcode": "assert area_trapezium(1,2,3) == 5\n",
        "test": "assert area_trapezium(6,9,4)==30\nassert area_trapezium(10,20,30)==450\nassert area_trapezium(15,25,35)==700",
        "canonical_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area"
    },
    {
        "number": 849,
        "prompt": "Write a python function to find sum of all prime divisors of a given number.\ndef Sum(N): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    s = 0\n    for i in range(1, N):\n        if (N % i == 0):\n            if (i!= 2): \n                s += i\n            else: \n                s += i\n            s += N // i\n    return s\n\n",
        "generated_testcode": "assert Sum(12) == 6\n",
        "test": "assert Sum(60) == 10\nassert Sum(39) == 16\nassert Sum(40) == 7",
        "canonical_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] "
    },
    {
        "number": 850,
        "prompt": "Write a function to check if a triangle of positive area is possible with the given angles.\ndef is_triangleexists(a,b,c): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return a+b>c and b+c>a and a+c>b\n\n",
        "generated_testcode": "assert is_triangleexists(3,4,5) == True, \"Should be True\"\n",
        "test": "assert is_triangleexists(50,60,70)==True\nassert is_triangleexists(90,45,45)==True\nassert is_triangleexists(150,30,70)==False",
        "canonical_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False"
    },
    {
        "number": 851,
        "prompt": "Write a python function to find sum of inverse of divisors.\ndef Sum_of_Inverse_Divisors(N,Sum): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    Sum = 0\n    for i in range(1, N): \n        if N % i == 0: \n            Sum = Sum + i \n            if (Sum == N): \n                return Sum\n\n",
        "generated_testcode": "assert Sum_of_Inverse_Divisors(10,0) == 0\n",
        "test": "assert Sum_of_Inverse_Divisors(6,12) == 2\nassert Sum_of_Inverse_Divisors(9,13) == 1.44\nassert Sum_of_Inverse_Divisors(1,4) == 4",
        "canonical_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); "
    },
    {
        "number": 852,
        "prompt": "Write a python function to remove negative numbers from a list.\ndef remove_negs(num_list): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tif(num_list == []): \n\t\treturn num_list \n\tres = [] \n\tfor elem in num_list: \n\t\tif elem > 0: \n\t\t\tres.append(elem) \n\treturn res \n\n",
        "generated_testcode": "assert remove_negs([1, 2, -3, 4, -5]) == [-3, 4, -5], \"Should be [-3, 4, -5]\"\n",
        "test": "assert remove_negs([1,-2,3,-4]) == [1,3]\nassert remove_negs([1,2,3,-4]) == [1,2,3]\nassert remove_negs([4,5,-6,7,-8]) == [4,5,7]",
        "canonical_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list"
    },
    {
        "number": 853,
        "prompt": "Write a python function to find sum of odd factors of a number.\ndef sum_of_odd_Factors(n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    factors = []\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 1\n    elif n == 3:\n        return 1\n    elif n == 4:\n        return 1\n    else:\n        if n % 2!= 0:\n            factors.append(n)\n            return n\n        elif n % 2 == 0:\n            while(n%2 == 0):\n                factors.append(n)\n                n = n/2\n    while(n % 2!= 0):\n        factors.append(n)\n        n = n/2\n    if len(factors) == 0:\n        return 0\n    else:\n        factors.sort()\n        return sum(factors)\n\n",
        "generated_testcode": "assert sum_of_odd_Factors(12) == 6, \"Should be 6\"\n",
        "test": "assert sum_of_odd_Factors(30) == 24\nassert sum_of_odd_Factors(18) == 13\nassert sum_of_odd_Factors(2) == 1",
        "canonical_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res "
    },
    {
        "number": 854,
        "prompt": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.\ndef raw_heap(rawheap):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    global heap_size, heap_capacity\n    heap_capacity = len(rawheap)\n    heap_size = 0\n    heapify(rawheap)\n    return(rawheap)\n\n",
        "generated_testcode": "assert raw_heap([1,2,3,4,5,6,7,8,9,10]) == [10,9,8,7,6,5,4,3,2,1]\n",
        "test": "assert raw_heap([25, 44, 68, 21, 39, 23, 89])==[21, 25, 23, 44, 39, 68, 89]\nassert raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])== [14, 25, 22, 25, 35, 65, 75, 85, 58]\nassert raw_heap([4, 5, 6, 2])==[2, 4, 6, 5]",
        "canonical_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap"
    },
    {
        "number": 855,
        "prompt": "Write a python function to check for even parity of a given number.\ndef check_Even_Parity(x): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "      \n    # Base case \n    if x == 0: \n        return 0\n    \n    # Recursive case \n    return (x % 2) + check_Even_Parity(x // 2) \n\n",
        "generated_testcode": "assert check_Even_Parity(10) == True, \"Should be True\"\n",
        "test": "assert check_Even_Parity(10) == True\nassert check_Even_Parity(11) == False\nassert check_Even_Parity(18) == True",
        "canonical_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 856,
        "prompt": "Write a python function to find minimum adjacent swaps required to sort binary array.\ndef find_Min_Swaps(arr,n) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n    # initialize result \n    result = 0\n    count = 0\n    \n    # Traverse the array once \n    for i in range(n): \n  \n        # If the next element is smaller than the \n        # current element \n        if (i + 1 < n and arr[i] > arr[i + 1]): \n            count = count + 1\n  \n    # Update result if the \n    # count is minimum \n    if (count < result): \n        result = count\n  \n    return result\n  \n# Driver Code \nif __name__ == \"__main__\": \n    arr = [] \n    n = int(input(\"Enter no.of elements in array:\"))\n    for i in range(0,n):\n        arr.append(int(input()))\n    res = find_Min_Swaps(arr,n)\n    print (\"Minimum Swaps are\",res) \n\n",
        "generated_testcode": "assert find_Min_Swaps([1,2,3,4,5,6,7,8,9],9) == 3\n",
        "test": "assert find_Min_Swaps([1,0,1,0],4) == 3\nassert find_Min_Swaps([0,1,0],3) == 1\nassert find_Min_Swaps([0,0,1,1,0],5) == 2",
        "canonical_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count "
    },
    {
        "number": 857,
        "prompt": "Write a function to list out the list of given strings individually using map function.\ndef listify_list(list1):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return list(map(lambda x: x, list1))\n\n",
        "generated_testcode": "assert listify_list([\"hello\", \"hi\", \"how are you\"]) == [\"hello\", \"hi\", \"how are you\"]\n",
        "test": "assert listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])==[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]\nassert listify_list(['python'])==[['p', 'y', 't', 'h', 'o', 'n']]\nassert listify_list([' red ', 'green',' black', 'blue ',' orange', 'brown'])==[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]",
        "canonical_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result "
    },
    {
        "number": 858,
        "prompt": "Write a function to count number of lists in a given list of lists and square the count.\ndef count_list(input_list): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    count = 0\n    for item in input_list:\n        count += 1\n    return count\n\n",
        "generated_testcode": "assert count_list([[1, 2, 3], [4, 5, 6], [7, 8, 9]]) == 3\n",
        "test": "assert count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==25\nassert count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]] )==16\nassert count_list([[2, 4], [[6,8], [4,5,8]], [10, 12, 14]])==9",
        "canonical_solution": "def count_list(input_list): \r\n    return (len(input_list))**2"
    },
    {
        "number": 859,
        "prompt": "Write a function to generate all sublists of a given list.\ndef sub_lists(my_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(0, len(my_list)+1):\n        for j in range(0, len(my_list)+1):\n            if i == j:\n                continue\n            else:\n                print(my_list[i:j])\n\n",
        "generated_testcode": "assert sub_lists([1, 2, 3]) == [[1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]\n\n",
        "test": "assert sub_lists([10, 20, 30, 40])==[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]\nassert sub_lists(['X', 'Y', 'Z'])==[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]\nassert sub_lists([1,2,3])==[[],[1],[2],[3],[1,2],[1,3],[2,3],[1,2,3]]",
        "canonical_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs"
    },
    {
        "number": 860,
        "prompt": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.\ndef check_alphanumeric(string): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    import re \n    res = re.findall('[a-zA-Z0-9]*$', string) \n    if len(res)!= 0:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_alphanumeric(\"A1B2C3D4\") == True\n",
        "test": "assert check_alphanumeric(\"dawood@\") == 'Discard'\nassert check_alphanumeric(\"skdmsam326\") == 'Accept'\nassert check_alphanumeric(\"cooltricks@\") == 'Discard'",
        "canonical_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") "
    },
    {
        "number": 861,
        "prompt": "Write a function to find all anagrams of a string in a given list of strings using lambda function.\ndef anagram_lambda(texts,str):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = []\n    for text in texts:\n        if sorted(text) == sorted(str):\n            result.append(text)\n    return result\n\n",
        "generated_testcode": "assert anagram_lambda('cat','cat') == ['cat']\n",
        "test": "assert anagram_lambda([\"bcda\", \"abce\", \"cbda\", \"cbea\", \"adcb\"],\"abcd\")==['bcda', 'cbda', 'adcb']\nassert anagram_lambda([\"recitals\",\" python\"], \"articles\" )==[\"recitals\"]\nassert anagram_lambda([\" keep\",\" abcdef\",\" xyz\"],\" peek\")==[\" keep\"]",
        "canonical_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result"
    },
    {
        "number": 862,
        "prompt": "Write a function to find the occurrences of n most common words in a given text.\ndef n_common_words(text,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    words = {}\n    for word in text.split():\n        if word in words:\n            words[word] += 1\n        else:\n            words[word] = 1\n    \n    maximum = max(words.values())\n    result = []\n    for word in words.keys():\n        if words[word] == maximum:\n            result.append(word)\n    return result[:n]\n\n",
        "generated_testcode": "assert n_common_words(text,2) == ['the', 'and']\n",
        "test": "assert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",1)==[('python', 1)]\nassert n_common_words(\"python is a programming language\",5)==[('python', 1),('is', 1), ('a', 1), ('programming', 1), ('language', 1)]",
        "canonical_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)"
    },
    {
        "number": 863,
        "prompt": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.\ndef find_longest_conseq_subseq(arr, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    max_length = 0\n    consecutive_count = 0\n    table = [[0 for i in range(n)] for j in range(n)] \n  \n    # Mark the first element of the \n    # subsequence as 1 \n    table[0][0] = 1\n    max_length = 1\n  \n    # Find the length of the longest \n    # subsequence with only one element \n    for i in range(1, n): \n        consecutive_count = 1\n        for j in range(0, i): \n            if (arr[j] + 1 == arr[i]): \n                consecutive_count += 1\n                table[i][j] = table[i - 1][j] + 1\n                if (consecutive_count > max_length):\n                    max_length = consecutive_count\n    print(table)\n    return max_length\n\n",
        "generated_testcode": "assert find_longest_conseq_subseq([1, 2, 3, 4, 5], 5) == 3\n",
        "test": "assert find_longest_conseq_subseq([1, 2, 2, 3], 4) == 3\nassert find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7) == 4\nassert find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11) == 5",
        "canonical_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans "
    },
    {
        "number": 864,
        "prompt": "Write a function to find palindromes in a given list of strings using lambda function.\ndef palindrome_lambda(texts):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda text: text == text[::-1], texts))\n\n",
        "generated_testcode": "assert palindrome_lambda([\"abcd\", \"dcba\", \"lls\", \"s\", \"sssll\"]) == True\n",
        "test": "assert palindrome_lambda([\"php\", \"res\", \"Python\", \"abcd\", \"Java\", \"aaa\"])==['php', 'aaa']\nassert palindrome_lambda([\"abcd\", \"Python\", \"abba\", \"aba\"])==['abba', 'aba']\nassert palindrome_lambda([\"abcd\", \"abbccbba\", \"abba\", \"aba\"])==['abbccbba', 'abba', 'aba']",
        "canonical_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result"
    },
    {
        "number": 865,
        "prompt": "Write a function to print n-times a list using map function.\ndef ntimes_list(nums,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(n):\n        print(nums)\n\n",
        "generated_testcode": "assert ntimes_list([1,2,3,4,5],3) == [1,2,3,4,5,1,2,3,4,5]\n",
        "test": "assert ntimes_list([1, 2, 3, 4, 5, 6, 7],3)==[3, 6, 9, 12, 15, 18, 21]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],4)==[4, 8, 12, 16, 20, 24, 28]\nassert ntimes_list([1, 2, 3, 4, 5, 6, 7],10)==[10, 20, 30, 40, 50, 60, 70]",
        "canonical_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)"
    },
    {
        "number": 866,
        "prompt": "Write a function to check whether the given month name contains 31 days or not.\ndef check_monthnumb(monthname2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    monthname = monthname2.lower()\n    if monthname == \"january\" or monthname == \"february\" or monthname == \"march\" or monthname == \"april\" or monthname == \"may\" or monthname == \"june\":\n        return 31\n    elif monthname == \"july\" or monthname == \"august\" or monthname == \"september\" or monthname == \"october\" or monthname == \"november\" or monthname == \"december\":\n        return 30\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_monthnumb('February') == True\n",
        "test": "assert check_monthnumb(\"February\")==False\nassert check_monthnumb(\"January\")==True\nassert check_monthnumb(\"March\")==True",
        "canonical_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False"
    },
    {
        "number": 867,
        "prompt": "Write a python function to add a minimum number such that the sum of array becomes even.\ndef min_Num(arr,n):  \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    min_ = min(arr)\n    sum = 0\n    for i in range(n):\n        sum += min_\n    if sum%2!= 0:\n        return min_ + 1\n    return min_\nprint(min_Num([2,3,4,1,5],4))\n\n",
        "generated_testcode": "assert min_Num([1,2,3,4,5],5) == 2\n",
        "test": "assert min_Num([1,2,3,4,5,6,7,8,9],9) == 1\nassert min_Num([1,2,3,4,5,6,7,8],8) == 2\nassert min_Num([1,2,3],3) == 2",
        "canonical_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2"
    },
    {
        "number": 868,
        "prompt": "Write a python function to find the length of the last word in a given string.\ndef length_Of_Last_Word(a): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    a = a.split() \n    return len(a[len(a)-1]) \n\n",
        "generated_testcode": "assert length_Of_Last_Word(\"Hello World\") == 5\n",
        "test": "assert length_Of_Last_Word(\"python language\") == 8\nassert length_Of_Last_Word(\"PHP\") == 3\nassert length_Of_Last_Word(\"\") == 0",
        "canonical_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l "
    },
    {
        "number": 869,
        "prompt": "Write a function to remove sublists from a given list of lists, which are outside a given range.\ndef remove_list_range(list1, leftrange, rigthrange):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(len(list1)):\n        if list1[i] not in list1[leftrange:rigthrange]:\n            print(i)\n\n",
        "generated_testcode": "assert remove_list_range(list1, 0, 2) == [[1, 2], [3, 4], [5, 6], [7, 8], [9, 10], [11, 12], [13, 14], [15, 16], [17, 18], [19, 20]]\n",
        "test": "assert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],13,17)==[[13, 14, 15, 17]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],1,3)==[[2], [1, 2, 3]]\nassert remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]],0,7)==[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]",
        "canonical_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result"
    },
    {
        "number": 870,
        "prompt": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.\ndef sum_positivenum(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(filter(lambda x: x > 0, nums))\n\n",
        "generated_testcode": "assert sum_positivenum([1, 2, 3, 4, 5]) == 15\n",
        "test": "assert sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==48\nassert sum_positivenum([10,15,-14,13,-18,12,-20])==50\nassert sum_positivenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==522",
        "canonical_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)"
    },
    {
        "number": 871,
        "prompt": "Write a python function to check whether the given strings are rotations of each other or not.\ndef are_Rotations(string1,string2): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    if len(string1)!= len(string2): \n        return False\n    str1 = list(string1) \n    str2 = list(string2) \n    str1.sort() \n    str2.sort() \n    if str1 == str2: \n        return True\n    return False\nif __name__ == '__main__': \n    string1 = \"waterbottle\"\n    string2 = \"erbottlewat\"\n    string3 = \"erbottlewat\"\n    string4 = \"erbottlewat\"\n    string5 = \"waterbottle\"\n    print(are_Rotations(string1,string2))\n    print(are_Rotations(string1,string3))\n    print(are_Rotations(string1,string4))\n    print(are_Rotations(string1,string5))\n\n",
        "generated_testcode": "assert are_Rotations('abc','cba') == True\n",
        "test": "assert are_Rotations(\"abc\",\"cba\") == False\nassert are_Rotations(\"abcd\",\"cdba\") == False\nassert are_Rotations(\"abacd\",\"cdaba\") == True",
        "canonical_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False"
    },
    {
        "number": 872,
        "prompt": "Write a function to check if a nested list is a subset of another nested list.\ndef check_subset(list1,list2): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    for i in list1:\n        if i in list2:\n            continue\n        else:\n            return False\n    return True\n\n",
        "generated_testcode": "assert check_subset([1,2,3], [1,2,3]) == True\n",
        "test": "assert check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]] ,[[1, 3],[13,15,17]])==True\nassert check_subset([[1, 2], [2, 3], [3, 4], [5, 6]],[[3, 4], [5, 6]])==True\nassert check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]],[[[3, 4], [5, 6]]])==False",
        "canonical_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) "
    },
    {
        "number": 873,
        "prompt": "Write a function to solve the fibonacci sequence using recursion.\ndef fibonacci(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if n == 0 or n == 1:\n        return n\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\nprint(fibonacci(4))\n",
        "generated_testcode": "assert fibonacci(0) == 0\n",
        "test": "assert fibonacci(7) == 13\nassert fibonacci(8) == 21\nassert fibonacci(9) == 34",
        "canonical_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))"
    },
    {
        "number": 874,
        "prompt": "Write a python function to check if the string is a concatenation of another string.\ndef check_Concat(str1,str2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return str1+str2 in str2+str1\nprint(check_Concat(\"abc\",\"12345\"))\nprint(check_Concat(\"abc\",\"12\"))\nprint(check_Concat(\"abc\",\"\"))\nprint(check_Concat(\"\",\"12\"))\n\n",
        "generated_testcode": "assert check_Concat(\"abc\",\"abc\") == True, \"Should be True\"\n",
        "test": "assert check_Concat(\"abcabcabc\",\"abc\") == True\nassert check_Concat(\"abcab\",\"abc\") == False\nassert check_Concat(\"aba\",\"ab\") == False",
        "canonical_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True"
    },
    {
        "number": 875,
        "prompt": "Write a function to find the minimum difference in the tuple pairs of given tuples.\ndef min_difference(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    test_list.sort()\n    print(test_list)\n    difference = test_list[1][0] - test_list[0][0]\n    print(difference)\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            difference = test_list[i][0] - test_list[j][0]\n            if difference < difference:\n                difference = test_list[i][0] - test_list[j][0]\n    return difference\n\n",
        "generated_testcode": "assert min_difference([(1, 2), (3, 4), (5, 6)]) == 1\n",
        "test": "assert min_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 1\nassert min_difference([(4, 6), (12, 8), (11, 4), (2, 13)]) == 2\nassert min_difference([(5, 17), (3, 9), (12, 5), (3, 24)]) == 6",
        "canonical_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) "
    },
    {
        "number": 876,
        "prompt": "Write a python function to find lcm of two positive integers.\ndef lcm(x, y):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if x > y:\n        greater = x\n    else:\n        greater = y\n    while True:\n        if (greater % x == 0) and (greater % y == 0):\n            lcm = greater\n            break\n        greater += 1\n    return lcm\n\n",
        "generated_testcode": "assert lcm(2, 6) == 6\n",
        "test": "assert lcm(4,6) == 12\nassert lcm(15,17) == 255\nassert lcm(2,6) == 6",
        "canonical_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm"
    },
    {
        "number": 877,
        "prompt": "Write a python function to sort the given string.\ndef sort_String(str) : \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    i = 0\n    k = len(str) - 1\n    \n    while i <= k: \n        j = i + 1\n        while j <= k: \n            if str[i] > str[j]: \n                str[i], str[j] = str[j], str[i] \n            j += 1\n        i += 1\n    \n    return str\n\n",
        "generated_testcode": "assert sort_String(\"abc\") == \"abc\"\n",
        "test": "assert sort_String(\"cba\") == \"abc\"\nassert sort_String(\"data\") == \"aadt\"\nassert sort_String(\"zxy\") == \"xyz\"",
        "canonical_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) "
    },
    {
        "number": 878,
        "prompt": "Write a function to check if the given tuple contains only k elements.\ndef check_tuples(test_tuple, K):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result = 0\n    for i in range(len(test_tuple)):\n        if test_tuple[i] == K:\n            result += 1\n    if result == len(test_tuple):\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert check_tuples((1, 2, 3, 4, 5), 3) == True\n",
        "test": "assert check_tuples((3, 5, 6, 5, 3, 6),[3, 6, 5]) == True\nassert check_tuples((4, 5, 6, 4, 6, 5),[4, 5, 6]) == True\nassert check_tuples((9, 8, 7, 6, 8, 9),[9, 8, 1]) == False",
        "canonical_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) "
    },
    {
        "number": 879,
        "prompt": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.\ndef text_match(text):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return text.find('ab')!= -1\n\n",
        "generated_testcode": "assert text_match('ab') == True\n",
        "test": "assert text_match(\"aabbbbd\") == 'Not matched!'\nassert text_match(\"aabAbbbc\") == 'Not matched!'\nassert text_match(\"accddbbjjjb\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')"
    },
    {
        "number": 880,
        "prompt": "Write a python function to find number of solutions in quadratic equation.\ndef Check_Solution(a,b,c) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  \n    D = b*b - 4*a*c; \n    \n    if D > 0 : \n      \n        sqrtD = sqrt(D) \n        x1 = (-b + sqrtD)/(2*a) \n        x2 = (-b - sqrtD)/(2*a) \n        return x1, x2 \n    \n    elif D == 0 : \n        return -1 \n    else : \n        x = -b/(2*a) \n        return x \n\n",
        "generated_testcode": "assert Check_Solution(1,2,3) == 2\n",
        "test": "assert Check_Solution(2,5,2) == \"2 solutions\"\nassert Check_Solution(1,1,1) == \"No solutions\"\nassert Check_Solution(1,2,1) == \"1 solution\"",
        "canonical_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") "
    },
    {
        "number": 881,
        "prompt": "Write a function to find the sum of first even and odd number of a given list.\ndef sum_even_odd(list1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    even = []\n    odd = []\n    for i in list1:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    sum_even = sum(even)\n    sum_odd = sum(odd)\n    print(\"Sum of even: \", sum_even)\n    print(\"Sum of odd: \", sum_odd)\n    return sum_even, sum_odd\n\n",
        "generated_testcode": "assert sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 10\n",
        "test": "assert sum_even_odd([1,3,5,7,4,1,6,8])==5\nassert sum_even_odd([1,2,3,4,5,6,7,8,9,10])==3\nassert sum_even_odd([1,5,7,9,10])==11",
        "canonical_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)"
    },
    {
        "number": 882,
        "prompt": "Write a function to caluclate perimeter of a parallelogram.\ndef parallelogram_perimeter(b,h):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return 2*b+2*h\nprint(parallelogram_perimeter(2,3))\n# return a\n# output:6\n\n",
        "generated_testcode": "assert parallelogram_perimeter(3,4) == 8\n",
        "test": "assert parallelogram_perimeter(10,20)==400\nassert parallelogram_perimeter(15,20)==600\nassert parallelogram_perimeter(8,9)==144",
        "canonical_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter"
    },
    {
        "number": 883,
        "prompt": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.\ndef div_of_nums(nums,m,n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return list(filter(lambda x: x%m==0 or x%n==0, nums))\n\n",
        "generated_testcode": "assert div_of_nums([1,2,3,4,5],2,3) == [1,2,3]\n",
        "test": "assert div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190],2,4)==[ 152,44]\nassert div_of_nums([1, 2, 3, 5, 7, 8, 10],2,5)==[10]\nassert div_of_nums([10,15,14,13,18,12,20],10,5)==[10,20]",
        "canonical_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result"
    },
    {
        "number": 884,
        "prompt": "Write a python function to check whether all the bits are within a given range or not.\ndef all_Bits_Set_In_The_Given_Range(n,l,r): \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "  \n    # Initialize value of variable \n    # 'c' with 0. \n    c = 0\n      \n    # Loop to iterate every bit of the \n    # given number. \n    while n: \n          \n        # If current bit is 1 then \n        # increment the count 'c'. \n        if n & 1: \n            c += 1\n          \n        # If count is greater than or equal \n        # to minimum number in range. \n        if c >= l and c <= r: \n            return True\n          \n        # If count is less than minimum \n        # number in range then it is not \n        # within range of the number. \n        else: \n            return False\n  \n# Driver Code \nn = 10\nl = 2\nr = 7\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)) \n\n",
        "generated_testcode": "assert all_Bits_Set_In_The_Given_Range(5,0,5) == True\n",
        "test": "assert all_Bits_Set_In_The_Given_Range(10,2,1) == True \nassert all_Bits_Set_In_The_Given_Range(5,2,4) == False\nassert all_Bits_Set_In_The_Given_Range(22,2,3) == True ",
        "canonical_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    },
    {
        "number": 885,
        "prompt": "Write a python function to check whether the two given strings are isomorphic to each other or not.\ndef is_Isomorphic(str1,str2):          \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    dict1 = {}\n    dict2 = {}\n    for i in range(len(str1)):\n        if str1[i] in dict1:\n            dict1[str1[i]] += 1\n        else:\n            dict1[str1[i]] = 1\n        if str2[i] in dict2:\n            dict2[str2[i]] += 1\n        else:\n            dict2[str2[i]] = 1\n    \n    for i in dict1.keys():\n        if i not in dict2.keys():\n            return False\n    for i in dict2.keys():\n        if i not in dict1.keys():\n            return False\n    \n    if dict1 == dict2:\n        return True\n    else:\n        return False\nprint(is_Isomorphic('abbba','abbabbba'))\n\n",
        "generated_testcode": "assert is_Isomorphic(\"abcd\",\"cdab\") == True\n",
        "test": "assert is_Isomorphic(\"paper\",\"title\") == True\nassert is_Isomorphic(\"ab\",\"ba\") == True\nassert is_Isomorphic(\"ab\",\"aa\") == False",
        "canonical_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 886,
        "prompt": "Write a function to add all the numbers in a list and divide it with the length of the list.\ndef sum_num(numbers):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(numbers)\n\n",
        "generated_testcode": "assert sum_num([1,2,3,4,5]) == 15\n",
        "test": "assert sum_num((8, 2, 3, 0, 7))==4.0\nassert sum_num((-10,-20,-30))==-20.0\nassert sum_num((19,15,18))==17.333333333333332",
        "canonical_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) "
    },
    {
        "number": 887,
        "prompt": "Write a python function to check whether the given number is odd or not using bitwise operator.\ndef is_odd(n) : \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return (n & 0xAAAAAAAA)!= 0\n\n",
        "generated_testcode": "assert is_odd(1) == False\n",
        "test": "assert is_odd(5) == True\nassert is_odd(6) == False\nassert is_odd(7) == True",
        "canonical_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; "
    },
    {
        "number": 888,
        "prompt": "Write a function to substract the elements of the given nested tuples.\ndef substract_elements(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    tup_sub1 = (x - y for x, y in zip(test_tup1, test_tup2))\n    return tuple(tup_sub1)\n\n",
        "generated_testcode": "assert substract_elements((1, 2, 3), (4, 5, 6)) == (1, 2, 3)\n",
        "test": "assert substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((-5, -4), (1, -4), (1, 8), (-6, 7))\nassert substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4))) == ((-6, -4), (0, -4), (1, 8), (-6, 7))\nassert substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5))) == ((7, -4), (1, -4), (6, 8), (-2, 7))",
        "canonical_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) "
    },
    {
        "number": 889,
        "prompt": "Write a function to reverse each list in a given list of lists.\ndef reverse_list_lists(lists):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # Create an empty list to store the final result.\n    new_lists = []\n    for i in range(len(lists)):\n        # Reverse the list.\n        reversed_list = []\n        for j in range(len(lists[i])-1, -1, -1):\n            reversed_list.append(lists[i][j])\n        new_lists.append(reversed_list)\n    return new_lists\n\n",
        "generated_testcode": "assert reverse_list_lists(list_of_lists) == [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n\n",
        "test": "assert reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])==[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]\nassert reverse_list_lists([[1,2],[2,3],[3,4]])==[[2,1],[3,2],[4,3]]\nassert reverse_list_lists([[10,20],[30,40]])==[[20,10],[40,30]]",
        "canonical_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists "
    },
    {
        "number": 890,
        "prompt": "Write a python function to find the index of an extra element present in one sorted array.\ndef find_Extra(arr1,arr2,n) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(0, n-1) : \n        if arr1[i] == arr2[n - 1] : \n            print(\"Element found at index:\", i)\n            return True\n    return False\n\n",
        "generated_testcode": "assert find_Extra(arr1,arr2,n) == -1\n\n",
        "test": "assert find_Extra([1,2,3,4],[1,2,3],3) == 3\nassert find_Extra([2,4,6,8,10],[2,4,6,8],4) == 4\nassert find_Extra([1,3,5,7,9,11],[1,3,5,7,9],5) == 5",
        "canonical_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n "
    },
    {
        "number": 891,
        "prompt": "Write a python function to check whether the given two numbers have same number of digits or not.\ndef same_Length(A,B): \n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if A == B:\n        if len(str(A)) == len(str(B)):\n            return True\n        else:\n            return False\n    else:\n        return False\n\n",
        "generated_testcode": "assert same_Length(1234,1234) == True\n",
        "test": "assert same_Length(12,1) == False\nassert same_Length(2,2) == True\nassert same_Length(10,20) == True",
        "canonical_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; "
    },
    {
        "number": 892,
        "prompt": "Write a function to remove multiple spaces in a string.\ndef remove_spaces(text):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return \" \".join(text.split())\n\n",
        "generated_testcode": "assert remove_spaces(\"  hello world  \") == \"hello world\", \"Should return hello world\"\n",
        "test": "assert remove_spaces('python  program')==('python program')\nassert remove_spaces('python   programming    language')==('python programming language')\nassert remove_spaces('python                     program')==('python program')",
        "canonical_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))"
    },
    {
        "number": 893,
        "prompt": "Write a python function to get the last element of each sublist.\ndef Extract(lst): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in lst: \n        if len(i)>1: \n            print(i[-1]) \n  \n    \nExtract([[10, 20], [30, 40], [50, 60], [70, 80], [90, 100]]) \n\n",
        "generated_testcode": "assert Extract([[1,2,3], [4,5,6], [7,8,9]]) == 9\n",
        "test": "assert Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]]) == [3, 5, 9]\nassert Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']]) == ['z', 'm', 'b', 'v']\nassert Extract([[1, 2, 3], [4, 5]]) == [3, 5]",
        "canonical_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] "
    },
    {
        "number": 894,
        "prompt": "Write a function to convert the given string of float type into tuple.\ndef float_to_tuple(test_str):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    converted = tuple(map(float, test_str.split()))\n    return converted\n\n",
        "generated_testcode": "assert float_to_tuple(\"1.2\") == (1.2,)\n",
        "test": "assert float_to_tuple(\"1.2, 1.3, 2.3, 2.4, 6.5\") == (1.2, 1.3, 2.3, 2.4, 6.5)\nassert float_to_tuple(\"2.3, 2.4, 5.6, 5.4, 8.9\") == (2.3, 2.4, 5.6, 5.4, 8.9)\nassert float_to_tuple(\"0.3, 0.5, 7.8, 9.4\") == (0.3, 0.5, 7.8, 9.4)",
        "canonical_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) "
    },
    {
        "number": 895,
        "prompt": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.\ndef max_sum_subseq(A):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    n = len(A)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = A[0]\n    for i in range(1,n):\n        dp[i][0] = dp[i-1][0] + A[i]\n    for i in range(1,n):\n        for j in range(i):\n            if A[j] > A[i]:\n                dp[i][j] = max(dp[i][j], dp[i-1][j-1] + A[i])\n            else:\n                dp[i][j] = max(dp[i][j], dp[i-1][j])\n    max_sum = -1e9\n    for i in range(n):\n        max_sum = max(max_sum, dp[n-1][i])\n    return max_sum\n\n",
        "generated_testcode": "assert max_sum_subseq([1, 2, 3, 4, 5]) == 15\n",
        "test": "assert max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6]) == 26\nassert max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7]) == 28\nassert max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21]) == 44",
        "canonical_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]"
    },
    {
        "number": 896,
        "prompt": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.\ndef last(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return n[-1]\n\n",
        "generated_testcode": "assert last([(1, 2), (3, 4), (5, 6)]) == (5, 6), \"Should be (5, 6)\"\n",
        "test": "assert sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])==[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)] \nassert sort_list_last([(9,8), (4, 7), (3,5), (7,9), (1,2)])==[(1,2), (3,5), (4,7), (9,8), (7,9)] \nassert sort_list_last([(20,50), (10,20), (40,40)])==[(10,20),(40,40),(20,50)] ",
        "canonical_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)"
    },
    {
        "number": 897,
        "prompt": "Write a python function to check whether the word is present in a given sentence or not.\ndef is_Word_Present(sentence,word): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    #take the sentence and word as arguments \n    #loop over the sentence and check if the word is present or not \n    #if found return true else return false \n    if word in sentence: \n        return True\n    else: \n        return False\n        \n# Provide different values for sentence and word and test your program. \nsentence = \"This is a python program to check if a word is present in a given sentence or not\"\nword = \"program\"\nif is_Word_Present(sentence,word): \n    print(\"Yes\")\nelse: \n    print(\"No\")\n\n",
        "generated_testcode": "assert is_Word_Present(\"I love Python\",\"Python\") == True\n",
        "test": "assert is_Word_Present(\"machine learning\",\"machine\") == True\nassert is_Word_Present(\"easy\",\"fun\") == False\nassert is_Word_Present(\"python language\",\"code\") == False",
        "canonical_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False"
    },
    {
        "number": 898,
        "prompt": "Write a function to extract specified number of elements from a given list, which follow each other continuously.\ndef extract_elements(numbers, n):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    res = []\n    i = 0\n    while len(res) < n:\n        res.append(numbers[i])\n        i += 1\n    return res\n\n",
        "generated_testcode": "assert extract_elements([1, 2, 3, 4, 5], 2) == [1, 2]\n",
        "test": "assert extract_elements([1, 1, 3, 4, 4, 5, 6, 7],2)==[1, 4]\nassert extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7],4)==[4]\nassert extract_elements([0,0,0,0,0],5)==[0]",
        "canonical_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result"
    },
    {
        "number": 899,
        "prompt": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.\ndef check(arr,n): \n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "\tfor i in range(n-1): \n\t\tif arr[i] > arr[i+1]: \n\t\t\treturn False\n\treturn True\n\n",
        "generated_testcode": "assert check([1,2,3,4,5],5) == True\n",
        "test": "assert check([3,2,1,2,3,4],6) == True\nassert check([2,1,4,5,1],5) == True\nassert check([1,2,2,1,2,3],6) == True",
        "canonical_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True"
    },
    {
        "number": 900,
        "prompt": "Write a function where a string will start with a specific number.\ndef match_num(string):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    \n    if string[0] == '0':\n        return False\n    \n    elif int(string) < 0:\n        return False\n    \n    else:\n        return True\n\n",
        "generated_testcode": "assert match_num(\"1\") == True\n",
        "test": "assert match_num('5-2345861')==True\nassert match_num('6-2345861')==False\nassert match_num('78910')==False",
        "canonical_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 901,
        "prompt": "Write a function to find the smallest multiple of the first n numbers.\ndef smallest_multiple(n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "  # The smallest multiple of n numbers is the product of n numbers multiplied\n  # by the smallest number in the list, since the smallest multiple of any\n  # number is that number multiplied by any other number.\n  return n * min(numbers)\n\n",
        "generated_testcode": "assert smallest_multiple(3) == 6\n",
        "test": "assert smallest_multiple(13)==360360\nassert smallest_multiple(2)==2\nassert smallest_multiple(1)==1",
        "canonical_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i"
    },
    {
        "number": 902,
        "prompt": "Write a function to combine two dictionaries by adding values for common keys.\ndef add_dict(d1,d2):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    result = {}\n    for k, v in d1.items():\n        result[k] = v\n    for k, v in d2.items():\n        if k in result:\n            result[k] += v\n        else:\n            result[k] = v\n    return result\n\n",
        "generated_testcode": "assert add_dict({'a': 1, 'b': 2}, {'a': 2, 'c': 3}) == {'a': 3, 'b': 2, 'c': 3}\n",
        "test": "assert add_dict({'a': 100, 'b': 200, 'c':300},{'a': 300, 'b': 200, 'd':400})==({'b': 400, 'd': 400, 'a': 400, 'c': 300}) \nassert add_dict({'a': 500, 'b': 700, 'c':900},{'a': 500, 'b': 600, 'd':900})==({'b': 1300, 'd': 900, 'a': 1000, 'c': 900}) \nassert add_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})==({'b': 1800, 'd': 1800, 'a': 1800})",
        "canonical_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict"
    },
    {
        "number": 903,
        "prompt": "Write a python function to count the total unset bits from 1 to n.\ndef count_Unset_Bits(n) :  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    \"\"\" \n    Count the total unset bits \n    from 1 to n using XOR. \n    It will be helpful to use \n    1's complement \n    \"\"\"\n    \n    res = 0\n    while n: \n        res += n & 1\n        n >>= 1\n    \n    return res\n\n",
        "generated_testcode": "assert count_Unset_Bits(1) == 0\n",
        "test": "assert count_Unset_Bits(2) == 1\nassert count_Unset_Bits(5) == 4\nassert count_Unset_Bits(14) == 17",
        "canonical_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  "
    },
    {
        "number": 904,
        "prompt": "Write a function to return true if the given number is even else return false.\ndef even_num(x):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if x % 2 == 0:\n        return True\n    else:\n        return False\n\n",
        "generated_testcode": "assert even_num(2) == True\n",
        "test": "assert even_num(13.5)==False\nassert even_num(0)==True\nassert even_num(-9)==False",
        "canonical_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False"
    },
    {
        "number": 905,
        "prompt": "Write a python function to find the sum of squares of binomial co-efficients.\ndef factorial(start,end): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if (start > end): \n        return 0\n    else: \n        sum = 1\n        for i in range(start,end+1): \n            sum = sum * i\n    return sum\n\n",
        "generated_testcode": "assert factorial(1,2) == 1\n",
        "test": "assert sum_of_square(4) == 70\nassert sum_of_square(5) == 252\nassert sum_of_square(2) == 6",
        "canonical_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) "
    },
    {
        "number": 906,
        "prompt": "Write a function to extract year, month and date from a url by using regex.\ndef extract_date(url):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    date_pattern = re.compile(r'(\\d{4})-(\\d{2})-(\\d{2})')\n    result = date_pattern.search(url)\n    return result.group(1, 2, 3)\n\n",
        "generated_testcode": "assert extract_date",
        "test": "assert extract_date(\"https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/\") == [('2016', '09', '02')]\nassert extract_date(\"https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/\") == [('2020', '11', '03')]\nassert extract_date(\"https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms\") == [('2020', '12', '29')]",
        "canonical_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)"
    },
    {
        "number": 907,
        "prompt": "Write a function to print the first n lucky numbers.\ndef lucky_num(n):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \"\"\"\n    Print the first n lucky numbers.\n    :param n:\n    :return:\n    \"\"\"\n    f = open('lucky_num.txt', 'w')\n    for i in range(n):\n        f.write(str(randint(1, 100)) + '\\n')\n    f.close()\n\n",
        "generated_testcode": "assert lucky_num(1) == 1\n",
        "test": "assert lucky_num(10)==[1, 3, 7, 9, 13, 15, 21, 25, 31, 33] \nassert lucky_num(5)==[1, 3, 7, 9, 13]\nassert lucky_num(8)==[1, 3, 7, 9, 13, 15, 21, 25]",
        "canonical_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]"
    },
    {
        "number": 908,
        "prompt": "Write a function to find the fixed point in the given array.\ndef find_fixed_point(arr, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    for i in range(n):\n        if arr[i] == i: \n            return i\n    return -1\n  \n# Driver Code \narr = [-15, -10, 0, 3, 7, 11, 15] \nn = len(arr) \nprint(\"Fixed Point is at index\", \n            find_fixed_point(arr, n)) \n",
        "generated_testcode": "assert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 10) == True\n",
        "test": "assert find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100],9) == 3\nassert find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8],8) == -1\nassert find_fixed_point([0, 2, 5, 8, 17],5) == 0",
        "canonical_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1"
    },
    {
        "number": 909,
        "prompt": "Write a function to find the previous palindrome of a specified number.\ndef previous_palindrome(num):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  while num > 0:\n    temp = num\n    reversed_num = 0\n    while temp > 0:\n      reversed_num = reversed_num * 10 + temp % 10\n      temp = temp // 10\n    if num == reversed_num:\n      return num\n    else:\n      num = num - 1\n\n",
        "generated_testcode": "assert previous_palindrome(121) == 121\n",
        "test": "assert previous_palindrome(99)==88\nassert previous_palindrome(1221)==1111\nassert previous_palindrome(120)==111",
        "canonical_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    },
    {
        "number": 910,
        "prompt": "Write a function to validate a gregorian date.\ndef check_date(m, d, y):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if m == 2 and y%4 == 0:\n        if (y%100!= 0) or (y%400 == 0):\n            if d > 29:\n                return False\n        else:\n            if d > 28:\n                return False\n        return True\n    else:\n        if m == 2:\n            if d > 28:\n                return False\n        else:\n            if m > 2:\n                if d > 29:\n                    return False\n    if d == 31:\n        if m == 4 or m == 6 or m == 9 or m == 11:\n            if d == 30:\n                return True\n        else:\n            if m == 3:\n                return True\n    else:\n        return True\n\n",
        "generated_testcode": "assert check_date(1, 1, 2000) == True\n",
        "test": "assert check_date(11,11,2002)==True\nassert check_date(13,11,2002)==False\nassert check_date('11','11','2002')==True",
        "canonical_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False"
    },
    {
        "number": 911,
        "prompt": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.\ndef maximum_product(nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    heap = list()\n    \n    for i in range(3):\n        heappush(heap, nums[i])\n    \n    max_product = -2147483648\n    \n    for i in range(3, len(nums)):\n        first_element = heappop(heap)\n        second_element = heappop(heap)\n        \n        new_element = nums[i]\n        \n        max_product = max(max_product, new_element * first_element * second_element)\n        \n        heappush(heap, new_element)\n        \n    return max_product\n\n",
        "generated_testcode": "assert maximum_product([1, 2, 3, 4, 5]) == 120\n",
        "test": "assert maximum_product( [12, 74, 9, 50, 61, 41])==225700\nassert maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])==414375\nassert maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==2520",
        "canonical_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])"
    },
    {
        "number": 912,
        "prompt": "Write a function to find ln, m lobb number.\ndef binomial_coeff(n, k): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    res = 1\n    if k > n:\n        k = n\n    for i in range(0, k): \n        res = res * (n - i) \n        res = res // (i + 1) \n    return res \nn = 3\nk = 3\nprint (\"Binomial Coefficient : \", binomial_coeff(n, k)) \n\n",
        "generated_testcode": "assert binomial_coeff(5, 2) == 5\n",
        "test": "assert int(lobb_num(5, 3)) == 35\nassert int(lobb_num(3, 2)) == 5\nassert int(lobb_num(4, 2)) == 20",
        "canonical_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))"
    },
    {
        "number": 913,
        "prompt": "Write a function to check for a number at the end of a string.\ndef end_num(string):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  if len(string)>=1 and string[len(string)-1].isdigit():\n    return True\n  else:\n    return False\n\n",
        "generated_testcode": "assert end_num('Hi') == False\n",
        "test": "assert end_num('abcdef')==False\nassert end_num('abcdef7')==True\nassert end_num('abc')==False",
        "canonical_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False"
    },
    {
        "number": 914,
        "prompt": "Write a python function to check whether the given string is made up of two alternating characters or not.\ndef is_Two_Alter(s):  \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for i in range(0, len(s)-1): \n        if s[i] == s[i+1]:\n            return False\n    return True\n \n \n# Input: This is a python program to check whether the given string is made up of two alternating characters or not.\n# Input: Hello world\n# Output: True\n# Input: Hello, world\n# Output: False\n \n# Solution:\n \n# Python3 program to check whether a string is made up of two alternating characters or not\n \n# Function to check whether the given string is made up of two alternating characters or not\ndef is_alternating(s):\n    for i in range(0, len(s)-1):\n        if s[i] == s[i+1]:\n            return True\n    return False\n \n \n# Driver code\ns = \"Hello world\"\n \nif (is_alternating(s)):\n    print(\"String is made up of two alternating characters\")\nelse:\n    print(\"String is not made up of two alternating characters\")\n \ns = \"Hello, world\"\n \nif (is_alternating(s)):\n    print(\"String is made up of two alternating characters\")\nelse:\n    print(\"String is not made up of two alternating characters\")\n \n# This code is contributed by mits\n",
        "generated_testcode": "assert is_Two_Alter(\"abc\") == True, \"Should be True\"\n",
        "test": "assert is_Two_Alter(\"abab\") == True\nassert is_Two_Alter(\"aaaa\") == False\nassert is_Two_Alter(\"xyz\") == False",
        "canonical_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True"
    },
    {
        "number": 915,
        "prompt": "Write a function to rearrange positive and negative numbers in a given array using lambda function.\ndef rearrange_numbs(array_nums):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(array_nums, key=lambda x: x > 0, reverse=True) + sorted(array_nums, key=lambda x: x < 0, reverse=True)\n\n",
        "generated_testcode": "assert rearrange_numbs(array_nums) == [-1, -2, -3, -4, -5, -6, -7, -8, -9, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n",
        "test": "assert rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])==[2, 5, 7, 8, 9, -10, -3, -1]\nassert rearrange_numbs([10,15,14,13,-18,12,-20])==[10, 12, 13, 14, 15, -20, -18]\nassert rearrange_numbs([-20,20,-10,10,-30,30])==[10, 20, 30, -30, -20, -10]",
        "canonical_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result "
    },
    {
        "number": 916,
        "prompt": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.\ndef find_triplet_array(A, arr_size, sum): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    A.sort() \n    for i in range(arr_size - 2): \n        l = i + 1\n        r = arr_size - 1\n        while l < r: \n            if A[i] + A[l] + A[r] == sum: \n                return True\n            elif A[i] + A[l] + A[r] < sum: \n                l += 1\n            else: \n                r -= 1\n    return False\n\n",
        "generated_testcode": "assert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == True\n",
        "test": "assert find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22) == (4, 10, 8)\nassert find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24) == (12, 3, 9)\nassert find_triplet_array([1, 2, 3, 4, 5], 5, 9) == (1, 3, 5)",
        "canonical_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False"
    },
    {
        "number": 917,
        "prompt": "Write a function to find the sequences of one upper case letter followed by lower case letters.\ndef text_uppercase_lowercase(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    sequences = []\n    for i in range(len(text)):\n        if text[i].isupper() and i+1 < len(text) and text[i+1].islower():\n            sequences.append(text[i]+text[i+1])\n    return sequences\n\n",
        "generated_testcode": "assert text_uppercase_lowercase(\"HELLO WORLD\") == \"HELLO WORLD\"\n",
        "test": "assert text_uppercase_lowercase(\"AaBbGg\")==('Found a match!')\nassert text_uppercase_lowercase(\"aA\")==('Not matched!')\nassert text_uppercase_lowercase(\"PYTHON\")==('Not matched!')",
        "canonical_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 918,
        "prompt": "Write a function to count coin change.\ndef coin_change(S, m, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    dp = [[0 for i in range(m)] for j in range(n+1)] \n    for i in range(m): \n        dp[0][i] = 1\n    for i in range(1, n+1): \n        for j in range(m): \n            if j >= S[i-1]: \n                dp[i][j] = dp[i-1][j-S[i-1]] + dp[i][j] \n            else: \n                dp[i][j] = dp[i][j] \n    return dp[n][m-1] \n\n",
        "generated_testcode": "assert coin_change(S = 5, m = 3, n = 8) == 3\n",
        "test": "assert coin_change([1, 2, 3],3,4)==4\nassert coin_change([4,5,6,7,8,9],6,9)==2\nassert coin_change([4,5,6,7,8,9],6,4)==1",
        "canonical_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] "
    },
    {
        "number": 919,
        "prompt": "Write a python function to multiply all items in the list.\ndef multiply_list(items):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    total = 1\n    for item in items:\n        total *= item\n    return total\n\n",
        "generated_testcode": "assert multiply_list([1,2,3,4]) == 24\n",
        "test": "assert multiply_list([1,-2,3]) == -6\nassert multiply_list([1,2,3,4]) == 24\nassert multiply_list([3,1,2,3]) == 18",
        "canonical_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot"
    },
    {
        "number": 920,
        "prompt": "Write a function to remove all tuples with all none values in the given tuple list.\ndef remove_tuple(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    new_list = []\n    for i in test_list:\n        if not i:\n            continue\n        new_list.append(i)\n    return new_list\n\n",
        "generated_testcode": "assert remove_tuple(test_list) == None\n\n",
        "test": "assert remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None, )] ) == '[(None, 2), (3, 4), (12, 3)]'\nassert remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None,1 )] ) == '[(3, 6), (17, 3), (None, 1)]'\nassert remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None )] ) == '[(1, 2), (2, None), (3, None), (24, 3)]'",
        "canonical_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) "
    },
    {
        "number": 921,
        "prompt": "Write a function to perform chunking of tuples each of size n.\ndef chunk_tuples(test_tup, N):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return [test_tup[i:i+N] for i in range(0, len(test_tup), N)]\n\n",
        "generated_testcode": "assert chunk_tuples(test_tup, N) == [(0, 1), (1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10), (10, 11), (11, 12), (12, 13), (13, 14), (14, 15), (15, 16), (16, 17), (17, 18), (1",
        "test": "assert chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3) == [(10, 4, 5), (6, 7, 6), (8, 3, 4)]\nassert chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2) == [(1, 2), (3, 4), (5, 6), (7, 8), (9,)]\nassert chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4) == [(11, 14, 16, 17), (19, 21, 22, 25)]",
        "canonical_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) "
    },
    {
        "number": 922,
        "prompt": "Write a function to find a pair with the highest product from a given array of integers.\ndef max_product(arr): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(arr) \n    if n < 1: \n        return\n    res = arr[0]\n    m = arr[0] \n    for i in range(1, n): \n        if arr[i] < 0: \n            m = max(arr[i], m) \n            res = max(res, m * arr[i]) \n        else: \n            m = min(arr[i], m) \n            res = max(res, m * arr[i]) \n    print(res)\n\n",
        "generated_testcode": "assert max_product([1, 2, 3, 4, 5]) == 120\n",
        "test": "assert max_product([1, 2, 3, 4, 7, 0, 8, 4])==(7, 8)\nassert max_product([0, -1, -2, -4, 5, 0, -6])==(-4, -6)\nassert max_product([1, 3, 5, 6, 8, 9])==(8,9)",
        "canonical_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   "
    },
    {
        "number": 923,
        "prompt": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.\ndef super_seq(X, Y, m, n):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    l = min(m, n)\n    for i in range(l):\n        if X[i] == Y[i]:\n            return l - i\n    return l\n\n",
        "generated_testcode": "assert super_seq('abc', 'ac', 3, 3) == 3\n",
        "test": "assert super_seq(\"AGGTAB\", \"GXTXAYB\", 6, 7) == 9\nassert super_seq(\"feek\", \"eke\", 4, 3) == 5\nassert super_seq(\"PARRT\", \"RTA\", 5, 3) == 6",
        "canonical_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))"
    },
    {
        "number": 924,
        "prompt": "Write a function to find maximum of two numbers.\ndef max_of_two( x, y ):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "   return x if x > y else y\n\n",
        "generated_testcode": "assert max_of_two(1, 2) == 2\n",
        "test": "assert max_of_two(10,20)==20\nassert max_of_two(19,15)==19\nassert max_of_two(-10,-20)==-10",
        "canonical_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y"
    },
    {
        "number": 925,
        "prompt": "Write a python function to calculate the product of all the numbers of a given tuple.\ndef mutiple_tuple(nums):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    product = 1\n    for num in nums:\n        product *= num\n    return product\n\n",
        "generated_testcode": "assert mutiple_tuple((1,2,3,4)) == 24\n",
        "test": "assert mutiple_tuple((4, 3, 2, 2, -1, 18)) == -864\nassert mutiple_tuple((1,2,3)) == 6\nassert mutiple_tuple((-2,-4,-6)) == -48",
        "canonical_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product"
    },
    {
        "number": 926,
        "prompt": "Write a function to find n-th rencontres number.\ndef binomial_coeffi(n, k): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if n > k: \n        return 0\n    return math.factorial(n) // math.factorial(k) // math.factorial(n-k) \nfor _ in range(int(input())):\n    n, k = map(int, input().split())\n    print(binomial_coeffi(n,k))\n\n",
        "generated_testcode": "assert binomial_coeffi(5, 2) == 5\n",
        "test": "assert rencontres_number(7, 2) == 924\nassert rencontres_number(3, 0) == 2\nassert rencontres_number(3, 1) == 3",
        "canonical_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))"
    },
    {
        "number": 927,
        "prompt": "Write a function to calculate the height of the given binary tree.\n\tdef __init__(self, data): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\t\tself.data = data \n\t\tself.left = None\n\t\tself.right = None\n\n",
        "generated_testcode": "assert(height(root) == 3)\n\n",
        "test": "assert (max_height(root)) == 3\nassert (max_height(root1)) == 5 \nassert (max_height(root2)) == 4",
        "canonical_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1"
    },
    {
        "number": 928,
        "prompt": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\ndef change_date_format(dt):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    import datetime\n    return datetime.datetime.strptime(dt, '%Y-%m-%d').strftime(\"%d-%m-%Y\")\n\n",
        "generated_testcode": "assert change_date_format(\"2020-01-01\") == \"01-01-2020\"\n",
        "test": "assert change_date_format('2026-01-02')=='02-01-2026'\nassert change_date_format('2021-01-04')=='04-01-2021'\nassert change_date_format('2030-06-06')=='06-06-2030'",
        "canonical_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)"
    },
    {
        "number": 929,
        "prompt": "Write a function to count repeated items of a tuple.\ndef count_tuplex(tuplex,value):  \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    for i in tuplex:\n        if i == value:\n            count += 1\n    return count\n\n",
        "generated_testcode": "assert count_tuplex((1,2,3,4,5),1) == 4\n",
        "test": "assert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),4)==3\nassert count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7),2)==2\nassert count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7),7)==4",
        "canonical_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count"
    },
    {
        "number": 930,
        "prompt": "Write a function that matches a string that has an a followed by zero or more b's by using regex.\ndef text_match(text):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    import re\n    \n    return bool(re.search(r'(^a){0,}', text))\n    \n#Test Cases:\nprint(text_match('a'))\n# should be True\nprint(text_match('a'))\n# should be True\nprint(text_match('aaaaa'))\n# should be True\nprint(text_match('aaab'))\n# should be False\n\n",
        "generated_testcode": "assert text_match(\"ab\") == True\n",
        "test": "assert text_match(\"msb\") == 'Not matched!'\nassert text_match(\"a0c\") == 'Found a match!'\nassert text_match(\"abbc\") == 'Found a match!'",
        "canonical_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')"
    },
    {
        "number": 931,
        "prompt": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.\ndef sum_series(number):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return sum(number * (number+1) * (number+2))\n\n",
        "generated_testcode": "assert sum_series(5) == 55, \"Should be 55\"\n",
        "test": "assert sum_series(7)==784\nassert sum_series(5)==225\nassert sum_series(15)==14400",
        "canonical_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total"
    },
    {
        "number": 932,
        "prompt": "Write a function to remove duplicate words from a given list of strings.\ndef remove_duplic_list(l):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    #your code here\n    l = sorted(l)\n    l = list(set(l))\n    return l\n\n",
        "generated_testcode": "assert remove_duplic_list([\"hello\", \"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]) == [\"hello\", \"hello\", \"hello\", \"hello\", \"hello\"]\n",
        "test": "assert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\"])==['Python', 'Exercises', 'Practice', 'Solution']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"Java\"])==['Python', 'Exercises', 'Practice', 'Solution', 'Java']\nassert remove_duplic_list([\"Python\", \"Exercises\", \"Practice\", \"Solution\", \"Exercises\",\"C++\",\"C\",\"C++\"])==['Python', 'Exercises', 'Practice', 'Solution','C++','C']",
        "canonical_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp"
    },
    {
        "number": 933,
        "prompt": "Write a function to convert camel case string to snake case string by using regex.\ndef camel_to_snake(text):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    import re\n    s1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\n    return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', s1).lower()\n\n",
        "generated_testcode": "assert camel_to_snake(\"camelCaseString\") == \"camel_case_string\"\n",
        "test": "assert camel_to_snake('GoogleAssistant') == 'google_assistant'\nassert camel_to_snake('ChromeCast') == 'chrome_cast'\nassert camel_to_snake('QuadCore') == 'quad_core'",
        "canonical_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 934,
        "prompt": "Write a function to find the nth delannoy number.\ndef dealnnoy_num(n, m): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  return (n**2 + m**2) / (2*n) \n#test case\nprint(dealnnoy_num(3, 4))\n\n",
        "generated_testcode": "assert dealnnoy_num(1, 1) == 1\n",
        "test": "assert dealnnoy_num(3, 4) == 129\nassert dealnnoy_num(3, 3) == 63\nassert dealnnoy_num(4, 5) == 681",
        "canonical_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)"
    },
    {
        "number": 935,
        "prompt": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.\ndef series_sum(number):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(1,number+1):\n        sum += i * i\n    return sum\n# x = series_sum(n)\n# print(x)\n\n",
        "generated_testcode": "assert series_sum(5) == 55\n",
        "test": "assert series_sum(6)==91\nassert series_sum(7)==140\nassert series_sum(12)==650",
        "canonical_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total"
    },
    {
        "number": 936,
        "prompt": "Write a function to re-arrange the given tuples based on the given ordered list.\ndef re_arrange_tuples(test_list, ord_list):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    test_list = sorted(test_list, key=lambda x: x[0])\n    ordered_list = []\n    for elem in ord_list:\n        ordered_list.append(test_list[elem-1])\n    return ordered_list\n\n",
        "generated_testcode": "assert re_arrange_tuples([(1, 2), (3, 4), (5, 6)], [1, 2, 3]) == [(1, 2), (3, 4), (5, 6)]\n",
        "test": "assert re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)],  [1, 4, 2, 3]) == [(1, 9), (4, 3), (2, 10), (3, 2)]\nassert re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)],  [3, 4, 2, 3]) == [(3, 11), (4, 3), (2, 10), (3, 11)]\nassert re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)],  [2, 5, 3, 6]) == [(2, 4), (5, 7), (3, 8), (6, 3)]",
        "canonical_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) "
    },
    {
        "number": 937,
        "prompt": "Write a function to count the most common character in a given string.\ndef max_char(str1):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    result_list = []\n    for i in range(len(str1)):\n        result = {}\n        for j in range(len(str1)):\n            if str1[i] in result.keys():\n                result[str1[i]] += 1\n            else:\n                result[str1[i]] = 1\n        result_list.append((max(result.values()), result))\n    return sorted(result_list, key=lambda x: x[0], reverse=True)[0][1]\n\n",
        "generated_testcode": "assert max_char(\"hello\") == \"e\"\n",
        "test": "assert max_char(\"hello world\")==('l')\nassert max_char(\"hello \")==('l')\nassert max_char(\"python pr\")==('p')",
        "canonical_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char"
    },
    {
        "number": 938,
        "prompt": "Write a function to find three closest elements from three sorted arrays.\ndef find_closet(A, B, C, p, q, r): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    \n    # Corner cases\n    if (q < p): \n        p, q = q, p \n  \n    if (r < q): \n        r, q = q, r \n  \n    # when r is smaller than p, \n    # then q cannot be the closest element \n    if (r < p): \n        return None\n  \n    # Initialize the minimum distance  \n    min_dist = abs(C[r] - D[q]) + abs(C[p] - D[q]) + abs(C[r] - D[p]) \n  \n    # Pick the first element from the three array one by one \n    for i in range(p, r): \n        dist = abs(C[r] - D[i]) + abs(C[p] - D[i]) + abs(C[r] - D[p]) \n        if (dist < min_dist): \n            min_dist = dist \n            index = i \n  \n    # Return the index of closest element \n    return index \n  \n# Driver code \nC = [2, 3, 4, 5, 10, 12]\nD = [3, 4, 5, 8, 12, 15]\nA = [2, 3, 5] \nB = [4, 5, 6] \nA = [2, 3, 5]\nB = [4, 5, 6]\nC = [2, 3, 5]\nD = [4, 5, 6]\nprint",
        "generated_testcode": "assert find_closet([1, 2, 3], [4, 5, 6], [7, 8, 9], 0, 1, 2) == (1, 2, 3)\n",
        "test": "assert find_closet([1, 4, 10],[2, 15, 20],[10, 12],3,3,2) == (10, 15, 10)\nassert find_closet([20, 24, 100],[2, 19, 22, 79, 800],[10, 12, 23, 24, 119],3,5,5) == (24, 22, 23)\nassert find_closet([2, 5, 11],[3, 16, 21],[11, 13],3,3,2) == (11, 16, 11)",
        "canonical_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]"
    },
    {
        "number": 939,
        "prompt": "Write a function to sort a list of dictionaries using lambda function.\ndef sorted_models(models):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return sorted(models, key = lambda i: i[\"year\"])\n\n",
        "generated_testcode": "assert sorted_models(models) == sorted(models, key=lambda x: x['model'])\n\n",
        "test": "assert sorted_models([{'make':'Nokia', 'model':216, 'color':'Black'}, {'make':'Mi Max', 'model':2, 'color':'Gold'}, {'make':'Samsung', 'model': 7, 'color':'Blue'}])==[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]\nassert sorted_models([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])==([{'make':'Vivo', 'model':20,'color':'Blue'},{'make': 'oppo','model':17,'color':'Gold'},{'make':'Apple','model':11,'color':'red'}])\nassert sorted_models([{'make':'micromax','model':40,'color':'grey'},{'make':'poco','model':60,'color':'blue'}])==([{'make':'poco','model':60,'color':'blue'},{'make':'micromax','model':40,'color':'grey'}])",
        "canonical_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models"
    },
    {
        "number": 940,
        "prompt": "Write a function to sort the given array by using heap sort.\ndef heap_sort(arr):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    def swap(i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n",
        "generated_testcode": "assert heap_sort([1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5]\n",
        "test": "assert heap_sort([12, 2, 4, 5, 2, 3]) == [2, 2, 3, 4, 5, 12]\nassert heap_sort([32, 14, 5, 6, 7, 19]) == [5, 6, 7, 14, 19, 32]\nassert heap_sort([21, 15, 29, 78, 65]) == [15, 21, 29, 65, 78]",
        "canonical_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n"
    },
    {
        "number": 941,
        "prompt": "Write a function to count the elements in a list until an element is a tuple.\ndef count_elim(num):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    count = 0\n    while num!= 1:\n        count += 1\n        num = count_to_tuple(count)\n    return count\n\n",
        "generated_testcode": "assert count_elim(1) == 1\n",
        "test": "assert count_elim([10,20,30,(10,20),40])==3\nassert count_elim([10,(20,30),(10,20),40])==1\nassert count_elim([(10,(20,30,(10,20),40))])==0",
        "canonical_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim"
    },
    {
        "number": 942,
        "prompt": "Write a function to check if any list element is present in the given list.\ndef check_element(test_tup, check_list):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    for elem in test_tup:\n        if elem in check_list:\n            return True\n    return False\n\n",
        "generated_testcode": "assert check_element((1, 2, 3), [1, 2, 3]) == True\n",
        "test": "assert check_element((4, 5, 7, 9, 3),  [6, 7, 10, 11]) == True\nassert check_element((1, 2, 3, 4),  [4, 6, 7, 8, 9]) == True\nassert check_element((3, 2, 1, 4, 5),  [9, 8, 7, 6]) == False",
        "canonical_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) "
    },
    {
        "number": 943,
        "prompt": "Write a function to combine two given sorted lists using heapq module.\ndef combine_lists(num1,num2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    heapq.heapify(num1)\n    heapq.heapify(num2)\n\n",
        "generated_testcode": "assert combine_lists([1,2,3,4,5], [6,7,8,9,10]) == [1,2,3,4,5,6,7,8,9,10]\n",
        "test": "assert combine_lists([1, 3, 5, 7, 9, 11],[0, 2, 4, 6, 8, 10])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]\nassert combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])==[1,2,3,5,5,6,7,8,9,11]\nassert combine_lists([1,3,7],[2,4,6])==[1,2,3,4,6,7]",
        "canonical_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists"
    },
    {
        "number": 944,
        "prompt": "Write a function to separate and print the numbers and their position of a given string.\ndef num_position(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    word_list = text.split()\n    for word in word_list:\n        print(\"{0}: {1}\".format(word, word_list.index(word)), end ='')\n\n",
        "generated_testcode": "assert num_position(\"The quick brown fox jumps over the lazy dog\") == \"1. brown 2. fox 3. jumps 4. over 5. lazy 6. dog\"\n\n",
        "test": "assert num_position(\"there are 70 flats in this apartment\")==10\nassert num_position(\"every adult have 32 teeth\")==17\nassert num_position(\"isha has 79 chocolates in her bag\")==9",
        "canonical_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()"
    },
    {
        "number": 945,
        "prompt": "Write a function to convert the given tuples into set.\ndef tuple_to_set(t):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "  return set(t)\n\n",
        "generated_testcode": "assert tuple_to_set((1, 2, 3)) == {1, 2, 3}\n",
        "test": "assert tuple_to_set(('x', 'y', 'z') ) == {'y', 'x', 'z'}\nassert tuple_to_set(('a', 'b', 'c') ) == {'c', 'a', 'b'}\nassert tuple_to_set(('z', 'd', 'e') ) == {'d', 'e', 'z'}",
        "canonical_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) "
    },
    {
        "number": 946,
        "prompt": "Write a function to find the most common elements and their counts of a specified text.\ndef most_common_elem(s,a):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    a = a.lower()\n    count = []\n    s = s.lower()\n    for i in s.split(a):\n        if i in s:\n            count.append(s.count(i))\n        else:\n            pass\n    return max(count)\n\n",
        "generated_testcode": "assert most_common_elem(\"aabbccdddd\", \"a\") == \"a\"\n",
        "test": "assert most_common_elem('lkseropewdssafsdfafkpwe',3)==[('s', 4), ('e', 3), ('f', 3)] \nassert most_common_elem('lkseropewdssafsdfafkpwe',2)==[('s', 4), ('e', 3)]\nassert most_common_elem('lkseropewdssafsdfafkpwe',7)==[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]",
        "canonical_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem"
    },
    {
        "number": 947,
        "prompt": "Write a python function to find the length of the shortest word.\ndef len_log(list1):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    if len(list1) == 0:\n        return 0\n    else:\n        return 1 + len_log(list1[1:])\n#print(len_log(['python', 'program']))\n\n",
        "generated_testcode": "assert len_log(['hello', 'world', 'hi']) == 3\n",
        "test": "assert len_log([\"win\",\"lose\",\"great\"]) == 3\nassert len_log([\"a\",\"ab\",\"abc\"]) == 1\nassert len_log([\"12\",\"12\",\"1234\"]) == 2",
        "canonical_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min"
    },
    {
        "number": 948,
        "prompt": "Write a function to get an item of a tuple.\ndef get_item(tup1,index):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "\treturn tup1[index]\n\n",
        "generated_testcode": "assert get_item((1,2,3),0) == 1\n",
        "test": "assert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),3)==('e')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-4)==('u')\nassert get_item((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),-3)==('r')",
        "canonical_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item"
    },
    {
        "number": 949,
        "prompt": "Write a function to sort the given tuple list basis the total digits in tuple.\ndef count_digs(tup):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": true,
        "answer": "    digs = 0\n    for i in tup:\n        if str(i).isdigit():\n            digs += 1\n    return digs\n\n",
        "generated_testcode": "assert count_digs((1, 2, 3, 4, 5, 6, 7, 8, 9, 10)) == 10\n",
        "test": "assert sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)] ) == '[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'\nassert sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)] ) == '[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'\nassert sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)] ) == '[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'",
        "canonical_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))"
    },
    {
        "number": 950,
        "prompt": "Write a function to display sign of the chinese zodiac for given year.\ndef chinese_zodiac(year):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # To display sign of the zodiac\n    zodiac_name = (u\"\u6469\u7faf\u5ea7\", u\"\u6c34\u74f6\u5ea7\", u\"\u53cc\u9c7c\u5ea7\", u\"\u767d\u7f8a\u5ea7\", u\"\u91d1\u725b\u5ea7\", u\"\u53cc\u5b50\u5ea7\",\n                   u\"\u5de8\u87f9\u5ea7\", u\"\u72ee\u5b50\u5ea7\", u\"\u5904\u5973\u5ea7\", u\"\u5929\u79e4\u5ea7\", u\"\u5929\u874e\u5ea7\", u\"\u5c04\u624b\u5ea7\")\n    zodiac_days = ((1, 20), (2, 19), (3, 21), (4, 21), (5, 21), (6, 22),\n                   (7, 23), (8, 23), (9, 23), (10, 23), (11, 23), (12, 23))\n    chinese_zodiac_name = zodiac_name[(year % 12) % 12]\n    print(chinese_zodiac_name)\n\n",
        "generated_testcode": "assert chinese_zodiac(1986) == 'Dragon'\n",
        "test": "assert chinese_zodiac(1997)==('Ox')\nassert chinese_zodiac(1998)==('Tiger')\nassert chinese_zodiac(1994)==('Dog')",
        "canonical_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign"
    },
    {
        "number": 951,
        "prompt": "Write a function to find the maximum of similar indices in two lists of tuples.\ndef max_similar_indices(test_list1, test_list2):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    # O(n^2) time | O(n) space\n    max_index = -1\n    max_val = -1\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                if max_val < test_list2[j]:\n                    max_val = test_list2[j]\n                    max_index = i\n    return max_index, max_val\n\n",
        "generated_testcode": "assert max_similar_indices([(1, 2), (3, 4), (5, 6)], [(1, 2), (3, 4), (5, 6)]) == (0, 2)\n",
        "test": "assert max_similar_indices([(2, 4), (6, 7), (5, 1)],[(5, 4), (8, 10), (8, 14)]) == [(5, 4), (8, 10), (8, 14)]\nassert max_similar_indices([(3, 5), (7, 8), (6, 2)],[(6, 5), (9, 11), (9, 15)]) == [(6, 5), (9, 11), (9, 15)]\nassert max_similar_indices([(4, 6), (8, 9), (7, 3)],[(7, 6), (10, 12), (10, 16)]) == [(7, 6), (10, 12), (10, 16)]",
        "canonical_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) "
    },
    {
        "number": 952,
        "prompt": "Write a function to compute the value of ncr mod p.\ndef nCr_mod_p(n, r, p): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if (n > r): \n        n = n - r \n    if (r > n): \n        r = r - n \n    if (n < 0 or r < 0 or p <= 0): \n        return 0\n  \n    numerator = factorial(n) \n    denominator = factorial(n - r) * factorial(r) \n    return numerator % p * denominator % p \n  \n# If the nCr is not a multiple of p \n# return 0, else, compute the value. \ndef nCrModP(n, r, p): \n    return nCr_mod_p(n, r, p) if (nCr_mod_p(n, r, p)!= 0) else 0\n\n",
        "generated_testcode": "assert nCr_mod_p(2, 2, 5) == 1\n",
        "test": "assert nCr_mod_p(10, 2, 13) == 6\nassert nCr_mod_p(11, 3, 14) == 11\nassert nCr_mod_p(18, 14, 19) == 1",
        "canonical_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] "
    },
    {
        "number": 953,
        "prompt": "Write a python function to find the minimun number of subsets with distinct elements.\ndef subset(ar, n): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "\tres = 0\n\tar.sort() \n\tfor i in range(n): \n\t\tfor j in range(i+1, n): \n\t\t\tif (ar[i]!= ar[j]): \n\t\t\t\tres += 1\n\treturn res \n\n",
        "generated_testcode": "assert subset([1, 2, 3], 3) == 2\n",
        "test": "assert subset([1, 2, 3, 4],4) == 1\nassert subset([5, 6, 9, 3, 4, 3, 4],7) == 2\nassert subset([1, 2, 3 ],3) == 1",
        "canonical_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res "
    },
    {
        "number": 954,
        "prompt": "Write a function that gives profit amount if the given amount has profit else return none.\ndef profit_amount(actual_cost,sale_amount): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    profit_amount=actual_cost-sale_amount\n    if profit_amount>0:\n        return profit_amount\n    else:\n        return None\n\n",
        "generated_testcode": "assert profit_amount(100,50) == 50\n",
        "test": "assert profit_amount(1500,1200)==300\nassert profit_amount(100,200)==None\nassert profit_amount(2000,5000)==None",
        "canonical_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None"
    },
    {
        "number": 955,
        "prompt": "Write a function to find out, if the given number is abundant.\ndef is_abundant(n):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    if (n >= 1):\n        sum_of_divisor = 1\n        for i in range(1, (n + 1)):\n            if (n % i == 0):\n                sum_of_divisor = sum_of_divisor + i\n        if (sum_of_divisor > n):\n            return True\n        else:\n            return False\n\n",
        "generated_testcode": "assert is_abundant(12) == True\n",
        "test": "assert is_abundant(12)==True\nassert is_abundant(13)==False\nassert is_abundant(9)==False",
        "canonical_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n"
    },
    {
        "number": 956,
        "prompt": "Write a function to split the given string at uppercase letters by using regex.\ndef split_list(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return re.findall('[A-Z][^A-Z]*', text)\n\n",
        "generated_testcode": "assert split_list(\"This is a string\") == ['This', 'is', 'a','string']\n",
        "test": "assert split_list(\"LearnToBuildAnythingWithGoogle\") == ['Learn', 'To', 'Build', 'Anything', 'With', 'Google']\nassert split_list(\"ApmlifyingTheBlack+DeveloperCommunity\") == ['Apmlifying', 'The', 'Black+', 'Developer', 'Community']\nassert split_list(\"UpdateInTheGoEcoSystem\") == ['Update', 'In', 'The', 'Go', 'Eco', 'System']",
        "canonical_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))"
    },
    {
        "number": 957,
        "prompt": "Write a python function to get the position of rightmost set bit.\ndef get_First_Set_Bit_Pos(n):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    return n & (~n+1)\n\n",
        "generated_testcode": "assert get_First_Set_Bit_Pos(0) == 0\n",
        "test": "assert get_First_Set_Bit_Pos(12) == 3\nassert get_First_Set_Bit_Pos(18) == 2\nassert get_First_Set_Bit_Pos(16) == 5",
        "canonical_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1"
    },
    {
        "number": 958,
        "prompt": "Write a function to convert an integer into a roman numeral.\ndef int_to_roman( num):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    roman_numeral = \"\"\n    if num >= 1000:\n        num /= 1000\n        roman_numeral += \"M\" * int(num)\n        num -= 1000\n    if num >= 900:\n        num /= 900\n        roman_numeral += \"CM\" * int(num)\n        num -= 900\n    if num >= 500:\n        num /= 500\n        roman_numeral += \"D\" * int(num)\n        num -= 500\n    if num >= 400:\n        num /= 400\n        roman_numeral += \"CD\" * int(num)\n        num -= 400\n    if num >= 100:\n        num /= 100\n        roman_numeral += \"C\" * int(num)\n        num -= 100\n    if num >= 90:\n        num /= 90\n        roman_numeral += \"XC\" * int(num)\n        num -= 90\n    if num >= 50:\n        num /= 50\n        roman_numeral += \"L\" * int(num)\n        num -= 50\n    if num >= 40:\n        num /= 40\n        roman_numeral += \"XL\" * int(num)\n        num -= 40\n    if num >= 10:\n        num /= 10\n        roman_numeral += \"X\" * int(num)\n        num -= 10\n    if num >= 9:\n        num /= 9\n        roman_numeral += \"IX\" * int(num)\n        num -= 9\n    if num >= 5:\n        num /=",
        "generated_testcode": "assert int_to_roman(1) == 'I'\n",
        "test": "assert int_to_roman(1)==(\"I\")\nassert int_to_roman(50)==(\"L\")\nassert int_to_roman(4)==(\"IV\")",
        "canonical_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num"
    },
    {
        "number": 959,
        "prompt": "Write a python function to find the average of a list.\ndef Average(lst): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    return sum(lst) / len(lst)\n\n",
        "generated_testcode": "assert(Average([1,2,3,4,5]) == 3)\n",
        "test": "assert Average([15, 9, 55, 41, 35, 20, 62, 49]) == 35.75\nassert Average([4, 5, 1, 2, 9, 7, 10, 8]) == 5.75\nassert Average([1,2,3]) == 2",
        "canonical_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) "
    },
    {
        "number": 960,
        "prompt": "Write a function to solve tiling problem.\ndef get_noOfways(n):\n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (get_noOfways(n - 1) + get_noOfways(n - 2))\nprint(get_noOfways(4))\n\n",
        "generated_testcode": "assert get_noOfways(3) == 2\n",
        "test": "assert get_noOfways(4)==3\nassert get_noOfways(3)==2\nassert get_noOfways(5)==5",
        "canonical_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);"
    },
    {
        "number": 961,
        "prompt": "Write a function to convert a roman numeral to an integer.\ndef roman_to_int(s):\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    num_dict = {\n        'I': 1,\n        'V': 5,\n        'X': 10,\n        'L': 50,\n        'C': 100,\n        'D': 500,\n        'M': 1000,\n    }\n    converted = 0\n    for i in range(len(s)):\n        if i > 0 and num_dict[s[i]] > num_dict[s[i - 1]]:\n            converted += num_dict[s[i]] - 2 * num_dict[s[i - 1]]\n        else:\n            converted += num_dict[s[i]]\n    return converted\n\n",
        "generated_testcode": "assert roman_to_int('I') == 1\n",
        "test": "assert roman_to_int('MMMCMLXXXVI')==3986\nassert roman_to_int('MMMM')==4000\nassert roman_to_int('C')==100",
        "canonical_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val"
    },
    {
        "number": 962,
        "prompt": "Write a python function to find the sum of all even natural numbers within the range l and r.\ndef sum_Natural(n): \n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    sum = 0\n    for i in range(n+1):\n        if i % 2 == 0:\n            sum += i\n    return sum\nprint(sum_Natural(3))\n\n",
        "generated_testcode": "assert sum_Natural(1) == 0\n",
        "test": "assert sum_Even(2,5) == 6\nassert sum_Even(3,8) == 18\nassert sum_Even(4,6) == 10",
        "canonical_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) "
    },
    {
        "number": 963,
        "prompt": "Write a function to calculate the discriminant value.\ndef discriminant_value(x,y,z):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    return y**2 - 4*x*z\n\n",
        "generated_testcode": "assert discriminant_value(1,2,3) == 5\n",
        "test": "assert discriminant_value(4,8,2)==(\"Two solutions\",32)\nassert discriminant_value(5,7,9)==(\"no real solution\",-131)\nassert discriminant_value(0,0,9)==(\"one solution\",0)",
        "canonical_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)"
    },
    {
        "number": 964,
        "prompt": "Write a python function to check whether the length of the word is even or not.\ndef word_len(s): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    if len(s)%2 == 0: \n        print(\"True\")\n    else:\n        print(\"False\")\n\n",
        "generated_testcode": "assert word_len('hello') == True\n",
        "test": "assert word_len(\"program\") == False\nassert word_len(\"solution\") == True\nassert word_len(\"data\") == True",
        "canonical_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False"
    },
    {
        "number": 965,
        "prompt": "Write a function to convert camel case string to snake case string.\ndef camel_to_snake(text):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    snake = ''\n    for i, letter in enumerate(text):\n        if i == 0:\n            snake += letter.lower()\n        else:\n            snake += letter.lower()\n    return snake\n\n",
        "generated_testcode": "assert camel_to_snake(\"camelCaseString\") == \"camel_case_string\"\n",
        "test": "assert camel_to_snake('PythonProgram')==('python_program')\nassert camel_to_snake('pythonLanguage')==('python_language')\nassert camel_to_snake('ProgrammingLanguage')==('programming_language')",
        "canonical_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()"
    },
    {
        "number": 966,
        "prompt": "Write a function to remove an empty tuple from a list of tuples.\ndef remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\n",
        "checkpoint": "2B",
        "pass": 1,
        "correct": true,
        "answer": "    L = []\n    for i in range(len(L)):\n        if L[i]!= ():\n            L.append(L[i])\n    return L\n\n",
        "generated_testcode": "assert remove_empty([]) == []\n",
        "test": "assert remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')])==[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']  \nassert remove_empty([(), (), ('',), (\"python\"), (\"program\")])==[('',), (\"python\"), (\"program\")]  \nassert remove_empty([(), (), ('',), (\"java\")])==[('',),(\"java\") ]  ",
        "canonical_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1"
    },
    {
        "number": 967,
        "prompt": "Write a python function to accept the strings which contains all vowels.\ndef check(string): \n",
        "checkpoint": "2B",
        "pass": 4,
        "correct": true,
        "answer": "    vowels = 'aeiou' \n    for vowel in vowels: \n        if vowel in string: \n            return True\n    return False\n\n",
        "generated_testcode": "assert check(\"hello\") == True\n",
        "test": "assert check(\"SEEquoiaL\") == 'accepted'\nassert check('program') == \"not accepted\"\nassert check('fine') == \"not accepted\"",
        "canonical_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") "
    },
    {
        "number": 968,
        "prompt": "Write a python function to find maximum possible value for the given periodic function.\ndef floor_Max(A,B,N):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "\tmaxi = 0\n\tfor i in range(0,N):\n\t\tif (i+1) % A == 0 or (i+1) % B == 0:\n\t\t\tif maxi < A*i:\n\t\t\t\tmaxi = A*i\n\t\telse:\n\t\t\tif maxi < A*i+B:\n\t\t\t\tmaxi = A*i+B\n\treturn maxi\n\n",
        "generated_testcode": "assert floor_Max(1,2,3) == 2\n",
        "test": "assert floor_Max(11,10,9) == 9\nassert floor_Max(5,7,4) == 2\nassert floor_Max(2,2,1) == 1",
        "canonical_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B"
    },
    {
        "number": 969,
        "prompt": "Write a function to join the tuples if they have similar initial elements.\ndef join_tuples(test_list):\n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    a = []\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if (test_list[i] == test_list[j]):\n                a.append(test_list[i])\n                break\n    if a ==[]:\n        return test_list\n    a.sort()\n    return a\n\n",
        "generated_testcode": "assert join_tuples([(1, 2), (2, 3), (3, 4)]) == (1, 2, 3, 4)\n",
        "test": "assert join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)] ) == [(5, 6, 7), (6, 8, 10), (7, 13)]\nassert join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)] ) == [(6, 7, 8), (7, 9, 11), (8, 14)]\nassert join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)] ) == [(7, 8, 9), (8, 10, 12), (9, 15)]",
        "canonical_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) "
    },
    {
        "number": 970,
        "prompt": "Write a function to find minimum of two numbers.\ndef min_of_two( x, y ):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return x if x < y else y\n\n",
        "generated_testcode": "assert min_of_two(1, 2) == 1\n",
        "test": "assert min_of_two(10,20)==10\nassert min_of_two(19,15)==15\nassert min_of_two(-10,-20)==-20",
        "canonical_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y"
    },
    {
        "number": 971,
        "prompt": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.\ndef maximum_segments(n, a, b, c) : \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    n = int(n)\n    if n%a!=0 or n%b!=0 or n%c!=0 :\n        return -1\n    for i in range(1,n//a+1):\n        for j in range(1,n//b+1):\n            for k in range(1,n//c+1):\n                if i*a + j*b + k*c == n :\n                    return i,j,k\n    return -1\nn=int(input())\na,b,c=map(int,input().split())\nprint(maximum_segments(n,a,b,c))\n",
        "generated_testcode": "assert maximum_segments(5, 2, 3, 4) == 2\n",
        "test": "assert maximum_segments(7, 5, 2, 5) == 2\nassert maximum_segments(17, 2, 1, 3) == 17\nassert maximum_segments(18, 16, 3, 6) == 6",
        "canonical_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]"
    },
    {
        "number": 972,
        "prompt": "Write a function to concatenate the given two tuples to a nested tuple.\ndef concatenate_nested(test_tup1, test_tup2):\n",
        "checkpoint": "2B",
        "pass": 2,
        "correct": true,
        "answer": "    return tuple(test_tup1) + (tuple(test_tup2))\n\n",
        "generated_testcode": "assert concatenate_nested((1, 2, 3), (4, 5, 6)) == (1, 2, 3, 4, 5, 6)\n",
        "test": "assert concatenate_nested((3, 4), (5, 6)) == (3, 4, 5, 6)\nassert concatenate_nested((1, 2), (3, 4)) == (1, 2, 3, 4)\nassert concatenate_nested((4, 5), (6, 8)) == (4, 5, 6, 8)",
        "canonical_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) "
    },
    {
        "number": 973,
        "prompt": "Write a python function to left rotate the string.\ndef left_rotate(s,d):\n",
        "checkpoint": "2B",
        "pass": 3,
        "correct": true,
        "answer": "    return s[d:]+s[:d]\n\n",
        "generated_testcode": "assert left_rotate(\"abcdefg\",2) == \"cdefgab\"\n",
        "test": "assert left_rotate(\"python\",2) == \"thonpy\"   \nassert left_rotate(\"bigdata\",3 ) == \"databig\" \nassert left_rotate(\"hadoop\",1 ) == \"adooph\" ",
        "canonical_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  "
    },
    {
        "number": 974,
        "prompt": "Write a function to find the minimum total path sum in the given triangle.\ndef min_sum_path(A): \n",
        "checkpoint": "2B",
        "pass": 5,
        "correct": false,
        "answer": "    n = len(A)\n    dp = [[0 for x in range(n)] for y in range(n)] \n    for i in range(n): \n        for j in range(i+1): \n            if i == j: \n                dp[i][j] = A[i][j] \n            else: \n                dp[i][j] = min(dp[i-1][j-1], dp[i-1][j]) + A[i][j] \n    return dp[-1][-1] \n  \nA = [[1], [2, 8], [1, 3, 1]] \nprint(min_sum_path(A))\n\n",
        "generated_testcode": "assert min_sum_path([[1], [2, 3], [1, 3, 1]]) == 3\n",
        "test": "assert min_sum_path([[ 2 ], [3, 9 ], [1, 6, 7 ]]) == 6\nassert min_sum_path([[ 2 ], [3, 7 ], [8, 5, 6 ]]) == 10 \nassert min_sum_path([[ 3 ], [6, 4 ], [5, 2, 7 ]]) == 9",
        "canonical_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]"
    }
]