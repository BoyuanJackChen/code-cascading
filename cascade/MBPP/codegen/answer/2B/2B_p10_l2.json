[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1 = []\n    list2 = []\n    common = []\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared = []\n    for item in test_tup1:\n        if item in test_tup2:\n            shared.append(item)\n    return shared\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elems = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(0, len(test_tup1)):\n            if test_tup1[i] == test_tup2[i]:\n                shared_elems.append(test_tup1[i])\n    return shared_elems\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    return test_set1 & test_set2\n    \n    \ndef common_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the common elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    return test_set1.intersection(test_set2)\n    \n    \ndef union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    return test_set1.union(test_set2)\n    \n    \ndef intersection_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the intersection elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    return test_set1.intersection(test_set2)\n    \n    \ndef difference_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the difference elements from the given two lists.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    return test_set1.difference(test_set2)\n    \n    \ndef is_subset(test_tup1, test_tup2):\n    '''\n    Write a function to find if a list is a subset of another list.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return False\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in test_tup2:\n            return False\n    return True\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_elements = set(test_tup1) | set(test_tup2)\n    return test_elements\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # dictionary to store the frequency of each element\n    dict1 = {}\n    dict2 = {}\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    return list(set1.intersection(set2))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    s_elements = set(test_tup1) & set(test_tup2)\n    print(s_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    temp = set(test_tup1) & set(test_tup2)\n    print(temp)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    # convert to set to get unique elements\n    set_test1 = set(test_tup1)\n    set_test2 = set(test_tup2)\n    # get intersection of both sets and compare length of common elements\n    return (set_test1 & set_test2)\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                break\n        else:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if (n < 2):\n        return True\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\ndef get_prime_factors(n):\n    '''\n    Write a python function to find prime factors of a number.\n    '''\n    prime_factors = []\n    if n == 2:\n        prime_factors.append(2)\n        return prime_factors\n    for i in range(2, n):\n        if n % i == 0:\n            prime_factors.append(i)\n            n /= i\n            if n!= 1:\n                prime_factors.append(n)\n                break\n    return prime_factors\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, math.ceil(math.sqrt(n))):\n        if n % i == 0:\n            return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, int(math.sqrt(n))+1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if (n % i) == 0:\n                return True\n        else:\n            return False\n    else:\n        return False\n        \ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n > 1:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\n        \ndef is_prime_number(n):\n    '''\n    Write a python function to identify prime number.\n    '''\n    if is_not_prime(n):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n == 2:\n        return False\n    if n == 3:\n        return False\n    if n % 2 == 0:\n        return False\n    if n % 3 == 0:\n        return False\n    \n    #This section of code is used to find the number of primes below 100.\n    #The idea behind it is to check if any number between 2 and 100 can divide evenly by any number from 2 to 100.\n    # If a number can be divided by any number from 2 to 100, then it is not a prime number\n    count = 0\n    for i in range(2,101):\n        if n%i == 0:\n            count += 1\n    if count == 0:\n        return False\n    \n    #Checking if the number is prime\n    for i in range(2, math.ceil(math.sqrt(n)) + 1):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n) + 1)):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef get_gcd(a, b):\n    '''\n    Write a python function to get the greatest common divisor.\n    '''\n    if a < b:\n        a, b = b, a\n    while a % b!= 0:\n        a, b = b, a % b\n    return b\ndef get_lcm(a, b):\n    '''\n    Write a python function to get the least common multiple.\n    '''\n    gcd = get_gcd(a, b)\n    return int(a*b/gcd)\ndef compare_strings(str1, str2):\n    '''\n    Write a python function to compare strings lexicographically.\n    '''\n    for i in range(min(len(str1), len(str2))):\n        if str1[i] > str2[i]:\n            return 1\n        elif str1[i] < str2[i]:\n            return -1\n    return 0\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.sqrt(n))+1):\n        if n % i == 0:\n            factors.append(i)\n            factors.append(n//i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a python function to check if a number is prime\n    '''\n    if n > 1:\n        for i in range(2, n):\n            if n % i == 0:\n                return False\n        return True\n    else:\n        return False\ndef get_factors(n):\n    '''\n    Write a python function to get the factors of a number\n    '''\n    factors = []\n    for i in range(1, int(math.s"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    import heapq as hq\n    if n==1:\n        return nums\n    heapq.heapify(nums)\n    for i in range(n-1):\n        x=heapq.heappop(nums)\n        hq.heappush(nums,x)\n    for i in range(len(nums)):\n        print(heapq.heappop(nums))\nnums=list(map(int,input().split()))\nn=int(input())\nheap_queue_largest(nums,n)\n'''\nWrite a function that takes in a 2D matrix and returns a list of lists representing the matrix in spiral order.\nFor example, the below matrix should return [[1,2,3],\n                                          [4,5,6],\n                                          [7,8,9]]\n'''\ndef matrix_spiral_order(matrix):\n    '''\n    Write a function that takes in a 2D matrix and returns a list of lists representing the matrix in spiral order.\n    For example, the below matrix should return [[1,2,3],\n                                          [4,5,6],\n                                          [7,8,9]]\n    '''\n    \n    if len(matrix)==0:\n        return []\n    m=len(matrix)\n    n=len(matrix[0])\n    matrix_spiral=[]\n    top=[0,0]\n    bottom=[m-1,n-1]\n    left=[0,0]\n    right=[m-1,n-1]\n    # Top right, Bottom Left, Bottom Right, Top Left\n    dirs=[1,0,0,1]\n    def print_matrix(top,bottom,left,right,dirs,matrix_spiral):\n        for i in range(top[0],bottom[0]+1):\n            matrix_spiral.append(matrix[i][left[1]])\n            # print(matrix_spiral)\n        if dirs[0]==1:\n            for i in range(left[1]+1,right[1]+1):\n                matrix_spiral.append(matrix[bottom[0]][i])\n            # print(matrix_spiral)\n        elif dirs[1]==0:\n            for i in range(bottom[1]-1,left[1]-1,-1):\n                matrix_spiral.append(matrix[i][right[0]])\n            # print(matrix_spiral)\n        elif dirs[2]==0:\n            for i in range(bottom[0]-1,top[0]-1,-1):\n                matrix_spiral.append(matrix[i][left[1]])\n            # print(matrix_spiral)\n        elif dirs[3]==1:\n            for i in range(top[1]+1,right[1]+1):\n                matrix_spiral.append(matrix[bottom[0]][i])\n            # print(matrix_spiral)\n        return matrix_spiral\n    while top[0]<bottom[0] and left[1]<right[1]:\n        matrix_spiral=print_matrix(top,bottom,left,right,dirs,matrix_spiral)\n        if dirs[0]==1:\n            left[1]+=1\n        elif dirs[1]==0:\n            top[0]+=1\n        elif dirs[2]==0:\n            right[1]-=1\n        elif dirs[3]==1:\n            bottom[0]-=1\n    return matrix_spiral\nmatrix_spiral_order(matrix)\n'''\nWrite a function that takes in a 2D matrix and returns a list of lists representing the matrix in spiral order.\nFor example, the below matrix should return [[1,2,3],\n                                          [4,5,6],\n                                          [7,8,9]]\n'''\ndef matrix_spiral_order(matrix):\n    '''\n    Write a function that takes in a 2D matrix and returns a list of lists representing the matrix in spiral order.\n    For example, the below matrix should return [[1,2,3],\n                                          [4,5,6],\n                                          [7,8,9]]\n    '''\n    \n    if len(matrix)==0:\n        return []\n    m=len(matrix)\n    n=len(matrix[0])\n    matrix_spiral=[]\n    top=[0,0]\n    bottom=[m-1,n-1]\n    left=[0,0]\n    right=[m-1,n-1]\n    # Top right, Bottom Left, Bottom Right, Top Left\n    dirs=[1,0,0,1]\n    def print_matrix(top,bottom,left,right,dirs,matrix_spiral):\n        for i in range(top[0],bottom[0]+1):\n            matrix_spiral.append(matrix[i][left[1]])\n            # print(matrix_spiral)\n        if dirs[0]==1:\n            for i in range(left[1]+1,right[1]+1):\n                matrix_spiral.append(matrix[bottom[0]][i])\n            # print(matrix_spiral)\n        elif dirs[1]==0:\n            for i in range(bottom[1]-1,left[1]-1,-1):\n                matrix_spiral.append(matrix[i][right[0]])\n            # print(matrix_spiral)\n        elif dirs[2]==0:\n            for i in range(bottom[0]-1,top[0]-1,-1):\n                matrix_spiral.append(matrix[i][left[1]])\n            # print(matrix_spiral)\n        elif dirs[3]==1:\n            for i in range(top[1]+1,right[1]+1):\n                matrix_spiral.append(matrix[bottom[0]][i])\n            # print(matrix_spiral)\n        return matrix_spiral\n    while top[0]<bottom[0] and left[1]<right[1]:\n        matrix_spiral=print_matrix(top,bottom,left,right,dirs,matrix_spiral)\n        if dirs[0]==1:\n            left[1]+=1\n        elif dirs[1]==0:\n            top[0]+=1\n        elif dirs[2]==0:\n            right[1]-=1\n        elif dirs[3]==1:\n            bottom[0]-=1\n    return matrix_spiral\nmatrix_spiral_order(matrix)\n'''\nWrite a function that takes in a 2D matrix and returns a list of lists representing the matrix in spiral order.\nFor example, the below matrix should return [[1,2,3],\n                                          [4,5,6],\n                                          [7,8,9]]\n'''\ndef matrix_spiral_order(matrix):\n    '''\n    Write a function that takes in a 2D matrix and returns a list of lists representing the matrix in spiral order.\n    For example, the below matrix should return [[1,2,3],\n                                          [4,5,6],\n                                          [7,8,9]]\n    '''\n    \n    if len(matrix)==0:\n        return []\n    m=len(matrix)\n    n=len(matrix[0])\n    matrix_spiral=[]\n    top=[0,0]\n    bottom=[m-1,n-1]\n    left=[0,0]\n    right=[m-1,n-1]\n    # Top right, Bottom Left, Bottom Right, Top Left\n    dirs=[1,0,0,1]\n    def print_matrix(top,bottom,left,right,dirs,matrix_spiral):\n        for i in range(top[0],bottom[0]+1):\n            matrix_spiral.append(matrix[i][left[1]])\n            # print(matrix_spiral)\n        if dirs[0]==1:\n            for i in range(left"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    return list(map(lambda x: x[0], hq.nlargest(n, nums)))\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    result = []\n    for i in range(n):\n        hq.heappush(result,nums[i])\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #use max-heap\n    #add the new element to the max heap\n    #check if the length of the heap is larger than n\n    #if yes, swap the value with the top value and add it back to the heap\n    #after adding back, pop the top element and add the new element to the heap\n    #return the heap after it's been traversed\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums == None or len(nums) == 0:\n        return []\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n,len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heappushpop(heap,nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    # heap = nums[:n]\n    # heapq.heapify(heap)\n    # for i in range(len(nums)-n):\n    #     heapq.heappop(heap)\n    # return heap\n    return heapq.nlargest(n,nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return sorted(nums, reverse=True)[:n]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if len(nums) < n:\n        print(\"Invalid Input\")\n    max_heap = []\n    for i in range(n):\n        hq.heappush(max_heap, -nums[i])\n    return [-i for i in reversed(max_heap)]\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    hq.heapify(nums)\n    while len(nums) > n:\n        hq.heappop(nums)\n    return nums\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x%2==0):\n        print(\"The numbers are even\")\n        return\n    elif(x%2==1):\n        print(\"The numbers are odd\")\n        return\n    \n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # write your python function here\n    if x % 2 == 0:\n        return False\n    else:\n        while x > 1:\n            x = x//2\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if(x & (x-1) == 0):\n        print(\"Yes, the two numbers differ at one bit position only.\")\n    else:\n        print(\"No, the two numbers differ at more than one bit position.\")\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Helper function \n    def check_power_of_two(n): \n        '''\n        Checks the power of two condition\n        '''\n        if (n & (n - 1) == 0) and n!= 0: \n            print(\"Power of two\") \n        else: \n            print(\"Not a power of two\") \n    \n    # Taking input from the user     \n    x = int(input(\"Enter the number: \")) \n    # Checking whether x is power of 2 \n    check_power_of_two(x) \n    \n    \n    \ndef Is_Power_Of_Four (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Helper function \n    def check_power_of_four(n): \n        '''\n        Checks the power of four condition\n        '''\n        if (n & (n - 1) == 0) and n!= 0: \n            print(\"Power of four\") \n        else: \n            print(\"Not a power of four\") \n    \n    # Taking input from the user     \n    x = int(input(\"Enter the number: \")) \n    # Checking whether x is power of 4 \n    check_power_of_four(x) \n    \n    \n    \ndef Is_Power_Of_Eight (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Helper function \n    def check_power_of_eight(n): \n        '''\n        Checks the power of eight condition\n        '''\n        if (n & (n - 1) == 0) and n!= 0: \n            print(\"Power of eight\") \n        else: \n            print(\"Not a power of eight\") \n    \n    # Taking input from the user     \n    x = int(input(\"Enter the number: \")) \n    # Checking whether x is power of 8 \n    check_power_of_eight(x) \n    \n    \n    \ndef Is_Power_Of_Sixteen (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Helper function \n    def check_power_of_sixteen(n): \n        '''\n        Checks the power of sixteen condition\n        '''\n        if (n & (n - 1) == 0) and n!= 0: \n            print(\"Power of sixteen\") \n        else: \n            print(\"Not a power of sixteen\") \n    \n    # Taking input from the user     \n    x = int(input(\"Enter the number: \")) \n    # Checking whether x is power of 16 \n    check_power_of_sixteen(x) \n    \n    \n    \ndef Is_Power_Of_Thirty (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Helper function \n    def check_power_of_thirty(n): \n        '''\n        Checks the power of thirty condition\n        '''\n        if (n & (n - 1) == 0) and n!= 0: \n            print(\"Power of thirty\") \n        else: \n            print(\"Not a power of thirty\") \n    \n    # Taking input from the user     \n    x = int(input(\"Enter the number: \")) \n    # Checking whether x is power of thirty \n    check_power_of_thirty(x) \n    \n    \n    \ndef Is_Power_Of_Fourteen (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Helper function \n    def check_power_of_fourteen(n): \n        '''\n        Checks the power of fourteen condition\n        '''\n        if (n & (n - 1) == 0) and n!= 0: \n            print(\"Power of fourteen\") \n        else: \n            print(\"Not a power of fourteen\") \n    \n    # Taking input from the user     \n    x = int(input(\"Enter the number: \")) \n    # Checking whether x is power of fourteen \n    check_power_of_fourteen(x) \n    \n    \n    \ndef Is_Power_Of_TwentyFive (x):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Helper function \n    def check_power_of_twentyfive(n): \n        '''\n        Checks the power of twentyfive condition\n        '''\n        if (n & (n - 1) == 0) and n!= 0: \n            print(\"Power of twentyfive\") \n        else: \n            print(\"Not a power of twentyfive\") \n    \n    # Taking input from the user     \n    x = int(input(\"Enter the number: \")) \n    # Checking whether x is power of twentyfive \n    check_power_of_twentyfive(x) \n    \n    \n    \ndef Is_Power_Of_Sixteen_Two_Numbers (x, y):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Helper function \n    def check_power_of_sixteen_two_numbers(n, m): \n        '''\n        Checks the power of sixteen and two numbers\n        '''\n        if (n & (n - 1) == 0) and (m & (m - 1) == 0) and n!= 0 and m!= 0: \n            print(\"Power of sixteen and two numbers\") \n        else: \n            print(\"Not a power of sixteen and two numbers\") \n    \n    # Taking input from the user     \n    x = int(input(\"Enter the number 1: \")) \n    y = int(input(\"Enter the number 2: \")) \n    # Calling the helper function to check the power of sixteen and two numbers \n    check_power_of_sixteen_two_numbers(x, y) \n    \n    \n    \ndef Is_Power_Of_TwentyFive_Two_Numbers (x, y):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Helper function \n    def check_power_of_twentyfive_two_numbers(n, m): \n        '''\n        Checks the power of twentyfive and two numbers\n        '''\n        if (n & (n - 1) == 0) and (m & (m - 1) == 0) and n!= 0 and m!= 0: \n            print(\"Power of twentyfive and two numbers\") \n        else: \n            print(\"Not a power of twentyfive and two numbers\") \n    \n    # Taking input from the user     \n    x = int(input(\"Enter the number 1: \")) \n    y = int(input(\"Enter the number 2: \")) \n    # Calling the helper function to check the power of twentyfive and two numbers \n    check_power_of_twentyfive_two_numbers(x, y) \n    \n    \n    \ndef Is_Power_Of_Thirty_Two_Numbers (x, y):\n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # Helper function \n    def check_power_of_thirty_two_numbers(n, m): \n        '''\n        Checks the power of thirty and two numbers\n        '''\n        if (n & (n - 1) == 0) and (m & (m - 1) == 0) and n!= 0 and m!= 0: \n            print(\"Power of thirty and two numbers\") \n        else: \n            print(\"Not a power of thirty and two numbers\") \n    \n    # Taking input from the user     \n    x = int(input(\"Enter the number 1: \")) \n    y = int(input(\"Enter the number 2: \")) \n    # Calling the helper function to check the power of thirty and two numbers \n    check_power_of_thirty_two_numbers(x, y) \n    \n    \n    \ndef Is_Power"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    # if a and b are divisible by 2, then they are power of two\n    if (a==b) and (a & 1 == 0):\n        print(\"Both number are power of 2\")\n    else:\n        print(\"They are not power of 2\")\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if x==1:\n        return True\n    while x>0:\n        if x%2==1:\n            return False\n        else:\n            x=x//2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & (x-1)) == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    x1 = x>>1\n    x2 = x>>1\n    if x1==x2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x & 1) == 0: \n        return False\n    else: \n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x - 1)) == 0\nprint(is_Power_Of_Two(0))\nprint(is_Power_Of_Two(1))\nprint(is_Power_Of_Two(3))\nprint(is_Power_Of_Two(4))\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    all_letters = re.findall(r'[a-z]+', text)\n    long_words = []\n    for word in all_letters:\n        if len(word) >= 4:\n            long_words.append(word)\n    return sorted(long_words)\n    \n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = re.findall(r'\\w+', text)\n    words = [word.lower() for word in words]\n    print(words)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in re.findall(r'\\w{4,}', text):\n        result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\w{4,}',text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = re.findall(r'\\b[a-zA-Z]{4,}\\b', text)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall('\\w{4,}', text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    return re.findall(r'\\w{4,}',text)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for word in text.split():\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    words = []\n    for word in re.findall(r'\\w+', text):\n        if len(word) >= 4:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    text = re.findall(r'[\\w]{4,}', text)\n    print(text)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**2\n    return nums\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    print(f'\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i*i for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return list(map(lambda x: x**2, nums))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    nums_sq = []\n    for num in nums:\n        nums_sq.append(num * num)\n    return nums_sq\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num*num)\n    return squares\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num * num)\n    print(result)\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return_list = []\n    for i in nums:\n        return_list.append(i**2)\n    return return_list\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    if n==1:\n        return 1\n    char1 = str[0]\n    start = 0\n    res = n\n    for i in range(1, n):\n        if str[i]!=char1:\n            if i-start>res:\n                res = i-start\n            start = i\n    return res\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        print(str)\n        if str[i]!= str[len(str)-i-1]:\n            count += 1\n    return count \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    a = list(str)\n    a.sort()\n    i = 0\n    min_rotations = 0\n    while i < len(a):\n        if i + 1 < len(a) and a[i] == a[i+1]:\n            i += 1\n        else:\n            min_rotations += 1\n            i += 1\n    return min_rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    l = list(str)\n    while len(l)!= 1:\n        l = sorted(l, key = lambda x: (x.lower(), x))\n        l = l[-1] + l[:-1]\n    return 0 if str == l else 1\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    if len(str) == 1:\n        return 0\n    else:\n        dict1 = { }\n        dict2 = { }\n        #print(str)\n        for i in range(len(str)):\n            if str[i] not in dict1:\n                dict1[str[i]] = i\n            else:\n                dict2[str[i]] = dict1[str[i]]\n        #print(dict1)\n        #print(dict2)\n        for i in range(len(str)):\n            if str[i] not in dict2:\n                continue\n            else:\n                count = dict2[str[i]]-i\n                if count < 0:\n                    count += len(str)\n                if count not in dict2:\n                    count = count - (len(str) - i)\n                if count not in dict2:\n                    count = 0\n                dict2[str[i]] = count\n        #print(dict2)\n        return dict2[str[0]]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    rotations = 0\n    for i in range(len(str)-1):\n        if(str[i]!= str[i+1]):\n            rotations += 1\n    return rotations\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    while(len(str) > 0): \n        count = count + 1\n        index = str.find(str[0]) \n        str = str[index + 1:] + str[:index] \n    return count \n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Todo : Implement me\n    return 0\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    n = len(str)\n    str_1 = str+str\n    str_2 = str+str+str\n    print(min(len(str_1),len(str_2)))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        count += (str[i] - i)\n    return count\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if not s: \n        return s \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    count = 0\n    index = 0\n    first = ''\n    last = ''\n    for i in s:\n        if i == ch:\n            count = count + 1\n            if index == 0:\n                first = i\n            last = i\n        index = index + 1\n    if count == 1:\n        return s.replace(first,'',1)\n    elif count == 0:\n        return s.replace(last,'',1)\n    elif count > 1:\n        return s.replace(first,'',1) + s.replace(last,'',1)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    x = s.replace(ch,'')\n    return x\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s_list = list(s)\n    s_list.remove(ch)\n    s_list.remove(ch)\n    return ''.join(s_list)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    l=[]\n    for i in s:\n        if i==ch:\n            l.append(i)\n    s=s.replace(l[0],'',1)\n    s=s.replace(l[-1],'',1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(s[0],'',1)\n    s=s.replace(s[-1],'',1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s1 = s.replace(ch,\"\")\n    s2 = s1.replace(s1[:1],'')\n    s3 = s2.replace(s2[-1:],'')\n    return s3\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s=s.replace(ch,'',1)\n    s=s.replace(ch,'',1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    for i in range(len(s)):\n        if s[i] == ch:\n            return s[:i]+s[i+1:]\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # if ch in s:\n    #     s = s.replace(ch,'')\n    # else:\n    #     print('Not found')\n    # return s\n    return s.replace(ch,'')\n    "
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m = len(M)\n    n = len(M[0])\n    \n    R = []\n    \n    for i in range(m):\n        x = 0\n        row = []\n        for j in range(n):\n            row.append(M[i][j])\n            x += M[i][j]\n        row.sort()\n        R.append(row)\n        \n    for i in range(m):\n        for j in range(n):\n            M[i][j] = R[i][j]\n            \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    R = len(M)\n    C = len(M[0])\n    for i in range(R):\n        m = i\n        for j in range(i,R):\n            if M[i][j]<M[m][j]:\n                m = j\n        M[i],M[m] = M[m],M[i]\n    for i in range(R):\n        for j in range(C):\n            M[i][j] = sum(M[i][:j]+M[i][j+1:])\n    return M\n    \n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    row_sums = []\n    for row in range(len(M)):\n        row_sums.append(sum(M[row]))\n    row_sums.sort()\n    new_matrix = []\n    for row in range(len(M)):\n        new_matrix.append(M[row])\n        for col in range(len(M)):\n            if(M[row][col]!= 0 and row_sums[row] == sum(M[row])):\n                new_matrix[row] = new_matrix[row][:col] + [0] + new_matrix[row][col+1:]\n    return new_matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # We are going to sort the row in the matrix by finding its max and min, and sorting all the rows in between\n    # using this max and min value.\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    \n    m = len(M)\n    n = len(M[0])\n    \n    # Sort the matrix according to its sum\n    for i in range(m):\n        col = 0\n        while col < n:\n            # Sum of current row\n            s = 0\n            for j in range(n):\n                s += M[i][j]\n            if s < 0:\n                for j in range(n):\n                    M[i][j] = float('-inf')\n                break\n            # Sort the sum of the rows\n            for j in range(n):\n                if s < M[i][j]:\n                    for k in range(n):\n                        M[i][k] = M[i][k] - M[i][j]\n                    break\n            col += 1\n    \n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    res = []\n    for row in M:\n        row.sort()\n        row_sum = sum(row)\n        res.append([row_sum, row])\n    res.sort(key=lambda x: x[0])\n    for i in range(len(res)):\n        res[i] = res[i][1]\n    return res\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    for i in range(n):\n        M[i].sort()\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if M[j][0] > M[j+1][0]:\n                M[j], M[j+1] = M[j+1], M[j]\n    return M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    n = len(M)\n    sort_rows = sorted(range(n), key=lambda i: sum(M[i]))\n    M_sorted = []\n    for i in range(n):\n        M_sorted.append(M[sort_rows[i]])\n    return M_sorted\n    \ndef two_array_intersection(nums1, nums2):\n    '''\n    Given two arrays of integers nums1 and nums2, return an array of their intersection.\n    '''\n    # M_diff = list(set(nums1) - set(nums2))\n    # return nums1 + M_diff\n    # M_diff = []\n    # for num in nums1:\n    #     if num not in nums2:\n    #         M_diff.append(num)\n    # return M_diff\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # print(M)\n    # print(\"M[0,]\", M[0,])\n    # print(\"M[1,]\", M[1,])\n    # print(\"M[2,]\", M[2,])\n    # print(\"M[3,]\", M[3,])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n    \n    for i in range(rows):\n        for j in range(cols-1):\n            if M[i][j] > M[i][j+1]:\n                M[i][j], M[i][j+1] = M[i][j+1], M[i][j]\n    \n    for i in range(rows-1):\n        for j in range(cols):\n            if M[i][j] > M[i+1][j]:\n                M[i][j], M[i+1][j] = M[i+1][j], M[i][j]\n    \n    return M"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = l*b*h\n    print(volume)\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    # Parameter(s)\n    Vol = ((l * h) * b)\n    \n    # Return result\n    return Vol\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return(l*b*h)\nprint(find_Volume(l = 2, h = 3, b = 4))\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #defining variables\n    A = (l*h)/2\n    V = (4/3)*(math.sqrt(((A**3)/3))*l*b)\n    print(\"The volume of the prism is: \", V )\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = (l*b*h)/3.0\n    return Volume\ndef find_area(l,b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    Area = (l*b)/2.0\n    return Area\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*h)/3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = ((b*h)/2) * ((l*h)/2)\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    area = (b*h)/2\n    return area\n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    area = (b*h)/2\n    return area\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    volume = (l*h)\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a rectangular prism.\n    '''\n    area = (l*b)\n    return area\n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a rectangular prism.\n    '''\n    area = (l*b)\n    return area\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a cylindrical prism.\n    '''\n    volume = (l*h)/3\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a cylindrical prism.\n    '''\n    area = 2*(l*h)\n    return area\n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a cylindrical prism.\n    '''\n    area = 2*(l*h)\n    return area\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    volume = (1/3)*3.14*(l*h)\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a cone.\n    '''\n    area = 2*3.14*l*(b/3)\n    return area\n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a cone.\n    '''\n    area = (1/3)*3.14*l*b\n    return area\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a sphere.\n    '''\n    volume = (4/3)*3.14*(l*h)\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a sphere.\n    '''\n    area = 4*3.14*(l*b)\n    return area\n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a sphere.\n    '''\n    area = (4/3)*3.14*(l*b)\n    return area\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a torus.\n    '''\n    volume = (1/3)*3.14*(l*h)*l\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a torus.\n    '''\n    area = (1/2)*3.14*(l*h)*(l+2*b)\n    return area\n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a torus.\n    '''\n    area = (1/2)*3.14*(l*h)*(l+2*b)\n    return area\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a cone shaped prism.\n    '''\n    volume = (1/3)*3.14*l*h\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a cone shaped prism.\n    '''\n    area = (1/2)*3.14*l*(b/3)\n    return area\n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a cone shaped prism.\n    '''\n    area = (1/2)*3.14*l*b\n    return area\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a cylinder.\n    '''\n    volume = (1/3)*3.14*(l*h)\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a cylinder.\n    '''\n    area = 2*3.14*l*(h/2)\n    return area\n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14*l*h\n    return area\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a cylinder.\n    '''\n    volume = (1/3)*3.14*l*b\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a cylinder.\n    '''\n    area = 2*3.14*l*(b/2)\n    return area\n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a cylinder.\n    '''\n    area = 2*3.14*l*(b/2)\n    return area\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (1/3)*3.14*l*h\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    area = (1/2)*3.14*l*(h/2)\n    return area\n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a triangular prism.\n    '''\n    area = (1/2)*3.14*l*h\n    return area\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    volume = (1/3)*3.14*l*h\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n    Write a python function to find the area of a rectangular prism.\n    '''\n    area = 2*3.14*l*(h/2)\n    return area\n    \ndef find_SurfaceArea(l,b,h) : \n    '''\n    Write a python function to find the surface area of a rectangular prism.\n    '''\n    area = 2*3.14*l*h\n    return area\n    \ndef find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a cylindrical prism.\n    '''\n    volume = (1/3)*3.14*(l*h)\n    return volume\n    \ndef find_Area(l,b,h) : \n    '''\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return l*b*h\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    Volume = l*h*b\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l * h) * (b)\n    print(\"The volume of a triangular prism is\",volume)\n    \ndef find_Area(l,b) : \n    '''\n    Write a python function to find the area of a triangular prism.\n    '''\n    area = (l*b)/2\n    print(\"The area of a triangular prism is\",area)\n    \ndef find_Volume_Area(l,b,h) : \n    '''\n    Write a python function to find the volume and area of a triangular prism.\n    '''\n    volume = (l * h) * (b)\n    area = (l*b)/2\n    print(\"The volume and area of a triangular prism is\",volume,area)\n    \ndef find_perimeter(l,b,h) : \n    '''\n    Write a python function to find the perimeter of a triangular prism.\n    '''\n    perimeter = (l * h * 2) + (l * 2)\n    print(\"The perimeter of a triangular prism is\",perimeter)\n    \ndef find_Area_perimeter(l,b,h) : \n    '''\n    Write a python function to find the area and perimeter of a triangular prism.\n    '''\n    area = (l*b)/2\n    perimeter = (l * h * 2) + (l * 2)\n    print(\"The area and perimeter of a triangular prism is\",area,perimeter)\n    \ndef find_Volume_perimeter(l,b,h) : \n    '''\n    Write a python function to find the volume and perimeter of a triangular prism.\n    '''\n    volume = (l * h) * (b)\n    perimeter = (l * h * 2) + (l * 2)\n    print(\"The volume and perimeter of a triangular prism is\",volume,perimeter)\n    \ndef find_diagonal_perimeter(l,b,h) : \n    '''\n    Write a python function to find the diagonal length of a triangular prism.\n    '''\n    diagonal_length = (l * (l+h+b))/2\n    print(\"The diagonal length of a triangular prism is\",diagonal_length)\n    \ndef find_diagonal_area(l,b,h) : \n    '''\n    Write a python function to find the diagonal length of a triangular prism.\n    '''\n    diagonal_length = (l * (l+h+b))/2\n    print(\"The diagonal length of a triangular prism is\",diagonal_length)\n    \ndef find_perimeter_diagonal(l,b,h) : \n    '''\n    Write a python function to find the perimeter and diagonal length of a triangular prism.\n    '''\n    perimeter = (l * h * 2) + (l * 2)\n    diagonal_length = (l * (l+h+b))/2\n    print(\"The perimeter and diagonal length of a triangular prism is\",perimeter,diagonal_length)\n    \ndef find_area_diagonal(l,b,h) : \n    '''\n    Write a python function to find the area and diagonal length of a triangular prism.\n    '''\n    area = (l*b)/2\n    diagonal_length = (l * (l+h+b))/2\n    print(\"The area and diagonal length of a triangular prism is\",area,diagonal_length)\n    \ndef find_volume_diagonal(l,b,h) : \n    '''\n    Write a python function to find the volume and diagonal length of a triangular prism.\n    '''\n    volume = (l * h) * (b)\n    diagonal_length = (l * (l+h+b))/2\n    print(\"The volume and diagonal length of a triangular prism is\",volume,diagonal_length)\n    \ndef find_sides(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    print(\"The length of a triangle is\",l)\n    print(\"The breadth of a triangle is\",b)\n    print(\"The height of a triangle is\",h)\n    \ndef find_length(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    length = l\n    print(\"The length of a triangle is\",length)\n    \ndef find_breadth(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    breadth = b\n    print(\"The breadth of a triangle is\",breadth)\n    \ndef find_height(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    height = h\n    print(\"The height of a triangle is\",height)\n    \ndef find_sides_area(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    length = l * h\n    breadth = l * b\n    print(\"The length of a triangle is\",length)\n    print(\"The breadth of a triangle is\",breadth)\n    \ndef find_length_area(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    length = l * h\n    print(\"The length of a triangle is\",length)\n    \ndef find_breadth_area(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    breadth = l * b\n    print(\"The breadth of a triangle is\",breadth)\n    \ndef find_height_area(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    height = l * h\n    print(\"The height of a triangle is\",height)\n    \ndef find_sides_perimeter(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    length = 2 * (l + h)\n    breadth = 2 * (l + b)\n    print(\"The length of a triangle is\",length)\n    print(\"The breadth of a triangle is\",breadth)\n    \ndef find_length_perimeter(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    length = 2 * (l + h)\n    print(\"The length of a triangle is\",length)\n    \ndef find_breadth_perimeter(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    breadth = 2 * (l + b)\n    print(\"The breadth of a triangle is\",breadth)\n    \ndef find_height_perimeter(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    height = 2 * (l + h)\n    print(\"The height of a triangle is\",height)\n    \ndef find_sides_volume(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    length = l * h * (b)\n    breadth = l * (b + h)\n    print(\"The length of a triangle is\",length)\n    print(\"The breadth of a triangle is\",breadth)\n    \ndef find_length_volume(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    length = l * h * (b)\n    print(\"The length of a triangle is\",length)\n    \ndef find_breadth_volume(l,b,h) : \n    '''\n    Write a python function to find the length, breadth, and height of a triangle.\n    '''\n    breadth = l * (b + h)\n    print(\"The breadth of a triangle is\",breadth)\n    \ndef find_height_volume(l,b,h) :"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    str_to_search = re.findall('[a-z]+_[a-z]+', text)\n    if str_to_search == []:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^[a-z]+_[a-z]+$', text)\n    \ndef is_pangram(sentence):\n    '''\n    Write a function to check whether the sentence is a pangram or not.\n    '''\n    return set(sentence.lower()) >= set('abcdefghijklmnopqrstuvwxyz')\n    \ndef list_difference(l1, l2):\n    '''\n    Write a function that returns the difference between the two lists as a new list of only the elements that only exist in list1.\n    '''\n    return list(set(l1) - set(l2))\n    \ndef remove_first_occurrence(l1, x):\n    '''\n    Write a function that returns the list of integers in l1, but without the first occurence of x.\n    '''\n    for i in range(len(l1)):\n        if l1[i] == x:\n            l1.pop(i)\n            return l1\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search(r'[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub(r'\\s+', '', text)\n    return re.findall(r'[a-z]', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    return bool(pattern.match(text))\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.search('^[a-z]+_[a-z]+',text) is not None\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]*')\n    if re.match(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    if re.search('[a-z]+_[a-z]+', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'[a-z]+[a-z_]+',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    text = re.sub('\\s','', text)\n    return not text.isupper() and re.findall(r\"\\w+[\\_]\\w+\", text)!= []\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    if a == 0:\n        return 0\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 2*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return (a*4)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4 * a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string_list = []\n    count = 0\n    for char in string:\n        if char in string_list:\n            count = count + 1\n        else:\n            string_list.append(char)\n    string_list.pop(count)\n    return string_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    return [string[i] for i in range(len(string)) if string[i] not in string[:i]]\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) > len(word):\n        return \"\"\n    else:\n        for i in range(len(word)):\n            if word[i] in string:\n                string = string.replace(word[i],'')\n    return string\n    \nif __name__ == '__main__':\n    string = input()\n    word = input()\n    result = str_to_list(string)\n    if result == '':\n        print(\"NO STRING FOUND\")\n    else:\n        print(result)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = list(string)\n    string2 = list(string.replace('a','A',1))\n    \n    for i in range(len(string2)):\n        if string2[i] in string1:\n            string1.remove(string2[i])\n    \n    return string1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = list(string)\n    list2 = list(string)\n    list1_new = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            pass\n        else:\n            list1_new.append(list1[i])\n    return list1_new\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    ret_list = []\n    for c in string:\n        if c not in string:\n            ret_list.append(c)\n    return ret_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    output = [] \n    for s in string: \n        if s not in output: \n            output.append(s) \n    return output \n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1 = string\n    str2 = string[1:]\n    count1 = {}\n    for i in str1:\n        if i in str2:\n            count1[i] = str2.count(i)\n    sorted_x = sorted(count1.items(), key=lambda kv: kv[1])\n    return_list = []\n    for i in sorted_x:\n        for j in range(i[1]):\n            return_list.append(i[0])\n    print(\"\".join(return_list))\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    str1, str2 = string.split()\n    str2 = list(str2)\n    l1 = len(str1)\n    l2 = len(str2)\n    if l1 > l2:\n        l2 = l2 - l1\n        for i in range(l2):\n            str2.pop(0)\n    elif l1 < l2:\n        l1 = l1 - l2\n        for i in range(l1):\n            str1.pop(0)\n    else:\n        l1 = l1 - l2\n        return list(str1)\n    return str2\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) > len(string_to_list(string)):\n        return None\n    \n    return [char for char in string if char in string_to_list(string)]\n    \n    \ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) > len(string_to_list(string)):\n        return None\n    \n    return [char for char in string if char in string_to_list(string)]\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)-1):\n        for j in range(i+1,len(arraynums)):\n            if(arraynums[i] == arraynums[j]):\n                return True\n    return False\n    \ndef test_all_the_same(arraynums):\n    '''\n    Write a function that takes in an array of integers and returns a boolean representing whether or not all the integers are the same.\n    '''\n    for i in range(len(arraynums)-1):\n        if(arraynums[i]!= arraynums[i+1]):\n            return False\n    return True\n    \ndef test_not_all_the_same(arraynums):\n    '''\n    Write a function that takes in an array of integers and returns a boolean representing whether or not all the integers are different.\n    '''\n    for i in range(len(arraynums)-1):\n        if(arraynums[i] == arraynums[i+1]):\n            return False\n    return True\n    \ndef test_sum_of_all_numbers(arraynums):\n    '''\n    Write a function that takes in an array of integers and returns the sum of all of the integers.\n    '''\n    total = 0\n    for num in arraynums:\n        total += num\n    return total\n    \ndef test_string_contains_substring(string,substring):\n    '''\n    Write a function that takes in a string and a substring and returns a boolean.\n    '''\n    for i in range(len(string)-len(substring)+1):\n        if(string[i:i+len(substring)] == substring):\n            return True\n    return False\n    \ndef test_is_superstring(string1,string2):\n    '''\n    Write a function that takes in two strings and returns a boolean.\n    '''\n    lenstr1 = len(string1)\n    lenstr2 = len(string2)\n    if(lenstr1 < lenstr2):\n        return False\n    for i in range(lenstr1-1):\n        if(string1[i]!= string2[i]):\n            return False\n    return True\n    \ndef test_is_substring(string1,string2):\n    '''\n    Write a function that takes in two strings and returns a boolean.\n    '''\n    lenstr1 = len(string1)\n    lenstr2 = len(string2)\n    if(lenstr1 < lenstr2):\n        return False\n    for i in range(lenstr1-1):\n        if(string1[i]!= string2[i]):\n            return False\n    return True\n    \ndef test_int_has_no_leading_zeros(num):\n    '''\n    Write a function that takes in an integer and returns a boolean representing whether or not the integer has all zeroes as leading digits.\n    '''\n    if(num == 0):\n        return True\n    while(num > 0):\n        if(num % 10!= 0):\n            return False\n        num = num // 10\n    return True\n    \ndef test_has_even_number(num):\n    '''\n    Write a function that takes in an integer and returns a boolean representing whether or not the integer is even.\n    '''\n    return num % 2 == 0\n    \ndef test_string_has_no_substring(string,substring):\n    '''\n    Write a function that takes in a string and a substring and returns a boolean representing whether or not the string contains the substring.\n    '''\n    for i in range(len(string)-len(substring)+1):\n        if(string[i:i+len(substring)] == substring):\n            return True\n    return False\n    \ndef test_no_consecutive_repeats(string):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether or not the string contains no two adjacent characters that are the same.\n    '''\n    prev = string[0]\n    count = 1\n    for i in range(1,len(string)):\n        if(prev!= string[i]):\n            count = 1\n            prev = string[i]\n        else:\n            count += 1\n            if(count == 3):\n                return False\n    return True\n    \ndef test_string_has_consecutive_repeats(string):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether or not the string contains no two adjacent characters that are the same.\n    '''\n    prev = string[0]\n    count = 1\n    for i in range(1,len(string)):\n        if(prev!= string[i]):\n            count = 1\n            prev = string[i]\n        else:\n            count += 1\n            if(count == 4):\n                return False\n    return True\n    \ndef test_string_has_consecutive_repeats2(string):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether or not the string contains no two adjacent characters that are the same.\n    '''\n    prev = string[0]\n    count = 1\n    for i in range(1,len(string)):\n        if(prev!= string[i]):\n            count = 1\n            prev = string[i]\n        else:\n            count += 1\n            if(count == 5):\n                return False\n    return True\n    \ndef test_string_has_consecutive_repeats3(string):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether or not the string contains no two adjacent characters that are the same.\n    '''\n    prev = string[0]\n    count = 1\n    for i in range(1,len(string)):\n        if(prev!= string[i]):\n            count = 1\n            prev = string[i]\n        else:\n            count += 1\n            if(count == 6):\n                return False\n    return True\n    \ndef test_string_has_consecutive_repeats4(string):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether or not the string contains no two adjacent characters that are the same.\n    '''\n    prev = string[0]\n    count = 1\n    for i in range(1,len(string)):\n        if(prev!= string[i]):\n            count = 1\n            prev = string[i]\n        else:\n            count += 1\n            if(count == 7):\n                return False\n    return True\n    \ndef test_string_has_consecutive_repeats5(string):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether or not the string contains no two adjacent characters that are the same.\n    '''\n    prev = string[0]\n    count = 1\n    for i in range(1,len(string)):\n        if(prev!= string[i]):\n            count = 1\n            prev = string[i]\n        else:\n            count += 1\n            if(count == 8):\n                return False\n    return True\n    \ndef test_string_has_consecutive_repeats6(string):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether or not the string contains no two adjacent characters that are the same.\n    '''\n    prev = string[0]\n    count = 1\n    for i in range(1,len(string)):\n        if(prev!= string[i]):\n            count = 1\n            prev = string[i]\n        else:\n            count += 1\n            if(count == 9):\n                return False\n    return True\n    \ndef test_string_has_consecutive_repeats7(string):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether or not the string contains no two adjacent characters that are the same.\n    '''\n    prev = string[0]\n    count = 1\n    for i in range(1,len(string)):\n        if(prev!= string[i]):\n            count = 1\n            prev = string[i]\n        else:\n            count += 1\n            if(count == 10):\n                return False\n    return True\n    \ndef test_string_has_consecutive_repeats8(string):\n    '''\n    Write a function that takes in a string and returns a boolean representing whether or not the string contains n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    numbers = arraynums[:]\n    numbers.sort()\n    dupes = False\n    for i in range(len(numbers)):\n        if i == len(numbers) - 1:\n            break\n        if numbers[i] == numbers[i+1]:\n            dupes = True\n    return dupes\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    arraynums.sort()\n    for i in range(len(arraynums) - 1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # O(n) time | O(n) space\n    seen = set()\n    for num in arraynums:\n        if num in seen:\n            return True\n        seen.add(num)\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if len(arraynums) <= 0:\n        return False\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if i!= j:\n                if arraynums[i] == arraynums[j]:\n                    return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    temp = arraynums[0]\n    for i in range(1, len(arraynums)):\n        if arraynums[i] == temp:\n            return True\n        else:\n            temp = arraynums[i]\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    \n    # If length of arraynums is zero then return False\n    if len(arraynums) == 0:\n        return False\n    \n    # Initialize a dictionary to record the count of each element\n    d = {}\n    \n    # Traverse the arraynums\n    for i in arraynums:\n        # If the element is already recorded and the count is 1, then return True\n        if i in d and d[i] == 1:\n            return True\n        # If the element is not recorded or the count is 0, then set the count to 1 and add the element to the dictionary\n        else:\n            d[i] = 1\n    # Return False, if the arraynums does not contain any duplicate element\n    return False\n    \n    \ndef test_duplicate_with_set(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # If length of arraynums is zero, then return False\n    if len(arraynums) == 0:\n        return False\n    \n    # Initialize an empty set to record the numbers\n    setnums = set()\n    \n    # Traverse the arraynums\n    for i in arraynums:\n        # If the element is already recorded, then return True\n        if i in setnums:\n            return True\n        # If the element is not recorded, then add the element to the set\n        else:\n            setnums.add(i)\n    # Return False, if the arraynums does not contain any duplicate element\n    return False\n    \n    \ndef test_substring(string):\n    '''\n    Write a function to return whether a given string contains any substring that is a palindrome.\n    '''\n    \n    # If length of string is zero, return False\n    if len(string) == 0:\n        return False\n    \n    # Initialize a set of all characters in the string\n    setstring = set(string)\n    \n    # Traverse the string, if the character is present in the set, then return True\n    for i in string:\n        if i in setstring:\n            return True\n    \n    # Return False, if the string does not contain any palindrome substring\n    return False\n    \n    \ndef test_longest_substring(string):\n    '''\n    Write a function to find the length of the longest substring in a given string.\n    '''\n    \n    # If length of string is zero, return 0\n    if len(string) == 0:\n        return 0\n    \n    # Initialize an empty list\n    slist = []\n    \n    # Traverse the string, if the character is present in the list, then append to the list\n    for i in string:\n        if i in slist:\n            return len(slist)\n        else:\n            slist.append(i)\n    # Return length of the list, if the string does not contain any substring\n    return len(slist)\n    \n    \ndef test_longest_substring_from_k_distance(string, k):\n    '''\n    Write a function to find the length of the longest substring in a given string,\n    where the length of the substring is at least k.\n    '''\n    \n    # If length of string is zero, return 0\n    if len(string) == 0:\n        return 0\n    \n    # Initialize an empty list\n    slist = []\n    \n    # Traverse the string, if the character is present in the list, then append to the list\n    for i in range(len(string)):\n        if i < k:\n            slist.append(string[i])\n        else:\n            break\n    \n    # Check whether the length of the list is more than the length of the substring\n    if len(slist) > len(string) - k:\n        # Return length of the list, if the string does not contain any substring\n        return len(slist)\n    \n    # Return length of the substring, if the string does not contain any substring\n    return len(string[k:])\n    \n    \ndef test_validate_paranthesis(string):\n    '''\n    Write a function to validate a given expression string.\n    '''\n    \n    # If length of string is zero, return False\n    if len(string) == 0:\n        return False\n    \n    # Create an empty dictionary to record the paranthesis pairs\n    paranth = {}\n    \n    # Check whether the paranthesis pairs are balanced in the given string\n    for i in string:\n        if i in paranth:\n            paranth[i] += 1\n        else:\n            paranth[i] = 1\n    \n    # Check whether the paranthesis pairs are balanced in the given string\n    for i in paranth.values():\n        if i!= 0:\n            return False\n    \n    # Return True, if the paranthesis pairs are balanced in the given string\n    return True\n    \n    \ndef test_validate_parenthesis(string):\n    '''\n    Write a function to validate a given expression string.\n    '''\n    \n    # If length of string is zero, return False\n    if len(string) == 0:\n        return False\n    \n    # Create an empty dictionary to record the paranthesis pairs\n    paranth = {}\n    \n    # Check whether the paranthesis pairs are balanced in the given string\n    for i in string:\n        if i in paranth:\n            paranth[i] += 1\n        else:\n            paranth[i] = 1\n    \n    # Check whether the paranthesis pairs are balanced in the given string\n    for i in paranth.values():\n        if i!= 0:\n            return False\n    \n    # Return True, if the paranthesis pairs are balanced in the given string\n    return True\n    \n    \ndef test_remove_duplicates(array):\n    '''\n    Write a function to remove all duplicate items in an array.\n    '''\n    # If length of array is zero, return an empty array\n    if len(array) == 0:\n        return []\n    \n    # Initialize a set of all characters in the array\n    setarray = set(array)\n    \n    # Traverse the array, if the character is present in the set, then remove it from the set\n    for i in range(len(array)):\n        if array[i] in setarray:\n            array.remove(array[i])\n            setarray.remove(array[i])\n    \n    # Return the result, if the array does not contain any duplicate element\n    return array\n    \n    \ndef test_flatten(array):\n    '''\n    Write a function to flatten a given 2-D array.\n    '''\n    # If length of array is zero, return an empty array\n    if len(array) == 0:\n        return []\n    \n    # Initialize a new list to store flattened array\n    newarray = []\n    \n    # Traverse the array, if the element is not list, then append it to the new list\n    for i in array:\n        if type(i)!= list:\n            newarray.append(i)\n        else:\n            newarray.extend(i)\n    \n    # Return the result, if the array does not contain any duplicate element\n    return newarray\n    \n    \ndef test_flatten_with_set(array):\n    '''\n    Write a function to flatten a given 2-D array.\n    '''\n    # If length of array is zero, return an empty array\n    if len(array) == 0:\n        return []\n    \n    # Initialize a set of all characters in the array\n    setarray = set()\n    \n    # Traverse the array, if the element is not list, then append it to the set\n    for i in array:\n        if type(i)!= list:\n            setarray.add(i)\n        else:\n            setarray.update(i)\n    \n    # Return the result, if the array does not contain any duplicate element\n    return setarray\n    \n    \ndef test_validate_credit_card_number(string):\n    '''\n    Write a function to validate a credit card number.\n    '''\n    \n    # If length of string is zero, return False\n    if len(string) == 0:\n        return False\n    \n    # Initialize a dictionary to record the numbers\n    d = {}\n    \n    # Traverse the string, if the character is not a digit, then return False\n    for i i"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # arraynums = [1, 2, 3, 4]\n    # print(set(arraynums))\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # Write your function here\n    duplicate = False\n    for num in arraynums:\n        if arraynums.count(num) > 1:\n            duplicate = True\n            break\n    return duplicate\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    s = set()\n    for num in arraynums:\n        if num in s:\n            return True\n        else:\n            s.add(num)\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x%10==3 or x%10==6 or x%10==9: \n        return True \n    else: \n        return False \n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 28: \n        return True\n    elif x == 3:\n        return False\n    else: \n        i = 3\n        while i < x:\n            if x % i == 0:\n                return False\n            else:\n                i += 1\n        else:\n            return True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    # your code here\n    return (x%3 == 0 and x%5 == 0) or (x%3 == 0 and x%7 == 0) or (x%5 == 0 and x%7 == 0)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x>=4 and x<=8):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    num = x\n    a = num%10\n    b = num%100/10\n    c = num%1000/100\n    d = num%10000/1000\n    e = num%100000/10000\n    f = num/1000000\n    if (a**3+b**3+c**3+d**3+e**3+f**3 == 1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if(x==56 or x==-4 or x==-8 or x==47 or x==31 or x==23 or x==-6 or x==67 or x==25 or x==19 or x==-7 or x==-30 or x==-5 or x==-29 or x==-9 or x==44 or x==-26 or x==42 or x==-1 or x==-49 or x==-9 or x==-39 or x==31 or x==28 or x==23 or x==19 or x==-10 or x==28 or x==45 or x==-19 or x==47 or x==35 or x==-8 or x==56 or x==20 or x==-4 or x==-30 or x==57 or x==-30 or x==-5 or x==-25 or x==30 or x==10 or x==-15 or x==25 or x==-9 or x==-17 or x==-5 or x==-7 or x==-14 or x==47 or x==-7 or x==32 or x==-26 or x==8 or x==-1 or x==-28 or x==-27 or x==-13 or x==-2 or x==-6 or x==-30 or x==-9 or x==-28 or x==-18 or x==-47 or x==7 or x==15 or x==-12 or x==19 or x==-2 or x==28 or x==11 or x==-6 or x==-18 or x==-41 or x==25 or x==-5 or x==-29 or x==-37 or x==-17 or x==-2 or x==-9 or x==-14 or x==-20 or x==-3 or x==-12 or x==-6 or x==-20 or x==-10 or x==28 or x==33 or x==-2 or x==-32 or x==-18 or x==-15 or x==-25 or x==-6 or x==14 or x==-6 or x==-26 or x==-10 or x==10 or x==-32 or x==-11 or x==-9 or x==-11 or x==-22 or x==-11 or x==-14 or x==-26 or x==-22 or x==-27 or x==-21 or x==-10 or x==-20 or x==-2 or x==-14 or x==-12 or x==-16 or x==-17 or x==-18 or x==-18 or x==-29 or x==-12 or x==-14 or x==-17 or x==-3 or x==-21 or x==-24 or x==-24 or x==-19 or x==-13 or x==-5 or x==-6 or x==-10 or x==-4 or x==-21 or x==-5 or x==-11 or x==-5 or x==-9 or x==-7 or x==-9 or x==-26 or x==-28 or x==-14 or x==-5 or x==-6 or x==-3 or x==-3 or x==-15 or x==-3 or x==-2 or x==-1 or x==-16 or x==-14 or x==-23 or x==-23 or x==-18 or x==-14 or x==-16 or x==-13 or x==-10 or x==-12 or x==-13 or x==-8 or x==-7 or x==-14 or x==-10 or x==-3 or x==-2 or x==-7 or x==-18 or x==-20 or x==-3 or x==-3 or x==-9 or x==-11 or x==-26 or x==-13 or x==-9 or x==-3 or x==-7 or x==-6 or x==-5 or x==-6 or x==-8 or x==-4 or x==-19 or x==-14 or x==-11 or x==-16 or x==-2 or x==-3 or x==-19 or x==-16 or x==-1 or x==-14 or x==-5 or x==-11 or x==-20 or x==-2 or x==-4 or x==-3 or x==-7 or x==-16 or x==-13 or x==-16 or x==-5 or x==-15 or x==-5 or x==-6 or x==-3 or x==-13 or x==-12 or x==-19 or x==-8 or x==-12 or x==-7 or x==-11 or x==-4 or x==-6 or x==-9 or x==-17 or x==-10 or x==-2 or x==-8 or x==-5 or x==-4 or x==-7 or x==-3 or x==-12 or x==-7 or x==-15 or x==-3 or x==-7 or x==-2 or x==-8 or x==-19 or x==-3 or x==-11 or x==-5 or x==-6 or x==-18 or x==-20 or x==-10 or x==-13 or x==-17 or x==-2 or x==-9 or x==-9 or x==-3 or x==-19 or x==-5 or x==-6 or x==-15 or x==-6 or x==-5 or x==-3 or x==-9 or x==-11 or x==-11 or x==-8 or x==-6 or x==-16 or x==-3 or x==-17 or x==-18 or x==-9 or x==-19 or x==-4 or x==-5 or x==-6 or x==-2 or x==-4 or x==-15 or x==-14 or x==-16 or x==-4 or x==-4 or x==-10 or x==-9 or x==-6 or x==-3 or x==-4 or x==-12 or x==-7 or x==-2 or x==-3 or x==-4 or x==-13 or x==-16 or x==-8 or x==-14 or x==-14 or x==-3 or x==-1 or x==-16 or x==-11 or x==-10 or x==-9 or x==-6 or x==-5 or x==-2 or x==-3 or x==-9 or x==-8 or x==-5 or x==-10 or x==-4 or x==-7 or x==-7 or x==-11 or x==-3 or x==-11 or x==-2 or x==-11 or x==-9 or x==-8 or x==-9 or x==-10 or x==-5 or x==-10 or x==-4 or x==-7 or x==-4 or x==-8 or x==-6 or x==-11 or x==-13 or x==-8 or x==-12 or x==-8 or x==-6 or x==-7 or x==-1 or x==-5 or x==-5 or x==-10 or x==-9 or x==-12 or x==-6 or x==-12 or x==-12 or x==-7 or x==-13 or x==-15 or x==-14 or x==-7 or x==-16 or x==-2 or x==-6 or x==-4 or x==-16 or x==-5 or x==-2 or x==-4 or x==-13 or x==-8 or x==-9 or x==-16 or x==-2 or x==-16 or x==-10 or x==-3 or x==-18 or x==-10 or x==-9 or x==-10 or x==-4 or x==-8 or x==-14 or x==-14 or x==-3 or x==-18 or x==-4 or x==-16 or x==-14 or x==-3 or x==-14 or x==-7 or x==-8 or x==-5 or x==-8 or x==-1 or x==-4 or x==-6 or x==-10 or x==-2 or x==-2 or x==-12 or x==-3 or x==-11 or x==-8 or x==-4 or x==-2 or x==-14 or x==-6 or x==-12 or x==-4 or x==-9 or x==-13 or x==-7 or x==-8 or x==-4 or x==-15 or x==-9 or x==-2 or "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if (x%10 == 5 or x%10 == 6 or x%10 == 7 or x%10 == 8) and x//10%10 == 5 else False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x//10==x//100==x//1000)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    a = x % 3\n    b = x % 5\n    c = x % 7\n    if a == 0 and b == 0 and c == 0:\n        return True\n    else:\n        return False\n        \n        \n        \nprint(is_woodall(57))\nprint(is_woodall(25))\nprint(is_woodall(11))\nprint(is_woodall(1))\nprint(is_woodall(7))\nprint(is_woodall(10))\nprint(is_woodall(13))\nprint(is_woodall(16))\nprint(is_woodall(12))\nprint(is_woodall(14))\nprint(is_woodall(23))\nprint(is_woodall(22))\nprint(is_woodall(25))\nprint(is_woodall(12))\nprint(is_woodall(3))\nprint(is_woodall(15))\nprint(is_woodall(20))\nprint(is_woodall(28))\nprint(is_woodall(9))\nprint(is_woodall(5))\nprint(is_woodall(6))\nprint(is_woodall(8))\nprint(is_woodall(4))\nprint(is_woodall(7))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(11))\nprint(is_woodall(8))\nprint(is_woodall(10))\nprint(is_woodall(16))\nprint(is_woodall(22))\nprint(is_woodall(25))\nprint(is_woodall(10))\nprint(is_woodall(15))\nprint(is_woodall(16))\nprint(is_woodall(2))\nprint(is_woodall(9))\nprint(is_woodall(5))\nprint(is_woodall(3))\nprint(is_woodall(28))\nprint(is_woodall(28))\nprint(is_woodall(12))\nprint(is_woodall(6))\nprint(is_woodall(1))\nprint(is_woodall(14))\nprint(is_woodall(10))\nprint(is_woodall(12))\nprint(is_woodall(16))\nprint(is_woodall(25))\nprint(is_woodall(22))\nprint(is_woodall(8))\nprint(is_woodall(2))\nprint(is_woodall(11))\nprint(is_woodall(15))\nprint(is_woodall(17))\nprint(is_woodall(3))\nprint(is_woodall(5))\nprint(is_woodall(28))\nprint(is_woodall(2))\nprint(is_woodall(1))\nprint(is_woodall(7))\nprint(is_woodall(6))\nprint(is_woodall(8))\nprint(is_woodall(5))\nprint(is_woodall(4))\nprint(is_woodall(2))\nprint(is_woodall(12))\nprint(is_woodall(10))\nprint(is_woodall(16))\nprint(is_woodall(15))\nprint(is_woodall(23))\nprint(is_woodall(21))\nprint(is_woodall(25))\nprint(is_woodall(20))\nprint(is_woodall(27))\nprint(is_woodall(25))\nprint(is_woodall(29))\nprint(is_woodall(27))\nprint(is_woodall(28))\nprint(is_woodall(25))\nprint(is_woodall(22))\nprint(is_woodall(12))\nprint(is_woodall(1))\nprint(is_woodall(14))\nprint(is_woodall(7))\nprint(is_woodall(3))\nprint(is_woodall(15))\nprint(is_woodall(9))\nprint(is_woodall(28))\nprint(is_woodall(3))\nprint(is_woodall(1))\nprint(is_woodall(13))\nprint(is_woodall(8))\nprint(is_woodall(4))\nprint(is_woodall(5))\nprint(is_woodall(7))\nprint(is_woodall(10))\nprint(is_woodall(25))\nprint(is_woodall(8))\nprint(is_woodall(21))\nprint(is_woodall(25))\nprint(is_woodall(26))\nprint(is_woodall(2))\nprint(is_woodall(26))\nprint(is_woodall(24))\nprint(is_woodall(23))\nprint(is_woodall(28))\nprint(is_woodall(11))\nprint(is_woodall(5))\nprint(is_woodall(11))\nprint(is_woodall(13))\nprint(is_woodall(16))\nprint(is_woodall(5))\nprint(is_woodall(6))\nprint(is_woodall(17))\nprint(is_woodall(2))\nprint(is_woodall(19))\nprint(is_woodall(3))\nprint(is_woodall(10))\nprint(is_woodall(14))\nprint(is_woodall(24))\nprint(is_woodall(13))\nprint(is_woodall(28))\nprint(is_woodall(25))\nprint(is_woodall(27))\nprint(is_woodall(8))\nprint(is_woodall(10))\nprint(is_woodall(5))\nprint(is_woodall(11))\nprint(is_woodall(6))\nprint(is_woodall(1))\nprint(is_woodall(14))\nprint(is_woodall(13))\nprint(is_woodall(15))\nprint(is_woodall(8))\nprint(is_woodall(10))\nprint(is_woodall(13))\nprint(is_woodall(7))\nprint(is_woodall(11))\nprint(is_woodall(5))\nprint(is_woodall(5))\nprint(is_woodall(7))\nprint(is_woodall(1))\nprint(is_woodall(1))\nprint(is_woodall(7))\nprint(is_woodall(1))\nprint(is_woodall(7))\nprint(is_woodall(8))\nprint(is_woodall(4))\nprint(is_woodall(2))\nprint(is_woodall(4))\nprint(is_woodall(7))\nprint(is_woodall(25))\nprint(is_woodall(10))\nprint(is_woodall(5))\nprint(is_woodall(7))\nprint(is_woodall(1))\nprint(is_woodall(5))\nprint(is_woodall(8))\nprint(is_woodall(5))\nprint(is_woodall(8))\nprint(is_woodall(10))\nprint(is_woodall(10))\nprint(is_woodall(12))\nprint(is_woodall(3))\nprint(is_woodall(14))\nprint(is_woodall(7))\nprint(is_woodall(5))\nprint(is_woodall(8))\nprint(is_woodall(10))\nprint(is_woodall(15))\nprint(is_woodall(23))\nprint(is_woodall(11))\nprint(is_woodall(12))\nprint(is_woodall(8))\nprint(is_woodall(16))\nprint(is_woodall(25))\nprint(is_woodall(23))\nprint(is_woodall(22))\nprint(is_woodall(28))\nprint(is_woodall(25))\nprint(is_woodall(23))\nprint(is_woodall(29))\nprint(is_woodall(28))\nprint(is_woodall(27))\nprint(is_woodall(25))\nprint(is_woodall(25))\nprint(is_woodall(22))\nprint(is_woodall(28))\nprint(is_woodall(29))\nprint(is_woodall(26))\nprint(is_woodall(23))\nprint(is_woodall(19))\nprint(is_woodall(23))\nprint(is_woodall(26))\nprint(is_woodall(28)"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return True if x == 8 or x == 9 else False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num > 0:\n        rev_num = (rev_num * 10) + num % 10\n        num = num // 10\n    if rev_num == num:\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return (num * 2) - num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = int(str(num)[::-1])\n    if num == n*2:\n        return True\n    else:\n        return False\n        \ndef rev_two(num):\n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = int(str(num)[::-1])\n    if num == n*2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return(num * 2 - 1)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num > 0):\n        rev_num = rev_num*10 + num%10\n        num = num//10\n    return rev_num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while (num > 0):\n        dig = num % 10\n        rev = rev * 10 + dig\n        num = num // 10\n    if (num == rev):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    #1. Recursive Approach\n    #2. Iterative Approach\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num < 0:\n        num = abs(num)\n        rev_num = num\n        rev_num = (rev_num * (-1)) % 10\n        if num == rev_num:\n            return True\n        else:\n            return False\n    else:\n        rev_num = num\n        rev_num = (rev_num * (-1)) % 10\n        if num == rev_num:\n            return True\n        else:\n            return False\n        \nprint(rev(8))\nprint(rev(9))\nprint(rev(5))\nprint(rev(-8))\nprint(rev(-9))\nprint(rev(-5))\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num == 0:\n        return 1\n    elif num == -1:\n        return -2\n    else:\n        result = rev(num // -2)\n        result = result * 2 + num % -2\n        return result\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n = num\n    rev = 0\n    while(n>0):\n        dig = n%10\n        rev = (rev*10)+dig\n        n = n//10\n    if(num == rev):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m = 0 \n    for i in range(0, len(arr)) : \n        if arr[i] > m : \n            m = arr[i]\n    return m \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    m = -1000\n    for i in range(0, len(arr)) : \n        if m < int(arr[i]) : \n            m = int(arr[i]) \n    return m \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    sorted_arr = sorted(arr,reverse=True)\n    return sorted_arr[0]\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for i in range(0,len(arr)):\n        if(max_num < int(arr[i])):\n            max_num = int(arr[i])\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    arr = list(map(int, arr))\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return max(arr)\n    max_num = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            for k in range(len(arr)):\n                if(arr[i] + arr[j] + arr[k] > max_num):\n                    max_num = arr[i] + arr[j] + arr[k]\n    return max_num"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = 0\n    for num in arr :\n        if num > max_num :\n            max_num = num\n    return max_num\n    \n    \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxNum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            for k in range(len(arr)):\n                if (i!= j and i!= k and j!= k):\n                    if(maxNum < int(arr[i]) + int(arr[j]) + int(arr[k])) : \n                        maxNum = int(arr[i]) + int(arr[j]) + int(arr[k])\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    result = 0\n    for i in range(len(arr)) : \n        result = result * 10 + arr[i]\n    return result\n    \n    \n    "
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    Max_Num = 0\n    for i in range(len(arr)) :\n        Max_Num = max(Max_Num,arr[i])\n    return Max_Num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num_list = list(map(int, arr))\n    print(num_list)\n    max_num = num_list[0]\n    for i in range(1, len(num_list)):\n        if (max_num < num_list[i]):\n            max_num = num_list[i]\n    print(max_num)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x > 0 and y < 0 or x < 0 and y > 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0 or x > 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        print(\"true\")\n    elif x > 0 and y < 0:\n        print(\"true\")\n    else:\n        print(\"false\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x = int(x)\n    y = int(y)\n    if x == 0 and y == 0:\n        print(\"Both the numbers are equal\")\n    elif x == 0:\n        print(\"Only x is equal to 0\")\n    elif y == 0:\n        print(\"Only y is equal to 0\")\n    else:\n        if (x>0 and y>0) or (x<0 and y<0):\n            print(\"Both the numbers are opposite signs\")\n        else:\n            print(\"Both the numbers are same signs\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return 'Both are zero'\n    elif x == 0:\n        return 'y is positive'\n    elif y == 0:\n        return 'x is positive'\n    else:\n        return 'Both are non-zero'\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x >= 0 and y <= 0: \n        return True\n    if x <= 0 and y >= 0: \n        return True\n    return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x == -y\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    x=abs(x)\n    y=abs(y)\n    return x==y or y==-x \ndef get_decimal_value(x,y):\n    '''\n    Write a python function to find the decimal value of x raised to the power y.\n    '''\n    ans=0\n    i=1\n    while i<=y:\n        ans=ans+(x*i)\n        i=i+1\n    return ans\ndef get_decimal_exponent(x,y):\n    '''\n    Write a python function to calculate the decimal value of x raised to the power y.\n    '''\n    ans=0\n    i=1\n    while i<=y:\n        ans=ans+(x*i)\n        i=i+1\n    return ans\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x<0 and y>0 or x>0 and y<0\n    \ndef sum_of_squares(x):\n    '''\n    Write a python function to calculate sum of squares of x to the power of 2.\n    '''\n    ans=0\n    for i in range(x):\n        ans=ans+pow(i,2)\n    return ans\n    \ndef is_prime(x):\n    '''\n    Write a python function to check whether the given integer is prime or not.\n    '''\n    for i in range(2,x):\n        if x%i==0:\n            return False\n    return True\n    \ndef num_of_prime(n):\n    '''\n    Write a python function to count the number of prime numbers in the range of n.\n    '''\n    count=0\n    for i in range(2,n):\n        if is_prime(i):\n            count+=1\n    return count\n    \ndef func1(x,y):\n    '''\n    Write a python function that calculates the sum of two integers using the recursion.\n    '''\n    if x==1 or y==1:\n        return 1\n    else:\n        return x+y\n    \ndef func2(x,y):\n    '''\n    Write a python function that calculates the sum of two integers using the iterative approach.\n    '''\n    i=0\n    carry=0\n    while(x!=0 or y!=0):\n        sum=carry+x if x>y else carry+y\n        carry=sum//10\n        sum=sum%10\n        i+=1\n    return sum,i\n    \ndef func3(x,y):\n    '''\n    Write a python function that calculates the sum of two integers using the iterative approach.\n    '''\n    i=0\n    sum=0\n    carry=0\n    while(x!=0 or y!=0):\n        sum+=carry+(x%10) if x>y else carry+(y%10)\n        carry=sum//10\n        sum=sum%10\n        i+=1\n        x=x//10\n        y=y//10\n    return sum,i\n    \ndef number_of_ways_n_ways(n):\n    '''\n    Write a python function that takes an integer N and returns the number of ways you can arrange an\n    integer of N digits into a number of digits equal to K\n    '''\n    ans=0\n    x=0\n    while(x<n):\n        ans+=factorial(n)\n        x+=1\n    return ans\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (-x) < (-y)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    assert isinstance(n, int), \"n should be an integer\"\n    octagon_list = []\n    for i in range(n+1):\n        octagon_list.append(oct(i))\n    octagon_list = list(map(int, octagon_list))\n    return octagon_list[n]\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        octagonal_numbers.append(i*(3*i-1))\n    return octagonal_numbers\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    i = 1\n    while True:\n        if i*(i+1)*(i+2)//2 == n:\n            return i\n        i += 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    pass\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    octs = []\n    while len(octs) < n:\n        octs.append(octs[-1] + 3)\n    return octs[-1]\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return (((8*n**2) - 1) / (4*n)) + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if not isinstance(n, int) or n < 0:\n        return None\n    if n == 0: \n        return 1\n    n = n * 2 + 1\n    return n * (1 + sqrt(8)) / 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_numbers = []\n    for i in range(1, n+1):\n        octagonal_numbers.append(i**2)\n    print(octagonal_numbers)\n    return octagonal_numbers\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**2 + 2*n + 1\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(n+3)/2\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    number_of_substrings = 0\n    start = 0\n    end = 0\n    while end < len(s):\n        if s[start] == s[end]:\n            start += 1\n        else:\n            end += 1\n        end += 1\n        if (end-start) == len(s):\n            number_of_substrings += 1\n    print(number_of_substrings)\n    \n    \ndef count_Substrings2(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    start = 0\n    end = 0\n    number_of_substrings = 0\n    while end < len(s):\n        if s[start] == s[end]:\n            start += 1\n        else:\n            end += 1\n        if end-start == len(s):\n            number_of_substrings += 1\n    print(number_of_substrings)\n    \n    \ndef count_Substrings3(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    number_of_substrings = 0\n    count = 0\n    for i in range(0,len(s)):\n        if count < int(s[i]):\n            count = int(s[i])\n        number_of_substrings += (count*(count+1))//2\n        count += 1\n    print(number_of_substrings)\n    \n    \ndef count_Substrings4(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def digit_sum(n):\n        count = 0\n        while n > 0:\n            count += n % 10\n            n = n // 10\n        return count\n    number_of_substrings = 0\n    for i in range(0,len(s)):\n        if digit_sum(i) < int(s[i]):\n            continue\n        number_of_substrings += (digit_sum(i)*(digit_sum(i)+1))//2\n    print(number_of_substrings)\n    \n    \ndef count_Substrings5(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    number_of_substrings = 0\n    count = 0\n    for i in range(0,len(s)):\n        if count < int(s[i]):\n            count = int(s[i])\n        number_of_substrings += (count*(count+1))//2\n        count += 1\n    print(number_of_substrings)\n    \n    \ndef count_Substrings6(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if count < int(s[i]):\n            count = int(s[i])\n        count *= (count+1)\n    print(count)\n    \n    \ndef count_Substrings7(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def sum_Digits(n):\n        return (n*(n+1))//2\n    number_of_substrings = 0\n    for i in range(0,len(s)):\n        if sum_Digits(i) < int(s[i]):\n            continue\n        number_of_substrings += (sum_Digits(i)*(sum_Digits(i)+1))//2\n    print(number_of_substrings)\n    \n    \ndef count_Substrings8(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def sum_Digits(n):\n        count = 0\n        while n > 0:\n            count += n % 10\n            n = n // 10\n        return count\n    number_of_substrings = 0\n    for i in range(0,len(s)):\n        if sum_Digits(i) < int(s[i]):\n            continue\n        number_of_substrings += (sum_Digits(i)*(sum_Digits(i)+1))//2\n    print(number_of_substrings)\n    \n    \ndef count_Substrings9(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    number_of_substrings = 0\n    count = 0\n    for i in range(0,len(s)):\n        if count < int(s[i]):\n            count = int(s[i])\n        number_of_substrings += (count*(count+1))//2\n        count += 1\n    print(number_of_substrings)\n    \n    \ndef count_Substrings10(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    number_of_substrings = 0\n    count = 0\n    while count < len(s):\n        if s[count] == s[count+1]:\n            count += 2\n        else:\n            count += 1\n        number_of_substrings += 1\n    print(number_of_substrings)\n    \n    \ndef count_Substrings11(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    number_of_substrings = 0\n    count = 0\n    for i in range(0,len(s)):\n        if count < int(s[i]):\n            count = int(s[i])\n        number_of_substrings += (count*(count+1))//2\n        count += 1\n    print(number_of_substrings)\n    \n    \ndef count_Substrings12(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def sum_Digits(n):\n        return (n*(n+1))//2\n    number_of_substrings = 0\n    count = 0\n    while count < len(s):\n        if sum_Digits(count) < int(s[count]):\n            count += 1\n        else:\n            count += 2\n        number_of_substrings += 1\n    print(number_of_substrings)\n    \n    \ndef count_Substrings13(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def sum_Digits(n):\n        count = 0\n        while n > 0:\n            count += n % 10\n            n = n // 10\n        return count\n    number_of_substrings = 0\n    count = 0\n    while count < len(s):\n        if sum_Digits(count) < int(s[count]):\n            count += 1\n        else:\n            count += 2\n        number_of_substrings += 1\n    print(number_of_substrings)\n    \n    \ndef count_Substrings14(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    def sum_Digits(n):\n        count = 0\n        while n > 0:\n            count += n % 10\n            n = n // 10\n        return count\n    number_of_substrings = 0\n    count = 0\n    while count < len(s):\n        if sum_Digits(count) < int(s[count]):\n            count += 1\n        else:\n            count += 2\n        number_of_substrings += 1\n    print(number_of_substrings)\n    \n    \ndef count_Substrings15(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    number_of_substrings = 0\n    for i in range(0,len(s)):\n        count = 0"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    ans = 0\n    d = defaultdict(int)\n    for i in range(len(s)):\n        c = s[i]\n        if d[c] == 0:\n            ans += 1\n            d[c] += 1\n        else:\n            d[c] += 1\n    return ans\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(len(s)):\n            if int(s[i:j+1]) == len(s[i:j+1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            substring=s[i:j]\n            digit_sum=0\n            for k in range(len(substring)):\n                digit_sum+=int(substring[k])\n            if digit_sum==len(substring):\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    n=len(s)\n    count=0\n    i=0\n    while i<n:\n        j=i\n        while j<n and s[i]==s[j]:\n            count+=1\n            j+=1\n        i+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(1,len(s)):\n        substring = s[:i]\n        if(len(substring) == 1):\n            count += 1\n        else:\n            for j in range(i,len(s)):\n                substring = substring+s[j]\n                if(len(substring) == i):\n                    count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # if len(s) < 2:\n    #     return 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # code here\n    count = 0\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            print(s[i:j])\n            if sum(map(int,list(s[i:j]))) == j-i:\n                count += 1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        for j in range(i+1,len(s)+1):\n            substring = s[i:j]\n            if len(substring)>1:\n                if int(substring)==len(substring):\n                    d[substring] += 1\n            else:\n                continue\n    print(d)\n    return(d.values())\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if(int(s[i:j+1]) == len(s[i:j+1])):\n                count += 1\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for i in range(1, len(xs)):\n        if xs[i] < smallest_num:\n            smallest_num = xs[i]\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for num in xs:\n        if smallest == None:\n            smallest = num\n        elif num < smallest:\n            smallest = num\n    return smallest\nprint(smallest_num([12,11,5,6]))\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if len(xs) > 0:\n        smallest = xs[0]\n        for num in xs:\n            if num < smallest:\n                smallest = num\n        return smallest\n    else:\n        return None\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    l=len(xs)\n    for i in range(l):\n        for j in range(i+1,l):\n            if xs[i]>xs[j]:\n                xs[i],xs[j]=xs[j],xs[i]\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    if xs == []:\n        return None\n    min = xs[0]\n    for i in xs:\n        if i < min:\n            min = i\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    num = xs[0]\n    for i in xs:\n        if i < num:\n            num = i\n    return num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_num = xs[0]\n    for num in xs:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = min(xs)\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # sort the list\n    # find the maximum difference between pairs\n    # go through the list and find the maximum difference and then swap the minimum and maximum difference value to get the result\n    # return the max difference\n    test_list.sort()\n    result = test_list[0]\n    # result = (test_list[0] - test_list[1])\n    for i in range(0, len(test_list) - 1):\n        diff = test_list[i + 1] - test_list[i]\n        if diff > result:\n            result = diff\n    return result\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    first_diff = -1\n    second_diff = -1\n    for i in range(len(test_list)):\n        if test_list[i] - test_list[i+1] > first_diff:\n            first_diff = test_list[i] - test_list[i+1]\n    for i in range(len(test_list)):\n        if test_list[i] - test_list[i+1] < second_diff:\n            second_diff = test_list[i] - test_list[i+1]\n    return max(first_diff, second_diff)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_difference_result = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j:\n                diff = abs(test_list[i] - test_list[j])\n                if diff > max_difference_result:\n                    max_difference_result = diff\n    return max_difference_result\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return 0\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    res = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            res = max(res, abs(test_list[i]-test_list[j]))\n    return res\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    m_diff = float('-inf')\n    l = []\n    for tup in test_list:\n        if abs(tup[0]) > m_diff:\n            l = []\n            m_diff = abs(tup[0])\n        if tup[0]!= 0:\n            l.append(abs(tup[1] - tup[0]))\n    return max(l)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # get max difference\n    max_diff = max(test_list) - min(test_list)\n    \n    # return max difference\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    a = test_list[0]\n    b = test_list[0]\n    for i in range(len(test_list)):\n        if test_list[i] > a:\n            a = test_list[i]\n    for i in range(len(test_list)):\n        if test_list[i] < b:\n            b = test_list[i]\n    diff = (a - b)\n    if diff > max_diff:\n        max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    list_of_tuples = tuple(test_list)\n    max_diff = 0\n    for i in range(len(list_of_tuples)):\n        for j in range(len(list_of_tuples)):\n            diff = abs(list_of_tuples[i][0] - list_of_tuples[j][0])\n            if max_diff < diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # Your code here\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if (test_list[i] - test_list[j]) > max_diff:\n                max_diff = test_list[i] - test_list[j]\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    s = sorted(subjectmarks, key=lambda x:x[1])\n    return s\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # print(sorted(subjectmarks, key=lambda x:x[1]))\n    # print(sorted(subjectmarks, key=lambda x:x[1], reverse=True))\n    # print(sorted(subjectmarks, key=lambda x:x[0]))\n    # print(sorted(subjectmarks, key=lambda x:x[0], reverse=True))\n    # print(sorted(subjectmarks, key=lambda x:x[0], reverse=True))\n    # print(sorted(subjectmarks, key=lambda x:x[1], reverse=True))\n    # print(sorted(subjectmarks, key=lambda x:x[1], reverse=True))\n    # print(sorted(subjectmarks, key=lambda x:x[0]))\n    # print(sorted(subjectmarks, key=lambda x:x[1]))\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_list = sorted(subjectmarks,key=lambda sub_marks:sub_marks[1])\n    print(sorted_list)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sort_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sort_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    list = []\n    sorted_list = []\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    result = []\n    for subject in subjectmarks:\n        result.append(sorted(subject, key=lambda x: x[1]))\n    return result\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    res = sorted(subjectmarks, key=lambda x: x[1])\n    print(res)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    # print(subjectmarks)\n    # key=lambda item:item[1]\n    subjectmarks.sort(key=lambda item:item[1])\n    # print(subjectmarks)\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda i: i[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda sub:sub[1])\n    return sorted_marks\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if type(data_list) is list:\n        return sum(map(lambda x: recursive_list_sum(x), data_list))\n    else:\n        return data_list\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    \n    # recursive case\n    if type(data_list[0]) is list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_val = 0\n    if not data_list:\n        return sum_val\n    elif isinstance(data_list[0],list):\n        for sub_list in data_list:\n            sum_val = sum_val + recursive_list_sum(sub_list)\n    else:\n        sum_val = sum_val + data_list[0]\n    return sum_val\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if data_list == []:\n        return 0\n    if isinstance(data_list, int):\n        return data_list\n    return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # base case: empty list\n    if len(data_list) == 0:\n        return 0\n    # recursive case: sum first element and pass on to the other elements\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i > 0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for x in list:\n        if x>0:\n            count+=1\n    print(\"No. of positive numbers in the list are \",count)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in range(len(list)):\n        if list[i]>0:\n            count+=1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count = count + 1\n    print(count)\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return list.count(1)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    n=0\n    for i in list:\n        if i>0:\n            n+=1\n    return n\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    def bell_number_helper(n):\n        if n == 1:\n            return 1\n        else:\n            if n >= 2:\n                return bell_number_helper(n - 1) + bell_number_helper(n - 2)\n            else:\n                return 0\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    return bell_number(n - 1) + bell_number(n - 2) + bell_number(n - 3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n        \n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        # first of all we have to generate all possible partitions\n        # then we count the amount of ways\n        res = bell_number(n - 1) + bell_number(n - 2)\n        return res\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell_numbers = [[1,1], [2,2]]\n    number_of_ways = 0\n    \n    for n_i in range(2, n+1):\n        for n_j in range(1, n_i):\n            new_number = n_i * n_j\n            if new_number < n:\n                bell_numbers.append([new_number, bell_numbers[n_j-1][1] + bell_numbers[n_j-1][0]])\n            else:\n                bell_numbers.append([new_number, bell_numbers[n_j-1][1]])\n    \n    number_of_ways = bell_numbers[-1][0]\n    return number_of_ways\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n == 0:\n        return 1\n    \n    if n == 1:\n        return 2\n    \n    if n == 2:\n        return 4\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return bell_number(n-1) + bell_number(n-2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # There are two possible partitions of the bell numbers.\n    # If they are ordered, they are partitioned in two, each of which is\n    # unique, and can be partitioned in many ways.\n    \n    # We'll construct the partitions, and keep track of the number of partitions\n    # for each one.\n    \n    # Partition will be a list of lists, where the numbers in the first list will\n    # be the sum of the first element of each list in partition.\n    partition = []\n    \n    # Keep track of the number of partitions we've seen so far\n    partitions = 1\n    \n    # For each Bell number, we'll construct the partition using the right-hand \n    # subtraction algorithm.\n    \n    # Step 1: Construct a partition, as a list of lists of empty lists,\n    # where each element is a list of empty lists.\n    \n    # Step 2: Construct a list of the current subset of the numbers, in\n    # order from left to right.\n    \n    # Step 3: Repeat for each element in the list\n    \n    # Step 4: The numbers in the subset are the subset of the elements\n    # in the list in reverse order.\n    \n    # Step 5: The subset is the last element in the partition.\n    \n    # Step 6: Repeat for the next subset of numbers.\n    \n    # Step 7: Add the last element in the partition to the list,\n    # and start over at step 2.\n    \n    # Step 8: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 9: Repeat for each element in the partition.\n    \n    # Step 10: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 11: Repeat for each element in the partition.\n    \n    # Step 12: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 13: Repeat for each element in the partition.\n    \n    # Step 14: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 15: Repeat for each element in the partition.\n    \n    # Step 16: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 17: Repeat for each element in the partition.\n    \n    # Step 18: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 19: Repeat for each element in the partition.\n    \n    # Step 20: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 21: Repeat for each element in the partition.\n    \n    # Step 22: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 23: Repeat for each element in the partition.\n    \n    # Step 24: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 25: Repeat for each element in the partition.\n    \n    # Step 26: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 27: Repeat for each element in the partition.\n    \n    # Step 28: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 29: Repeat for each element in the partition.\n    \n    # Step 30: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 31: Repeat for each element in the partition.\n    \n    # Step 32: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 33: Repeat for each element in the partition.\n    \n    # Step 34: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 35: Repeat for each element in the partition.\n    \n    # Step 36: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 37: Repeat for each element in the partition.\n    \n    # Step 38: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 39: Repeat for each element in the partition.\n    \n    # Step 40: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 41: Repeat for each element in the partition.\n    \n    # Step 42: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 43: Repeat for each element in the partition.\n    \n    # Step 44: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 45: Repeat for each element in the partition.\n    \n    # Step 46: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 47: Repeat for each element in the partition.\n    \n    # Step 48: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 49: Repeat for each element in the partition.\n    \n    # Step 50: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 51: Repeat for each element in the partition.\n    \n    # Step 52: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 53: Repeat for each element in the partition.\n    \n    # Step 54: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 55: Repeat for each element in the partition.\n    \n    # Step 56: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 57: Repeat for each element in the partition.\n    \n    # Step 58: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 59: Repeat for each element in the partition.\n    \n    # Step 60: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 61: Repeat for each element in the partition.\n    \n    # Step 62: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 63: Repeat for each element in the partition.\n    \n    # Step 64: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 65: Repeat for each element in the partition.\n    \n    # Step 66: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 67: Repeat for each element in the partition.\n    \n    # Step 68: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 69: Repeat for each element in the partition.\n    \n    # Step 70: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 71: Repeat for each element in the partition.\n    \n    # Step 72: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 73: Repeat for each element in the partition.\n    \n    # Step 74: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 75: Repeat for each element in the partition.\n    \n    # Step 76: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 77: Repeat for each element in the partition.\n    \n    # Step 78: Add the number of partitions we've seen to the list,\n    # and start over at step 4.\n    \n    # Step 79: Repeat for each element in the partition.\n    \n    # Step 80: Add the number of partitions we've seen to th"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def fact(n):\n        if n <= 1:\n            return 1\n        else:\n            return n * fact(n-1)\n    \n    def combination(n, k):\n        return fact(n)/(fact(k) * fact(n - k))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    bell = {1: 1, 2: 2}\n    # time complexity: O(n)\n    # space complexity: O(n)\n    if n <= 3:\n        return bell[n]\n    \n    for i in range(3, n + 1):\n        bell[i] = bell[i - 1] + bell[i - 2] + bell[i - 3]\n        \n    return bell[n]\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n <= 1:\n        return True\n    i = 1\n    while i < n:\n        if A[i] < A[i - 1]:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    for i in range(1,len(A)):\n        if A[i] < A[i-1]: \n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(1,len(A)):\n        if A[i] < A[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #The monotonicity of an array is the same as the monotonicity of all its subarrays.\n    # In a monotonically increasing or decreasing array, the integers of the array should be strictly increasing or decreasing in strictly increasing or decreasing order.\n    # If the array is empty or contains only one integer, it is monotonic.\n    # If the array contains more than one integer, then the array must have a same number of increasing or decreasing integers.\n    # Note: All the integers in the array will be in the range of 0 to 100.\n    monotonic = 0\n    for i in range(len(A)-1):\n        if A[i] >= A[i+1]:\n            monotonic += 1\n    return monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        if A[i] <= A[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count > 1:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if A == None or len(A) == 0:\n        return None\n    monotonic = True\n    for i in range(len(A)-1):\n        if A[i] >= A[i+1]:\n            monotonic = False\n            break\n    return monotonic\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)-1):\n        if A[i] > A[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    flag=1\n    for i in range(len(A)):\n        for j in range(len(A)-i-1):\n            if A[j]>A[j+1]:\n                flag=0\n                break\n    if flag==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    #code here\n    a = A.copy()\n    a.sort()\n    for i in range(len(a)-1):\n        if a[i] > a[i+1]:\n            return False\n    return True\n    "
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1: \n        return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # If length of sublist is 0, then list contains the sublist.\n    if len(s) == 0:\n        return True\n    # If length of sublist is greater than 0, then if first element in sublist is not equal to first element in the list.\n    # Return False if first element of sublist is not equal to first element of the list.\n    if s[0]!= l[0]:\n        return False\n    # If length of sublist is greater than 1, then if first element in sublist is not equal to second element in the list.\n    # Return False if second element of sublist is not equal to second element in the list.\n    if len(s) > 1:\n        if s[1]!= l[1]:\n            return False\n    # If length of sublist is greater than 2, then if first element in sublist is not equal to third element in the list.\n    # Return False if third element of sublist is not equal to third element in the list.\n    if len(s) > 2:\n        if s[2]!= l[2]:\n            return False\n    # If length of sublist is greater than 3, then if first element in sublist is not equal to fourth element in the list.\n    # Return False if fourth element of sublist is not equal to fourth element in the list.\n    if len(s) > 3:\n        if s[3]!= l[3]:\n            return False\n    # If length of sublist is greater than 4, then if first element in sublist is not equal to fifth element in the list.\n    # Return False if fifth element of sublist is not equal to fifth element in the list.\n    if len(s) > 4:\n        if s[4]!= l[4]:\n            return False\n    # If length of sublist is greater than 5, then if first element in sublist is not equal to sixth element in the list.\n    # Return False if sixth element of sublist is not equal to sixth element in the list.\n    if len(s) > 5:\n        if s[5]!= l[5]:\n            return False\n    # If length of sublist is greater than 6, then if first element in sublist is not equal to seventh element in the list.\n    # Return False if seventh element of sublist is not equal to seventh element in the list.\n    if len(s) > 6:\n        if s[6]!= l[6]:\n            return False\n    # If length of sublist is greater than 7, then if first element in sublist is not equal to eight element in the list.\n    # Return False if eight element of sublist is not equal to eight element in the list.\n    if len(s) > 7:\n        if s[7]!= l[7]:\n            return False\n    # If length of sublist is greater than 8, then if first element in sublist is not equal to ninth element in the list.\n    # Return False if ninth element of sublist is not equal to ninth element in the list.\n    if len(s) > 8:\n        if s[8]!= l[8]:\n            return False\n    # If length of sublist is greater than 9, then if first element in sublist is not equal to tenth element in the list.\n    # Return False if tenth element of sublist is not equal to tenth element in the list.\n    if len(s) > 9:\n        if s[9]!= l[9]:\n            return False\n    # If length of sublist is greater than 10, then if first element in sublist is not equal to eleventh element in the list.\n    # Return False if eleventh element of sublist is not equal to eleventh element in the list.\n    if len(s) > 10:\n        if s[10]!= l[10]:\n            return False\n    # If length of sublist is greater than 11, then if first element in sublist is not equal to twelfth element in the list.\n    # Return False if twelfth element of sublist is not equal to twelfth element in the list.\n    if len(s) > 11:\n        if s[11]!= l[11]:\n            return False\n    # If length of sublist is greater than 12, then if first element in sublist is not equal to thirteenth element in the list.\n    # Return False if thirteenth element of sublist is not equal to thirteenth element in the list.\n    if len(s) > 12:\n        if s[12]!= l[12]:\n            return False\n    # If length of sublist is greater than 13, then if first element in sublist is not equal to fourteenth element in the list.\n    # Return False if fourteenth element of sublist is not equal to fourteenth element in the list.\n    if len(s) > 13:\n        if s[13]!= l[13]:\n            return False\n    # If length of sublist is greater than 14, then if first element in sublist is not equal to fifteenth element in the list.\n    # Return False if fifteenth element of sublist is not equal to fifteenth element in the list.\n    if len(s) > 14:\n        if s[14]!= l[14]:\n            return False\n    # If length of sublist is greater than 15, then if first element in sublist is not equal to sixteenth element in the list.\n    # Return False if sixteenth element of sublist is not equal to sixteenth element in the list.\n    if len(s) > 15:\n        if s[15]!= l[15]:\n            return False\n    # If length of sublist is greater than 16, then if first element in sublist is not equal to seventeenth element in the list.\n    # Return False if seventeenth element of sublist is not equal to seventeenth element in the list.\n    if len(s) > 16:\n        if s[16]!= l[16]:\n            return False\n    # If length of sublist is greater than 17, then if first element in sublist is not equal to eighteenth element in the list.\n    # Return False if eighteenth element of sublist is not equal to eighteenth element in the list.\n    if len(s) > 17:\n        if s[17]!= l[17]:\n            return False\n    # If length of sublist is greater than 18, then if first element in sublist is not equal to nineteenth element in the list.\n    # Return False if nineteenth element of sublist is not equal to nineteenth element in the list.\n    if len(s) > 18:\n        if s[18]!= l[18]:\n            return False\n    # If length of sublist is greater than 19, then if first element in sublist is not equal to twentieth element in the list.\n    # Return False if twentieth element of sublist is not equal to twentieth element in the list.\n    if len(s) > 19:\n        if s[19]!= l[19]:\n            return False\n    # If length of sublist is greater than 20, then if first element in sublist is not equal to twenty-first element in the list.\n    # Return False if twenty-first element of sublist is not equal to twenty-first element in the list.\n    if len(s) > 20:\n        if s[20]!= l[20]:\n            return False\n    # If length of sublist is greater than 21, then if first element in sublist is not equal to twenty-second element in the list.\n    # Return False if twenty-second element of sublist is not equal to twenty-second element in the list.\n    if len(s) > 21:\n        if s[21]!= l[21]:\n            return False\n    # If length of sublist is greater than 22, then if first element in sublist is not equal to twenty-third element in the list.\n    # Return False if twenty-third element of sublist is not equal to twenty-third element in the list.\n    if len(s) > 22:\n        if s[22]!= l[22]:\n            return False\n    # If length of sublist is greater than 23, then if first element in sublist is not equal to twenty-fourth element in the list.\n    # Return False if twenty-fourth element of sublist is not equal to twenty-fourth element in the list.\n    if len(s) > 23:\n        if s[23]!= l[23]:\n            return False\n    # If length of sublist is greater than 24, then if first element in sublist is not equal to twenty-fifth element in the list.\n    # Return False if twenty-fifth element of sublist is not equal to twenty-fifth element in the list.\n    if len(s) > 24:\n        if s[24]!= l[24]:\n            return False\n    # If length of sublist is greater tha"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return True if all(l.index(i) <= l.index(s[0]) for i in s) else False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # This is just a smaller version of a shorter and more complete version of\n    # the method we used to solve the problem.\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l.sort()\n    s.sort()\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    \n    if len(s) == 0:\n        return True\n    if len(s) > len(l):\n        return False\n    \n    if l.count(s[0]) == len(s):\n        return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if not s:\n        return True\n    \n    if l == s:\n        return True\n    \n    if l[0]!= s[0]:\n        return False\n    \n    return is_sublist(l[1:], s[1:])\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if type(l)!= list:\n        return False\n    if type(s)!= list:\n        return False\n    if len(s) == 0:\n        return True\n    i = 0\n    for elem in l:\n        if elem == s[i]:\n            i += 1\n            if i == len(s):\n                return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    if len(s) == 0:\n        return True\n    if l[0] == s[0]:\n        return is_sublist(l[1:], s[1:])\n    return is_sublist(l[1:], s)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if l == None:\n        return False\n    if l == []:\n        return False\n    if s == None:\n        return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    l1 = len(l)\n    s1 = len(s)\n    i = j = 0\n    while i < l1 and j < s1:\n        if l[i]!= s[j]:\n            return False\n        i += 1\n        j += 1\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    def helper(lis):\n        result = 0\n        if len(lis) == 0:\n            return 0\n        if len(lis) == 1:\n            return 1\n        \n        if len(lis) == 2:\n            return 0\n        \n        if len(lis) == 3:\n            return 1\n        \n        if len(lis) == 4:\n            return 0\n        \n        if len(lis) == 5:\n            return 1\n        \n        if len(lis) == 6:\n            return 0\n        \n        if len(lis) == 7:\n            return 1\n        \n        if len(lis) == 8:\n            return 0\n        \n        if len(lis) == 9:\n            return 1\n        \n        if len(lis) == 10:\n            return 0\n        \n        if len(lis) == 11:\n            return 1\n        \n        if len(lis) == 12:\n            return 0\n        \n        if len(lis) == 13:\n            return 1\n        \n        if len(lis) == 14:\n            return 0\n        \n        if len(lis) == 15:\n            return 1\n        \n        if len(lis) == 16:\n            return 0\n        \n        if len(lis) == 17:\n            return 1\n        \n        if len(lis) == 18:\n            return 0\n        \n        if len(lis) == 19:\n            return 1\n        \n        if len(lis) == 20:\n            return 0\n        \n        if len(lis) == 21:\n            return 1\n        \n        if len(lis) == 22:\n            return 0\n        \n        if len(lis) == 23:\n            return 1\n        \n        if len(lis) == 24:\n            return 0\n        \n        if len(lis) == 25:\n            return 1\n        \n        if len(lis) == 26:\n            return 0\n        \n        if len(lis) == 27:\n            return 1\n        \n        if len(lis) == 28:\n            return 0\n        \n        if len(lis) == 29:\n            return 1\n        \n        if len(lis) == 30:\n            return 0\n        \n        if len(lis) == 31:\n            return 1\n        \n        if len(lis) == 32:\n            return 0\n        \n        if len(lis) == 33:\n            return 1\n        \n        if len(lis) == 34:\n            return 0\n        \n        if len(lis) == 35:\n            return 1\n        \n        if len(lis) == 36:\n            return 0\n        \n        if len(lis) == 37:\n            return 1\n        \n        if len(lis) == 38:\n            return 0\n        \n        if len(lis) == 39:\n            return 1\n        \n        if len(lis) == 40:\n            return 0\n        \n        if len(lis) == 41:\n            return 1\n        \n        if len(lis) == 42:\n            return 0\n        \n        if len(lis) == 43:\n            return 1\n        \n        if len(lis) == 44:\n            return 0\n        \n        if len(lis) == 45:\n            return 1\n        \n        if len(lis) == 46:\n            return 0\n        \n        if len(lis) == 47:\n            return 1\n        \n        if len(lis) == 48:\n            return 0\n        \n        if len(lis) == 49:\n            return 1\n        \n        if len(lis) == 50:\n            return 0\n        \n        if len(lis) == 51:\n            return 1\n        \n        if len(lis) == 52:\n            return 0\n        \n        if len(lis) == 53:\n            return 1\n        \n        if len(lis) == 54:\n            return 0\n        \n        if len(lis) == 55:\n            return 1\n        \n        if len(lis) == 56:\n            return 0\n        \n        if len(lis) == 57:\n            return 1\n        \n        if len(lis) == 58:\n            return 0\n        \n        if len(lis) == 59:\n            return 1\n        \n        if len(lis) == 60:\n            return 0\n        \n        if len(lis) == 61:\n            return 1\n        \n        if len(lis) == 62:\n            return 0\n        \n        if len(lis) == 63:\n            return 1\n        \n        if len(lis) == 64:\n            return 0\n        \n        if len(lis) == 65:\n            return 1\n        \n        if len(lis) == 66:\n            return 0\n        \n        if len(lis) == 67:\n            return 1\n        \n        if len(lis) == 68:\n            return 0\n        \n        if len(lis) == 69:\n            return 1\n        \n        if len(lis) == 70:\n            return 0\n        \n        if len(lis) == 71:\n            return 1\n        \n        if len(lis) == 72:\n            return 0\n        \n        if len(lis) == 73:\n            return 1\n        \n        if len(lis) == 74:\n            return 0\n        \n        if len(lis) == 75:\n            return 1\n        \n        if len(lis) == 76:\n            return 0\n        \n        if len(lis) == 77:\n            return 1\n        \n        if len(lis) == 78:\n            return 0\n        \n        if len(lis) == 79:\n            return 1\n        \n        if len(lis) == 80:\n            return 0\n        \n        if len(lis) == 81:\n            return 1\n        \n        if len(lis) == 82:\n            return 0\n        \n        if len(lis) == 83:\n            return 1\n        \n        if len(lis) == 84:\n            return 0\n        \n        if len(lis) == 85:\n            return 1\n        \n        if len(lis) == 86:\n            return 0\n        \n        if len(lis) == 87:\n            return 1\n        \n        if len(lis) == 88:\n            return 0\n        \n        if len(lis) == 89:\n            return 1\n        \n        if len(lis) == 90:\n            return 0\n        \n        if len(lis) == 91:\n            return 1\n        \n        if len(lis) == 92:\n            return 0\n        \n        if len(lis) == 93:\n            return 1\n        \n        if len(lis) == 94:\n            return 0\n        \n        if len(lis) == 95:\n            return 1\n        \n        if len(lis) == 96:\n            return 0\n        \n        if len(lis) == 97:\n            return 1\n        \n        if len(lis) == 98:\n            return 0\n        \n        if len(lis) == 99:\n            return 1\n        \n        if len(lis) == 100:\n            return 0\n        \n        if len(lis) == 101:\n            return 1\n        \n        if len(lis) == 102:\n            return 0\n        \n        if len(lis) == 103:\n            return 1\n        \n        if len(lis) == 104:\n            return 0\n        \n        if len(lis) == 105:\n            return 1\n        \n        if len(lis) == 106:\n            return 0\n        \n        if len(lis) == 107:\n            return 1\n        \n        if len(lis) == 108:\n            return 0\n        \n        if len(lis) == 109:\n            return 1\n        \n        if len(lis) == 110:\n            return 0\n        \n        if len(lis) == 111:\n            return 1\n        \n        if len(lis) == 112:\n            return 0\n        \n        if len(lis) == 113:\n            return 1\n        \n        if len(lis) == 114:\n            return 0\n        \n        if len(lis) == 115:\n            return 1\n        \n        if len(lis) == 116:\n            return 0\n        \n        if len(lis) == 117:\n            return 1\n        \n        if len(lis) == 118:\n            return 0\n        \n        if len(lis) == 119:\n            return 1\n        \n        if len(lis) == 120:\n            return 0\n        \n        if len(lis) == 121:\n            return 1\n        \n        if len(lis) == 122:\n            return 0\n        \n        if len(lis) == 123:\n            return 1\n        \n        if len(lis) == 124:\n            return 0\n        "
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #initiate global var\n    global global_count\n    global_count = 0\n    #use global var to check for how many tuples are required to find.\n    global_count = len(Input)\n    #initilize a result\n    result = 0\n    #iterate through all the given tuples\n    for i in range(global_count):\n        #extract a tuple\n        tuple1 = Input[i]\n        #initiate a result variable\n        result = 0\n        #if any of the length are different, return false.\n        if len(tuple1)!= len(Input[i+1]):\n            result = 1\n        if result == 1:\n            break\n    if result == 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l = len(Input)\n    for i in range(l):\n        if len(Input[i])!= l:\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            for k in range(len(Input[i])):\n                if j!= k:\n                    if Input[i][j]!= Input[i][k]:\n                        return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # if input is empty, return false\n    if not Input:\n        return False\n    # if there is only one element, return false if not\n    if len(Input) == 1:\n        return False\n    # initialize variables\n    count = 0\n    length = 0\n    # Iterate through the given list\n    for i in range(len(Input)):\n        length = len(Input[i])\n        # for any length of tuples, check if length is equal, return false\n        if length!= length:\n            return False\n        # if length is equal, increase count\n        else:\n            count += 1\n    # if count is equal to length, return true\n    if count == length:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    for i in range(len(Input)):\n        for j in range(len(Input[i])):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    temp_dict = {}\n    for i in range(len(Input)):\n        temp_dict[i] = Input[i]\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    return set(map(len, Input)) == {len(Input[0])}\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    try:\n        lst = list(map(lambda x: x[0], Input))\n        lst = list(set(lst))\n        if len(lst) > 1:\n            raise ValueError(\"No. of values not equal\")\n        elif len(lst) == 0:\n            return False\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input[0])\n    for i in range(len(Input)):\n        if len(Input[i])!= length:\n            return 0\n    return 1\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #base case\n    if len(nums) <= 1:\n        return nums\n    #run the sort on each sublist\n    for i in range(len(nums)):\n        if nums[i] > nums[i+1]:\n            nums[i],nums[i+1] = nums[i+1],nums[i]\n    #call the sort function on each sublist\n    for i in range(len(nums)):\n        comb_sort(nums[i])\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums or len(nums) == 1:\n        return nums\n    \n    for i in range(len(nums)):\n        for j in range(0, len(nums)-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    com_count = 0\n    com_swp_cnt = 0\n    if len(nums) <= 1:\n        return nums\n    for i in range(len(nums)):\n        com_count += 1\n        for j in range(i + 1, len(nums)):\n            com_swp_cnt += 1\n            if nums[i] > nums[j]:\n                nums[i], nums[j] = nums[j], nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1: return nums\n    \n    gap = n\n    \n    while gap!= 1:\n        gap = int((gap + 1) / 2)\n        for i in range(gap, n):\n            j = i\n            while j >= gap and nums[j - gap] > nums[j]:\n                nums[j - gap], nums[j] = nums[j], nums[j - gap]\n                j -= gap\n    \n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # iterative\n    def sort_iterative(nums):\n        '''\n        Time complexity: O(n^2)\n        Space complexity: O(1)\n        '''\n        # sort on first element\n        length = len(nums)\n        for i in range(length-1):\n            for j in range(i+1, length):\n                if nums[i] > nums[j]:\n                    nums[i], nums[j] = nums[j], nums[i]\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    gap = length\n    while gap > 1:\n        gap = int(gap/2)\n        for i in range(0, length-gap):\n            if nums[i] > nums[i+gap]:\n                nums[i], nums[i+gap] = nums[i+gap], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    l=len(nums)\n    if l<2:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    \n    size = len(nums)\n    if size <= 1:\n        return nums\n    \n    gap = size\n    \n    while gap > 1:\n        gap = int(gap/1.3)\n        if gap < 1:\n            gap = 1\n            \n        index = 0\n        \n        while index < size-gap:\n            if nums[index] > nums[index+gap]:\n                swap(nums, index, index+gap)\n            index += 1\n    \n    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if(n<0):\n        return False\n    while n>0:\n        if(n%2!=0):\n            return False\n        n=n//2\n    return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    # Derive the maximum number of sqaures possible\n    max_sqr = int(n ** 0.5)\n    \n    # Calculate the sum of squares of numbers from 1 to n-1\n    sum_sqr = 0\n    for i in range(1, n+1):\n        sum_sqr += i*i\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if int(n**0.5)**2 == n:\n        return True\n    return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # initializing value of n and varibale\n    n = float(n)\n    s = 0\n    i = 1\n    while i < n:\n        i = i + 1\n        # getting the square of the value\n        s = s + (i * i)\n    if n == s:\n        print('The given number can be represented as the difference of two squares')\n    else:\n        print('The given number cannot be represented as the difference of two squares')\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    # Function to check whether a number can be represented as the difference of two squares or not\n    def square(n):\n        squares = 0\n        while n >= 0:\n            n = n // 2\n            squares += 1\n        return squares\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    return ((n*n) - (n-1))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i=0\n    while i<n:\n        if n%2==0:\n            return False\n        else:\n            n=n//2\n            i+=1\n    return True\ndef dif_Square(n):\n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    i=0\n    while i<n:\n        if n%2==0:\n            n=n//2\n            i+=1\n        else:\n            return False\n    return True"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n<0:\n        return False\n    else:\n        return n==int(sqrt(n))**2-sqrt(n)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(n + 1):\n        for j in range(n + 1):\n            if i**2 + j**2 == n and i!= j:\n                print(\"The number {0} can be represented as the difference of two squares.\".format(n))\n                return\n    print(\"The number {0} can not be represented as the difference of two squares.\".format(n))\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    for i in range(1,n):\n        if((n-i)**2 == i):\n            return True\n    return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    prev_pattern = None\n    for pattern in patterns:\n        if prev_pattern is None:\n            prev_pattern = pattern\n        elif is_same_pattern(pattern, prev_pattern):\n            prev_pattern = pattern\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(colors)-1):\n        if not isinstance(colors[i], str) and not isinstance(colors[i], int) and not isinstance(colors[i], float) and not isinstance(colors[i], bool) and not isinstance(colors[i], None) and not isinstance(colors[i], tuple) and not isinstance(colors[i], list):\n            return False\n    \n    for j in range(0, len(patterns)-1):\n        if not isinstance(patterns[j], str) and not isinstance(patterns[j], int) and not isinstance(patterns[j], float) and not isinstance(patterns[j], bool) and not isinstance(patterns[j], None) and not isinstance(patterns[j], tuple) and not isinstance(patterns[j], list):\n            return False\n    \n    if patterns[-1] == 'Reverse':\n        if len(patterns)!= len(colors):\n            return False\n        \n        if patterns[0]!= 'Forward':\n            return False\n        \n        for i in range(1, len(patterns)-1):\n            if patterns[i] == 'Reverse':\n                if patterns[i-1] == 'Forward':\n                    return False\n    elif patterns[-1] == 'Reverse':\n        if len(patterns)!= len(colors):\n            return False\n        \n        if patterns[0]!= 'Reverse':\n            return False\n        \n        for i in range(1, len(patterns)-1):\n            if patterns[i] == 'Forward':\n                if patterns[i-1] == 'Reverse':\n                    return False\n    else:\n        if len(patterns)!= len(colors):\n            return False\n        \n        if patterns[0]!= 'Forward':\n            return False\n        \n        for i in range(1, len(patterns)-1):\n            if patterns[i] == 'Forward':\n                if patterns[i-1] == 'Forward':\n                    return False\n    \n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # print(colors)\n    # print(patterns)\n    # print(len(colors), len(patterns))\n    # print(is_same_colors(colors, patterns[0]))\n    for i in range(1, len(patterns)):\n        if not is_same_colors(colors, patterns[i]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    prev_color = colors[0]\n    for color in colors[1:]:\n        if prev_color!= patterns[color]:\n            return False\n        prev_color = color\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(patterns)):\n        pattern = patterns[i]\n        if(colors[pattern[0]]!= colors[pattern[1]]):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return set(colors) == set(patterns[0]) and set(patterns[0]) == set(patterns[1])\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for color,pattern in zip(colors, patterns):\n        if color!= pattern:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i]!= patterns[i]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n    for i in range(len(colors)):\n        if colors[i] == patterns[i]:\n            continue\n        if colors[i] in patterns:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for x in test_list:\n        if all(x%k==0 for k in range(1,K+1)):\n            yield x\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #  implement this function yourself\n    l = []\n    for i in test_list:\n        if (i[0] % K) == 0:\n            l.append(i)\n    return l\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #test_list = [[5, 6, 7], [1, 2, 3], [4, 6, 9]]\n    #K = 3\n    result = []\n    #For loop to iterate over the list of tuples\n    for tuple in test_list:\n        #sublist to store elements from the current tuple\n        sublist = []\n        for element in tuple:\n            if element % K == 0:\n                sublist.append(element)\n        if len(sublist) == len(tuple):\n            result.append(tuple)\n    return result\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for tup in test_list:\n        n = len(tup)\n        if all(x%K==0 for x in tup):\n            res.append(tup)\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    result = set()\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (test_list[i][0] % K == 0) and (test_list[j][0] % K == 0):\n                result.add((test_list[i], test_list[j]))\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            if test_list[i][j]%K!=0:\n                break\n        else:\n            print(test_list[i])\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    divisible_list = []\n    for i in test_list:\n        for j in i:\n            if j % K == 0:\n                divisible_list.append(i)\n                break\n    return divisible_list\n    \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in range(len(test_list)):\n        count = 0\n        for j in range(len(test_list[i])):\n            if test_list[i][j] % K!= 0:\n                count += 1\n            if count > 1:\n                break\n        if count == 1:\n            for j in range(len(test_list[i])):\n                if test_list[i][j] % K == 0:\n                    test_list[i].pop(j)\n    return test_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        if len(i) == K:\n            print(i)\n            \n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # write your solution here\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if (sum(test_list[i]) % K == 0) and (sum(test_list[j]) % K == 0):\n                count += 1\n                print(test_list[i], end=\" \")\n                print(test_list[j])\n    return count\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return (n%11==0)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    try:\n        if len(s) % 2 == 1:\n            return \"odd\"\n        else:\n            return \"even\"\n    except:\n        return \"Not a string\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s_list = s.split()\n    for i in range(len(s_list)):\n        if len(s_list[i]) % 2 == 0:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # your code here\n    s1=len(s)\n    if s1%2==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    print (len(s) % 2)\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2==0:\n        print(\"Length of word is even\")\n    else:\n        print(\"Length of word is odd\")\n    \n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2 == 1\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n    \ndef last_char(s): \n    '''\n    Write a python function to check whether the last letter of a word is capital or not.\n    '''\n    return s[-1].isupper()\n    \ndef first_two(s): \n    '''\n    Write a python function to check whether the first two letters of a word are capital or not.\n    '''\n    return s[:2].isupper()\n    \ndef upper_letter(s): \n    '''\n    Write a python function to check whether the first letter of a word is capital or not.\n    '''\n    return s[0].isupper()\n    \ndef is_power_of_two(n): \n    '''\n    Write a python function to check whether the number is a power of two.\n    '''\n    if n > 0:\n        if n == 1:\n            return True\n        else:\n            return n & n-1 == 0 and is_power_of_two(n >> 1)\n    else:\n        return False\n    \ndef is_palindrome(s): \n    '''\n    Write a python function to check whether a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef check_prime(n): \n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    if n == 1 or n == 0:\n        return False\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef is_prime(n): \n    '''\n    Write a python function to check whether the given number is a prime number or not.\n    '''\n    return check_prime(n)\n    \ndef is_triangle(n): \n    '''\n    Write a python function to check whether the given number is a triangle number or not.\n    '''\n    return n * (n+1) / 2 == n * (n+1)\n    \ndef is_square(n): \n    '''\n    Write a python function to check whether the given number is a square number or not.\n    '''\n    return n ** 0.5 == int(n ** 0.5)\n    \ndef is_quadratic_perfect(n): \n    '''\n    Write a python function to check whether the given number is a quadratic perfect number or not.\n    '''\n    return n ** 2 == n * (2 * n + 1)\n    \ndef first_n_fib(n): \n    '''\n    Write a python function to find the nth fibonacci number.\n    '''\n    if n == 1 or n == 2:\n        return 1\n    else:\n        return first_n_fib(n-1) + first_n_fib(n-2)\n    \ndef first_n_fib_series(n): \n    '''\n    Write a python function to find the first n numbers in the fibonacci series.\n    '''\n    if n == 0:\n        return []\n    else:\n        return [1,1] + first_n_fib_series(n-2)\n    \ndef sum_of_fibonacci(n): \n    '''\n    Write a python function to find the sum of the first n fibonacci numbers.\n    '''\n    return (1 + 5 ** 0.5) / 2 * n * (n + 1)\n    \ndef is_palindrome_strings(s1, s2): \n    '''\n    Write a python function to check whether two strings are palindrome or not.\n    '''\n    return s1 == s1[::-1] and s2 == s2[::-1]\n    \ndef is_palindrome_strings_pythonic(s1, s2): \n    '''\n    Write a python function to check whether two strings are palindrome or not.\n    '''\n    return s1 == s1[::-1] and s2 == s2[::-1]\n    \ndef is_permutation(s1, s2): \n    '''\n    Write a python function to check whether two strings are permutation or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    count = {}\n    for c in s1:\n        count[c] = count.get(c, 0) + 1\n    for c in s2:\n        if count[c] == 0:\n            return False\n        count[c] = count.get(c, 0) - 1\n    return True\n    \ndef is_permutation_pythonic(s1, s2): \n    '''\n    Write a python function to check whether two strings are permutation or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    return sorted(s1) == sorted(s2)\n    \ndef is_permutation_pythonic_2(s1, s2): \n    '''\n    Write a python function to check whether two strings are permutation or not.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    return s1 == s2\n    \ndef is_power_of_2(n): \n    '''\n    Write a python function to check whether the number is a power of two.\n    '''\n    if n > 0:\n        if n == 1:\n            return True\n        else:\n            return n & n-1 == 0 and is_power_of_two(n >> 1)\n    else:\n        return False\n    \ndef is_palindrome_pythonic(s): \n    '''\n    Write a python function to check whether a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef max_num_in_list(lst): \n    '''\n    Write a python function to find the maximum number in the list.\n    '''\n    return max(lst)\n    \ndef max_num_in_list_pythonic(lst): \n    '''\n    Write a python function to find the maximum number in the list.\n    '''\n    return max(lst, key=lambda x: x)\n    \ndef max_num_in_list_2(lst): \n    '''\n    Write a python function to find the maximum number in the list.\n    '''\n    return max(lst, key=lambda x: lst.count(x))\n    \ndef sort_list(lst): \n    '''\n    Write a python function to sort a given list.\n    '''\n    return sorted(lst)\n    \ndef sort_list_pythonic(lst): \n    '''\n    Write a python function to sort a given list.\n    '''\n    return lst.sort()\n    \ndef sort_list_2(lst): \n    '''\n    Write a python function to sort a given list.\n    '''\n    return lst.sort(reverse=True)\n    \ndef sort_list_3(lst): \n    '''\n    Write a python function to sort a given list.\n    '''\n    return lst.sort(key=lambda x: x, reverse=True)\n    \ndef is_palindrome_3(s): \n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \ndef word_count(s): \n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    return len(s.split())\n    \ndef word_count_2(s): \n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    return s.split().__len__()\n    \ndef word_count_3(s): \n    '''\n    Write a python function to count the number of words in a given string.\n    '''\n    return s.split(\" \").__len__()\n    \ndef count_vowels(s): \n    '''\n    Write a python function to count the number of vowels in a given string.\n    '''\n    count = 0\n    for "
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.split()\n    if len(s) % 2 == 0:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    # if len(s) % 2 == 0:\n    #     print('Length is Even')\n    # else:\n    #     print('Length is Odd')\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    length = len(s)\n    if length%2 == 0:\n        print(\"The length of the word is even\")\n    else:\n        print(\"The length of the word is odd\")\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return ((1/6) * (1 + (5/6) + (5/6) + (5/6) + (5/6))) * n\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    assert 0 <= n and n < 100000\n    result = 1\n    for k in range(1, n+1):\n        result = result * (4*k-3) // k\n    return result\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 4\n    if n == 2:\n        return 7\n    if n == 3:\n        return 13\n    return tetrahedral_number(n-1) + tetrahedral_number(n-2) + tetrahedral_number(n-3) + tetrahedral_number(n-4)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    \n    tet_n = n+1\n    for i in range(1, int(tet_n/2)+1):\n        tet_n *= (n-i+1)\n        tet_n /= i\n    return tet_n\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n**3\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    fact = 1\n    for i in range(1, n+1):\n        fact *= i\n    return fact\n    \nprint(tetrahedral_number(4))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    num = 1\n    i = 1\n    while i <= n:\n        num += 4\n        i += 1\n    return num\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n*(n+1)*(n+2)//6\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return n**3 + n + 1\n    \n    \ndef factorial(n): \n    '''\n    Write a function to find the factorial of a number using recursion.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return n*factorial(n-1)\n    \n    \ndef check_palindrome(string): \n    '''\n    Write a function to check if a string is a palindrome or not. \n    '''\n    for i in range(len(string)//2): \n        if string[i]!= string[-(i+1)]: \n            return False\n    return True\n    \n    \ndef sum_array(arr): \n    '''\n    Write a function to compute the sum of all items in an array using recursion. \n    '''\n    if len(arr) == 0: \n        return 0\n    return arr[0] + sum_array(arr[1:])\n    \n    \ndef reverse_string(string): \n    '''\n    Write a function to reverse a string using recursion. \n    '''\n    if len(string) <= 1: \n        return string\n    return reverse_string(string[1:]) + string[0]\n    \n    \ndef fibonacci(n): \n    '''\n    Write a function to compute the nth Fibonacci number using recursion. \n    '''\n    if n == 0 or n == 1: \n        return n\n    return fibonacci(n-2) + fibonacci(n-1)\n    \n    \ndef fibonacci_iterative(n): \n    '''\n    Write a function to compute the nth Fibonacci number using iteration. \n    '''\n    if n == 0 or n == 1: \n        return n\n    previous = 0\n    current = 1\n    for _ in range(n-1): \n        previous, current = current, previous+current\n    return current\n    \n    \ndef recursive_power(x, n): \n    '''\n    Write a function to compute x raised to the power n using recursion. \n    '''\n    if n == 0: \n        return 1\n    return x*recursive_power(x, n-1)\n    \n    \ndef recursive_power_iterative(x, n): \n    '''\n    Write a function to compute x raised to the power n using iteration. \n    '''\n    if n == 0: \n        return 1\n    x_pow = x\n    for _ in range(n-1): \n        x_pow = x_pow*x\n    return x_pow\n    \n    \ndef multiply_matrices(A, B): \n    '''\n    Write a function to multiply two matrices using recursion. \n    '''\n    if len(A) == 0 or len(A[0]) == 0: \n        return []\n    if len(B) == 0 or len(B[0]) == 0: \n        return []\n    if len(A[0])!= len(B): \n        return []\n    return [[sum([A_row[i]*B_col for i in range(len(A[0]))]) for B_col in zip(*B)] for A_row in A]\n    \n    \ndef add_matrices(A, B): \n    '''\n    Write a function to add two matrices using recursion. \n    '''\n    if len(A) == 0 or len(A[0]) == 0: \n        return []\n    if len(B) == 0 or len(B[0]) == 0: \n        return []\n    if len(A[0])!= len(B): \n        return []\n    return [[sum([A_row[i] + B_col for i in range(len(A[0]))]) for B_col in zip(*B)] for A_row in A]\n    \n    \ndef add_matrices_iterative(A, B): \n    '''\n    Write a function to add two matrices using iteration. \n    '''\n    if len(A) == 0 or len(A[0]) == 0: \n        return []\n    if len(B) == 0 or len(B[0]) == 0: \n        return []\n    if len(A[0])!= len(B): \n        return []\n    C = [[0 for _ in range(len(A[0]))] for _ in range(len(A))]\n    for i in range(len(A)): \n        for j in range(len(A[0])): \n            C[i][j] = A[i][j] + B[i][j]\n    return C\n    \n    \ndef multiplication_table(n): \n    '''\n    Write a function to generate a multiplication table for a given number n using recursion. \n    '''\n    if n == 0: \n        return []\n    return [[i*n+j for j in range(1, n+1)] for i in range(1, n+1)]\n    \n    \ndef multiplication_table_iterative(n): \n    '''\n    Write a function to generate a multiplication table for a given number n using iteration. \n    '''\n    if n == 0: \n        return []\n    table = [[j] for j in range(1, n+1)]\n    for i in range(n):\n        for j in range(n): \n            table[i].append(table[i][j] + table[i][j+1])\n    return table\n    \n    \ndef merge_two_sorted_lists(l1, l2): \n    '''\n    Write a function to merge two sorted linked lists into one sorted linked list. \n    '''\n    merged_list = []\n    while l1 and l2: \n        if l1.val < l2.val: \n            merged_list.append(l1.val)\n            l1 = l1.next\n        else: \n            merged_list.append(l2.val)\n            l2 = l2.next\n    merged_list.append(l1 if l1 else l2)\n    return merged_list\n    \n    \ndef merge_two_sorted_lists_iterative(l1, l2): \n    '''\n    Write a function to merge two sorted linked lists into one sorted linked list using iteration. \n    '''\n    while l1 and l2: \n        if l1.val < l2.val: \n            l1 = l1.next\n        else: \n            merged = Node(l2.val)\n            merged.next = l1\n            l1 = l1.next\n            merged.next = l2\n            l2 = l2.next\n            l1 = merged\n    return l1\n    \n    \ndef merge_k_sorted_lists(lists): \n    '''\n    Write a function to merge k sorted linked lists into one sorted linked list. \n    '''\n    if len(lists) == 0: \n        return None\n    if len(lists) == 1: \n        return lists[0]\n    merged = merge_two_sorted_lists_iterative(lists[0], lists[1])\n    merged_head = merged\n    lists = lists[2:]\n    while len(lists) > 0: \n        merged = merge_two_sorted_lists_iterative(merged, lists[0])\n        merged_head.next = merged\n        merged = merged_head\n        lists = lists[1:]\n    return merged_head\n    \n    \ndef merge_k_sorted_lists_iterative(lists): \n    '''\n    Write a function to merge k sorted linked lists into one sorted linked list using iteration. \n    '''\n    if len(lists) == 0: \n        return None\n    if len(lists) == 1: \n        return lists[0]\n    merged_head = Node(lists[0].val)\n    merged_head.next = lists[1]\n    merged_head = merged_head.next\n    lists = lists[2:]\n    while len(lists) > 0: \n        merged = lists[0]\n        merged.next = None\n        merged = merged.next\n        merged_head.next = merged\n        merged_head = merged_head.next\n        lists = lists"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return math.pi * r**3\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3)*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    # sphere_volume = 4.0/3.0*math.pi*r*r*r\n    # sphere_volume = 4.0 * math.pi * r * r * r\n    # sphere_volume = 4.0 * math.pi * r * r * r\n    return 4.0 / 3.0 * math.pi * r * r * r\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    return 4/3 * pi * (r ** 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4 / 3) * math.pi * r**3\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    vol = 4/3 * math.pi * (r**3)\n    return vol\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = (math.pi * r * h) / 3\n    return vol\ndef volume_cone_high(r, h):\n    '''\n    Write a function to find the volume of a cone with a height higher than a given radius.\n    '''\n    vol = (math.pi * (r**2) * (h-r)) / 3\n    return vol\ndef volume_cone_low(r, h):\n    '''\n    Write a function to find the volume of a cone with a height less than or equal to a given radius.\n    '''\n    vol = (math.pi * (r**2) * (r - h)) / 3\n    return vol\ndef volume_cone_prime(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base smaller than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - (h ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_2(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 2 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((2 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_3(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 3 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((3 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_4(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 4 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((4 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_5(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 5 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((5 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_6(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 6 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((6 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_7(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 7 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((7 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_8(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 8 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((8 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_9(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 9 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((9 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_10(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 10 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((10 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_11(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 11 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((11 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_12(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 12 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((12 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_13(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 13 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((13 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_14(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 14 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((14 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_15(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 15 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((15 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_16(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 16 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((16 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_17(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 17 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((17 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_18(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 18 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((18 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_19(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 19 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((19 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_20(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 20 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((20 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_21(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 21 than a given radius.\n    '''\n    vol = (math.pi * (r**2) * ((r ** 2) - ((21 * h) ** 2))) / 3\n    return vol\ndef volume_cone_prime_over_22(r, h):\n    '''\n    Write a function to find the volume of a cone with the length of the base over 22 than a given radius.\n    '''\n    vo"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*math.pow(r,3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4.0/3.0) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = (4/3) * math.pi * (r**3)\n    return V\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pi\n    from math import pow\n    return (4/3)*pi*(r**3)\ndef volume_cube(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    from math import pow\n    from math import pi\n    return l*b*h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    from math import pi\n    from math import pow\n    return (2*pi*pow(r,2))+2*pi*(r)*(h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    from math import pow\n    return (pow(r,2)*pi)*(1+((pi/2)*(1-(pow(r,2)*(pi/3)))))+h\ndef volume_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    from math import pi\n    from math import pow\n    return (1/3)*pi*a*b*c\ndef volume_cone_cylinder(r,h,l):\n    '''\n    Write a function to find the volume of a cone/cylinder/pyramid.\n    '''\n    from math import pi\n    from math import pow\n    return (pow(r,2)*pi*(2+2*h+2*l))+((h/3)*(pow(r,2)-pow(r,3))-(1/2)*pow(r,2)*(1+l/2))\ndef volume_square(a,b):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    from math import pow\n    from math import pi\n    return (pow(a,2)*pi)\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    from math import pow\n    from math import pi\n    return (a*b)*pi\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    from math import pow\n    from math import pi\n    return ((a+b+c)*(1/2)*(pow(a,2))+(1/2)*pow(b,2))\ndef volume_square(a,b,c):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    from math import pow\n    from math import pi\n    return (pow(a,2)*pi)\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    from math import pow\n    from math import pi\n    return (a*b)*pi\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    from math import pow\n    from math import pi\n    return ((a+b+c)*(1/2)*(pow(a,2))+(1/2)*pow(b,2))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pow\n    from math import pi\n    return (4/3)*pi*(r**3)\ndef volume_cube(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    from math import pow\n    from math import pi\n    return (l*b*h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    from math import pi\n    from math import pow\n    return (2*pi*pow(r,2))+2*pi*(r)*(h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    from math import pow\n    return (pow(r,2)*pi)*(1+((pi/2)*(1-(pow(r,2)*(pi/3)))))+h\ndef volume_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    from math import pi\n    from math import pow\n    return (1/3)*pi*a*b*c\ndef volume_cone_cylinder(r,h,l):\n    '''\n    Write a function to find the volume of a cone/cylinder/pyramid.\n    '''\n    from math import pi\n    from math import pow\n    return (pow(r,2)*pi*(2+2*h+2*l))+((h/3)*(pow(r,2)-pow(r,3))-(1/2)*pow(r,2)*(1+l/2))\ndef volume_square(a,b):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    from math import pow\n    from math import pi\n    return (pow(a,2)*pi)\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    from math import pow\n    from math import pi\n    return (a*b)*pi\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    from math import pow\n    from math import pi\n    return ((a+b+c)*(1/2)*(pow(a,2))+(1/2)*pow(b,2))\ndef volume_square(a,b,c):\n    '''\n    Write a function to find the volume of a square.\n    '''\n    from math import pow\n    from math import pi\n    return (pow(a,2)*pi)\ndef volume_rectangle(a,b):\n    '''\n    Write a function to find the volume of a rectangle.\n    '''\n    from math import pow\n    from math import pi\n    return (a*b)*pi\ndef volume_triangle(a,b,c):\n    '''\n    Write a function to find the volume of a triangle.\n    '''\n    from math import pow\n    from math import pi\n    return ((a+b+c)*(1/2)*(pow(a,2))+(1/2)*pow(b,2))\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    from math import pow\n    from math import pi\n    return (4/3)*pi*(r**3)\ndef volume_cube(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    from math import pow\n    from math import pi\n    return (l*b*h)\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    from math import pi\n    from math import pow\n    return (2*pi*pow(r,2))+2*pi*(r)*(h)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    from math import pi\n    from math import pow\n    return (pow(r,2)*pi)*(1+((pi/2)*(1-(pow(r,2)*(pi/3)))))+h\ndef volume_pyramid(a,b,c):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    from math import pi\n    from math import pow\n    return (1/3)*pi*a*b*c\ndef volume_cone_cylinder(r,h,l):\n    '''\n    Write a function to find the volume of a cone/cylinder/pyramid.\n    '''\n    from math import pi\n    from math import pow\n    return (pow(r,2)*pi*(2"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    def get_Char(strr):\n    if strr == None:\n        return None\n    return (sum([ord(i) for i in strr])) % 26\n    "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    from functools import reduce\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    list1 = list(strr)\n    new_list = []\n    for i in range(len(list1)):\n        char = ord(list1[i]) + 1\n        new_list.append(chr(char))\n    return ''.join(new_list)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    for x in strr:\n        i = ord(x)\n        i = (i+1)%26\n        print(chr(i),end=\"\")\n    \n    \n    \n    \n    \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr[0]) + (ord(strr[0]) - ord('a')) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    str = list(strr)\n    num = []\n    for i in str:\n        x = ord(i)\n        x = x % 26\n        num.append(x)\n    res = 0\n    for i in num:\n        res = res + i\n    return res\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr) % 26 + ord('a')\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return ord(strr)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    return chr(((((ord(strr[0])-ord('a'))%26)+1)+(ord(strr[1])-ord('a'))%26)%26)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    if(strr is None):\n        return -1\n    else:\n        s = 0\n        l = list(strr)\n        for i in l:\n            s = (s + ord(i))%26\n        return s\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    return sequence(n-1) + n\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    n_list = []\n    while n > 0:\n        if len(n_list) < 1:\n            n_list.append(n)\n        elif len(n_list) > 1:\n            if n_list[-1]!= n_list[-2]:\n                n_list.append(n)\n            else:\n                n_list.pop()\n        n -= 1\n    print(n_list)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return sequence(n-1) + 2**(-n+1)\nprint(sequence(1))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    a = 1\n    b = 1\n    s = 0\n    \n    for i in range(n):\n        s = a + b\n        if i == 0:\n            a = b\n            b = s\n        else:\n            a, b = b, s\n    return s\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return sequence(n-1)+sequence(n-2)\n    \ndef fibonacci_sequence(n):\n    '''\n    Write a function to find the nth number in the fibonacci sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return fibonacci_sequence(n-1)+fibonacci_sequence(n-2)\n    \ndef reverse_string(string):\n    '''\n    Write a function to reverse the characters in a given string.\n    '''\n    if len(string) == 0:\n        return string\n    if len(string) == 1:\n        return string[0]\n    if len(string) == 2:\n        return string[1] + string[0]\n    else:\n        return string[-1] + reverse_string(string[:-1])\n    \ndef find_the_longest_word(words):\n    '''\n    Write a function that takes a list of words and returns the longest word.\n    '''\n    if len(words) == 0:\n        return None\n    if len(words) == 1:\n        return words[0]\n    if len(words) == 2:\n        return words[-1] if words[-1] > words[0] else words[0]\n    else:\n        longest_word = find_the_longest_word(words[:-1])\n        return longest_word if len(longest_word) > len(words[-1]) else words[-1]\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n > 2:\n        return sequence(n-1) + sequence(n-2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    #put in your code here\n    else:\n        return sequence(n-1) + sequence(n-2) + sequence(n-3)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return seq(n) \n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    l = 1\n    b = 2\n    for i in range(n):\n        b = b * l\n        l += 1\n    return b\n    "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    import math\n    pi = 3.14159\n    return (4 * pi * r ** 2)\n    #surface = 4 * pi * r ** 2\n    #return surface\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*r**2\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4*math.pi*r**2\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4*math.pi*(r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    sa=4*pi*math.pow(r,2)\n    return sa\ndef surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi=3.14159\n    #using the formula\n    sa=2*pi*math.pow(r,2)+2*pi*math.pow(h,2)\n    return sa\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    pi=3.14159\n    #using the formula\n    sa=pi*math.pow(r,2)+pi*math.pow(h,2)\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    v=4/3*pi*math.pow(r,3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*h\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*math.pow(h,2)\n    return v\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*h\n    v2=4/3*pi*math.pow(r,3)\n    return v+v2\ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder and sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*h\n    v2=2*pi*math.pow(r,3)\n    return v+v2\ndef surfacearea_cone_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cone and sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    sa=pi*math.pow(r,2)+2*pi*math.pow(h,2)\n    return sa\ndef volume_cone_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cone and cylinder.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*h\n    v2=2*pi*math.pow(r,2)\n    return v+v2\ndef volume_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, and sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*h\n    v2=4/3*pi*math.pow(r,3)\n    return v+v2\ndef surfacearea_cylinder_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cylinder, sphere, and cone.\n    '''\n    pi=3.14159\n    #using the formula\n    sa=pi*math.pow(r,2)+pi*math.pow(h,2)+2*pi*math.pow(r,2)\n    return sa\ndef surfacearea_cone_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cone, sphere, and cylinder.\n    '''\n    pi=3.14159\n    #using the formula\n    sa=pi*math.pow(r,2)+pi*math.pow(h,2)+pi*math.pow(r,2)\n    return sa\ndef volume_sphere(r,h):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    v=4/3*pi*math.pow(r,3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*h\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*math.pow(h,2)\n    return v\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*h\n    v2=4/3*pi*math.pow(r,3)\n    return v+v2\ndef volume_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cylinder and sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*h\n    v2=2*pi*math.pow(r,3)\n    return v+v2\ndef surfacearea_cone_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cone and sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    sa=pi*math.pow(r,2)+pi*math.pow(h,2)\n    return sa\ndef volume_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, and sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*h\n    v2=2*pi*math.pow(r,2)\n    return v+v2\ndef surfacearea_cone_cylinder_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cone, cylinder, and sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    sa=pi*math.pow(r,2)+pi*math.pow(h,2)\n    return sa\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    v=4/3*pi*math.pow(r,3)\n    return v\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*h\n    return v\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*math.pow(h,2)\n    return v\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and sphere.\n    '''\n    pi=3.14159\n    #using the formula\n    v=pi*math.pow(r,2)*h\n    v2=4/3*pi*math.pow(r,3)\n    return v+v2"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.1415926536\n    surface = 4*pi*r**2\n    return surface\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi = 3.14159\n    pi_2 = pi * pi\n    surface_area = 4 * pi_2 * r * r\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r**2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface = 4 * math.pi * math.pow(r, 2)\n    return surface\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    def centered_hexagonal_number_helper(n, arr):\n        if n == 1:\n            return 6*arr[0]\n        return (2*n-1)*6*arr[0]\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = 6 * n + 1\n    return n - 1\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if not isinstance(n, int) or n <= 0:\n        return\n    # binomial coefficient\n    # a(n) = (6n+1) / 2\n    # (6*(n+1)+1) / 2\n    # (6n+1) + 2n + 1\n    # (6n+1) + 2n + 1\n    # (6n+1) + 2n + 1\n    return int(((6*n+1)**.5 + 1) / 2)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return (n*(3*n - 1)/2)**0.5\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    if n == 0:\n        return 1\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if not isinstance(n, int) or n < 1:\n        raise ValueError(\"Argument must be an integer >= 1\")\n    \n    return n * (1 + n) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    total = 1\n    if n == 1:\n        return total\n    for i in range(1,n):\n        total += 2 * i\n    return total\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    n = int(n)\n    if n == 1:\n        return 1\n    else:\n        return (6*n**2-3*n)/2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    i = 0\n    while True:\n        i += 1\n        if i == n:\n            return i\n        if (i % 6) == 0:\n            return centered_hexagonal_number(n-i) + i\n        if (i % 6) == 1:\n            return centered_hexagonal_number(n-i) + 1\n        if (i % 6) == 2:\n            return centered_hexagonal_number(n-i) + 2\n        if (i % 6) == 3:\n            return centered_hexagonal_number(n-i) + 3\n        if (i % 6) == 4:\n            return centered_hexagonal_number(n-i) + 4\n        if (i % 6) == 5:\n            return centered_hexagonal_number(n-i) + 5\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 6 * centered_hexagonal_number(n-1) - 4 * centered_hexagonal_number(n-2)\n    \nprint(centered_hexagonal_number(3))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict1.update(dict2)\n    return dict1.update(dict2, dict3)\n    \ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    d = {}\n    for key, value in dict1.items():\n        d[key] = value\n    for key, value in dict2.items():\n        d[key] = value\n    return d\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    # return(dict(dict1.items()+dict2.items()+dict3.items()))\n    return {**dict1,**dict2,**dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key in dict1.keys():\n        dict4[key] = dict1[key]\n    for key in dict2.keys():\n        dict4[key] = dict2[key]\n    for key in dict3.keys():\n        dict4[key] = dict3[key]\n    return dict4\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict4 = {}\n    for key in dict1.keys():\n        dict4[key] = dict1[key]\n    for key in dict2.keys():\n        dict4[key] = dict2[key]\n    return dict4\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = dict1.copy()\n    dict4 = dict2.copy()\n    for key in dict2.keys():\n        if key in dict1.keys():\n            dict3[key] = dict2[key]\n        else:\n            dict3[key] = dict2[key]\n    for key in dict1.keys():\n        if key in dict2.keys():\n            dict4[key] = dict1[key]\n        else:\n            dict4[key] = dict1[key]\n    return dict3\ndef merge_dictionaries_zero(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict3 = dict1.copy()\n    dict4 = dict2.copy()\n    for key in dict2.keys():\n        dict3[key] = dict2[key]\n    for key in dict1.keys():\n        dict4[key] = dict1[key]\n    return dict3\ndef merge_dictionaries_one(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    dict4.update(dict2)\n    return dict4\ndef merge_dictionaries_two(dict1, dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    for key in dict2.keys():\n        if key in dict1.keys():\n            dict4[key] = dict2[key]\n        else:\n            dict4[key] = dict2[key]\n    return dict4\ndef merge_dictionaries_three(dict1,dict2,dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    for key in dict2.keys():\n        dict4[key] = dict2[key]\n    for key in dict3.keys():\n        if key in dict4.keys():\n            dict4[key] = dict3[key]\n        else:\n            dict4[key] = dict3[key]\n    return dict4\ndef merge_dictionaries_four(dict1,dict2,dict3,dict4):\n    '''\n    Write a function to merge four dictionaries into a single dictionary.\n    '''\n    dict5 = dict1.copy()\n    for key in dict2.keys():\n        dict5[key] = dict2[key]\n    for key in dict3.keys():\n        if key in dict5.keys():\n            dict5[key] = dict3[key]\n        else:\n            dict5[key] = dict3[key]\n    for key in dict4.keys():\n        if key in dict5.keys():\n            dict5[key] = dict4[key]\n        else:\n            dict5[key] = dict4[key]\n    return dict5\ndef merge_dictionaries_five(dict1,dict2,dict3,dict4,dict5):\n    '''\n    Write a function to merge five dictionaries into a single dictionary.\n    '''\n    dict6 = dict1.copy()\n    for key in dict2.keys():\n        dict6[key] = dict2[key]\n    for key in dict3.keys():\n        if key in dict6.keys():\n            dict6[key] = dict3[key]\n        else:\n            dict6[key] = dict3[key]\n    for key in dict4.keys():\n        if key in dict6.keys():\n            dict6[key] = dict4[key]\n        else:\n            dict6[key] = dict4[key]\n    for key in dict5.keys():\n        if key in dict6.keys():\n            dict6[key] = dict5[key]\n        else:\n            dict6[key] = dict5[key]\n    return dict6\ndef merge_dictionaries_six(dict1,dict2,dict3,dict4,dict5,dict6):\n    '''\n    Write a function to merge six dictionaries into a single dictionary.\n    '''\n    dict7 = dict1.copy()\n    for key in dict2.keys():\n        dict7[key] = dict2[key]\n    for key in dict3.keys():\n        if key in dict7.keys():\n            dict7[key] = dict3[key]\n        else:\n            dict7[key] = dict3[key]\n    for key in dict4.keys():\n        if key in dict7.keys():\n            dict7[key] = dict4[key]\n        else:\n            dict7[key] = dict4[key]\n    for key in dict5.keys():\n        if key in dict7.keys():\n            dict7[key] = dict5[key]\n        else:\n            dict7[key] = dict5[key]\n    for key in dict6.keys():\n        if key in dict7.keys():\n            dict7[key] = dict6[key]\n        else:\n            dict7[key] = dict6[key]\n    return dict7\ndef merge_dictionaries_seven(dict1,dict2,dict3,dict4,dict5,dict6,dict7):\n    '''\n    Write a function to merge seven dictionaries into a single dictionary.\n    '''\n    dict8 = dict1.copy()\n    for key in dict2.keys():\n        dict8[key] = dict2[key]\n    for key in dict3.keys():\n        if key in dict8.keys():\n            dict8[key] = dict3[key]\n        else:\n            dict8[key] = dict3[key]\n    for key in dict4.keys():\n        if key in dict8.keys():\n            dict8[key] = dict4[key]\n        else:\n            dict8[key] = dict4[key]\n    for key in dict5.keys():\n        if key in dict8.keys():\n            dict8[key] = dict5[key]\n        else:\n            dict8[key] = dict5[key]\n    for key in dict6.keys():\n        if key in dict8.keys():\n            dict8[key] = dict6[key]\n        else:\n            dict8[key] = dict6[key]\n    for key in dict7.keys():\n        if key in dict8.keys():\n            dict8[key] = dict7[key]\n        else:\n            dict8[key] = dict7[key]\n    return dict8\ndef merge_dictionaries_eight(dict1,dict2,dict3,dict4,dict5,dict6,dict7,dict8):\n    '''\n    Write a function to merge eight dictionaries into a single dictionary.\n    '''\n    dict9 = dict1.copy()\n    for key in dict2.keys():\n        dict9[key] = dict2[key]\n    for key in dict3.keys():\n        if key in dict9.keys():\n            dict9[key] = dict3[key]\n        else:\n            dict9[key] = dict3[key]\n    for key in dict4.keys():\n        if key in dict9.keys():\n            dict9[key] = dict4[key]\n        else:\n            dict9[key] = dict4[key]\n    for key in dict5.keys():\n        i"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict4 = dict1.copy()\n    for k,v in dict2.items():\n        dict4[k] = v\n    for k,v in dict3.items():\n        dict4[k] = v\n    return dict4\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    #for loop goes through dict1.keys(),dict2.keys(),dict3.keys()\n    #returns a new dictionary\n    dict_merged={}\n    for key1, value1 in dict1.items():\n        dict_merged[key1] = value1\n    for key2, value2 in dict2.items():\n        dict_merged[key2] = value2\n    for key3, value3 in dict3.items():\n        dict_merged[key3] = value3\n    return dict_merged\nprint(merge_dictionaries_three({1:100,2:20},{3:30,4:40,5:50},{4:60,6:60}))\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged = dict1.copy()\n    merged.update(dict2)\n    merged.update(dict3)\n    return merged\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    result_dict = dict1\n    for key, value in dict2.items():\n        result_dict[key] = value\n    for key, value in dict3.items():\n        result_dict[key] = value\n    return result_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = {}\n    for k, v in dict1.items():\n        merged_dict[k] = v\n    for k, v in dict2.items():\n        merged_dict[k] = v\n    for k, v in dict3.items():\n        merged_dict[k] = v\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    dict_result=dict1.copy()\n    for k in dict2:\n        if k in dict_result:\n            dict_result[k]=dict1[k]+dict2[k]\n        else:\n            dict_result[k]=dict2[k]\n    for k in dict3:\n        if k in dict_result:\n            dict_result[k]=dict_result[k]+dict3[k]\n        else:\n            dict_result[k]=dict3[k]\n    return dict_result\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    #new_dict = dict(new_dict)\n    for i in dict1:\n        new_dict[i] = dict1[i]\n    for j in dict2:\n        new_dict[j] = dict2[j]\n    for k in dict3:\n        new_dict[k] = dict3[k]\n    return new_dict\n    \n    #initialization\n    '''\n    new_dict = {}\n    for i in dict1:\n        new_dict[i] = dict1[i]\n    for j in dict2:\n        new_dict[j] = dict2[j]\n    for k in dict3:\n        new_dict[k] = dict3[k]\n    return new_dict\n    '''\ndef merge_dictionaries_two(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        new_dict[i] = dict1[i]\n    for j in dict2:\n        new_dict[j] = dict2[j]\n    return new_dict\n    \n    #initialization\n    '''\n    new_dict = {}\n    for i in dict1:\n        new_dict[i] = dict1[i]\n    for j in dict2:\n        new_dict[j] = dict2[j]\n    return new_dict\n    '''\ndef merge_dictionaries(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i in dict2:\n            new_dict[i] = dict1[i]\n        else:\n            new_dict[i] = dict2[i]\n    for j in dict2:\n        if j not in new_dict:\n            new_dict[j] = dict2[j]\n    return new_dict\n    \n    #initialization\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i in dict2:\n            new_dict[i] = dict1[i]\n        else:\n            new_dict[i] = dict2[i]\n    for j in dict2:\n        if j not in new_dict:\n            new_dict[j] = dict2[j]\n    return new_dict\n    '''\ndef merge_dictionaries_new(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i in dict2:\n            new_dict[i] = dict1[i]\n        else:\n            new_dict[i] = dict2[i]\n    for j in dict2:\n        if j not in new_dict:\n            new_dict[j] = dict2[j]\n    return new_dict\n    \n    #initialization\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i in dict2:\n            new_dict[i] = dict1[i]\n        else:\n            new_dict[i] = dict2[i]\n    for j in dict2:\n        if j not in new_dict:\n            new_dict[j] = dict2[j]\n    return new_dict\n    '''\ndef merge_dictionaries_new_2(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i not in new_dict:\n            new_dict[i] = dict1[i]\n        else:\n            new_dict[i] = dict1[i]\n    for j in dict2:\n        if j not in new_dict:\n            new_dict[j] = dict2[j]\n    return new_dict\n    \n    #initialization\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i not in new_dict:\n            new_dict[i] = dict1[i]\n        else:\n            new_dict[i] = dict1[i]\n    for j in dict2:\n        if j not in new_dict:\n            new_dict[j] = dict2[j]\n    return new_dict\n    '''\ndef merge_dictionaries_new_3(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        new_dict[i] = dict1[i]\n    for j in dict2:\n        new_dict[j] = dict2[j]\n    return new_dict\n    \n    #initialization\n    '''\n    new_dict = {}\n    for i in dict1:\n        new_dict[i] = dict1[i]\n    for j in dict2:\n        new_dict[j] = dict2[j]\n    return new_dict\n    '''\ndef merge_dictionaries_new_4(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i not in new_dict:\n            new_dict[i] = dict1[i]\n    for j in dict2:\n        if j not in new_dict:\n            new_dict[j] = dict2[j]\n    return new_dict\n    \n    #initialization\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i not in new_dict:\n            new_dict[i] = dict1[i]\n        else:\n            new_dict[i] = dict1[i]\n    for j in dict2:\n        if j not in new_dict:\n            new_dict[j] = dict2[j]\n    return new_dict\n    '''\ndef merge_dictionaries_new_5(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        new_dict[i] = dict1[i]\n    for j in dict2:\n        if j not in new_dict:\n            new_dict[j] = dict2[j]\n    return new_dict\n    \n    #initialization\n    '''\n    new_dict = {}\n    for i in dict1:\n        new_dict[i] = dict1[i]\n    for j in dict2:\n        new_dict[j] = dict2[j]\n    return new_dict\n    '''\ndef merge_dictionaries_new_6(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i in dict2:\n            new_dict[i] = dict1[i]\n        else:\n            new_dict[i] = dict2[i]\n    for j in dict2:\n        if j not in new_dict:\n            new_dict[j] = dict2[j]\n    return new_dict\n    \n    #initialization\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i in dict2:\n            new_dict[i] = dict1[i]\n        else:\n            new_dict[i] = dict2[i]\n    for j in dict2:\n        if j not in new_dict:\n            new_dict[j] = dict2[j]\n    return new_dict\n    '''\ndef merge_dictionaries_new_7(dict1,dict2):\n    '''\n    Write a function to merge two dictionaries into a single dictionary.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i in dict2:\n            new_dict[i] = dict1[i]\n        else:\n            new_dict[i] = dict2[i]\n    for j in dict"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item not in freq.keys():\n            freq[item] = 1\n        else:\n            freq[item] += 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = collections.Counter(list1)\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dictionary = {}\n    for item in list1:\n        if item in frequency_dictionary.keys():\n            frequency_dictionary[item] += 1\n        else:\n            frequency_dictionary[item] = 1\n    return frequency_dictionary\ndef freq_count_dict(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dictionary = {}\n    for item in list1:\n        frequency_dictionary[item] = frequency_dictionary.get(item, 0) + 1\n    return frequency_dictionary\ndef freq_count_most_common(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dictionary = {}\n    for item in list1:\n        if item in frequency_dictionary.keys():\n            frequency_dictionary[item] += 1\n        else:\n            frequency_dictionary[item] = 1\n    frequency_dictionary = collections.OrderedDict(sorted(frequency_dictionary.items(), key=lambda t: t[1], reverse=True))\n    return frequency_dictionary\ndef freq_count_word_frequency_sort(string1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency_dictionary = {}\n    for item in string1.split(\" \"):\n        if item in frequency_dictionary.keys():\n            frequency_dictionary[item] += 1\n        else:\n            frequency_dictionary[item] = 1\n    frequency_dictionary = collections.OrderedDict(sorted(frequency_dictionary.items(), key=lambda t: t[1], reverse=True))\n    return frequency_dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for i in list1:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        if i in dic:\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    return dic\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = {}\n    for i in list1:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = collections.Counter(list1)\n    return(d)\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict = {}\n    for i in list1:\n        if i in dict:\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 1\n    else:\n        return 1 + N % 3\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return 1\n    elif N % 3 == 0:\n        return (1 + N) // 3\n    elif N % 3 == 1:\n        return (1 + N) // 3 + 1\n    else:\n        return (1 + N) // 3 + 2\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # 1. check if n is even\n    # 2. if n is even, return n - 1\n    # 3. if n is odd, return n\n    if N % 2 == 0:\n        return N - 1\n    else:\n        return N\n    \n    \ndef closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    # 1. check if n is even\n    # 2. if n is even, return n - 1\n    # 3. if n is odd, return n\n    if N % 2 == 0:\n        return N - 1\n    else:\n        return N\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    #best case O(logn) and avg case O(log(n)\n    closest = N\n    while closest > 0:\n        if N%closest == 0:\n            return closest\n        closest -= 1\n    return -1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N // (1 + 3 * (N - 2))\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 2:\n        return N\n    low = 1\n    high = N\n    while low <= high:\n        mid = (low+high)//2\n        if mid < N and mid+1 >= N:\n            return mid\n        if mid >= N:\n            high = mid-1\n        else:\n            low = mid+1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def is_closet_num(n):\n        '''\n        determines whether a number is the closest smaller number\n        '''\n        if n == 0:\n            return False\n        return abs(N - n) <= abs(N - n - 1)\n    '''\n    some quick checks\n    '''\n    if N == 0:\n        return False\n    if N == 1:\n        return True\n    '''\n    algorithm\n    '''\n    while N > 1:\n        if is_closet_num(N):\n            return N\n        else:\n            N -= 1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def binary_search(arr,start,end,key):\n        if start==end:\n            if key<arr[start]:\n                return start\n            else:\n                return start+1\n        mid=(start+end)//2\n        if key<arr[mid]:\n            return binary_search(arr,start,mid,key)\n        elif key>arr[mid]:\n            return binary_search(arr,mid+1,end,key)\n        else:\n            return mid\n    arr=sorted(list(set(range(1,N+1))-set(range(1,N+1)[::-1])))\n    return arr[binary_search(arr,0,len(arr)-1,N)]\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N-1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    ans = n\n    for i in range(n):\n        ans -= 1\n        if ans < 0:\n            break\n        if is_num_smaller_than_n(N, ans):\n            ans = i\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N == 0:\n        return N\n    mid = 0\n    min_num = 999999999\n    while N > 0:\n        mid = N // 2\n        if N - mid >= 0:\n            min_num = min(min_num, N - mid)\n        N = mid\n    return min_num\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N < 0:\n        print(\"N is negative\")\n        return None\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort()\n    list1.reverse()\n    max_len = 0\n    cur_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n            cur_len = 1\n        elif len(i) == max_len:\n            cur_len += 1\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word_len = 0\n    word = \"\"\n    for i in range(len(list1)):\n        if word == \"\":\n            word_len = len(list1[i])\n            word = list1[i]\n        else:\n            if len(word) < len(list1[i]):\n                word_len = len(list1[i])\n                word = list1[i]\n    print(word_len)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    maxi = 0\n    for i in list1:\n        if len(i) > maxi:\n            maxi = len(i)\n    return maxi\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    list_1 = []\n    longest = 0\n    length = 0\n    \n    for i in range(len(list1)):\n        \n        list_1.append(list1[i])\n        \n        if len(list_1[i]) > longest:\n            longest = len(list_1[i])\n            length = i\n        \n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    s = \"\"\n    for i in list1:\n        if len(s) < len(i):\n            s = i\n    return len(s)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    #len_list = len(list1)\n    list1.sort()\n    return(len(list1[-1]))\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    list1.sort(reverse=True)\n    return len(list1[0])\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max =0\n    for word in list1:\n        if len(word) > max:\n            max = len(word)\n    return max\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    \n    l = len(max(list1, key=len))\n    print(l)\n    return l\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_length = 0\n    for element in list1:\n        if len(element) > max_length:\n            max_length = len(element)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #n=0\n    #for i in range(len(str1)):\n    #    if str1[i]==sub_str:\n    #        n=n+1\n    #if n==len(str1):\n    #    return True\n    #else:\n    #    return False\n    \n    '''\n    Another option\n    '''\n    #return str1.count(sub_str)\n    \ndef find_substring_2(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #return any([sub_str in s for s in str1])\n    \n    '''\n    Another option\n    '''\n    #return any([s.find(sub_str)!= -1 for s in str1])\n    \ndef find_substring_3(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    #return any([sub_str in s for s in str1])\n    #return sub_str in str1\n    \n    '''\n    Another option\n    '''\n    if sub_str not in str1:\n        return False\n    for i in range(len(str1)):\n        if sub_str==str1[i:i+len(sub_str)]:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)-len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    if sub_str in str1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(len(str1) - len(sub_str) + 1):\n        if str1[i:i+len(sub_str)] == sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str = sub_str.lower()\n    str1 = str1.lower()\n    # if the substring is not in the list of string values\n    if sub_str not in str1:\n        return False\n    else:\n        # if the substring is in the list of string values\n        # find the length of the substring\n        # find the length of the entire string\n        length = len(sub_str)\n        length_str = len(str1)\n        # if length of substring is greater than or equal to the length of the entire string\n        if length >= length_str:\n            # check if the sub string is in the entire string\n            return str1.find(sub_str)\n        # if length of substring is less than the length of the entire string\n        else:\n            # check if the sub string is in the first part of the string\n            first = str1[:length]\n            # check if the sub string is in the second part of the string\n            second = str1[length:]\n            return first.find(sub_str) + length\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0,len(str1)):\n        for j in range(0,len(sub_str)):\n            if(str1[i+j]!=sub_str[j]):\n                break\n        if(i+j==len(sub_str)):\n            return True\n    return False\n    \ndef delete_value_in_list(str1,sub_str):\n    '''\n    Write a function to remove all occurrences of a value in a list.\n    '''\n    l = []\n    for i in range(0,len(str1)):\n        for j in range(0,len(sub_str)):\n            if(str1[i]==sub_str[j]):\n                break\n        if(i+j<len(sub_str)):\n            l.append(str1[i+j])\n    return l\n    \ndef find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    \n    l = []\n    for i in range(0,len(str1)):\n        for j in range(0,len(sub_str)):\n            if(str1[i]==sub_str[j]):\n                break\n        if(i+j==len(sub_str)):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a,b,c = 0,0,1\n    for i in range(n):\n        c = a + b\n        a = b\n        b = c\n        if (a==0):\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2==0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    undulating = False\n    i = 2\n    while i < n:\n        if n % i == 0:\n            undulating = True\n            break\n        i += 1\n    return undulating\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0:\n        return True\n    \n    if n % 2!= 0:\n        return False\n    \ndef is_palindrome(n): \n    '''\n    Write a function to check whether the given number is palindrome or not.\n    '''\n    return str(n) == str(n)[::-1]\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a, b = 2, 3\n    if n == 2:\n        return True\n    while n!= 1:\n        if n % a == 0 or n % b == 0:\n            return False\n        n = n//2\n        a, b = a + 2*a, b + 2*b\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n=n%10\n    if n>0:\n        for i in range(1,n):\n            if (n%(i+1))==0:\n                return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 1 or n == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    a = (n // 2)\n    b = (n // 3)\n    c = (n // 4)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n % 2 == 0 or (n-2) % 2 == 0 or (n+1) % 2 == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    n = int(n)\n    if n >= 1000 and n < 10000:\n        if (n % 7 == 0 and (n % 5!= 0 or n % 3!= 0)):\n            return True\n    return False\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    elif b == 1:\n        return a\n    else:\n        return a * power(a,b-1)\n    \n    \n    \ndef factorial(n):\n    '''\n    Write a function that takes positive integer 'n' and returns the\n    value of the factorial of 'n'\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n    \n    \n    \ndef reverse(x):\n    '''\n    Write a function that takes positive integer 'x' and returns the value of the \n    reverse of 'x'.\n    '''\n    if x == 0:\n        return 0\n    else:\n        return reverse(x-1) + x\n    \n    \n    \ndef is_palindrome(x):\n    '''\n    Write a function that takes positive integer 'x' and returns True if the\n    value of x is a palindrome and False otherwise.\n    '''\n    if x == 0:\n        return True\n    elif x < 0:\n        return False\n    else:\n        rev = reverse(x)\n        return True if rev == x else False\n    \n    \n    \ndef sum_of_digits(x):\n    '''\n    Write a function that takes positive integer 'x' and returns the sum of all\n    the digits of 'x'.\n    '''\n    if x < 10:\n        return x\n    else:\n        return x % 10 + sum_of_digits(x//10)\n    \n    \n    \ndef first_occurrence(s, x):\n    '''\n    Write a function that takes a string's' and integer 'x' and returns the\n    value of the first occurrence of 'x' in's' or -1 if 'x' doesn't occur in's'.\n    '''\n    if x not in s:\n        return -1\n    else:\n        return s.index(x)\n        \n    \n    \ndef max_occurrence(s, x):\n    '''\n    Write a function that takes a string's' and integer 'x' and returns the\n    value of the max occurrence of 'x' in's' or 0 if 'x' doesn't occur in's'.\n    '''\n    if x not in s:\n        return 0\n    else:\n        return s.count(x)\n        \n    \n    \ndef has_duplicates(x):\n    '''\n    Write a function that takes a list and returns True if the list has any\n    duplicates and False otherwise.\n    '''\n    if len(x) == len(set(x)):\n        return False\n    else:\n        return True\n    \n    \n    \ndef reverse_words(s):\n    '''\n    Write a function that takes a string's' and returns the reversed version of\n    the string.\n    '''\n    if len(s) < 1:\n        return s\n    elif len(s) == 1:\n        return s\n    else:\n        return reverse_words(s[1:]) + s[0]\n    \n    \n    \ndef is_ascending(x):\n    '''\n    Write a function that takes a list and returns True if the list is\n    ascending and False otherwise.\n    '''\n    if x == sorted(x):\n        return True\n    else:\n        return False\n        \n    \n    \ndef is_decreasing(x):\n    '''\n    Write a function that takes a list and returns True if the list is\n    decreasing and False otherwise.\n    '''\n    if x == sorted(x, reverse=True):\n        return True\n    else:\n        return False\n        \n        \n    \ndef has_duplicates(s):\n    '''\n    Write a function that takes a list and returns True if the list has any\n    duplicates and False otherwise.\n    '''\n    if len(s) == len(set(s)):\n        return False\n    else:\n        return True\n    \n    \n    \ndef find_nth(s, n):\n    '''\n    Write a function that takes a string's' and integer 'n' and returns the\n    value of the nth character in the string or -1 if the index doesn't exist.\n    '''\n    if len(s) < n:\n        return -1\n    else:\n        return s[n-1]\n    \n    \n    \ndef rotate_string(s, n):\n    '''\n    Write a function that takes a string's' and integer 'n' and returns the\n    value of the string after shifting the characters of the string by the\n    amount 'n'.\n    '''\n    if n == 0:\n        return s\n    elif n < 0:\n        return rotate_string(s[-n:], abs(n)) + rotate_string(s[:-n], abs(n))\n    else:\n        return s[n:] + s[:n]\n    \n    \n    \ndef check_pattern(s):\n    '''\n    Write a function that takes a string's' and returns True if the string\n    contains the pattern of 'abc' and False otherwise.\n    '''\n    if len(s)!= 3:\n        return False\n    else:\n        return True if s == 'abc' else False\n    \n    \n    \ndef check_pattern(s):\n    '''\n    Write a function that takes a string's' and returns True if the string\n    contains the pattern of 'abc' and False otherwise.\n    '''\n    if len(s)!= 3:\n        return False\n    else:\n        return True if s == 'abc' else False\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a function that takes a string's' and returns True if the value of\n    'ss' is a palindrome and False otherwise.\n    '''\n    if s == s[::-1]:\n        return True\n    else:\n        return False\n    \n    \n    \ndef change_letters(s):\n    '''\n    Write a function that takes a string's' and returns the string in which\n    the letters in's' have been changed to 'A'.\n    '''\n    if s == s.upper():\n        return s.upper()\n    else:\n        return s.lower()\n    \n    \n    \ndef rotate_words(s, n):\n    '''\n    Write a function that takes a string's' and integer 'n' and returns the\n    value of the string after shifting the characters of the string by the\n    amount 'n'.\n    '''\n    if n == 0:\n        return s\n    else:\n        return s[n:] + s[:n]\n    \n    \n    \ndef sum_odd_numbers(s):\n    '''\n    Write a function that takes a string's' and returns the sum of all the\n    odd numbers in the string.\n    '''\n    sum = 0\n    for x in s:\n        if int(x) % 2!= 0:\n            sum += int(x)\n    return sum\n    \n    \n    \ndef sum_odd_numbers(s):\n    '''\n    Write a function that takes a string's' and returns the sum of all the\n    odd numbers in the string.\n    '''\n    sum = 0\n    for x in s:\n        if int(x) % 2!= 0:\n            sum += int(x)\n    return sum\n    \n    \n    \ndef sum_of_even_numbers(s):\n    '''\n    Write a function that takes a string's' and returns the sum of all the\n    even numbers in the string.\n    '''\n    sum = 0\n    for x in s:\n        if int(x) % 2 == 0:\n            sum += int(x)\n    return sum\n    \n    \n    \ndef sum_of_even_numbers(s):\n    '''\n    Write a function that takes a string's' and returns the sum of all the\n    even numbers in the string.\n    '''\n    sum = 0\n    for x in s:\n        if int(x) % 2 == 0:\n            sum += int(x)\n    return sum\n    \n    \n    \ndef has_even_number(s):\n    '''\n    Write a function that takes a string's' and returns True if the string\n    contains an even number and False otherwise."
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    assert(type(a) == int and type(b) == int)\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    if b < 0:\n        return 1 / power(a, -b)\n    else:\n        return a * power(a, b - 1)\nprint(power(2,3))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    tup_list = []\n    for i in test_list:\n        tup_list.append(i)\n    tup_list.sort(key=lambda tup: tup[1])\n    return tup_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    i = 0\n    minimum = 10000000000000\n    while i < len(test_list):\n        if(test_list[i][1] < minimum):\n            minimum = test_list[i][1]\n            index = i\n        i+=1\n    return(test_list[index])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    #Tuples are sorted according to the second element\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index_min = []\n    for i, j in enumerate(test_list):\n        if j[1] < j[2]:\n            index_min.append(i)\n    return min(index_min)\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    d = {}\n    for key, value in test_list:\n        d[key] = value\n    d = sorted(d.items(), key=lambda x: x[1])\n    for key, value in d:\n        return key\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    test_list.sort(key=itemgetter(1))\n    \n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    l = []\n    for element in test_list:\n        l.append((element[0], element[1]))\n    l.sort(key=itemgetter(1))\n    return l[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    \n    test_list = sorted(test_list, key=itemgetter(0, 2))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list,key=itemgetter(1))\ndef index_maximum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value.\n    '''\n    return max(test_list,key=itemgetter(1))\ndef index_minimum_occ(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value that appears more than once in the list.\n    '''\n    return min(test_list,key=lambda x: x[1])\ndef index_maximum_occ(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value that appears more than once in the list.\n    '''\n    return max(test_list,key=lambda x: x[1])\ndef index_odd_occ(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value that appears more than once in the list.\n    '''\n    return max(test_list,key=lambda x: x[1])\ndef index_even_occ(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the largest second value that appears more than once in the list.\n    '''\n    return max(test_list,key=lambda x: x[1])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key = itemgetter(1))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_lst = lst[0]\n    for i in lst:\n        if len(i) < len(min_lst):\n            min_lst = i\n    return len(min_lst)\n    \ndef Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest list in a list of lists.\n    '''\n    max_lst = lst[0]\n    for i in lst:\n        if len(i) > len(max_lst):\n            max_lst = i\n    return len(max_lst)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_size = len(lst[0])\n    for i in range(len(lst)):\n        if min_size > len(lst[i]):\n            min_size = len(lst[i])\n    return min_size\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in range(1,len(lst)):\n        if(len(lst[i]) < min_length):\n            min_length = len(lst[i])\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst[0])\n    for i in range(len(lst)):\n        if min > len(lst[i]):\n            min = len(lst[i])\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    if(len(lst)==0):\n        print(\"Empty List!\")\n    else:\n        min_list=[]\n        for i in range(len(lst)):\n            if(len(min_list)==0):\n                min_list=lst[i]\n            else:\n                if(len(min_list)>len(lst[i])):\n                    min_list=lst[i]\n        print(\"Minimum length of list is: \",len(min_list))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    m = len(lst)\n    if m == 0:\n        return 0\n    min_list = lst[0]\n    for i in range(1,m):\n        if len(min_list) > len(lst[i]):\n            min_list = lst[i]\n    return len(min_list)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini = []\n    for i in lst:\n        if len(i) == min(list(map(len,lst))):\n            mini.append(i)\n    return mini\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    lst.sort()\n    return len(lst[0])\n    \nFind_Min_Length([[1,2,3,4],[4,5,6]])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min=0\n    for i in range(len(lst)):\n        if len(lst[i])<min:\n            min=len(lst[i])\n    return min"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    l = []\n    for i in lst:\n        if i not in l:\n            l.append(i)\n    return len(l)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2,n):\n        if n%i == 0:\n            count += 1\n    print(count)\ndivisor(20)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count=0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    if n == 1:\n        return 1\n    for i in range(1, n):\n        if n%i == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    d = []\n    for i in range(1,n+1):\n        if n%i==0:\n            d.append(i)\n    return len(d)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    return\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    i = 2\n    while i <= n / i:\n        if n % i == 0:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    if n <= 1:\n        return count\n    if n == 2:\n        return count\n    if n % 2 == 0:\n        count = 1 + divisor(n//2)\n    else:\n        count = 2 + divisor(n//2)\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(1,n+1):\n        if n%i==0:\n            div+=1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if (n%i == 0):\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    f = {}\n    for i in list1:\n        for j in i:\n            if j in f:\n                f[j] += 1\n            else:\n                f[j] = 1\n    return f\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item] += 1\n            else:\n                freq_list[item] = 1\n    return freq_list\n    \ndef frequency_lists_2(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item] += 1\n            else:\n                freq_list[item] = 1\n    return freq_list\n    \ndef frequency_lists_3(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item] += 1\n            else:\n                freq_list[item] = 1\n    return freq_list\n    \ndef frequency_lists_4(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item] += 1\n            else:\n                freq_list[item] = 1\n    return freq_list\n    \ndef frequency_lists_5(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item].append(list1_item)\n            else:\n                freq_list[item] = [list1_item]\n    return freq_list\n    \ndef frequency_lists_6(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item].append(list1_item)\n            else:\n                freq_list[item] = [list1_item]\n    return freq_list\n    \ndef frequency_lists_7(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item].append(list1_item)\n            else:\n                freq_list[item] = [list1_item]\n    return freq_list\n    \ndef frequency_lists_8(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item].append(list1_item)\n            else:\n                freq_list[item] = [list1_item]\n    return freq_list\n    \ndef frequency_lists_9(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item].append(list1_item)\n            else:\n                freq_list[item] = [list1_item]\n    return freq_list\n    \ndef frequency_lists_10(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item] += list1_item\n            else:\n                freq_list[item] = list1_item\n    return freq_list\n    \ndef frequency_lists_11(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item] += list1_item\n            else:\n                freq_list[item] = list1_item\n    return freq_list\n    \ndef frequency_lists_12(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item] += list1_item\n            else:\n                freq_list[item] = list1_item\n    return freq_list\n    \ndef frequency_lists_13(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item] += 1\n            else:\n                freq_list[item] = 1\n    return freq_list\n    \ndef frequency_lists_14(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item] += 1\n            else:\n                freq_list[item] = 1\n    return freq_list\n    \ndef frequency_lists_15(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item] += list1_item\n            else:\n                freq_list[item] = list1_item\n    return freq_list\n    \ndef frequency_lists_16(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_list[item] += 1\n            else:\n                freq_list[item] = 1\n    return freq_list\n    \ndef frequency_lists_17(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_list = {}\n    \n    for list1_item in list1:\n        for item in list1_item:\n            if item in freq_list:\n                freq_lis"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    dic_item = {}\n    for i in list1:\n        for j in i:\n            if j in dic:\n                dic[j] += 1\n            else:\n                dic[j] = 1\n                dic_item[j] = i\n    return dic, dic_item\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        for j in i:\n            if j in freq_dict:\n                freq_dict[j] += 1\n            else:\n                freq_dict[j] = 1\n    return freq_dict"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_list = {}\n    for item in list1:\n        if item in frequency_list.keys():\n            frequency_list[item] += 1\n        else:\n            frequency_list[item] = 1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    # for _ in range(len(list1)):\n    #     for _ in range(len(list1)):\n    #         if list1[_] in list1[:_]:\n    #             list1.append(list1[:_])\n    #             list1.remove(list1[:_])\n    #     return list1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for lst in list1:\n        for item in lst:\n            if item in freq_dict:\n                freq_dict[item] += 1\n            else:\n                freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for ele in list1:\n        for i in ele:\n            if i not in freq:\n                freq[i] = 1\n            else:\n                freq[i] += 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for i in list1:\n        if i in freq_dict.keys():\n            freq_dict[i] += 1\n        else:\n            freq_dict[i] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    frequency_dict = {}\n    for i in list1:\n        if i in frequency_dict:\n            frequency_dict[i] += 1\n        else:\n            frequency_dict[i] = 1\n    return frequency_dict\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total_product = 1\n    for num in numbers:\n        total_product *= num\n    total_product = total_product / len(numbers)\n    return total_product\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for i in numbers:\n        result = result * i\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiply = 1\n    for i in numbers:\n        multiply *= i\n    print(\"The product is: \", multiply/len(numbers))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for x in numbers:\n        result = result * x\n    result = result / len(numbers)\n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numpy.prod(numbers) / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return numbers[0] * numbers[1] / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    try:\n        if len(numbers) == 0:\n            raise Exception(\"The numbers list is empty\")\n        elif len(numbers) == 1:\n            return numbers[0]\n        else:\n            return numbers[0] * multiply_num(numbers[1:])\n    except:\n        raise Exception(\"The numbers list is empty\")\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    length = len(numbers)\n    result = 1\n    for x in numbers:\n        result *= x\n    return result/length\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    product = 1\n    for number in numbers:\n        product = product * number\n    return product / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    return n1 * n2\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    return decimal_to_binary(n//2) + str(n%2)\ndef decimal_to_binary_recursive(n):\n    if n == 0:\n        return '0'\n    if n == 1:\n        return '1'\n    return decimal_to_binary_recursive(n//2) + str(n%2)\ndef decimal_to_binary_recursive_iterative(n):\n    res = []\n    while n!= 0:\n        res.append(n%2)\n        n = n // 2\n    return ''.join([str(i) for i in res])\ndef decimal_to_binary_recursive_iterative(n):\n    res = []\n    while n!= 0:\n        res.append(n%2)\n        n = n // 2\n    return ''.join([str(i) for i in res[::-1]])\ndef main():\n    print(decimal_to_binary(30))\n    print(decimal_to_binary(15))\n    print(decimal_to_binary(0))\n    print(decimal_to_binary(1))\n    print(decimal_to_binary_recursive(30))\n    print(decimal_to_binary_recursive(15))\n    print(decimal_to_binary_recursive(0))\n    print(decimal_to_binary_recursive(1))\n    print(decimal_to_binary_recursive_iterative(30))\n    print(decimal_to_binary_recursive_iterative(15))\n    print(decimal_to_binary_recursive_iterative(0))\n    print(decimal_to_binary_recursive_iterative(1))\nif __name__ == '__main__':\n    main("
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return \"0\"\n    \n    result = \"\"\n    result += decimal_to_binary(n // 2) \n    result += str(n % 2) \n    return result \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  \n  "
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    dec_to_bin = \"0\" + bin(n)[2:]\n    return dec_to_bin\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_string = ''\n    while n!= 0:\n        binary_string = str(n%2) + binary_string\n        n = n//2\n    return binary_string\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary = ''\n    if n == 0: \n        return binary \n    while n > 0: \n        if (n % 2) == 1: \n            binary = binary + '1'\n        else: \n            binary = binary + '0'\n        n = n // 2\n    return binary[::-1] \n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\ndef decimal_to_octal(n): \n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    return oct(n)[2:]\ndef decimal_to_hexadecimal(n): \n    '''\n    Write a function to convert the given decimal number to its hexadecimal equivalent, represented as a string with no leading zeros.\n    '''\n    return hex(n)[2:]\ndef decimal_to_base16(n): \n    '''\n    Write a function to convert the given decimal number to its base16 equivalent, represented as a string with no leading zeros.\n    '''\n    return hex(n)[2:].zfill(8)\ndef decimal_to_base10(n): \n    '''\n    Write a function to convert the given decimal number to its base10 equivalent, represented as a string with no leading zeros.\n    '''\n    return str(n)\ndef decimal_to_base8(n): \n    '''\n    Write a function to convert the given decimal number to its base8 equivalent, represented as a string with no leading zeros.\n    '''\n    return format(n, '#08b')\ndef decimal_to_binary_fixed_length(n, length): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros, of a fixed length.\n    '''\n    return (decimal_to_binary(n)[:length])\ndef decimal_to_octal_fixed_length(n, length): \n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros, of a fixed length.\n    '''\n    return (decimal_to_octal(n)[:length])\ndef decimal_to_hexadecimal_fixed_length(n, length): \n    '''\n    Write a function to convert the given decimal number to its hexadecimal equivalent, represented as a string with no leading zeros, of a fixed length.\n    '''\n    return (decimal_to_hexadecimal(n)[:length])\ndef decimal_to_base16_fixed_length(n, length): \n    '''\n    Write a function to convert the given decimal number to its base16 equivalent, represented as a string with no leading zeros, of a fixed length.\n    '''\n    return (decimal_to_base16(n)[:length])\ndef decimal_to_base10_fixed_length(n, length): \n    '''\n    Write a function to convert the given decimal number to its base10 equivalent, represented as a string with no leading zeros, of a fixed length.\n    '''\n    return (decimal_to_base10(n)[:length])\ndef decimal_to_base8_fixed_length(n, length): \n    '''\n    Write a function to convert the given decimal number to its base8 equivalent, represented as a string with no leading zeros, of a fixed length.\n    '''\n    return (decimal_to_base8(n)[:length])\ndef binary_to_decimal(n): \n    '''\n    Write a function to convert the given binary number to its decimal equivalent.\n    '''\n    binary = list(n)\n    binary = binary[::-1]\n    decimal = 0\n    for i in range(len(binary)):\n        if(binary[i] == \"1\"):\n            decimal = decimal + 2 ** i\n    return decimal\ndef decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\ndef decimal_to_octal(n): \n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    return oct(n)[2:]\ndef decimal_to_hexadecimal(n): \n    '''\n    Write a function to convert the given decimal number to its hexadecimal equivalent, represented as a string with no leading zeros.\n    '''\n    return hex(n)[2:]\ndef decimal_to_base16(n): \n    '''\n    Write a function to convert the given decimal number to its base16 equivalent, represented as a string with no leading zeros.\n    '''\n    return hex(n)[2:].zfill(8)\ndef decimal_to_base10(n): \n    '''\n    Write a function to convert the given decimal number to its base10 equivalent, represented as a string with no leading zeros.\n    '''\n    return str(n)\ndef decimal_to_base8(n): \n    '''\n    Write a function to convert the given decimal number to its base8 equivalent, represented as a string with no leading zeros.\n    '''\n    return format(n, '#08b')\ndef binary_to_decimal(n): \n    '''\n    Write a function to convert the given binary number to its decimal equivalent.\n    '''\n    binary = list(n)\n    binary = binary[::-1]\n    decimal = 0\n    for i in range(len(binary)):\n        if(binary[i] == \"1\"):\n            decimal = decimal + 2 ** i\n    return decimal\ndef decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\ndef decimal_to_octal(n): \n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    return oct(n)[2:]\ndef decimal_to_hexadecimal(n): \n    '''\n    Write a function to convert the given decimal number to its hexadecimal equivalent, represented as a string with no leading zeros.\n    '''\n    return hex(n)[2:]\ndef decimal_to_base16(n): \n    '''\n    Write a function to convert the given decimal number to its base16 equivalent, represented as a string with no leading zeros.\n    '''\n    return hex(n)[2:].zfill(8)\ndef decimal_to_base10(n): \n    '''\n    Write a function to convert the given decimal number to its base10 equivalent, represented as a string with no leading zeros.\n    '''\n    return str(n)\ndef decimal_to_base8(n): \n    '''\n    Write a function to convert the given decimal number to its base8 equivalent, represented as a string with no leading zeros.\n    '''\n    return format(n, '#08b')\ndef binary_to_decimal(n): \n    '''\n    Write a function to convert the given binary number to its decimal equivalent.\n    '''\n    binary = list(n)\n    binary = binary[::-1]\n    decimal = 0\n    for i in range(len(binary)):\n        if(binary[i] == \"1\"):\n            decimal = decimal + 2 ** i\n    return decimal\ndef decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return bin(n)[2:]\ndef decimal_to_octal(n): \n    '''\n    Write a function to convert the given decimal number to its octal equivalent, represented as a string with no leading zeros.\n    '''\n    return oct(n)[2:]\ndef decimal_to_hexadecimal(n): \n    '''\n    Write a function to convert the given decimal number to its hexadecimal equivalent, represented as a string with no leading zeros.\n    '''\n    return hex(n)[2:]\ndef decimal_to_base16(n): \n    '''\n    Write a function to convert the given decimal number to its base16 equivalent, represented as a string with no leading zeros.\n    '''\n    return hex(n)[2:].zfill(8)\ndef decimal_to_base10(n): \n    '''\n    Write a function to convert the given decimal number to its base10 equivalen"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if not n:\n        return str(0)\n    return str(n%2) + decimal_to_binary(n//2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    decimal_to_binary_helper(n, '', str(n % 2))\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    #initialize binary to empty string\n    binary = \"\"\n    #counter to keep track of number of bits\n    counter = 0\n    #the binary equivalent of the decimal number\n    while (n!= 0):\n        #find the rightmost digit to left\n        if (n == 1):\n            binary = binary + \"1\"\n        else:\n            binary = binary + \"0\"\n        #reduce the number by dividing by 2\n        n = n/2\n        #increment counter by 1\n        counter = counter + 1\n    #return the binary equivalent of the decimal number\n    return binary\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    for i in range(len(num)-1, -1, -1):\n        if num[i] == \"9\":\n            num = num.replace(num[i],\"6\",1)\n            return int(num)\n    return int(num+\"1\")\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    while True:\n        if num%2==0:\n            num=num/2\n            continue\n        if num%2==1:\n            if num>9:\n                if num%10==1:\n                    num=num-1\n                else:\n                    num=num//10\n                continue\n            elif num==9:\n                num=num-1\n                continue\n            else:\n                return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n    if num == 3:\n        return 7\n    if num == 4:\n        return 5\n    if num == 5:\n        return 6\n    if num == 6:\n        return 9\n    if num == 7:\n        return 8\n    if num == 8:\n        return 2\n    if num == 9:\n        return 4\n    if num == 10:\n        return 2\n    if num == 11:\n        return 10\n    if num == 12:\n        return 12\n    if num == 13:\n        return 14\n    if num == 14:\n        return 14\n    if num == 15:\n        return 15\n    if num == 16:\n        return 6\n    if num == 17:\n        return 8\n    if num == 18:\n        return 9\n    if num == 19:\n        return 10\n    if num == 20:\n        return 11\n    if num == 21:\n        return 11\n    if num == 22:\n        return 13\n    if num == 23:\n        return 14\n    if num == 24:\n        return 15\n    if num == 25:\n        return 16\n    if num == 26:\n        return 16\n    if num == 27:\n        return 17\n    if num == 28:\n        return 18\n    if num == 29:\n        return 20\n    if num == 30:\n        return 21\n    if num == 31:\n        return 22\n    if num == 32:\n        return 22\n    if num == 33:\n        return 24\n    if num == 34:\n        return 25\n    if num == 35:\n        return 26\n    if num == 36:\n        return 27\n    if num == 37:\n        return 28\n    if num == 38:\n        return 29\n    if num == 39:\n        return 30\n    if num == 40:\n        return 31\n    if num == 41:\n        return 33\n    if num == 42:\n        return 34\n    if num == 43:\n        return 35\n    if num == 44:\n        return 36\n    if num == 45:\n        return 37\n    if num == 46:\n        return 38\n    if num == 47:\n        return 39\n    if num == 48:\n        return 40\n    if num == 49:\n        return 41\n    if num == 50:\n        return 42\n    if num == 51:\n        return 43\n    if num == 52:\n        return 44\n    if num == 53:\n        return 45\n    if num == 54:\n        return 46\n    if num == 55:\n        return 47\n    if num == 56:\n        return 48\n    if num == 57:\n        return 49\n    if num == 58:\n        return 50\n    if num == 59:\n        return 51\n    if num == 60:\n        return 52\n    if num == 61:\n        return 53\n    if num == 62:\n        return 54\n    if num == 63:\n        return 55\n    if num == 64:\n        return 56\n    if num == 65:\n        return 57\n    if num == 66:\n        return 58\n    if num == 67:\n        return 59\n    if num == 68:\n        return 60\n    if num == 69:\n        return 61\n    if num == 70:\n        return 62\n    if num == 71:\n        return 63\n    if num == 72:\n        return 64\n    if num == 73:\n        return 65\n    if num == 74:\n        return 66\n    if num == 75:\n        return 67\n    if num == 76:\n        return 68\n    if num == 77:\n        return 69\n    if num == 78:\n        return 70\n    if num == 79:\n        return 71\n    if num == 80:\n        return 72\n    if num == 81:\n        return 73\n    if num == 82:\n        return 74\n    if num == 83:\n        return 75\n    if num == 84:\n        return 76\n    if num == 85:\n        return 77\n    if num == 86:\n        return 78\n    if num == 87:\n        return 79\n    if num == 88:\n        return 80\n    if num == 89:\n        return 81\n    if num == 90:\n        return 82\n    if num == 91:\n        return 83\n    if num == 92:\n        return 84\n    if num == 93:\n        return 85\n    if num == 94:\n        return 86\n    if num == 95:\n        return 87\n    if num == 96:\n        return 88\n    if num == 97:\n        return 89\n    if num == 98:\n        return 90\n    if num == 99:\n        return 91\n    if num == 100:\n        return 92\n    if num == 101:\n        return 93\n    if num == 102:\n        return 94\n    if num == 103:\n        return 95\n    if num == 104:\n        return 96\n    if num == 105:\n        return 97\n    if num == 106:\n        return 98\n    if num == 107:\n        return 99\n    if num == 108:\n        return 100\n    if num == 109:\n        return 101\n    if num == 110:\n        return 102\n    if num == 111:\n        return 103\n    if num == 112:\n        return 104\n    if num == 113:\n        return 105\n    if num == 114:\n        return 106\n    if num == 115:\n        return 107\n    if num == 116:\n        return 108\n    if num == 117:\n        return 109\n    if num == 118:\n        return 110\n    if num == 119:\n        return 111\n    if num == 120:\n        return 112\n    if num == 121:\n        return 113\n    if num == 122:\n        return 114\n    if num == 123:\n        return 115\n    if num == 124:\n        return 116\n    if num == 125:\n        return 117\n    if num == 126:\n        return 118\n    if num == 127:\n        return 119\n    if num == 128:\n        return 120\n    if num == 129:\n        return 121\n    if num == 130:\n        return 122\n    if num == 131:\n        return 123\n    if num == 132:\n        return 124\n    if num == 133:\n        return 125\n    if num == 134:\n        return 126\n    if num == 135:\n        return 127\n    if num == 136:\n        return 128\n    if num == 137:\n        return 129\n    if num == 138:\n        return 130\n    if num == 139:\n        return 131\n    if num == 140:\n        return 132\n    if num == 141:\n        return 133\n    if num == 142:\n        return 134\n    if num == 143:\n        return 135\n    if num == 144:\n        return 136\n    if num == 145:\n        return 137\n    if num == 146:\n        return 138\n    if num == 147:\n        return 139\n    if num == 148:\n        return 140\n    if num == 149:\n        return 141\n    if num == 150:\n        return 142\n    if num == 151:\n        return 143\n    if num == 152:\n        return 144\n    if num == 153:\n        return 145\n    if num == 154:\n        return 146\n    if num == 155:\n        return 147\n    if num == 156:\n        return 148\n    if num == 157:\n        return 149\n    if num == 158:\n        return 150\n    if num == 159:\n        return 151\n    if num == 160:\n        return 152\n    if num == 161:\n        return 153\n    if num == 162:\n        return 154\n    if num == 163:\n        return 155\n    if num == 164:\n        return 156\n    if num == 165:\n        return 157\n    if num == 166:\n        return 158\n    if num == 167:\n        return 159\n    if num == 168:\n        return 160\n    if num == 169:\n        return 161\n    if num == 170:\n        return 162\n    if num == 171:\n        return 163\n    if num == 172:\n        return 164\n    if num == 173:\n        return 165\n    if num == 174:\n        return 166\n    if num == 175:\n        return 167\n    if num == 176:\n        return 168\n    if num == 177:\n        return 169\n    if num == 178:\n        return 170\n    if num == 179:\n        return 171\n    if num == 180:\n        return 172\n    if num == 181:\n        return 173\n    if num == 182:\n        return 17"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0:\n        return num\n    if num == 1:\n        return 1\n    if num == 2:\n        return 2\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    return\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # edge case - test case - 9\n    if num==9:\n        return 9\n    # since -1 is the smallest palindrome, we need to find the nearest palindrome greater than -1\n    # then we can just perform a binary search to find the nearest palindrome greater than -1\n    # this is the same as finding the next largest palindrome of the integer\n    if num==-1:\n        # we can't just find the next largest palindrome of -1 since -1 is not a palindrome\n        # if we find a smaller palindrome, then this would be the next largest palindrome\n        for i in range(1,num):\n            if num - i < 0:\n                return -1\n            if num - i > -1 and str(num - i)==str(num - i)[::-1]:\n                return num - i\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # in case of overflow\n    if num == 1:\n        return 1\n    # in case of below 2\n    if num == 2:\n        return 3\n    # in case of below 3\n    if num == 3:\n        return 11\n    # max palindrome number\n    max_num = 2147483647\n    # min_num = -2147483648\n    while num > max_num:\n        # mid\n        mid_num = (num + max_num) // 2\n        # from mid onwards, if number is odd, increase it by 1\n        if mid_num & 0b1:\n            max_num = mid_num - 1\n        else:\n            max_num = mid_num\n    return max_num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = str(num)\n    # print(num)\n    l = len(num)\n    # print(l)\n    if l == 1:\n        return int(num[0])\n    else:\n        for i in range(l):\n            # print(i)\n            # print(num[i])\n            # print(num[l-i-1])\n            if num[i] == num[l-i-1]:\n                # print(\"1\")\n                continue\n            elif num[i] == '9' and num[l-i-1] == '6':\n                # print(\"2\")\n                continue\n            else:\n                return int(num[i:l-i])\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    num = num + 1\n    while True:\n        if is_palindrome(num):\n            return num\n        num += 1\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num==0:\n        return 1\n    for i in range(num+1,100001):\n        x = str(i)\n        n = len(x)\n        if x[n-1]==\"9\" and x[n-2]==\"9\":\n            continue\n        elif x[n-1] == \"0\" and x[n-2] == \"9\":\n            continue\n        elif x[n-1] == \"9\" and x[n-2] == \"0\":\n            continue\n        elif x[n-1] == \"0\" and x[n-2] == \"0\":\n            continue\n        else:\n            if (int(x)>num):\n                return int(x)\n            else:\n                break\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    arr_size = len(arr)\n    if arr_size == 0:\n        return -1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # O(n)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if arr == None or len(arr) == 0:\n        return -1\n    if k >= len(arr) or k < 0:\n        return -1\n    if k == 0:\n        return arr[0]\n    if k == len(arr) - 1:\n        return arr[-1]\n    l, r = 0, len(arr) - 1\n    while l < r:\n        mid = l + (r - l) // 2\n        if mid == k - 1:\n            return arr[mid]\n        elif mid > k - 1:\n            r = mid\n        else:\n            l = mid\n    return arr[l]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    #return arr[k-1]\n    #return arr[len(arr)-1 - k]\n    if k > len(arr):\n        return -1\n    for i in range(len(arr)):\n        if arr[i] == k:\n            return i+1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if len(arr) == 0:\n        return None\n    elif k <= 0 or k >= len(arr):\n        return None\n    else:\n        temp = arr[0]\n        for i in range(1, len(arr)):\n            if i == k - 1:\n                return temp\n            temp = arr[i]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    count = 0\n    for i in range(len(arr)):\n        if count == k:\n            return i + 1\n        count += 1\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # arr.sort()\n    # return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k >= len(arr):\n        return None\n    else:\n        if arr == sorted(arr):\n            return arr[k-1]\n        elif arr == sorted(arr, reverse=True):\n            return arr[k-1]\n        else:\n            if arr[(k-1)//2] > arr[-1]:\n                return find_Kth_element(arr[(k-1)//2:], k)\n            else:\n                return find_Kth_element(arr[:k//2], k)\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return word\n    return word[0].upper() + word[1:].lower()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    output_string = \"\"\n    if word == \"\":\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    for idx, val in enumerate(word):\n        word[idx] = val.capitalize()\n    return ''.join(word)\n    \n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].lower() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word[0].upper() + word[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    converted = ''\n    for i in range(len(word)):\n        if word[i] == '_':\n            continue\n        else:\n            converted += word[i].title()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    \n    import re\n    \n    s = re.sub('([a-z])([A-Z])','\\g<1> \\g<2>',word)\n    return s[0].lower() + s[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if not word:\n        return word\n    result = \"\"\n    for char in word:\n        if char!= \"_\":\n            result += char\n        else:\n            break\n    return result[0].upper() + result[1:]\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    camel_word = ''\n    for i in word.split('_'):\n        camel_word += i.title()\n    return camel_word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return word.title()\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = 0\n    graph = [] \n    n, m = map(int, input().split())\n    for _ in range(n):\n        graph.append(list(map(int, input().split())))\n    for i in range(n):\n        for j in range(m):\n            if graph[i][j] == 1:\n                graph[i][j] = 0\n    res = eulerian_num_rec(graph, n, m)\n    return res\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return (n * (n - 1)) // 2 + (m - 1) * (m - 2)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    print(n,m)\n    if n < 0 or m < 0 or n < m:\n        raise ValueError(\"Please enter n and m values which are positive\")\n    else:\n        if n == m:\n            return 1\n        else:\n            return 0\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # q = n - m\n    q = n - m\n    a = 0\n    if (n * (n - 1) - m * (m - 1)) % 2 == 0:\n        for i in range(q):\n            a += (n - i) * ((n - i) + 1) // 2\n    else:\n        a = n * m\n        for i in range(q):\n            a -= (n - i) * ((n - i) + 1) // 2\n    return a\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    euler_nums = [0]*n\n    # Initialize first edge with 1\n    euler_nums[0] = 1\n    # Initialize counts of vertices and edges\n    vertices = 1\n    edges = 1\n    # Initialize list of edges\n    edges_list = []\n    \n    while edges < m:\n        # Find all edges that are not connected to the previous vertex\n        edges_list = []\n        for i in range(n-1):\n            if euler_nums[i] == 1:\n                edges_list.append(i)\n        # Add next vertex to the list of all unvisited vertices\n        next_vertex = edges_list[0]\n        edges_list.pop(0)\n        # If the current node is not the last, add the next node to the list of all unvisited vertices\n        if next_vertex!= n-1:\n            edges_list.append(next_vertex+1)\n        # If the current node is the last, add it to the list of all unvisited vertices\n        else:\n            edges_list.append(0)\n        # If the current node is not the first, add the previous node to the list of all unvisited vertices\n        if next_vertex!= 0:\n            edges_list.append(next_vertex-1)\n        # If the current node is the first, add it to the list of all unvisited vertices\n        else:\n            edges_list.append(n-1)\n        # Set a new Eulerian number for the current vertex\n        euler_nums[next_vertex] = 0\n        # Add the new Eulerian number to the total number of Eulerian numbers\n        euler_nums[next_vertex] = euler_nums[next_vertex] + 1\n        # Add the new Eulerian number to the list of all Eulerian numbers\n        euler_nums[next_vertex] = euler_nums[next_vertex] + 1\n        # Increment the number of vertices\n        vertices = vertices + 1\n        # Increment the number of edges\n        edges = edges + 1\n    return euler_nums\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if (n!= 1 and m!= 1):\n        # If not the only number we have to handle, then we have to check if the sum of the numbers is a multiple of n or m. \n        # If yes, return True otherwise, return False. \n        if (n + m == n * m): \n            return True\n        else: \n            return False\n    else: \n        # If only 1 number then a number is Eulerian number if and only if it is the same number. \n        # Return True if true and False if not. \n        return True if n == m else False\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return m\n    \n    return eulerian_num(n-1, m) + eulerian_num(n-1, m-1)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = 1\n    for i in range(n):\n        res = res * (m - 1 - i)\n    return res\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n < 2:\n        return 1\n    if n == 2 and m == 0:\n        return 1\n    if n == 2 and m == 1:\n        return 1\n    if m == 1:\n        return eulerian_num(n - 1, 0) + eulerian_num(n - 1, 2)\n    if m == 0:\n        return eulerian_num(n - 2, 0) + eulerian_num(n - 2, 1)\n    if m == 2:\n        return eulerian_num(n - 1, 1) + eulerian_num(n - 1, 0)\n    if m == 3:\n        return eulerian_num(n - 2, 1) + eulerian_num(n - 2, 0)\n    else:\n        return eulerian_num(n - 2, 1) + eulerian_num(n - 1, 0) + eulerian_num(n - 2, 2) + eulerian_num(n - 1, 2)\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n == 0 and m == 0: \n        return 0\n    if n == 0 and m!= 0: \n        return 1\n    if n!= 0 and m == 0: \n        return 1\n    return (eulerian_num(n - 1, m) + eulerian_num(n, m - 1)) % 2 \n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    if len(input_list)==1:\n        return input_list\n    else:\n        return sort_sublists(input_list[0])+input_list[1:]\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for i in input_list:\n        i.sort()\n        output_list.append(i)\n    return output_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    result = []\n    for i in range(len(input_list)):\n        result.append(sorted(input_list[i]))\n    return result\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=lambda x: x[0])\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in input_list:\n        sublist.sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=len)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)-1):\n        for j in range(len(input_list[i])-1):\n            input_list[i][j], input_list[i+1][j] = input_list[i+1][j], input_list[i][j]\n    return input_list\n    \n    \ndef remove_duplicates(input_list):\n    '''\n    Write a function to remove duplicates from the given list of strings.\n    '''\n    for i in range(len(input_list) - 1):\n        for j in range(len(input_list)-1):\n            if input_list[j] == input_list[j + 1]:\n                input_list[j] = None\n    return input_list\n    \n    \ndef reverse_list(input_list):\n    '''\n    Write a function to reverse a given list.\n    '''\n    return input_list[::-1]\n    \n    \ndef find_third_max(input_list):\n    '''\n    Write a function to find the third maximum value in a given list.\n    '''\n    max1 = max(input_list)\n    max2 = max(input_list)\n    max3 = max(input_list)\n    for i in range(len(input_list)):\n        if input_list[i] == max1:\n            max2 = max3\n            max3 = max1\n            max1 = input_list[i]\n        elif input_list[i] == max2:\n            max3 = max1\n            max1 = max2\n            max2 = input_list[i]\n        elif input_list[i] == max3:\n            max1 = max2\n            max2 = max3\n            max3 = input_list[i]\n    return max3\n    \n    \ndef find_min_max_count(input_list, target_number):\n    '''\n    Write a function to find the minimum and maximum number of numbers that occur consecutively in a given list.\n    '''\n    count = 0\n    min_count = 0\n    max_count = 0\n    for i in range(len(input_list)):\n        if input_list[i] == target_number:\n            count += 1\n        else:\n            count = 0\n            if count > max_count:\n                max_count = count\n            if count > min_count:\n                min_count = count\n    return max_count, min_count\n    \n    \ndef find_min_max_count_optimized(input_list, target_number):\n    '''\n    Write a function to find the minimum and maximum number of numbers that occur consecutively in a given list.\n    '''\n    count = 0\n    min_count = 0\n    max_count = 0\n    for i in range(len(input_list)):\n        if input_list[i] == target_number:\n            count += 1\n        else:\n            count = 0\n            if count > max_count:\n                max_count = count\n            if count > min_count:\n                min_count = count\n    return max_count, min_count\n    \n    \ndef find_difference(input_list):\n    '''\n    Write a function to find the maximum difference between the highest and lowest number in a given list.\n    '''\n    max1 = max(input_list)\n    min1 = min(input_list)\n    return max1 - min1\n    \n    \ndef find_percentage(input_list):\n    '''\n    Write a function to find the percentage of numbers in a given list that are positive.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if input_list[i] > 0:\n            count += 1\n    return count/len(input_list)*100\n    \n    \ndef find_highest_score(input_list):\n    '''\n    Write a function to find the highest score in a list of scores.\n    '''\n    max1 = input_list[0]\n    for i in range(1, len(input_list)):\n        if input_list[i] > max1:\n            max1 = input_list[i]\n    return max1\n    \n    \ndef find_highest_score_optimized(input_list):\n    '''\n    Write a function to find the highest score in a list of scores.\n    '''\n    max1 = input_list[0]\n    for i in range(1, len(input_list)):\n        if input_list[i] > max1:\n            max1 = input_list[i]\n    return max1\n    \n    \ndef find_second_highest_score(input_list):\n    '''\n    Write a function to find the second highest score in a list of scores.\n    '''\n    max1 = input_list[0]\n    max2 = input_list[0]\n    for i in range(1, len(input_list)):\n        if input_list[i] > max1:\n            max1 = input_list[i]\n        elif input_list[i] > max2:\n            max2 = input_list[i]\n    if max1 == max2:\n        return max2\n    return max2, max1\n    \n    \ndef find_second_highest_score_optimized(input_list):\n    '''\n    Write a function to find the second highest score in a list of scores.\n    '''\n    max1 = input_list[0]\n    max2 = input_list[0]\n    for i in range(1, len(input_list)):\n        if input_list[i] > max1:\n            max2 = max1\n            max1 = input_list[i]\n        elif input_list[i] > max2:\n            max2 = input_list[i]\n    if max1 == max2:\n        return max2\n    return max2, max1\n    \n    \ndef find_number_with_two_adjacent_digits(input_list):\n    '''\n    Write a function to find the number that has exactly two adjacent digits in the given list.\n    '''\n    num = 0\n    for i in range(len(input_list)):\n        if i < len(input_list) - 2:\n            if input_list[i] == input_list[i + 1]:\n                num = input_list[i]\n    return num\n    \n    \ndef find_number_with_two_adjacent_digits_optimized(input_list):\n    '''\n    Write a function to find the number that has exactly two adjacent digits in the given list.\n    '''\n    num = 0\n    for i in range(len(input_list)):\n        if i < len(input_list) - 2:\n            if input_list[i] == input_list[i + 1] and input_list[i + 2] == input_list[i]:\n                num = input_list[i]\n    return num\n    \n    \ndef find_largest_two_elements(input_list):\n    '''\n    Write a function to find the two largest elements in a given list.\n    '''\n    max1 = input_list[0]\n    max2 = input_list[0]\n    for i in range(1, len(input_list)):\n        if input_list[i] > max1:\n            max2 = max1\n            max1 = input_list[i]\n        elif input_list[i] > max2:\n            max2 = input_list[i]\n    return max1, max2\n    \n    \ndef find_largest_two_elements_optimized(input_list):\n    '''\n    Write a function to find the two largest elements in a given list.\n    '''\n    max1 = input_list[0]\n    max2 = input_list[0]\n    for i in range(1, len(input_list)):\n        if input_list[i] > max1:\n            max2 = max1\n            max1 = input_list[i]\n        elif input_list[i] > max2:\n            max2 = input_list[i]\n    return max1, max2\n    \n    \ndef find_largest_numbers(input_list):\n    '''\n    Write a function to find the largest number in a given list of numbers.\n    ''"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    output_list = []\n    for i in range(len(input_list)):\n        output_list.append(sorted(input_list[i]))\n    return output_list\n    #return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count+=1\n    return count\n    \n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for elem in lst:\n        if elem:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x])\n    \n    # or\n    # return sum(1 for x in lst if x)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    lst_count = 0\n    for i in lst:\n        if i:\n            lst_count += 1\n    return lst_count\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + [test_tup]\n    return test_list\n    "
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(0, len(test_list)):\n        test_list[i] = (test_list[i], test_tup[i])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    print(test_list)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        if i == len(test_tup):\n            test_list.append(test_tup)\n            return test_list\n        if test_list[i] == test_tup[i]:\n            continue\n        else:\n            test_list.append(test_tup)\n            return test_list\n        \n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_tup)):\n        test_list.append(test_tup[i])\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.extend(test_tup)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_tup.append(test_list)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    while len(num1)!= 0 and len(num2)!= 0 and len(num3)!= 0:\n        if num1[0] > num2[0] and num1[0] > num3[0]:\n            yield num1[0]\n            num1.pop(0)\n        elif num2[0] > num1[0] and num2[0] > num3[0]:\n            yield num2[0]\n            num2.pop(0)\n        else:\n            yield num3[0]\n            num3.pop(0)\n    while len(num1)!= 0:\n        yield num1.pop(0)\n    while len(num2)!= 0:\n        yield num2.pop(0)\n    while len(num3)!= 0:\n        yield num3.pop(0)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1.extend(num2)\n    num1.extend(num3)\n    num1.sort()\n    return num1\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    res=[]\n    while num1 or num2 or num3:\n        if num1:\n            res.append(num1.pop())\n        if num2:\n            res.append(num2.pop())\n        if num3:\n            res.append(num3.pop())\n    return res\nprint(merge_sorted_list([5,7,9,11,13], [-2,0,3,7,8,9], [1,2,6,10,12]))\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge_list = []\n    while len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n        if num1[0] < num2[0]:\n            merge_list.append(num1.pop(0))\n        else:\n            merge_list.append(num2.pop(0))\n    while len(num1) > 0:\n        merge_list.append(num1.pop(0))\n    while len(num2) > 0:\n        merge_list.append(num2.pop(0))\n    while len(num3) > 0:\n        merge_list.append(num3.pop(0))\n    return merge_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    new_list=[]\n    while len(num1)!=0 and len(num2)!=0 and len(num3)!=0:\n        if num1[0]<=num2[0]:\n            new_list.append(num1.pop(0))\n        else:\n            new_list.append(num2.pop(0))\n    while len(num1)>0:\n        new_list.append(num1.pop(0))\n    while len(num2)>0:\n        new_list.append(num2.pop(0))\n    while len(num3)>0:\n        new_list.append(num3.pop(0))\n    return new_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while(len(num1)!= 0 or len(num2)!= 0 or len(num3)!= 0):\n        if len(num1)!= 0:\n            merged_list.append(num1[0])\n            num1.remove(num1[0])\n        if len(num2)!= 0:\n            merged_list.append(num2[0])\n            num2.remove(num2[0])\n        if len(num3)!= 0:\n            merged_list.append(num3[0])\n            num3.remove(num3[0])\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    num1_index = 0\n    num2_index = 0\n    num3_index = 0\n    merged_list = []\n    while num1_index < len(num1) and num2_index < len(num2) and num3_index < len(num3):\n        if num1[num1_index] < num2[num2_index] and num1[num1_index] < num3[num3_index]:\n            merged_list.append(num1[num1_index])\n            num1_index += 1\n        elif num2[num2_index] < num1[num1_index] and num2[num2_index] < num3[num3_index]:\n            merged_list.append(num2[num2_index])\n            num2_index += 1\n        else:\n            merged_list.append(num3[num3_index])\n            num3_index += 1\n    while num1_index < len(num1):\n        merged_list.append(num1[num1_index])\n        num1_index += 1\n    while num2_index < len(num2):\n        merged_list.append(num2[num2_index])\n        num2_index += 1\n    while num3_index < len(num3):\n        merged_list.append(num3[num3_index])\n        num3_index += 1\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    # TODO: Write your merge_sorted_list function here.\n    # Your merge_sorted_list function must take three parameters, and the first two are sorted lists. \n    # The third one is a new sorted list.\n    # Your function should return a single sorted list.\n    # Your function should be recursive.\n    # A few examples:\n    # l = merge_sorted_list([1,2,3], [4,5,6], [])\n    # print(l) => [1,2,3,4,5,6]\n    # l = merge_sorted_list([1,2,3], [4,5,6,], [7,8,9])\n    # print(l) => [1,2,3,4,5,6,7,8,9]\n    \n    if len(num1) == 0:\n        return num2\n    elif len(num2) == 0:\n        return num1\n    elif len(num3) == 0:\n        return num1+num2\n    \n    if num1[0] < num2[0]:\n        num3.insert(0,num1.pop(0))\n    else:\n        num3.insert(0,num2.pop(0))\n    \n    return merge_sorted_list(num1,num2,num3)\n    \ndef heap_sort(arr):\n    '''\n    Write a function to sort an array of integers using heap sort.\n    '''\n    # TODO: Write your heap_sort function here.\n    # Your heap_sort function must take a single parameter, which is a list of integers.\n    # Your function should return a single sorted list.\n    # Your function should be iterative.\n    # You must use the following heap operators to complete the task:\n    # min_heapify - recursively swaps the element in a heap to its correct position.\n    # max_heapify - recursively swaps the element in a heap to its correct position.\n    # heappop - pop the smallest element from the heap.\n    # heappush - push an element onto the heap.\n    # See the following link for an example of the time-complexity of heap sort.\n    # https://www.geeksforgeeks.org/time-complexity-of-heap-sort/\n    \n    # Define a function max_heapify which takes in a list as an argument.\n    # The function should call the min_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    # The function should return the list.\n    # Your max_heapify function should take in a single parameter, a list.\n    # The max_heapify function should call the min_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    # The function should return the list.\n    # The max_heapify function should call the min_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    \n    # Define a function max_heapify which takes in a list as an argument.\n    # The function should call the min_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    # The function should return the list.\n    # Your max_heapify function should take in a single parameter, a list.\n    # The max_heapify function should call the min_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    # The function should return the list.\n    # The max_heapify function should call the min_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    \n    # Define a function heapify which takes in a list as an argument.\n    # The function should call the min_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    # The function should return the list.\n    # Your heapify function should take in a single parameter, a list.\n    # Your heapify function should call the min_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    # The function should return the list.\n    # The heapify function should call the min_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    \n    # Define a function get_max_heap_node which takes in a list as an argument.\n    # The function should return the largest element in the heap.\n    # Your get_max_heap_node function should take in a single parameter, a list.\n    # Your get_max_heap_node function should call the max_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    # The function should return the largest element in the heap.\n    # The get_max_heap_node function should call the min_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    \n    # Define a function get_max_heap_element which takes in a list as an argument.\n    # The function should return the largest element in the heap.\n    # Your get_max_heap_element function should call the max_heapify function to swap the element in the middle of the list with the element in the last index\n    # of the list and then call the max_heapify function to recursively swap the element in the middle of the list with the element in the first index of the list.\n    # In other words, the function should call itself recursively until the last index.\n    # The function should return the largest element in the heap.\n    # The get"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while len(num1)!= 0 and len(num2)!= 0 and len(num3)!= 0:\n        if num1[0] < num2[0]:\n            merged_list.append(num1[0])\n            num1.pop(0)\n        else:\n            merged_list.append(num2[0])\n            num2.pop(0)\n    while len(num1)!= 0:\n        merged_list.append(num1[0])\n        num1.pop(0)\n    while len(num2)!= 0:\n        merged_list.append(num2[0])\n        num2.pop(0)\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #import heapq\n    #merge_sort(num1,num2,num3)\n    \n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return sum(int(x)%2 for x in bin(n)[2:])\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    s = s[::-1]\n    res = 0\n    for i in range(n):\n        for j in range(len(s)):\n            if (s[j] == '1'):\n                s = s[1:] + s[:1]\n            else:\n                s = s[1:]\n    \n    for i in range(len(s)):\n        if (s[i] == '1'):\n            res += 1\n    return res\n    \ndef test_odd_Equivalent():\n    print('Testing odd_Equivalent')\n    if odd_Equivalent('10100',3)==7:\n        print('  Passed')\n    else:\n        print('  Failed')\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    string = \"\"\n    for i in range(n):\n        s = s[1:len(s)] + s[0]\n    for i in s:\n        if i%2!=0:\n            string = string+i\n    print(string)\n    count = 0\n    for i in range(0,len(string)):\n        if(string[i]=='0'):\n            count = count + 1\n    print(count)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    \n    if n>=1:\n        odd_Equivalent(n-1,n)\n    if s[n] == \"1\":\n        print(n)\n    return\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    result = 0\n    for i in range(n):\n        s = find_odd_string(s)\n        if s == None:\n            break\n        result += 1\n    return result\n    \ndef find_odd_string(s):\n    i = len(s) - 1\n    while i >= 0:\n        if s[i] == '1':\n            return s[i:]\n        i -= 1\n    return None\n    \nif __name__ == \"__main__\":\n    print(odd_Equivalent(\"00110\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"1011\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"0111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"0\", 2))\n    # 1\n    \n    print(odd_Equivalent(\"00\", 2))\n    # 1\n    \n    print(odd_Equivalent(\"0011\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"11\", 2))\n    # 1\n    \n    print(odd_Equivalent(\"1101\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"111\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"101100\", 2))\n    # 4\n    \n    print(odd_Equivalent(\"101100\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"101100\", 4))\n    # 2\n    \n    print(odd_Equivalent(\"101100\", 5))\n    # 1\n    \n    print(odd_Equivalent(\"101100\", 6))\n    # 1\n    \n    print(odd_Equivalent(\"101100\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"101100\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"101100\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"101100\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"11111111111111\", 2))\n    # 14\n    \n    print(odd_Equivalent(\"00110\", 10))\n    # 2\n    \n    print(odd_Equivalent(\"00001111111111\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"0000110000000000\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00011111111111\", 2))\n    # 4\n    \n    print(odd_Equivalent(\"01111111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 4))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00110111111111\", 6))\n    # 2\n    \n    print(odd_Equivalent(\"00110111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00110111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00110111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00110111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"011011100000001\", 2))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 3))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 4))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 6))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00000111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"00001111111111\", 2))\n    # 2\n    \n    print(odd_Equivalent(\"00011111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00011111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00011111111111\", 4))\n    # 3\n    \n    print(odd_Equivalent(\"00011111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00011111111111\", 6))\n    # 2\n    \n    print(odd_Equivalent(\"00011111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00011111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00011111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00011111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"0110111111111\", 2))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 4))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 6))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00000111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"00011111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 4))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00110111111111\", 6))\n    # 2\n    \n    print(odd_Equivalent(\"00110111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00110111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00110111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00110111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"01111111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 4))\n    # 3\n    \n    print(odd_Equivalent(\"00000111111111\", 5))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 6))\n    # 2\n    \n    print(odd_Equivalent(\"00000111111111\", 7))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 8))\n    # 1\n    \n    print(odd_Equivalent(\"00000111111111\", 9))\n    # 0\n    \n    print(odd_Equivalent(\"00000111111111\", 10))\n    # 0\n    \n    print(odd_Equivalent(\"0110111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 2))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 3))\n    # 3\n    \n    print(odd_Equivalent(\"00110111111111\", 4)"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s + '0'\n    ans = 0\n    l = len(s)\n    for i in range(n):\n        s = s[1:]+s[0]\n        if s.count('1')%2!= 0:\n            ans += 1\n    return ans\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s1=s\n    n1=n\n    if n==0:\n        return 1\n    if n==1:\n        return len(s)\n    if n<0:\n        return 0\n    if n>=0 and s=='':\n        return 0\n    count=0\n    for i in range(n):\n        for j in range(len(s1)):\n            if s1[j]=='1':\n                count+=1\n        s1=s1[1:]+'0'\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    count = 0\n    for i in range(n):\n        for j in range(len(s)):\n            if int(s[j]) % 2!= 0:\n                count += 1\n            s = s[1:] + s[0]\n    return count \n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s=s[::-1]\n    count=0\n    while s:\n        if int(s)%2:\n            count+=1\n        s=s[1:]\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #code here\n    \n    return odd_equivalent_helper(s,n,0)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    list_of_lists = nestedlist\n    len_of_nested_lists = len(nestedlist)\n    common_elements = []\n    for item in list_of_lists:\n        if isinstance(item, list):\n            common_elements.extend(common_in_nested_lists(item))\n        else:\n            common_elements.append(item)\n    common_elements = set(common_elements)\n    return common_elements\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        if len(i) == 0:\n            result.append(i)\n        else:\n            if len(i) == 1:\n                result.append(i[0])\n            else:\n                result = list(set(i[0]) & set(i[1]) & set(result))\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    nested_common_element = []\n    for nested_list in nestedlist:\n        if len(set(nested_list)) == len(nested_list):\n            nested_common_element.append(set(nested_list))\n    return nested_common_element\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list=[]\n    for x in nestedlist:\n        if type(x) is list:\n            for y in common_in_nested_lists(x):\n                common_list.append(y)\n        else:\n            if x not in common_list:\n                common_list.append(x)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    uniq = []\n    for i in nestedlist:\n        for j in i:\n            if j not in uniq:\n                uniq.append(j)\n    return uniq\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    return list(set(\n        set(elem for sublist in nestedlist for elem in sublist)\n        for sublist in nestedlist\n    ))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result_list=[]\n    nestedlist_list=[]\n    for i in nestedlist:\n        nestedlist_list.append(i)\n    for j in nestedlist_list:\n        for k in j:\n            if k not in result_list:\n                result_list.append(k)\n    return result_list"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    d = {}\n    def findCommon(nestedlist):\n        for i in nestedlist:\n            if type(i) == list:\n                findCommon(i)\n            else:\n                if i not in d:\n                    d[i] = 1\n                else:\n                    d[i] += 1\n        return d\n    return findCommon(nestedlist)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    for element in nestedlist:\n        if type(element) == list:\n            return common_in_nested_lists(element)\n        else:\n            return element\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    l1 = nestedlist[0]\n    l2 = nestedlist[1]\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        val = int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if int(text) == int(text):\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef check_pos_int(text):\n    '''\n    Write a function to check if a string represents a positive integer or not.\n    '''\n    try:\n        if int(text) > 0:\n            return True\n        else:\n            return False\n    except:\n        return False\n    \ndef check_pos_int(text):\n    '''\n    Write a function to check if a string represents a positive integer or not.\n    '''\n    try:\n        if int(text) > 0:\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    return text.isdigit()\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        if int(text)==text:\n            return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    #return all(not list1 for list1 in list1)\n    return all(not value for values in list1 for value in values.values())\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for l in list1:\n        if l:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1)==0:\n        return True\n    else:\n        for i in range(len(list1)):\n            if len(list1[i])>0:\n                return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        return True\n    return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if list1 is None:\n        return False\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(len(x)==0 for x in list1)\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    count = 0\n    for i in list1:\n        if i:\n            count += 1\n    if count == len(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = tuple(nums)\n    return reduce(lambda x, y: x * 10 + y, nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # first convert it to a list\n    lis = list(nums)\n    # then convert it to a string\n    string = ''.join(lis)\n    # finally convert it to an int\n    int_num = int(string)\n    return int_num\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # n = len(nums)\n    # return int(sum(nums) / n)\n    return sum(nums)\n    \nprint(tuple_to_int((1, 2, 3, 4)))"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return sum(nums)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in nums]))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(\"\".join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    pass\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    nums = list(nums)\n    num_str = ''\n    for n in nums:\n        num_str += str(n)\n    return int(num_str)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num_dict = dict(zip(nums, range(len(nums))))\n    \n    return sum([num_dict[i] * i for i in nums])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    tuple_sum = 0\n    for i in range(len(nums)):\n        tuple_sum += nums[i]\n    return tuple_sum\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    test_list_float = []\n    for i in test_list:\n        test_list_float.append([float(j) for j in i])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if len(test_list) == 0:\n        return []\n    return [[float(x)] for x in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return_list = []\n    for i in range(0,len(test_list)):\n        test_list[i] = list_to_float(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for x in range(len(test_list)):\n        for y in range(len(test_list[x])):\n            try:\n                test_list[x][y] = float(test_list[x][y])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return list(map(float,test_list))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    convert_list = []\n    for item in test_list:\n        try:\n            float_item = float(item)\n        except:\n            pass\n        else:\n            convert_list.append(float_item)\n    return convert_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i][0]) == int or type(test_list[i][0]) == float:\n            test_list[i] = [float(x) for x in test_list[i]]\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [[float(i) for i in l] for l in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    new_list = []\n    for element in test_list:\n        if isinstance(element, (int, float, complex)):\n            new_list.append(float(element))\n        else:\n            new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n    \ndef is_empty(string):\n    '''\n    Write a function to check if a string is empty or not.\n    '''\n    if string == \"\":\n        return True\n    else:\n        return False\n        \ndef split_string_on_comma(string):\n    '''\n    Write a function to split a string on comma and return the list of strings.\n    '''\n    return string.split(',')\n    \ndef remove_duplicate_items(list_of_items):\n    '''\n    Write a function to remove duplicates items from a given list of items and return the new list.\n    '''\n    if is_empty(list_of_items):\n        return False\n    else:\n        return set(list_of_items)\n        \ndef remove_first_occurence(l, item):\n    '''\n    Write a function to remove the first occurrence of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        for index, i in enumerate(l):\n            if item == i:\n                return l.pop(index)\n                \ndef remove_all_occurrences(l, item):\n    '''\n    Write a function to remove all the occurrences of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        while item in l:\n            l.remove(item)\n        return l\n        \ndef first_occurrence(l, item):\n    '''\n    Write a function to find the first occurrence of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        for index, i in enumerate(l):\n            if item == i:\n                return index\n                \ndef last_occurrence(l, item):\n    '''\n    Write a function to find the last occurrence of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        for index in range(len(l) - 1, -1, -1):\n            if item == l[index]:\n                return index\n                \ndef index_occurrence(l, item):\n    '''\n    Write a function to find the index of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        for index, i in enumerate(l):\n            if item == i:\n                return index\n                \ndef count(l, item):\n    '''\n    Write a function to count the number of occurrences of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return 0\n    else:\n        return l.count(item)\n        \ndef max(l):\n    '''\n    Write a function to find the max of a list of numbers.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        max_value = l[0]\n        for i in l:\n            if i > max_value:\n                max_value = i\n        return max_value\n        \ndef min(l):\n    '''\n    Write a function to find the min of a list of numbers.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        min_value = l[0]\n        for i in l:\n            if i < min_value:\n                min_value = i\n        return min_value\n        \ndef sum(l):\n    '''\n    Write a function to find the sum of a list of numbers.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        total = 0\n        for i in l:\n            total += i\n        return total\n            \ndef find_index(l, item):\n    '''\n    Write a function to find the index of an item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        for index, i in enumerate(l):\n            if item == i:\n                return index\n                \ndef length(l):\n    '''\n    Write a function to find the length of a list.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        return len(l)\n        \ndef last_element(l):\n    '''\n    Write a function to find the last element of a list.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        return l[-1]\n        \ndef length_of_last_item(l):\n    '''\n    Write a function to find the length of the last item in a list.\n    '''\n    if is_empty(l) or l == None:\n        return False\n    else:\n        return len(l[-1])\n        \ndef reverse_list(l):\n    '''\n    Write a function to reverse a list.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        for i in range(len(l)):\n            l.append(l.pop(0))\n        return l\n        \ndef remove_list(l, item):\n    '''\n    Write a function to remove the item from a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        while item in l:\n            l.remove(item)\n        return l\n        \ndef rotate_list(l, k):\n    '''\n    Write a function to rotate a list by k positions.\n    '''\n    if is_empty(l) or k == None:\n        return False\n    else:\n        k = k % len(l)\n        l = l[k:] + l[:k]\n        return l\n        \ndef reverse_list_recursion(l):\n    '''\n    Write a function to reverse a list using recursion.\n    '''\n    if is_empty(l):\n        return False\n    else:\n        return l[::-1]\n        \ndef swap_list(l, i, j):\n    '''\n    Write a function to swap two elements of a list.\n    '''\n    if is_empty(l) or i == None or j == None:\n        return False\n    else:\n        l[i], l[j] = l[j], l[i]\n        return l\n        \ndef rotate_list_recursion(l, k):\n    '''\n    Write a function to rotate a list by k positions using recursion.\n    '''\n    if is_empty(l) or k == None:\n        return False\n    else:\n        k = k % len(l)\n        l = l[k:] + l[:k]\n        return l\n        \ndef count_occurrences(l, item):\n    '''\n    Write a function to count the number of times an item occurs in a list.\n    '''\n    if is_empty(l) or item not in l:\n        return False\n    else:\n        return l.count(item)\n        \ndef reverse_a_string(string):\n    '''\n    Write a function to reverse a string.\n    '''\n    if is_empty(string):\n        return False\n    else:\n        return string[::-1]\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    string_list = list(string.split(\" \"))\n    return string_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    s = string.split(\" \")\n    return s \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n    \n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l = []\n    for word in string.split(\" \"):\n        l.append(word)\n    return l\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    l=[]\n    l.append(string)\n    return l\n    \ndef list_to_string(list):\n    '''\n    Write a function to convert a list to a string, each element of the list will be seperated by a space.\n    '''\n    \n    string=''\n    for i in list:\n        string=string+i\n        string=string+\" \"\n    return string\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return None\n    if n == 1:\n        return arr[0]\n    key = arr[n//2]\n    if key == arr[n//2 - 1]:\n        return key\n    if key == arr[n//2 + 1]:\n        return key\n    if key == arr[n//2]:\n        return key\n    # left and right arrays\n    left = [x for x in arr if x < key]\n    right = [x for x in arr if x > key]\n    if len(left) <= len(right):\n        return search(left)\n    else:\n        return search(right)\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start<=end:\n        mid = (start+end)//2\n        if arr[mid] == arr[mid+1]:\n            start = mid+2\n        else:\n            end = mid-1\n    return arr[start]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    check = False\n    i = 0\n    j = len(arr) - 1\n    while i <= j:\n        mid = (i+j)//2\n        if check and arr[mid] == mid:\n            return mid\n        if check and arr[mid]!= mid:\n            j = mid - 1\n        else:\n            i = mid + 1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    if arr is None or len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    if arr[0]!= arr[1]:\n        return arr[0]\n    return search(arr[1:])\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(0, len(arr)-1):\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    '''\n    print(\"enter the numbers in the array\")\n    arr = [int(x) for x in input().split()]\n    flag = 0\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            if arr[i] == arr[j] and j!= i:\n                flag = 1\n                break\n        if flag == 0:\n            print(arr[i])\n            break\n    '''\n    n = len(arr)\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = left + (right-left)//2\n        if mid == arr[mid]:\n            left = mid+1\n        elif mid > arr[mid]:\n            left = mid+1\n        elif mid < arr[mid]:\n            right = mid-1\n    print(arr[left])\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    seen = {}\n    for i in range(len(arr)):\n        if arr[i] in seen:\n            seen[arr[i]] += 1\n        else:\n            seen[arr[i]] = 1\n    for i in seen:\n        if seen[i] == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    # initializing the pointers\n    n = len(arr)\n    # initialize the hash table\n    hash_table = {}\n    # initializing the result\n    res = -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        middle = left + (right - left) // 2\n        if arr[middle] == arr[middle+1]:\n            right = middle\n        elif arr[middle] == arr[middle-1]:\n            left = middle + 1\n        else:\n            return arr[middle]\n    return arr[left]\n    \nif __name__ == '__main__':\n    arr = list(map(int, input().split()))\n    print(search(arr))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n = len(arr)\n    if n == 0:\n        return -1\n    if n == 1:\n        return arr[0]\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    def helper(list1, i):\n        if i >= len(list1):\n            return 0\n        \n        return max(helper(list1, i+2), (list1[i][0] * list1[i][1]) * list1[i+1][1])\n    \n    return helper(list1, 0)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    #setting the variable and initializing the list\n    max_val = 0\n    for i in range(0,len(list1)-1,2):\n        #finding the maximum between two numbers\n        max_val = max(abs(list1[i]),abs(list1[i+1]))\n        \n    return max_val\n    \n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product=0\n    for i in range(0,len(list1),2):\n        if list1[i][1]*list1[i+1][1] > max_product:\n            max_product=list1[i][1]*list1[i+1][1]\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort()\n    max_product = 0\n    for i in range(len(list1)):\n        if i == len(list1) - 1:\n            max_product = max(max_product, list1[i][0] * list1[i][1])\n            break\n        else:\n            max_product = max(max_product, list1[i][0] * list1[i+1][1])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    maximum = None\n    for i in range(0, len(list1)-1, 2):\n        x = list1[i]\n        y = list1[i+1]\n        if maximum is None or x*y > maximum:\n            maximum = x*y\n    return maximum\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_num = 0\n    for i in range(len(list1)):\n        max_num = max(max_num,list1[i][0]*list1[i][1])\n    print(max_num)\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_product = 0\n    for i in list1:\n        x,y = i\n        if max_product < x * y:\n            max_product = x * y\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    list1.sort()\n    max_val = list1[0][1]*list1[0][0]\n    for i in range(0,len(list1)):\n        if list1[i][1]*list1[i][0]>max_val:\n            max_val = list1[i][1]*list1[i][0]\n    return max_val\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tuple_list = []\n    for i in range(len(list1)):\n        if i == 0:\n            tuple_list.append(list1[i])\n            continue\n        if i % 2 == 0:\n            tuple_list.append(list1[i])\n        else:\n            tuple_list.append(list1[i])\n    nums1 = tuple_list[0::2]\n    nums2 = tuple_list[1::2]\n    max_val = 0\n    if len(nums1) > 0:\n        for i in range(len(nums1)):\n            max_val = max(max_val, nums1[i] * nums2[i])\n    return max_val\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 1:\n        return None\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_sum = 0\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    \n    def factors(n):\n        return list(set(sum(range(1,n+1),i) for i in range(1,n+1) if n%i == 0))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # let amicable_sum equal 0.\n    amicable_sum = 0\n    # loop through numbers from 1 to the limit.\n    for i in range(1, limit):\n        # we need to make sure this number is an amicable pair.\n        sum_of_pair = 0\n        for j in range(1, i):\n            if i % j == 0 and i!= j:\n                sum_of_pair += j\n        # if sum of pair is equal to the sum of the other number.\n        if sum_of_pair == i:\n            amicable_sum += i\n    return amicable_sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # first = set()\n    # second = set()\n    #\n    # for i in range(1, limit):\n    #     for j in range(i, limit):\n    #         if i!= j and i + j == j + i:\n    #             first.add(i)\n    #             second.add(j)\n    #\n    # # print(len(first))\n    # return sum(first) + sum(second)\n    return sum(filter(lambda x: x < limit and sum(divisors(x)) == x, range(1, limit)))\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = [i for i in range(1, limit + 1)]\n    amicable_numbers = []\n    for i in range(len(numbers)):\n        if i == 0:\n            continue\n        for j in range(i + 1, len(numbers)):\n            if numbers[i] == numbers[j] and i!= j:\n                amicable_numbers.append(numbers[i])\n                break\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_amicable = 0\n    for i in range(2, limit):\n        sum_j = 0\n        j = i\n        while j < limit:\n            if i == j:\n                j += 1\n            elif j % i == 0:\n                sum_j += i\n                j += 1\n            else:\n                j += 1\n        if sum_j == i and i!= j:\n            sum_amicable += i\n            sum_amicable += j\n    return sum_amicable\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    total = 0\n    for i in range(2, limit+1):\n        # calculate the sum of the divisors\n        d = sum_divisors(i)\n        # check if the sum of divisors is equal to i, if it is then the amicable numbers\n        if d == i and is_amicable(i, d):\n            total += i\n    return total\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers_list = []\n    for num in range(1, limit):\n        sum = 0\n        for i in range(1, num):\n            if num == i:\n                continue\n            if num%i == 0:\n                if i%num == 0:\n                    sum = sum + num + i\n                    amicable_numbers_list.append(num)\n                    amicable_numbers_list.append(i)\n        if sum == 0:\n            amicable_numbers_list.append(num)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n    for number in range(1,limit):\n        divisors_sum = sum([divisor for divisor in range(1,number)])\n        divisor_sum_other = sum([divisor for divisor in range(1,number+1)])\n        if (divisor_sum_other - divisors_sum == number) and number not in amicable_numbers:\n            amicable_numbers.append(number)\n    return sum(amicable_numbers)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all the amicable numbers from 1 to limit\n    amicable_numbers_list = list(range(1, limit))\n    sum_amicable_numbers_list = list()\n    \n    for number in amicable_numbers_list:\n        # skip the number if it is not an amicable number\n        if number not in sum_amicable_numbers_list:\n            # if the number was found to be an amicable number, continue\n            # until the number is found to be a sum of two other numbers\n            while number not in sum_amicable_numbers_list:\n                sum_amicable_numbers_list.append(number)\n                \n                # check the sum of the two numbers to see if they are amicable\n                check_sum = sum(sum_amicable_numbers_list)\n                if check_sum == number:\n                    sum_amicable_numbers_list.remove(number)\n                    break\n                elif check_sum == number:\n                    sum_amicable_numbers_list.remove(number)\n                    break\n    \n    return sum_amicable_numbers_list\n    \ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all the amicable numbers from 1 to limit\n    amicable_numbers_list = list(range(1, limit))\n    sum_amicable_numbers_list = list()\n    \n    for number in amicable_numbers_list:\n        # skip the number if it is not an amicable number\n        if number not in sum_amicable_numbers_list:\n            # if the number was found to be an amicable number, continue\n            # until the number is found to be a sum of two other numbers\n            while number not in sum_amicable_numbers_list:\n                sum_amicable_numbers_list.append(number)\n                \n                # check the sum of the two numbers to see if they are amicable\n                check_sum = sum(sum_amicable_numbers_list)\n                if check_sum == number:\n                    sum_amicable_numbers_list.remove(number)\n                    break\n                elif check_sum == number:\n                    sum_amicable_numbers_list.remove(number)\n                    break\n    \n    return sum_amicable_numbers_list\n    \ndef amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    # create a list of all the amicable numbers from 1 to limit\n    amicable_numbers_list = list(range(1, limit))\n    sum_amicable_numbers_list = list()\n    \n    for number in amicable_numbers_list:\n        # skip the number if it is not an amicable number\n        if number not in sum_amicable_numbers_list:\n            # if the number was found to be an amicable number, continue\n            # until the number is found to be a sum of two other numbers\n            while number not in sum_amicable_numbers_list:\n                sum_amicable_numbers_list.append(number)\n                \n                # check the sum of the two numbers to see if they are amicable\n                check_sum = sum(sum_amicable_numbers_list)\n                if check_sum == number:\n                    sum_amicable_numbers_list.remove(number)\n                    break\n                elif check_sum == number:\n                    sum_amicable_numbers_list.remove(number)\n                    break\n    \n    return sum_amicable_numbers_list\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle=complex(a,b)\n    ang=cmath.phase(angle)\n    ang_degree=int(ang*180/3.1415)\n    if ang_degree<0:\n        return ang_degree*(-1)\n    return ang_degree\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    theta=cmath.phase(a+b*1j)\n    print(theta)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.phase(a)\n    # if a.imag == 0:\n    #     return cmath.phase(a)\n    # else:\n    return abs(cmath.phase(a))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    # complex A,B are the real part and imaginary part of the complex numbers.\n    return (a+b)%(2*(math.pi))\nprint(angle_complex(1,4))\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    arctan = a.imag/a.real\n    arcsin = a.imag/a.real\n    return arctan,arcsin\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    num=a+b*1j\n    s=num.real**2+num.imaginary**2\n    m=abs(num)\n    c=s/m\n    theta=cmath.acos(c)\n    return theta\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    c = a.real*b.real - a.imag*b.imag\n    #print (c)\n    return cmath.phase(c)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + bj)\n    \ndef angle_real(a):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    return cmath.phase(a)\n    \ndef angle_in_radians(a):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a)\n    \ndef angle_in_degrees(a):\n    '''\n    Write a function to get the angle of a real number.\n    '''\n    return cmath.phase(a) * 180/3.14159\n    \ndef is_between_0_and_2pi(a):\n    '''\n    Write a function to test whether a number is between 0 and 2pi.\n    '''\n    if a > 2*3.14159:\n        return False\n    else:\n        return True\n    \ndef is_between_0_and_2pi_in_degrees(a):\n    '''\n    Write a function to test whether a number is between 0 and 2pi in degrees.\n    '''\n    if a > 360:\n        return False\n    else:\n        return True\n    \ndef is_between_0_and_2pi_in_radians(a):\n    '''\n    Write a function to test whether a number is between 0 and 2pi in radians.\n    '''\n    return a < 2*3.14159\n    \ndef sin_2pi_radians(a):\n    '''\n    Write a function to calculate sin(2pi) in radians.\n    '''\n    return cmath.sin(2*3.14159 + a)\n    \ndef sin_2pi_degrees(a):\n    '''\n    Write a function to calculate sin(2pi) in degrees.\n    '''\n    return cmath.sin(2*3.14159 + a) * 180/3.14159\n    \ndef cos_2pi_radians(a):\n    '''\n    Write a function to calculate cos(2pi) in radians.\n    '''\n    return cmath.cos(2*3.14159 + a)\n    \ndef cos_2pi_degrees(a):\n    '''\n    Write a function to calculate cos(2pi) in degrees.\n    '''\n    return cmath.cos(2*3.14159 + a) * 180/3.14159\n    \ndef tan_2pi_radians(a):\n    '''\n    Write a function to calculate tan(2pi) in radians.\n    '''\n    return cmath.tan(2*3.14159 + a)\n    \ndef tan_2pi_degrees(a):\n    '''\n    Write a function to calculate tan(2pi) in degrees.\n    '''\n    return cmath.tan(2*3.14159 + a) * 180/3.14159\n    \ndef sinh_2pi_radians(a):\n    '''\n    Write a function to calculate sinh(2pi) in radians.\n    '''\n    return cmath.sinh(2*3.14159 + a)\n    \ndef sinh_2pi_degrees(a):\n    '''\n    Write a function to calculate sinh(2pi) in degrees.\n    '''\n    return cmath.sinh(2*3.14159 + a) * 180/3.14159\n    \ndef cosh_2pi_radians(a):\n    '''\n    Write a function to calculate cosh(2pi) in radians.\n    '''\n    return cmath.cosh(2*3.14159 + a)\n    \ndef cosh_2pi_degrees(a):\n    '''\n    Write a function to calculate cosh(2pi) in degrees.\n    '''\n    return cmath.cosh(2*3.14159 + a) * 180/3.14159\n    \ndef tanh_2pi_radians(a):\n    '''\n    Write a function to calculate tanh(2pi) in radians.\n    '''\n    return cmath.tanh(2*3.14159 + a)\n    \ndef tanh_2pi_degrees(a):\n    '''\n    Write a function to calculate tanh(2pi) in degrees.\n    '''\n    return cmath.tanh(2*3.14159 + a) * 180/3.14159\n    \ndef asin_2pi_radians(a):\n    '''\n    Write a function to calculate asin(2pi) in radians.\n    '''\n    return cmath.asin(2*3.14159 + a)\n    \ndef asin_2pi_degrees(a):\n    '''\n    Write a function to calculate asin(2pi) in degrees.\n    '''\n    return cmath.asin(2*3.14159 + a) * 180/3.14159\n    \ndef acos_2pi_radians(a):\n    '''\n    Write a function to calculate acos(2pi) in radians.\n    '''\n    return cmath.acos(2*3.14159 + a)\n    \ndef acos_2pi_degrees(a):\n    '''\n    Write a function to calculate acos(2pi) in degrees.\n    '''\n    return cmath.acos(2*3.14159 + a) * 180/3.14159\n    \ndef atan_2pi_radians(a):\n    '''\n    Write a function to calculate atan(2pi) in radians.\n    '''\n    return cmath.atan(2*3.14159 + a)\n    \ndef atan_2pi_degrees(a):\n    '''\n    Write a function to calculate atan(2pi) in degrees.\n    '''\n    return cmath.atan(2*3.14159 + a) * 180/3.14159\n    \ndef atan2_2pi_radians(a,b):\n    '''\n    Write a function to calculate atan2(2pi) in radians.\n    '''\n    return cmath.atan2(2*3.14159 + a,b)\n    \ndef atan2_2pi_degrees(a,b):\n    '''\n    Write a function to calculate atan2(2pi) in degrees.\n    '''\n    return cmath.atan2(2*3.14159 + a,b) * 180/3.14159\n    \ndef sqrt_2pi_radians(a):\n    '''\n    Write a function to calculate sqrt(2pi) in radians.\n    '''\n    return cmath.sqrt(2*3.14159 + a)\n    \ndef sqrt_2pi_degrees(a):\n    '''\n    Write a function to calculate sqrt(2pi) in degrees.\n    '''\n    return cmath.sqrt(2*3.14159 + a) * 180/3.14159\n    \ndef sinh_pi_radians(a):\n    '''\n    Write a function to calculate sinh(pi) in radians.\n    '''\n    return cmath.sinh(a)\n    \ndef sinh_pi_degrees(a):\n    '''\n    Write a function to calculate sinh(pi) in degrees.\n    '''\n    return cmath.sinh(a) * 180/3.14159\n    \ndef cosh_pi_radians(a):\n    '''\n    Write a function to calculate cosh(pi) in radians.\n    '''\n    return cmath.cosh(a)\n    \ndef cosh_pi_degrees(a):\n    '''\n    Write a function to calculate cosh(pi) in degrees.\n    '''\n    return cmath.cosh(a) * 180/3.14159\n    \ndef tanh_pi_radians(a):\n    '''\n    Write a function to calculate tanh(pi) in radians.\n    '''\n    return cmath.tanh(a)\n    \ndef tanh_pi_degrees(a):\n    '''\n    Write a function to calculate tanh(pi) in degrees.\n    '''\n    return cmath.tanh(a) * 180/3.14159\n    \ndef asinh_pi_radians(a):\n    '''\n    Writ"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b*1j)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    max_diff = 0\n    for i in range(length):\n        current_string = string[i:length]\n        current_string_length = len(current_string)\n        zero_count = current_string.count('0')\n        one_count = current_string.count('1')\n        diff = abs(zero_count - one_count)\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_zero = 0\n    count_one = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_zero += 1\n        elif string[i] == '1':\n            count_one += 1\n        else:\n            continue\n    return abs(count_zero - count_one)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    length_zero = 0\n    length_one = 0\n    index = 0\n    max_diff = 0\n    \n    while index < length:\n        if string[index] == \"0\":\n            length_zero += 1\n        else:\n            length_one += 1\n        \n        index += 1\n    \n    if length_zero > length_one:\n        max_diff = length_zero - length_one\n    else:\n        max_diff = length_one - length_zero\n    \n    return max_diff\n    \ndef find_max_string(string, max_diff):\n    '''\n    Write a function to find the maximum substring of a binary string that has a length less than or equal to maxDiff.\n    '''\n    length = len(string)\n    start = 0\n    end = 0\n    index = 0\n    max_sub = \"\"\n    \n    while index < length:\n        if string[index] == \"0\":\n            end = index\n            length_sub = end - start + 1\n            if length_sub <= max_diff:\n                max_sub = string[start:end + 1]\n                start = end + 1\n        else:\n            end = index\n            \n        index += 1\n        \n    return max_sub\n        \n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # Make two counters.\n    # And keep track of the max diff\n    # Run on the string once.\n    count_0 = 0\n    count_1 = 0\n    max_diff = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            count_0 += 1\n        if string[i] == '1':\n            count_1 += 1\n        max_diff = max(max_diff, abs(count_0 - count_1))\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    # i = 0\n    # ans = 0\n    # while i < len(string):\n    #     if string[i] == \"0\":\n    #         j = i\n    #         while j < len(string) and string[j] == \"0\":\n    #             j += 1\n    #         ans = max(ans, j - i)\n    #         i = j\n    #     elif string[i] == \"1\":\n    #         j = i\n    #         while j < len(string) and string[j] == \"1\":\n    #             j += 1\n    #         ans = max(ans, j - i)\n    #         i = j\n    # return ans\n    \n    ans = 0\n    length = 0\n    for i in range(len(string)):\n        length += string[i] == \"0\"\n        ans = max(ans, length)\n        length -= string[i] == \"0\"\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string: return -1\n    \n    n = len(string)\n    zero = 0\n    one = 0\n    max_diff = float('-inf')\n    \n    for i in range(n):\n        if string[i] == '0':\n            zero += 1\n            max_diff = max(max_diff, zero - one)\n        else:\n            one += 1\n    \n    return max_diff\n    \n    \n    \ndef find_length_2(string): \n    '''\n    A solution using slicing\n    '''\n    return max(len(string.replace('0','')), len(string.replace('1','')))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    c = 0\n    m = 0\n    for i in range(len(string)):\n        if string[i] == \"0\":\n            c+=1\n        else:\n            c-=1\n        m = max(m, abs(c))\n    return m\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    pass\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(len(string)):\n        for j in range(i, len(string)):\n            str1 = string[i:j+1]\n            diff = len(str1) - sum(str1 == '0')\n            max_diff = max(diff, max_diff)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if (len(string) < 2): \n        return 0\n    string = '0' + string\n    n = len(string)\n    max_diff = 0\n    for i in range(1, n):\n        curr = 0\n        prev = 1\n        for j in range(i):\n            if (string[j] == '0'):\n                curr += 1\n            else:\n                prev += 1\n        if (prev > curr):\n            curr = prev\n        if (max_diff < curr - prev):\n            max_diff = curr - prev\n        prev = curr\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    for x in range(1, min(a,b)+1):\n        if (a%x == 0) and (b%x == 0):\n            c += x\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    if a < b:\n        a, b = b, a\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 0\n    for i in range(1,min(a,b)+1):\n        if a%i ==0 and b%i ==0:\n            c += i\n    return c\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    divisors = []\n    for i in range(1,a+1):\n        if a % i == 0:\n            divisors.append(i)\n    for i in range(1,b+1):\n        if b % i == 0:\n            divisors.append(i)\n    common_divisors = []\n    for i in divisors:\n        if i in divisors:\n            common_divisors.append(i)\n    sum_of_common_divisors = 0\n    for i in common_divisors:\n        sum_of_common_divisors = sum_of_common_divisors + i\n    return sum_of_common_divisors\nprint(sum(14,18))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=0\n    for i in range(1,a):\n        if(a%i==0 and b%i==0):\n            c+=i\n    return c\n        \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    if a == 1 or b == 1:\n        return 1\n    if a%2 == 0 and b%2 == 0:\n        return sum(a//2,b//2) + a//2 + b//2\n    if a%2 == 0:\n        return sum(a//2,b) + a//2\n    if b%2 == 0:\n        return sum(a,b//2) + b//2\n    if a%2!= 0 and b%2!= 0:\n        return sum(a+b, max(a,b)-min(a,b))\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    n = min(a,b)\n    divisors = []\n    for i in range(1,n):\n        if (a%i == 0) and (b%i == 0):\n            divisors.append(i)\n    return sum(divisors)\n        \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # Write your code here\n    res = 1\n    i = 2\n    while i <= a or i <= b:\n        if a % i == 0 and b % i == 0:\n            res = res * i\n            a = a/i\n            b = b/i\n        i = i+1\n    return res\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    i = 1\n    sum_common_divisors = 0\n    while i <= a:\n        if a % i == 0 and b % i == 0:\n            sum_common_divisors += i\n        i += 1\n    print(\"The sum of common divisors of 2 numbers = \",sum_common_divisors)\n    return sum_common_divisors\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    g = 1\n    for i in range(1,a+1):\n        if (a%i==0) and (b%i==0):\n            g = g * i\n    return g\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) >= n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    #first, we can use a generator function\n    def generator():\n        for word in str:\n            if len(word) > n:\n                yield word\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return_list = []\n    for word in str:\n        if len(word) > n:\n            return_list.append(word)\n    return return_list\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    # for each word in the list\n    # create a new string, with the word removed\n    # call the function again, with the string in the parameter as the new string\n    # if the word has been found, then add it to a list\n    # return the list\n    # if there is no word in the list, then return an empty list\n    return [] if len(str) < n else [word for word in str if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    result = []\n    for word in str.split(' '):\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words = []\n    for word in str:\n        if len(word) >= n:\n            long_words.append(word)\n    return long_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    long_words_list = []\n    for i in str:\n        if len(i) > n:\n            long_words_list.append(i)\n    return long_words_list\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    result = []\n    for word in words:\n        if len(word) > n:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    word_set = set(str.split(\" \"))\n    long_words = set(w for w in word_set if len(w) > n)\n    return sorted(list(long_words))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # if not magic_square_check(my_matrix):\n    #     return False\n    # return True\n    \n    # # -------------------------------------------------------\n    # # Another solution is to use a sum of each row, column and diagonal\n    # # for each row, column and diagonal, which then needs to be divided by\n    # # nine.\n    # # -------------------------------------------------------\n    \n    # if not check_magic_square_1(my_matrix):\n    #     return False\n    # return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # Check if the matrix has only one dimension\n    if len(my_matrix) > 1:\n        # This matrix has more than one dimension\n        return False\n    # If the matrix has only one dimension, then it must be a square\n    # If not, then it is not a magic square\n    return all(len(my_matrix) == len(x) for x in my_matrix) and sum(my_matrix[i][i] for i in range(len(my_matrix))) == sum(my_matrix[i][len(my_matrix) - i - 1] for i in range(len(my_matrix)))\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    n = len(my_matrix)\n    if n!= 0:\n        if n!= len(my_matrix[0]):\n            return False\n        else:\n            for i in range(n):\n                if len(my_matrix[i])!= n:\n                    return False\n                else:\n                    n = n\n                    n_count = 0\n                    sum = 0\n                    for j in range(n):\n                        sum += my_matrix[i][j]\n                        n_count += 1\n                    if n_count!= n:\n                        return False\n                    else:\n                        n = n\n                        sum1 = 0\n                        for j in range(n):\n                            sum1 += my_matrix[j][i]\n                            n_count += 1\n                        if sum!= sum1:\n                            return False\n    else:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # print(my_matrix)\n    # if the matrix is not a square it returns False\n    if len(my_matrix)!= len(my_matrix[0]):\n        return False\n    # if the first value in the matrix is not equal to 1, the matrix is not a magic square\n    # the first value in the matrix should be a 1\n    if my_matrix[0][0]!= 1:\n        return False\n    # iterate over all the rows and columns\n    for i in range(len(my_matrix)):\n        # check if the diagonal is equal to the sums of the whole matrix\n        if my_matrix[i][i]!= sum(my_matrix[i]):\n            return False\n        # check if the upper diagonal is equal to the sums of the whole matrix\n        if my_matrix[i][i]!= sum(my_matrix[i][0:i]):\n            return False\n        # check if the lower diagonal is equal to the sums of the whole matrix\n        if my_matrix[i][len(my_matrix)-1-i]!= sum(my_matrix[i][len(my_matrix[0])-i-1:len(my_matrix[0])]):\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    \n    # Handle edge case\n    if not isinstance(my_matrix,list) or len(my_matrix)!= 1:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #check rows\n    for i in range(len(my_matrix)):\n        if sum(my_matrix[i])!= my_matrix[i][i]:\n            return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for i in range(3):\n        if sum(my_matrix[i])!= (my_matrix[i][0] + my_matrix[i][1] + my_matrix[i][2]):\n            return False\n    for i in range(3):\n        if sum([my_matrix[j][i] for j in range(3)])!= (my_matrix[0][i] + my_matrix[1][i] + my_matrix[2][i]):\n            return False\n    for i in range(3):\n        if my_matrix[i][i]!= sum(my_matrix[i][:i]):\n            return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    s_sum = sum(my_matrix[i][i] for i in range(len(my_matrix)))\n    if s_sum!= 45:\n        return False\n    s_sum = sum(my_matrix[i][len(my_matrix)-i-1] for i in range(len(my_matrix)))\n    if s_sum!= 45:\n        return False\n    s_sum = sum(my_matrix[i][len(my_matrix)//2+i] for i in range(len(my_matrix)))\n    if s_sum!= 45:\n        return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    size = len(my_matrix)\n    if size < 1 or size % 2!= 0:\n        print(\"Wrong size!\")\n        return False\n    \n    if not is_magic_square(my_matrix):\n        print(\"Wrong! Magic square is not magic.\")\n        return False\n    \n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if type(my_matrix) == list:\n        if type(my_matrix[0]) == list:\n            for i in range(len(my_matrix)):\n                if type(my_matrix[0][i]) == int:\n                    my_matrix[i][i] = my_matrix[i][i] - 1\n            for i in range(len(my_matrix)):\n                if i < (len(my_matrix) - 1):\n                    if len(my_matrix)!= len(set(sum(my_matrix, []))) or len(my_matrix[i])!= len(set(sum(my_matrix[i], []))):\n                        return False\n                else:\n                    if len(my_matrix)!= len(set(sum(my_matrix, []))) or len(my_matrix[i])!= len(set(sum(my_matrix[i], []))):\n                        return False\n            for i in range(len(my_matrix)):\n                if i < (len(my_matrix) - 1):\n                    for j in range(len(my_matrix)):\n                        if j < (len(my_matrix) - 1):\n                            if my_matrix[i][j] == my_matrix[i][j + 1] + my_matrix[i][j + 2] or my_matrix[i][j] == my_matrix[i + 1][j] + my_matrix[i + 2][j]:\n                                return False\n                else:\n                    for j in range(len(my_matrix)):\n                        if j < (len(my_matrix) - 1):\n                            if my_matrix[i][j] == my_matrix[i][j + 1] + my_matrix[i][j + 2] or my_matrix[i][j] == my_matrix[i + 1][j] + my_matrix[i + 2][j]:\n                                return False\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    max_freq = 0\n    max_item = ''\n    for num in nums:\n        freq[num] += 1\n        if freq[num] > max_freq:\n            max_freq = freq[num]\n            max_item = num\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    \n    if len(nums) == 0:\n        return None\n    \n    else:\n        max_count = 1\n        max_count_item = nums[0]\n        \n        for num in nums:\n            if num not in nums:\n                continue\n            \n            if nums.count(num) > max_count:\n                max_count = nums.count(num)\n                max_count_item = num\n        \n        return max_count_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # use dict as key and count as values\n    counts = defaultdict(int)\n    for num in nums:\n        counts[num] += 1\n    # return key, value pair\n    return max(counts.items(), key=lambda item: item[1])\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    counts = defaultdict(int)\n    for i in nums:\n        counts[i] += 1\n    return max(counts, key=lambda x: counts[x])\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for i in nums:\n        freq[i] += 1\n    \n    max_val = max(freq.values())\n    max_freq = max(freq,key = freq.get)\n    return max_freq, max_val\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    from collections import Counter\n    d = Counter(nums)\n    m = max(d.values())\n    return [i for i, j in d.items() if j == m]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = defaultdict(int)\n    for i in nums:\n        frequency[i] += 1\n    max_occur = max(frequency.values())\n    res = []\n    for key, value in frequency.items():\n        if max_occur == value:\n            res.append(key)\n    return res[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count = defaultdict(int)\n    for num in nums:\n        count[num] += 1\n    for num, freq in count.items():\n        if freq == max(count.values()):\n            return num\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    count_dict = defaultdict(int)\n    for num in nums:\n        count_dict[num] += 1\n    return max(count_dict, key=count_dict.get)\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    frequency = {}\n    max_freq = 0\n    max_value = 0\n    for value in nums:\n        frequency[value] = frequency.get(value, 0) + 1\n        if frequency[value] > max_freq:\n            max_freq = frequency[value]\n            max_value = value\n    return max_value\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    #print(str1)\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    #print(vowels)\n    new_str = []\n    for char in str1:\n        if char not in vowels:\n            new_str.append(char)\n        else:\n            new_str.insert(0,char)\n    return ''.join(new_str)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowels = vowels.lower()\n    str_rev = \"\"\n    for i in range(0, len(str1)):\n        if str1[i] in vowels:\n            str_rev = str_rev + str1[i]\n        else:\n            str_rev = str_rev + str1[i].upper()\n    return str_rev\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    vowel_counter = 0\n    new_str = \"\"\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = \"aeiouAEIOU\"\n    str2 = []\n    for char in str1:\n        if char in vowels:\n            str2.append(char)\n    for char in vowels:\n        str2.append(char)\n    str2.reverse()\n    for i in range(len(str2)):\n        if str2[i] == \"y\":\n            str2[i] = \"Y\"\n        else:\n            str2[i] = str2[i].lower()\n    return \"\".join(str2)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    rev = []\n    for char in str1:\n        if char.lower() not in ['a', 'e', 'i', 'o', 'u', 'y']:\n            rev.append(char)\n        else:\n            rev.append(char.upper())\n    return ''.join(rev)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # vowels = \"aeiou\"\n    # vowels_dict = dict.fromkeys(vowels, None)\n    # vowels_dict = {vowels_dict[vowels]: vowels_dict[vowels]}\n    # vowels_dict.update({vowels_dict: vowels_dict})\n    # vowel_dict = {'a': 'a', 'e': 'e', 'i': 'i', 'o': 'o', 'u': 'u'}\n    # reversed_vowels = \"\"\n    # for vowel in vowels:\n    #     reversed_vowels += vowel_dict[vowel]\n    # return reversed_vowels\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    l = list(str1)\n    i = 0\n    j = len(l)-1\n    while i<j:\n        if l[i] not in ['a', 'e', 'i', 'o', 'u', 'y']:\n            i+=1\n        else:\n            l[i], l[j] = l[j], l[i]\n            j-=1\n    return ''.join(l)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = \"aeiou\"\n    vowels = vowels.lower()\n    vowels = vowels.split()\n    \n    new_string = \"\"\n    \n    for i in str1:\n        if i.lower() in vowels:\n            new_string += i\n            new_string += \"*\"\n        else:\n            new_string += i\n    return new_string\n    \n    \ndef reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    vowels = \"aeiou\"\n    vowels = vowels.lower()\n    vowels = vowels.split()\n    \n    new_string = \"\"\n    vowels = \"aeiou\"\n    vowels = vowels.lower()\n    vowels = vowels.split()\n    \n    for i in str1:\n        if i.lower() in vowels:\n            new_string += i\n            new_string += \"*\"\n        else:\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    \n    \n    vowels = 'aeiou'\n    \n    # vowels = ['a','e','i','o','u']\n    \n    if str1 == None:\n        return\n    \n    str1 = str1.lower()\n    \n    str1 = str1.replace(' ','')\n    \n    lst_str = list(str1)\n    \n    n = len(str1)\n    \n    # print(n)\n    \n    for i in range(n):\n        # print(lst_str)\n        \n        if lst_str[i] in vowels:\n            lst_str[i] = '*'\n            \n    lst_str = ''.join(lst_str)\n    \n    # print(lst_str)\n    \n    return lst_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set('aeiou')\n    vowels_list = list(vowels)\n    # vowels_list = ['a', 'e', 'i', 'o', 'u']\n    \n    str1 = str1.lower()\n    \n    vowels_list = list(vowels)\n    # vowels_list = ['a', 'e', 'i', 'o', 'u']\n    \n    for i in range(len(str1)):\n        if str1[i] in vowels_list:\n            str1 = str1[i] + str1[:i] + str1[i + 1:]\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n    #pass\n    \n    \ndef tup_tup(tup1):\n    '''\n    Write a function to convert a tuple to a tuple.\n    '''\n    return tuple(tup1)\n    #pass\n    \n    \ndef tup_ints(tup1):\n    '''\n    Write a function to convert a tuple to a list of integers.\n    '''\n    return list(tup1)\n    #pass\n    \n    \ndef tup_tuples(tup1):\n    '''\n    Write a function to convert a tuple to a list of tuples.\n    '''\n    return list(tup1)\n    #pass\n    \n    \ndef tup_set(tup1):\n    '''\n    Write a function to convert a tuple to a set.\n    '''\n    return set(tup1)\n    #pass\n    \n    \ndef tup_frozenset(tup1):\n    '''\n    Write a function to convert a tuple to a frozenset.\n    '''\n    return frozenset(tup1)\n    #pass\n    \n    \ndef tup_list(tup1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tup1)\n    #pass\n    \n    \ndef tup_dict(tup1):\n    '''\n    Write a function to convert a tuple to a dictionary.\n    '''\n    return dict(tup1)\n    #pass\n    \n    \ndef tup_tuples_frozensets(tup1):\n    '''\n    Write a function to convert a tuple to a list of tuples, followed by a list of frozensets.\n    '''\n    return list(tup1) + list(frozenset(tup1))\n    #pass\n    \n    \ndef tup_sets(tup1):\n    '''\n    Write a function to convert a tuple to a list of sets.\n    '''\n    return list(tup1)\n    #pass\n    \n    \ndef tup_frozensets(tup1):\n    '''\n    Write a function to convert a tuple to a list of frozensets.\n    '''\n    return list(tup1)\n    #pass\n    \n    \ndef tup_lists(tup1):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tup1)\n    #pass\n    \n    \ndef tup_strings(tup1):\n    '''\n    Write a function to convert a tuple to a list of strings.\n    '''\n    return list(tup1)\n    #pass\n    \n    \ndef tup_dicts(tup1):\n    '''\n    Write a function to convert a tuple to a list of dictionaries.\n    '''\n    return list(tup1)\n    #pass\n    \n    \ndef tup_sets_frozensets(tup1):\n    '''\n    Write a function to convert a tuple to a list of sets, followed by a list of frozensets.\n    '''\n    return list(tup1) + list(frozenset(tup1))\n    #pass\n    \n    \ndef tup_strings_lists(tup1):\n    '''\n    Write a function to convert a tuple to a list of strings, followed by a list of lists.\n    '''\n    return list(tup1) + list(list(tup1))\n    #pass\n    \n    \ndef tup_strings_lists_dicts(tup1):\n    '''\n    Write a function to convert a tuple to a list of strings, followed by a list of lists, followed by a list of dictionaries.\n    '''\n    return list(tup1) + list(list(tup1)) + list(list(tup1))\n    #pass\n    \n    \ndef tup_strings_lists_sets_frozensets(tup1):\n    '''\n    Write a function to convert a tuple to a list of strings, followed by a list of lists, followed by a list of sets, followed by a list of frozensets.\n    '''\n    return list(tup1) + list(list(tup1)) + list(list(tup1)) + list(frozenset(tup1))\n    #pass\n    \n    \ndef tup_tuples_lists(tup1):\n    '''\n    Write a function to convert a tuple to a list of tuples, followed by a list of lists.\n    '''\n    return list(tup1) + list(list(tup1))\n    #pass\n    \n    \ndef tup_tuples_lists_dicts(tup1):\n    '''\n    Write a function to convert a tuple to a list of tuples, followed by a list of lists, followed by a list of dictionaries.\n    '''\n    return list(tup1) + list(list(tup1)) + list(list(tup1))\n    #pass\n    \n    \ndef tup_tuples_lists_sets_frozensets(tup1):\n    '''\n    Write a function to convert a tuple to a list of tuples, followed by a list of lists, followed by a list of sets, followed by a list of frozensets.\n    '''\n    return list(tup1) + list(list(tup1)) + list(list(tup1)) + list(frozenset(tup1))\n    #pass\n    \n    \ndef tup_tuples_strings_lists(tup1):\n    '''\n    Write a function to convert a tuple to a list of tuples, followed by a list of strings, followed by a list of lists.\n    '''\n    return list(tup1) + list(list(tup1)) + list(list(tup1))\n    #pass\n    \n    \ndef tup_tuples_strings_lists_dicts(tup1):\n    '''\n    Write a function to convert a tuple to a list of tuples, followed by a list of strings, followed by a list of lists, followed by a list of dictionaries.\n    '''\n    return list(tup1) + list(list(tup1)) + list(list(tup1)) + list(list(tup1))\n    #pass\n    \n    \ndef tup_tuples_strings_lists_sets_frozensets(tup1):\n    '''\n    Write a function to convert a tuple to a list of tuples, followed by a list of strings, followed by a list of lists, followed by a list of sets, followed by a list of frozensets.\n    '''\n    return list(tup1) + list(list(tup1)) + list(list(tup1)) + list(frozenset(tup1))\n    #pass\n    \n    \ndef tup_strings_lists_tuples(tup1):\n    '''\n    Write a function to convert a tuple to a list of strings, followed by a list of lists, followed by a list of tuples.\n    '''\n    return list(tup1) + list(list(tup1)) + list(tup1)\n    #pass\n    \n    \ndef tup_strings_lists_tuples_dicts(tup1):\n    '''\n    Write a function to convert a tuple to a list of strings, followed by a list of lists, followed by a list of tuples, followed by a list of dictionaries.\n    '''\n    return list(tup1) + list(list(tup1)) + list(tup1) + list(dict(tup1))\n    #pass\n    \n    \ndef tup_strings_lists_tuples_sets_frozensets(tup1):\n    '''\n    Write a function to convert a tuple to a list of strings, followed by a list of lists, followed by a list of tuples, followed by a list of sets, followed by a list of frozensets.\n    '''\n    return list(tup1) + list(list(tup1)) + list(tup1) + list(set(tup1)) + list(frozenset(tup1))\n    #pass\n    \n    \ndef tup_lists_lists_tuples(tup1):\n    '''\n    Write a function to convert a tuple to a lis"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    \n    # initialize a result string\n    result = str()\n    \n    # write your code below\n    \n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = ''\n    for tup in tup1:\n        result += str(tup) +''\n    return result\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    tup1_str = ''.join(tup1)\n    return tup1_str\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    string = ''\n    for element in tup1:\n        string += str(element)\n    return string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return ''.join(tup1)\n    \ndef test_tup_string():\n    assert tup_string(('p','y','t','h','o','n')) == 'python'\n    assert tup_string((1,2,3,4,5)) == '12345'\n    assert tup_string(('a','b','c','d','e')) == 'abcde'\n    assert tup_string((9.2,'y','t','h','o','n')) == '9.2yot'\n    assert tup_string((1,2,3,4,5,6,7,8,9,10)) == '12345678910'\n    assert tup_string(()) == ''\n    assert tup_string((1,'2','3','4','5')) == '12345'\n    assert tup_string(()) == ''\n    assert tup_string((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) == '1234567891011121314151617181920212223242526272829303133343536373839404142143444546'\n    print('passed all tests.')\n    \ndef tup_string_recur(tup1):\n    '''\n    Write a recursive function to convert a tuple to a string.\n    '''\n    if len(tup1) == 0:\n        return ''\n    else:\n        return str(tup1[0]) + tup_string_recur(tup1[1:])\n    \ndef test_tup_string_recur():\n    assert tup_string_recur(('p','y','t','h','o','n')) == 'python'\n    assert tup_string_recur((1,2,3,4,5)) == '12345'\n    assert tup_string_recur(('a','b','c','d','e')) == 'abcde'\n    assert tup_string_recur((9.2,'y','t','h','o','n')) == '9.2yot'\n    assert tup_string_recur((1,2,3,4,5,6,7,8,9,10)) == '12345678910'\n    assert tup_string_recur(()) == ''\n    assert tup_string_recur((1,'2','3','4','5')) == '12345'\n    assert tup_string_recur(()) == ''\n    assert tup_string_recur((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) == '1234567891011121314151617181920212223242526272829303133343536373839404142143444546'\n    print('passed all tests.')\n    \ndef tup_string_reverse(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    #return tup_string_recur(tup1[::-1])\n    return ''.join(tup1[::-1])\n    \ndef test_tup_string_reverse():\n    assert tup_string_reverse(('p','y','t','h','o','n')) == 'nohtypo'\n    assert tup_string_reverse((1,2,3,4,5)) == '5432'\n    assert tup_string_reverse(('a','b','c','d','e')) == 'eabcde'\n    assert tup_string_reverse((9.2,'y','t','h','o','n')) == 'yothn'\n    assert tup_string_reverse((1,2,3,4,5,6,7,8,9,10)) == '108957654321'\n    assert tup_string_reverse(()) == ''\n    assert tup_string_reverse((1,'2','3','4','5')) == '54321'\n    assert tup_string_reverse(()) == ''\n    assert tup_string_reverse((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)) == '20987654321123431415161718191'\n    print('passed all tests.')\n    \ndef tup_string_multiply(tup1,n):\n    '''\n    Write a recursive function to convert a tuple to a string.\n    '''\n    if n == 1:\n        return tup_string(tup1)\n    else:\n        return tup_string_multiply(tup1,n-1) + tup_string(tup1)\n    \ndef test_tup_string_multiply():\n    assert tup_string_multiply(('p','y','t','h','o','n'),1) == 'python'\n    assert tup_string_multiply((1,2,3,4,5),2) == '12345'\n    assert tup_string_multiply(('a','b','c','d','e'),3) == 'abcde'\n    assert tup_string_multiply((9.2,'y','t','h','o','n'),4) == '9.2yot'\n    assert tup_string_multiply((1,2,3,4,5,6,7,8,9,10),5) == '123456789'\n    assert tup_string_multiply((),1) == ''\n    assert tup_string_multiply((1,'2','3','4','5'),3) == '54321'\n    assert tup_string_multiply((1,2,3,4,5,6,7,8,9,10),6) == '108957654321'\n    assert tup_string_multiply((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20),19) == '20987654321123431415161718191'\n    print('passed all tests.')\n    \ndef tup_string_reverse_multiply(tup1,n):\n    '''\n    Write a recursive function to convert a tuple to a string.\n    '''\n    if n == 1:\n        return tup_string_multiply(tup1,n)\n    else:\n        return tup_string_reverse_multiply(tup1,n-1) + tup_string_multiply(tup1,n)\n    \ndef test_tup_string_reverse_multiply():\n    assert tup_string_reverse_multiply(('p','y','t','h','o','n'),1) == 'python'\n    assert tup_string_reverse_multiply((1,2,3,4,5),2) == '12345'\n    assert tup_string_reverse_multiply(('a','b','c','d','e'),3) == 'abcde'\n    assert tup_string_reverse_multiply((9.2,'y','t','h','o','n'),4) == '9.2yot'\n    assert tup_string_reverse_multiply((1,2,3,4,5,6,7,8,9,10),5) == '123456789'\n    assert tup_string_reverse_multiply((),1) == ''\n    assert tup_string_reverse_multiply((1,'2','3','4','5'),3) == '54321'\n    assert tup_string_reverse_multiply((1,2,3,4,5,6,7,8,9,10),6) == '108957654321'\n    assert tup_string_reverse_multiply((1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20),19) == '20987654321123431415161718191'\n    print('passed all tests.')\n    \ndef tu"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    my_string = str(tup1)\n    return my_string\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''\n    for t in tup1:\n        s += str(t)\n    return s\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for num in nums:\n        if num < 0:\n            sum += num\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in nums:\n        if i < 0:\n            result = result + i\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num_sum = 0\n    for x in nums:\n        if x < 0:\n            num_sum += x\n    return num_sum\n    \ndef sum_negativenum_v2(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum([x for x in nums if x < 0])\n    \ndef sum_negativenum_v3(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0)\n    \ndef sum_negativenum_v4(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0) or 0\n    \ndef sum_negativenum_v5(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0) or 0\n    \ndef sum_negativenum_v6(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    return sum(x for x in nums if x < 0) or 0\n    \ndef sum_negativenum_v7(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    if not nums:\n        return 0\n    sum_v1 = 0\n    sum_v2 = 0\n    for x in nums:\n        if x < 0:\n            sum_v1 += x\n        else:\n            sum_v2 += x\n    return sum_v1 + sum_v2\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    \n    sum_of_negativenum = 0\n    \n    for i in range(len(nums)):\n        if nums[i] < 0:\n            sum_of_negativenum += nums[i]\n            \n    return sum_of_negativenum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for i in nums:\n        if i < 0:\n            sum_neg += i\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            result = result + nums[i]\n    return result\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for x in range(len(nums)):\n        if nums[x]<0:\n            total += nums[x]\n    return total\nprint(sum_negativenum([-1,2,3,-4,5,-6,7])) # 13\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    output = 0\n    for i in range(len(nums)):\n        if nums[i] < 0:\n            output += nums[i]\n    return output\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return n * (3 * n - 1) / 2 + n\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    n = int(n)\n    result = 0\n    for i in range(1, n + 1):\n        result += i\n        i += 1\n    return result\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    \n    # return n*(2*n - 1)\n    # return (2 * (n**2) - (n - 1)**2 + 1) / 2\n    return 3*(2*n**2 - 1)\n    \n    \n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    # return n*((2*n)-1)\n    return int((((2*n)-1)**0.5)+1)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    nth = 1\n    for i in range(2, n+1):\n        nth = nth + 6*i - 3\n    return nth\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = 6*n - 5\n    if n > 1:\n        result = result + hexagonal_num(n-1)\n    return result\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    num = 2 * n * (n + 1)\n    return num\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return (n*((n+1)*(2*n-1))**.5)/6\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    i, j = 1, 1\n    while i <= n:\n        i *= 2\n    return i - (n - 1) * j\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n*(3*n - 1)/2\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    #todo\n    zeroes = 0\n    non_zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    for num in nums:\n        if num == 0:\n            zeroes += 1\n    \n    return zeroes / (len(nums) - zeroes)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for x in nums:\n        if x == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return (zeroes/non_zeroes)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    return len([n for n in nums if n == 0])/len(nums)\ndef array_diff(nums):\n    '''\n    Write a function that takes two arrays and returns the elements that are in one but not the other.\n    '''\n    return list(set(nums) - set(nums1))\ndef solve(a1, b1):\n    '''\n    Write a function to multiply two numbers in the array.\n    '''\n    return sum(a1) * sum(b1)\ndef two_sum(nums, target):\n    '''\n    Write a function to find the two numbers in an array that sum up to the target.\n    '''\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [nums[i], nums[j]]\ndef fizz_buzz(n):\n    '''\n    Write a function that takes a positive integer and returns a string containing a message based on that number.\n    '''\n    if n == 1:\n        return '1'\n    if n == 2:\n        return '2'\n    if n % 3 == 0 and n % 5 == 0:\n        return 'FizzBuzz'\n    if n % 3 == 0:\n        return 'Fizz'\n    if n % 5 == 0:\n        return 'Buzz'\n    return str(n)\ndef intersection(l1, l2):\n    '''\n    Write a function that returns the intersection of two arrays.\n    '''\n    return list(set(l1) & set(l2))\ndef big_diff(nums):\n    '''\n    Write a function that returns the difference between the largest and smallest numbers in an array.\n    '''\n    return max(nums) - min(nums)\ndef triple_step(nums):\n    '''\n    Write a function that takes an array of non-negative integers and returns the value of the step that's necessary to get to the\n    first element in the array.\n    If the first element is 0, return 1 instead.\n    '''\n    return nums[0] if nums[0] == 0 else 1 + nums[0]\ndef sum_odd_digits(nums):\n    '''\n    Write a function that returns the sum of all of the odd digits in the integer.\n    '''\n    return sum([int(n) for n in str(nums) if int(n) % 2 == 1])\ndef is_power_of_two(num):\n    '''\n    Write a function to check if a number is a power of 2.\n    '''\n    return num > 0 and not (num & (num-1))\ndef is_square(num):\n    '''\n    Write a function to check if a number is a perfect square.\n    '''\n    return num > 0 and num**0.5 == int(num**0.5)\ndef multiply(nums):\n    '''\n    Write a function that takes an array of integers and multiplies every other element by 2.\n    '''\n    return [n * 2 for n in nums]\ndef is_palindrome(string):\n    '''\n    Write a function that takes a string and checks if it is a palindrome.\n    '''\n    return string == string[::-1]\ndef max_even(nums):\n    '''\n    Write a function that takes an array of integers and returns the maximum even number in that array.\n    If there are no even numbers in the array, return -1.\n    '''\n    return max([n for n in nums if n % 2 == 0])\ndef compress(nums):\n    '''\n    Write a function that takes an array of integers and returns the array with consecutive repetitions removed.\n    '''\n    compressed = ''\n    i = 0\n    while i < len(nums):\n        if i < len(nums)-1 and nums[i] == nums[i+1]:\n            i += 1\n        else:\n            compressed += str(nums[i])\n            i += 1\n    return int(compressed)\ndef reverse_string(nums):\n    '''\n    Write a function that takes an array of characters and returns a string in which the characters are reversed.\n    '''\n    return ''.join(nums[::-1])\ndef has_duplicate(nums):\n    '''\n    Write a function that takes an array of integers and returns whether or not there is any\n    element that appears more than once.\n    '''\n    return len(set(nums)) < len(nums)\ndef no_teen_sum(a, b, c):\n    '''\n    Write a function that returns the sum of the numbers of a, b, and c.\n    But if any of the values is a teen -- in the range 13-19 inclusive --\n    then that value counts as 0, except 15 and 16 do not count as a teens.\n    Write a separate helper \"def fix_teen(n):\"that takes in an int value and returns that value fixed for the teen rule.\n    In this way, you avoid repeating the teen code 3 times (i.e. \"decomposition\").\n    '''\n    return fix_teen(a) + fix_teen(b) + fix_teen(c)\ndef fix_teen(n):\n    if n in range(13,20):\n        return 0\n    return n\ndef round_sum(nums):\n    '''\n    Write a function that returns the sum of the numbers in an array, except ignore sections of numbers starting with a 6\n    and extending to the next 7 (every 6 will be followed by at least one 7). Return 0 for no numbers.\n    '''\n    return sum([n for n in nums if n!= 6 and (n + 1) % 7!= 0])\ndef count_neg(nums):\n    '''\n    Write a function that takes an array of integers and returns the number of negative numbers in the array.\n    '''\n    return sum([n < 0 for n in nums])\ndef count_sevens(nums):\n    '''\n    Write a function that takes an array of integers and returns the number of occurrences of 7 in the array.\n    '''\n    return sum([n == 7 for n in nums])\ndef count_threes(nums):\n    '''\n    Write a function that takes an array of integers and returns the number of occurrences of 3 in the array.\n    '''\n    return sum([n == 3 for n in nums])\ndef count_fives(nums):\n    '''\n    Write a function that takes an array of integers and returns the number of occurrences of 5 in the array.\n    '''\n    return sum([n == 5 for n in nums])\ndef print_grid(matrix):\n    '''\n    Write a function that prints a two-dimensional array that looks like this:\n    [\n        [1,  2,  3,  4],\n        [5,  6,  7,  8],\n        [9, 10, 11, 12],\n    ]\n    '''\n    for row in matrix:\n        print(' '.join(str(n) for n in row))\ndef matrix_add(matrix1, matrix2):\n    '''\n    Write a function that adds two matrices together and returns the result.\n    '''\n    result = []\n    for i in range(len(matrix1)):\n        result.append([])\n        for j in range(len(matrix1[0])):\n            result[i].append(matrix1[i][j] + matrix2[i][j])\n    return result\ndef count_triples(lst):\n    '''\n    Write a function that returns the number of triples in a list that sum to zero.\n    '''\n    result = 0\n    for i in range(len(lst)):\n        for j in range(i+1, len(lst)):\n            for k in range(j+1, len(lst)):\n                if lst[i] + lst[j] + lst[k] == 0:\n                    result += 1\n    return result\ndef sum_negative(lst):\n    '''\n    Write a function that takes a list of integers and returns the sum of the list's integers, but with negative numbers summed to 0 instead.\n    '''\n    return sum(lst) - sum([n if n >= "
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in nums:\n        if i == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    if not isinstance(nums, list):\n        raise TypeError('nums should be a list!')\n    if len(nums) == 0:\n        return 0\n    if not isinstance(nums[0], int) or not all(isinstance(num, int) for num in nums):\n        raise TypeError('nums should be an integer array!')\n    return 1 - sum(nums) / sum(1 for i in nums if i!= 0)\nprint(zero_count([0,0,1,0,3,0,0]))\nprint(zero_count([0,0,1,0,3,0,0]))\nprint(zero_count([0,0,1,0,3,0,0]))\nprint(zero_count([]))\nprint(zero_count([0]))\nprint(zero_count([0,1,0,3,0,0]))\nprint(zero_count([0,1,0,3,0,0]))\nprint(zero_count([0,0,1,0,3,0,0]))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero = 0\n    one = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zero += 1\n        else:\n            one += 1\n    return zero / (zero + one)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    # method 1\n    count_zeros = nums.count(0)\n    count_non_zeros = len(nums) - count_zeros\n    return count_zeros / count_non_zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero_count = 0\n    for i in range(0,len(nums)):\n        if nums[i] == 0:\n            zero_count += 1\n    return zero_count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    nonzeroes = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            zeroes+=1\n        else:\n            nonzeroes+=1\n    return nonzeroes/float(zeroes)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n+1):\n        if n%i == 0:\n            if i == 2 or i == n//i:\n                return True\n    return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    # code here\n    while n:\n        r = n % 10\n        n = int(n / 10)\n        if r == 0:\n            return False\n        elif r == 1:\n            if n == 0:\n                return False\n            else:\n                return True\n        elif r == 2:\n            if n == 0:\n                return True\n            else:\n                return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return not n & 1 and n!= 0 and is_pow_of_two(n)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0: \n        return False\n    while (n!= 0) and (n % 2 == 0): \n        n = n // 2\n    while (n!= 0) and (n % 2!= 0): \n        n = n - 1\n    return n == 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    return not (n % 2)\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    isPossible = False\n    if (n == 0):\n        return True\n    if (n == 1):\n        return True\n    if (n == 2):\n        return True\n    if (n == 3):\n        return True\n    if (n == 4):\n        return True\n    if (n == 5):\n        return True\n    if (n == 6):\n        return True\n    if (n == 7):\n        return True\n    if (n == 8):\n        return True\n    if (n == 9):\n        return True\n    if (n == 10):\n        return True\n    if (n == 11):\n        return True\n    if (n == 12):\n        return True\n    if (n == 13):\n        return True\n    if (n == 14):\n        return True\n    if (n == 15):\n        return True\n    if (n == 16):\n        return True\n    if (n == 17):\n        return True\n    if (n == 18):\n        return True\n    if (n == 19):\n        return True\n    if (n == 20):\n        return True\n    if (n == 21):\n        return True\n    if (n == 22):\n        return True\n    if (n == 23):\n        return True\n    if (n == 24):\n        return True\n    if (n == 25):\n        return True\n    if (n == 26):\n        return True\n    if (n == 27):\n        return True\n    if (n == 28):\n        return True\n    if (n == 29):\n        return True\n    if (n == 30):\n        return True\n    if (n == 31):\n        return True\n    if (n == 32):\n        return True\n    if (n == 33):\n        return True\n    if (n == 34):\n        return True\n    if (n == 35):\n        return True\n    if (n == 36):\n        return True\n    if (n == 37):\n        return True\n    if (n == 38):\n        return True\n    if (n == 39):\n        return True\n    if (n == 40):\n        return True\n    if (n == 41):\n        return True\n    if (n == 42):\n        return True\n    if (n == 43):\n        return True\n    if (n == 44):\n        return True\n    if (n == 45):\n        return True\n    if (n == 46):\n        return True\n    if (n == 47):\n        return True\n    if (n == 48):\n        return True\n    if (n == 49):\n        return True\n    if (n == 50):\n        return True\n    if (n == 51):\n        return True\n    if (n == 52):\n        return True\n    if (n == 53):\n        return True\n    if (n == 54):\n        return True\n    if (n == 55):\n        return True\n    if (n == 56):\n        return True\n    if (n == 57):\n        return True\n    if (n == 58):\n        return True\n    if (n == 59):\n        return True\n    if (n == 60):\n        return True\n    if (n == 61):\n        return True\n    if (n == 62):\n        return True\n    if (n == 63):\n        return True\n    if (n == 64):\n        return True\n    if (n == 65):\n        return True\n    if (n == 66):\n        return True\n    if (n == 67):\n        return True\n    if (n == 68):\n        return True\n    if (n == 69):\n        return True\n    if (n == 70):\n        return True\n    if (n == 71):\n        return True\n    if (n == 72):\n        return True\n    if (n == 73):\n        return True\n    if (n == 74):\n        return True\n    if (n == 75):\n        return True\n    if (n == 76):\n        return True\n    if (n == 77):\n        return True\n    if (n == 78):\n        return True\n    if (n == 79):\n        return True\n    if (n == 80):\n        return True\n    if (n == 81):\n        return True\n    if (n == 82):\n        return True\n    if (n == 83):\n        return True\n    if (n == 84):\n        return True\n    if (n == 85):\n        return True\n    if (n == 86):\n        return True\n    if (n == 87):\n        return True\n    if (n == 88):\n        return True\n    if (n == 89):\n        return True\n    if (n == 90):\n        return True\n    if (n == 91):\n        return True\n    if (n == 92):\n        return True\n    if (n == 93):\n        return True\n    if (n == 94):\n        return True\n    if (n == 95):\n        return True\n    if (n == 96):\n        return True\n    if (n == 97):\n        return True\n    if (n == 98):\n        return True\n    if (n == 99):\n        return True\n    if (n == 100):\n        return True\n    if (n == 101):\n        return True\n    if (n == 102):\n        return True\n    if (n == 103):\n        return True\n    if (n == 104):\n        return True\n    if (n == 105):\n        return True\n    if (n == 106):\n        return True\n    if (n == 107):\n        return True\n    if (n == 108):\n        return True\n    if (n == 109):\n        return True\n    if (n == 110):\n        return True\n    if (n == 111):\n        return True\n    if (n == 112):\n        return True\n    if (n == 113):\n        return True\n    if (n == 114):\n        return True\n    if (n == 115):\n        return True\n    if (n == 116):\n        return True\n    if (n == 117):\n        return True\n    if (n == 118):\n        return True\n    if (n == 119):\n        return True\n    if (n == 120):\n        return True\n    if (n == 121):\n        return True\n    if (n == 122):\n        return True\n    if (n == 123):\n        return True\n    if (n == 124):\n        return True\n    if (n == 125):\n        return True\n    if (n == 126):\n        return True\n    if (n == 127):\n        return True\n    if (n == 128):\n        return True\n    if (n == 129):\n        return True\n    if (n == 130):\n        return True\n    if (n == 131):\n        return True\n    if (n == 132):\n        return True\n    if (n == 133):\n        return True\n    if (n == 134):\n        return True\n    if (n == 135):\n        return True\n    if (n == 136):\n        return True\n    if (n == 137):\n        return True\n    if (n == 138):\n        return True\n    if (n == 139):\n        return True\n    if (n == 140):\n        return True\n    if (n == 141):\n        return True\n    if (n == 142):\n        return True\n    if (n == 143):\n        return True\n    if (n == 144):\n        return True\n    if (n == 145):\n        return True\n    if (n == 146):\n        return True\n    if (n == 147):\n        return True\n    if (n == 148):\n        return True\n    if (n == 149):\n        return True\n    if (n == 150):\n        return True\n    if (n == 151):\n        return True\n    if (n == 152):\n        return True\n    if (n == 153):\n        return True\n    if (n == 154):\n        return True\n    if (n == 155):\n        return True\n    if (n == 156):\n        return True\n    if (n == 157):\n        return True\n    if (n == 158):\n        return True\n    if (n == 159):\n        return True\n    if (n == 160):\n        return True\n    if (n == 161):\n        return True\n    if (n == 162):\n        return True\n    if (n == 163):\n        return True\n    if (n == 164):\n        return True\n    if (n == 165):"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n <= 0:\n        return False\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    \n    while n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2!= 0:\n        return False\n    while n % 2 == 0:\n        n = n // 2\n    if n == 1:\n        return True\n    if n == 2:\n        return True\n    if n % 2!= 0:\n        return False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(1, n):\n        if n == (i * i):\n            return True\n        else:\n            return False\n    return False\nn = int(input())\nprint(is_Sum_Of_Powers_Of_Two(n))"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    def is_power_of_2(x):\n        '''\n        if given number is power of 2, return 1, else return 0\n        '''\n        if x == 0:\n            return 0\n        else:\n            if x % 2 == 0:\n                return 1\n            else:\n                return 0\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    while(n):\n        x = n & 0xffff\n        if x == 0:\n            return False\n        elif x == 1:\n            return True\n        else:\n            n = n >> 2\n    return False\n    \ndef is_Sum_Of_Powers_Of_Two(n):\n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    \n    while(n):\n        x = n & 0xffff\n        if x == 0:\n            return False\n        elif x == 1:\n            return True\n        else:\n            n = n >> 2\n    return False\n    \nif __name__ == \"__main__\":\n    n = int(input(\"Enter the number : \"))\n    print(is_Sum_Of_Powers_Of_Two(n))\n    \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    # 1.The circumference of a circle is calculated using the formula of \u03c0r^2\n    circumference = (r**2)*math.pi\n    # 2.Return the circumference of the circle\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    # Convert the radius to the length of a side of a square.\n    circumference = 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    radius = 2 * r\n    pi = math.pi\n    return pi * radius\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return r * 2 * pi\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    c = 2 * math.pi * r\n    return c\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*math.pi*r\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return set(sum(test_list,[]))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    n = 1\n    result = []\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            result.extend(extract_singly(test_list[i]))\n        else:\n            result.append(test_list[i])\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return_list = []\n    for element in test_list:\n        return_list.extend(element)\n    return(return_list)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # Make a set of the values in the list.\n    numbers = set()\n    for item in test_list:\n        for num in item:\n            numbers.add(num)\n    return sorted(numbers)\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for i in test_list:\n        flattened_list.extend(i)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    \n    #1st approach:\n    # if not isinstance(test_list, list):\n    #     return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # 1. use recursion\n    if test_list == []:\n        return []\n    elif type(test_list[0]) == list:\n        return extract_singly(test_list[0]) + extract_singly(test_list[1:])\n    else:\n        return test_list[:1] + extract_singly(test_list[1:])\n    \n    # 2. use for loop\n    # results = []\n    # for i in test_list:\n    #     if type(i) == list:\n    #         results += extract_singly(i)\n    #     else:\n    #         results += i,\n    # return results\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    result = set()\n    for i in test_list:\n        if isinstance(i, list):\n            result.update(extract_singly(i))\n        else:\n            result.add(i)\n    return result\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    return list(chain.from_iterable(test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for inner in test_list:\n        for item in inner:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    '''\n    [5,1,3,2,4]\n    [4,3,2,5,1]\n    '''\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    swap(nums, 0, len(nums) - 1)\n    print(nums)\n    for i in range(len(nums) - 1, 0, -1):\n        swap(nums, i, 0)\n        print(nums)\n        if nums == sorted(nums):\n            break\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # 1. Define a helper function that accepts a list of numbers and returns the index of the\n    # largest number in the list.\n    # 2. Swap the largest number with the last element of the list and call the function again,\n    #  the time complexity of this step would be O(n) because the entire list has to be traversed once.\n    # 3. As we swap the largest element with the last element of the list, the list has to be rotated\n    # 4. Once we have the largest element swapped with the last element of the list, we have to rotate\n    # the rest of the list again and again, thus the time complexity of this operation would be\n    # O(n^2).\n    # 5. The time complexity of the entire operation would be O(n^2).\n    # 6. The code below was provided by the interviewer.\n    def get_max(nums):\n        return nums.index(max(nums))\n    def swap_elements(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    def pancake_helper(nums, idx):\n        # Base case\n        if idx == 0:\n            return\n        \n        # If the largest element in the list is the first element, then swap it with the\n        # last element and then return\n        if idx == len(nums):\n            swap_elements(nums, 0, idx)\n            return\n        \n        # Check if the last element is smaller than the first element. If it is, swap the\n        # largest element with the last element and then call the function recursively.\n        # If the last element is greater than the first element, then we need to reverse the list.\n        # Swap the last element with the first element and then call the function recursively.\n        if nums[idx] < nums[idx - 1]:\n            swap_elements(nums, idx, 0)\n            pancake_helper(nums, idx - 1)\n        else:\n            swap_elements(nums, idx, len(nums) - 1)\n            pancake_helper(nums, idx - 1)\n        \n        # Finally we need to reverse the list again to get it in the proper order\n        # after the swap operation\n        swap_elements(nums, 0, idx)\n        \n    def pancake_sort(nums):\n        '''\n        Write a function to sort a list of elements.\n        '''\n        # Base case\n        if len(nums) == 1:\n            return nums\n        \n        # Get the max index of the list. We will swap the element with the last element of the list\n        # and call the function recursively until the entire list is sorted.\n        max_index = get_max(nums)\n        \n        # Call the helper function to sort the list based on the max element.\n        pancake_helper(nums, max_index)\n        \n        # This final swap step would be required because we used the helper function\n        # to sort the list.\n        swap_elements(nums, 0, max_index)\n        \n        # After the last swap the list should be in sorted order.\n        return nums\n    \n    # The main idea of this algorithm is to swap the largest element with the last element of the list.\n    # We can do this recursively for all the elements of the list until the first element is reached.\n    def swap_elements(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    # This helper function can be used to get the index of the largest element in the list.\n    def get_max(nums):\n        return nums.index(max(nums))\n    \n    # This helper function can be used to sort the list in descending order.\n    def sort_list_descending(nums):\n        '''\n        Sort the list in descending order\n        '''\n        # Base case\n        if len(nums) == 1:\n            return nums\n        \n        # Get the max element of the list and swap it with the last element of the list.\n        max_index = get_max(nums)\n        swap_elements(nums, max_index, len(nums) - 1)\n        \n        # Call the helper function to sort the list based on the max element.\n        sort_list_descending(nums[:max_index])\n        \n        # Finally we need to reverse the list again to get it in the proper order.\n        swap_elements(nums, 0, max_index)\n        \n        # This final swap step would be required because we used the helper function\n        # to sort the list.\n        return nums\n    \n    # This function can be used to sort the list in ascending order.\n    def sort_list_ascending(nums):\n        '''\n        Sort the list in ascending order\n        '''\n        # Base case\n        if len(nums) == 1:\n            return nums\n        \n        # Get the max element of the list and swap it with the first element of the list.\n        max_index = get_max(nums)\n        swap_elements(nums, max_index, 0)\n        \n        # Call the helper function to sort the list based on the max element.\n        sort_list_ascending(nums[1:])\n        \n        # Finally we need to reverse the list again to get it in the proper order.\n        swap_elements(nums, 0, max_index)\n        \n        # This final swap step would be required because we used the helper function\n        # to sort the list.\n        return nums\n    \n    # The main idea of this algorithm is to swap the largest element with the first element of the list.\n    # We can do this recursively for all the elements of the list until the first element is reached.\n    def swap_elements(nums, i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n    \n    # This helper function can be used to get the index of the largest element in the list.\n    def get_max(nums):\n        return nums.index(max(nums))\n    \n    # This helper function can be used to sort the list in descending order.\n    def sort_list_descending(nums):\n        '''\n        Sort the list in descending order\n        '''\n        # Base case\n        if len(nums) == 1:\n            return nums\n        \n        # Get the max element of the list and swap it with the first element of the list.\n        max_index = get_max(nums)\n        swap_elements(nums, max_index, 0)\n        \n        # Call the helper function to sort the list based on the max element.\n        sort_list_descending(nums[:max_index])\n        \n        # Finally we need to reverse the list again to get it in the proper order.\n        swap_elements(nums, 0, max_index)\n        \n        # This final swap step would be required because we used the helper function\n        # to sort the list.\n        return nums\n    \n    # This function can be used to sort the list in ascending order.\n    def sort_list_ascending(nums):\n        '''\n        Sort the list in ascending order\n        '''\n        # Base case\n        if len(nums) == 1:\n            return nums\n        \n        # Get the max element of the list and swap it with the first element of the list.\n        max_index = get_max(nums)\n        swap_elements(nums, max_index, 0)\n        \n        # Call the helper function to sort the list based on the max element.\n        sort_list_ascending(nums[1:])\n        \n        # Finally we need to reverse the list again to get it in the proper order.\n        swap_elements(nums, 0, max_index)\n        \n        # This final swap step would be required because we used the helper function\n        # to sort the list.\n        return nums\n    \n    # The main idea of this algorithm is to swap the largest element with the first element of the list.\n    # We can do this recursively for all the elements of the list until the first element is reached.\n    def swap_elements(nums, i, j):\n        nums[i]"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(n-1, 0, -1):\n        index_to_swap = 0\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                index_to_swap = j+1\n        if index_to_swap!= 0:\n            nums[index_to_swap-1], nums[i] = nums[i], nums[index_to_swap-1]\n            \n        # pancake_sort(nums)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #Do not change the code below\n    for i in range(len(nums) - 1, 0, -1):\n        max_idx = nums.index(max(nums[i:]))\n        nums[i], nums[max_idx] = nums[max_idx], nums[i]\n        \n    #Do not change the code above\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Initialize the current index of the current element\n    # and the next index of the current element.\n    curr_idx = 0\n    next_idx = 1\n    # Swap the current element with the next element if\n    # the next element is larger than the current element\n    while next_idx < len(nums):\n        if nums[next_idx] > nums[curr_idx]:\n            nums[next_idx], nums[curr_idx] = nums[curr_idx], nums[next_idx]\n        next_idx += 1\n        curr_idx += 1\n    # Swap the next element with the current element if\n    # the current element is larger than the next element\n    while next_idx < len(nums):\n        if nums[next_idx] > nums[curr_idx]:\n            nums[next_idx], nums[curr_idx] = nums[curr_idx], nums[next_idx]\n        next_idx += 1\n        curr_idx += 1\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for i in range(n-1, 0, -1):\n        for j in range(i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # create a list that will store nums that are to be sorted\n    # once that list is sorted, we will place all elements in the original nums list in the correct position\n    # this will give us a pancake sort\n    sorted_nums = nums[:]\n    # initialize the largest value in the original nums list\n    largest_value = sorted_nums[0]\n    # initialize the largest index in the original nums list\n    largest_index = 0\n    # for each value in the original nums list\n    for i in range(1, len(sorted_nums)):\n        # if that value is larger than the largest value so far\n        if sorted_nums[i] > largest_value:\n            # set the largest value to that value and its index to the current index\n            largest_value = sorted_nums[i]\n            largest_index = i\n    # if the largest value is not the last element in the original nums list\n    if largest_index!= len(sorted_nums) - 1:\n        # we will reverse the list so that the largest value will be the last element in the list\n        sorted_nums.reverse()\n        # for each value in the original nums list\n        for i in range(largest_index, len(sorted_nums) - 1):\n            # we will move the current element to the end\n            sorted_nums[i] = sorted_nums[i + 1]\n        # reverse the list to get the largest value in the correct position\n        sorted_nums.reverse()\n    # return the sorted list\n    return sorted_nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    while len(nums) > 1:\n        temp = nums.pop(0)\n        nums.append(temp)\n        for i in range(n-1, -1, -1):\n            if nums[i] > temp:\n                nums.insert(i+1, nums[i])\n                nums.pop(i+1)\n                break\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # case where elements are already in order\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if list1[i]==list2[j] and list1[i]==list3[k] and list1[i]!=0:\n                    count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count_samepair=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count_samepair+=1\n    return count_samepair\ncount_samepair(list1=[1,2,1,2,3,1,2,2,3],list2=[2,3,1,2,2,1,2,3,2],list3=[2,3,1,2,2,1,2,3,2])\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num1 = list1.count(list2[0])\n    num2 = list1.count(list2[1])\n    num3 = list1.count(list2[2])\n    return num1*num2*num3\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(0,len(list1)):\n        if list1[i]==list2[i] and list2[i]==list3[i]:\n            count+=1\n    print(count)\ndef find_duplicate(list1):\n    '''\n    Write a function to find and return the duplicate number from a list of numbers. \n    '''\n    duplicate=0\n    for i in range(0,len(list1)):\n        if list1[i]==duplicate:\n            return duplicate\n        else:\n            duplicate=list1[i]\ndef fibonacci(n):\n    '''\n    Return a list containing the Fibonacci sequence up to the n-th number.\n    '''\n    # First and second terms\n    n1, n2 = 0, 1\n    fibo = []\n    while n1 < n:\n        fibo.append(n1)\n        nth = n1 + n2\n        n1 = n2\n        n2 = nth\n    return fibo\ndef remove_nth(list1,n):\n    '''\n    Write a function to remove the nth element in a list.\n    '''\n    list1=list1[:n]+list1[n+1:]\n    print(list1)\ndef sum_of_three(n):\n    '''\n    Write a function to calculate the sum of first n numbers of the Fibonacci sequence.\n    '''\n    n1, n2 = 0, 1\n    sum_of_3 = 0\n    while n1 < n:\n        sum_of_3 = n1 + n2\n        n1 = n2\n        n2 = sum_of_3\n    return sum_of_3\ndef break_words(stuff):\n    '''\n    Write a function that will break up words for us.\n    '''\n    words=stuff.split(\" \")\n    return words\ndef sort_words(words):\n    '''\n    Write a function that will sort the words.\n    '''\n    words.sort()\n    return words\ndef print_first_word(words):\n    '''\n    Write a function that prints the first word after popping it off.\n    '''\n    word=words.pop(0)\n    print(word)\ndef sort_sentence(sentence):\n    '''\n    Write a function that will take in a full sentence and then return the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last(sentence):\n    '''\n    Write a function that will print the first and last words of the sentence.\n    '''\n    words=break_words(sentence)\n    print_first_word(words)\n    print_last_word(words)\ndef first_word(sentence):\n    '''\n    Write a function that takes in a full sentence and then returns the first word.\n    '''\n    words=break_words(sentence)\n    return words[0]\ndef last_word(sentence):\n    '''\n    Write a function that takes in a full sentence and then returns the last word.\n    '''\n    words=break_words(sentence)\n    return words[-1]\ndef sentence_length(sentence):\n    '''\n    Write a function that takes in a full sentence and then returns the length of the sentence.\n    '''\n    words=break_words(sentence)\n    return len(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and then returns the sorted words.\n    '''\n    words=break_words(sentence)\n    return sort_words(words)\ndef print_first_and_last_sorted(sentence):\n    '''\n    Write a function that will take in a full sentence and the"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return len(list1) - len(set(list1) & set(list2) & set(list3))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if(list1[i]==list2[j] and list1[i]==list3[j]):\n                count+=1\n    return count\nprint(count_samepair([1,2,3,4,5,6],[1,2,3,4,5,6],[1,2,3,4,5,6])"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if list1[i]==list2[i] and list1[i]==list3[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    for index in range(0,len(list1)):\n        print(index)\n        print(list1[index])\n        print(list2[index])\n        print(list3[index])\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    if (len(list1)==len(list2) and len(list1)==len(list3)):\n        for i in range(0,len(list1)):\n            if (list1[i]==list2[i] and list1[i]==list3[i]):\n                count+=1\n        return count\n    else:\n        return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists=0\n    for i in range(len(Input)):\n        if type(Input[i])==list:\n            lists+=1\n    print(lists)\n    \ndef find_all_lists(Input): \n    '''\n    Write a function to find all lists present in the given tuple.\n    '''\n    temp_list=[]\n    for i in range(len(Input)):\n        if type(Input[i])==list:\n            temp_list.append(Input[i])\n    print(temp_list)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    return len(list(filter(lambda x: type(x) is list, Input)))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def find_lists_helper(Input): \n        '''\n        Helper function to find number of lists present in the given tuple.\n        '''\n        if type(Input) is tuple: \n            return (len(Input) == 1 and type(Input[0]) is list) or (len(Input) == 2 and type(Input[0]) is list and type(Input[1]) is list)\n        else: \n            return False\n    \n    return find_lists_helper(Input)\n    \nInput = (3, 2, 3, 4, 6, 5, 7, 8)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lst = []\n    for x in Input:\n        if x not in lst:\n            lst.append(x)\n    print(len(lst))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # Your code here\n    return len(Input)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = 0\n    for i in Input:\n        if type(i) == list:\n            lists += 1\n    return lists\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # your code here\n    l=[]\n    for i in range(len(Input)):\n        if Input[i] not in l:\n            l.append(Input[i])\n    print(l)\n    return len(l)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    def check(Input): \n        i = 0\n        while i < len(Input):\n            if type(Input[i]) == list:\n                i += 1\n            else:\n                return i\n        return -1\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    Input = tuple(map(int,Input))\n    count = 0\n    i = 0\n    while i < len(Input):\n        j = i + 1\n        while j < len(Input):\n            if Input[i] == Input[j]:\n                count += 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    L = []\n    \n    for i in range(len(Input)):\n        if Input[i] in L:\n            continue\n        else:\n            L.append(Input[i])\n    \n    return len(L)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr) < 2:\n        return -1\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    result = 0\n    for i in range(0, len(arr)-1): \n        if (arr[i] > arr[i+1]): \n            result = arr[i] - arr[i+1]\n    if result!= 0: \n        print(f\"The maximum difference between any two elements in a given array is {result}\") \n    else: \n        print(\"The maximum difference between any two elements in a given array is 0\")\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    n = len(arr)\n    max_diff = -1\n    for i in range(0, n-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if(len(arr)<2):\n        return -1\n    diff_list = []\n    for i in range(1,len(arr)):\n        diff = abs(arr[i]-arr[i-1])\n        diff_list.append(diff)\n    return max(diff_list)\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[0] - arr[1]\n    for i in range(1,len(arr)-1): \n        max_diff = max(max_diff,arr[i+1] - arr[i]) \n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if abs(arr[i]-arr[j]) > max_diff:\n                max_diff = abs(arr[i]-arr[j])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    curr_max = 0\n    for i in arr:\n        if i > curr_max:\n            curr_max = i\n        diff = abs(i - curr_max)\n        if diff > max_diff:\n            max_diff = diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(1,len(arr)):\n        if(abs(arr[i-1] - arr[i]) > max_diff):\n            max_diff = abs(arr[i-1] - arr[i])\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff=0\n    for i in range(len(arr)-1):\n        diff=abs(arr[i]-arr[i+1])\n        if diff>max_diff:\n            max_diff=diff\n    return max_diff\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 0\n    y = 1\n    while True:\n        if x * x + y * y == n:\n            return (x, y)\n        if x * x + y * y > n:\n            return None\n        x += 1\n        y = x + b * y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # The algorithm starts from 2 and consider x from 2 to n.\n    # The algorithm proceeds using the formula to get y.\n    # If y is > 0 then the equation is satisfied.\n    # If y is < 0 then the equation is not satisfied.\n    # So if y is < 0 then we can replace x by any of the values from 2 to n and keep on checking until the equation is satisfied.\n    # If y is > 0 then we can replace y by any of the values from 2 to n and keep on checking until the equation is not satisfied.\n    # So we are having to check for the condition that y is always less than 0.\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(0, n + 1):\n        for y in range(0, n + 1):\n            if x * a + y * b == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = a\n    y = b\n    for i in range(1, n):\n        if (x * x + y * y) == n:\n            return x, y\n        if (x * x + y * y) < n:\n            x += 1\n        else:\n            x -= 1\n        y = (x * y) - (a * i)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    try:\n        solution = b, a, n // a, n // b\n        return solution\n    except ValueError:\n        return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    #import pdb; pdb.set_trace()\n    for x in range(1, n+1):\n        for y in range(1, n+1):\n            if x*a + y*b == n:\n                return (x, y)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if(a == b):\n        return (a, b)\n    for x in range(1,n):\n        if(n%x == 0):\n            y = n/x\n            if(x < y and a*x + b*y == n):\n                return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    if a == 0:\n        y = b\n        x = -n/b\n    elif b == 0:\n        x = a\n        y = -n/a\n    else:\n        disc = math.gcd(a, b)\n        if disc == 1:\n            x = a\n            y = b\n        else:\n            root = math.sqrt(n)\n            if root % 1 == 0:\n                x = a\n                y = b\n            else:\n                x = -n/(2*b)\n                y = n/(2*a)\n    return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(0, n + 1):\n        for j in range(0, n + 1):\n            if a * i + b * j == n:\n                x = i\n                y = j\n                return x, y\n    return x, y\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    result_list = []\n    for i in list1:\n        if i not in list2:\n            result_list.append(i)\n    return result_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1) - set(list2))\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    \n    list1_new = []\n    for i in list1:\n        if i not in list2:\n            list1_new.append(i)\n    return list1_new\n    \ndef delete_this(list1, list2):\n    '''\n    Write a function to delete this given list from the original list and return the list.\n    '''\n    \n    return list1.remove(list2)\n    \ndef merge_sorted_lists(list1, list2):\n    '''\n    Write a function to merge the two given lists in sorted order.\n    '''\n    \n    i = j = 0\n    new_list = []\n    \n    while i < len(list1) and j < len(list2):\n        if list1[i] <= list2[j]:\n            new_list.append(list1[i])\n            i += 1\n        else:\n            new_list.append(list2[j])\n            j += 1\n    \n    new_list.extend(list1[i:])\n    new_list.extend(list2[j:])\n    \n    return new_list\n    \ndef remove_duplicates(numbers):\n    '''\n    Write a function to remove all duplicates from a list.\n    '''\n    \n    dup = []\n    for i in numbers:\n        if i not in dup:\n            dup.append(i)\n            \n    return dup\n    \ndef find_the_largest_number(list1):\n    '''\n    Write a function to find the largest number in a list.\n    '''\n    \n    max = list1[0]\n    for i in list1:\n        if i > max:\n            max = i\n    return max\n    \ndef find_the_smallest_number(list1):\n    '''\n    Write a function to find the smallest number in a list.\n    '''\n    \n    min = list1[0]\n    for i in list1:\n        if i < min:\n            min = i\n    return min\n    \ndef sum_all_elements(list1):\n    '''\n    Write a function to sum all the elements in a list.\n    '''\n    \n    sum = 0\n    for i in list1:\n        sum += i\n    return sum\n    \ndef square_all_elements(list1):\n    '''\n    Write a function to square all the elements in a list.\n    '''\n    \n    square = []\n    for i in list1:\n        square.append(i * i)\n    return square\n    \ndef binary_search(list1, target):\n    '''\n    Write a function to return the index of the target if it is present in a list.\n    '''\n    \n    if list1 == []:\n        return -1\n        \n    min = 0\n    max = len(list1) - 1\n    \n    while min <= max:\n        mid = (min + max) // 2\n        \n        if list1[mid] == target:\n            return mid\n        elif list1[mid] > target:\n            max = mid - 1\n        else:\n            min = mid + 1\n            \n    return -1\n    \ndef binary_search_recursive(list1, target):\n    '''\n    Write a function to return the index of the target if it is present in a list.\n    '''\n    \n    if list1 == []:\n        return -1\n        \n    min = 0\n    max = len(list1) - 1\n    \n    while min <= max:\n        mid = (min + max) // 2\n        \n        if list1[mid] == target:\n            return mid\n        elif list1[mid] > target:\n            max = mid - 1\n        else:\n            min = mid + 1\n            \n    return -1\n    \ndef find_the_number_of_elements(list1):\n    '''\n    Write a function to return the number of elements in a list.\n    '''\n    \n    return len(list1)\n    \ndef find_the_majority_element(list1):\n    '''\n    Write a function to return the majority element if it is present in a given list.\n    '''\n    \n    majority = 1\n    num = 0\n    \n    for i in list1:\n        if i == num:\n            majority += 1\n        else:\n            majority -= 1\n        \n        if majority == 0:\n            num = i\n            majority = 1\n            \n    return -1 if majority > len(list1)//2 else num\n    \ndef find_the_smallest_element(list1):\n    '''\n    Write a function to return the smallest element in a list.\n    '''\n    \n    return min(list1)\n    \ndef find_the_largest_element(list1):\n    '''\n    Write a function to return the largest element in a list.\n    '''\n    \n    return max(list1)\n    \ndef find_the_average_element(list1):\n    '''\n    Write a function to return the average element in a list.\n    '''\n    \n    if find_the_number_of_elements(list1) == 0:\n        return -1\n        \n    return sum(list1) / find_the_number_of_elements(list1)\n    \ndef find_the_second_largest_element(list1):\n    '''\n    Write a function to return the second largest element in a list.\n    '''\n    \n    if len(list1) <= 1:\n        return -1\n        \n    return sorted(list1)[-2]\n    \ndef find_the_third_largest_element(list1):\n    '''\n    Write a function to return the third largest element in a list.\n    '''\n    \n    if len(list1) <= 1:\n        return -1\n        \n    return sorted(list1)[-3]\n    \ndef find_the_nth_largest_element(list1, n):\n    '''\n    Write a function to return the n-th largest element in a list.\n    '''\n    \n    if len(list1) <= 1:\n        return -1\n        \n    return sorted(list1)[n - 1]\n    \ndef find_the_number_of_occurrences(list1, number):\n    '''\n    Write a function to return the number of occurrences of a given number in a list.\n    '''\n    \n    occurrence = 0\n    for i in list1:\n        if i == number:\n            occurrence += 1\n            \n    return occurrence\n    \ndef find_the_element_before_index(list1, index):\n    '''\n    Write a function to return the element before the given index.\n    '''\n    \n    if index == 0:\n        return -1\n        \n    return list1[index-1]\n    \ndef find_the_element_after_index(list1, index):\n    '''\n    Write a function to return the element after the given index.\n    '''\n    \n    if index == 0:\n        return -1\n        \n    return list1[index+1]\n    \ndef find_the_element_between_indexes(list1, start, end):\n    '''\n    Write a function to return the element in between the given indexes.\n    '''\n    \n    if start == end:\n        return -1\n        \n    return list1[start + 1:end]\n    \ndef print_by_line(list1):\n    '''\n    Write a function to print the list with each line separated by a single space.\n    '''\n    \n    if list1 == []:\n        return\n        \n    for i in range(len(list1)):\n        if i!= 0:\n            print()\n        print(list1[i], end = \" \")\n        \ndef print_by_line_reverse(list1):\n    '''\n    Write a function to print the list with each line separated by a single space.\n    '''\n    \n    if list1 == []:\n        return\n        \n    for i in range(len(list1)):\n        if i!= 0:\n            print()\n        print(list1[i], end = \" \")\n        \ndef print_by_line_reverse_alternate(list1):\n    '''\n    Write a function to print the list with each line separated by a single space.\n    '''\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    return list3\n    \nprint(remove_elements([1,2,3,4], [1,2,3]))\nprint(remove_elements([4,5,6], [1,2,3]))\nprint(remove_elements([4,5,6], []))\nprint(remove_elements([4,5,6], [1,5,6]))"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for ele in list2:\n        if ele in list1:\n            list1.remove(ele)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    if len(list1)==0:\n        return []\n    if len(list2)==0:\n        return []\n    list1=list1[0:len(list1)-len(list2)]\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = set(list1)\n    list2 = set(list2)\n    return list1 - list2\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    return (n-2) + sum_series(n-2) + sum_series(n-4)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # x = 0\n    # if n < 0:\n    #     return 0\n    # else:\n    #     return n + sum_series(n-2)\n    # return x\n    # The following is a solution to the above question\n    if n == 0:\n        return 0\n    else:\n        return n + sum_series(n-2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    elif n < 0:\n        return -1\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    a=0\n    for i in range(n):\n        a+=i\n    return a\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = int(n)\n    i = 0\n    sum = 0\n    while i <= n:\n        sum += i\n        i += 2\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n < 1:\n        return 0\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    s = 0\n    for i in range(n):\n        s += (n - 2*i)\n    return s\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    total = 0\n    i = 0\n    while i <= n:\n        total += i\n        i += 1\n    return total\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    while n >= 0:\n        sum = sum + n - 2*i\n        n = n - 2\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (n-2*i)\n    return sum\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #if sides is even, pi is (sqrt 3)/2.\n    #if sides is odd, pi is (sqrt 3)/4\n    if s%2 == 1:\n        return (pi*s/2)\n    else:\n        return (pi*s/2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    angle = (180*(s**2) / (s + 2)) / pi\n    return l * angle\ndef area_regular_polygon_prime(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s == 0:\n        return 0\n    else:\n        return l / (4*pi*(s**2))\ndef area_uniform_polygon(s, l):\n    '''\n    Write a function to calculate the area of a uniform polygon given the length and number of its sides.\n    '''\n    if s == 0:\n        return 0\n    else:\n        return l * (s**2) / 2\ndef volume_sphere(r):\n    '''\n    Write a function to calculate the volume of a sphere given the radius.\n    '''\n    return (4 / 3) * pi * r**3\ndef volume_prism(a, h):\n    '''\n    Write a function to calculate the volume of a prism given the height, width and depth.\n    '''\n    return a * h\ndef volume_cylinder(h, r):\n    '''\n    Write a function to calculate the volume of a cylinder given the height and radius.\n    '''\n    return pi * h * r**2\ndef volume_cone(r, h):\n    '''\n    Write a function to calculate the volume of a cone given the height and radius.\n    '''\n    return pi * (h / 2) * r**2\ndef volume_cone_with_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone given the height and radius.\n    '''\n    return pi * (h / 2) * (r**2 - h**2)\ndef volume_cone_with_bottom(r, h):\n    '''\n    Write a function to calculate the volume of a cone given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cuboid(l, w, h):\n    '''\n    Write a function to calculate the volume of a cuboid given the length, width and height.\n    '''\n    return l * w * h\ndef volume_parallelepiped(a, b, h):\n    '''\n    Write a function to calculate the volume of a parallelepiped given the base and height.\n    '''\n    return a * b * h\ndef volume_tetrahedron(a):\n    '''\n    Write a function to calculate the volume of a tetrahedron given the base.\n    '''\n    return (1/6) * a**3\ndef volume_cube(a):\n    '''\n    Write a function to calculate the volume of a cube given the side length.\n    '''\n    return a**3\ndef volume_cylinder_with_top(h, r):\n    '''\n    Write a function to calculate the volume of a cylinder with top given the height and radius.\n    '''\n    return pi * (h/2) * (r**2 - h**2)\ndef volume_cylinder_with_bottom(h, r):\n    '''\n    Write a function to calculate the volume of a cylinder with top given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_bottom(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom given the height and radius.\n    '''\n    return pi * (r**2 - h**2)\ndef volume_quadrilateral(a, b, h):\n    '''\n    Write a function to calculate the volume of a quadrilateral given the width, length and height.\n    '''\n    return a * b * h\ndef volume_parallelepiped_with_bottom(a, b, h):\n    '''\n    Write a function to calculate the volume of a parallelepiped with bottom given the width, length and height.\n    '''\n    return a * b * h\ndef volume_tetrahedron_with_bottom(a):\n    '''\n    Write a function to calculate the volume of a tetrahedron with bottom given the base.\n    '''\n    return (1/4) * a**3\ndef volume_cube_with_bottom(a):\n    '''\n    Write a function to calculate the volume of a cube with bottom given the side length.\n    '''\n    return a**3\ndef volume_cuboid_with_bottom(l, w, h):\n    '''\n    Write a function to calculate the volume of a cuboid with bottom given the length, width and height.\n    '''\n    return l * w * h\ndef volume_sphere_with_bottom(r):\n    '''\n    Write a function to calculate the volume of a sphere with bottom given the radius.\n    '''\n    return (4/3) * pi * r**3\ndef volume_cone_with_bottom(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone with top given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_bottom(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone with top given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_top_and_bottom(r, h):\n    '''\n    Write a function to calculate the volume of a cone with top and bottom given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_bottom_and_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom and top given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_bottom_and_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom and top given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_bottom_and_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom and top given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_bottom_and_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom and top given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_bottom_and_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom and top given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_bottom_and_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom and top given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_bottom_and_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom and top given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_bottom_and_top(r, h):\n    '''\n    Write a function to calculate the volume of a cone with bottom and top given the height and radius.\n    '''\n    return pi * (r**2) * h\ndef volume_cone_with_bottom_and_top(r, h):\n    ''"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0.25 * tan(pi/s) * (l**2)\n    return round(area, 2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    n = len(s)\n    if n == 0:\n        return 0\n    if n == 1:\n        return s[0]\n    if n == 2:\n        return s[0] * s[1] / 2\n    s_a = sum([s[i] * s[i - 1] / 2 for i in range(1, n)])\n    return s_a + (n - 1) * s[0] / 2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return l*s*(s-1)/2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pass\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    pi = 3.14\n    n = s/2\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if (len(s) < 2) or (len(l) < 2):\n        return 0\n    h = (l[0] * s[0] + l[1] * s[1]) / 2\n    x = s[0]\n    y = s[1]\n    for i in range(2, len(l)):\n        h += l[i]\n        x = x + l[i] * s[i - 1]\n        y = y + l[i] * s[i - 2]\n    if h % 2 == 0:\n        return pi * (h / 2) * (h / 2)\n    else:\n        return pi * h\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * (1 - tan(pi/s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = l * (s - 1) / 2 * tan(pi / s)\n    return round(area, 2)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors_n = []\n    #for i in range(1, n+1):\n    for i in range(1, n+1):\n        if n % i == 0:\n            divisors_n.append(i)\n    sum_divisors_n = sum(divisors_n)\n    divisors_n.sort()\n    sum_divisors_n.sort()\n    return sum_divisors_n == divisors_n\ndef rev_string(string):\n    '''\n    Write a function to reverse the given string.\n    '''\n    string = string[::-1]\n    return string\ndef is_prime(num):\n    '''\n    Write a function to determine if a given number is prime.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\ndef prime_factors(num):\n    '''\n    Write a function to find all prime factors of the given integer.\n    '''\n    factors = []\n    if num == 1:\n        return factors\n    while num % 2 == 0:\n        factors.append(2)\n        num = num // 2\n    for i in range(3, int(math.sqrt(num))+1, 2):\n        while num % i == 0:\n            factors.append(i)\n            num = num // i\n    if num > 2:\n        factors.append(num)\n    return factors\ndef sum_of_two_numbers(a, b):\n    '''\n    Write a function to calculate the sum of two given integers.\n    '''\n    return a+b\ndef next_prime(num):\n    '''\n    Write a function to find the smallest prime greater than a given integer.\n    '''\n    if num <= 1:\n        return 1\n    #num += 2\n    num = num + 1\n    while num % 2!= 0 and num!= 1:\n        num = num + 1\n    return num\ndef is_palindrome(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    s_copy = s\n    if s_copy == s[::-1]:\n        return True\n    else:\n        return False\ndef is_palindrome_string(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    n = len(s)\n    s_copy = s\n    s_copy = s_copy[::-1]\n    if s_copy == s:\n        return True\n    else:\n        return False\ndef is_palindrome_string_2(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    n = len(s)\n    start = 0\n    end = n-1\n    while start < end:\n        if s[start] == s[end]:\n            start += 1\n            end -= 1\n        else:\n            return False\n    return True\ndef number_of_evens(lst):\n    '''\n    Write a function to count the number of even integers in a given list.\n    '''\n    count = 0\n    for i in lst:\n        if i % 2 == 0:\n            count += 1\n    return count\ndef binary_search(lst, target, start, end):\n    '''\n    Write a function to perform binary search on a sorted list.\n    '''\n    if start <= end:\n        mid = (start + end) // 2\n        if target == lst[mid]:\n            return mid\n        elif target < lst[mid]:\n            return binary_search(lst, target, start, mid-1)\n        else:\n            return binary_search(lst, target, mid+1, end)\n    else:\n        return -1\ndef binary_search_1(lst, target):\n    '''\n    Write a function to perform binary search on a sorted list.\n    '''\n    if len(lst) == 0:\n        return -1\n    else:\n        mid = len(lst)//2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            return binary_search_1(lst[mid+1:], target)\n        else:\n            return binary_search_1(lst[:mid], target)\ndef binary_search_2(lst, target):\n    '''\n    Write a function to perform binary search on a sorted list.\n    '''\n    if len(lst) == 0:\n        return -1\n    else:\n        mid = len(lst)//2\n        if lst[mid] == target:\n            return mid\n        elif lst[mid] < target:\n            return binary_search_2(lst[mid+1:], target)\n        else:\n            return binary_search_2(lst[:mid], target)\ndef is_palindrome_string_3(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    n = len(s)\n    start = 0\n    end = n-1\n    while start < end:\n        if s[start] == s[end]:\n            start += 1\n            end -= 1\n        else:\n            return False\n    return True\ndef is_palindrome_string_4(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    s_copy = s\n    s_copy = s_copy[::-1]\n    if s_copy == s:\n        return True\n    else:\n        return False\ndef is_palindrome_string_5(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    n = len(s)\n    start = 0\n    end = n-1\n    while start < end:\n        if s[start] == s[end]:\n            start += 1\n            end -= 1\n        else:\n            return False\n    return True\ndef is_palindrome_string_6(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    n = len(s)\n    start = 0\n    end = n-1\n    s_copy = s\n    while start < end:\n        if s[start] == s[end]:\n            start += 1\n            end -= 1\n        else:\n            return False\n    return True\ndef is_palindrome_string_7(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    s_copy = s\n    s_copy = s_copy.lower()\n    s_copy = s_copy.replace(\" \", \"\")\n    return s_copy == s_copy[::-1]\ndef is_palindrome_string_8(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    s_copy = s\n    s_copy = s_copy.lower()\n    s_copy = s_copy.replace(\" \", \"\")\n    return s_copy == s_copy[::-1]\ndef next_palindrome(num):\n    '''\n    Write a function to find the smallest palindrome greater than a given integer.\n    '''\n    while num < 1000000:\n        num += 1\n        if is_palindrome_string_8(str(num)):\n            return num\n    return -1\ndef next_palindrome_2(num):\n    '''\n    Write a function to find the smallest palindrome greater than a given integer.\n    '''\n    while num < 1000000:\n        num += 1\n        if is_palindrome_string_8(str(num)):\n            return num\n    return -1\ndef is_palindrome_string_9(s):\n    '''\n    Write a function to determine if a given string is a palindrome.\n    '''\n    n = len(s)\n    start = 0\n    end = n-1\n    while start < end:\n        if s[start] == s[end]:\n            start += "
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    num = n\n    num_divs = 0\n    while n >= 1: \n        n = n - 1 \n        if n == 0: \n            return True\n        if n % 2 == 0: \n            n = n // 2\n            num_divs += 1\n        else: \n            n = n // 3\n            num_divs += 1\n    if num_divs == 2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return True if n%2 == 0 else False\ndef div_sum_2(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return sum(divisors) == n\ndef div_sum_3(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return sum(divisors) == n\ndef div_sum_4(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors)\ndef div_sum_5(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_6(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_7(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_8(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_9(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_10(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_11(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_12(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_13(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_14(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_15(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_16(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_17(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_18(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_19(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_20(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_21(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_22(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n%i == 0:\n            divisors.append(i)\n    return divisors == sorted(divisors, reverse = True)\ndef div_sum_23(n):\n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1,n):\n        if n%i==0:\n            divs.append(i)\n    if sum(divs)==n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divisors = []\n    if n==0:\n        return False\n    for i in range(1,int(math.sqrt(n))+1):\n        if n%i==0:\n            divisors.append(i)\n            if i!=1:\n                divisors.append(n//i)\n    return sum(divisors)==n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1,n):\n        if n % i == 0:\n            divs.append(i)\n    return (sum(divs) == n)\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 1:\n        return False\n    else:\n        divisorSum = 0\n        for i in range(1, n+1):\n            if n % i == 0:\n                divisorSum += i\n        return divisorSum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    n1 = int(n)\n    s = int((n1 + 1)/2)\n    sum = 0\n    for i in range(1, s+1):\n        if n1%i == 0:\n            sum = sum + i\n    if sum == n1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    divs = []\n    for i in range(1, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            divs.append(i)\n            divs.append(n // i)\n    return sum(divs) == n\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letter_counts = {}\n    for i in str1.lower():\n        if i in letter_counts:\n            letter_counts[i] += 1\n        else:\n            letter_counts[i] = 1\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    chars = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    count = 0\n    for i in range(len(str1)):\n        for j in range(len(chars)):\n            if str1.count(chars[j]) == 1 and str1.index(chars[j]) == i:\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str_count_pos = {}\n    str1 = str1.lower()\n    for index, letter in enumerate(str1):\n        if letter.isalpha():\n            str_count_pos[index] = str_count_pos.get(index, 0) + 1\n    return str_count_pos\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    char_dict = {}\n    for i in range(97, 123):\n        char_dict[chr(i)] = 0\n    str_lst = list(str1)\n    for i in range(0, len(str_lst)):\n        char_dict[str_lst[i].lower()] += 1\n    return(char_dict)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    '''\n    str1 = input(\"Please enter the string: \")\n    str1 = \"zdvfe\"\n    '''\n    count = 0\n    for i in range(0, len(str1)):\n        if str1[i].lower() == str1[i].lower():\n            count += 1\n    print(count)\n    \n    \ndef count_char_position_two(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    '''\n    str1 = input(\"Please enter the string: \")\n    str1 = \"zdvfe\"\n    '''\n    s = \"abcdefghijklmnopqrstuvwxyz\"\n    result = 0\n    for i in range(0, len(str1)):\n        result += 1\n        if str1[i] in s:\n            result += 1\n    print(result)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    res = 0\n    for i in range(len(str1)):\n        if str1.lower().count(str1[i].lower()) > 1:\n            res += 1\n    return res\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    return 0\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    str2 = []\n    str3 = []\n    for i in str1:\n        if i.isalpha():\n            str3.append(i)\n        if i.isnumeric():\n            str2.append(i)\n    str3 = list(dict.fromkeys(str3))\n    str2 = list(dict.fromkeys(str2))\n    a=0\n    for i in str3:\n        if i in str2:\n            a+=1\n    print(a)\ncount_char_position('Hello 123World')\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() and str1[i].lower() == str1[i].lower():\n            count = count + 1\n    print(count)\n    \n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    return sum([str1.count(c) for c in set(str1.lower())])\nprint(count_char_position('aCDF'))\nprint(count_char_position('a1B'))\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_pair_count = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    lst = []\n    even = []\n    for i in A:\n        if i&1:\n            even.append(i)\n        else:\n            lst.append(i)\n    odd = []\n    for i in lst:\n        if i&1:\n            odd.append(i)\n    odd_pairs = 0\n    for i in even:\n        for j in odd:\n            if i == j:\n                odd_pairs +=1\n    return odd_pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    \n    for i in range(len(A)):\n        if A[i] & 1 == 0:\n            for j in range(i + 1, len(A)):\n                if A[j] & 1 == 0:\n                    even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pass\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)): \n        for j in range(i + 1, len(A)): \n            if A[i] ^ A[j] == 0: \n                count = count + 1\n    return count\nprint(find_even_pair([0, 5, 2, 7, 1, 6, 8]))\nprint(find_even_pair([0, 5, 2, 7, 1, 6, 8]))\nprint(find_even_pair([0, 3, 5, 7]))\nprint(find_even_pair([0, 3, 5, 7]))\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    i = 0\n    while i < len(A):\n        j = i + 1\n        while j < len(A):\n            if A[i] ^ A[j] == 0:\n                count += 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    pairs = 0\n    count = 0\n    for num in A:\n        count = 0\n        for x in range(0, len(A)):\n            if x!= num:\n                count = count + 1\n        if count % 2 == 0 and count > 0:\n            pairs += 1\n    return pairs\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_xor = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    '''\n    Complexity\n    Time: O(n)\n    Space: O(1)\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(len(A)):\n            if i!= j and A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in A:\n        if i^2 in A and (i^2)!=0:\n            count +=1\n    return count\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    num = 0\n    power = 1\n    while power <= n:\n        power <<= 1\n        num += 1\n    return num\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    ans = 1\n    while ans <= n:\n        ans = 2**ans\n    return ans\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    power_of_2 = n - 1\n    while (1 << power_of_2) < n:\n        power_of_2 += 1\n    return power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    x = 1\n    while x<=n:\n        x *= 2\n    return x"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return 1 << (n.bit_length() - 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n <= 0:\n        return False\n    for i in range(32, -1, -1):\n        if 2**i >= n:\n            return 2**i\n    return False\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    i=1\n    while (i*2)<=n:\n        i=i*2\n    return i\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if (n==0):\n        return 0\n    if (n == 1):\n        return 1\n    if (n%2 == 0):\n        return next_power_of_2(n//2)\n    else:\n        return next_power_of_2(n+1)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # code here\n    return 2**(n.bit_length() - 1)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    # if n < 2:\n    #     return 0\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    \n    i = 0\n    if x in a:\n        for i in a:\n            if i == x:\n                a.count(x)\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in range(len(a)):\n        if x==a[i]:\n            count+=1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if x == a[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x) \ndef frequency(a,x): \n    '''\n    Write a function to count the number of occurrences o"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    frequency = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            frequency = frequency+1\n    return frequency\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in a:\n        if i==x:\n            count += 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return x.count(a)\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_list = 0\n    for i in range(m,n+1):\n        sum_list += list1[i]\n    return sum_list\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    total = 0\n    if m > 0 and n < len(list1):\n        for i in range(m-1, n):\n            total += list1[i]\n    return total\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > len(list1) or n > len(list1):\n        print('error')\n    elif m > n:\n        return\n    else:\n        result = 0\n        for i in range(m, n+1):\n            result += list1[i]\n        return result\n        \n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    while m <= n:\n        sum += list1[m]\n        m += 1\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_range = 0\n    for i in range(m-1, n):\n        sum_range += list1[i]\n    return sum_range\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n + 1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m, n+1):\n        sum = sum + list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m > len(list1) or n > len(list1):\n        return 0\n    else:\n        return sum(list1[m:n+1])\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5 * a\n    \n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (1 + math.sqrt(5))/2 * a * 2\n    return perimeter\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*(5*(math.sqrt(5)-1))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    assert a > 0, \"The side length must be > 0\"\n    return a * 5\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*5 + (a - 5)*math.sqrt(3)) / 2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a == 1:\n        return 4 * math.sqrt(2)\n    if a == 2:\n        return 2 * math.sqrt(3)\n    if a == 3:\n        return 3 * math.sqrt(2)\n    if a == 4:\n        return 4 * math.sqrt(3)\n    if a == 5:\n        return 5 * math.sqrt(2)\n    if a == 6:\n        return 6 * math.sqrt(3)\n    if a == 7:\n        return 7 * math.sqrt(2)\n    if a == 8:\n        return 8 * math.sqrt(3)\n    if a == 9:\n        return 9 * math.sqrt(2)\n    if a == 10:\n        return 10 * math.sqrt(3)\n    if a == 11:\n        return 11 * math.sqrt(2)\n    if a == 12:\n        return 12 * math.sqrt(3)\n    if a == 13:\n        return 13 * math.sqrt(2)\n    if a == 14:\n        return 14 * math.sqrt(3)\n    if a == 15:\n        return 15 * math.sqrt(2)\n    if a == 16:\n        return 16 * math.sqrt(3)\n    if a == 17:\n        return 17 * math.sqrt(2)\n    if a == 18:\n        return 18 * math.sqrt(3)\n    if a == 19:\n        return 19 * math.sqrt(2)\n    if a == 20:\n        return 20 * math.sqrt(3)\n    if a == 21:\n        return 21 * math.sqrt(2)\n    if a == 22:\n        return 22 * math.sqrt(3)\n    if a == 23:\n        return 23 * math.sqrt(2)\n    if a == 24:\n        return 24 * math.sqrt(3)\n    if a == 25:\n        return 25 * math.sqrt(2)\n    if a == 26:\n        return 26 * math.sqrt(3)\n    if a == 27:\n        return 27 * math.sqrt(2)\n    if a == 28:\n        return 28 * math.sqrt(3)\n    if a == 29:\n        return 29 * math.sqrt(2)\n    if a == 30:\n        return 30 * math.sqrt(3)\n    if a == 31:\n        return 31 * math.sqrt(2)\n    if a == 32:\n        return 32 * math.sqrt(3)\n    if a == 33:\n        return 33 * math.sqrt(2)\n    if a == 34:\n        return 34 * math.sqrt(3)\n    if a == 35:\n        return 35 * math.sqrt(2)\n    if a == 36:\n        return 36 * math.sqrt(3)\n    if a == 37:\n        return 37 * math.sqrt(2)\n    if a == 38:\n        return 38 * math.sqrt(3)\n    if a == 39:\n        return 39 * math.sqrt(2)\n    if a == 40:\n        return 40 * math.sqrt(3)\n    if a == 41:\n        return 41 * math.sqrt(2)\n    if a == 42:\n        return 42 * math.sqrt(3)\n    if a == 43:\n        return 43 * math.sqrt(2)\n    if a == 44:\n        return 44 * math.sqrt(3)\n    if a == 45:\n        return 45 * math.sqrt(2)\n    if a == 46:\n        return 46 * math.sqrt(3)\n    if a == 47:\n        return 47 * math.sqrt(2)\n    if a == 48:\n        return 48 * math.sqrt(3)\n    if a == 49:\n        return 49 * math.sqrt(2)\n    if a == 50:\n        return 50 * math.sqrt(3)\n    if a == 51:\n        return 51 * math.sqrt(2)\n    if a == 52:\n        return 52 * math.sqrt(3)\n    if a == 53:\n        return 53 * math.sqrt(2)\n    if a == 54:\n        return 54 * math.sqrt(3)\n    if a == 55:\n        return 55 * math.sqrt(2)\n    if a == 56:\n        return 56 * math.sqrt(3)\n    if a == 57:\n        return 57 * math.sqrt(2)\n    if a == 58:\n        return 58 * math.sqrt(3)\n    if a == 59:\n        return 59 * math.sqrt(2)\n    if a == 60:\n        return 60 * math.sqrt(3)\n    if a == 61:\n        return 61 * math.sqrt(2)\n    if a == 62:\n        return 62 * math.sqrt(3)\n    if a == 63:\n        return 63 * math.sqrt(2)\n    if a == 64:\n        return 64 * math.sqrt(3)\n    if a == 65:\n        return 65 * math.sqrt(2)\n    if a == 66:\n        return 66 * math.sqrt(3)\n    if a == 67:\n        return 67 * math.sqrt(2)\n    if a == 68:\n        return 68 * math.sqrt(3)\n    if a == 69:\n        return 69 * math.sqrt(2)\n    if a == 70:\n        return 70 * math.sqrt(3)\n    if a == 71:\n        return 71 * math.sqrt(2)\n    if a == 72:\n        return 72 * math.sqrt(3)\n    if a == 73:\n        return 73 * math.sqrt(2)\n    if a == 74:\n        return 74 * math.sqrt(3)\n    if a == 75:\n        return 75 * math.sqrt(2)\n    if a == 76:\n        return 76 * math.sqrt(3)\n    if a == 77:\n        return 77 * math.sqrt(2)\n    if a == 78:\n        return 78 * math.sqrt(3)\n    if a == 79:\n        return 79 * math.sqrt(2)\n    if a == 80:\n        return 80 * math.sqrt(3)\n    if a == 81:\n        return 81 * math.sqrt(2)\n    if a == 82:\n        return 82 * math.sqrt(3)\n    if a == 83:\n        return 83 * math.sqrt(2)\n    if a == 84:\n        return 84 * math.sqrt(3)\n    if a == 85:\n        return 85 * math.sqrt(2)\n    if a == 86:\n        return 86 * math.sqrt(3)\n    if a == 87:\n        return 87 * math.sqrt(2)\n    if a == 88:\n        return 88 * math.sqrt(3)\n    if a == 89:\n        return 89 * math.sqrt(2)\n    if a == 90:\n        return 90 * math.sqrt(3)\n    if a == 91:\n        return 91 * math.sqrt(2)\n    if a == 92:\n        return 92 * math.sqrt(3)\n    if a == 93:\n        return 93 * math.sqrt(2)\n    if a == 94:\n        return 94 * math.sqrt(3)\n    if a == 95:\n        return 95 * math.sqrt(2)\n    if a == 96:\n        return 96 * math.sqrt(3)\n    if a == 97:\n        return 97 * math.sqrt(2)\n    if a == 98:\n        return 98 * math.sqrt(3)\n    if a == 99:\n        return 99 * math.sqrt(2)\n    if a == 100:\n        return 100 * math.sqrt(3)\n    if a == 101:\n        return 101 * math.sqrt(2)\n    if a == 102:\n        return 102 * math.sqrt(3)\n    if a == 103:\n        return 103 * math.sqrt(2)\n    if a == 104:\n        return 104 * math.sqrt(3)\n    if a == 105:\n        return 105 * math.sqrt(2)\n    if a == 106:\n        return 106 * mat"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return ((a ** 2)*math.sqrt(5))//4\ndef is_pentagon(a,b,c):\n    '''\n    Write a function to determine if a triangle is a pentagon, based on the length of its sides\n    '''\n    if a**2 + b**2 == c**2:\n        return True\n    else:\n        return False\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from its length of its base.\n    '''\n    return a**2\ndef area_square_right(a):\n    '''\n    Write a function to find the area of a square whose right angle is 60 degrees and whose hypotenuse is a given length from its base length.\n    '''\n    return (math.sqrt(a**2 + (a**2 - math.sin(math.radians(60))**2)**2))\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle whose base and height are given lengths, and whose corners are given in the form of a tuple (x,y).\n    '''\n    return a*b\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle whose legs are given lengths, and whose base is given in the form of a tuple (x,y).\n    '''\n    return (((a + b + c) * (a * b * c)**0.5)//2)\ndef area_trapezoid(a,b,c,d):\n    '''\n    Write a function to find the area of a trapezoid whose base and height are given lengths, and whose legs are given in the form of a tuple (x,y).\n    '''\n    return (a + b + c + d)/2\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube whose face is given in the form of a length.\n    '''\n    return 6*(a**3)\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder whose base is given in the form of a length and its height in meters.\n    '''\n    return (math.pi*a*b)\ndef volume_sphere(a):\n    '''\n    Write a function to find the volume of a sphere whose radius is given in the form of a length.\n    '''\n    return 4*(math.pi*a**3)/3\ndef volume_cone(a,b,c):\n    '''\n    Write a function to find the volume of a cone whose top radius is given in the form of a length and its height in meters.\n    '''\n    return (((a**2)*math.pi)/3)*b\ndef volume_cone_right(a,b,c):\n    '''\n    Write a function to find the volume of a cone whose top radius is given in the form of a length and its height in meters. The cone must be a right angle and whose bottom radius is given in the form of a length.\n    '''\n    return (math.pi*a**2*b)/3 + math.pi*(a**2 - (a*math.sin(math.radians(60))**2)**0.5)\ndef volume_cone_right_cylinder(a,b,c,d):\n    '''\n    Write a function to find the volume of a cone whose top radius is given in the form of a length and its height in meters. The cone must be a right angle and whose bottom radius is given in the form of a length.\n    '''\n    return (a**3 + a**2*b + math.pi*(a**2 - (a*math.sin(math.radians(60))**2)**0.5) + a*c)\ndef volume_sphere_right(a):\n    '''\n    Write a function to find the volume of a sphere whose radius is given in the form of a length. The sphere must be a right angle and whose bottom radius is given in the form of a length.\n    '''\n    return ((4*math.pi*a**3)/3) + math.pi*(a**2 - (a*math.sin(math.radians(60))**2)**0.5)\ndef volume_cylinder_right(a,b):\n    '''\n    Write a function to find the volume of a cylinder whose top radius is given in the form of a length and its height in meters. The cylinder must be a right angle and whose bottom radius is given in the form of a length.\n    '''\n    return (math.pi*a*b) + math.pi*(a**2 - (a*math.sin(math.radians(60))**2)**0.5)\ndef volume_cylinder_right_sphere(a,b,c):\n    '''\n    Write a function to find the volume of a cylinder whose top radius is given in the form of a length and its height in meters. The cylinder must be a right angle and whose bottom radius is given in the form of a length.\n    '''\n    return math.pi*a*b + math.pi*(a**2 - (a*math.sin(math.radians(60))**2)**0.5) + a*c\ndef volume_cylinder_right_sphere_right(a,b,c,d):\n    '''\n    Write a function to find the volume of a cylinder whose top radius is given in the form of a length and its height in meters. The cylinder must be a right angle and whose bottom radius is given in the form of a length.\n    '''\n    return math.pi*a*b + math.pi*(a**2 - (a*math.sin(math.radians(60))**2)**0.5) + (a*c)\ndef volume_cylinder_right_sphere(a,b,c):\n    '''\n    Write a function to find the volume of a cylinder whose top radius is given in the form of a length and its height in meters. The cylinder must be a right angle and whose bottom radius is given in the form of a length.\n    '''\n    return math.pi*a*b + math.pi*(a**2 - (a*math.sin(math.radians(60))**2)**0.5) + a*c\ndef volume_cone_right_sphere_right(a,b,c,d,e):\n    '''\n    Write a function to find the volume of a cone whose top radius is given in the form of a length and its height in meters. The cone must be a right angle and whose bottom radius is given in the form of a length.\n    '''\n    return (a**3 + a**2*b + math.pi*(a**2 - (a*math.sin(math.radians(60))**2)**0.5) + a*c) + math.pi*d*e\ndef volume_cone_right_sphere_right(a,b,c,d,e):\n    '''\n    Write a function to find the volume of a cone whose top radius is given in the form of a length and its height in meters. The cone must be a right angle and whose bottom radius is given in the form of a length.\n    '''\n    return (a**3 + a**2*b + math.pi*(a**2 - (a*math.sin(math.radians(60))**2)**0.5) + a*c) + math.pi*d*e\ndef volume_sphere_right_sphere_right(a,b,c,d):\n    '''\n    Write a function to find the volume of a sphere whose radius is given in the form of a length. The sphere must be a right angle and whose bottom radius is given in the form of a length.\n    '''\n    return ((4*math.pi*a**3)/3) + math.pi*(a**2 - (a*math.sin(math.radians(60))**2)**0.5) + a*c + math.pi*d*e\ndef volume_sphere_right_sphere(a,b,c,d):\n    '''\n    Write a function to find the volume of a sphere whose radius is given in the form of a length. The sphere must be a right angle and whose bottom radius is given in the form of a length.\n    '''\n    return ((4*math.pi*a**3)/3) + math.pi*(a**2 - (a*math"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return a*5\n    pass\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon from the length of its sides.\n    '''\n    return math.sqrt(a**2*math.tan(math.pi/5))\n    pass\ndef area_regular_triangle(a,b):\n    '''\n    Write a function to find the area of a regular triangle from the length of its sides.\n    '''\n    return 0.5*a*b\n    pass\ndef area_regular_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle from the length of its sides.\n    '''\n    return a*b\n    pass\ndef area_square(a):\n    '''\n    Write a function to find the area of a square from the length of its sides.\n    '''\n    return a**2\n    pass\ndef area_circle(r):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    return math.pi*r**2\n    pass\ndef circumference_square(a):\n    '''\n    Write a function to find the circumference of a square from the length of its sides.\n    '''\n    return 4*a\n    pass\ndef circumference_circle(r):\n    '''\n    Write a function to find the circumference of a circle from its radius.\n    '''\n    return 2*math.pi*r\n    pass\ndef area_cube(a):\n    '''\n    Write a function to find the area of a cube from its length.\n    '''\n    return a**3\n    pass\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a triangle from its base and height.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    pass\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a rectangle from its length and width.\n    '''\n    return a*b\n    pass\ndef volume_cuboid(a,b,c,d):\n    '''\n    Write a function to find the volume of a cuboid from its length, width and height.\n    '''\n    return a*b*c\n    pass\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere from its radius.\n    '''\n    return 4/3*math.pi*r**3\n    pass\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    return a*b*math.sin(math.pi/3)\n    pass\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    return a*b*math.pi\n    pass\ndef area_of_vectors(v1,v2):\n    '''\n    Write a function to find the area of a vector and another vector, i.e, the cross product.\n    '''\n    return (v1[0]*v2[1]-v1[1]*v2[0])\n    pass\ndef triangle_area(a,b,c):\n    '''\n    Write a function to find the area of a triangle from its base and height.\n    '''\n    s = (a+b+c)/2\n    return math.sqrt(s*(s-a)*(s-b)*(s-c))\n    pass\ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle from its radius.\n    '''\n    return math.pi*r**2\n    pass\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube from its length.\n    '''\n    return a**3\n    pass\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere from its radius.\n    '''\n    return 4/3*math.pi*r**3\n    pass\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    return a*b*math.sin(math.pi/3)\n    pass\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    return a*b*math.pi\n    pass\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    return a*b*math.sin(math.pi/3)\n    pass\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    return a*b*math.pi\n    pass\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    return a*b*math.sin(math.pi/3)\n    pass\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    return a*b*math.pi\n    pass\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    return a*b*math.sin(math.pi/3)\n    pass\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    return a*b*math.pi\n    pass\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    return a*b*math.sin(math.pi/3)\n    pass\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    return a*b*math.pi\n    pass\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    return a*b*math.sin(math.pi/3)\n    pass\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    return a*b*math.pi\n    pass\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    return a*b*math.sin(math.pi/3)\n    pass\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    return a*b*math.pi\n    pass\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    return a*b*math.sin(math.pi/3)\n    pass\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    return a*b*math.pi\n    pass\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height.\n    '''\n    return a*b*math.sin(math.pi/3)\n    pass\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder from its radius and height.\n    '''\n    return a*b*math.pi\n    pass\ndef volume_cone(a,b):\n    '''\n    Write a function to find the volume of a cone from its radius and height"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    perimeter = (a * (5 - math.sqrt(5)))/2\n    return perimeter\ndef is_pentagonal(a):\n    '''\n    Write a function to determine whether the number is a pentagonal number.\n    '''\n    if(a**2 == (5 * a) + (5 * (a - 1))):\n        return True\n    else:\n        return False\ndef area_triangle(a, b):\n    '''\n    Write a function to find the area of a triangle from the base and height.\n    '''\n    area = (a * b)/2\n    return area\ndef is_triangle(a, b):\n    '''\n    Write a function to determine whether the number is a triangle number.\n    '''\n    if((a * b)/2 == (a + b)):\n        return True\n    else:\n        return False\ndef triangle_area(a, b):\n    '''\n    Write a function to find the area of a triangle from the base and height.\n    '''\n    area = (a * b)/2\n    return area\ndef is_rhombus(a, b):\n    '''\n    Write a function to determine whether the number is a rhombus number.\n    '''\n    if(a == b == 2):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef area_rectangle(a, b):\n    '''\n    Write a function to find the area of a rectangle from the base and height.\n    '''\n    area = a * b\n    return area\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True\n    else:\n        return False\ndef is_square(a):\n    '''\n    Write a function to determine whether the number is a square number.\n    '''\n    if(a == math.sqrt(a)):\n        return True"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(len(s)):\n        if s[i] =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for x in range(len(s)-4):\n        if (s[x:x+4] == \"std\"):\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    s = s.lower()\n    s = s.replace(\" \",\"\")\n    count = s.count('std')\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for c in s:\n        if c == 'd':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    occ = 0\n    for i in s:\n        if i == \"d\":\n            occ += 1\n    print(occ)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    if s.count('std') > 0:\n        count = s.count('std')\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for char in s:\n        if char =='s':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    # s = 'helloworld'\n    count = 0\n    for i in range(len(s)):\n        if s[i] == 't':\n            count += 1\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_list = []\n    for i in test_tuple:\n        if type(i) not in type_list:\n            type_list.append(type(i))\n    return type_list\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Please enter a Tuple\")\n    else:\n        for ele in test_tuple:\n            if not isinstance(ele, int) and not isinstance(ele, float):\n                raise TypeError(\"Please enter int or float\")\n            else:\n                if len(test_tuple) == 1:\n                    return True\n                else:\n                    return all(isinstance(elem, int) or isinstance(elem, float) for elem in test_tuple)\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    type_d = {'int': 0, 'float': 1,'str': 2}\n    if len(test_tuple)!= 4:\n        print(f'Not a valid tuple. It must have exactly four elements.')\n    else:\n        for i in range(len(test_tuple)):\n            if type(test_tuple[i]) is not type_d[test_tuple[i]]:\n                print(f'Element {i} is of different type than expected.')\n                break\n        else:\n            print(f'All elements in the tuple are of the expected type.')\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    \n    if all(isinstance(element, type(test_tuple[0])) for element in test_tuple):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for tuple_element in test_tuple:\n        if not isinstance(tuple_element, int):\n            raise TypeError('All elements in the tuple should be integers')\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    tuple_type_list = []\n    if test_tuple == tuple():\n        return None\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) not in tuple_type_list:\n            tuple_type_list.append(type(test_tuple[i]))\n    if len(set(tuple_type_list)) > 1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    test_dct = dict()\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) == str:\n            test_dct[i] = test_tuple[i]\n        else:\n            test_dct[i] = f'{type(test_tuple[i])}'\n    return test_dct\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    if len(set([type(x) for x in test_tuple])) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    print(test_tuple)\n    if type(test_tuple) is tuple:\n        for i in range(0,len(test_tuple)):\n            if type(test_tuple[i]) is tuple or type(test_tuple[i]) is list:\n                check_type(test_tuple[i])\n            elif type(test_tuple[i]) is dict:\n                check_type(test_tuple[i])\n            elif type(test_tuple[i]) is str:\n                print(\"str\")\n            else:\n                print(\"numeric\")\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for item in test_tuple:\n        if type(item)!= int:\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge case: empty array\n    if not arr:\n        return -1\n    # edge case: 1 element\n    if len(arr) == 1:\n        return arr[0]\n    # edge case: 2 elements\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[0]\n    # edge case: 3 elements\n    if len(arr) == 3:\n        if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[1]!= arr[2]:\n            return arr[0]\n        elif arr[1]!= arr[2]:\n            return arr[1]\n        else:\n            return arr[2]\n    # binary search\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (high+low)//2\n        if arr[mid] == x:\n            return True\n        if x < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n    \ndef is_majority_two(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge case: empty array\n    if not arr:\n        return -1\n    # edge case: 1 element\n    if len(arr) == 1:\n        return arr[0]\n    # edge case: 2 elements\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[0]\n    # edge case: 3 elements\n    if len(arr) == 3:\n        if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[1]!= arr[2]:\n            return arr[0]\n        elif arr[1]!= arr[2]:\n            return arr[1]\n        else:\n            return arr[2]\n    # binary search\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (high+low)//2\n        if arr[mid] == x:\n            return True\n        if x < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n    \ndef is_majority_two_better(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # edge case: empty array\n    if not arr:\n        return -1\n    # edge case: 1 element\n    if len(arr) == 1:\n        return arr[0]\n    # edge case: 2 elements\n    if len(arr) == 2:\n        if arr[0]!= arr[1]:\n            return arr[0]\n        else:\n            return arr[0]\n    # edge case: 3 elements\n    if len(arr) == 3:\n        if arr[0]!= arr[1] and arr[0]!= arr[2] and arr[1]!= arr[2]:\n            return arr[0]\n        elif arr[1]!= arr[2]:\n            return arr[1]\n        else:\n            return arr[2]\n    # binary search\n    low, high = 0, len(arr)-1\n    while low <= high:\n        mid = (high+low)//2\n        if arr[mid] == x:\n            return True\n        if x < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return False\n    "
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    s = 0\n    a = 0\n    for i in range(n):\n        if arr[i] == x:\n            s += 1\n    if s > n//2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    return 0\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) < n:\n        return False\n    else:\n        if arr[len(arr)-1] == x:\n            return True\n        else:\n            for i in range(len(arr)-1):\n                if arr[i] == x and arr[i+1] == x:\n                    return True\n                elif arr[i] == x:\n                    return False\n                elif arr[i+1] == x:\n                    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if n==1:\n        if arr[0] == x:\n            return True\n        return False\n    if arr[n//2] == x:\n        return True\n    if arr[n//2-1] == x:\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in arr:\n        count += 1\n        if i == x:\n            return True\n        else:\n            count = count - 1\n    return False"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > (n/2):\n        return True\n    else:\n        return False\n    \ndef majority(arr, n):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element, and returns the index of the element that occurs more than n/2 times in the given array.\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    if count > (n/2):\n        return i\n    else:\n        return -1\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if len(arr) == 0:\n        return False\n    if arr[n-1] == x:\n        return True\n    if arr[n-1]!= x and arr[0] == x:\n        return True\n    if arr[n-1] == x and arr[0]!= x:\n        return False\n    for i in range(0, n-1):\n        if arr[i] == x:\n            if (i+1) == (n-1):\n                return True\n            if arr[i+1]!= x:\n                return False\n            else:\n                continue\n        if arr[i]!= x and arr[i+1] == x:\n            if (i+2) == (n-1):\n                return True\n            if arr[i+2]!= x:\n                return False\n            else:\n                continue\n        if arr[i]!= x and arr[i+1]!= x and arr[i+2] == x:\n            if (i+3) == (n-1):\n                return True\n            if arr[i+3]!= x:\n                return False\n            else:\n                continue\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    def majority_element(arr, n, x):\n        majority = 0\n        count = 0\n        for i in range(0, n):\n            if arr[i] == x:\n                count = count + 1\n            if arr[i] == majority:\n                count = count + 1\n            else:\n                majority = x\n                count = 1\n            if count > n//2:\n                return True\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    left = 0\n    right = n-1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == x:\n            return True\n        elif arr[mid] > x:\n            right = mid - 1\n        else:\n            left = mid + 1\n    return False\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    s = 0\n    while n:\n        s += 1\n        n = n&(n-1)\n    return s\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # n=int(n)\n    count=0\n    while n:\n        count+=1\n        n&=n-1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    n = abs(n)\n    count = 0\n    while(n):\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n!= 0:\n        n = n & (n-1)\n        c = c + 1\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n:\n        count += n & 1\n        n >>= 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    \n    # empty string to store the bits\n    x = \"\"\n    \n    # loop to check all the bits in the given number\n    while n > 0:\n        if n & 1 == 1:\n            x = x + \"1\"\n        else:\n            x = x + \"0\"\n        n = n >> 1 # bitwise shift\n        \n    # converting the string to integer and storing the number of set bits\n    count = int(x, 2)\n    print(count)\n    \n    \n    \ndef merge_Sorted_Array(A, m, B, n):\n    '''\n    Write a function to merge two sorted arrays such that the resulting array contains the elements of\n    both the input arrays in sorted order.\n    Input:\n    A = {1, 2, 4, 5, 6, 9, 10, 11, 13} and m = 3\n    B = {1, 2, 3, 4, 6, 8, 10, 11, 13} and n = 4\n    Output:\n    {1, 2, 3, 4, 5, 6, 8, 9, 10, 11, 13}\n    '''\n    \n    # empty list to store the elements of the merged array\n    C = []\n    \n    i = j = 0\n    \n    # loop to add the elements of A and B to C\n    while i < m and j < n:\n        \n        # if the first element of A is less than the element in B\n        if A[i] < B[j]:\n            C.append(A[i])\n            i += 1\n        \n        # if the first element of B is less than the element in A\n        else:\n            C.append(B[j])\n            j += 1\n            \n    # add the rest of the elements in A and B\n    C.extend(A[i:])\n    C.extend(B[j:])\n    \n    return C\n    \n    \n    \ndef find_the_range(arr, n):\n    '''\n    Write a python function to find the range of an array.\n    Input:\n    arr = {1, 4, 5, 10, 13, 20, 2}\n    Output:\n    [2, 6]\n    '''\n    \n    # empty list to store the elements in the range\n    r = []\n    \n    # loop to find the range of the array\n    for i in range(n):\n        if i == 0:\n            r.append(arr[i])\n        else:\n            r.append(arr[i] - arr[i-1])\n        \n    # returning the range of the array\n    return r\n    \n    \n    \ndef find_the_duplicates(s):\n    '''\n    Write a python function to find the duplicates in a given string.\n    Input:\n    s = \"ababac\"\n    Output:\n    {'c', 'b'}\n    '''\n    \n    # creating a hash set to store the characters\n    s_set = set()\n    \n    # loop to find the duplicates in the string\n    for i in range(len(s)):\n        if s[i] not in s_set:\n            s_set.add(s[i])\n        else:\n            s_set.remove(s[i])\n            \n    # returning the duplicates\n    return s_set\n    \n    \n    \ndef intersect(lst1, lst2):\n    '''\n    Write a python function to find the common items between two sorted lists.\n    Input:\n    lst1 = {1, 2, 3, 4, 5}\n    lst2 = {5, 6, 7, 8, 9}\n    Output:\n    [5, 6]\n    '''\n    \n    # empty list to store the common elements\n    common = []\n    \n    # loop to find the common elements\n    for i in range(len(lst1)):\n        if lst1[i] in lst2 and lst1[i] not in common:\n            common.append(lst1[i])\n    \n    # returning the common elements\n    return common\n    \n    \n    \ndef triangle_number(num):\n    '''\n    Write a python function to print the triangle numbers.\n    Input:\n    num = 3\n    Output:\n    3\n    '''\n    \n    # empty list to store the triangle numbers\n    t = []\n    \n    # loop to find the triangle numbers\n    for i in range(1, num + 1):\n        t.append(i * (i + 1))\n        \n    # printing the triangle numbers\n    for i in t:\n        print(i)\n        \n    \n    \ndef find_nth_prime(n):\n    '''\n    Write a python function to find the nth prime number.\n    Input:\n    n = 2\n    Output:\n    2\n    '''\n    \n    # empty list to store the prime numbers\n    prime = []\n    \n    # loop to find the prime numbers\n    for i in range(2, 1000001):\n        prime.append(i)\n        \n    # loop to check the primes\n    for j in range(2, len(prime)):\n        if j == len(prime):\n            break\n        k = j\n        while prime[k] > 1:\n            if prime[j] % prime[k] == 0:\n                break\n            k += 1\n        else:\n            prime[j] = prime[k]\n            \n    # finding the nth prime number\n    for i in range(len(prime)):\n        if i == n-1:\n            print(prime[i])\n            \n    \n    \ndef find_all_primes(n):\n    '''\n    Write a python function to find all the primes in a range.\n    Input:\n    n = 10\n    Output:\n    [2, 3, 5, 7]\n    '''\n    \n    # empty list to store the prime numbers\n    prime = []\n    \n    # loop to find the prime numbers\n    for i in range(2, n + 1):\n        prime.append(i)\n        \n    # loop to check the primes\n    for j in range(len(prime)):\n        if j == len(prime):\n            break\n        k = j\n        while prime[k] > 1:\n            if prime[j] % prime[k] == 0:\n                break\n            k += 1\n        else:\n            prime[j] = prime[k]\n            \n    # returning all the prime numbers in the range\n    return prime\n    \n    \n    \ndef find_odd_even_num(s):\n    '''\n    Write a python function to find the odd and even numbers in a string.\n    Input:\n    s = abcdefg\n    Output:\n    {'e', 'd'}\n    '''\n    \n    # creating a hash set to store the odd and even numbers\n    odd = even = set()\n    \n    # loop to find the odd and even numbers in the string\n    for i in range(len(s)):\n        if i % 2 == 0:\n            even.add(s[i])\n        else:\n            odd.add(s[i])\n            \n    # returning the odd and even numbers\n    return odd, even\n    \n    \n    \ndef find_distinct_words(sentence):\n    '''\n    Write a python function to find the distinct words in a given sentence.\n    Input:\n    sentence = hello world hello\n    Output:\n    {'hello', 'world'}\n    '''\n    \n    # creating a hash set to store the distinct words\n    d = set()\n    \n    # loop to find the distinct words in the sentence\n    for i in range(len(sentence)):\n        if sentence[i] not in d:\n            d.add(sentence[i])\n        else:\n            d.remove(sentence[i])\n            \n    # returning the distinct words\n    return d\n    \n    \n    \ndef sort_array(arr):\n    '''\n    Write a python function to sort the array in increasing order.\n    Input:\n    arr = [2, 2, 1, 3]\n    Output:\n    [1, 2, 2, 3]\n    '''\n    \n    # creating a new array\n    new_arr = []\n    \n    # loop to sort the array\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[j"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n-1)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str = str.lower()\n    new = \"\"\n    for index, letter in enumerate(str):\n        if index % 2 == 0:\n            new += letter\n    print(new)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    print(str.replace(\"0\",\"\"))\nodd_values_string(\"4 5 6 7 8 9 10 11 12\")\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([x for i, x in enumerate(str) if i%2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    count = 0\n    new_str = \"\"\n    # Write your code here\n    for i in range(len(str)):\n        if count % 2 == 0:\n            new_str += str[i]\n        count += 1\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str[::2]\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return str.translate(str.maketrans(\"\", \"\", \"\".join([\"\"] + [char for index, char in enumerate(str) if index%2!=0])))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    list1 = []\n    for i in range(len(str)):\n        if i%2!= 0:\n            list1.append(str[i])\n    return \"\".join(list1)\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    res = ''\n    if str:\n        for i in range(0, len(str)):\n            if i % 2 == 0:\n                res = res + str[i]\n    else:\n        print(\"Invalid input\")\n    return res\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    # Write your code here\n    return str.replace(''.join([str[i] for i in range(len(str)) if i%2==0]))\n    \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # if a>b and a>c:\n    #     min = a\n    # elif b>a and b>c:\n    #     min = b\n    # else:\n    #     min = c\n    \n    # return min\n    \n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\n    \n    \nprint(min_of_three(3,4,5))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a \n    if min_num > b:\n        min_num = b \n    if min_num > c:\n        min_num = c\n    return min_num \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    if b<=a and b<=c:\n        return b\n    return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    min_num = a\n    if b < min_num:\n        min_num = b\n    if c < min_num:\n        min_num = c\n    return min_num\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b < c:\n        return a\n    elif b < c < a:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<=b and a<=c:\n        return a\n    elif b<=a and b<=c:\n        return b\n    else:\n        return c\n    \nprint(min_of_three(10,20,30))"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a\n    if b < a and b < c: \n        return b\n    if c < a and c < b: \n        return c\n    return None\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(bin(n)[2:])\n    print(bin(l)[2:])\n    print(bin(r)[2:])\n    if(bin(n)[2:]).count('1') == (bin(l)[2:]).count('1') + (bin(r)[2:]).count('1') :\n        print(\"YES\")\n    else:\n        print(\"NO\")\n        \nall_Bits_Set_In_The_Given_Range(0,9,11)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if (r-l+1)%2!=0:\n        return False\n    else:\n        while l<r:\n            if (n&l)!=0:\n                return False\n            l+=1\n        return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    assert (l <= r), \"Invalid Input\"\n    \n    count = 0\n    for i in range(l,r+1):\n        if i == 0:\n            if (i & i)!= 0:\n                count = count + 1\n        else:\n            if (i & i - 1)!= 0:\n                count = count + 1\n    if count == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return not (l & (1 << (r - l + 1)))\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    for i in range(n):\n        if i < l or i > r:\n            continue\n        if (i & (i+1) & (i+2) & (i+3) & (i+4) & (i+5) & (i+6) & (i+7) & (i+8) & (i+9)):\n            return False\n    return True"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count = 0\n    while(l <= r):\n        count += 1\n        l = l >> 1\n    return (count == 1)\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    if (l<0 or l>r or l>n or r<0 or r>n):\n        return \"Invalid Input\"\n    \n    bits_set_in_the_range = 0\n    for i in range(n):\n        if (i>=l and i<=r):\n            if(i-l<r-i):\n                if(i-l==0):\n                    bits_set_in_the_range+=1\n                else:\n                    bits_set_in_the_range += 2**(i-l)\n            else:\n                bits_set_in_the_range += (2**(r-i)-2**(i-l))\n    if bits_set_in_the_range == n:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(\"Checking the range from\",l,\"to\",r)\n    for i in range(l,r+1):\n        print(\"Bits of\",i,\":\",bin(i)[2:].count('0'),end=\" \")\n        if(bin(i)[2:].count('0')>0):\n            print(\"\\t\",end=\" \")\n        else:\n            print(\"\\n\",end=\" \")\n            \nall_Bits_Set_In_The_Given_Range(1,6,5)  \n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    return r-l+1 == ((2**n)-1) & (2**(n-1) -1)\n    "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(f'The bits which are unset in range {l} to {r} in the given list {n} are: ')\n    for i in range(l,r+1):\n        if(n[i]==0):\n            print(i,end=' ')\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i]<0:\n            arr[i], arr[i+n] = arr[i+n], arr[i]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    def next_positive(arr):\n        '''\n        Find the next positive integer in array arr\n        '''\n        i = 0\n        while i < len(arr):\n            if arr[i] > 0:\n                return i\n            i += 1\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Brute Force Solution\n    # N = len(arr)\n    # for i in range(n):\n    #     if arr[i] > 0:\n    #         j = i\n    #         while j < N and arr[j] < 0:\n    #             arr[j], arr[j+1] = arr[j+1], arr[j]\n    #             j += 1\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Step 1\n    arr_rearranged = [-1] * n\n    # Step 2\n    for i in range(n):\n        if arr[i] < 0:\n            # Step 3\n            arr_rearranged[i] = 0\n            # Step 4\n            idx = i\n            while idx >= n:\n                # Step 5\n                arr_rearranged[idx] = -1\n                idx -= 1\n    # Step 6\n    return arr_rearranged\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    if n == 0:\n        return []\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr_copy = arr.copy()\n    arr_copy.sort()\n    \n    # pad the array with n zeros\n    for i in range(n):\n        arr_copy.insert(0, 0)\n    \n    for i in range(n):\n        arr[i] = arr_copy[i]\n    \n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # The positive half of the array\n    pos = arr[:n]\n    # The negative half of the array\n    neg = arr[n:]\n    # Sort both halves in ascending order\n    pos.sort()\n    neg.sort()\n    # Merge the sorted arrays\n    arr = pos + neg\n    # Return the result\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    rearranged_array = []\n    if len(arr) < n:\n        return arr\n    else:\n        if arr[0] < 0:\n            rearranged_array = arr[:n] + [-x for x in arr[n:]]\n        else:\n            rearranged_array = arr[n:] + arr[:n]\n    return rearranged_array\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] > 0:\n            continue\n        else:\n            while arr[i] < 0:\n                arr.append(arr.pop(i))\n            break\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # for negative and positive elements, left and right pointers\n    left, right = 0, n - 1\n    # loop through the array and swap elements\n    while left < right:\n        # swap elements\n        arr[left], arr[right] = arr[right], arr[left]\n        left += 1\n        right -= 1\n    # print(arr)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','*')\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    lst1 = list(str1)\n    for i in range(len(lst1)):\n        if lst1[i]==' ':\n            lst1[i]=char\n    lst1 = \"\".join(lst1)\n    return lst1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_string = str1.replace(' ','')\n    return new_string\n    \ndef replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(\" \",char)\n    return str1\n    \n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','\\t')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    if str1.count(\" \")!= 0:\n        str1 = str1.replace(\" \",char)\n    return str1\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(\" \",\"\")\n    "
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    \n    print(str1.replace(\" \",\"\"))\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str1 = str1.replace(' ','')\n    str1 = str1.replace('\\n','')\n    return str1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list_n = []\n    for i in range(n):\n        max = list1[0]\n        for j in range(len(list1)):\n            if list1[j] > max:\n                max = list1[j]\n        list_n.append(max)\n        list1.remove(max)\n    return list_n\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return list1[-n:]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    l = list1\n    h=[]\n    m=len(l)\n    for i in range(m-n+1):\n        heapq.heappush(h,l[i])\n        m-=1\n    while h:\n        heapq.heappop(h)\n    l1=[]\n    for i in range(n):\n        l1.append(h[i])\n    return l1\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(key = lambda x: x[n], reverse = True)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    # heapsort(list1)\n    # return sorted(list1, key=lambda x: x[0])[:n]\n    heapq.heapify(list1)\n    sorted_list = []\n    for i in range(n):\n        sorted_list.append(heapq.heappop(list1))\n    return sorted_list\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest = []\n    list1.sort()\n    heapq.heapify(list1)\n    for i in range(n):\n        largest.append(heapq.heappop(list1))\n    return largest\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    return list1[:n]\n    \ndef large_n_items(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse = True)\n    return list1[:n]\n    \ndef total_item(list1):\n    '''\n    Write a function that takes in a list and returns a list containing the total value of all items in the list.\n    '''\n    return sum(list1)\n    \ndef large_item(list1):\n    '''\n    Write a function that takes in a list and returns the largest item in the list.\n    '''\n    return max(list1)\n    \ndef small_item(list1):\n    '''\n    Write a function that takes in a list and returns the smallest item in the list.\n    '''\n    return min(list1)\n    \ndef mode_item(list1):\n    '''\n    Write a function that takes in a list and returns the most common item in the list.\n    '''\n    return max(set(list1), key = list1.count)\n    \ndef max_pair(list1):\n    '''\n    Write a function that takes in a list of integers and returns a tuple containing the first integer in the list and the second integer in the list that have the maximum value.\n    '''\n    return max(set(list1), key = list1.count)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = list1\n    heapq.heapify(heap)\n    \n    if(n>=len(list1)):\n        return []\n    \n    for i in range(n):\n        x=heapq.heappop(heap)\n        # print(x)\n    return heap\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    minheap=[]\n    for i in range(n):\n        heapq.heappush(minheap,list1[i])\n    for i in range(n,len(list1)):\n        if list1[i]<minheap[0]:\n            heapq.heappop(minheap)\n            heapq.heappush(minheap,list1[i])\n    print(minheap)\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    if len(list1)<=n:\n        return list1\n    largest = heapq.nlargest(n,list1)\n    return largest\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # import numpy as np\n    # def lateralsurface(r,h):\n    #     # a=np.array([1,1,1])\n    #     # b=np.array([1,2,3])\n    #     # c=np.array([1,1,1])\n    #     # d=np.array([1,2,3])\n    #     # b=np.array([1,2,3])\n    #     # print(a)\n    #     # print(b)\n    #     # print(c)\n    #     # print(d)\n    #     # print(np.cross(a,b))\n    #     # print(np.cross(b,c))\n    #     # print(np.cross(c,d))\n    #     # print(np.cross(d,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # print(np.cross(b,a))\n    #     # prin"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return math.pi*r*(r+h)\n    \ndef surface_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*math.pi*r*(r+h)\n    \ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r**3*(r+h)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surfacetotal=2*pi*(r**2)\n    surfacetotal=surfacetotal+2*pi*(r*h)\n    return surfacetotal\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = math.pi * r**2\n    return area * h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #The equation of a cylinder is given by\n    #pi*r*h = area\n    #pi*r^2 = area\n    #2*pi*r = area\n    #area = 2*pi*r*h = pi*r^2 + pi*r^2\n    #area = pi*(r^2)*h + pi*(r^2)\n    #area = pi*(r^2)*h\n    #area = pi*(r^2 + r^2)\n    #area = pi*(r^2 + r^2 + r^2)\n    #area = 2*pi*r*(r^2 + r^2)\n    #area = 2*pi*r*(r^2 + r^2)\n    #area = pi*r^2*(r^2 + r^2)\n    #area = pi*r^2*r^2\n    #area = pi*r^2\n    area = pi*r*(r*r + r*r)\n    return area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    #SOLUTION\n    '''\n    r = radius\n    h = height\n    area = pi*r*h\n    return area\n    '''\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    theta = np.arange(0, 2*np.pi, 0.01)\n    R = r*np.cos(theta)\n    l = h*np.sin(theta)\n    lateralsuface = np.pi*r**2*l\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    print(f'The lateral surface area of a cylinder with radius {r} and height {h} is: {2*pi*r*h}.')\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    a = math.pi * h\n    b = math.pi * (r ** 2)\n    return (a * b) + a\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return (2*math.pi*r*h) + (2*math.pi*r**2)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    \n    return l*l*l\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    assert l>=0\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (6*(l**3))\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l <= 0:\n        raise ValueError('Invalid side length')\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l == 1:\n        return 1\n    return l * volume_cube(l-1)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | (1 << (len(bin(n)) - 3))\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    binary_number = bin(n)\n    binary_number = binary_number[2:]\n    \n    for i in range(len(binary_number)):\n        if binary_number[i] == '0':\n            binary_number = binary_number[:i] + '1' + binary_number[i+1:]\n    \n    binary_number = int(binary_number,2)\n    return binary_number\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return (n & 0x55555555)\nprint(even_bit_set_number(0x0F0F0F0F0F))\nprint(even_bit_set_number(0x0F0F0F0F0F0F0F0F0F0))\nprint(even_bit_set_number(0x
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    for i in range(1,n+1):\n        if i%2 == 0:\n            print(i,end = \" \")\n    print(\"\")\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = int(input())\n    while n > 0:\n        print(n & 1)\n        n = n >> 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n |= (1 << (n.bit_length() - 1)) - 1\n    return n \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x01\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n | 0x01\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n & 0x01 == 0:\n        return n\n    else:\n        return n | 0x01\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    new_dict = dict()\n    for tuple in test_list:\n        key = tuple[0], tuple[1]\n        if key in new_dict:\n            new_dict[key] += 1\n        else:\n            new_dict[key] = 1\n    return new_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Code here\n    my_dict = {}\n    for val in test_list:\n        if val in my_dict:\n            my_dict[val] += 1\n        else:\n            my_dict[val] = 1\n    return my_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Your code here\n    n = len(test_list)\n    d = {}\n    for t in test_list:\n        if t not in d:\n            d[t] = 1\n        else:\n            d[t] += 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurences_dict = dict()\n    for item in test_list:\n        if item in occurences_dict.keys():\n            occurences_dict[item] = occurences_dict[item] + 1\n        else:\n            occurences_dict[item] = 1\n    return occurences_dict\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    temp = Counter(test_list)\n    return temp\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    #use dict comprehension\n    return {key:len(list(value)) for key,value in Counter(test_list).items()}\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in test_list:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    return d\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurrences = {}\n    for i in test_list:\n        if i in occurrences:\n            occurrences[i] += 1\n        else:\n            occurrences[i] = 1\n    return occurrences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counts = Counter(test_list)\n    return counts\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    count = 0\n    for i in range(length):\n        for j in range(i,length):\n            substr = str[i:j+1]\n            if substr:\n                count +=1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!='':\n            for j in range(i, len(str)):\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    substrings = 0\n    for i in range(0, len(str)):\n        for j in range(i + 1, len(str) + 1):\n            substrings = substrings + 1\n    return substrings\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \" \":\n            count += 1\n    print(count)\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    # initialize total_count\n    total_count = 0\n    # iterate through each substring\n    for i in range(len(str)):\n        # calculate length of current substring\n        current_substring_length = len(str) - i\n        # check if current substring length is not equal to zero\n        if current_substring_length > 0:\n            # increment total_count\n            total_count += 1\n    return total_count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    from collections import defaultdict\n    \n    count = 0\n    if len(str) == 1:\n        count = 1\n    else:\n        #n-1 valid substrings\n        n = len(str)\n        cnt = defaultdict(int)\n        for i in range(n-1):\n            for j in range(i+1,n):\n                s = str[i:j]\n                if s!= \"\" and s not in cnt:\n                    count += 1\n                    cnt[s] = 1\n    return count\n    \n    \n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count=0\n    start=0\n    while start<len(str):\n        end=start+1\n        while end<len(str):\n            if str[start:end]!=\"\" and str[start:end] not in str[start+1:end]:\n                count=count+1\n            end=end+1\n        start=start+1\n    return count\n    \nprint(number_of_substrings(\"abcdabc\"))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    if len(str) == 0:\n        return 0\n    count = 1\n    for i in range(1, len(str)):\n        if str[i - 1] == str[i]:\n            count += 1\n        else:\n            count = 1\n        if count == 5:\n            return 5\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    res = 0\n    for i in range(0, len(str)):\n        s = str[i:]\n        if len(s) <= 0:\n            continue\n        tmp = s\n        tmp = tmp.replace(\"\", \"\")\n        if tmp == \"\":\n            continue\n        res += 1\n    return res\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)-1):\n        if str[i]!= \" \" and str[i]!= \" \" and str[i+1]!= \" \":\n            count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    Intuition: \n        \n        You can get the length of a sequence by the formula len(sequence) = (n-1) + k, where k is the index of the last element. \n        \n        Let's look at the first example: \n        \n        [1, 2, 3, 4, 5] - Length = 5, k = 0\n        \n        The first sequence has len(1 + 2 + 3 + 4 + 5) = 10 and k = 0\n        \n        Let's try another example:\n        \n        [1, 2, 3, 4, 5, 6] - Length = 6, k = 0\n        \n        The first sequence has len(1 + 2 + 3 + 4 + 5 + 6) = 15 and k = 0\n        \n        We can see that the length of the first sequence is k = 0, and the total number of possible sequences is k = 2\n        \n        Given m and n, the total number of possible sequences is k = 0 + 2, which is n - 1 + k\n    \n    Solution: \n        \n        The total number of possible sequences is equal to the number of possible sequences with length k = 0, plus the number of possible sequences with length k = 1, plus the number of possible sequences with length k = 2, plus the number of possible sequences with length k = 3, etc.\n        \n        So we can write:\n        \n        (n - 1) + k + k + k + k + k +... + k = m\n        \n        And we have the same number of solutions.\n        \n        So now we need to transform m to the form (n - 1) + k + k + k + k + k +... + k + k\n        \n        We can write m = (n - 1) * k + 1\n        \n        We can see that we have the same number of solutions as k = 0, 1, 2, 3, etc.\n        \n        So now we have the formula:\n        \n        (n - 1) + k + k + k + k + k +... + k = m\n        \n        And we can rewrite m = (n - 1) + k + k + k + k + k +... + k = (n - 1) + m\n        \n        m = (n - 1) + m\n        \n        Let's try it out:\n        \n        [1, 2, 3, 4, 5] - Length = 5, k = 0\n        \n        The first sequence has len(1 + 2 + 3 + 4 + 5) = 10 and k = 0\n        \n        The total number of possible sequences is k = 0 + 2 = 2\n        \n        Let's try another example:\n        \n        [1, 2, 3, 4, 5, 6] - Length = 6, k = 0\n        \n        The first sequence has len(1 + 2 + 3 + 4 + 5 + 6) = 15 and k = 0\n        \n        The total number of possible sequences is k = 0 + 2 = 2\n        \n        So we have the same number of solutions as k = 0, 1, 2, 3, etc.\n        \n        So now we have the formula:\n        \n        (n - 1) + m + m + m + m + m +... + m = (n - 1) + m\n        \n        m = (n - 1) + m\n        \n        Let's try it out:\n        \n        [1, 2, 3, 4, 5, 6] - Length = 6, k = 0\n        \n        The first sequence has len(1 + 2 + 3 + 4 + 5 + 6) = 15 and k = 0\n        \n        The total number of possible sequences is k = 0 + 2 = 2\n        \n        So now we have the same number of solutions as k = 0, 1, 2, 3, etc.\n        \n        So now we have the formula:\n        \n        (n - 1) + (n - 1) + m + m + m + m +... + m = (n - 1) + m\n        \n        m = (n - 1) + m\n        \n        Let's try it out:\n        \n        [1, 2, 3, 4, 5, 6] - Length = 6, k = 0\n        \n        The first sequence has len(1 + 2 + 3 + 4 + 5 + 6) = 15 and k = 0\n        \n        The total number of possible sequences is k = 0 + 2 = 2\n        \n        So now we have the same number of solutions as k = 0, 1, 2, 3, etc.\n        \n        So now we have the formula:\n        \n        (n - 1) + (n - 1) + (n - 1) + m + m + m +... + m = (n - 1) + m\n        \n        m = (n - 1) + m\n        \n        Let's try it out:\n        \n        [1, 2, 3, 4, 5, 6] - Length = 6, k = 0\n        \n        The first sequence has len(1 + 2 + 3 + 4 + 5 + 6) = 15 and k = 0\n        \n        The total number of possible sequences is k = 0 + 2 = 2\n        \n        So now we have the same number of solutions as k = 0, 1, 2, 3, etc.\n        \n        So now we have the formula:\n        \n        (n - 1) + (n - 1) + (n - 1) + (n - 1) + m + m + m +... + m = (n - 1) + m\n        \n        m = (n - 1) + m\n        \n        Let's try it out:\n        \n        [1, 2, 3, 4, 5, 6] - Length = 6, k = 0\n        \n        The first sequence has len(1 + 2 + 3 + 4 + 5 + 6) = 15 and k = 0\n        \n        The total number of possible sequences is k = 0 + 2 = 2\n        \n        So now we have the same number of solutions as k = 0, 1, 2, 3, etc.\n        \n        So now we have the formula:\n        \n        (n - 1) + (n - 1) + (n - 1) + (n - 1) + (n - 1) + m + m + m +... + m = (n - 1) + m\n        \n        m = (n - 1) + m\n        \n        Let's try it out:\n        \n        [1, 2, 3, 4, 5, 6] - Length = 6, k = 0\n        \n        The first sequence has len(1 + 2 + 3 + 4 + 5 + 6) = 15 and k = 0\n        \n        The total number of possible sequences is k = 0 + 2 = 2\n        \n        So now we have the same number of solutions as k = 0, 1, 2, 3, etc.\n        \n        So now we have the formula:\n        \n        (n - 1) + (n - 1) + (n - 1) + (n - 1) + (n - 1) + (n - 1) + m + m + m +... + m = (n - 1) + m\n        \n        m = (n - 1) + m\n        \n        Let's try it out:\n        \n        [1, 2, 3, 4, 5, 6] - Length = 6, k = 0\n        \n        The first sequence has len(1 + 2 + 3 + 4 + 5 + 6) = 15 and k = 0\n        \n        The total number of possible sequences is k = 0 + 2 = 2\n        \n        So now we have the same number of solutions as k = 0, 1, 2, 3, etc.\n        \n        So now we have the formula:\n        \n        (n - 1) + (n - 1) + (n - 1) + (n - 1) + (n - 1) + (n - 1) + (n - 1) + m + m + m +... + m = (n - 1) + m\n        \n        m = (n - 1) + m\n        \n        Let's try it out:\n        \n        [1, 2, 3, 4, 5, 6] - Length = 6, k = 0\n        \n        The first sequence has len(1 + 2 + 3 + 4 + 5 + 6) = 15 and k = 0\n        \n        The total number of possible sequences is k = 0 + 2 = 2\n        \n        So now we have the same number of solutions as k = 0, 1, 2, 3, etc.\n        \n        So now we have the formula:\n        \n        (n - 1) + (n - 1) + (n - 1) + "
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    Example:\n    Input: 1, 2\n    Output: 10\n    There are 10 possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    '''\n    1. Initialize a boolean array, a\n    2. Initialize a integer array, dp\n    3. Initialize an integer, count\n    4. Start looping from 1 to m\n        a. Initialize dp with count = 0\n        b. Increment dp[i] by 1\n        c. If dp[i] is greater than m, then break\n        d. Else\n            a. Increment count by 1\n            b. For i = 1 to n\n                a. Increment dp[i] by dp[i - 1]\n    5. Return count\n    '''\n    count = 0\n    a = []\n    for i in range(1,m+1):\n        a.append(i)\n    dp = []\n    for i in range(0,m+1):\n        dp.append(0)\n    for i in range(1,m+1):\n        if a[i] > 2*a[i-1] and a[i] <= m:\n            count += 1\n            for j in range(1,n+1):\n                if dp[i-1] + j <= m:\n                    dp[i] += dp[i-1]\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def helper(n,m,arr):\n        if len(arr) == n:\n            return 1\n        else:\n            tmp = 0\n            for i in range(len(arr)-1):\n                if arr[i] <= arr[i+1] and arr[i] <= 2*arr[i+1]:\n                    tmp += helper(n,m,arr[:i]+arr[i+1:])\n            return tmp\n    return helper(n,m,[])\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def fib(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        else:\n            return fib(n-1)+fib(n-2)\n    \n    def fib2(n):\n        if n == 0:\n            return 1\n        if n == 1:\n            return 1\n        else:\n            return fib2(n-1)+fib2(n-2)\n    \n    count = 0\n    for i in range(m,n+1):\n        if fib2(i)>=(2*i) and fib2(i)<=(m+1):\n            count+=1\n    print(count)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    '''\n    i=0\n    t=m-1\n    while t<n:\n        i+=1\n        t=m-1\n        while t>0:\n            t=t-1\n    return i\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    if (m == 0):\n        return 0\n    if (n == 1):\n        return 1\n    else:\n        return m*get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    total_number_of_sequences = 0\n    for i in range(m+1):\n        if i > 0 and i < m:\n            total_number_of_sequences += int(m*i/2) + int(i*(m-i)/2)\n        elif i > m and i < 2*m:\n            total_number_of_sequences += int(m*i/2) + int(i*(m-i)/2)\n    return total_number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    return 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        count += math.factorial(n-1)/(math.factorial(i)*math.factorial(n-i-1))*(m**i)*((m-m**i)/(m+m**i))\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    #initialize list \n    answer = []\n    #get all the possible sequences \n    for i in range(0,m+1):\n        for j in range(0,m+1):\n            if (i<=j) and (j*2<=m):\n                if (i*2>m) or (i*2<=j):\n                    answer.append([i,j])\n    #print answer \n    print answer \n    #get the number of sequences \n    number_of_sequences = len(answer)\n    return number_of_sequences \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2[-1]\n    print(list1)\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    for i in range(len(list1)):\n        list1[i]=list2[i]\n    return list1\nprint(replace_list([1,2,3,4],[5,6,7]))\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # list1[-1] = list2[0]\n    # return list1\n    list1[0:len(list1)-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1 = list1[:-1]\n    list1 += list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #Make sure the lists are of equal size\n    if len(list1) == len(list2):\n        #Make a copy of list1\n        list1_copy = list1.copy()\n        #Remove last element from list1\n        list1_copy.pop()\n        #Append elements of list2 to list1_copy\n        for num in list2:\n            list1_copy.append(num)\n        return list1_copy\n    else:\n        print('The lengths of the lists are not the same.')\n        return\n        \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[:-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1 = list1[:len(list1)-1]\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    # SOLUTION\n    return(list1[:len(list2)-1] + list2)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    total = 0\n    for i in str1:\n        total = total + 1\n    return total\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # Solution 1 \n    count = 0\n    for i in str1:\n        count += 1\n    return count\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    # count_charac = str1.count(' ')\n    count_charac = str1.count(' ')\n    return count_charac\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    pass\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    count = 0\n    for i in range(len(str1)):\n        count += 1\n    return count\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N=int(N)\n    x=int(math.sqrt(N))\n    for i in range(x,0,-1):\n        if N%i==0:\n            y=N//i\n            return y*y\n        else:\n            continue\ndef Problem_05(N):\n    '''\n    Write a python function that finds the next perfect square greater than a given number.\n    '''\n    N=int(N)\n    x=int(math.sqrt(N))\n    for i in range(x,0,-1):\n        if N%i==0:\n            y=N//i\n            return y*y\n        else:\n            continue\ndef Factorial(n):\n    '''\n    Write a python function to find the factorial of a given number.\n    '''\n    n=int(n)\n    if n==0:\n        return 1\n    else:\n        return n*Factorial(n-1)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return 1\n    if N == 1:\n        return 1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    #N = int(input(\"Enter a number: \"))\n    squares = []\n    for i in range(N,0,-1):\n        x = i*i\n        if x not in squares:\n            squares.append(x)\n    return None\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 1:\n        return 1\n    # if N = 2^x, then N = 2^(x+1)\n    if N % 2 == 0:\n        return N + 1\n    x = int(math.sqrt(N))\n    return x*(x+1)\nprint(next_Perfect_Square(100))\nprint(next_Perfect_Square(50))\nprint(next_Perfect_Square(3))\nprint(next_Perfect_Square(1))\nprint(next_Perfect_Square(5))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N == 1):\n        return N\n    i = 1\n    while(True):\n        i += 1\n        if((i*i) > N):\n            return i-1\n            \ndef is_prime(N):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if(N <= 1):\n        return False\n    for i in range(2,N):\n        if(N % i == 0):\n            return False\n    return True\ndef is_Perfect_square(N):\n    '''\n    Write a python function to check whether a given number is perfect square or not.\n    '''\n    return math.sqrt(N).is_integer()\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    # print(math.sqrt(N))\n    while math.sqrt(N)!= int(math.sqrt(N)):\n        N += 1\n    return N\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    ans = 1\n    while(ans * ans < N):\n        ans = ans + 1\n    return ans * ans\n        \n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sqr_num = int(math.sqrt(N))\n    for i in range(sqr_num+1,2*sqr_num):\n        if i**2 == N:\n            return i\n        if i**2 > N:\n            return i-1\n        if i**2 < N:\n            return i\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    square = N + 1\n    while (math.sqrt(square)!= math.floor(math.sqrt(square))):\n        square += 1\n    print(square)\n    return square\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    return int((N**.5)+1)**2\n    \n    \ndef Smallest_Kth_Bitonic_Sequence(k, arr):\n    '''\n    Implement a function which takes an array and a number k. The function should find the k-th smallest element in the array.\n    '''\n    \n    def find_bitonic_sequence_length(arr, k):\n        l = len(arr)\n        if l <= 1:\n            return l\n        if l == 2:\n            return 1 if (arr[0] < arr[1]) else 2\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #Approach 1\n    #Brute Force\n    max_value = -sys.maxsize - 1\n    for i in range(len(arr)):\n        curr = 0\n        for j in range(i, len(arr)):\n            curr += arr[j]\n            if curr > max_value:\n                max_value = curr\n    return max_value\n    \n    #Approach 2\n    #O(n) time | O(1) space\n    '''\n    We can solve this problem in O(n) time by keeping a running maxSum variable as well as a running minSum variable.\n    1. For each element in the input array, we compute the maximum sum we can get by either adding it or subtracting it from the maximum sum of a previously seen subsequence.\n    2. The maximum sum we can get is the sum of the array elements plus the maximum sum of all the elements we've seen so far.\n    3. The minimum sum we can get is the sum of the array elements minus the minimum sum of all the elements we've seen so far.\n    4. The maximum sum of an array is the sum of the array elements.\n    5. The minimum sum of an array is the negative of the sum of the array elements.\n    \n    '''\n    \n    max_sum = float('-inf')\n    min_sum = float('inf')\n    \n    curr_max = 0\n    curr_min = 0\n    for num in arr:\n        curr_max = max(curr_max + num, num)\n        curr_min = min(curr_min + num, num)\n        \n        max_sum = max(curr_max, max_sum)\n        min_sum = min(curr_min, min_sum)\n    \n    return max_sum - min_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def max_sequence(arr, index, subsequence):\n        max_so_far = subsequence[0]\n        max_ending_here = -1\n        for i in range(index, len(arr)):\n            max_ending_here += arr[i]\n            if max_ending_here < 0:\n                max_ending_here = 0\n            if max_ending_here > max_so_far:\n                max_so_far = max_ending_here\n                subsequence = [max_ending_here]\n            elif max_ending_here == max_so_far:\n                subsequence.append(max_ending_here)\n        return max_so_far, subsequence\n    \n    return max_sequence(arr, 0, [-1])[0]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # return max(bitonic_sub(arr, len(arr), 0, len(arr) - 1))\n    \n    # Brute Force\n    result = 0\n    for i in range(1, len(arr)):\n        max_sub_sum_at_i = 0\n        for j in range(i):\n            max_sub_sum_at_i = max(max_sub_sum_at_i, arr[j])\n            result = max(result, max_sub_sum_at_i + arr[i])\n    return result\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #Define the base cases \n    if len(arr) == 1: \n        return arr[0]\n    \n    #TODO: Define the base cases: \n    # max_sum(arr) = max(max_sum(arr[0:i]) + max_sum(arr[i:n]))\n    # max_sum(arr) = max_sum(arr[0:i])\n    # max_sum(arr) = max_sum(arr[i:n])\n    # max_sum(arr) = max_sum(arr)\n    \n    #TODO: Find the max_sum value and return it\n    #first_max_sum = max(max_sum(arr[0:i]), max_sum(arr[i:n]))\n    max_sum = max_sum_recursive(arr, len(arr) - 1)\n    return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    arr = sorted(arr)\n    res = float('-inf')\n    sum_cur = 0\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            sum_cur += arr[i] - arr[i-1]\n            res = max(res, sum_cur)\n        else:\n            sum_cur = 0\n            res = max(res, sum_cur)\n    return res\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 0:\n        return 0\n    max_ending_here = max_so_far = arr[0]\n    for x in arr[1:]:\n        max_ending_here = max(max_ending_here + x, x)\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    # max_sum = 0\n    # for i in range(len(arr)):\n    #     max_sum = max(max_sum, arr[i] + max_sum)\n    # print(max_sum)\n    # max_sum = 0\n    # for i in range(len(arr)):\n    #     max_sum = max(max_sum, arr[i] + max_sum)\n    # return max_sum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    maxi = 0\n    mini = 0\n    cmax = 0\n    cmin = 0\n    for i in range(0,n):\n        if arr[i] > cmax:\n            cmax = arr[i]\n        if arr[n-i-1] > cmax:\n            cmax = arr[n-i-1]\n        if arr[i] < cmin:\n            cmin = arr[i]\n        if arr[n-i-1] < cmin:\n            cmin = arr[n-i-1]\n    return (cmax + cmin)\n    \n    \ndef find_pivot(arr,low,high): \n    '''\n    Write a function that takes an array as input and finds the middle element in the array.\n    '''\n    if low > high:\n        return low\n    mid = (low + high)//2\n    if arr[mid] > arr[mid + 1]:\n        return mid\n    if arr[mid] < arr[mid - 1]:\n        return mid - 1\n    if arr[mid - 1] > arr[mid]:\n        return find_pivot(arr,mid + 1, high)\n    return find_pivot(arr,low,mid - 1)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 1:\n        return number\n    else:\n        return babylonian_squareroot(number / 2) + 0.5\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    lower_limit = 0\n    upper_limit = number\n    try:\n        while True:\n            mid_point = (upper_limit+lower_limit)//2\n            if (mid_point*mid_point) == number:\n                return mid_point\n            if (mid_point*mid_point) > number:\n                upper_limit = mid_point\n            else:\n                lower_limit = mid_point\n    except ValueError as e:\n        print(e)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 1 or number == 0:\n        return number\n    else:\n        return number - (babylonian_squareroot(number) / 2)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = 0.1\n    while abs(guess**2 - number) >= 0.00000001:\n        guess = guess - (guess**2 - number)/(2*guess)\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number / 2\n    if abs(guess - number) < 0.0001:\n        return guess\n    else:\n        guess = babylonian_squareroot(guess)\n        return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number < 0:\n        print('Error: Square root of negative number.')\n        return\n    previous_guess = 0\n    for i in range(100):\n        guess = (previous_guess + number/previous_guess)/2\n        previous_guess = guess\n    return guess\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    print('\\n\\n')\n    print('squareroot_babylonian')\n    epsilon = 0.01\n    x = 1.0\n    for i in range(1,number):\n        x = (x + (1 / x)) / 2.0\n        print('{0} : {1}'.format(i,x))\n        if abs(x - 1) < epsilon:\n            break\n    return x\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number <= 0:\n        print(\"Not a valid input\")\n        return 0\n    low = 0\n    high = number\n    mid = (low + high) // 2\n    \n    while abs(mid**2 - number) >= 0.00001:\n        if mid**2 < number:\n            low = mid\n        else:\n            high = mid\n        mid = (low + high) // 2\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    import math\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return number\n    x = number\n    while x > 0:\n        x = x // 2\n        if x == 0:\n            return x\n        y = x\n    while y > 0:\n        y = y // 2\n        if y == 0:\n            return y\n        if y > x:\n            return y\n    if y < 0:\n        return y\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    return\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    m=0\n    str=list(str)\n    for i in range(len(str)):\n        for j in range(len(str)-i):\n            if str[i]==str[j]:\n                l=1\n                for k in range(i,j+1):\n                    if str[i+l]==str[j-l]:\n                        l=l+1\n                        if l>m:\n                            m=l\n    return m\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    \n    max_length = 1\n    start = 0\n    \n    for i in range(len(str)-1): \n        odd = str[i]\n        even = str[i+1]\n        \n        if odd == even: \n            if i + 2 >= len(str): \n                break\n            \n            odd = str[i]\n            even = str[i+2]\n            \n            if odd == even:\n                max_length += 2\n                start = i\n            else: \n                max_length += 1\n        else: \n            max_length = 1\n            start = i + 1\n            \n    return max_length\n    \n    \nprint(lps(\"abcba\"))\nprint(lps(\"abdba\"))\nprint(lps(\"aaaa\"))\nprint(lps(\"caca\"))\nprint(lps(\"gadada\"))\nprint(lps(\"zzzzzzz\"))\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def check(string, i, j):\n        while i < j:\n            if string[i] == string[j]:\n                i += 1\n                j -= 1\n            else:\n                break\n        return j - i\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    s = str\n    n = len(s)\n    dp = [[0]*n for _ in range(n)]\n    if s == s[::-1]:\n        return n\n    else:\n        for i in range(n-1, -1, -1):\n            if i == 0:\n                dp[i][i] = 1\n            else:\n                for j in range(i+1):\n                    if s[i] == s[j]:\n                        if (i-j+1) > dp[i+1][j-1]:\n                            dp[i][j] = dp[i+1][j-1] + 2\n                        else:\n                            dp[i][j] = 1 + dp[i-j+1][j]\n                    else:\n                        dp[i][j] = 1\n    return max([max(x) for x in dp])\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_util(str, i, j): \n        if i>=j: \n            return 0\n        if str[i] == str[j]: \n            return 2 + lps_util(str, i+1, j-1) \n        else: \n            return max(lps_util(str, i, j-1), lps_util(str, i+1, j)) \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    def isPalindrome(str):\n        start = 0\n        end = len(str) - 1\n        while start < end:\n            if str[start] == str[end]:\n                start += 1\n                end -= 1\n            else:\n                return False\n        return True\n    maxLen = 0\n    start = 0\n    end = 0\n    for i in range(len(str)):\n        if str[i] in d:\n            start = d[str[i]]\n        else:\n            start = end + 1\n        end = start\n        maxLen = max(maxLen, end - start + 1)\n        d[str[i]] = end\n    return maxLen\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #only need to check alphabets and strings of lenght 1\n    if len(str) <= 1: \n        return 1\n    \n    lps_arr = [0]*len(str)\n    lps_arr[0] = 0\n    lps_arr[1] = 1\n    for i in range(2,len(str)):\n        lps_arr[i] = max(lps_arr[i-2] + 1, lps_arr[i-1]) \n        if str[i-1] == str[i]: \n            lps_arr[i] = max(lps_arr[i], lps_arr[i-1]) \n    \n    return lps_arr[-1] \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    s = str + '#' + str + '#'\n    n = len(s)\n    dp = [[0] * n for _ in range(n)]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            if s[i] == s[j]:\n                if i == j:\n                    dp[i][j] = 2\n                else:\n                    dp[i][j] = dp[i-1][j-1] + 2\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    return dp[-1][-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # dp_array = [[0 for x in range(len(str))] for x in range(len(str))]\n    # longest = 0\n    # for i in range(1, len(str)):\n    #     for j in range(0, i):\n    #         if str[i] == str[j]:\n    #             if dp_array[i][j] < 2:\n    #                 dp_array[i][j] = 1\n    #             else:\n    #                 dp_array[i][j] = dp_array[i-1][j-1] + 2\n    #         else:\n    #             dp_array[i][j] = 0\n    #         if dp_array[i][j] > longest:\n    #             longest = dp_array[i][j]\n    # return longest\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + 1 / i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return sum(1 / i for i in range(2, n+1))\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # Your code here\n    return 1/n\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1 / (1 + n)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1/(n - 1) + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # calculate the sum of 1 / (i+1) for each i from 1 to n\n    # 1 / (1 + 2) = 1 / 2 = 0.5\n    # 1 / (1 + 3) = 1 / 3 = 0.3333333333333\n    # 1 / (1 + 4) = 1 / 4 = 0.25\n    # 1 / (1 + 5) = 1 / 5 = 0.2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return n / (n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    assert type(n) == int, 'n must be an integer.'\n    assert n > 0, 'n must be a positive integer.'\n    sum = 0\n    for i in range(n):\n        sum = sum + 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    # base case\n    if n == 1:\n        return 1\n    else:\n        return 1/n + harmonic_sum(n-1)\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return sorted(list(set(array_nums1)&set(array_nums2)))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    if len(array_nums1) < len(array_nums2):\n        return list(set(array_nums1) & set(array_nums2))\n    else:\n        return list(set(array_nums2) & set(array_nums1))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1).intersection(set(array_nums2)))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    array_nums1 = set(array_nums1)\n    array_nums2 = set(array_nums2)\n    result = array_nums1.intersection(array_nums2)\n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection_nums = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            intersection_nums.append(array_nums1[i])\n            i += 1\n            j += 1\n    return intersection_nums\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    #create a dictionary\n    intersect_dict = {}\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # Using hashmap\n    # time complexity: O(n+m)\n    # space complexity: O(n+m)\n    hashmap = {}\n    for num in array_nums1:\n        hashmap[num] = 1\n    for num in array_nums2:\n        if num in hashmap:\n            return num\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    count_array1=0\n    count_array2=0\n    i=0\n    j=0\n    intersect_list=[]\n    while i<len(array_nums1) and j<len(array_nums2):\n        if array_nums1[i]==array_nums2[j]:\n            intersect_list.append(array_nums1[i])\n            count_array1+=1\n            count_array2+=1\n            i+=1\n            j+=1\n        elif array_nums1[i]<array_nums2[j]:\n            i+=1\n        else:\n            j+=1\n    return intersect_list,count_array1,count_array2\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    \n    nums1 = array_nums1.copy()\n    nums2 = array_nums2.copy()\n    \n    if len(nums1) < len(nums2):\n        nums1,nums2 = nums2,nums1\n        \n    nums1.sort()\n    nums2.sort()\n    \n    if nums1[0] > nums2[-1]:\n        return []\n    \n    result = []\n    \n    for num in nums1:\n        if num in nums2:\n            result.append(num)\n    \n    return result\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result = []\n    i = 0\n    j = 0\n    while i < len(array_nums1) and j < len(array_nums2):\n        if array_nums1[i] < array_nums2[j]:\n            i += 1\n        elif array_nums1[i] > array_nums2[j]:\n            j += 1\n        else:\n            result.append(array_nums1[i])\n            i += 1\n            j += 1\n    return result\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occ_count = 0\n    for item in tup:\n        if item == x:\n            occ_count += 1\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if ele == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x) \n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    #iterate through the list\n    for i in range(len(list)):\n        #if the index is 0, insert the element before the first element in the list\n        if i == 0:\n            list.insert(i,element)\n            return list\n        else:\n            #else, insert element in between the elements\n            list.insert(i,element)\n    #return the list\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list)==0:\n        return [element]\n    elif len(list)==1:\n        return list + [element]\n    else:\n        return list[:1] + insert_element(list[1:],element)\n    "
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    if len(list) == 0:\n        return list\n    return list[:1] + [element] + list[1:]\n    # Write your function here\n    \n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(0,len(list)):\n        list[i]=element\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] == element:\n            list.insert(i,element)\n        i += 1\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return (list[:]) + (element,) + (list[:])\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.insert(0, element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    counter = 0\n    while counter < len(list):\n        if list[counter] == element:\n            list.insert(counter,element)\n            return list\n        counter += 1\n    list.append(element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list.insert(0,element)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Code here\n    def to_polar(complex_number):\n        '''\n        returns the polar coordinates from complex number\n        complex_number = {real : r, imaginary : i}\n        '''\n        real = complex_number.real\n        imag = complex_number.imag\n        \n        # assigning the polar coordinates\n        r = (real**2) + (imag**2)\n        i = 2 * real * imag\n        \n        return (r, i)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_array = []\n    for i in numbers:\n        r = (i.real)**2\n        theta = (i.imag)\n        polar_array.append((r,theta))\n    return polar_array\n    \ndef convert_complex(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    polar_array = []\n    for i in numbers:\n        r = (i.real)**2\n        theta = (i.imag)\n        polar_array.append((r,theta))\n    return polar_array\n        \ndef sort_polar(polar):\n    polar_array = sorted(polar, key=lambda x: (x[1],x[0]))\n    return polar_array\n    \ndef sort_cart(cart):\n    cart_array = sorted(cart, key=lambda x: (x[0]**2+x[1]**2,x[0]))\n    return cart_array\n    \ndef sort_r_theta(r_theta):\n    r_theta_array = sorted(r_theta, key=lambda x: (x[0]))\n    return r_theta_array\n    \ndef find_index(polar_array):\n    length = len(polar_array)\n    for i in range(length):\n        if polar_array[i][0] == max(polar_array[i][0], polar_array[i][1]) and polar_array[i][0]!= 0:\n            return i\n    return length-1\n    \ndef to_cart(polar_array):\n    cart_array = []\n    for i in range(len(polar_array)):\n        r, theta = polar_array[i]\n        cart_array.append((r*cmath.cos(theta),r*cmath.sin(theta)))\n    return cart_array\n    \ndef add_zeros(polar_array):\n    for i in range(len(polar_array)):\n        polar_array[i][0] = polar_array[i][0] * 10**(-i)\n    return polar_array\n    \ndef no_zero(polar_array):\n    for i in range(len(polar_array)):\n        if polar_array[i][0]!= 0:\n            return polar_array\n    return []\n    \ndef convert_r_theta(r_theta):\n    r_theta_array = []\n    for i in range(len(r_theta)):\n        r,theta = r_theta[i]\n        r_theta_array.append((r*cmath.cos(theta),r*cmath.sin(theta)))\n    return r_theta_array\n    \ndef convert_cart(cart):\n    cart_array = []\n    for i in range(len(cart)):\n        x,y = cart[i]\n        cart_array.append((x*cmath.cos(y),y*cmath.sin(y)))\n    return cart_array\n    \ndef sort_r_theta(r_theta):\n    r_theta_array = sorted(r_theta, key=lambda x: (x[1],x[0]))\n    return r_theta_array\n    \ndef merge_sort(numbers):\n    if len(numbers) > 1:\n        middle = int(len(numbers)/2)\n        left_array = numbers[:middle]\n        right_array = numbers[middle:]\n        merge_sort(left_array)\n        merge_sort(right_array)\n        i,j,k = 0,0,0\n        while i < len(left_array) and j < len(right_array):\n            if left_array[i][0] < right_array[j][0]:\n                numbers[k] = left_array[i]\n                i += 1\n            else:\n                numbers[k] = right_array[j]\n                j += 1\n            k += 1\n        while i < len(left_array):\n            numbers[k] = left_array[i]\n            i += 1\n            k += 1\n        while j < len(right_array):\n            numbers[k] = right_array[j]\n            j += 1\n            k += 1\n    return numbers\n    \ndef merge_sort_complex(numbers):\n    if len(numbers) > 1:\n        middle = int(len(numbers)/2)\n        left_array = numbers[:middle]\n        right_array = numbers[middle:]\n        merge_sort_complex(left_array)\n        merge_sort_complex(right_array)\n        i,j,k = 0,0,0\n        while i < len(left_array) and j < len(right_array):\n            if left_array[i][0] < right_array[j][0]:\n                numbers[k] = left_array[i]\n                i += 1\n                k += 1\n            else:\n                numbers[k] = right_array[j]\n                j += 1\n                k += 1\n        while i < len(left_array):\n            numbers[k] = left_array[i]\n            i += 1\n            k += 1\n        while j < len(right_array):\n            numbers[k] = right_array[j]\n            j += 1\n            k += 1\n    return numbers\n    \ndef merge_sort_complex_r_theta(r_theta):\n    if len(r_theta) > 1:\n        middle = int(len(r_theta)/2)\n        left_array = r_theta[:middle]\n        right_array = r_theta[middle:]\n        merge_sort_complex_r_theta(left_array)\n        merge_sort_complex_r_theta(right_array)\n        i,j,k = 0,0,0\n        while i < len(left_array) and j < len(right_array):\n            if left_array[i][1] < right_array[j][1]:\n                r_theta[k] = left_array[i]\n                i += 1\n                k += 1\n            else:\n                r_theta[k] = right_array[j]\n                j += 1\n                k += 1\n        while i < len(left_array):\n            r_theta[k] = left_array[i]\n            i += 1\n            k += 1\n        while j < len(right_array):\n            r_theta[k] = right_array[j]\n            j += 1\n            k += 1\n    return r_theta\n    \ndef merge_sort_cart(cart):\n    if len(cart) > 1:\n        middle = int(len(cart)/2)\n        left_array = cart[:middle]\n        right_array = cart[middle:]\n        merge_sort_cart(left_array)\n        merge_sort_cart(right_array)\n        i,j,k = 0,0,0\n        while i < len(left_array) and j < len(right_array):\n            if cart[left_array[i]] < cart[right_array[j]]:\n                cart[k] = cart[left_array[i]]\n                i += 1\n                k += 1\n            else:\n                cart[k] = cart[right_array[j]]\n                j += 1\n                k += 1\n        while i < len(left_array):\n            cart[k] = cart[left_array[i]]\n            i += 1\n            k += 1\n        while j < len(right_array):\n            cart[k] = cart[right_array[j]]\n            j += 1\n            k += 1\n    return cart\n    \ndef merge_sort_cart_r_theta(r_theta):\n    if len(r_theta) > 1:\n        middle = int(len(r_theta)/2)\n        left_array = r_theta[:middle]\n        right_array = r_theta[middle:]\n        merge_sort_cart_r_theta(left_array)\n        merge_sort_cart_r_theta(right_array)\n        i,j,k = 0,0,0\n        while i < len(left_array) an"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        polar = complex(numbers[i])\n        phase = polar.phase()\n        amplitude = polar.real**2 + polar.imag**2\n        print('The angle is :',phase)\n        print('The amplitude is :',amplitude)\n    \nnumbers = []\nprint('Enter the numbers : ')\nfor i in range(3):\n    print('Enter the complex numbers : ',end='')\n    numbers.append(complex(int(input()),int(input())))\nconvert(numbers)"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(0, len(numbers)):\n        #print(numbers[i])\n        if(type(numbers[i]) == complex):\n            if(numbers[i].imag == 0):\n                #print(numbers[i].real)\n                numbers[i] = abs(numbers[i].real)\n                #print(numbers[i])\n            elif(numbers[i].real == 0):\n                #print(numbers[i].imag)\n                numbers[i] = cmath.phase(numbers[i])\n                #print(numbers[i])\n            else:\n                #print(numbers[i].real)\n                #print(numbers[i].imag)\n                numbers[i] = abs(numbers[i].real), cmath.phase(numbers[i])\n                #print(numbers[i])\n    return numbers\n        \nif __name__ == '__main__':\n    #print(convert([1+2j,3+4j,5+6j,7+8j,9+10j,11+12j]))\n    print(convert([1+2j,3+4j,5+6j,7+8j,9+10j,11+12j]))\n    #print(convert([1+2j,3+4j,5+6j,7+8j,9+10j,11+12j]))\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # Complex numbers can be written in polar coordinates in the form \n    # (r, theta) where r is the modulus and theta is the angle in radians.\n    # The polar coordinates are then converted into cartesian coordinates \n    # (x, y) in the form of (x, y) = (r*cos(theta), r*sin(theta)).\n    \n    #Example:\n    #Input : 4 -2j\n    #Output : (3.0, 1.57079633)\n    \n    #Input : 2-3j\n    #Output : (2.0, 1.57079633)\n    \n    #Input : 4 -2j\n    #Output : (3.0, 1.57079633)\n    \n    #Input : 2-3j\n    #Output : (2.0, 1.57079633)\n    \n    for i in range(len(numbers)):\n        if isinstance(numbers[i], complex):\n            if numbers[i].real>0 and numbers[i].imag>0:\n                print(\"(\",numbers[i].real, \",\",cmath.phase(numbers[i]),\")\")\n                \n            elif numbers[i].real<0 and numbers[i].imag>0:\n                print(\"(\",numbers[i].real, \",\",cmath.phase(numbers[i]),\")\")\n                \n            elif numbers[i].real<0 and numbers[i].imag<0:\n                print(\"(\",numbers[i].real, \",\",cmath.phase(numbers[i]),\")\")\n                \n            elif numbers[i].real>0 and numbers[i].imag<0:\n                print(\"(\",numbers[i].real, \",\",cmath.phase(numbers[i]),\")\")\n                \n            else:\n                print(\"(\",numbers[i].real, \",\",cmath.phase(numbers[i]),\")\")\n                \ndef add_primes(primes):\n    '''\n    Write a python function to find the sum of all the primes below the given number n. \n    Note : The function accepts integer as input.\n    '''\n    # Write a python function to find the sum of all the primes below the given number n. \n    # Note : The function accepts integer as input.\n    \n    #Input : 20 \n    #Output : 3+13+17+19+23+29 = 55\n    \n    #Input : 24 \n    #Output : 3+13+17+19+23+29+31+37+41+43+47 = 71\n    \n    for i in range(len(primes)):\n        sum = 0\n        for j in range(1,primes[i]+1):\n            if primes[i]%j==0:\n                sum+=j\n        print(sum)\n    \ndef is_prime(number):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    Note : The function accepts integer as input.\n    '''\n    # Write a python function to check whether a given number is prime or not.\n    # Note : The function accepts integer as input.\n    \n    #Input : 4 \n    #Output : Not prime\n    #Input : 2 \n    #Output : Prime\n    \n    #Input : 6 \n    #Output : Not prime\n    #Input : 13 \n    #Output : Prime\n    \n    if number<=1:\n        print(\"Not prime\")\n    elif number==2 or number==3 or number==5:\n        print(\"Prime\")\n    else:\n        for i in range(2,int(number/2)+1):\n            if number%i==0:\n                print(\"Not prime\")\n                break\n        else:\n            print(\"Prime\")\n        \ndef is_prime1(n):\n    '''\n    Write a python function to check whether a given number is prime or not.\n    Note : The function accepts integer as input.\n    '''\n    # Write a python function to check whether a given number is prime or not.\n    # Note : The function accepts integer as input.\n    \n    #Input : 4 \n    #Output : Not prime\n    #Input : 2 \n    #Output : Prime\n    \n    #Input : 6 \n    #Output : Not prime\n    #Input : 13 \n    #Output : Prime\n    \n    #Input : 21 \n    #Output : Not prime\n    #Input : 25 \n    #Output : Prime\n    \n    if n<=1:\n        print(\"Not prime\")\n    else:\n        for i in range(2,int(n/2)+1):\n            if n%i==0:\n                print(\"Not prime\")\n                break\n        else:\n            print(\"Prime\")\n    \n    \ndef prime_factor(n):\n    '''\n    Write a python function to print the prime factor decomposition of a given number.\n    Note : The function accepts integer as input.\n    '''\n    # Write a python function to print the prime factor decomposition of a given number.\n    # Note : The function accepts integer as input.\n    \n    #Input : 24 \n    #Output : 2^3 + 2^2 + 2^1 + 2^0 = 24\n    \n    #Input : 16 \n    #Output : 2^3 + 2^2 + 2^1 + 2^0 = 8\n    \n    #Input : 21 \n    #Output : 2^3 + 2^2 + 2^1 + 2^0 = 3\n    \n    #Input : 25 \n    #Output : 2^3 + 2^2 + 2^1 + 2^0 = 2\n    \n    #Input : 50 \n    #Output : 2^5 + 2^3 + 2^2 + 2^1 + 2^0 = 32\n    \n    #Input : 2 \n    #Output : No prime factors\n    \n    #Input : 100 \n    #Output : No prime factors\n    \n    #Input : 8 \n    #Output : 2^1 + 2^0 = 4\n    \n    #Input : 20 \n    #Output : 2^3 + 2^2 + 2^1 + 2^0 = 5\n    \n    #Input : 13 \n    #Output : 2^3 + 2^2 + 2^1 = 5\n    \n    #Input : 19 \n    #Output : 2^3 + 2^2 + 2^1 + 2^0 = 6\n    \n    #Input : 15 \n    #Output : 2^3 + 2^2 + 2^1 = 3\n    \n    #Input : 24 \n    #Output : 2^3 + 2^2 + 2^1 = 3\n    \n    #Input : 32 \n    #Output : 2^3 + 2^2 + 2^1 = 2\n    \n    #Input : 21 \n    #Output : 2^3 + 2^2 + 2^1 = 3\n    \n    #Input : 25 \n    #Output : 2^3 + 2^2 + 2^1 = 2\n    \n    #Input : 50 \n    #Output : 2^5 + 2^3 + 2^2 + 2^1 = 32\n    \n    #Input : 2 \n    #Output : No prime factors\n    \n    #Input : 100 \n    #Output : No prime factors\n    \n    #Input : 8 \n    #Output : 2^1 + 2^0 = 4\n    \n    #Input : 20 \n    #Output : 2^3 + 2^2 + 2^1 + 2^0 = 5\n    \n    #Input : 13 \n    #Output : 2^3 + 2^2 + 2^1 = 5\n    \n    #Input : 19 \n    #Output : 2^3 + 2^2 + 2^1 = 5\n    \n    #Input : 15 \n    #Output : 2^3 + 2^2 + 2^1 = 3\n    \n    #Input : 24 \n    #Output : 2^3 + 2^2 + 2^1 = 3\n    \n    #Input : 32 \n    #Output : 2^3 + 2^2 + 2^1 = 2\n    \n    #Input : 21 \n    #Output : 2^3 + 2^2 + 2^1 = 3\n    \n    #Input : 25 \n    #Output : 2^3 + 2^2 + 2^1 = 2\n    \n    #Input : 50 \n    #Output : 2^5 + 2^3 + 2^2 + 2^1 = 32\n    \n    #Input : 2 \n    #Output : No prime factors\n    \n    #Input : 10"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    c = []\n    for x in numbers:\n        if (abs(x)>1e-5):\n            r = abs(x)\n            c.append(cmath.rect(r,x.imag))\n    return c\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    def mod(x, y):\n        '''\n        Returns the modulus of a complex number\n        '''\n        return (x**2) + (y**2)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print('Input: ',numbers)\n    x = numbers[0]\n    y = numbers[1]\n    '''\n    print('Input:',x,'   ',y)\n    print('Output:',cmath.polar(complex(x,y)))\n    '''\n    # a = x**2 + y**2\n    # b = cmath.sqrt(a)\n    # c = cmath.degrees(x/b)\n    # print(c)\n    # d = cmath.phase(x)\n    # print(d)\n    #e = cmath.polar(x)\n    #print(e)\n    \n    if x == 0 and y == 0:\n        return '0.00', '0.00'\n    if x == 0:\n        angle = 90\n    else:\n        angle = cmath.degrees(cmath.atan(y/x))\n    if angle < 0:\n        angle = angle + 180\n    if x < 0:\n        angle = angle + 180\n    rad = cmath.polar(complex(x,y))\n    degree = rad[0]\n    angle = int(round(angle))\n    degree = int(round(degree))\n    return angle, degree\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # define variables \n    real = float(numbers[0])\n    imag = float(numbers[1])\n    # perform math \n    r = float(math.hypot(real, imag))\n    theta = float(math.atan2(imag, real) * 180/math.pi)\n    # return\n    return r, theta\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(0,len(numbers)):\n        numbers[i]=complex(numbers[i])\n    a=0\n    b=0\n    count=0\n    for i in range(0,len(numbers)):\n        c=numbers[i].imag\n        if c>0:\n            a=a+1\n        elif c<0:\n            b=b+1\n        else:\n            count=count+1\n    print('There are %d positive numbers'%(a))\n    print('There are %d negative numbers'%(b))\n    print('There are %d zeros'%(count))\nconvert([1,-1,0,1,3,1,0,-2])\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len([x for x in list1 if isinstance(x, int)])\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i], int):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    result = 0\n    for i in list1:\n        if type(i) == int:\n            result += 1\n    return result\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if isinstance(list1[i],int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for x in list1:\n        if (type(x) == int):\n            count = count+1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 0:\n        return []\n    return (x + (y,) for x in combinations_colors(l, n - 1) for y in l if x!= y)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combs = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                combs.append((l[i], l[j], l[k]))\n    return combs\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    def combine(iterable, r):\n        pool = tuple(iterable)\n        n = len(pool)\n        if n == r:\n            yield pool\n        else:\n            for i in range(1, n):\n                if (i <= r) and (i!= n - r):\n                    yield from combine(pool[i:], r - i)\n                if (i >= n - r) and (i < n):\n                    yield from combine(pool[i:], r)\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    ans=[]\n    for i in combinations_with_replacement(l,n):\n        tup=(i[0],i[1],i[2])\n        ans.append(tup)\n    return ans\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n < 0 or not isinstance(n, int):\n        raise TypeError('Must be a positive integer')\n    if n == 0:\n        return []\n    result = []\n    for i in range(len(l)-n+1):\n        result.append(tuple(l[i:i+n]))\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n    \n    "
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):\n        temp = []\n        for j in range(n):\n            temp.append(l[i])\n        ans.append(tuple(temp))\n    return ans\ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = list(l)\n    ans = []\n    for i in range(len(l)):"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    final = []\n    for i in range(len(l)):\n        final.append(tuple(l[i:i + n]))\n    return final\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = sorted(l)\n    for i in range(len(l)):\n        for comb in combinations_with_replacement(l, n):\n            comb_tuple = tuple(comb)\n            yield comb_tuple\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n <= 1:\n        return 0\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n = int(n)\n    primes = []\n    for i in range(2, n):\n        prime = True\n        for j in range(2, i):\n            if i%j == 0:\n                prime = False\n        if prime:\n            primes.append(i)\n    return len(primes)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # We have two options, if we're lucky we'll get the number of primes in the range between 2 and n, inclusive, or we'll just get the number of primes in the range between 3 and n, inclusive\n    primes_in_range = 0\n    if n < 2:\n        return 0\n    for i in range(2, n):\n        if isPrime(i):\n            primes_in_range += 1\n    return primes_in_range\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if(is_prime(i)):\n            count += 1\n    return count\n    \nprint(count_Primes_nums(10)"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    number = 1\n    count = 0\n    while number <= n:\n        if is_prime(number):\n            count += 1\n        number += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    import math\n    def isprime(num):\n        prime = True\n        for x in range(2, int(math.sqrt(num)) + 1):\n            if num % x == 0:\n                prime = False\n                break\n        return prime\n    primes = 0\n    for x in range(2, n + 1):\n        if isprime(x):\n            primes += 1\n    return primes\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    # your code here\n    if n < 2:\n        return 0\n    prime = [True] * n\n    prime[0] = False\n    prime[1] = False\n    for i in range(2, n):\n        if prime[i]:\n            for j in range(2*i, n, i):\n                prime[j] = False\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes = 0\n    for i in range(2, n):\n        if n % i == 0:\n            primes += 1\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2, n):\n        for j in range(2, n//i):\n            if (n%i == 0 and n%(i*j) == 0):\n                break\n        else:\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n    \n    #Write your function here\ndef pos_neg(lst):\n    '''\n    Write a function that takes in a list of numbers and returns a list with only the positive numbers and a list with only the negative numbers.\n    '''\n    pos_nums = []\n    neg_nums = []\n    \n    for i in range(len(lst)):\n        if lst[i] > 0:\n            pos_nums.append(lst[i])\n        elif lst[i] < 0:\n            neg_nums.append(lst[i])\n            \n    return pos_nums, neg_nums\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    #print(f\"tuple {a, b}\")\n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (a,b)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    c = a\n    a = b\n    b = c\n    return a,b\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\nprint(swap_numbers(7, 5))\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b, a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return b,a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    # print(a,b)\n    tup = (b,a)\n    return tup\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    \n    new_num = b\n    first_num = a\n    return (new_num, first_num)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max1 = 0\n    max2 = 0\n    max_tuple = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > max1:\n            max1 = test_tup1[i]\n    for j in range(len(test_tup2)):\n        if test_tup2[j] > max2:\n            max2 = test_tup2[j]\n    if max1 > max2:\n        max_tuple.append(test_tup1)\n    else:\n        max_tuple.append(test_tup2)\n    return max_tuple"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1, tup2 = test_tup1, test_tup2\n    max_tup = (0, 0)\n    for i in range(1, len(tup1)):\n        tup_sum = tup1[i] + tup2[i]\n        if tup_sum > max_tup[1]:\n            max_tup = (i, tup_sum)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = (test_tup1[0], test_tup2[0])\n    if test_tup1[0] > test_tup2[0]:\n        max_tup = (test_tup1[0], test_tup2[0])\n    elif test_tup1[0] < test_tup2[0]:\n        max_tup = (test_tup1[0], test_tup2[0])\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_tup = test_tup1\n    for i in range(len(test_tup1)):\n        if max_tup[i] < test_tup2[i]:\n            max_tup = test_tup2\n    return max_tup\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_tup1 = test_tup1.copy()\n    test_tup2 = test_tup2.copy()\n    test_tup1.sort()\n    test_tup2.sort()\n    max_tup = []\n    for i in range(len(test_tup1)):\n        if (test_tup1[i] >= test_tup2[i]):\n            max_tup.append(test_tup1[i])\n        else:\n            max_tup.append(test_tup2[i])\n    return tuple(max_tup)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    test_list1, test_list2 = test_tup1, test_tup2\n    test_list1_max = max(test_list1)\n    test_list2_max = max(test_list2)\n    test_list1_max = test_list1_max + (test_list1_max * 2)\n    test_list2_max = test_list2_max + (test_list2_max * 2)\n    return test_list1_max, test_list2_max\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # Your code here\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return test_tup1 if sum(test_tup1) >= sum(test_tup2) else test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    m_tup1 = max(test_tup1, key=lambda tup: tup[0])\n    m_tup2 = max(test_tup2, key=lambda tup: tup[0])\n    print(f'Max of two tuples: {m_tup1} and {m_tup2}')\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    tup1_max = 0\n    tup2_max = 0\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    num = 1\n    while num < n:\n        num += 1\n        if (n % num) == 0:\n            break\n    return num\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if (n <= 1):\n        return False\n    if n == 2:\n        return True\n    if n == 3:\n        return True\n    if n == 4:\n        return True\n    if n == 5:\n        return True\n    if n == 6:\n        return True\n    if n == 7:\n        return True\n    if n == 8:\n        return True\n    if n == 9:\n        return True\n    if n == 10:\n        return True\n    if n == 11:\n        return True\n    if n == 12:\n        return True\n    if n == 13:\n        return True\n    if n == 14:\n        return True\n    if n == 15:\n        return True\n    if n == 16:\n        return True\n    if n == 17:\n        return True\n    if n == 18:\n        return True\n    if n == 19:\n        return True\n    if n == 20:\n        return True\n    if n == 21:\n        return True\n    if n == 22:\n        return True\n    if n == 23:\n        return True\n    if n == 24:\n        return True\n    if n == 25:\n        return True\n    if n == 26:\n        return True\n    if n == 27:\n        return True\n    if n == 28:\n        return True\n    if n == 29:\n        return True\n    if n == 30:\n        return True\n    if n == 31:\n        return True\n    if n == 32:\n        return True\n    if n == 33:\n        return True\n    if n == 34:\n        return True\n    if n == 35:\n        return True\n    if n == 36:\n        return True\n    if n == 37:\n        return True\n    if n == 38:\n        return True\n    if n == 39:\n        return True\n    if n == 40:\n        return True\n    if n == 41:\n        return True\n    if n == 42:\n        return True\n    if n == 43:\n        return True\n    if n == 44:\n        return True\n    if n == 45:\n        return True\n    if n == 46:\n        return True\n    if n == 47:\n        return True\n    if n == 48:\n        return True\n    if n == 49:\n        return True\n    if n == 50:\n        return True\n    if n == 51:\n        return True\n    if n == 52:\n        return True\n    if n == 53:\n        return True\n    if n == 54:\n        return True\n    if n == 55:\n        return True\n    if n == 56:\n        return True\n    if n == 57:\n        return True\n    if n == 58:\n        return True\n    if n == 59:\n        return True\n    if n == 60:\n        return True\n    if n == 61:\n        return True\n    if n == 62:\n        return True\n    if n == 63:\n        return True\n    if n == 64:\n        return True\n    if n == 65:\n        return True\n    if n == 66:\n        return True\n    if n == 67:\n        return True\n    if n == 68:\n        return True\n    if n == 69:\n        return True\n    if n == 70:\n        return True\n    if n == 71:\n        return True\n    if n == 72:\n        return True\n    if n == 73:\n        return True\n    if n == 74:\n        return True\n    if n == 75:\n        return True\n    if n == 76:\n        return True\n    if n == 77:\n        return True\n    if n == 78:\n        return True\n    if n == 79:\n        return True\n    if n == 80:\n        return True\n    if n == 81:\n        return True\n    if n == 82:\n        return True\n    if n == 83:\n        return True\n    if n == 84:\n        return True\n    if n == 85:\n        return True\n    if n == 86:\n        return True\n    if n == 87:\n        return True\n    if n == 88:\n        return True\n    if n == 89:\n        return True\n    if n == 90:\n        return True\n    if n == 91:\n        return True\n    if n == 92:\n        return True\n    if n == 93:\n        return True\n    if n == 94:\n        return True\n    if n == 95:\n        return True\n    if n == 96:\n        return True\n    if n == 97:\n        return True\n    if n == 98:\n        return True\n    if n == 99:\n        return True\n    if n == 100:\n        return True\n    if n == 101:\n        return True\n    if n == 102:\n        return True\n    if n == 103:\n        return True\n    if n == 104:\n        return True\n    if n == 105:\n        return True\n    if n == 106:\n        return True\n    if n == 107:\n        return True\n    if n == 108:\n        return True\n    if n == 109:\n        return True\n    if n == 110:\n        return True\n    if n == 111:\n        return True\n    if n == 112:\n        return True\n    if n == 113:\n        return True\n    if n == 114:\n        return True\n    if n == 115:\n        return True\n    if n == 116:\n        return True\n    if n == 117:\n        return True\n    if n == 118:\n        return True\n    if n == 119:\n        return True\n    if n == 120:\n        return True\n    if n == 121:\n        return True\n    if n == 122:\n        return True\n    if n == 123:\n        return True\n    if n == 124:\n        return True\n    if n == 125:\n        return True\n    if n == 126:\n        return True\n    if n == 127:\n        return True\n    if n == 128:\n        return True\n    if n == 129:\n        return True\n    if n == 130:\n        return True\n    if n == 131:\n        return True\n    if n == 132:\n        return True\n    if n == 133:\n        return True\n    if n == 134:\n        return True\n    if n == 135:\n        return True\n    if n == 136:\n        return True\n    if n == 137:\n        return True\n    if n == 138:\n        return True\n    if n == 139:\n        return True\n    if n == 140:\n        return True\n    if n == 141:\n        return True\n    if n == 142:\n        return True\n    if n == 143:\n        return True\n    if n == 144:\n        return True\n    if n == 145:\n        return True\n    if n == 146:\n        return True\n    if n == 147:\n        return True\n    if n == 148:\n        return True\n    if n == 149:\n        return True\n    if n == 150:\n        return True\n    if n == 151:\n        return True\n    if n == 152:\n        return True\n    if n == 153:\n        return True\n    if n == 154:\n        return True\n    if n == 155:\n        return True\n    if n == 156:\n        return True\n    if n == 157:\n        return True\n    if n == 158:\n        return True\n    if n == 159:\n        return True\n    if n == 160:\n        return True\n    if n == 161:\n        return True\n    if n == 162:\n        return True\n    if n == 163:\n        return True\n    if n == 164:\n        return True\n    if n == 165:\n        return True\n    if n == 166:\n        return True\n    if n == 167:\n        return True\n    if n == 168:\n        return True\n    if n == 169:\n        return True\n    if n == 170:\n        return True\n    if n == 171:\n        return True\n    if n == 172:\n        return True\n    if n == 173:\n        return True\n    if n == 174:\n        return True\n    if n == 175:\n        return True\n    if n == 176:\n        return True\n    if n == 177:\n        return True\n    if n == 178:\n        return True\n    if n == 179:\n        return True\n    if n == 180:\n        return True\n    if n == 181:\n        return True\n    if n == 182:\n        return True\n    if n == 18"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    print(\"\\n\\n\\t\\t\\t\\t\\t\\t\\t\\tN\\th\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    n = int(n)\n    n = n - 1\n    if n == 0:\n        return 0\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n    if n == 3:\n        return 5\n    if n == 4:\n        return 7\n    if n == 5:\n        return 11\n    if n == 6:\n        return 13\n    if n == 7:\n        return 17\n    if n == 8:\n        return 19\n    if n == 9:\n        return 23\n    if n == 10:\n        return 29\n    if n == 11:\n        return 31\n    if n == 12:\n        return 37\n    if n == 13:\n        return 41\n    if n == 14:\n        return 43\n    if n == 15:\n        return 47\n    if n == 16:\n        return 53\n    if n == 17:\n        return 59\n    if n == 18:\n        return 61\n    if n == 19:\n        return 67\n    if n == 20:\n        return 71\n    if n == 21:\n        return 73\n    if n == 22:\n        return 79\n    if n == 23:\n        return 83\n    if n == 24:\n        return 89\n    if n == 25:\n        return 97\n    if n == 26:\n        return 101\n    if n == 27:\n        return 103\n    if n == 28:\n        return 107\n    if n == 29:\n        return 109\n    if n == 30:\n        return 113\n    if n == 31:\n        return 127\n    if n == 32:\n        return 131\n    if n == 33:\n        return 137\n    if n == 34:\n        return 139\n    if n == 35:\n        return 149\n    if n == 36:\n        return 151\n    if n == 37:\n        return 157\n    if n == 38:\n        return 163\n    if n == 39:\n        return 167\n    if n == 40:\n        return 173\n    if n == 41:\n        return 179\n    if n == 42:\n        return 181\n    if n == 43:\n        return 191\n    if n == 44:\n        return 193\n    if n == 45:\n        return 197\n    if n == 46:\n        return 199\n    if n == 47:\n        return 211\n    if n == 48:\n        return 223\n    if n == 49:\n        return 227\n    if n == 50:\n        return 229\n    if n == 51:\n        return 233\n    if n == 52:\n        return 239\n    if n == 53:\n        return 241\n    if n == 54:\n        return 251\n    if n == 55:\n        return 257\n    if n == 56:\n        return 263\n    if n == 57:\n        return 269\n    if n == 58:\n        return 271\n    if n == 59:\n        return 277\n    if n == 60:\n        return 281\n    if n == 61:\n        return 289\n    if n == 62:\n        return 293\n    if n == 63:\n        return 307\n    if n == 64:\n        return 311\n    if n == 65:\n        return 313\n    if n == 66:\n        return 317\n    if n == 67:\n        return 321\n    if n == 68:\n        return 331\n    if n == 69:\n        return 337\n    if n == 70:\n        return 343\n    if n == 71:\n        return 349\n    if n == 72:\n        return 353\n    if n == 73:\n        return 359\n    if n == 74:\n        return 367\n    if n == 75:\n        return 373\n    if n == 76:\n        return 379\n    if n == 77:\n        return 383\n    if n == 78:\n        return 389\n    if n == 79:\n        return 397\n    if n == 80:\n        return 401\n    if n == 81:\n        return 409\n    if n == 82:\n        return 419\n    if n == 83:\n        return 421\n    if n == 84:\n        return 431\n    if n == 85:\n        return 433\n    if n == 86:\n        return 439\n    if n == 87:\n        return 443\n    if n == 88:\n        return 449\n    if n == 89:\n        return 457\n    if n == 90:\n        return 461\n    if n == 91:\n        return 463\n    if n == 92:\n        return 467\n    if n == 93:\n        return 471\n    if n == 94:\n        return 473\n    if n == 95:\n        return 479\n    if n == 96:\n        return 481\n    if n == 97:\n        return 483\n    if n == 98:\n        return 487\n    if n == 99:\n        return 491\n    if n == 100:\n        return 499\n    if n == 101:\n        return 503\n    if n == 102:\n        return 509\n    if n == 103:\n        return 511\n    if n == 104:\n        return 521\n    if n == 105:\n        return 531\n    if n == 106:\n        return 541\n    if n == 107:\n        return 551\n    if n == 108:\n        return 563\n    if n == 109:\n        return 569\n    if n == 110:\n        return 571\n    if n == 111:\n        return 573\n    if n == 112:\n        return 577\n    if n == 113:\n        return 583\n    if n == 114:\n        return 589\n    if n == 115:\n        return 595\n    if n == 116:\n        return 601\n    if n == 117:\n        return 607\n    if n == 118:\n        return 613\n    if n == 119:\n        return 619\n    if n == 120:\n        return 631\n    if n == 121:\n        return 641\n    if n == 122:\n        return 643\n    if n == 123:\n        return 647\n    if n == 124:\n        return 653\n    if n == 125:\n        return 659\n    if n == 126:\n        return 661\n    if n == 127:\n        return 673\n    if n == 128:\n        return 677\n    if n == 129:\n        return 683\n    if n == 130:\n        return 697\n    if n == 131:\n        return 701\n    if n == 132:\n        return 709\n    if n == 133:\n        return 719\n    if n == 134:\n        return 733\n    if n == 135:\n        return 739\n    if n == 136:\n        return 743\n    if n == 137:\n        return 751\n    if n == 138:\n        return 757\n    if n == 139:\n        return 761\n    if n == 140:\n        return 763\n    if n == 141:\n        return 769\n    if n == 142:\n        return 773\n    if n == 143:\n        return 777\n    if n == 144:\n        return 781\n    if n == 145:\n        return 787\n    if n == 146:\n        return 793\n    if n == 147:\n        return 799\n    if n == 148:\n        return 803\n    if n == 149:\n        return 807\n    if n == 150:\n        return 813\n    if n == 151:\n        return 817\n    if n == 152:\n        return 831\n    if n == 153:\n        return 841\n    if n == 154:\n        return 843\n    if n == 155:\n        return 849\n    if n == 156:\n        return 853\n    if n == 157:\n        return 857\n    if n == 158:\n        return 863\n    if n == 159:\n        return 871\n    if n == 160:\n        return 877\n    if n == 161:\n        return 881\n    if n == 162:\n        return 887\n    if n == 163:\n        return 901\n    if n == 164:\n        return 907\n    if n == 165:\n        return 911\n    if n == 166:\n        return 917\n    if n == 167:\n        return 923\n    if n == 168:\n        return 937\n    if n == 169:\n        return 941\n    if n == 170:\n        return 947\n    if n == 171:\n        return 951\n    if n == 172:\n        return 957\n    if n == 173:\n        retur"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    else:\n        for i in range(n-1):\n            if not newman_prime(i):\n                return False\n        return True\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 2:\n        return 2\n    p = 0\n    for i in range(n):\n        p = (p + 1) % 2 + (p % 3 + 1) % 2\n    return p\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # We don't need to store prime numbers, so we can use the same approach as the old function.\n    prime = set(range(2, n + 1)) # All prime numbers below n.\n    if n < 4:\n        return 2\n    i = 5\n    while i < n:\n        for j in range(i * i, n + 1, i):\n            prime.discard(j)\n        i += 2\n    return next(iter(prime))\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def helper(n):\n        \n        #if we've done this before, return the value\n        if cache[n]!= None: return cache[n]\n        \n        #add 1 and make sure to use the 2nd type prime number\n        if n == 0: return 2\n        if n == 1: return 3\n        if n == 2: return 5\n        if n == 3: return 7\n        \n        #find the first prime number\n        primes = []\n        for i in range(2,n):\n            if n % i == 0:\n                #remove the number that is divided\n                n = n/i\n                #add this number to the list of primes\n                primes.append(i)\n            else:\n                break\n        \n        #find the first prime number\n        if n == 1: return primes[0]\n        \n        #the cache list is a mapping of (n, 2) and (n, 3) to their respective primes\n        #we want to remove the values of (n-1, 2) and (n-1, 3) because they are not prime\n        #it's not to remove anything, we want to keep them for when we get to n-1\n        cache[n-1] = 2\n        cache[n-2] = 3\n        \n        #the left and right lists will represent our bounds for our binary search\n        left = 1\n        right = n-1\n        \n        #make sure that left is smaller than right\n        while left < right:\n            \n            #get the middle number\n            mid = left + (right - left) // 2\n            \n            #find the left prime number\n            left_prime = helper(mid)\n            \n            #now, we are going to see if our mid is prime\n            #if it is, we can't do anything\n            if left_prime in primes: return left_prime\n            \n            #if it isn't prime, we need to move on to the right\n            else: left = mid + 1\n        \n        #we've reached our left, and the left prime is the smallest\n        return left_prime\n        \n        #return the new value\n        return cache[n]\n        \n    #create cache list\n    cache = []\n    \n    #make sure we have enough primes\n    while len(cache) < n:\n        cache.append(None)\n        \n    #return the new man-shanks\u2013williams prime\n    return helper(n)\n    \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    sieve = numpy.ones(n, dtype=bool) # Creates a boolean array of True values of n dimensions\n    primes = [] # Creates an empty list to hold the primes\n    i = 2 # Number of iterations\n    while i < n:\n        if sieve[i]: # Checks if sieve[i] is a prime number. If true, sets all multiples of i to False\n            for j in range(i*2, n, i): \n                sieve[j] = False\n        i += 1\n        while i <= n: # Repeats the loop as long as i is less than n\n            if sieve[i]: # Checks if sieve[i] is a prime number. If true, adds i to primes\n                primes.append(i)\n            i += 1\n    return primes[-1]\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n <= 0:\n        return False\n    else:\n        i = 2\n        while(True):\n            if n == 1:\n                return True\n            if n%i == 0:\n                return False\n            i += 1\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    final_tup = ()\n    for i in range(0,len(test_tup1)):\n        final_tup = final_tup + (test_tup1[i] / test_tup2[i], )\n    return final_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(a / b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # extract elements from the tuples\n    (x1, y1) = test_tup1\n    (x2, y2) = test_tup2\n    # check if the tuples have equal length\n    if len(x1)!= len(x2):\n        return (None, None)\n    # perform division\n    div = x1/x2\n    # return the result\n    return div\n    \ndef division_tuples(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # extract elements from the tuples\n    (x1, y1) = test_tup1\n    (x2, y2) = test_tup2\n    # check if the tuples have equal length\n    if len(x1)!= len(x2):\n        return (None, None)\n    # perform division\n    div = x1/x2\n    # return the result\n    return div\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup1 = []\n    new_tup2 = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        new_tup1.append(elem1//elem2)\n        new_tup2.append(elem2//elem1)\n    return tuple(new_tup1), tuple(new_tup2)\n    \n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    for x, y in zip(test_tup1, test_tup2):\n        print(x//y)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (tup1 / tup2)\n    # test\n    # test_tup1 = (4, 2, 5)\n    # test_tup2 = (5, 2, 3)\n    # print(division_elements(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    print('test_tup1 =', test_tup1)\n    print('test_tup2 =', test_tup2)\n    lst1 = []\n    lst2 = []\n    for i in range(len(test_tup1)):\n        lst1.append(test_tup1[i])\n        lst2.append(test_tup2[i])\n    return tuple(lst1), tuple(lst2)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 0\n    else:\n        tup_len = len(test_tup1)\n        for i in range(tup_len):\n            test_tup1[i] = round(test_tup1[i] / test_tup2[i], 2)\n        return test_tup1\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple(float(elem1) / float(elem2) for elem1, elem2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1) > L:\n        return (list1[:L], list1[L:])\n    else:\n        return ([], list1)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n    \n'''\n3. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n4. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n5. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n6. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n7. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n8. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n9. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n10. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n11. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n12. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n13. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n14. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n15. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n16. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n17. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n18. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n19. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n20. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n21. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n22. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n23. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n24. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n25. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n26. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write a function that takes in a string and returns True if it is a palindrome.\n    '''\n    return word == word[::-1]\n    \n'''\n27. Implement a function that takes in a string and returns True if it is a palindrome.\n'''\ndef is_palindrome(word):\n    '''\n    Write "
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    midpoint = len(list1) // 2\n    midpoint = int(midpoint)\n    list1_left = list1[:midpoint]\n    list1_right = list1[midpoint:]\n    return list1_left, list1_right\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if(len(list1)%2==0):\n        part1=list1[:L]\n        part2=list1[L:]\n    else:\n        part1=list1[:len(list1)-1]\n        part2=list1[len(list1)-1:]\n    return(part1,part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[:L]\n    second_part = list1[L:]\n    return (first_part, second_part)\n    \ndef generate_list(L):\n    '''\n    Write a function that takes in an integer L and generates a list of L random integers.\n    '''\n    return [random.randint(0,L) for i in range(L)]\n    \ndef check_subset(sub,sup):\n    '''\n    Write a function that takes in a subset and another set and checks if the subset is a subset of the second set.\n    '''\n    return sub.issubset(sup)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    left_list = []\n    right_list = []\n    while len(list1) > L:\n        left_list.append(list1.pop(0))\n    while len(list1) > 0:\n        right_list.append(list1.pop(0))\n    return(tuple((left_list, right_list)))\n    \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    # Split the list into two parts\n    first_part = list1[:L]\n    second_part = list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #create a new list to hold the first L-part of the list\n    part_1 = []\n    #create a new list to hold the second L-part of the list\n    part_2 = []\n    #loop through each element in the list\n    for i in list1:\n        #add the element to the first list if it is less than L\n        if i < L:\n            part_1.append(i)\n        #add the element to the second list if it is greater than L\n        elif i > L:\n            part_2.append(i)\n    #return the two lists\n    return (part_1, part_2)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list1 = list1.copy()\n    for i in range(0,L):\n        list1.pop(0)\n    return (list1)\n    \ndef test_split_two_parts():\n    assert split_two_parts([1,2,3,4,5,6],2) == ([1,2,3,4],[5,6])\n    assert split_two_parts([1,2,3,4,5,6,7],3) == ([1,2,3],[4,5,6,7])\n    assert split_two_parts([], 2) == ([], [])\n    assert split_two_parts([1,2,3,4,5,6,7], 10) == ([1,2,3,4], [5,6,7])\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (float(h_age)/7.0)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age = int(h_age)\n    if age >= 0 and age <= 2:\n        dog_age = 0\n    elif age >= 3 and age <= 8:\n        dog_age = 8\n    elif age >= 9 and age <= 12:\n        dog_age = 12\n    elif age >= 13 and age <= 17:\n        dog_age = 16\n    elif age >= 18 and age <= 22:\n        dog_age = 20\n    elif age >= 23 and age <= 30:\n        dog_age = 25\n    elif age >= 31 and age <= 40:\n        dog_age = 30\n    elif age >= 41 and age <= 50:\n        dog_age = 35\n    elif age >= 51 and age <= 60:\n        dog_age = 40\n    elif age >= 61 and age <= 70:\n        dog_age = 45\n    elif age >= 71 and age <= 80:\n        dog_age = 50\n    elif age >= 81 and age <= 90:\n        dog_age = 55\n    elif age >= 91 and age <= 100:\n        dog_age = 60\n    elif age >= 101 and age <= 120:\n        dog_age = 65\n    elif age >= 121 and age <= 150:\n        dog_age = 70\n    elif age >= 151 and age <= 180:\n        dog_age = 75\n    elif age >= 181 and age <= 200:\n        dog_age = 80\n    elif age >= 201 and age <= 250:\n        dog_age = 85\n    elif age >= 251 and age <= 300:\n        dog_age = 90\n    elif age >= 301 and age <= 350:\n        dog_age = 95\n    elif age >= 351 and age <= 400:\n        dog_age = 100\n    elif age >= 401 and age <= 450:\n        dog_age = 105\n    elif age >= 451 and age <= 500:\n        dog_age = 110\n    elif age >= 501 and age <= 550:\n        dog_age = 115\n    elif age >= 551 and age <= 600:\n        dog_age = 120\n    elif age >= 601 and age <= 650:\n        dog_age = 125\n    elif age >= 651 and age <= 700:\n        dog_age = 130\n    elif age >= 701 and age <= 750:\n        dog_age = 135\n    elif age >= 751 and age <= 800:\n        dog_age = 140\n    elif age >= 801 and age <= 850:\n        dog_age = 145\n    elif age >= 851 and age <= 900:\n        dog_age = 150\n    elif age >= 901 and age <= 950:\n        dog_age = 155\n    elif age >= 951 and age <= 1000:\n        dog_age = 160\n    elif age >= 1011 and age <= 1050:\n        dog_age = 165\n    elif age >= 1051 and age <= 1100:\n        dog_age = 170\n    elif age >= 1101 and age <= 1150:\n        dog_age = 175\n    elif age >= 1111 and age <= 1200:\n        dog_age = 180\n    elif age >= 1201 and age <= 1250:\n        dog_age = 185\n    elif age >= 1251 and age <= 1300:\n        dog_age = 190\n    elif age >= 1301 and age <= 1350:\n        dog_age = 195\n    elif age >= 1351 and age <= 1400:\n        dog_age = 200\n    elif age >= 1401 and age <= 1450:\n        dog_age = 205\n    elif age >= 1451 and age <= 1500:\n        dog_age = 210\n    elif age >= 1501 and age <= 1550:\n        dog_age = 215\n    elif age >= 1551 and age <= 1600:\n        dog_age = 220\n    elif age >= 1601 and age <= 1650:\n        dog_age = 225\n    elif age >= 1651 and age <= 1700:\n        dog_age = 230\n    elif age >= 1701 and age <= 1750:\n        dog_age = 235\n    elif age >= 1751 and age <= 1800:\n        dog_age = 240\n    elif age >= 1801 and age <= 1850:\n        dog_age = 245\n    elif age >= 1851 and age <= 1900:\n        dog_age = 250\n    elif age >= 1901 and age <= 1950:\n        dog_age = 265\n    elif age >= 1951 and age <= 2000:\n        dog_age = 270\n    elif age >= 2001 and age <= 2050:\n        dog_age = 275\n    elif age >= 2051 and age <= 2100:\n        dog_age = 280\n    elif age >= 2201 and age <= 2200:\n        dog_age = 285\n    elif age >= 2211 and age <= 2200:\n        dog_age = 290\n    elif age >= 2201 and age <= 2300:\n        dog_age = 295\n    elif age >= 2301 and age <= 2350:\n        dog_age = 300\n    elif age >= 2351 and age <= 2400:\n        dog_age = 305\n    elif age >= 2401 and age <= 2450:\n        dog_age = 310\n    elif age >= 2451 and age <= 2500:\n        dog_age = 315\n    elif age >= 2501 and age <= 2550:\n        dog_age = 320\n    elif age >= 2551 and age <= 2600:\n        dog_age = 325\n    elif age >= 2601 and age <= 2650:\n        dog_age = 330\n    elif age >= 2651 and age <= 2700:\n        dog_age = 335\n    elif age >= 2701 and age <= 2750:\n        dog_age = 340\n    elif age >= 2751 and age <= 2800:\n        dog_age = 345\n    elif age >= 2801 and age <= 2850:\n        dog_age = 350\n    elif age >= 2851 and age <= 2900:\n        dog_age = 355\n    elif age >= 2901 and age <= 2950:\n        dog_age = 360\n    elif age >= 2951 and age <= 3000:\n        dog_age = 365\n    elif age >= 3001 and age <= 3050:\n        dog_age = 370\n    elif age >= 3051 and age <= 3100:\n        dog_age = 375\n    elif age >= 3101 and age <= 3200:\n        dog_age = 380\n    elif age >= 3211 and age <= 3250:\n        dog_age = 385\n    elif age >= 3211 and age <= 3300:\n        dog_age = 390\n    elif age >= 3301 and age <= 3350:\n        dog_age = 395\n    elif age >= 3351 and age <= 3400:\n        dog_age = 400\n    elif age >= 3401 and age <= 3450:\n        dog_age = 405\n    elif age >= 3451 and age <= 3500:\n        dog_age = 410\n    elif age >= 3501 and age <= 3550:\n        dog_age = 415\n    elif age >= 3551 and age <= 3600:\n        dog_age = 420\n    elif age >= 3601 and age <= 3650:\n        dog_age = 425\n    elif age >= 3651 and age <= 3700:\n        dog_age = 430\n    elif age >= 3701 and age <= 3750:\n        dog_age = 435\n    elif age >= 3751 and age <= 3800:\n        dog_age = 440\n    elif age >= 3801 and age <= 3850:\n        dog_age = 445\n    elif age >= 3801 and age <= 3900:\n        dog_age = 450\n    elif age >= 3901 and age <= 3950:\n        dog_age = 455\n    elif age >= 3951 and age <= 4000:\n        dog_age = 460\n    elif age >= 4001 and age <= 4050:\n        dog_age = 465\n    elif age >= 4051 and age <= 4100:\n        dog_age = 470\n    elif age >= 4101 and age <= 4200:\n        dog_age = 475\n    elif age >= 4211 and age <= 4250:\n        dog_age = 480\n    elif age >= 4221 and age <= 4300:\n        dog_age = 485\n    elif age >= 4301 and age <= 4350:\n        dog_age = 490\n    elif age >= 4351 and age <= 4400:\n        dog_age = 495\n    elif age >= 4401 and age <= 4450:\n        dog_age = 500\n    elif age >"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return 0\n    else:\n        return (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age == '0 - 2':\n        return '0'\n    elif h_age == '3 - 5':\n        return '3'\n    elif h_age == '6 - 8':\n        return '6'\n    elif h_age == '9 - 11':\n        return '9'\n    elif h_age == '12 - 14':\n        return '10'\n    elif h_age == '15 - 17':\n        return '11'\n    elif h_age == '18 - 20':\n        return '12'\n    elif h_age == '21 - 23':\n        return '13'\n    elif h_age == '24 - 27':\n        return '14'\n    elif h_age == '28 - 32':\n        return '15'\n    elif h_age == '33 - 37':\n        return '16'\n    elif h_age == '38 - 43':\n        return '17'\n    elif h_age == '44 - 48':\n        return '18'\n    elif h_age == '49 - 54':\n        return '19'\n    elif h_age == '55 - 59':\n        return '20'\n    elif h_age == '60 - 64':\n        return '21'\n    elif h_age == '65 - 69':\n        return '22'\n    elif h_age == '70 - 74':\n        return '23'\n    elif h_age == '75 - 79':\n        return '24'\n    elif h_age == '80 - 84':\n        return '25'\n    elif h_age == '85 - 89':\n        return '26'\n    elif h_age == '90 - 94':\n        return '27'\n    elif h_age == '95 - 99':\n        return '28'\n    elif h_age == '100 - 104':\n        return '29'\n    elif h_age == '105 - 109':\n        return '30'\n    elif h_age == '110 - 114':\n        return '31'\n    elif h_age == '115 - 119':\n        return '32'\n    elif h_age == '120 - 124':\n        return '33'\n    elif h_age == '125 - 129':\n        return '34'\n    elif h_age == '130 - 134':\n        return '35'\n    elif h_age == '135 - 139':\n        return '36'\n    elif h_age == '140 - 144':\n        return '37'\n    elif h_age == '145 - 149':\n        return '38'\n    elif h_age == '150 - 154':\n        return '39'\n    elif h_age == '155 - 159':\n        return '40'\n    elif h_age == '160 - 164':\n        return '41'\n    elif h_age == '165 - 169':\n        return '42'\n    elif h_age == '170 - 174':\n        return '43'\n    elif h_age == '175 - 179':\n        return '44'\n    elif h_age == '180 - 184':\n        return '45'\n    elif h_age == '185 - 189':\n        return '46'\n    elif h_age == '190 - 194':\n        return '47'\n    elif h_age == '195 - 199':\n        return '48'\n    elif h_age == '200 - 204':\n        return '49'\n    elif h_age == '205 - 209':\n        return '50'\n    elif h_age == '210 - 214':\n        return '51'\n    elif h_age == '215 - 219':\n        return '52'\n    elif h_age == '220 - 224':\n        return '53'\n    elif h_age == '225 - 229':\n        return '54'\n    elif h_age == '230 - 234':\n        return '55'\n    elif h_age == '235 - 239':\n        return '56'\n    elif h_age == '240 - 244':\n        return '57'\n    elif h_age == '245 - 249':\n        return '58'\n    elif h_age == '250 - 254':\n        return '59'\n    elif h_age == '255 - 259':\n        return '60'\n    elif h_age == '260 - 264':\n        return '61'\n    elif h_age == '265 - 269':\n        return '62'\n    elif h_age == '270 - 274':\n        return '63'\n    elif h_age == '275 - 279':\n        return '64'\n    elif h_age == '280 - 284':\n        return '65'\n    elif h_age == '285 - 289':\n        return '66'\n    elif h_age == '290 - 294':\n        return '67'\n    elif h_age == '295 - 299':\n        return '68'\n    elif h_age == '300 - 304':\n        return '69'\n    elif h_age == '305 - 309':\n        return '70'\n    elif h_age == '310 - 314':\n        return '71'\n    elif h_age == '315 - 319':\n        return '72'\n    elif h_age == '320 - 324':\n        return '73'\n    elif h_age == '325 - 329':\n        return '74'\n    elif h_age == '330 - 334':\n        return '75'\n    elif h_age == '335 - 339':\n        return '76'\n    elif h_age == '340 - 344':\n        return '77'\n    elif h_age == '345 - 349':\n        return '78'\n    elif h_age == '350 - 354':\n        return '79'\n    elif h_age == '355 - 359':\n        return '80'\n    elif h_age == '360 - 364':\n        return '81'\n    elif h_age == '365 - 369':\n        return '82'\n    elif h_age == '370 - 374':\n        return '83'\n    elif h_age == '375 - 379':\n        return '84'\n    elif h_age == '380 - 384':\n        return '85'\n    elif h_age == '385 - 389':\n        return '86'\n    elif h_age == '390 - 395':\n        return '87'\n    elif h_age == '396 - 399':\n        return '88'\n    elif h_age == '400 - 404':\n        return '89'\n    elif h_age == '405 - 409':\n        return '90'\n    elif h_age == '410 - 414':\n        return '91'\n    elif h_age == '415 - 419':\n        return '92'\n    elif h_age == '420 - 424':\n        return '93'\n    elif h_age == '425 - 429':\n        return '94'\n    elif h_age == '430 - 434':\n        return '95'\n    elif h_age == '435 - 439':\n        return '96'\n    elif h_age == '440 - 444':\n        return '97'\n    elif h_age == '445 - 449':\n        return '98'\n    elif h_age == '450 - 454':\n        return '99'\n    elif h_age == '455 - 459':\n        return '100'\n    elif h_age == '460 - 464':\n        return '101'\n    elif h_age == '465 - 469':\n        return '102'\n    elif h_age == '470 - 474':\n        return '103'\n    elif h_age == '475 - 479':\n        return '104'\n    elif h_age == '480 - 484':\n        return '105'\n    elif h_age == '485 - 489':\n        return '106'\n    elif h_age == '490 - 494':\n        return '107'\n    elif h_age == '495 - 499':\n        return '108'\n    elif h_age == '500 - 504':\n        return '109'\n    elif h_age == '505 - 509':\n        return '110'\n    elif h_age ="
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    a = 10.0\n    b = h_age / a\n    return int(b)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    # convert to inches\n    h_age = h_age * 2.54\n    # convert inches to feet\n    h_age = h_age * 12\n    # convert feet to centimeters\n    h_age = h_age * 100\n    # convert centimeters to years\n    h_age = h_age / 365\n    return h_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dogs_years = float(h_age) * 7\n    return dogs_years\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_splitted = []\n    for i in range(len(S)):\n        if i % step == 0:\n            list_splitted.append(S[i:i + 1])\n    return list_splitted\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_result = []\n    # Iterate through the list\n    for i in range(0, len(S), step):\n        list_result.append(S[i:i+step])\n    return list_result\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_split = []\n    for i in range(0, len(S), step):\n        list_split.append(S[i:i+step])\n    return list_split\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i:i + step] for i in range(0, len(S), step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S)%step == 0:\n        return [S[i::step] for i in range(step)]\n    else:\n        return [S[i::step] for i in range(step-1)] + [S[len(S)-1::step]]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    list_result = []\n    for i in range(0, len(S), step):\n        list_result.append(S[i:i+step])\n    return list_result\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    # This is a list of lists of the sliced lists:\n    split = []\n    for i in range(0, len(S), step):\n        split.append(S[i:i + step])\n    return split\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    l = []\n    for i in range(0, len(S), step):\n        l.append(S[i:i+step])\n    return l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    def lateral_surface_area(l):\n        a = l * 6\n        return a\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l*6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6 * l**2\ndef lateralsurface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    return 2 * (l * w)\ndef lateralsurface_parallelogram(l,h):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given its length and height.\n    '''\n    return 2 * l * h\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    surface = 6 * l * l + 2 * l * (l - 1)\n    return surface\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    lateral = l * 6\n    return lateral\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l**2*6\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    s = l * 6\n    return(s)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 2*l*l+2*l*(l-1)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    a = l*l*l\n    b = 2*l*l\n    c = l*l\n    d = 2*l\n    e = l*l\n    f = 2*l\n    g = l\n    h = l*l\n    i = 2*l\n    j = l*l\n    k = l*l\n    print(a,b,c,d,e,f,g,h,i,j,k)\n    lateralSurfaceArea = a+b+c+d+e+f+g+h+i+j+k\n    return lateralSurfaceArea\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(1,n+1,2):\n        total += i**2\n    return total\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    result = 0\n    for i in range(1, n + 1):\n        if i % 2!= 0:\n            result += i ** 2\n    return result\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    n = n + 1\n    sum = 0\n    for i in range(1,n,2):\n        sum = sum + i ** 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    square_Sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            square_Sum = square_Sum + (i**2)\n    return square_Sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_sq = 0\n    for i in range(1,n+1,2):\n        sum_sq = sum_sq + i**2\n    print(sum_sq)\n    return sum_sq\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum(i**2 for i in range(1, n + 1) if i % 2 == 1)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    res = 0\n    for i in range(n):\n        if i%2!=0:\n            res += i*i\n    return res\ndef test_square_Sum():\n    #First test case\n    #expected = 30\n    assert square_Sum(6) == 30, 'wrong result'\n    #Second test case\n    #expected = 10\n    assert square_Sum(5) == 10, 'wrong result'\n    #Third test case\n    #expected = 0\n    assert square_Sum(0) == 0, 'wrong result'\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum = sum + pow(i, 2)\n        i = i + 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n):\n        if i%2!=0:\n            sum += i**2\n    print(sum)\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    \n    sq_Sum = 0\n    if n < 0:\n        raise ValueError('Input must be a positive integer.')\n    else:\n        for i in range(1, n+1):\n            sq_Sum += i**2\n    return sq_Sum\n    \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # \ud30c\uc774\uc36c\uc774 \uc22b\uc790 \ub098\ub204\uae30 \uc5f0\uc0b0\uc744 \uc548\ud574\uc8fc\uae30 \uc704\ud574 int\ud615\uc73c\ub85c \ubcc0\ud658 \n    return int((n * (n + 1)) / 2)\n    "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    stars = []\n    stars.append(n)\n    if n == 1:\n        return n\n    elif n == 2:\n        return 2\n    elif n > 2:\n        while len(stars)!= 1:\n            stars.append(stars[-1] * 2)\n        return stars[0]\n        \n    \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    nums = [1,2,3,4,5,6,7,8,9]\n    if n < 1 or n > len(nums):\n        return 0\n    return nums[n-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n < 1:\n        return\n        \n    num_to_star = 1\n    \n    while n!= 0:\n        num_to_star *= 2\n        n -= 1\n    \n    return num_to_star - 1\n    "
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    nums = [1, 2, 3, 4, 5]\n    for i in range(6, n+1):\n        nums.append(nums[i-1] + nums[i-5])\n    return nums[n-1]\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 0: \n        return 0\n    else: \n        return n * (n + 1) // 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    n = (n-1)%5+1\n    return n\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    print(\"Find Star Number\")\n    counter = 1\n    for i in range(1,n+1):\n        print(\"Star Number {} is {}\".format(counter,counter*'*'))\n        counter +=1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 0\n    for i in range(1, n + 1):\n        star_num += 4 * (i - 1) + 3\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n == 1: return 1\n    elif n == 2: return 2\n    else:\n        return find_star_num(n-1)+find_star_num(n-2)\n        \ndef find_multiples(n, m):\n    '''\n    Write a function to find then'th multiple of m.\n    '''\n    if n == 1: return 1\n    elif n == 2: return m\n    else:\n        return find_multiples(n-1, m) + find_multiples(n-2, m)\n    \ndef factorial(n):\n    '''\n    Write a function to calculate n! (i.e. nCn)\n    '''\n    if n == 1: return 1\n    elif n == 0: return 1\n    else:\n        return n*factorial(n-1)\n        \ndef is_vowel(char):\n    '''\n    Write a function to check if a character is a vowel.\n    '''\n    if char == 'a': return True\n    elif char == 'e': return True\n    elif char == 'i': return True\n    elif char == 'o': return True\n    elif char == 'u': return True\n    else:\n        return False\n        \ndef is_consonant(char):\n    '''\n    Write a function to check if a character is a consonant.\n    '''\n    if char == 'b': return True\n    elif char == 'c': return True\n    elif char == 'd': return True\n    elif char == 'f': return True\n    elif char == 'g': return True\n    elif char == 'h': return True\n    elif char == 'j': return True\n    elif char == 'k': return True\n    elif char == 'l': return True\n    elif char =='m': return True\n    elif char == 'n': return True\n    elif char == 'p': return True\n    elif char == 'q': return True\n    elif char == 'r': return True\n    elif char =='s': return True\n    elif char == 't': return True\n    elif char == 'v': return True\n    elif char == 'w': return True\n    elif char == 'x': return True\n    elif char == 'y': return True\n    elif char == 'z': return True\n    else:\n        return False\n        \ndef is_alphabet(char):\n    '''\n    Write a function to check if a character is an alphabet.\n    '''\n    if char == 'A' or char == 'B' or char == 'C' or char == 'D' or char == 'E' or char == 'F' or char == 'G' or char == 'H' or char == 'I' or char == 'J' or char == 'K' or char == 'L' or char == 'M' or char == 'N' or char == 'O' or char == 'P' or char == 'Q' or char == 'R' or char == 'S' or char == 'T' or char == 'U' or char == 'V' or char == 'W' or char == 'X' or char == 'Y' or char == 'Z':\n        return True\n    else:\n        return False\n        \ndef is_lowercase(char):\n    '''\n    Write a function to check if a character is lowercase.\n    '''\n    if char == 'a': return True\n    elif char == 'b': return True\n    elif char == 'c': return True\n    elif char == 'd': return True\n    elif char == 'e': return True\n    elif char == 'f': return True\n    elif char == 'g': return True\n    elif char == 'h': return True\n    elif char == 'i': return True\n    elif char == 'j': return True\n    elif char == 'k': return True\n    elif char == 'l': return True\n    elif char =='m': return True\n    elif char == 'n': return True\n    elif char == 'o': return True\n    elif char == 'p': return True\n    elif char == 'q': return True\n    elif char == 'r': return True\n    elif char =='s': return True\n    elif char == 't': return True\n    elif char == 'u': return True\n    elif char == 'v': return True\n    elif char == 'w': return True\n    elif char == 'x': return True\n    elif char == 'y': return True\n    elif char == 'z': return True\n    else:\n        return False\n        \ndef is_uppercase(char):\n    '''\n    Write a function to check if a character is uppercase.\n    '''\n    if char == 'A': return True\n    elif char == 'B': return True\n    elif char == 'C': return True\n    elif char == 'D': return True\n    elif char == 'E': return True\n    elif char == 'F': return True\n    elif char == 'G': return True\n    elif char == 'H': return True\n    elif char == 'I': return True\n    elif char == 'J': return True\n    elif char == 'K': return True\n    elif char == 'L': return True\n    elif char == 'M': return True\n    elif char == 'N': return True\n    elif char == 'O': return True\n    elif char == 'P': return True\n    elif char == 'Q': return True\n    elif char == 'R': return True\n    elif char == 'S': return True\n    elif char == 'T': return True\n    elif char == 'U': return True\n    elif char == 'V': return True\n    elif char == 'W': return True\n    elif char == 'X': return True\n    elif char == 'Y': return True\n    elif char == 'Z': return True\n    else:\n        return False\n        \ndef is_numeric(char):\n    '''\n    Write a function to check if a character is numeric.\n    '''\n    if char == '0': return True\n    elif char == '1': return True\n    elif char == '2': return True\n    elif char == '3': return True\n    elif char == '4': return True\n    elif char == '5': return True\n    elif char == '6': return True\n    elif char == '7': return True\n    elif char == '8': return True\n    elif char == '9': return True\n    else:\n        return False\n        \ndef is_alphabet_uppercase(char):\n    '''\n    Write a function to check if a character is an uppercase letter.\n    '''\n    if char == 'A' or char == 'B' or char == 'C' or char == 'D' or char == 'E' or char == 'F' or char == 'G' or char == 'H' or char == 'I' or char == 'J' or char == 'K' or char == 'L' or char == 'M' or char == 'N' or char == 'O' or char == 'P' or char == 'Q' or char == 'R' or char == 'S' or char == 'T' or char == 'U' or char == 'V' or char == 'W' or char == 'X' or char == 'Y' or char == 'Z':\n        return True\n    else:\n        return False\n        \ndef is_alphabet_lowercase(char):\n    '''\n    Write a function to check if a character is a lowercase letter.\n    '''\n    if char == 'a' or char == 'b' or char == 'c' or char == 'd' or char == 'e' or char == 'f' or char == 'g' or char == 'h' or char == 'i' or char == 'j' or char == 'k' or char == 'l' or char =='m' or char == 'n' or char == 'o' or char == 'p' or char == 'q' or char == 'r' or char =='s' or char == 't' or char == 'u' or char == 'v' or char == 'w' or char == 'x' or char == 'y' or char == 'z':\n        return True\n    else:\n        return False\n        \ndef is_alphabet_numeric(char):\n    '''\n    Write "
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if not isinstance(k,str):\n        raise TypeError(\"k must be of type str\")\n    for i in k:\n        if not i.isalpha() and not i.isnumeric():\n            raise ValueError(\"k must contain only letters and numbers\")\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k > 96 and k < 123:\n        return ord(k) - 32\n    else:\n        return ord(k) - 96\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if k in range(ord('a'), ord('z')+1):\n        return ord(k)-ord('a')\n    else:\n        return ord(k)-ord('A')+26\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef ascii_string(str1):\n    '''\n    Write a function to get the ascii value of a string.\n    '''\n    return str(str1).encode('unicode-escape')\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    odd_sum = 0\n    sum_list = []\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even_sum += arr[i]\n        else:\n            odd_sum += arr[i]\n            \n    sum_list.append(odd_sum)\n    sum_list.append(even_sum)\n    return sum_list\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # return sum(num for i, num in enumerate(arr) if i % 2 == 0 and num % 2 == 0)\n    return sum([num for i, num in enumerate(arr) if i % 2 == 0 and num % 2 == 0])\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    n = len(arr)\n    even_index = lambda x : x % 2 == 0\n    even_arr = filter(even_index, arr)\n    even_sum = sum(even_arr)\n    return even_sum\nprint(sum_even_and_even_index([10, 13, 5, 16, 14, 4]))  # Should be 30\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    total = 0\n    if len(arr) == 0:\n        return 0\n    else:\n        for i in range(len(arr)):\n            if i % 2 == 0:\n                total += arr[i]\n    print(total)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    # arr = list(map(int, input().split()))\n    ans = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0 and i % 2 == 0:\n            ans += arr[i]\n    return ans\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    \n    for i in range(len(arr)):\n        if(arr[i]%2 == 0):\n            sum = sum + arr[i]\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    index = 0\n    while index < len(arr):\n        if arr[index] % 2 == 0:\n            sum_even += arr[index]\n        index += 2\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum_even += arr[i]\n    print(sum_even)\n    \ndef sum_even_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_odd_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum_even += arr[i]\n    print(sum_even)\n    \ndef sum_odd_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_odd_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum_even += arr[i]\n    print(sum_even)\n    \ndef sum_even_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_odd_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_odd_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum_even += arr[i]\n    print(sum_even)\n    \ndef sum_even_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum_even += arr[i]\n    print(sum_even)\n    \ndef sum_even_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_even_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_odd_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum_even += arr[i]\n    print(sum_even)\n    \ndef sum_odd_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_odd_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum_even += arr[i]\n    print(sum_even)\n    \ndef sum_odd_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_odd_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum_even += arr[i]\n    print(sum_even)\n    \ndef sum_even_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_odd_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_odd_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of odd numbers at even positions of a list.\n    '''\n    sum_even = 0\n    for i in range(len(arr)):\n        if (i % 2 == 0):\n            sum_even += arr[i]\n    print(sum_even)\n    \ndef sum_even_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_even_and_odd_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at odd positions of a list.\n    '''\n    sum_odd = 0\n    for i in range(len(arr)):\n        if (i % 2!= 0):\n            sum_odd += arr[i]\n    print(sum_odd)\n    \ndef sum_odd_and_even_index(arr):  \n    '''\n    Write a python functio"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    if len(arr) == 0:\n        return None\n    elif len(arr) == 1:\n        return arr[0]\n    else:\n        even_numbers = []\n        for i in range(0,len(arr)):\n            if i % 2 == 0:\n                even_numbers.append(arr[i])\n        sum_even = sum(even_numbers)\n        return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        if arr[i] % 2 == 0:\n            sum = sum + arr[i]\n    print(sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    if n <= 0:\n        return 0\n    else:\n        for i in range(1, n+1):\n            sum_even += pow(i, 5)\n        return sum_even\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    if n < 0:\n        print(\"Enter a positive integer\")\n    elif n == 0:\n        print(sum)\n    else:\n        for i in range(n):\n            sum = sum + (i ** 5)\n        print(sum)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            Sum += i**5\n    return Sum\n    \ndef ev_sum_odd(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the odd power.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        if i%2!= 0:\n            Sum += i**5\n    return Sum\n    \ndef sum_square(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n natural numbers that are squared.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        Sum += i**2\n    return Sum\n    \ndef sum_double(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n natural numbers that are multiplied by 2.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        Sum += i\n    return Sum\n    \ndef sum_cube(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n natural numbers that are multiplied by 3.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        Sum += i**3\n    return Sum\n    \ndef sum_cube_root(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n natural numbers that are multiplied by the cube root of 5.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        Sum += i**(1/5)\n    return Sum\n    \ndef sum_square_root(n):\n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n natural numbers that are multiplied by the cube root of 5.\n    '''\n    Sum = 0\n    for i in range(1,n+1):\n        Sum += i**(1/5)\n    return Sum\n    \ndef is_prime(n):\n    '''\n    Write a python function that takes in an integer n and returns a boolean value whether or not n is prime.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while(i <= n):\n        sum = sum + (i**5)\n        i = i + 1\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if i % 2 == 0:\n            sum += i**5\n    return sum\n    \nprint(even_Power_Sum(10))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n < 0:\n        return None\n    evens = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            evens.append(i)\n    return sum(evens)\nprint(even_Power_Sum(2)) # 9\nprint(even_Power_Sum(0)) # None\nprint(even_Power_Sum(-1)) # None\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += (5**i)\n    return sum\n    \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum += i ** 5\n        i += 1\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum += i ** 5\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sum += i**5\n    return sum\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output_list = []\n    for item in test_list:\n        output_list.append(item[1])\n    return output_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        return_list.append(test_list[i][-1])\n    return return_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [x[1] for x in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in test_list:\n        new_list.append(i[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    lst = []\n    for i in range(len(test_list)):\n        lst.append(test_list[i][1])\n    return lst\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for a in test_list:\n        new_list.append(a[1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for element in test_list:\n        rear_list.append(element[1])\n    return rear_list\n    \n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        output.append(test_list[i][1])\n    return output\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in range(len(test_list)):\n        rear_list.append(test_list[i][-1])\n    return rear_list\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    final_list = []\n    for i in range(len(test_tup1)):\n        final_list.append(test_tup1[i] - test_tup2[i])\n    return final_list\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    #print('subtract_elements():',test_tup1,test_tup2)\n    #len_test_tup1 = len(test_tup1)\n    #len_test_tup2 = len(test_tup2)\n    #print('len_test_tup1 =',len_test_tup1)\n    #print('len_test_tup2 =',len_test_tup2)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        if i < len(test_tup2):\n            result = result + (test_tup1[i] - test_tup2[i], )\n        else:\n            result = result + (test_tup1[i], )\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    sub_tuple = ()\n    for i in range(len(test_tup1)):\n        sub_tuple = sub_tuple + (test_tup1[i] - test_tup2[i],)\n    return sub_tuple\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = (0,0)\n    for index, element in enumerate(test_tup1):\n        if element == test_tup2[index]:\n            new_tup = new_tup\n        else:\n            new_tup = new_tup + (element, )\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    \n    new_tup = []\n    \n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i] - test_tup2[i])\n    \n    return new_tup\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    res = ()\n    for index in range(len(test_tup1)):\n        res += (test_tup1[index] - test_tup2[index], )\n    return res\n    \n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1_elements = []\n    test_tup2_elements = []\n    for i in range(len(test_tup1)):\n        test_tup1_elements.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        test_tup2_elements.append(test_tup2[i])\n    tup1_dict = dict(zip(test_tup1_elements, range(len(test_tup1_elements))))\n    tup2_dict = dict(zip(test_tup2_elements, range(len(test_tup2_elements))))\n    for i in range(len(test_tup1)):\n        try:\n            test_tup1[i] = tup1_dict[test_tup1[i]]\n        except:\n            pass\n    for i in range(len(test_tup2)):\n        try:\n            test_tup2[i] = tup2_dict[test_tup2[i]]\n        except:\n            pass\n    result = test_tup1[0:len(test_tup1)-1] + test_tup2[0:len(test_tup2)-1]\n    return tuple(result)\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    test_tup1 = sorted(test_tup1)\n    test_tup2 = sorted(test_tup2)\n    return tuple(map(lambda x, y: x-y, test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    list1 = []\n    for i in range(len(test_tup1)):\n        list1.append(test_tup1[i] - test_tup2[i])\n    return tuple(list1)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    # result = 0\n    # i = 1\n    # while (i * (i + 1) / 2) <= n:\n    #     if (n // i) % 2 == 0:\n    #         result += i\n    #     i += 1\n    # print(result)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if (n==0):\n        return 0\n    else:\n        Sum = 0\n        for i in range(0,n):\n            if (i%2==0):\n                Sum += pow(-1,i)*binomial(n,i)\n        return Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*(2*n+1)/2\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    assert n >= 0, \"n must be positive\"\n    \n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n == 2:\n        return 2\n    else:\n        return even_binomial_Coeff_Sum(n-2) + even_binomial_Coeff_Sum(n-4)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x = 0\n    for i in range(0,n+1):\n        x += math.factorial(i)/(math.factorial(i+0.5))\n    return x\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=(math.factorial(n)/(math.factorial(i)*math.factorial(n-i)))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    n = n//2\n    \n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return (2*even_binomial_Coeff_Sum(n-1)) + even_binomial_Coeff_Sum(n-2)\n        "
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    sum = 0.0\n    for i in range(n):\n        sum = sum + (math.factorial(n)/math.factorial(i) / math.factorial(n - i))\n    return sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * even_binomial_Coeff_Sum(n-1)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    n = int(n)\n    even_binomial_coeff = []\n    \n    for i in range(0,n+1):\n        if i%2==0:\n            even_binomial_coeff.append(math.factorial(n)/math.factorial(n-i)/math.factorial(i))\n    \n    return sum(even_binomial_coeff)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = pi*r**2*h\n    return volume\nprint(volume_cylinder(2,3))\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    volume = pi*r**2*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3) * math.pi * r * h\nprint(volume_cylinder(2,3))\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (pi * r**2 * h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3.14*r*r*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (3.14159*r**2)*(h/3)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (4/3)*math.pi*(r*r)*(h*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi=3.1415926536\n    volume=(pi*r**2*h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return math.pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (4/3)*3.14*r**3\n    return volume\n    \n    \n    \n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dic_new={k: v for k, v in dict.items() if v>=n}\n    return dic_new\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for i in dict:\n        if dict[i]>=n:\n            new_dict[i] = dict[i]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    d={}\n    for key,val in dict.items():\n        if val>=n:\n            d[key]=val\n    return d\nprint(dict_filter({\"Celsius\":-40,\"Fahrenheit\":65,\"Kelvin\":400,\"Bolivia\":-52,\"Thailand\":40,\"Indonesia\":28,\"Canada\":78,\"Brazil\":-19,\"New York\":80,\"Botswana\":-13,\"Pakistan\":26,\"Canada\":40,\"India\":40,\"Russia\":100,\"Ireland\":60,\"Italy\":80,\"Australia\":60,\"Pakistan\":18,\"Kazakhstan\":20,\"Switzerland\":40,\"France\":-41,\"Germany\":-60,\"Colombia\":43,\"Japan\":-97,\"Denmark\":-60,\"Ukraine\":35,\"Uae\":-57,\"Argentina\":37,\"Espa\u00f1a\":27,\"Mexico\":40,\"Nicaragua\":28,\"Chile\":-44,\"Italy\":-15,\"Nigeria\":16,\"Peru\":23,\"Australia\":-4,\"Panama\":20,\"Honduras\":-14,\"Argentina\":10,\"Colombia\":3,\"Chile\":4,\"Chile\":10,\"Nicaragua\":2,\"Peru\":4,\"Chile\":-2,\"Honduras\":8,\"Peru\":1,\"Colombia\":4,\"Peru\":6,\"Panama\":-3,\"Chile\":2,\"Chile\":3,\"Honduras\":2,\"Panama\":5,\"Honduras\":3,\"Argentina\":0,\"Peru\":2,\"Honduras\":2,\"Colombia\":-2,\"Colombia\":0,\"Peru\":2,\"Honduras\":2,\"Panama\":-2,\"Chile\":2,\"Honduras\":2,\"Nicaragua\":2,\"Peru\":2,\"Panama\":2,\"Colombia\":2,\"Nicaragua\":2,\"Chile\":2,\"Nicaragua\":1,\"Peru\":2,\"Chile\":1,\"Nicaragua\":1,\"Peru\":1,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":0,\"Peru\":0,\"Chile\":0,\"Nicaragua\":"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    filtered_dict = {}\n    for key, value in dict.items():\n        if value >= n:\n            filtered_dict[key] = value\n    return filtered_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    # initialize empty dictionary\n    dict_filtered = {}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for k,v in dict.items():\n        if v >= n:\n            new_dict[k] = v\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k:v for k,v in dict.items() if v>=n}\n    # Your Code Below:\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict:\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    res = {}\n    for k,v in dict.items():\n        if v>=n:\n            res[k]=v\n    return res\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    x=0\n    for i in test_tup:\n        if i>test_tup[0]:\n            x+=1\n    return x\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    first_elem = test_tup[0]\n    counter = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < first_elem:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    a = test_tup[0]\n    number_of_elements_before_a = 0\n    for i in test_tup:\n        if i<a:\n            number_of_elements_before_a += 1\n        else:\n            break\n    return number_of_elements_before_a\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([x for x in range(1,len(test_tup)) if test_tup[x] == test_tup[x-1]])\nprint(\"Number of elements before the given tuple element: \")\nprint(count_first_elements(tuple_elements))"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return sum([1 for num in test_tup if test_tup.index(num) < test_tup.index(test_tup[0])])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise ValueError(\"Argument must be of type tuple\")\n    return len(test_tup) - 1\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] <= test_tup[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return len([i for i in range(len(test_tup)) if test_tup[i] < test_tup[0]])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if i < test_tup[0]:\n            count += 1\n    return count\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    nums = 0\n    n = n\n    while n > 0:\n        nums += n\n        n = n - 1\n    return nums\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # base case\n    if n < 1:\n        return n\n    \n    # recursive case\n    elif n == 1:\n        return 1\n    else:\n        return n * (1 - 1 / 2 ** n)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonals = {1: 1, 2: 1, 3: 2, 4: 3, 5: 5, 6: 8, 7: 13, 8: 21, 9: 34}\n    if n > 9:\n        return \"n must be less than 10\"\n    else:\n        return decagonals[n]\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    i = 1\n    decagonal = 0\n    while i <= n:\n        i = i + 1\n        decagonal = decagonal + i\n        if decagonal > 10:\n            decagonal = decagonal - 10\n    return decagonal\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    num_str = ''\n    while num < n:\n        num = num * 10 + num\n        num_str = str(num)\n        if num_str[0] == num_str[-1]:\n            num = num // 10\n            num_str = str(num)\n        else:\n            return False\n    return num\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    return (n * (n + 1) * (n + 2)) // 6\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    num = 1\n    i = 1\n    while i < n:\n        i = i + 1\n        num = num + (num * (n - i + 1)) / (i)\n    return int(num)\n    \n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    \n    i=0\n    temp=0\n    while i<n:\n        i=i+1\n        temp=temp+1\n        temp=temp*10\n        if temp==2*10**i:\n            return (i+1)\n        "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n <= 1:\n        return 0\n    return n * (1 + n) // 2\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    decagonal = 0\n    for i in range(n):\n        decagonal += 1\n    return decagonal\n    \n'''\nm = int(input())\nfor i in range(m):\n    print(is_num_decagonal(i))\n'''"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found:\n        return found, pos\n    else:\n        return found, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    if found:\n        return (True, pos)\n    else:\n        return (False, -1)\n    \n    \ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            if dlist[pos] > item:\n                return (False, -1)\n            pos = pos + 1\n    if found:\n        return (True, pos)\n    else:\n        return (False, -1)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (False, -1)\n    \ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an ordered array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return (True, i)\n    return (False, -1)\n    \ndef binary_search(dlist, item):\n    '''\n    Write a function that takes in an ordered array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    left = 0\n    right = len(dlist) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if item == dlist[mid]:\n            return (True, mid)\n        elif item < dlist[mid]:\n            right = mid - 1\n        elif item > dlist[mid]:\n            left = mid + 1\n    return (False, -1)\n    \ndef ordered_binary_search(dlist, item):\n    '''\n    Write a function that takes in an ordered array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    left = 0\n    right = len(dlist) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if item == dlist[mid]:\n            return (True, mid)\n        elif item < dlist[mid]:\n            right = mid - 1\n        elif item > dlist[mid]:\n            left = mid + 1\n    return (False, -1)\n    \ndef recursive_binary_search(dlist, item):\n    '''\n    Write a function that takes in an ordered array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    left = 0\n    right = len(dlist) - 1\n    if len(dlist) > 0:\n        mid = (left + right) // 2\n        if dlist[mid] == item:\n            return (True, mid)\n        elif item < dlist[mid]:\n            return recursive_binary_search(dlist[:mid], item)\n        elif item > dlist[mid]:\n            return recursive_binary_search(dlist[mid+1:], item)\n    else:\n        return (False, -1)\n    \ndef ordered_recursive_binary_search(dlist, item):\n    '''\n    Write a function that takes in an ordered array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    left = 0\n    right = len(dlist) - 1\n    if len(dlist) > 0:\n        mid = (left + right) // 2\n        if dlist[mid] == item:\n            return (True, mid)\n        elif item < dlist[mid]:\n            return ordered_recursive_binary_search(dlist[:mid], item)\n        elif item > dlist[mid]:\n            return ordered_recursive_binary_search(dlist[mid+1:], item)\n    else:\n        return (False, -1)\n    \ndef fibonacci(n):\n    '''\n    Write a function that takes in a number and returns its nth Fibonacci number. The Fibonacci sequence is defined as the series:\n        F_n = F_(n\u22121) + F_(n\u22122)\n    where F_0 = 0 and F_1 = 1.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    elif n > 1:\n        return fibonacci(n-1) + fibonacci(n-2)\n    \ndef prime(n):\n    '''\n    Write a function that takes in a number and returns whether or not it is prime.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2:\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    \ndef add_r(n):\n    '''\n    Write a function that takes in a positive integer and returns the integer plus its reversed integer.\n    '''\n    n = str(n)\n    return int(n[::-1])\n    \ndef multiply(n1, n2):\n    '''\n    Write a function that takes in two numbers and returns the integer that is the product of the two numbers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    return int(n1 + n2)\n    \ndef reverse_integer(n):\n    '''\n    Write a function that takes in a positive integer and returns the integer reversed.\n    '''\n    n = str(n)\n    return int(n[::-1])\n    \ndef square_root(n):\n    '''\n    Write a function that takes in a positive integer and returns its square root.\n    '''\n    n = str(n)\n    return float(n[0:len(n)//2])\n    \ndef longest_word(list_of_words):\n    '''\n    Write a function that takes in a list of words and returns the word that is the longest one.\n    '''\n    longest_word = ''\n    for word in list_of_words:\n        if len(word) > len(longest_word):\n            longest_word = word\n    return longest_word\n    \ndef is_first_come_first_served(list_of_diners, table_of_waffles, served_diners, served_waffles):\n    '''\n    Write a function that takes in a list of diner names, a table of waffles, a list of the served diners and a list of the served waffles, and returns a boolean indicating whether or not the diner with the longest served waffles will be first served.\n    '''\n    if len(list_of_diners) > 0:\n        for diner in list_of_diners:\n            if len(served_diners) > 0:\n                if diner == served_diners[0]:\n                    if len(served_waffles) > 0:\n                        if table_of_waffles[0] == served_waffles[0]:\n                            return True\n                        else:\n                            return False\n                    else:\n                        return False\n                else:\n                    return False\n            else:\n                return False\n    else:\n        return False\n    \ndef list_manipulation(list_to_manipulate, number, operation):\n    '''\n    Write a function that takes in a list and a number and an operation and returns a new list with all of the operations applied to the number and the list.\n    '''\n    if operation == \"multiply\":\n        return list_to_manipulate * number\n    if operation == \"add\":\n        return list_to_manipulate + number\n    if operation == \"subtract\":\n        return list_to_manipulate - number\n    if operation == \"divide\":\n        return list_to_manipulate / number\n    return list_to_manipulate\n    \ndef even_odd(list_of_nums):\n    '''\n    Write a function that takes in a list and returns a boolean indicating whether or not all the numbers in the list are even. If the list is empty, the result should be False.\n    '''\n    if len(list_of_nums) > 0:\n        for num in list_of_nums:\n            if num % 2 == 1:\n                return False\n        return True\n    else:\n        return False\n    \ndef reverse_sublist(list_to_reverse, start_index, end_index):\n    ''"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # Create two index variables: one to keep track of the number of comparisons and another to keep track of the location of the element.\n    comparisons = 0\n    position = 0\n    # Iterate over the list to find the element and compare it to the element in the list.\n    for i in range(0, len(dlist)):\n        comparisons += 1\n        if dlist[i] == item:\n            return True, position\n        else:\n            position += 1\n    # If we get here, then we did not find the element in the list.\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    length = len(dlist)\n    i = 0\n    while i < length:\n        if dlist[i] == item:\n            return True, i\n        i += 1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for index, element in enumerate(dlist):\n        if element == item:\n            return True, index\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    i = 0\n    while i < len(dlist) and not found:\n        if dlist[i] == item:\n            found = True\n            break\n        i += 1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #get the length of the list\n    length = len(dlist)\n    found = False\n    pos = 0\n    while pos < length and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos = pos + 1\n    return found, pos\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n    while pos < len(dlist) and not found:\n        if dlist[pos] == item:\n            found = True\n        else:\n            pos += 1\n    if found:\n        return True, pos\n    else:\n        return False, -1\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for i in range(0,len(test_list)):\n        if test_list[i] not in unique:\n            unique.append(test_list[i])\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n    # Solution 2:\n    '''\n    from collections import Counter\n    return len(test_list) == len(Counter(test_list))\n    '''\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # CODE HERE\n    for i in range(1,len(test_list)):\n        if test_list[i] in test_list[:i]:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for x in test_list:\n        if test_list.count(x) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    unique = []\n    for item in test_list:\n        if item not in unique:\n            unique.append(item)\n    print(\"List of unique elements: \", unique)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    print(f\"{'='*30}Test Cases:{'='*30}\")\n    for i in test_list:\n        if i in test_list:\n            print(f\"Test Case Passed: {i} is unique.\")\n        else:\n            print(f\"Test Case Failed: {i} is not unique.\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set()\n    for i in test_list:\n        if i in test_set:\n            return False\n        else:\n            test_set.add(i)\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_set = set(test_list)\n    if len(test_set) == len(test_list):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    nums1_len = len(nums1)\n    nums2_len = len(nums2)\n    if nums1_len!= nums2_len:\n        return False\n    else:\n        for i in range(nums1_len):\n            nums1[i] = nums1[i] - nums2[i]\n        return nums1\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(0,len(nums1)):\n        result.append(nums1[i]-nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # l1 = len(nums1)\n    # l2 = len(nums2)\n    # if l1 > l2:\n    #     return [x-y for x,y in zip(nums1,nums2)]\n    # else:\n    #     return [x-y for x,y in zip(nums2,nums1)]\n    if len(nums1) > len(nums2):\n        return [x-y for x,y in zip(nums1,nums2)]\n    else:\n        return [x-y for x,y in zip(nums2,nums1)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    #return [num1-num2 for num1,num2 in zip(nums1,nums2)]\n    \n    #zip returns a tuple; we need to convert it into a list.\n    #This is to make it mutable\n    return list(zip(nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    diff_list = []\n    if len(nums1)!= len(nums2):\n        raise ValueError(\"The length of lists are different\")\n    else:\n        for i in range(len(nums1)):\n            diff_list.append(nums1[i]-nums2[i])\n    return diff_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    sub_list = []\n    \n    if not nums1:\n        return nums2\n    if not nums2:\n        return nums1\n    for i in nums1:\n        sub_list.append(i-nums2[0])\n    sub_list = sub_list[1:]\n    return sub_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return map(lambda x: x[0] - x[1], zip(nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    \n    if len(nums1) == 0:\n        return nums2\n    if len(nums2) == 0:\n        return nums1\n    \n    return [n1 - n2 for n1, n2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    subtraction = []\n    for i in range(len(nums1)):\n        subtraction.append(nums1[i]-nums2[i])\n    return subtraction\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    print([x - y for x,y in zip(nums1,nums2)])\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    lst = []\n    for i in range(0,10):\n        lst.append(0)\n    for i in range(0,n):\n        for j in range(0,10):\n            if(lst[j]>=i):\n                lst[j]+=1\n            else:\n                lst[j]=1\n    \n    for i in range(0,10):\n        if(lst[i]>0):\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    res = {}\n    for i in str(n):\n        res[i] = res.get(i,0)+1\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n < 10:\n        return True\n    digit = n % 10\n    rem = n//10\n    while rem >= 10:\n        rem = rem % 10\n        if digit > rem:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    return(n)\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if type(n)!= int:\n        raise TypeError(\"Input must be an integer\")\n    if n < 0:\n        raise ValueError(\"Input must be greater than 0\")\n    for i in range(10):\n        if n == 0:\n            return True\n        n = n/10\n        if n >= int(str(n)[i]):\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    while n>0:\n        count+=1\n        n = n//10\n    return count <= digit\n    \ndef main():\n    n = input(\"Enter an Integer:\")\n    if(validate(n)):\n        print(\"Valid Integer\")\n    else:\n        print(\"Invalid Integer\")\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    str_n = str(n)\n    counter = {}\n    for i in str_n:\n        if i in counter:\n            counter[i] += 1\n        else:\n            counter[i] = 1\n    flag = 1\n    for i in counter:\n        if counter[i] >= int(i):\n            flag = 0\n    return flag\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    for i in range(1, n+1):\n        freq[i] = 0\n    for i in range(1, n+1):\n        freq[i] = freq[i] + 1\n    for i in range(1, n+1):\n        if freq[i] <= i:\n            print(i)\n            break\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = []\n    if n == 0:\n        return True\n    while n:\n        digits.append(n%10)\n        n //= 10\n    for i in range(len(digits)):\n        if digits.count(digits[i]) > digits[i]:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    for i in str(n):\n        if(int(i)>n):\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    #Your code here\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    list_temp = []\n    for item in list:\n        if item == element:\n            list_temp.append(True)\n        else:\n            list_temp.append(False)\n    if all(list_temp):\n        return True\n    else:\n        return False\n        \n        \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for x in list:\n        if x!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == [] or list == [element]:\n        return True\n    return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    \n    # check if the list is empty\n    if list == []:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # initialize a flag\n    flag = 0\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == element:\n        return True\n    else:\n        return False\n    \ndef check_element_in_list(list,element):\n    '''\n    Write a function that takes in a list and an element and returns True if the list contains the element and False if it does not.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n        \n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == None:\n        return False\n    if list == []:\n        return False\n    if list == element:\n        return True\n    else:\n        if len(list) == 1 and list[0] == element:\n            return True\n        else:\n            return check_element(list[1:], element)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r\"a(b[a-z])?\", text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    result=re.search(r'a(b(b)|b)',text)\n    if result!=None:\n        return 'Found'\n    return 'Not Found'\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return text.find('a',0,len(text))>=0 and (text.find('a',0,len(text))<text.find('b',0,len(text)))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match = re.search('a.{2,3}b',text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a(?:a|b)+b',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.match(r'^a{2,3}b$', text):\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    regex = re.compile(r'^a[bB]{2,3}')\n    if regex.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.match(r'a+b',text)\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = re.compile(r'ab+')\n    if pattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    # a^2+b^2==2 or a^2+2ab+2b^2==2 or a^2+a+b+2b^2==2\n    # a^2+b^2+2ab+2b^2==2\n    # a^2+b^2==2+2ab+2b^2==2\n    # a^2+2ab+b^2+b^2==2+2ab+2b^2==2\n    # a^2+2ab+b^2+b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+2ab+2b^2==2+2ab+2b^2==2\n    # a^2+2ab+2b^2+b^2+b^2==2+2ab+2b^2==2\n    # a^2+2ab+2b^2+b^2==2+2ab+2b^2+b^2==2\n    # a^2+b^2+b^2+b^2+2ab+2b^2==2+2ab+2b^2==2\n    # a^2+2ab+b^2+b^2+2ab+2b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+2ab+b^2+b^2==2+2ab+b^2==2\n    # a^2+2ab+2b^2+b^2+2ab+b^2+b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+b^2+2ab+2b^2==2+b^2+2ab==2\n    # a^2+2ab+b^2+b^2+b^2+2ab+b^2==2+2ab+b^2==2\n    # a^2+2ab+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+2ab+b^2+b^2+2ab+b^2==2+2ab+b^2==2\n    # a^2+2ab+b^2+2ab+2b^2==2+2ab+2b^2==2\n    # a^2+b^2+2ab+b^2+b^2+2ab+2b^2==2+2ab+2b^2==2\n    # a^2+2ab+b^2+b^2+b^2+2ab+b^2+b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+b^2+2ab+b^2+b^2==2+2ab+2b^2==2\n    # a^2+2ab+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+2ab+b^2+b^2+b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+b^2+2ab+b^2+b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+2ab+2b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+2ab+2b^2+b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+2ab+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+2ab+2b^2==2+2ab+2b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+2ab+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+2ab+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2==2+2ab+b^2==2\n    # a^2+b^2+b^2+b^2+b^2+b^2+b^2+b^2+"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    match_two = r'(ab)+'\n    match_three = r'(ab)+?'\n    if re.search(match_two, text) or re.search(match_three, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #print(a, n, k)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    curr_sum = 0\n    left_ptr = 0\n    right_ptr = 0\n    for i in range(0, n):\n        curr_sum = curr_sum + a[i]\n        if(i >= k):\n            curr_sum = curr_sum - a[left_ptr]\n            left_ptr += 1\n        if(curr_sum > max_sum):\n            max_sum = curr_sum\n    curr_sum = 0\n    for i in range(n-k, n):\n        curr_sum = curr_sum + a[i]\n        if(i >= k):\n            curr_sum = curr_sum - a[right_ptr]\n            right_ptr += 1\n        if(curr_sum > max_sum):\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    current_sum = 0\n    current_sum_repeated = 0\n    current_sum_repeated_count = 0\n    for i in range(n): \n        current_sum += a[i]\n        current_sum_repeated += a[i]\n        if current_sum_repeated == k:\n            current_sum_repeated_count += 1\n        if current_sum > max_sum:\n            max_sum = current_sum\n    if current_sum_repeated_count > 0:\n        return max_sum\n    return -1\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    n = len(a)\n    k = int(k)\n    maxSum = -sys.maxsize\n    maxSumRepeated = -sys.maxsize\n    for i in range(n):\n        tempSum = 0\n        tempSumRepeated = 0\n        for j in range(k):\n            tempSum += a[i]\n            tempSumRepeated += tempSum\n        if tempSumRepeated > maxSumRepeated:\n            maxSumRepeated = tempSumRepeated\n        if tempSum > maxSum:\n            maxSum = tempSum\n    return maxSumRepeated if maxSumRepeated > maxSum else maxSum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum + a[i], a[i])\n        if max_sum % k == 0:\n            return max_sum\n        \n    return max_sum\n    \n    \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return a[0]\n    if k == 1:\n        return max(a)\n    if k == 2:\n        return max(max_sub_array_sum_repeated(a, n-1, 1), max_sub_array_sum_repeated(a, n-1, 2), a[0], a[1])\n    else:\n        return max(max_sub_array_sum_repeated(a, n-1, k), max_sub_array_sum_repeated(a, n-1, k-1), max_sub_array_sum_repeated(a, n-1, k-2), max_sub_array_sum_repeated(a, n-k, k), max_sub_array_sum_repeated(a, n-k, k-1), max_sub_array_sum_repeated(a, n-k, k-2))\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -1000000000000\n    curr_sum = 0\n    i = 0\n    while i < n:\n        curr_sum += a[i]\n        i += 1\n        if curr_sum == 0 and i >= k:\n            max_sum = max(max_sum, curr_sum)\n            curr_sum = 0\n    return max_sum\n        "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    if n==0:\n        return None\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    max_sum = -100000000\n    current_sum = 0\n    for i in range(n):\n        current_sum += a[i]\n        if current_sum > max_sum:\n            max_sum = current_sum\n            \n        if current_sum >= k:\n            break\n        \n        if i >= n - k:\n            current_sum -= a[i - k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n    return max_sum\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = 0\n    prev_sum = 0\n    for i in range(n):\n        prev_sum = max(prev_sum + a[i], 0)\n        max_sum = max(max_sum, prev_sum)\n    \n    return max_sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        if (i % 2) == 0:\n            result += i**2\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(i * i for i in range(0, n, 2))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([i**2 for i in range(1,n+1) if i%2==0])\n    \nprint(square_Sum(5))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0, n):\n        if i % 2 == 0:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum([x*x for x in range(n) if x%2==0])\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    result = 0\n    for i in range(n):\n        result = result + i*i\n    return result\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i * i\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum_of_squares = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum_of_squares += i**2\n    return sum_of_squares\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    i = 0\n    a = 0\n    while i < n:\n        a = a + (i*i)\n        i = i+1\n    print(a)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i%2 == 0:\n            sum = sum + i**2\n    return sum\nprint(square_Sum(5)"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = len(list1[0])\n    for element in list1:\n        if len(element) > max_len:\n            max_len = len(element)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max:\n            max = len(list1[i])\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    return max([len(l) for l in list1])\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length_list = []\n    for element in list1:\n        max_length_list.append(len(element))\n    return max(max_length_list)\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in list1:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxi = len(list1[0])\n    for i in list1:\n        if len(i) > maxi:\n            maxi = len(i)\n    return maxi\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    length = 0\n    for l in list1:\n        if len(l) > length:\n            length = len(l)\n    return length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    list1 = sorted(list1,key=len)\n    return max(list1,key=len)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ans = [0]*(k+1)\n    for i in range(1,n+1):\n        for j in range(1,k+1):\n            if i==1 and j==1:\n                ans[j] = 1\n            elif i==1:\n                ans[j] = ans[j-1]\n            elif j==1:\n                ans[j] = ans[j] + ans[j-1]\n            else:\n                ans[j] = ans[j] + ans[j-1] + ans[j-2]\n    return ans[k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Method 1 - Brute force\n    if n==2 and k==2:\n        return 1\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0 or k == 0 or n == k: \n        return 0\n    return count_no_of_ways_rec(n, k, 1, 0, 0)\n    \ndef count_no_of_ways_rec(n, k, cnt, i, j):\n    if i == n or j == k: \n        return 0\n    if cnt >= 2: \n        return 0\n    if i == 0: \n        return count_no_of_ways_rec(n, k, cnt + 1, 0, j + 1)\n    if j == 0: \n        return count_no_of_ways_rec(n, k, cnt + 1, i + 1, j + 1)\n    if i > 0 and j > 0 and i - 1 == 0 and j - 1 == 0: \n        return 1\n    return count_no_of_ways_rec(n, k, cnt, i + 1, j) + count_no_of_ways_rec(n, k, cnt, i, j + 1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n<=1:\n        return 1\n    dp = [[0]*(k+1) for i in range(n+1)]\n    for i in range(1, n+1):\n        for j in range(1, k+1):\n            if i==1 or j==1:\n                dp[i][j] = 1\n            elif j==1:\n                dp[i][j] = i\n            elif j==2:\n                dp[i][j] = i-1\n            else:\n                dp[i][j] = dp[i-1][j-2] + dp[i-1][j]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k == 0:\n        return 0\n    if k == 1:\n        return n\n    count = 0\n    for i in range(k, n):\n        count += count_no_of_ways(n, i)\n    count += n - k + 1\n    return count\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Recursion base case\n    if n <= k:\n        return 1\n        \n    # recursion step\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k+1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 0:\n        return 1\n    if k == 0:\n        return 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    if n == 4:\n        return 6\n    if n == 5:\n        return 8\n    if k == 1:\n        return 1\n    if k == 2:\n        return 2\n    if k == 3:\n        return 3\n    if k == 4:\n        return 4\n    if k == 5:\n        return 5\n    if k == 6:\n        return 6\n    if k == 7:\n        return 7\n    if k == 8:\n        return 8\n    if k == 9:\n        return 9\n    if k == 10:\n        return 10\n    if k == 11:\n        return 11\n    if k == 12:\n        return 12\n    if k == 13:\n        return 13\n    if k == 14:\n        return 14\n    if k == 15:\n        return 15\n    if k == 16:\n        return 16\n    if k == 17:\n        return 17\n    if k == 18:\n        return 18\n    if k == 19:\n        return 19\n    if k == 20:\n        return 20\n    if k == 21:\n        return 21\n    if k == 22:\n        return 22\n    if k == 23:\n        return 23\n    if k == 24:\n        return 24\n    if k == 25:\n        return 25\n    if k == 26:\n        return 26\n    if k == 27:\n        return 27\n    if k == 28:\n        return 28\n    if k == 29:\n        return 29\n    if k == 30:\n        return 30\n    if k == 31:\n        return 31\n    if k == 32:\n        return 32\n    if k == 33:\n        return 33\n    if k == 34:\n        return 34\n    if k == 35:\n        return 35\n    if k == 36:\n        return 36\n    if k == 37:\n        return 37\n    if k == 38:\n        return 38\n    if k == 39:\n        return 39\n    if k == 40:\n        return 40\n    if k == 41:\n        return 41\n    if k == 42:\n        return 42\n    if k == 43:\n        return 43\n    if k == 44:\n        return 44\n    if k == 45:\n        return 45\n    if k == 46:\n        return 46\n    if k == 47:\n        return 47\n    if k == 48:\n        return 48\n    if k == 49:\n        return 49\n    if k == 50:\n        return 50\n    if k == 51:\n        return 51\n    if k == 52:\n        return 52\n    if k == 53:\n        return 53\n    if k == 54:\n        return 54\n    if k == 55:\n        return 55\n    if k == 56:\n        return 56\n    if k == 57:\n        return 57\n    if k == 58:\n        return 58\n    if k == 59:\n        return 59\n    if k == 60:\n        return 60\n    if k == 61:\n        return 61\n    if k == 62:\n        return 62\n    if k == 63:\n        return 63\n    if k == 64:\n        return 64\n    if k == 65:\n        return 65\n    if k == 66:\n        return 66\n    if k == 67:\n        return 67\n    if k == 68:\n        return 68\n    if k == 69:\n        return 69\n    if k == 70:\n        return 70\n    if k == 71:\n        return 71\n    if k == 72:\n        return 72\n    if k == 73:\n        return 73\n    if k == 74:\n        return 74\n    if k == 75:\n        return 75\n    if k == 76:\n        return 76\n    if k == 77:\n        return 77\n    if k == 78:\n        return 78\n    if k == 79:\n        return 79\n    if k == 80:\n        return 80\n    if k == 81:\n        return 81\n    if k == 82:\n        return 82\n    if k == 83:\n        return 83\n    if k == 84:\n        return 84\n    if k == 85:\n        return 85\n    if k == 86:\n        return 86\n    if k == 87:\n        return 87\n    if k == 88:\n        return 88\n    if k == 89:\n        return 89\n    if k == 90:\n        return 90\n    if k == 91:\n        return 91\n    if k == 92:\n        return 92\n    if k == 93:\n        return 93\n    if k == 94:\n        return 94\n    if k == 95:\n        return 95\n    if k == 96:\n        return 96\n    if k == 97:\n        return 97\n    if k == 98:\n        return 98\n    if k == 99:\n        return 99\n    if k == 100:\n        return 100\n    if k == 101:\n        return 101\n    if k == 102:\n        return 102\n    if k == 103:\n        return 103\n    if k == 104:\n        return 104\n    if k == 105:\n        return 105\n    if k == 106:\n        return 106\n    if k == 107:\n        return 107\n    if k == 108:\n        return 108\n    if k == 109:\n        return 109\n    if k == 110:\n        return 110\n    if k == 111:\n        return 111\n    if k == 112:\n        return 112\n    if k == 113:\n        return 113\n    if k == 114:\n        return 114\n    if k == 115:\n        return 115\n    if k == 116:\n        return 116\n    if k == 117:\n        return 117\n    if k == 118:\n        return 118\n    if k == 119:\n        return 119\n    if k == 120:\n        return 120\n    if k == 121:\n        return 121\n    if k == 122:\n        return 122\n    if k == 123:\n        return 123\n    if k == 124:\n        return 124\n    if k == 125:\n        return 125\n    if k == 126:\n        return 126\n    if k == 127:\n        return 127\n    if k == 128:\n        return 128\n    if k == 129:\n        return 129\n    if k == 130:\n        return 130\n    if k == 131:\n        return 131\n    if k == 132:\n        return 132\n    if k == 133:\n        return 133\n    if k == 134:\n        return 134\n    if k == 135:\n        return 135\n    if k == 136:\n        return 136\n    if k == 137:\n        return 137\n    if k == 138:\n        return 138\n    if k == 139:\n        return 139\n    if k == 140:\n        return 140\n    if k == 141:\n        return 141\n    if k == 142:\n        return 142\n    if k == 143:\n        return 143\n    if k == 144:\n        return 144\n    if k == 145:\n        return 145\n    if k == 146:\n        return 146\n    if k == 147:\n        return 147\n    if k == 148:\n        return 148\n    if k == 149:\n        return 149\n    if k == 150:\n        return 150\n    if k == 151:\n        return 151\n    if k == 152:\n        return 152\n    if k == 153:\n        return 153\n    if k == 154:\n        return 154\n    if k == 155:\n        return 155\n    if k == 156:\n        return 156\n    if k == 157:\n        return 157\n    if k == 158:\n        return 158\n    if k == 159:\n        return 159\n    if k == 160:\n        return 160\n    if k == 161:\n        return 161\n    if k == 162:\n        return 162\n    if k == 163:\n        return 163\n    if k == 164:\n        return 164\n    if k == 165:\n        return 165\n    if k == 166:\n        return 166\n    if k == 167:\n        return 167\n    if k == 168:\n        return 168\n    if k == 169:\n        return 169\n    if k == 170:\n        return 170\n    if k == 171:\n        return 171\n    if k == 172:\n        return 172\n    if k == 173:\n        return 173\n    if k == 174:"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base case\n    if n == 0 and k == 1:\n        return 1\n    if k == 0:\n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    #base case\n    if n==0 or k==0:\n        return 0\n    \n    #final output\n    ways = 0\n    \n    #case 1: painting with 2 posts\n    ways = ways + count_no_of_ways(n-1,k)\n    \n    #case 2: painting with 3 posts\n    ways = ways + count_no_of_ways(n-2,k)\n    \n    #case 3: painting with 4 posts\n    ways = ways + count_no_of_ways(n-3,k)\n    \n    #case 4: painting with 5 posts\n    ways = ways + count_no_of_ways(n-4,k)\n    \n    #case 5: painting with 6 posts\n    ways = ways + count_no_of_ways(n-5,k)\n    \n    #case 6: painting with 7 posts\n    ways = ways + count_no_of_ways(n-6,k)\n    \n    return ways\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    \n    # Base case\n    if n == 0:\n        return 0\n    if n < k:\n        return 0\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    # Code here\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n==0:\n        return 0\n    if m==0:\n        return 0\n    if m==1:\n        return n\n    if n==1:\n        return m\n    return find(n-m,m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    # return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n    \ndef find(a,b):\n    '''\n    Write a python function to find remainder of two numbers (rounded down to the nearest integer).\n    '''\n    return a%b\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return (int(n/m))\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    if n >= m:\n        return n//m\n    return n//m + 1\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if w > h:\n        a = w\n        h = w\n        w = a\n    return (w**2 + h**2 - h*math.sqrt((w**2 + h**2)**2 - 4*w*h*math.sin(math.pi/3))) / (2*w*h*math.sin(math.pi/3))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return h**2/w\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt((w**2)+(h**2))\n    b = math.sqrt((w**2)-(h**2))\n    c = w\n    if a+b < c:\n        return a+b\n    else:\n        return a+b\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    w = float(w)\n    h = float(h)\n    s = (math.sin(math.pi/3) * h) / 2.0\n    return (w*w*h*h*s) / (s*s)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w**2+h**2\ndef hypotenuse_rightangle(w,h):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle.\n    '''\n    return w*h**0.5\ndef dist_rightangle(p1,p2):\n    '''\n    Write a function to calculate the distance between two points on a right angled triangle.\n    '''\n    x1,y1=p1\n    x2,y2=p2\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\ndef side_rightangle(w,h):\n    '''\n    Write a function to find the length of the hypotenuse of a right angled triangle.\n    '''\n    return w*h**0.5\ndef side_rightangle_2(w,h):\n    '''\n    Write a function to find the side length of a right angled triangle using the Pythagorean Theorem.\n    '''\n    return math.sqrt(w**2+h**2)\ndef otherside_rightangle_2(w,h):\n    '''\n    Write a function to find the length of the other side of a right angled triangle using the Pythagorean Theorem.\n    '''\n    return math.sqrt(w**2-h**2)\ndef hypotenuse_rightangle_2(w,h):\n    '''\n    Write a function to find the length of the hypotenuse of a right angled triangle using the Pythagorean Theorem.\n    '''\n    return math.sqrt((w**2)+(h**2))\ndef dist_rightangle_2(p1,p2):\n    '''\n    Write a function to find the distance between two points on a right angled triangle using the Pythagorean Theorem.\n    '''\n    x1,y1=p1\n    x2,y2=p2\n    return math.sqrt((x1-x2)**2+(y1-y2)**2)\ndef hypotenuse_triangle(a,b,c):\n    '''\n    Write a function to find the length of the hypotenuse of a right angled triangle.\n    '''\n    s=otherside_rightangle(a,b)\n    t=otherside_rightangle(a,c)\n    u=otherside_rightangle(b,c)\n    return math.sqrt((s*t)+(u*s))\ndef side_triangle(a,b,c):\n    '''\n    Write a function to find the length of the length of the other side of a right angled triangle.\n    '''\n    return math.sqrt((a*b)+(a*c)+(b*c))\ndef side_triangle_2(a,b,c):\n    '''\n    Write a function to find the length of the length of the other side of a right angled triangle using the Pythagorean Theorem.\n    '''\n    return math.sqrt(((a**2)+(b**2))+((a**2)+(c**2)))\ndef hypotenuse_triangle_2(a,b,c):\n    '''\n    Write a function to find the length of the hypotenuse of a right angled triangle using the Pythagorean Theorem.\n    '''\n    return math.sqrt((((a**2)+(b**2))+(a**2))+(((a**2)+(c**2))+(a**2)))\ndef otherside_triangle(a,b,c):\n    '''\n    Write a function to find the length of the length of the other side of a right angled triangle.\n    '''\n    return math.sqrt(((b**2)+(c**2))+((b**2)+(a**2)))\ndef dist_triangle(a,b,c):\n    '''\n    Write a function to find the distance between two points on a right angled triangle.\n    '''\n    s=side_rightangle(a,b)\n    t=side_rightangle(a,c)\n    u=side_rightangle(b,c)\n    return math.sqrt((s**2)+(t**2)+(u**2))\ndef hypotenuse_square(a,b,c):\n    '''\n    Write a function to find the length of the hypotenuse of a right angled triangle.\n    '''\n    return math.sqrt(((a**2)+(b**2))+((a**2)+(c**2)))\ndef side_square(a,b,c):\n    '''\n    Write a function to find the length of the length of the other side of a right angled triangle.\n    '''\n    return math.sqrt(((a**2)+(b**2))+((a**2)+(c**2)))\ndef side_square_2(a,b,c):\n    '''\n    Write a function to find the length of the length of the other side of a right angled triangle using the Pythagorean Theorem.\n    '''\n    return math.sqrt(((a**2)+(b**2))+(a**2))\ndef hypotenuse_square_2(a,b,c):\n    '''\n    Write a function to find the length of the hypotenuse of a right angled triangle using the Pythagorean Theorem.\n    '''\n    return math.sqrt((((a**2)+(b**2))+((a**2)+(c**2)))+(((a**2)+(b**2))+((a**2)+(c**2))))\ndef otherside_square(a,b,c):\n    '''\n    Write a function to find the length of the length of the other side of a right angled triangle.\n    '''\n    return math.sqrt(((b**2)+(c**2))+((b**2)+(a**2)))\ndef dist_square(a,b,c):\n    '''\n    Write a function to find the distance between two points on a right angled triangle.\n    '''\n    return math.sqrt(((a**2)+(b**2))+((a**2)+(c**2)))\ndef hypotenuse_cubic(a,b,c,d,e):\n    '''\n    Write a function to find the length of the hypotenuse of a right angled triangle.\n    '''\n    return math.sqrt((((a**2)+(b**2))+(c**2))+(((a**2)+(b**2))+(c**2)))\ndef side_cubic(a,b,c,d,e):\n    '''\n    Write a function to find the length of the length of the other side of a right angled triangle.\n    '''\n    return math.sqrt((((a**2)+(b**2))+(c**2))+(((a**2)+(b**2))+(c**2)))\ndef side_cubic_2(a,b,c,d,e):\n    '''\n    Write a function to find the length of the length of the other side of a right angled triangle using the Pythagorean Theorem.\n    '''\n    return math.sqrt((((a**2)+(b**2))+(c**2))+(((a**2)+(b**2))+(c**2)))\ndef hypotenuse_cubic_2(a,b,c,d,e):\n    '''\n    Write a function to find the length of the hypotenuse of a right angled triangle using the Pythagorean Theorem.\n    '''\n    return math.sqrt((((a**2)+(b**2))+(c**2))+(((a**2)+(b**2))+(c**2))+(((a**2)+(b**2))+(c**2)))\ndef otherside_cubic(a,b,c,d,e):\n    '''\n    Write a function to find the length of the length of the other side of a right angled triangle.\n    '''\n    return math.sqrt(((d**2)+(e**2))+((d**2)+(e**2))+((e**2)+(a**2)))\ndef dist_cubic(a,b,c,d,e):\n    '''\n    Write a function to find the distance between two points on a right angled triangle.\n    '''\n    return math.sqrt((((a**2)+(b**2))+(c**2))+(((a**2)+(b**2))+(c**2))+(((a**2)+("
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    #check if triangle is right angled triangle\n    if h**2 - w**2 < 0:\n        return \"Not right angled\"\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    return side\ndef hypotenuse(w,h):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2)\n    hyp = side * 2\n    return hyp\ndef quadratic_equation(a,b,c):\n    '''\n    Write a function that finds the solutions to the equation:\n    ax^2 + bx + c = 0\n    '''\n    sol = (b**2 - 4*a*c)**(1/2)\n    x1 = (-b + sol)/2*a\n    x2 = (-b - sol)/2*a\n    return x1,x2\ndef triangle_area(w,h):\n    '''\n    Write a function to find the area of a right angled triangle.\n    '''\n    s1 = w*h/2\n    return s1\ndef main():\n    '''\n    Write code to test your functions.\n    '''\n    # Test otherside_rightangle\n    print(otherside_rightangle(10,10) == 10)\n    print(otherside_rightangle(10,11) == 11)\n    print(otherside_rightangle(10,12) == 12)\n    print(otherside_rightangle(11,10) == 11)\n    print(otherside_rightangle(11,11) == 10)\n    print(otherside_rightangle(11,12) == 12)\n    print(otherside_rightangle(12,10) == 12)\n    print(otherside_rightangle(12,11) == 10)\n    print(otherside_rightangle(12,12) == 10)\n    # Test hypotenuse\n    print(hypotenuse(10,10) == 10)\n    print(hypotenuse(10,11) == 11)\n    print(hypotenuse(10,12) == 12)\n    print(hypotenuse(11,10) == 11)\n    print(hypotenuse(11,11) == 10)\n    print(hypotenuse(11,12) == 12)\n    print(hypotenuse(12,10) == 12)\n    print(hypotenuse(12,11) == 10)\n    print(hypotenuse(12,12) == 10)\n    # Test quadratic_equation\n    print(quadratic_equation(1,1,1) == (-1, -1))\n    print(quadratic_equation(1,4,-10) == (-1, -10))\n    print(quadratic_equation(0,0,0) == (-1, -1))\n    print(quadratic_equation(-1,4,-10) == (1, -10))\n    print(quadratic_equation(-10,4,-10) == (-10, -10))\n    print(quadratic_equation(-4,4,-10) == (-4, -10))\n    print(quadratic_equation(-10,10,-5) == (1, 5))\n    print(quadratic_equation(10,-10,-5) == (-1, -5))\n    print(quadratic_equation(-10,10,-5) == (-1, -5))\n    print(quadratic_equation(4,-4,5) == (-1, -1))\n    # Test triangle_area\n    print(triangle_area(5,7) == 7)\n    print(triangle_area(5,6) == 10)\n    print(triangle_area(10,20) == 20)\n    print(triangle_area(1,1) == 1)\n    print(triangle_area(1,2) == 2)\n    print(triangle_area(2,1) == 2)\n    print(triangle_area(2,2) == 2)\n    print(triangle_area(3,2) == 3)\n    print(triangle_area(0,0) == 0)\n    print(triangle_area(2,0) == 0)\n    print(triangle_area(0,2) == 0)\n    print(triangle_area(10,10) == 100)\n    print(triangle_area(10,-10) == 100)\n    print(triangle_area(-10,-10) == 0)\n    print(triangle_area(-10,10) == 0)\n    print(triangle_area(-10,-10) == 0)\n    print(triangle_area(0,-10) == 0)\n    print(triangle_area(0,0) == 0)\n    print(triangle_area(10,0) == 0)\n    print(triangle_area(-10,0) == 0)\n    print(triangle_area(0,10) == 0)\n    print(triangle_area(0,-10) == 0)\n    print(triangle_area(10,0) == 0)\n    print(triangle_area(0,10) == 0)\n    print(triangle_area(0,-10) == 0)\n    print(triangle_area(10,-10) == 0)\n    print(triangle_area(0,-10) == 0)\n    print(triangle_area(10,10) == 0)\n    print(triangle_area(1,2) == 1)\n    print(triangle_area(1,3) == 1)\n    print(triangle_area(1,4) == 2)\n    print(triangle_area(2,2) == 2)\n    print(triangle_area(2,3) == 2)\n    print(triangle_area(2,4) == 2)\n    print(triangle_area(3,2) == 2)\n    print(triangle_area(3,3) == 3)\n    print(triangle_area(3,4) == 3)\n    print(triangle_area(4,2) == 3)\n    print(triangle_area(4,3) == 3)\n    print(triangle_area(4,4) == 4)\n    print(triangle_area(5,2) == 4)\n    print(triangle_area(5,3) == 4)\n    print(triangle_area(5,4) == 4)\n    print(triangle_area(6,2) == 4)\n    print(triangle_area(6,3) == 4)\n    print(triangle_area(6,4) == 4)\n    print(triangle_area(7,2) == 4)\n    print(triangle_area(7,3) == 4)\n    print(triangle_area(7,4) == 4)\n    print(triangle_area(8,2) == 4)\n    print(triangle_area(8,3) == 4)\n    print(triangle_area(8,4) == 4)\n    print(triangle_area(9,2) == 4)\n    print(triangle_area(9,3) == 4)\n    print(triangle_area(9,4) == 4)\n    print(triangle_area(10,2) == 4)\n    print(triangle_area(10,3) == 4)\n    print(triangle_area(10,4) == 4)\n    print(triangle_area(11,2) == 4)\n    print(triangle_area(11,3) == 4)\n    print(triangle_area(11,4) == 4)\n    print(triangle_area(12,2) == 4)\n    print(triangle_area(12,3) == 4)\n    print(triangle_area(12,4) == 4)\n    print(triangle_area(13,2) == 4)\n    print(triangle_area(13,3) == 4)\n    print(triangle_area(13,4) == 4)\n    print(triangle_area(14,2) == 4)\n    print(triangle_area(14,3) == 4)\n    print(triangle_area(14,4) == 4)\n    print(triangle_area(15,2) == 4)\n    print(triangle_area(15,3) == 4)\n    print(triangle_area(15,4) == 4)\n    print(triangle_area(16,2) == 4)"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = w*h/2\n    return(s)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    third_side = math.sqrt(w**2+h**2)\n    return third_side\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return (w**2 + h**2)/2\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    val = 0\n    for i in listval:\n        if i > val:\n            val = i\n    return val\n    \n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    l=[]\n    for item in listval:\n        if type(item)==int:\n            l.append(item)\n        else:\n            print(\"Error\")\n    print(\"The maximum value in the list is \",max(l))\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = 0\n    for i in range(0, len(listval)):\n        if maxval < listval[i]:\n            maxval = listval[i]\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return_string = ''\n    count = 1\n    for i in listval:\n        if i == 'no':\n            return_string = return_string + str(count) +''\n            count += 1\n        else:\n            return_string = return_string + str(i) +''\n    return return_string\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    mval = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] > mval:\n            mval = listval[i]\n    return mval\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maxval = listval[0]\n    for i in listval:\n        if maxval < i:\n            maxval = i\n    return maxval\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_num = 0\n    for num in listval:\n        if max_num < num:\n            max_num = num\n    return max_num\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = -100\n    for i in listval:\n        if max < i:\n            max = i\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_val = -1\n    for i in range(0, len(listval)):\n        if max_val < listval[i]:\n            max_val = listval[i]\n    return max_val\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    list = []\n    for i in range(0,len(listval)):\n        if isinstance(listval[i],int):\n            list.append(listval[i])\n        else:\n            for j in range(0,len(listval[i])):\n                list.append(listval[i][j])\n    return max(list)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    a = 0\n    for i in range(1, int(number/2) + 1):\n        if number % i == 0:\n            a += i\n    return a\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(1 for div in range(1,number) if number%div==0)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Your code here\n    result = 0\n    for divisor in range(1, number):\n        if number % divisor == 0:\n            result += divisor\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    summ = 0\n    for i in range(1, number + 1):\n        if number % i == 0:\n            summ += i\n    return summ\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divs = []\n    for i in range(1,number):\n        if number % i == 0:\n            divs.append(i)\n    return sum(divs)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return 0\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i = 1\n    while i <= number:\n        if number % i == 0:\n            sum_div += i\n        i += 1\n    return sum_div\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    \n    sum_div = 1\n    i = 2\n    while i <= int(number ** 0.5):\n        if number % i == 0:\n            while number % i == 0:\n                sum_div += i\n                number = number/i\n        i += 1\n    if number > 1:\n        sum_div += number\n    \n    return sum_div\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    # Your code here\n    \n    divisor = 2\n    \n    while number % divisor!= 0:\n        divisor += 1\n    \n    return divisor\n    "
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    if len(arr) > 1:\n        mid = len(arr)//2\n        L = arr[:mid]\n        R = arr[mid:]\n        inv_count += get_Inv_Count(L)\n        inv_count += get_Inv_Count(R)\n        i=j=k=0\n        while i < len(L) and j < len(R):\n            if L[i] < R[j]:\n                arr[k] = L[i]\n                i += 1\n            else:\n                arr[k] = R[j]\n                j += 1\n            k += 1\n        while i < len(L):\n            arr[k] = L[i]\n            i += 1\n            k += 1\n        while j < len(R):\n            arr[k] = R[j]\n            j += 1\n            k += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def get_max(arr, l, r): \n        if l>=r: \n            return arr[l] \n        m = (l+(r-1))//2\n        if arr[l] > arr[m] and arr[l] > arr[r]: \n            return get_max(arr, l, m-1) \n        if arr[m] > arr[l] and arr[m] > arr[r]: \n            return get_max(arr, m+1, r) \n        return arr[m] \n    n = len(arr) \n    res = 0\n    for i in range(n): \n        res += get_max(arr, i, n-1) \n    return res \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) <= 1: \n        return 0\n    else: \n        count = 0\n        for i in range(len(arr)): \n            for j in range(i+1, len(arr)): \n                if arr[i] > arr[j]: \n                    count = count + 1\n        return count \n    \nif __name__ == \"__main__\": \n    arr = [] \n    arr = list(map(int, input().split())) \n    print(get_Inv_Count(arr))"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(0, len(arr)): \n        for j in range(i+1, len(arr)): \n            if arr[i] > arr[j]: \n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    def countInversions(arr, n): \n        \n        # Base Case: There is just one element \n        if n == 1: \n            return 0\n        \n        # Base Case: Element smaller than pivot \n        if arr[n - 1] < arr[0]: \n            return countInversions(arr, n - 1) \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversion_count = 0\n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            if arr[i] > arr[j] and j!= i: \n                inversion_count += 1\n    print(inversion_count)\n    return inversion_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    i,j=0,len(arr)-1\n    while i<=j:\n        if arr[i]<arr[j]:\n            i+=1\n        else:\n            x=arr[i]\n            k=i\n            while arr[k]<x:\n                k+=1\n            if k<j:\n                arr[i],arr[k]=arr[k],arr[i]\n            j-=1\n    print('Array is sorted in descending order')\n    print(arr)\n    print('Total inversions are',i)\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inversion_count = 0\n    if len(arr) > 1:\n        pivot = arr[0] \n        for x in arr: \n            if x < pivot: \n                inversion_count += 1\n    else:\n        inversion_count = 0\n    return inversion_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] > arr[j]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] > arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return list1\n    else:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    lst = []\n    if len(list1) == 0:\n        return lst\n    for i in list1:\n        if type(i) == list:\n            lst.extend(flatten_list(i))\n        else:\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not isinstance(list1, list):\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return_list = []\n    for i in range(0, len(list1)):\n        if type(list1[i]) == list:\n            return_list.extend(flatten_list(list1[i]))\n        else:\n            return_list.append(list1[i])\n    return return_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if type(list1[i]) is list:\n            list2.extend(flatten_list(list1[i]))\n        else:\n            list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    return list(itertools.chain.from_iterable(list1))\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1: return []\n    if not isinstance(list1, list): return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1, list):\n        out_list = []\n        for item in list1:\n            out_list.extend(flatten_list(item))\n        return out_list\n    else:\n        return [list1]\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    final_list = []\n    for item in list1:\n        if isinstance(item, list):\n            final_list.extend(flatten_list(item))\n        else:\n            final_list.append(item)\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    if len(list1) > 0:\n        for item in list1:\n            if type(item) == list:\n                result.extend(flatten_list(item))\n            else:\n                result.append(item)\n    return result\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for idx in range(len(stdata)):\n        (s,t) = stdata[idx]\n        d[s] += 1\n        d[t] += 1\n    \n    max_aggregate = 0\n    for key in d:\n        max_aggregate = max(max_aggregate, d[key])\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # A list of dicts\n    data_dict = []\n    # A dict to store aggregate\n    max_aggregate_dict = {}\n    # Iterating over stdata\n    for i in stdata:\n        # Adding keys in dict\n        data_dict.append(i[0])\n    # Iterating over data_dict\n    for i in data_dict:\n        # Getting the value of the i\n        value = i\n        # Getting the values in dict\n        aggregate_list = []\n        for j in stdata:\n            if j[0] == value:\n                # Appending the j[1] to aggregate_list\n                aggregate_list.append(j[1])\n        # Getting the max value in the aggregate_list\n        max_value = max(aggregate_list)\n        # Adding the max_value to the max_aggregate_dict\n        max_aggregate_dict[i] = max_value\n    # Getting the key with maximum value\n    key = max(max_aggregate_dict.keys(), key=(lambda k: max_aggregate_dict[k]))\n    # Returning the key\n    return key\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    #stdata=defaultdict(list)\n    for val,freq in stdata.items():\n        stdata[val]=freq\n    #print(stdata)\n    #print(stdata.values())\n    maxi=max(stdata.values())\n    print(maxi)\n    #maxi=max(stdata.values())\n    stdata1=defaultdict(int)\n    for val,freq in stdata.items():\n        stdata1[val]=freq\n    maxi=max(stdata1.values())\n    print(maxi)\n    '''\n    def max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # stdata=defaultdict(list)\n    # for val,freq in stdata.items():\n    #     stdata[val]=freq\n    # stdata=sorted(stdata.items(), key=lambda x: x[1], reverse=True)\n    # print(stdata)\n    # maxi=max(stdata.values())\n    # print(maxi)\n    # stdata1=defaultdict(int)\n    # for val,freq in stdata.items():\n    #     stdata1[val]=freq\n    # maxi=max(stdata1.values())\n    # print(maxi)\n    return max(stdata.values())\n    '''\n    '''\n    def max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    # stdata=defaultdict(list)\n    # for val,freq in stdata.items():\n    #     stdata[val]=freq\n    # stdata=sorted(stdata.items(), key=lambda x: x[1], reverse=True)\n    # print(stdata)\n    # maxi=max(stdata.values())\n    # print(maxi)\n    # stdata1=defaultdict(int)\n    # for val,freq in stdata.items():\n    #     stdata1[val]=freq\n    # maxi=max(stdata1.values())\n    # print(maxi)\n    return max(stdata.values())\n    '''\n    '''\n    def max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    stdata=defaultdict(list)\n    for val,freq in stdata.items():\n        stdata[val]=freq\n    stdata=sorted(stdata.items(), key=lambda x: x[1], reverse=True)\n    print(stdata)\n    maxi=max(stdata.values())\n    print(maxi)\n    stdata1=defaultdict(int)\n    for val,freq in stdata.items():\n        stdata1[val]=freq\n    maxi=max(stdata1.values())\n    print(maxi)\n    return max(stdata.values())\n    '''\n    '''\n    def max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    #stdata=defaultdict(list)\n    #for val,freq in stdata.items():\n    #    stdata[val]=freq\n    stdata=sorted(stdata.items(), key=lambda x: x[1], reverse=True)\n    print(stdata)\n    maxi=max(stdata.values())\n    print(maxi)\n    stdata1=defaultdict(int)\n    for val,freq in stdata.items():\n        stdata1[val]=freq\n    maxi=max(stdata1.values())\n    print(maxi)\n    return max(stdata.values())\n    '''\n    '''\n    def max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    #stdata=defaultdict(list)\n    #for val,freq in stdata.items():\n    #    stdata[val]=freq\n    stdata=sorted(stdata.items(), key=lambda x: x[1], reverse=True)\n    print(stdata)\n    maxi=max(stdata.values())\n    print(maxi)\n    stdata1=defaultdict(int)\n    for val,freq in stdata.items():\n        stdata1[val]=freq\n    maxi=max(stdata1.values())\n    print(maxi)\n    return max(stdata.values())\n    '''\n    '''\n    def max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    #stdata=defaultdict(list)\n    #for val,freq in stdata.items():\n    #    stdata[val]=freq\n    stdata=sorted(stdata.items(), key=lambda x: x[1], reverse=True)\n    print(stdata)\n    maxi=max(stdata.values())\n    print(maxi)\n    stdata1=defaultdict(int)\n    for val,freq in stdata.items():\n        stdata1[val]=freq\n    maxi=max(stdata1.values())\n    print(maxi)\n    return max(stdata.values())\n    '''\n    '''\n    def max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    #stdata=defaultdict(list)\n    #for val,freq in stdata.items():\n    #    stdata[val]=freq\n    stdata=sorted(stdata.items(), key=lambda x: x[1], reverse=True)\n    print(stdata)\n    maxi=max(stdata.values())\n    print(maxi)\n    stdata1=defaultdict(int)\n    for val,freq in stdata.items():\n        stdata1[val]=freq\n    maxi=max(stdata1.values())\n    print(maxi)\n    return max(stdata.values())\n    '''\n    '''\n    def max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    #stdata=defaultdict(list)\n    #for val,freq in stdata.items():\n    #    stdata[val]=freq\n    stdata=sorted(stdata.items(), key=lambda x: x[1], reverse=True)\n    print(stdata)\n    maxi=max(stdata.values())\n    print(maxi)\n    stdata1=defaultdict(int)\n    for val,freq in stdata.items():\n        stdata1[val]=freq\n    maxi=max(stdata1.values())\n    print(maxi)\n    return max(stdata.values())\n    '''\n    '''\n    def max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    #stdata=defaultdict(list)\n    #for val,freq in stdata.items():\n    #    stdata[val]=freq\n    stdata=sorted(stdata.items(), key=lambda x: x[1], reverse=True)\n    print(stdata)\n    maxi=max(stdata.values())\n    print(maxi)\n    stdata1=defaultdict(int)\n    for val,freq in stdata.items():\n        stdata1[val]=freq\n    maxi=max(stdata1.values())\n    print(maxi)\n    return max(stdata.values())\n    '''\n    '''\n    def max_aggregate(stdata):\n    \"\"\"\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    \"\"\"\n    #stdata=defaultdict(list)\n    #for val,freq in stdata.items():\n    #    stdata[val]=freq\n    stdata=sorted(stdata.items(), key=lambda x: x[1], reverse=True)\n    print(s"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    print(stdata)\n    max_so_far = float('-inf')\n    curr_max = float('-inf')\n    for elem in stdata:\n        curr_max = max(curr_max + elem[1], elem[0])\n        max_so_far = max(max_so_far, curr_max)\n    return max_so_far\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    \n    # Initialize a dictionary with key as the node and values as lists of edges\n    adj_dict = defaultdict(list)\n    \n    # Initialize a dictionary with key as the node and values as lists of connections\n    connections = defaultdict(list)\n    \n    # Initialize a dictionary with key as the node and values as 1 if it is a starting node\n    starts = defaultdict(lambda: False)\n    \n    # Initialize a dictionary with key as the node and values as list of nodes in each connected component\n    nodes_in_cc = defaultdict(list)\n    \n    # Initialize a dictionary with key as the node and values as list of components\n    connected = defaultdict(list)\n    \n    # Initialize a dictionary with key as the node and values as the index of the connected component\n    index = {}\n    \n    # Initialize a dictionary with key as the node and values as the number of nodes in the connected component\n    cc_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the end node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of nodes in each connected component\n    nodes_in_cc = defaultdict(lambda: 0)\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the end node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the end node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the end node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the end node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the end node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the end node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the end node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the end node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the end node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}\n    \n    # Initialize a dictionary with key as the node and value as the start node\n    st_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the end node\n    end_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the number of edges\n    num_edges = {}\n    \n    # Initialize a dictionary with key as the node and value as the total number of nodes\n    num_nodes = {}\n    \n    # Initialize a dictionary with key as the node and value as the size of the connected component\n    cc_size = {}"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = defaultdict(int)\n    for item in stdata:\n        key = item[0]\n        value = item[1]\n        max_aggregate[key] += value\n    max_aggregate = {key: value for key, value in max_aggregate.items() if value >= 0}\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    if len(stdata) == 0:\n        return 0\n    curr_max = stdata[0][0]\n    for i in range(1, len(stdata)):\n        curr_max = max(curr_max+stdata[i][0], stdata[i][0])\n    return curr_max\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = sorted(stdata, key=lambda x:x[2], reverse=True)\n    return sum(stdata[0][2])\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxagg = -1\n    for i in stdata:\n        maxagg = max(i[0],maxagg)\n    return maxagg\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_v = 0\n    for tup in stdata:\n        agg = tup[0] + tup[1] + tup[2]\n        if agg > max_v:\n            max_v = agg\n    return max_v\n    \ndef max_aggregate2(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    return max(sum(tup) for tup in stdata)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_rec(n, count):\n        if n == 0:\n            return 1\n        else:\n            total = 0\n            for i in range(2 ** n):\n                curr = bin(i)[2:]\n                curr = list(curr)\n                curr = ''.join(curr)\n                if (int(curr,2) == int(bin(count)[2:],2)):\n                    total += count_binary_seq_rec(n - 1, count + 1)\n            return total\n    return count_binary_seq_rec(n, 1)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    count = 0\n    for i in range(1<<(n//2)):\n        bin_seq = bin(i)[2:]\n        # print(bin_seq)\n        if len(bin_seq)<n:\n            bin_seq = ('0'*(n-len(bin_seq))) + bin_seq\n        # print(bin_seq)\n        if bin_seq[0] == '0' and bin_seq[n-1] == '0':\n            count += 1\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    # if n == 1:\n        # return 2\n    # if n == 2:\n        # return 5\n    # if n == 3:\n        # return 11\n    \n    # count = 0\n    # curr_sum = 0\n    # for i in range(n):\n        # count = count + 2**i\n        # curr_sum = curr_sum + 2**(n-i-1)\n        # if curr_sum == count:\n            # return count\n    # return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    res = 0\n    for i in range(2**n):\n        s1 = 0\n        s2 = 0\n        for j in range(n):\n            s1 += (i & (1<<j))\n        for j in range(n-1, -1, -1):\n            s2 += (i & (1<<j))\n        if s1 == s2:\n            res += 1\n    return res\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n==1:\n        return 2\n    ans=0\n    temp=n\n    for i in range(n):\n        temp-=1\n        t=1<<temp\n        while t<(1<<(2*n-1)):\n            ans+=t\n            t=t+t\n    return ans\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    \n    # calculate the sum of all 1's\n    num_ones = 2 ** n - 1\n    \n    # initialize the count\n    count = 0\n    \n    # calculate the sum of each binary sequence\n    for i in range(num_ones):\n        binary = bin(i)[2:]\n        binary = '0' * (n - len(binary)) + binary\n        binary_sum = sum([int(j) for j in binary])\n        \n        if binary_sum == num_ones:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def bin_seq(n):\n        if n == 1:\n            return ['0','1']\n        else:\n            temp_str = bin_seq(n-1)\n            temp_str = ['0'+x for x in temp_str]\n            temp_str = ['1'+x for x in temp_str]\n            return temp_str\n    \n    seq_list = bin_seq(n)\n    #print(seq_list)\n    n_list = []\n    for x in seq_list:\n        n_list.append(x[::-1])\n    #print(n_list)\n    result = []\n    for x in n_list:\n        count = 0\n        for y in x:\n            if y == '0':\n                count += 1\n        result.append(count)\n    return result\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_of_binary_seq(n):\n        if n==0:\n            return 1\n        else:\n            return count_of_binary_seq(n-1)+count_of_binary_seq(n-2)\n    print(count_of_binary_seq(n))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    assert n >= 0\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    n = int(n)\n    count = 0\n    for i in range(0, n+1):\n        for j in range(0, n+1):\n            print(i, j, 2**i+2**j)\n            if (2**i+2**j)%3 == 0:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([1 + dict_depth(v) for k,v in d.items()])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if isinstance(d, dict):\n        return 1 + max(map(dict_depth, d.values()))\n    return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d.keys():\n        depth = max(depth, dict_depth(d[key]))\n    return depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    def helper(d, depth):\n        return depth+1 if type(d) is dict else depth if type(d) is list else 0\n    return max([helper(d, 0) for d in d.values()])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if len(d) == 0:\n        return 0\n    max_depth = 0\n    for k,v in d.items():\n        if type(v) == dict:\n            curr_depth = dict_depth(v) + 1\n        else:\n            curr_depth = 1\n        if curr_depth > max_depth:\n            max_depth = curr_depth\n    return max_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not d:\n        return 0\n    else:\n        return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # if len(d) == 0: return -1\n    # key, value = d.items()[0]\n    # return (max(dict_depth(d[key]), dict_depth(d[value])) + 1)\n    \n    if len(d) == 0: return 0\n    elif isinstance(d, (int, float)): return 0\n    else: return (max([dict_depth(d[i]) for i in d] + [0]) + 1)\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        raise TypeError('Expected a dictionary')\n    if len(d) == 0:\n        return 0\n    return 1 + max([dict_depth(v) for k,v in d.items()])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d:\n        if type(d[i]) is dict:\n            depth += 1\n            depth = max(depth, dict_depth(d[i]))\n        else:\n            depth += 1\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return max([0] + [dict_depth(x) + 1 for x in d.values()])\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        for j in range(len(arr[i])) :\n            #if index is in range\n            if (index >= ranges[i][0]) and (index <= ranges[i][1]) :\n                if(i == rotations[i] - 1) :\n                    #rotation = 0\n                    rotation = j\n                    if(j == index - ranges[i][0]) :\n                        return arr[i][index-ranges[i][0]]\n                    if(j > index - ranges[i][0]) :\n                        index -= ranges[i][0]\n                        return arr[i][rotation]\n                else :\n                    rotation = j\n                    if(j == index - ranges[i][0]) :\n                        return arr[i][rotation]\n                    if(j > index - ranges[i][0]) :\n                        index -= ranges[i][0]\n                        return arr[i][rotation]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = ranges.copy()\n    index = index - 1\n    for i in range(rotations) :\n        if index >= 0 :\n            index = index - ranges[i]\n        else :\n            index = index + ranges[i]\n    return index + 1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    # print(arr,rotations)\n    if index >= len(arr) :\n        return arr\n    index += rotations\n    if index >= len(arr) :\n        return arr\n    if arr[index] <= ranges :\n        return find_Element(arr,ranges,rotations,index)\n    else :\n        return find_Element(arr,ranges,rotations,index-1)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(rotations)):\n        if(ranges[i][0] <= index and index <= ranges[i][1]):\n            index = index - ranges[i][0] + ranges[i][1]\n            return index\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if(index >= len(arr)) :\n        return arr[index-len(arr)]\n    if(index < 0) :\n        return arr[index+len(arr)]\n    \n    return find_Element(arr,ranges,rotations+1,index+rotations*arr[index]) + find_Element(arr,ranges,rotations+1,index+1) - find_Element(arr,ranges,rotations+1,index-rotations*arr[index])\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    start = 0\n    end = len(arr)-1\n    while start <= end :\n        mid = start + (end - start)//2\n        if ranges[index] <= ranges[mid] :\n            if arr[mid] >= arr[start] :\n                start = mid + 1\n            else :\n                end = mid - 1\n        else :\n            if arr[mid] <= arr[end] :\n                end = mid - 1\n            else :\n                start = mid + 1\n    return arr[start]"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if len(ranges) == 0 :\n        return -1\n    \n    # if len(ranges) == 1 :\n    #     return arr[ranges[0][0]]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    \n    for i in range(0,len(ranges)):\n        \n        if(index >= ranges[i][0] and index <= ranges[i][1]):\n            \n            temp = (index-ranges[i][0])%rotations[i]\n            \n            if(temp == 0):\n                return ranges[i][2]\n            else :\n                return ranges[i][2]+temp\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    rotations = rotations % 4\n    if rotations == 0 :\n        return arr[index]\n    elif rotations == 1 :\n        return arr[ranges + index]\n    elif rotations == 2 :\n        return arr[ranges + index + ranges]\n    else :\n        return arr[index - ranges]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if ranges[i] == index :\n            return arr[(rotations[i]+index)%(len(arr))]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    a = []\n    for word in words:\n        if word.startswith('p'):\n            a.append(word)\n    return a\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = filter(lambda x: x.startswith('p'),words)\n    return list(p)\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_in(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_in2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with2(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with3(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with4(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with5(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with6(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with7(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with8(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with9(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with10(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with11(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with12(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with13(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with14(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with15(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with16(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with17(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with18(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\":\n            return word, word\n    return \"\", \"\"\ndef start_withp_end_with19(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p' and\n    ending with letter 'e'.\n    '''\n    for word in words:\n        if word[0].lower() == \"p\" and word[-1].lower() == \"e\""
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    if words == None:\n        return None\n    for i in range(len(words)):\n        if words[i].startswith('p'):\n            return (words[i], words[i + 1])\n    return (None, None)\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return words[1]\ndef common_end(words, lst1, lst2):\n    '''\n    Write a function that returns True if the first word starts with the last letter of the second word, otherwise returns False.\n    '''\n    return words[0][-1] == lst2[-1]\ndef same_start(words):\n    '''\n    Write a function that returns True if all words starts with the same letter, otherwise returns False.\n    '''\n    return words[0][0] == words[-1][0]\ndef test_common_end():\n    assert common_end(['aba', 'xyz', 'a', 'x', 'bbb'], 'a', 'x') == True\n    assert common_end(['', 'x', 'bbb'], '', 'x') == True\n    assert common_end(['aaa', 'x'], 'x', 'x') == False\n    assert common_end(['x', 'x'], 'x', 'x') == True\n    assert common_end(['good', 'good', 'bad', 'good'], 'b', 'g') == False\n    print('All tests passed')\ndef test_same_start():\n    assert same_start(['aba', 'xyz', 'a', 'x', 'bbb']) == True\n    assert same_start(['', 'x', 'bbb']) == True\n    assert same_start(['aaa', 'x']) == False\n    assert same_start(['a', 'a']) == True\n    assert same_start(['geeksforgeeks', 'geeks', 'for', 'geeks']) == False\n    print('All tests passed')\ndef has_dashdash(words):\n    '''\n    Write a function to check whether the word contains dash-dash, otherwise return False.\n    '''\n    return re.search('dash-dash', words)\ndef test_has_dashdash():\n    assert has_dashdash('The-dash-is-good') == True\n    assert has_dashdash('The-dash') == False\n    assert has_dashdash('dash-dash-dash') == True\n    print('All tests passed')\ndef test_contains_dashdash():\n    assert contains_dashdash(['the', 'dashdash', 'dashdashdashdash']) == True\n    assert contains_dashdash(['the', 'dash', 'dashdashdashdashdashdash']) == False\n    assert contains_dashdash(['dashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdashdas"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for i in range(len(words)):\n        if words[i].startswith('p'):\n            print(words[i])\n            return words[i]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile(\"^p\")\n    match_1 = p.match(words[0])\n    match_2 = p.match(words[1])\n    if match_1 and match_2:\n        return words[0], words[1]\n    else:\n        return False\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    l = []\n    for i in words:\n        if i[0] == 'p':\n            l.append(i)\n    return l\nprint(start_withp([\"banana\",\"apple\",\"peach\",\"pear\"]))\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    return_string = ''\n    for word in words:\n        if word.startswith('p'):\n            return_string += word\n    return return_string\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0]=='p':\n            return word, word\n    return None\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    \n    res = 0\n    if index < k:\n        res = max_sum_increasing_subseq(a, n, index+1, k)\n    else:\n        res = max(max_sum_increasing_subseq(a, n, index+1, k), max_sum_increasing_subseq(a, n, index+1, k+1)) + a[index]\n        \n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    ans = max_sum_increasing_subseq_rec(a, n, index)\n    print(ans)\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index < 0 or k < index:\n        return 0\n    \n    if k == index:\n        return max(a[index], 0)\n    \n    left = max_sum_increasing_subseq(a, n, index - 1, k)\n    right = max_sum_increasing_subseq(a, n, index - 1, k + 1)\n    \n    return max(left, right, a[index] + left)\n    \ndef max_sum_increasing_subseq_2(a, n, index):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i.\n    '''\n    if index < 0:\n        return 0\n    \n    if index == 0:\n        return a[0]\n    \n    left = max_sum_increasing_subseq_2(a, n, index - 1)\n    right = max_sum_increasing_subseq_2(a, n, index - 1)\n    \n    return max(left, right, a[index] + left, right)\n    "
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if (index == n or a[index] > k):\n        return 0\n    if (index == 0):\n        return 0\n    if (index == 1):\n        return a[0]\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k > n:\n        return 0\n    if index == n:\n        return a[index]\n    \n    ans = max(max_sum_increasing_subseq(a, n, index+1, k), a[index] + max_sum_increasing_subseq(a, n, index+2, k))\n    return ans\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    if k == index:\n        return a[index]\n    return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k - 1))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    '''\n    Given an array of integers and an integer k, find the maximum sum of every contiguous subarray of size \u2018k\u2019.\n    '''\n    if n < k:\n        return -1\n    if n == k:\n        return sum(a[:k])\n    dp = [[None for _ in range(k+1)] for _ in range(n+1)]\n    # dp[i][k]\n    # for i in range(1, n+1):\n    #     for k in range(1, k+1):\n    #         dp[i][k] = max(dp[i-1][k], dp[i-1][k-1] + a[i-1])\n    for i in range(1, n+1):\n        for k in range(1, k+1):\n            dp[i][k] = max(dp[i-1][k], dp[i-1][k-1] + a[i-1])\n    # print(\"\\n\")\n    # for i in range(1, n+1):\n    #     for k in range(1, k+1):\n    #         print(dp[i][k], end=\" \")\n    # print(\"\\n\")\n    res = dp[n][k]\n    for i in range(n-k+1, n+1):\n        # print(res)\n        res = max(res, dp[i][k] + a[i-k])\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if a == [] or index == -1 or k == -1:\n        return 0\n    if k == 0:\n        return 0\n    if k == 1:\n        return a[index]\n    if a[index] > a[k-1]:\n        return max(max_sum_increasing_subseq(a, n, index-1, k), a[index]+max_sum_increasing_subseq(a, n, index-1, k-1))\n    else:\n        return max(max_sum_increasing_subseq(a, n, index-1, k), a[index])\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    res = float('-inf')\n    for i in range(index, n):\n        subseq = 0\n        if i + 1 < n:\n            subseq += a[i + 1]\n        if i + 2 < n:\n            subseq += a[i + 2]\n        if i + 3 < n:\n            subseq += a[i + 3]\n        if subseq > res:\n            res = subseq\n        if a[i] > k:\n            return res\n    return res\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    for i in range(m):\n        for j in range(n):\n            print(tuplex[i][j],end=\"\")\n        print()\ndef main():\n    #testing function\n    tuplex= (1,2,3,4,5,6,7,8,9)\n    colon_tuplex(tuplex,3,3)\n    colon_tuplex(tuplex,4,3)\n    colon_tuplex(tuplex,5,2)\n    colon_tuplex(tuplex,4,2)\n    colon_tuplex(tuplex,5,1)\n    colon_tuplex(tuplex,3,1)\n    colon_tuplex(tuplex,2,1)\n    colon_tuplex(tuplex,1,1)\n    colon_tuplex(tuplex,0,1)\n    print(tuplex)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = ()\n    colon = tuplex[0:m]\n    return colon\ndef row_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a row of a tuple.\n    '''\n    row = ()\n    row = tuplex[n:]\n    return row\ndef space_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a space of a tuple.\n    '''\n    space = ()\n    space = tuplex[m:n]\n    return space\ndef left_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a left of a tuple.\n    '''\n    left = ()\n    left = tuplex[0:m]\n    return left\ndef right_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a right of a tuple.\n    '''\n    right = ()\n    right = tuplex[n:]\n    return right\ndef upper_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a upper of a tuple.\n    '''\n    upper = ()\n    upper = tuplex[:m]\n    return upper\ndef lower_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a lower of a tuple.\n    '''\n    lower = ()\n    lower = tuplex[m:]\n    return lower\ndef print_tuplex(tuplex,m,n):\n    '''\n    Write a function to print a tuplex.\n    '''\n    print('\\n',tuplex[0:m],end='')\n    print(' ',tuplex[n:len(tuplex)],end='')\ndef copy_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a copy of a tuple.\n    '''\n    copy = ()\n    copy = tuplex[:]\n    return copy\ndef up_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a upper of a tuple.\n    '''\n    upper = ()\n    upper = tuplex[0:m]\n    return upper\ndef down_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a lower of a tuple.\n    '''\n    lower = ()\n    lower = tuplex[m:n]\n    return lower\ndef center_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a center of a tuple.\n    '''\n    center = ()\n    center = tuplex[m:m+n]\n    return center\ndef left_tuplex_to_right(tuplex,m,n):\n    '''\n    Write a function to get a left of a tuple to right of it.\n    '''\n    left = ()\n    left = tuplex[0:m]\n    right = ()\n    right = tuplex[n:]\n    return left+right\ndef right_tuplex_to_left(tuplex,m,n):\n    '''\n    Write a function to get a right of a tuple to left of it.\n    '''\n    right = ()\n    right = tuplex[n:]\n    left = ()\n    left = tuplex[0:m]\n    return right+left\ndef left_tuplex_to_up(tuplex,m,n):\n    '''\n    Write a function to get a left of a tuple to upper of it.\n    '''\n    left = ()\n    left = tuplex[0:m]\n    upper = ()\n    upper = tuplex[:n]\n    return left+upper\ndef up_tuplex_to_left(tuplex,m,n):\n    '''\n    Write a function to get a upper of a tuple to left of it.\n    '''\n    upper = ()\n    upper = tuplex[:n]\n    left = ()\n    left = tuplex[0:m]\n    return upper+left\ndef up_tuplex_to_right(tuplex,m,n):\n    '''\n    Write a function to get a upper of a tuple to right of it.\n    '''\n    upper = ()\n    upper = tuplex[:n]\n    right = ()\n    right = tuplex[n:]\n    return upper+right\ndef right_tuplex_to_up(tuplex,m,n):\n    '''\n    Write a function to get a right of a tuple to upper of it.\n    '''\n    right = ()\n    right = tuplex[n:]\n    upper = ()\n    upper = tuplex[:m]\n    return right+upper\ndef down_tuplex_to_left(tuplex,m,n):\n    '''\n    Write a function to get a lower of a tuple to left of it.\n    '''\n    down = ()\n    down = tuplex[m:]\n    left = ()\n    left = tuplex[0:n]\n    return down+left\ndef left_tuplex_to_down(tuplex,m,n):\n    '''\n    Write a function to get a left of a tuple to lower of it.\n    '''\n    left = ()\n    left = tuplex[0:n]\n    down = ()\n    down = tuplex[m:]\n    return left+down\ndef up_tuplex_to_right(tuplex,m,n):\n    '''\n    Write a function to get a upper of a tuple to right of it.\n    '''\n    up = ()\n    up = tuplex[:m]\n    right = ()\n    right = tuplex[n:]\n    return up+right\ndef right_tuplex_to_up(tuplex,m,n):\n    '''\n    Write a function to get a right of a tuple to upper of it.\n    '''\n    right = ()\n    right = tuplex[n:]\n    upper = ()\n    upper = tuplex[:m]\n    return right+upper\ndef down_tuplex_to_right(tuplex,m,n):\n    '''\n    Write a function to get a lower of a tuple to right of it.\n    '''\n    down = ()\n    down = tuplex[m:]\n    right = ()\n    right = tuplex[n:]\n    return down+right\ndef right_tuplex_to_down(tuplex,m,n):\n    '''\n    Write a function to get a right of a tuple to lower of it.\n    '''\n    right = ()\n    right = tuplex[n:]\n    down = ()\n    down = tuplex[:m]\n    return right+down\ndef center_tuplex_to_upper_left(tuplex,m,n):\n    '''\n    Write a function to get a center of a tuple to upper left of it.\n    '''\n    center = ()\n    center = tuplex[:m]\n    upper_left = ()\n    upper_left = tuplex[m:n]\n    return center+upper_left\ndef center_tuplex_to_lower_left(tuplex,m,n):\n    '''\n    Write a function to get a center of a tuple to lower left of it.\n    '''\n    center = ()\n    center = tuplex[:m]\n    lower_left = ()\n    lower_left = tuplex[m:n]\n    return center+lower_left\ndef center_tuplex_to_upper_right(tuplex,m,n):\n    '''\n    Write a function to get a center of a tuple to upper right of it.\n    '''\n    center = ()\n    center = tuplex[:m]\n    upper_right = ()\n    upper_right = tuplex[n:]\n    return center+upper_right\ndef center_tuplex_to_lower_right(tuplex,m,n):\n    '''\n    Write a function to get a center of a tuple to lower right of it.\n    '''\n    center = ()\n    center = tuplex[:m]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[:m]+tuplex[m+1:n]+tuplex[n:]\ndef int_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a number of an int of a tuple.\n    '''\n    return tuplex[:m]+tuplex[m+1:n]+tuplex[n:]\ndef str_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a number of a str of a tuple.\n    '''\n    return tuplex[:m]+tuplex[m+1:n]+tuplex[n:]\ndef write_dict(x,y,z):\n    '''\n    Write a function to get a dict of a list.\n    '''\n    d={}\n    for i in range(len(x)):\n        d[y]=x[i]\n        d[z]=y[i]\n        return d\ndef dict_x_tuplex(x):\n    '''\n    Write a function to get a dict of tuple.\n    '''\n    d={}\n    for i in range(len(x)):\n        d[x[i][0]]=x[i][1]\n        d[x[i][1]]=x[i][0]\n    return d\ndef dict_tuplex_x(x):\n    '''\n    Write a function to get a dict of tuple.\n    '''\n    d={}\n    for i in range(len(x)):\n        d[x[i][0]]=x[i][1]\n        d[x[i][1]]=x[i][0]\n    return d\ndef create_list(x,y):\n    '''\n    Write a function to create a list.\n    '''\n    a=[]\n    for i in range(x):\n        a.append(y)\n    return a\ndef replace_char(x,y,z):\n    '''\n    Write a function to replace a char in a list.\n    '''\n    b=x\n    for i in range(len(b)):\n        b[i]=z\n        return b\ndef replace_char_x(x,y,z):\n    '''\n    Write a function to replace a char in a tuple.\n    '''\n    b=x\n    for i in range(len(b)):\n        b[i]=z\n    return b\ndef replace_char_tuple(x,y,z):\n    '''\n    Write a function to replace a char in a tuple.\n    '''\n    b=x\n    for i in range(len(b)):\n        b[i]=z\n    return b\ndef reverse_string(x):\n    '''\n    Write a function to reverse a string.\n    '''\n    return x[::-1]\ndef is_anagram(x,y):\n    '''\n    Write a function to check if two strings are anagram.\n    '''\n    a=list(x)\n    b=list(y)\n    a.sort()\n    b.sort()\n    if a==b:\n        return True\n    else:\n        return False\ndef is_anagram_x(x,y):\n    '''\n    Write a function to check if two strings are anagram.\n    '''\n    a=x\n    b=y\n    a=list(a)\n    b=list(b)\n    a.sort()\n    b.sort()\n    if a==b:\n        return True\n    else:\n        return False\ndef is_anagram_tuple(x,y):\n    '''\n    Write a function to check if two strings are anagram.\n    '''\n    a=tuple(x)\n    b=tuple(y)\n    a=list(a)\n    b=list(b)\n    a.sort()\n    b.sort()\n    if a==b:\n        return True\n    else:\n        return False\ndef check_anagram(x,y):\n    '''\n    Write a function to check if two strings are anagram.\n    '''\n    a=list(x)\n    b=list(y)\n    a.sort()\n    b.sort()\n    if a==b:\n        return True\n    else:\n        return False\ndef check_anagram_x(x,y):\n    '''\n    Write a function to check if two strings are anagram.\n    '''\n    a=x\n    b=y\n    a=list(a)\n    b=list(b)\n    a.sort()\n    b.sort()\n    if a==b:\n        return True\n    else:\n        return False\ndef check_anagram_tuple(x,y):\n    '''\n    Write a function to check if two strings are anagram.\n    '''\n    a=tuple(x)\n    b=tuple(y)\n    a=list(a)\n    b=list(b)\n    a.sort()\n    b.sort()\n    if a==b:\n        return True\n    else:\n        return False\ndef check_anagram_tuple_x(x,y):\n    '''\n    Write a function to check if two strings are anagram.\n    '''\n    a=x\n    b=y\n    a=list(a)\n    b=list(b)\n    a.sort()\n    b.sort()\n    if a==b:\n        return True\n    else:\n        return False\ndef tuple_x_dict(x,y):\n    '''\n    Write a function to get a tuple of a dict.\n    '''\n    a=tuple(x)\n    b=tuple(y)\n    a=dict_tuplex_x(a)\n    b=dict_tuplex_x(b)\n    return a,b\ndef dict_x_tuple(x,y):\n    '''\n    Write a function to get a dict of a tuple.\n    '''\n    a=dict_x_tuplex(x)\n    b=dict_x_tuplex(y)\n    return a,b\ndef dict_tuple_x(x,y):\n    '''\n    Write a function to get a dict of a tuple.\n    '''\n    a=dict_tuplex_x(x)\n    b=dict_tuplex_x(y)\n    return a,b\ndef tuple_x_list(x,y):\n    '''\n    Write a function to get a tuple of a list.\n    '''\n    a=tuple(x)\n    b=tuple(y)\n    a=list_tuplex(a)\n    b=list_tuplex(b)\n    return a,b\ndef list_x_tuple(x,y):\n    '''\n    Write a function to get a list of a tuple.\n    '''\n    a=list_tuplex(x)\n    b=list_tuplex(y)\n    return a,b\ndef list_tuple_x(x,y):\n    '''\n    Write a function to get a list of a tuple.\n    '''\n    a=list_tuplex(x)\n    b=list_tuplex(y)\n    return a,b\ndef list_tuple_dict(x,y):\n    '''\n    Write a function to get a list of a tuple.\n    '''\n    a=list_tuplex_x(x)\n    b=list_tuplex_x(y)\n    return a,b\ndef list_x_dict(x,y):\n    '''\n    Write a function to get a list of a tuple.\n    '''\n    a=list_x_tuplex(x)\n    b=list_x_tuplex(y)\n    return a,b\ndef list_x_list(x,y):\n    '''\n    Write a function to get a list of a tuple.\n    '''\n    a=list_x_tuplex(x)\n    b=list_x_tuplex(y)\n    return a,b\ndef str_list(x,y):\n    '''\n    Write a function to get a str of a list.\n    '''\n    a=str(x)\n    b=str(y)\n    "
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    a = 1\n    b = 2\n    c = 3\n    d = 4\n    e = 5\n    f = 6\n    g = 7\n    h = 8\n    i = 9\n    j = 10\n    k = 11\n    l = 12\n    m = 13\n    n = 14\n    o = 15\n    p = 16\n    q = 17\n    r = 18\n    s = 19\n    t = 20\n    u = 21\n    v = 22\n    w = 23\n    x = 24\n    y = 25\n    z = 26\n    colon = []\n    for i in range(m):\n        for j in range(n):\n            if i == 0 or i == m-1 or j == 0 or j == n-1:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 1 or i == m-2 or j == 1 or j == n-2:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 2 or i == m-3 or j == 2 or j == n-3:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 3 or i == m-4 or j == 3 or j == n-4:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 4 or i == m-5 or j == 4 or j == n-5:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 5 or i == m-6 or j == 5 or j == n-6:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 6 or i == m-7 or j == 6 or j == n-7:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 7 or i == m-8 or j == 7 or j == n-8:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 8 or i == m-9 or j == 8 or j == n-9:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 9 or i == m-10 or j == 9 or j == n-10:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 10 or i == m-11 or j == 10 or j == n-11:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 11 or i == m-12 or j == 11 or j == n-12:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 12 or i == m-13 or j == 12 or j == n-13:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 13 or i == m-14 or j == 13 or j == n-14:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 14 or i == m-15 or j == 14 or j == n-15:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 15 or i == m-16 or j == 15 or j == n-16:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 16 or i == m-17 or j == 16 or j == n-17:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 17 or i == m-18 or j == 17 or j == n-18:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 18 or i == m-19 or j == 18 or j == n-19:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 19 or i == m-20 or j == 19 or j == n-20:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 20 or i == m-21 or j == 20 or j == n-21:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 21 or i == m-22 or j == 21 or j == n-22:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 22 or i == m-23 or j == 22 or j == n-23:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 23 or i == m-24 or j == 23 or j == n-24:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 24 or i == m-25 or j == 24 or j == n-25:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 25 or i == m-26 or j == 25 or j == n-26:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 26 or i == m-27 or j == 26 or j == n-27:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 27 or i == m-28 or j == 27 or j == n-28:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 28 or i == m-29 or j == 28 or j == n-29:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 29 or i == m-30 or j == 29 or j == n-30:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 30 or i == m-31 or j == 30 or j == n-31:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 31 or i == m-32 or j == 31 or j == n-32:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 32 or i == m-33 or j == 32 or j == n-33:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 33 or i == m-34 or j == 33 or j == n-34:\n                colon.append((tuple(a, b, c, d, e, f, g, h, i, j)))\n            elif i == 34 or i == m-35 or j == 3"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    ret=tuplex[:]\n    for i in range(m):\n        for j in range(n):\n            ret=ret[:j]+('.',)*m+ret[j+1:]\n    return tuple(ret)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    l1=[]\n    for i in range(m):\n        l1.append(tuplex[i]*(n-i))\n    l1.append(tuplex[m])\n    return tuple(l1)\ndef player(n,last_player):\n    '''\n    Write a function to display the winner of the game.\n    '''\n    # print('I am the last player')\n    if last_player=='X':\n        print('The winner of the game is X player')\n    else:\n        print('The winner of the game is O player')\ndef line_of_five(a,b,c,d,e):\n    '''\n    Write a function to display the line of five of the board.\n    '''\n    # print('I am the line of five')\n    if a==1 and b==2 and c==3 and d==4 and e==5:\n        print('I am the line of five')\n    else:\n        print('I am not the line of five')\ndef column_of_five(a,b,c,d,e):\n    '''\n    Write a function to display the column of five of the board.\n    '''\n    # print('I am the column of five')\n    if a==1 and b==3 and c==5 and d==7 and e==9:\n        print('I am the column of five')\n    else:\n        print('I am not the column of five')\ndef diagonal_of_five(a,b,c,d,e):\n    '''\n    Write a function to display the diagonal of five of the board.\n    '''\n    # print('I am the diagonal of five')\n    if a==1 and b==5 and c==9 and d==13 and e==19:\n        print('I am the diagonal of five')\n    else:\n        print('I am not the diagonal of five')\ndef diagonal_of_four(a,b,c,d,e):\n    '''\n    Write a function to display the diagonal of four of the board.\n    '''\n    # print('I am the diagonal of four')\n    if a==3 and b==7 and c==11 and d==15 and e==17:\n        print('I am the diagonal of four')\n    else:\n        print('I am not the diagonal of four')\ndef diagonals(a,b,c,d,e):\n    '''\n    Write a function to display the diagonal of four of the board.\n    '''\n    # print('I am the diagonal of four')\n    if a==3 and b==5 and c==9 and d==13 and e==19:\n        print('I am the diagonal of four')\n    else:\n        print('I am not the diagonal of four')\ndef zero_position(a,b,c,d,e):\n    '''\n    Write a function to display the position of zero.\n    '''\n    # print('I am the zero position')\n    if a==1 and b==2 and c==3 and d==4 and e==5:\n        print('I am the zero position')\n    else:\n        print('I am not the zero position')\ndef row_of_four(a,b,c,d,e):\n    '''\n    Write a function to display the row of four of the board.\n    '''\n    # print('I am the row of four')\n    if a==1 and b==3 and c==5 and d==7 and e==9:\n        print('I am the row of four')\n    else:\n        print('I am not the row of four')\ndef row_of_three(a,b,c,d,e):\n    '''\n    Write a function to display the row of three of the board.\n    '''\n    # print('I am the row of three')\n    if a==1 and b==5 and c==7 and d==9 and e==13:\n        print('I am the row of three')\n    else:\n        print('I am not the row of three')\ndef row_of_two(a,b,c,d,e):\n    '''\n    Write a function to display the row of two of the board.\n    '''\n    # print('I am the row of two')\n    if a==1 and b==7 and c==9 and d==13 and e==15:\n        print('I am the row of two')\n    else:\n        print('I am not the row of two')\ndef row_of_one(a,b,c,d,e):\n    '''\n    Write a function to display the row of one of the board.\n    '''\n    # print('I am the row of one')\n    if a==1 and b==9 and c==13 and d==15 and e==17:\n        print('I am the row of one')\n    else:\n        print('I am not the row of one')\ndef diagonal_of_three(a,b,c,d,e):\n    '''\n    Write a function to display the diagonal of three of the board.\n    '''\n    # print('I am the diagonal of three')\n    if a==3 and b==5 and c==9 and d==13 and e==19:\n        print('I am the diagonal of three')\n    else:\n        print('I am not the diagonal of three')\ndef diagonal_of_two(a,b,c,d,e):\n    '''\n    Write a function to display the diagonal of two of the board.\n    '''\n    # print('I am the diagonal of two')\n    if a==3 and b==5 and c==7 and d==9 and e==11:\n        print('I am the diagonal of two')\n    else:\n        print('I am not the diagonal of two')\ndef diagonal_of_one(a,b,c,d,e):\n    '''\n    Write a function to display the diagonal of one of the board.\n    '''\n    # print('I am the diagonal of one')\n    if a==1 and b==3 and c==5 and d==7 and e==9:\n        print('I am the diagonal of one')\n    else:\n        print('I am not the diagonal of one')\ndef table_of_tuplex(tuplex):\n    '''\n    Write a function to display the table of tuplex.\n    '''\n    tuplex=tuplex[::-1]\n    for i in range(1,len(tuplex)+1):\n        if i<10:\n            print(' '*(3-len(str(i))),i,end=' ')\n        else:\n            print(i,end=' ')\n        for j in range(1,len(tuplex)+1):\n            print(tuplex[i-1],end=' ')\n        print()\ndef grid_game(m,n):\n    '''\n    Write a function to display the board in the game of grid.\n    '''\n    tuplex=()\n    for i in range(1,m+1):\n        tuplex=tuplex+(i,)\n    for i in range(1,n+1):\n        tuplex=tuplex+(i,)\n    table_of_tuplex(tuplex)\ndef draw_a_line(m,n):\n    '''\n    Write a function to display the line in the game of grid.\n    '''\n    line=[]\n    for i in range(1,m+1):\n        line.append(i)\n    for i in range(1,n+1):\n        line.append(i)\n    line=tuple(line)\n    table_of_tuplex(line)\ndef draw_a_column(m,n):\n    '''\n    Write a function to display the column in the game of grid.\n    '''\n    column=[]\n    for i in range(1,m+1):\n        column.append(i)\n    for i in range(1,n+1):\n        column.append(i)\n    column=tuple(column)\n    table_of_tuplex(column)\ndef draw_a_diagonal(m,n):\n    '''\n    Write a function to display the diagonal in the game of grid.\n    '''\n    diagonal=[]\n    for i in range(1,m+1):\n        diagonal.append(i)\n    for i in range(1,n+1):\n        diagonal.appen"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex)==1:\n        colon = (0,n,0,0)\n    else:\n        colon = tuplex\n    return colon\ndef zap_up(tuplex,n,p):\n    '''\n    Write a function to return the zapped list.\n    '''\n    if p==0:\n        zap_up_tuplex = tuplex\n    else:\n        zap_up_tuplex = (tuplex[0],tuplex[1],tuplex[2]-n,tuplex[3])\n    return zap_up_tuplex\ndef zap_down(tuplex,n,p):\n    '''\n    Write a function to return the zapped list.\n    '''\n    if p==0:\n        zap_down_tuplex = tuplex\n    else:\n        zap_down_tuplex = (tuplex[0],tuplex[1],tuplex[2]+n,tuplex[3])\n    return zap_down_tuplex\ndef zap_left(tuplex,n,p):\n    '''\n    Write a function to return the zapped list.\n    '''\n    if p==0:\n        zap_left_tuplex = tuplex\n    else:\n        zap_left_tuplex = (tuplex[0],tuplex[1],tuplex[2],tuplex[3]-n)\n    return zap_left_tuplex\ndef zap_right(tuplex,n,p):\n    '''\n    Write a function to return the zapped list.\n    '''\n    if p==0:\n        zap_right_tuplex = tuplex\n    else:\n        zap_right_tuplex = (tuplex[0],tuplex[1],tuplex[2],tuplex[3]+n)\n    return zap_right_tuplex\ndef add_up_row(tuplex,row,colon_tuplex,zap_up_tuplex,zap_down_tuplex):\n    '''\n    Write a function to return the result\n    '''\n    tuplex = zap_up(tuplex,row,1)\n    tuplex = zap_down(tuplex,row,1)\n    tuplex = zap_right(tuplex,colon_tuplex[0],1)\n    tuplex = zap_left(tuplex,colon_tuplex[2],1)\n    tuplex = (tuplex[0],tuplex[1]+1,tuplex[2],tuplex[3])\n    tuplex = zap_up(tuplex,row,1)\n    tuplex = zap_down(tuplex,row,1)\n    tuplex = zap_right(tuplex,colon_tuplex[0],1)\n    tuplex = zap_left(tuplex,colon_tuplex[2],1)\n    tuplex = (tuplex[0],tuplex[1],tuplex[2]-1,tuplex[3])\n    tuplex = zap_up(tuplex,row,1)\n    tuplex = zap_down(tuplex,row,1)\n    tuplex = zap_right(tuplex,colon_tuplex[0],1)\n    tuplex = zap_left(tuplex,colon_tuplex[2],1)\n    return tuplex\ndef add_up_col(tuplex,colon_tuplex,zap_up_tuplex,zap_down_tuplex):\n    '''\n    Write a function to return the result\n    '''\n    tuplex = zap_up(tuplex,colon_tuplex[0],1)\n    tuplex = zap_down(tuplex,colon_tuplex[0],1)\n    tuplex = zap_up(tuplex,colon_tuplex[2],1)\n    tuplex = zap_down(tuplex,colon_tuplex[2],1)\n    tuplex = (tuplex[0],tuplex[1],tuplex[2],tuplex[3]+1)\n    tuplex = zap_up(tuplex,colon_tuplex[0],1)\n    tuplex = zap_down(tuplex,colon_tuplex[0],1)\n    tuplex = zap_up(tuplex,colon_tuplex[2],1)\n    tuplex = zap_down(tuplex,colon_tuplex[2],1)\n    tuplex = (tuplex[0],tuplex[1],tuplex[2]-1,tuplex[3])\n    tuplex = zap_up(tuplex,colon_tuplex[0],1)\n    tuplex = zap_down(tuplex,colon_tuplex[0],1)\n    tuplex = zap_up(tuplex,colon_tuplex[2],1)\n    tuplex = zap_down(tuplex,colon_tuplex[2],1)\n    return tuplex\ndef add_up_col2(tuplex,colon_tuplex,zap_up_tuplex,zap_down_tuplex):\n    '''\n    Write a function to return the result\n    '''\n    tuplex = zap_up(tuplex,colon_tuplex[0],1)\n    tuplex = zap_down(tuplex,colon_tuplex[0],1)\n    tuplex = zap_up(tuplex,colon_tuplex[2],1)\n    tuplex = zap_down(tuplex,colon_tuplex[2],1)\n    tuplex = (tuplex[0],tuplex[1]+1,tuplex[2],tuplex[3])\n    tuplex = zap_up(tuplex,colon_tuplex[0],1)\n    tuplex = zap_down(tuplex,colon_tuplex[0],1)\n    tuplex = zap_up(tuplex,colon_tuplex[2],1)\n    tuplex = zap_down(tuplex,colon_tuplex[2],1)\n    tuplex = (tuplex[0],tuplex[1],tuplex[2]-1,tuplex[3])\n    tuplex = zap_up(tuplex,colon_tuplex[0],1)\n    tuplex = zap_down(tuplex,colon_tuplex[0],1)\n    tuplex = zap_up(tuplex,colon_tuplex[2],1)\n    tuplex = zap_down(tuplex,colon_tuplex[2],1)\n    return tuplex\ndef add_up_col3(tuplex,colon_tuplex,zap_up_tuplex,zap_down_tuplex):\n    '''\n    Write a function to return the result\n    '''\n    tuplex = zap_up(tuplex,colon_tuplex[0],1)\n    tuplex = zap_down(tuplex,colon_tuplex[0],1)\n    tuplex = zap_up(tuplex,colon_tuplex[2],1)\n    tuplex = zap_down(tuplex,colon_tuplex[2],1)\n    tuplex = (tuplex[0],tuplex[1]+1,tuplex[2],tuplex[3])\n    tuplex = zap_up(tuplex,colon_tuplex[0],1)\n    tuplex = zap_down(tuplex,colon_tuplex[0],1)\n    tuplex = zap"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    c_tuplex=tuple()\n    for i in range(m):\n        colon_tuple=tuplex[i:n+i]\n        c_tuplex=c_tuplex+colon_tuple\n    return c_tuplex\ndef get_index(a,b):\n    '''\n    Write a function to find the index of the element in the list\n    '''\n    for i in range(len(a)):\n        if a[i]==b:\n            return i\ndef get_index_not_find(a,b):\n    '''\n    Write a function to find the index of the element in the list\n    '''\n    for i in range(len(a)):\n        if a[i]==b:\n            return None\ndef get_index_not_find_find_out(a,b):\n    '''\n    Write a function to find the index of the element in the list\n    '''\n    for i in range(len(a)):\n        if a[i]==b:\n            return i\n            \ndef find_out_duplicate(a):\n    '''\n    Write a function to find the index of the element in the list\n    '''\n    return list(set(a))\ndef find_out_duplicate_find_out(a):\n    '''\n    Write a function to find the index of the element in the list\n    '''\n    return list(set(a))\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    new = deepcopy(tuplex)\n    for i in range(0,m):\n        if len(new) == 1:\n            break\n        if new[i] == ':' and new[i+1] == ':':\n            new = new[:i]\n            break\n        elif new[i] == ':' and new[i+1]!= ':':\n            new = new[:i+1]\n            break\n    return new\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    '''\n    The logic is to take a tuple as input and split the tuple into the \n    indices that should be replaced. Then the function should return a colon\n    tuple.\n    '''\n    lst = []\n    for i in range(len(tuplex)):\n        if i in range(0,m) or i in range(n,m+n):\n            lst.append(tuplex[i])\n    return tuple(lst)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if not nums1 or not nums2:\n        return []\n    result = []\n    for i in range(N):\n        product = 1\n        for j in range(len(nums1)):\n            product *= nums1[j]\n        for j in range(len(nums2)):\n            product *= nums2[j]\n        result.append(product)\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) + len(nums2):\n        return False\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    res = 0\n    for i in range(N):\n        product = nums1[i] * nums2[i]\n        if product > res:\n            res = product\n    return res\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # BRUTE FORCE: check every possible factor\n    # def large_product(nums1, nums2, N):\n    #     if len(nums1) < N or len(nums2) < N:\n    #         return []\n    #     return sorted([nums1[i] * nums2[i] for i in range(N)])\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # nl = nums1.length; nr = nums2.length\n    # assert (nl == N and nr == N)\n    \n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    \n    # for i in range(N):\n    #     # print(i, nums1[i], nums2[i])\n    #     max_product = max(nums1[i]*nums2[i], nums1[i]*nums2[i])\n    #     # print(max_product)\n    #     largest_products[i] = max_product\n    \n    # return largest_products\n    \n    # first_pos = 0\n    # for i in range(N):\n    #     if nums1[first_pos] >= nums2[i]:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #     else:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #         continue\n    #     for j in range(first_pos, N):\n    #         if nums1[j] >= nums2[i]:\n    #             continue\n    #         else:\n    #             max_product = max(max_product, nums1[j]*nums2[i])\n    #             first_pos += 1\n    #             break\n    \n    # return largest_products\n    \n    # first_pos = 0\n    # for i in range(N):\n    #     if nums1[first_pos] >= nums2[i]:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #     else:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #         continue\n    #     if i == N-1:\n    #         break\n    #     for j in range(i+1, N):\n    #         if nums1[j] >= nums2[i]:\n    #             continue\n    #         else:\n    #             max_product = max(max_product, nums1[j]*nums2[i])\n    #             break\n    \n    # return largest_products\n    \n    # 2nd version:\n    # Time: O(N^2)\n    # Space: O(N)\n    \n    # max_product = nums1[0]*nums2[0]\n    # for i in range(len(nums1)):\n    #     for j in range(len(nums2)):\n    #         max_product = max(nums1[i]*nums2[j], max_product)\n    # return max_product\n    \n    # 3rd version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # nl = len(nums1)\n    # nr = len(nums2)\n    # max_product = nums1[0]*nums2[0]\n    # for i in range(nl):\n    #     max_product_curr = nums1[i]*nums2[0]\n    #     for j in range(1, nr):\n    #         max_product_curr = max(max_product_curr, nums1[i]*nums2[j])\n    #         max_product = max(max_product, max_product_curr)\n    # return max_product\n    \n    # 4th version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # nums1.sort()\n    # nums2.sort()\n    # max_product = nums1[0]*nums2[0]\n    # for i in range(1, len(nums1)):\n    #     curr_product = nums1[i]*nums2[0]\n    #     max_product = max(max_product, curr_product)\n    # for i in range(len(nums2)-1):\n    #     curr_product = nums1[0]*nums2[i+1]\n    #     max_product = max(max_product, curr_product)\n    # return max_product\n    \n    # 5th version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # first_pos = 0\n    # for i in range(N):\n    #     if nums1[first_pos] >= nums2[i]:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #     else:\n    #         max_product = nums1[first_pos]*nums2[i]\n    #         first_pos += 1\n    #         continue\n    #     for j in range(first_pos, N):\n    #         if nums1[j] >= nums2[i]:\n    #             continue\n    #         else:\n    #             max_product = max(max_product, nums1[j]*nums2[i])\n    #             first_pos += 1\n    #             break\n    \n    # return max_product\n    \n    # 6th version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # nl = len(nums1)\n    # nr = len(nums2)\n    # max_product = nums1[0]*nums2[0]\n    # for i in range(1, nl):\n    #     max_product_curr = nums1[i]*nums2[0]\n    #     for j in range(1, nr):\n    #         max_product_curr = max(max_product_curr, nums1[i]*nums2[j])\n    #         max_product = max(max_product, max_product_curr)\n    # return max_product\n    \n    # 7th version:\n    # Time: O(N)\n    # Space: O(1)\n    \n    # nums1.sort()\n    # nums2.sort()\n    # nl = len(nums1)\n    # nr = len(nums2)\n    # max_product = nums1[0]*nums2[0]\n    # for i in range(1, nl):\n    #     max_product_curr = nums1[i]*nums2[0]\n    #     for j in range(1, nr):\n    #         max_product_curr = max(max_product_curr, nums1[i]*nums2[j])\n    #         max_product = max(max_product, max_product_curr)\n    # return max_product\n    \n    # 8th version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # max_product = nums1[0]*nums2[0]\n    # for i in range(1, len(nums1)):\n    #     curr_product = nums1[i]*nums2[0]\n    #     max_product = max(max_product, curr_product)\n    # for i in range(len(nums2)-1):\n    #     curr_product = nums1[0]*nums2[i+1]\n    #     max_product = max(max_product, curr_product)\n    # return max_product\n    \n    # 9th version:\n    # Time: O(NlogN)\n    # Space: O(1)\n    \n    # nl = len(nums1)\n    # "
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # create the product list\n    product = [[-1]*len(nums1) for _ in range(len(nums2))]\n    # for each list\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            product[i][j] = nums1[i]*nums2[j]\n    # select the product\n    for i in range(len(nums1)-1):\n        for j in range(len(nums2)-1):\n            if product[i][j] < 0:\n                continue\n            product[i][j+1] = max(product[i][j+1], product[i][j]*nums1[i+1])\n            product[i+1][j] = max(product[i+1][j], product[i][j]*nums2[j+1])\n    # return the product\n    return product[0][N-1]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    result = []\n    for i in range(N):\n        a = nums1[i]\n        b = nums2[i]\n        result.append(a*b)\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N > len(nums1) or N > len(nums2):\n        return -1\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    product = 1\n    for i in range(N):\n        product = product * nums1[i] * nums2[i]\n    return product\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1.sort()\n    nums2.sort()\n    product_lst = []\n    for i in range(N):\n        product_lst.append(nums1[i] * nums2[i])\n    product_lst.sort(reverse = True)\n    print(product_lst)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n        \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \n        \ndef maximum(a,b):   \n    '''\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return (a if a>b else b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n    \nmaximum(4,5)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a > b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    \n    if a>b:\n        max=a\n    else:\n        max=b\n    return max\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return max(a,b)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    list1 = list(str1)\n    print(list1)\n    return tuple(list1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef join_tuple(tup1, tup2):\n    '''\n    Write a function to join two given tuples of characters.\n    '''\n    return tuple(tup1+tup2)\n    \ndef join_tuple_1(tup1, tup2):\n    '''\n    Write a function to join two given tuples of characters.\n    '''\n    return \"\".join(tup1+tup2)\n    \ndef split_tuple_2(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1)\n    \ndef split_tuple_3(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\" \"))\n    \ndef split_tuple_4(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\"-\"))\n    \ndef split_tuple_5(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2))\n    \ndef split_tuple_6(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1])\n    \ndef split_tuple_7(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][0])\n    \ndef split_tuple_8(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_9(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1])\n    \ndef split_tuple_10(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_11(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_12(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_13(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_14(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_15(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_16(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_17(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_18(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_19(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_20(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_21(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_22(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_23(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_24(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_25(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_26(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_27(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_28(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_29(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_30(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_31(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_32(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_33(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_34(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)[::-1][1])\n    \ndef split_tuple_35(str1):\n    '''\n    Write a function to split the given string into a tuple of characters.\n    '''\n    return tuple(str1.split(\".\", 2)"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.split(\" \")\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = tuple(str1)\n    return tuple1\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\nprint(string_to_tuple('sunny'))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    tuple1 = ()\n    for i in range(len(str1)):\n        tuple1 += str1[i],\n    return tuple1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n=bin(n)[2:]\n    n='0'*(31-len(n))+n\n    n='0b'+n\n    n=int(n,2)\n    return n \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ~(n-1)&n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1 << n \n    return mask - 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    print(n ^ (1 << n.bit_length() - 1)) \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | 1 << (n.bit_length()-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n & (n-1) == 0:\n        return n\n    else:\n        return n | ~(n-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 1:\n        return 0\n    else:\n        return 1\ndef set_left_most_set_bit(n): \n    '''\n    Write a python function to set the left most set bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 0\ndef left_most_set_bit(n):\n    '''\n    Write a python function to get the left most set bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 0\ndef right_most_set_bit(n):\n    '''\n    Write a python function to get the right most set bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 0\ndef left_most_unset_bit(n):\n    '''\n    Write a python function to get the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return 0\ndef bit_to_int(n):\n    '''\n    Write a python function to convert an integer number into bit string.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1\ndef int_to_bit(n):\n    '''\n    Write a python function to convert an integer number into bit string.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1\ndef int_to_bit_reversed(n):\n    '''\n    Write a python function to convert an integer number into bit string.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1\ndef bit_to_int_reversed(n):\n    '''\n    Write a python function to convert an integer number into bit string.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1\ndef int_to_bit_reversed_reversed(n):\n    '''\n    Write a python function to convert an integer number into bit string.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1\ndef bit_to_int_reversed_reversed(n):\n    '''\n    Write a python function to convert an integer number into bit string.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1\ndef main():\n    '''\n    Write a python program to test the functions.\n    '''\n    n=int(input(\"Enter a positive integer:\"))\n    print(\"Left most set bit:\",set_left_most_set_bit(n))\n    print(\"Left most unset bit:\",set_left_most_unset_bit(n))\n    print(\"Right most set bit:\",right_most_set_bit(n))\n    print(\"Left most unset bit:\",left_most_unset_bit(n))\n    print(\"Bit to int:\",bit_to_int(n))\n    print(\"Bit to int reversed:\",bit_to_int_reversed(n))\n    print(\"Bit to int reversed reversed:\",bit_to_int_reversed_reversed(n))\n    print(\"Bit to int reversed reversed reversed:\",bit_to_int_reversed_reversed(n))\n    print(\"Int to bit:\",int_to_bit(n))\n    print(\"Int to bit reversed:\",int_to_bit_reversed(n))\n    print(\"Int to bit reversed reversed:\",int_to_bit_reversed_reversed(n))\n    print(\"Int to bit reversed reversed reversed:\",int_to_bit_reversed_reversed(n))\nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    mask = 1 << n\n    n |= mask\n    return n\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    while n!= 0:\n        if n & 1 == 0:\n            return n\n        else:\n            return n - 1\nprint(set_left_most_unset_bit(6))\nprint(set_left_most_unset_bit(42))\nprint(set_left_most_unset_bit(7))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    # No. of Bits\n    n = 4\n    # Code\n    # Left most set bit\n    n = n - 1\n    # Binary Representation\n    print (bin(n))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    import math\n    return math.pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi*r**2*h/3,3)\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return round(4*math.pi*r**2,3)\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return round(math.pi*r**2*h/3,3)\ndef surface_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return round(4*math.pi*r**3,3)\ndef surface_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi*r**2*h/3,3)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * math.pow(r,2) * (h/3)\n    # return 4/3 * math.pi * math.pow(r,2) * (h/3)\ndef vol_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3 * math.pi * math.pow(r,3)\n    # return 4/3 * math.pi * math.pow(r,3)\ndef vol_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * math.pow(r,2) * (h/3)\n    # return 4/3 * math.pi * math.pow(r,2) * (h/3)\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * math.pow(r,2)\n    # return 4 * math.pi * math.pow(r,2)\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (math.pi * math.pow(r,2) * h)\n    # return (4/3 * math.pi * math.pow(r,2) * h)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4 * math.pi * math.pow(r,3) / 3)\n    # return (4 * math.pi * math.pow(r,3) / 3)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3 * math.pi * math.pow(r,2) * (h/3))\n    # return (4/3 * math.pi * math.pow(r,2) * (h/3))\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * math.pow(r,2)\n    # return 4 * math.pi * math.pow(r,2)\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (math.pi * math.pow(r,2) * h)\n    # return (4/3 * math.pi * math.pow(r,2) * h)\ndef perimeter_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * math.pow(r,2)\n    # return 4 * math.pi * math.pow(r,2)\ndef perimeter_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (4/3 * math.pi * math.pow(r,2) * h)\n    # return (4/3 * math.pi * math.pow(r,2) * h)\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * math.pi * math.pow(r,2) + 2 * math.pi * math.pow(r,2)\n    # return 2 * math.pi * math.pow(r,2) + 2 * math.pi * math.pow(r,2)\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * math.pow(r,2) * h\n    # return 4/3 * math.pi * math.pow(r,2) * h\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi * math.pow(r,2) * h\n    # return 4/3 * math.pi * math.pow(r,2) * h\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (math.pi * math.pow(r,2) * h)\n    # return 4/3 * math.pi * math.pow(r,2) * h\ndef circumference_cylinder(r):\n    '''\n    Write a function to find the circumference of a cylinder.\n    '''\n    return 2 * math.pi * r\n    # return 2 * math.pi * r\ndef circumference_cone(r,h):\n    '''\n    Write a function to find the circumference of a cone.\n    '''\n    return (math.pi * math.pow(r,2) * h)\n    # return 2 * math.pi * r\ndef circumference_sphere(r):\n    '''\n    Write a function to find the circumference of a sphere.\n    '''\n    return 2 * math.pi * r\n    # return 2 * math.pi * r\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2 * math.pi * r * (r + h))\n    # return (2 * math.pi * r * (r + h))\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * math.pow(r,2) * h\n    # return 4/3 * math.pi * math.pow(r,2) * h\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3 * math.pi * math.pow(r,3) / 3)\n    # return (4/3 * math.pi * math.pow(r,3) / 3)\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3 * math.pi * math.pow(r,2) * (h/3))\n    # return (4/3 * math.pi * math.pow(r,2) * (h/3))\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * math.pow(r,3))\n    # return (4 * math.pi * math.pow(r,3))\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * math.pow(r,2) * h\n    # return (4/3 * math.pi * math.pow(r,2) * h)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4 * math.pi * math.pow(r,3))\n    # return (4 * math.pi * math.pow(r,3))\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return (4/3 * math.pi * math.pow(r,2) * (h/3))\n    # return (4/3 * math.pi * math.pow(r,2) * (h/3))\ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * math.pow(r,3)\n    # return 4 * math.pi * math.pow(r,3)\ndef area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (math.p"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    #r = float(input('Enter radius of cone: '))\n    #h = float(input('Enter height of cone: '))\n    return math.pi*r**2*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    vol = math.pi * r**2 * h\n    return vol\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print('r = {}'.format(r))\n    print('h = {}'.format(h))\n    return math.pi * (r ** 2) * (h/2)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*math.pow(r,2)*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r <= 0:\n        return 'Please enter a positive radius.'\n    if h <= 0:\n        return 'Please enter a positive height.'\n    volume = (math.pi * r**2 * h) / 3\n    return round(volume,2)\nprint(volume_cone(2,3))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return round(math.pi * math.pow(r,2) * h,1)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n <= 0:\n        print(\"n must be a positive number!\")\n    else:\n        if n == 1:\n            return 1\n        else:\n            return 2 * highest_Power_of_2(n//2)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    MAX = n\n    MIN = 0\n    while (MIN < MAX):\n        # print(\"Min : {0}, Max : {1}\".format(MIN,MAX))\n        if (2 ** MIN <= MAX) :\n            # print(\"Min : {0}, Max : {1}\".format(MIN,MAX))\n            return MIN\n        MIN = MIN + 1\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    power = 0\n    while power < n:\n        power += 1\n    return power\n        \ndef test_highest_Power_of_2():\n    assert highest_Power_of_2(0) == 0\n    assert highest_Power_of_2(1) == 1\n    assert highest_Power_of_2(3) == 2\n    assert highest_Power_of_2(4) == 2\n    assert highest_Power_of_2(5) == 2\n    assert highest_Power_of_2(6) == 2\n    assert highest_Power_of_2(7) == 2\n    assert highest_Power_of_2(8) == 2\n    assert highest_Power_of_2(9) == 3\n    assert highest_Power_of_2(10) == 3\n    assert highest_Power_of_2(11) == 3\n    assert highest_Power_of_2(12) == 3\n    assert highest_Power_of_2(13) == 3\n    assert highest_Power_of_2(14) == 3\n    assert highest_Power_of_2(15) == 3\n    assert highest_Power_of_2(16) == 3\n    assert highest_Power_of_2(17) == 3\n    assert highest_Power_of_2(18) == 4\n    assert highest_Power_of_2(19) == 4\n    assert highest_Power_of_2(20) == 4\n    assert highest_Power_of_2(21) == 4\n    assert highest_Power_of_2(22) == 4\n    assert highest_Power_of_2(23) == 4\n    assert highest_Power_of_2(24) == 4\n    assert highest_Power_of_2(25) == 4\n    assert highest_Power_of_2(26) == 4\n    assert highest_Power_of_2(27) == 4\n    assert highest_Power_of_2(28) == 4\n    assert highest_Power_of_2(29) == 4\n    assert highest_Power_of_2(30) == 4\n    assert highest_Power_of_2(31) == 4\n    assert highest_Power_of_2(32) == 4\n    assert highest_Power_of_2(33) == 4\n    assert highest_Power_of_2(34) == 4\n    assert highest_Power_of_2(35) == 4\n    assert highest_Power_of_2(36) == 4\n    assert highest_Power_of_2(37) == 4\n    assert highest_Power_of_2(38) == 4\n    assert highest_Power_of_2(39) == 4\n    assert highest_Power_of_2(40) == 5\n    assert highest_Power_of_2(41) == 5\n    assert highest_Power_of_2(42) == 5\n    assert highest_Power_of_2(43) == 5\n    assert highest_Power_of_2(44) == 5\n    assert highest_Power_of_2(45) == 5\n    assert highest_Power_of_2(46) == 5\n    assert highest_Power_of_2(47) == 5\n    assert highest_Power_of_2(48) == 5\n    assert highest_Power_of_2(49) == 5\n    assert highest_Power_of_2(50) == 5\n    assert highest_Power_of_2(51) == 5\n    assert highest_Power_of_2(52) == 6\n    assert highest_Power_of_2(53) == 6\n    assert highest_Power_of_2(54) == 6\n    assert highest_Power_of_2(55) == 6\n    assert highest_Power_of_2(56) == 6\n    assert highest_Power_of_2(57) == 6\n    assert highest_Power_of_2(58) == 6\n    assert highest_Power_of_2(59) == 6\n    assert highest_Power_of_2(60) == 6\n    assert highest_Power_of_2(61) == 7\n    assert highest_Power_of_2(62) == 7\n    assert highest_Power_of_2(63) == 7\n    assert highest_Power_of_2(64) == 7\n    assert highest_Power_of_2(65) == 7\n    assert highest_Power_of_2(66) == 7\n    assert highest_Power_of_2(67) == 7\n    assert highest_Power_of_2(68) == 7\n    assert highest_Power_of_2(69) == 7\n    assert highest_Power_of_2(70) == 7\n    assert highest_Power_of_2(71) == 7\n    assert highest_Power_of_2(72) == 7\n    assert highest_Power_of_2(73) == 7\n    assert highest_Power_of_2(74) == 7\n    assert highest_Power_of_2(75) == 7\n    assert highest_Power_of_2(76) == 7\n    assert highest_Power_of_2(77) == 7\n    assert highest_Power_of_2(78) == 7\n    assert highest_Power_of_2(79) == 7\n    assert highest_Power_of_2(80) == 7\n    assert highest_Power_of_2(81) == 7\n    assert highest_Power_of_2(82) == 7\n    assert highest_Power_of_2(83) == 7\n    assert highest_Power_of_2(84) == 7\n    assert highest_Power_of_2(85) == 7\n    assert highest_Power_of_2(86) == 7\n    assert highest_Power_of_2(87) == 7\n    assert highest_Power_of_2(88) == 7\n    assert highest_Power_of_2(89) == 7\n    assert highest_Power_of_2(90) == 7\n    assert highest_Power_of_2(91) == 7\n    assert highest_Power_of_2(92) == 7\n    assert highest_Power_of_2(93) == 7\n    assert highest_Power_of_2(94) == 7\n    assert highest_Power_of_2(95) == 7\n    assert highest_Power_of_2(96) == 7\n    assert highest_Power_of_2(97) == 7\n    assert highest_Power_of_2(98) == 7\n    assert highest_Power_of_2(99) == 7\n    assert highest_Power_of_2(100) == 7\n    assert highest_Power_of_2(101) == 7\n    assert highest_Power_of_2(102) == 7\n    assert highest_Power_of_2(103) == 7\n    assert highest_Power_of_2(104) == 7\n    assert highest_Power_of_2(105) == 7\n    assert highest_Power_of_2(106) == 7\n    assert highest_Power_of_2(107) == 7\n    assert highest_Power_of_2(108) == 7\n    assert highest_Power_of_2(109) == 7\n    assert highest_Power_of_2(110) == 7\n    assert highest_Power_of_2(111) == 7\n    assert highest_Power_of_2(112) == 7\n    assert highest_Power_of_2(113) == 7\n    assert highest_Power_of_2(114) == 7\n    assert highest_Power_of_2(115) == 7\n    assert highest_Power_of_2(116) == 7\n    assert highest_Power_of_2(117) == 7\n    assert highest_Power_of_2(118) == 7\n    assert highest_Power_of_2(119) == 7\n    assert highest_Power_of_2(120) == 7\n    assert highest_Power_of_2(121) == 7\n    assert highest_Power_of_2(122) == 7\n    assert highest_Power_of_2(123) == 7\n    assert highest_Power_of_2(124) == 7\n    assert highest_Power_of_2(125) == 7\n    assert highest_Power_of_2(126) == 7\n    assert highest_Power_of_2(127) == 7\n    assert highest_Power_of_2(128) == 7\n    assert highest_Power_of_2(129) == 7\n    assert highest_Power_of_2(130) == 7\n    assert highest_Power_of_2(131) == 7\n    assert highest_Powe"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return 1 + highest_Power_of_2(n - 1)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_power = 1\n    while max_power < n:\n        max_power *= 2\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    #check if power of 2 is less than or equal to n\n    lowestPowerOf2 = 1\n    currentPowerOf2 = 2\n    while currentPowerOf2 <= n:\n        if currentPowerOf2 <= n:\n            currentPowerOf2 <<= 1\n        else:\n            currentPowerOf2 <<= 1\n            lowestPowerOf2 <<= 1\n        if currentPowerOf2 >= n:\n            break\n    return lowestPowerOf2\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    power = 1\n    while power < n:\n        power = 2 ** power\n    return power\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i = 0\n    while(i <= n):\n        i = i<<1\n    return i\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    #base case: if n is 0, we just return 0\n    if n == 0:\n        return 0\n    \n    #if n is 1, we just return 1\n    if n == 1:\n        return 1\n    \n    #if n is 2, we return 2\n    if n == 2:\n        return 2\n    \n    #the recursive case\n    #make use of recursion to get the 2^(n-1)\n    return 2*(highest_Power_of_2(n-1))\n        \n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    x = 1\n    while x <= n:\n        x = x << 1\n    return x - 1\n    \nprint(highest_Power_of_2(1024)) # 32\nprint(highest_Power_of_2(1024*1024*1024)) # 8\nprint(highest_Power_of_2(1024*1024*1024*1024)) # 16\nprint(highest_Power_of_2(1024*1024*1024*1024*1024)) # 32\nprint(highest_Power_of_2(1024*1024*1024*1024*1024*1024)) # 64\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    num = 1\n    count = 0\n    while count < n:\n        num = num + 2\n        count += 1\n    return num\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    assert n>=1 and n<=25\n    if n==1: \n        return 1\n    if n==2: \n        return 1\n    \n    lucas = find_lucas(n-1) + find_lucas(n-2)\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return find_lucas(n-1) + 2\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    \n    i = 1\n    while i <= n:\n        i += 1\n        lucas = find_lucas(i - 1) + find_lucas(i - 2)\n        print(lucas)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    assert n > 0, \"n must be a positive integer.\"\n    \n    # initialize the lucas numbers\n    lucas_numbers = [2, 1]\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 1:\n        return 0\n    if n == 1:\n        return 2\n    if n == 2:\n        return 3\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    a, b = 2, 1\n    for i in range(n):\n        a, b = b, a + b\n    return a\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    elif n == 1:\n        return 1\n    else:\n        return find_lucas(n-1) + find_lucas(n-2)\nprint(find_lucas(10))\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def calc_lucas(n):\n        if n == 0:\n            return 1\n        elif n == 1:\n            return 1\n        else:\n            return calc_lucas(n - 1) + calc_lucas(n - 2)\n    return calc_lucas(n)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(0, len(list_)):\n        list_[i] = string % list_[i]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.join(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return map(lambda x: format(x, string), list_)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for elem in list_:\n        print(string.format(elem))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = {}\n    new_dict['my_key_1'] = []\n    new_dict['my_key_2'] = []\n    new_dict['my_key_3'] = []\n    \n    for i in l1:\n        new_dict['my_key_1'].append(i)\n    \n    for j in l2:\n        new_dict['my_key_2'].append(j)\n    \n    for k in l3:\n        new_dict['my_key_3'].append(k)\n    \n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    my_dict = {}\n    for i, j, k in zip(l1, l2, l3):\n        my_dict[i] = {}\n        my_dict[i][j] = {}\n        my_dict[i][j][k] = {}\n        \n    return my_dict\n    \nl1 = [\"abcd\", 786, 2.23, 'john', 70.2]\nl2 = [1, 2, 3, 4, 5]\nl3 = [\"john\", \"johnny\", \"johnnystack\", \"johnny2\", \"johnny3\", \"johnny4\", \"johnny5\"]\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    l1.append(\"hi\")\n    l2.append(\"hi\")\n    l3.append(\"hi\")\n    l1.append(\"hi\")\n    l2.append(\"hi\")\n    l3.append(\"hi\")\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0:\n        return l2\n    l3.append(dict(zip(l1, l2)))\n    return convert_list_dictionary(l1[1:], l2[1:], l3)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    return {\"First\": l1, \"Second\": l2, \"Third\": l3}\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dictionary = {l2[i]: l1[i] for i in range(len(l2))}\n    return new_dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d1 = dict(zip(l1, l2))\n    d2 = dict(zip(l2, l3))\n    d3 = dict(zip(l3, l1))\n    d4 = dict(zip(l1, l2))\n    d5 = dict(zip(l1, l3))\n    return (d1, d2, d3, d4, d5)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    m={}\n    for i,j,k in zip(l1,l2,l3):\n        if i not in m:\n            m[i]={}\n            m[i][j]=k\n        else:\n            m[i][j]=k\n    return(m)\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    d = dict()\n    for i in range(len(l1)):\n        d[l1[i]] = l2[i]\n        d[l1[i]] = l3[i]\n    return d\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    x = {}\n    for i in range(len(l1)):\n        x[l1[i]] = l2[i]\n    for i in range(len(l3)):\n        if l3[i] in x:\n            x[l3[i]].append(l2[i])\n        else:\n            x[l3[i]] = l2[i]\n    return x\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n < 2:\n        return n\n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n % 2 == 0:\n        return max(get_max_sum(n // 2), n)\n    else:\n        return max(get_max_sum(n // 3), get_max_sum(n // 2), n)\n    \n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # This can be solved in 3-4 lines\n    # return max(get_max_sum_recursive(n/2, n), get_max_sum_recursive(n/3, n), get_max_sum_recursive(n/4, n), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 7\n    if n == 4:\n        return 10\n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        return max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    return f(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n==0:\n        return 0\n    if n%2==0:\n        return get_max_sum(n//2) + n\n    else:\n        return max(get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5) + n, n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    \n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    dp = {0:0}\n    for i in range(1,n+1):\n        dp[i] = max(get_max_sum(i//2),get_max_sum(i//3),get_max_sum(i//4),dp[i//5]) + i\n    return dp[n]\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    # Time: O(2^n); Space: O(n)\n    '''\n    The question asks for a recursive function that takes in a number and finds the\n    maximum sum possible by recursively finding the maximum of a series of numbers.\n    For example, when n = 5, we find:\n    f(5) = max(f(3) + f(4), f(2)) = max( 5, 16 ) = max(16, 32) = 32\n    f(4) = max(f(2) + f(3), f(1)) = max(4, 18) = max(18, 24) = 24\n    f(3) = max(f(1) + f(2), f(0)) = max(3, 14) = max(14, 24) = 24\n    f(2) = max(f(0) + f(1), f(1)) = max(2, 12) = max(12, 20) = 20\n    f(1) = max(f(0) + f(1), f(1)) = max(1, 14) = max(14, 14) = 14\n    f(0) = max(f(1) + f(1), f(1)) = max(0, 12) = max(12, 12) = 12\n    \n    We can then iteratively find the maximum sum and see how many numbers can be used.\n    We can use the following equation to find the maximum sum:\n    f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)\n    '''\n    def max_sum(n):\n        return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), n)\n    return max_sum(n)\n    \n    # Time: O(n)\n    # Space: O(n)\n    '''\n    The time and space complexity is all the same, we only need a single recursive call.\n    '''\n    def max_sum_brute_force (n):\n        if n == 1:\n            return 1\n        return max(max_sum_brute_force(n/2), max_sum_brute_force(n/3), max_sum_brute_force(n/4), max_sum_brute_force(n/5), n)\n    return max_sum_brute_force(n)\n    "
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def f(n):\n        return (n*(n+1)//2)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            index = i\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    temp_max = 0\n    for i in input_list:\n        if len(i) > temp_max:\n            temp_max = len(i)\n    return temp_max\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    for i in range(len(input_list)):\n        if len(input_list[i]) == max_length:\n            return input_list[i]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    list_lengths = list()\n    \n    for item in input_list:\n        list_lengths.append(len(item))\n    \n    max_length = max(list_lengths)\n    \n    return max_length\n    \n    \n    \n    \ndef count_even(input_list):\n    '''\n    Write a function to count the number of even numbers in a list.\n    '''\n    even_count = 0\n    \n    for item in input_list:\n        if item % 2 == 0:\n            even_count = even_count + 1\n    \n    return even_count\n    \n    \n    \n    \ndef all_the_same(input_list):\n    '''\n    Write a function that takes in a list and returns a boolean representing whether all the elements are the same.\n    '''\n    if len(input_list) == 1:\n        return True\n    elif len(input_list) > 1:\n        return all_the_same_list(input_list)\n    \ndef all_the_same_list(input_list):\n    '''\n    Write a function that takes in a list and returns a boolean representing whether all the elements are the same.\n    '''\n    return input_list[0] == input_list[1]\n    \n    \n    \n    \ndef some_vowels(input_list):\n    '''\n    Write a function that takes a list and returns a boolean representing whether any vowel is in the list.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    \n    for item in input_list:\n        if item in vowels:\n            return True\n        else:\n            return False\n        \n        \n        \n    \n    \ndef no_negative(input_list):\n    '''\n    Write a function that takes a list and returns a boolean representing whether no element in the list is negative.\n    '''\n    negative_count = 0\n    \n    for item in input_list:\n        if item < 0:\n            negative_count = negative_count + 1\n    \n    if negative_count == 0:\n        return True\n    else:\n        return False\n        \n    \n    \n    \ndef find_biggest(input_list):\n    '''\n    Write a function that takes a list and returns the largest element.\n    '''\n    largest = 0\n    \n    for item in input_list:\n        if item > largest:\n            largest = item\n    \n    return largest\n    \n    \n    \n    \ndef biggest_guy(input_list):\n    '''\n    Write a function that takes a list and returns the biggest element.\n    '''\n    max_item = input_list[0]\n    \n    for item in input_list:\n        if item > max_item:\n            max_item = item\n    \n    return max_item\n    \n    \n    \n    \ndef sum_total(input_list):\n    '''\n    Write a function that takes a list and returns the sum of all of the elements.\n    '''\n    sum_total = 0\n    \n    for item in input_list:\n        sum_total = sum_total + item\n    \n    return sum_total\n    \n    \n    \n    \ndef average(input_list):\n    '''\n    Write a function that takes a list and returns the average of all the elements.\n    '''\n    sum_total = sum_total(input_list)\n    \n    average = sum_total / len(input_list)\n    \n    return average\n    \n    \n    \n    \ndef length_longest_substring(input_list):\n    '''\n    Write a function that takes a list and returns the length of the longest substring.\n    '''\n    longest_substring = 0\n    substring = ''\n    \n    for item in input_list:\n        if item not in substring:\n            substring = substring + item\n        else:\n            if len(substring) > longest_substring:\n                longest_substring = len(substring)\n            substring = substring.replace(item, '')\n    \n    if len(substring) > longest_substring:\n        longest_substring = len(substring)\n    \n    return longest_substring\n    \n    \n    \n    \ndef palindrome_check(input_list):\n    '''\n    Write a function that takes a list and returns a boolean representing whether the list is a palindrome.\n    '''\n    return input_list == input_list[::-1]\n    \n    \n    \n    \ndef sort_by_decreasing(input_list):\n    '''\n    Write a function that takes a list and returns a sorted list.\n    '''\n    sorted_list = sorted(input_list)\n    return sorted_list\n    \n    \n    \n    \n    \ndef sort_by_decreasing_index(input_list):\n    '''\n    Write a function that takes a list and returns a sorted list, using the index as a tiebreaker.\n    '''\n    sorted_list = input_list.sort()\n    return sorted_list\n    \n    \n    \n    \ndef reverse_list(input_list):\n    '''\n    Write a function that takes a list and returns a reversed list.\n    '''\n    reverse_list = input_list[::-1]\n    return reverse_list\n    \n    \n    \n    \ndef multiply_list(input_list):\n    '''\n    Write a function that takes a list and returns a multiplied list.\n    '''\n    return input_list * 2\n    \n    \n    \n    \ndef is_prime(input_list):\n    '''\n    Write a function that takes a list and returns a boolean representing whether the list is prime.\n    '''\n    for item in input_list:\n        if item <= 1:\n            return False\n        elif item >= 2 and item!= 2:\n            for divisor in range(2, item):\n                if item % divisor == 0:\n                    return False\n    return True\n    \n    \n    \n    \ndef get_primes(input_list):\n    '''\n    Write a function that takes a list and returns a sorted list of primes.\n    '''\n    primes_list = []\n    \n    for item in input_list:\n        if is_prime(item):\n            primes_list.append(item)\n    \n    return primes_list\n    \n    \n    \n    \ndef get_primes_2(input_list):\n    '''\n    Write a function that takes a list and returns a sorted list of primes.\n    '''\n    for item in input_list:\n        if item <= 1:\n            return False\n        elif item >= 2 and item!= 2:\n            for divisor in range(2, item):\n                if item % divisor == 0:\n                    return False\n    return True\n    \n    \n    \n    \ndef sum_in_list(input_list):\n    '''\n    Write a function that takes a list and returns the sum of all the numbers in the list.\n    '''\n    sum_total = 0\n    \n    for item in input_list:\n        sum_total = sum_total + item\n    \n    return sum_total\n    \n    \n    \n    \ndef subtract_in_list(input_list):\n    '''\n    Write a function that takes a list and returns the sum of all the numbers in the list.\n    '''\n    subtract_total = 0\n    \n    for item in input_list:\n        subtract_total = subtract_total - item\n    \n    return subtract_total\n    \n    \n    \n    \ndef get_item_count(input_list, input_item):\n    '''\n    Write a function that takes a list and returns the number of times an item appears in the list.\n    '''\n    item_count = 0\n    \n    for item in input_list:\n        if item == input_item:\n            item_count = item_count + 1\n    \n    return item_count\n    \n    \n    \n    \ndef is_item_in_list(input_list, input_item):\n    '''\n    Write a function that takes a list and returns a boolean representing whether an item appears in the list.\n    '''\n    is_item_in_list = False\n    \n    for item in input_list:\n        if item == input_item:\n            is_item_in_lis"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    max_length_list = []\n    for item in input_list:\n        if len(item) == max_length:\n            max_length_list.append(item)\n    return max_length_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # your code here\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = 0\n    for value in input_list:\n        if len(value) >= max_len:\n            max_len = len(value)\n    return max_len\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_str = tuple(test_tup)\n    for i in range(len(test_str)-1):\n        if test_str[i] == test_str[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = test_tup\n    tup_set = set()\n    for i in range(len(tup)):\n        tup_set.add(tup[i])\n    if len(tup_set) == len(tup):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    no_duplicate = True\n    for x in range(0, len(test_tup)):\n        for y in range(x + 1, len(test_tup)):\n            if test_tup[x] == test_tup[y]:\n                no_duplicate = False\n    if no_duplicate == True:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup = test_tup\n    for i in tup:\n        if tup.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) == len(set(test_tup)):\n        print('Tuple contains no duplicate values')\n    else:\n        print('Tuple contains duplicate values')\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in test_tup:\n        if test_tup.count(i) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    for i in range(len(test_tup)-1):\n        if test_tup[i] in test_tup[i+1:]:\n            return False\n    return True\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    res = []\n    for i in str1:\n        if str1.count(i) == 1:\n            res.append(i)\n    return ''.join(res)\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    arr = list(str1)\n    dict_arr = {}\n    for i in arr:\n        if i in dict_arr:\n            dict_arr[i] += 1\n        else:\n            dict_arr[i] = 1\n    for i in arr:\n        if dict_arr[i] == 1:\n            return i\n    return \"None\"\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    # Base Case\n    if len(str1) == 0:\n        return None\n    \n    # If first character is repeated then return first character\n    elif str1[0] == str1[1]:\n        return str1[0]\n    \n    else:\n        # If first character is not repeated then return first non-repeated character\n        return first_non_repeating_character(str1[1:])\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i]) == 1:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    char_to_count = {}\n    for char in str1:\n        if char in char_to_count:\n            char_to_count[char] = char_to_count[char] + 1\n        else:\n            char_to_count[char] = 1\n    for char in str1:\n        if char_to_count[char] == 1:\n            return char\n    return '_'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    dict = {}\n    for i in range(len(str1)):\n        if str1[i] in dict:\n            dict[str1[i]] += 1\n        else:\n            dict[str1[i]] = 1\n    for i in range(len(str1)):\n        if dict[str1[i]] == 1:\n            return str1[i]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in str1:\n        if str1.count(i) == 1:\n            return i\n        else:\n            return''\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # Code here\n    count = {}\n    for char in str1:\n        if char not in count:\n            count[char] = 1\n        else:\n            count[char] += 1\n    for char in count:\n        if count[char] == 1:\n            return char\n    return None\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for char in str1:\n        if str1.count(char)==1:\n            return char\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    if len(str1) == 0:\n        print(\"No characters are present in the string.\")\n        return\n    elif len(str1) == 1:\n        if str1 == str1[0]:\n            print(\"First character is the repeating character.\")\n            return\n        else:\n            print(\"First character is not the repeating character.\")\n            return\n    else:\n        str_dict = {}\n        for i in range(len(str1)):\n            if str1[i] in str_dict.keys():\n                str_dict[str1[i]] += 1\n            else:\n                str_dict[str1[i]] = 1\n        for k,v in str_dict.items():\n            if v == 1:\n                print(\"First non-repeated character is {}, and its index is {}\".format(k,str1.find(k)))\n                return\n        print(\"No non-repeated character exists.\")\n        return\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string.startswith(string[0]) and string.endswith(string[-1])):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    print(string[0] == string[-1])\n    return True if string[0] == string[-1] else False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # st = ''\n    # lst = string.split()\n    # for i in lst:\n    #     st+=i[0]\n    # if (string[0] == st[-1]) or (string[-1] == st[0]):\n    #     return True\n    # else:\n    #     return False\n    return (string[0] == string[-1])\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string)\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    count = 0\n    for char in string:\n        if char == string[0]:\n            count = count + 1\n        elif char == string[len(string)-1]:\n            count = count + 1\n    if count == len(string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    # your code here\n    if string[0] == string[-1] and len(string) > 1:\n        return True\n    else:\n        return False\nprint(check_char('aba')) # True\nprint(check_char('abaab')) # True\nprint(check_char('abaab')) # False\nprint(check_char('abaab')) # False\nprint(check_char('abaab')) # False\nprint(check_char('abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababbababab"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    string = 'xyz'\n    pattern = '^$|^.*\\w$|^\\w*\\w$'\n    if re.search(pattern, string): \n        print(f\"{string} is the string\") \n    else: \n        print(f\"{string} is not the string\")\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pass\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = r'^.*$'\n    if re.match(pattern,string):\n        return True\n    else:\n        return False\nprint(check_char('Hello'))\nprint(check_char('Hello World'))\nprint(check_char('Hello World!'))\nprint(check_char('Hello World!!'))\nprint(check_char('hello'))\nprint(check_char('HELLO'))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    pattern = re.compile(regex)\n    result = pattern.match(string)\n    return result!= None\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_nums = sorted((a,b,c))\n    print(sorted_nums)\n    if(sorted_nums[1] == sorted_nums[0]):\n        return float(sorted_nums[0])\n    elif(sorted_nums[1] == sorted_nums[2]):\n        return float(sorted_nums[1])\n    elif(sorted_nums[0] == sorted_nums[2]):\n        return float(sorted_nums[0])\n    else:\n        return float((sorted_nums[1] + sorted_nums[2])/2)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    median = (a + b + c) / 2\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    sorted_numbers = sorted([a,b,c])\n    if len(sorted_numbers) == 2:\n        if sorted_numbers[0] == sorted_numbers[1]:\n            return (sorted_numbers[0] + sorted_numbers[1])/2\n        return sorted_numbers[0]\n    else:\n        median = len(sorted_numbers)/2\n        if int(median) == median:\n            return int(median)\n        elif int(median)!= median:\n            return int(median)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if (a + b + c) / 2 > c:\n        return (a + b + c) / 2\n    elif (a + b + c) / 2 < c:\n        return (a + b + c) / 2 - 1\n    else:\n        return a\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<b and a<c:\n        return b\n    elif b<a and b<c:\n        return a\n    else:\n        return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    print(\"Enter the first number: \")\n    a = int(input())\n    print(\"Enter the second number: \")\n    b = int(input())\n    print(\"Enter the third number: \")\n    c = int(input())\n    if a<b<c:\n        median = (a+b+c)/2\n    if a>b>c:\n        median = a\n    if b>a>c:\n        median = b\n    if c>a>b:\n        median = c\n    print(\"The median is : \", median)\n    return median\nmedian_numbers(a,b,c)\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a,b,c])\n    return sorted_list[1]\n    \ndef find_median_numbers(a,b,c):\n    sorted_list = sorted([a,b,c])\n    mid = (len(sorted_list))//2\n    if len(sorted_list)%2 == 0:\n        median = (sorted_list[mid-1] + sorted_list[mid])/2\n    else:\n        median = sorted_list[mid]\n    return median\n    \n    \ndef create_numbers(n):\n    '''\n    Write a function to create the numbers ranging from 1 to n.\n    '''\n    numbers = []\n    for i in range(1, n+1):\n        numbers.append(i)\n    return numbers\n    \ndef is_prime(n):\n    '''\n    Write a function to check if the given number is prime or not.\n    '''\n    if n%2 == 0 or n == 2:\n        return False\n    for i in range(3, n):\n        if n % i == 0:\n            return False\n    return True\n    \ndef create_primes(start, stop):\n    '''\n    Write a function to create the prime numbers from the given start to the given stop.\n    '''\n    primes = []\n    for i in range(start, stop):\n        if is_prime(i):\n            primes.append(i)\n    return primes\n    \ndef find_if_factors(n, list_of_factors):\n    '''\n    Write a function to check if n is a factor of any number in list of factors.\n    '''\n    for i in list_of_factors:\n        if i == 0 or n%i == 0:\n            return True\n    return False\n    \ndef create_if_prime(start, stop):\n    '''\n    Write a function to create the prime numbers from the given start to the given stop.\n    '''\n    list_of_factors = []\n    for i in range(start, stop):\n        if is_prime(i):\n            list_of_factors.append(i)\n    return list_of_factors\n    \n    \ndef create_factors(n):\n    '''\n    Write a function to find all factors of given number.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \ndef create_factors_greater_than(n):\n    '''\n    Write a function to find all factors of given number, which are greater than 0.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if i > 0:\n            factors.append(i)\n    return factors\n    \ndef sum_of_squares(n):\n    '''\n    Write a function to find the sum of squares of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(n+1):\n        total = total + i**2\n    return total\n    \ndef sum_of_squares_from_list(list):\n    '''\n    Write a function to find the sum of squares of the first n natural numbers.\n    '''\n    total = 0\n    for i in list:\n        total = total + i**2\n    return total\n    \ndef find_factors(n):\n    '''\n    Write a function to find all factors of given number.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \ndef find_factors_from_list(list):\n    '''\n    Write a function to find all factors of given number.\n    '''\n    factors = []\n    for i in list:\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \ndef find_factors_greater_than(n):\n    '''\n    Write a function to find all factors of given number, which are greater than 0.\n    '''\n    factors = []\n    for i in range(1, n+1):\n        if i > 0:\n            factors.append(i)\n    return factors\n    \ndef find_factors_greater_than_from_list(list):\n    '''\n    Write a function to find all factors of given number, which are greater than 0.\n    '''\n    factors = []\n    for i in list:\n        if i > 0:\n            factors.append(i)\n    return factors\n    \ndef factors_and_sums(n):\n    '''\n    Write a function to find all factors of given number and sum of its factors.\n    '''\n    factors = []\n    sum = 0\n    for i in range(1, n+1):\n        if n % i == 0:\n            factors.append(i)\n            sum = sum + i\n    return factors, sum\n    \ndef factors_and_sums_from_list(list):\n    '''\n    Write a function to find all factors of given number and sum of its factors.\n    '''\n    factors = []\n    sum = 0\n    for i in list:\n        if n % i == 0:\n            factors.append(i)\n            sum = sum + i\n    return factors, sum\n    \ndef factors_and_sums_greater_than(n):\n    '''\n    Write a function to find all factors of given number and sum of its factors, which are greater than 0.\n    '''\n    factors = []\n    sum = 0\n    for i in range(1, n+1):\n        if i > 0:\n            factors.append(i)\n            sum = sum + i\n    return factors, sum\n    \ndef factors_and_sums_greater_than_from_list(list):\n    '''\n    Write a function to find all factors of given number and sum of its factors, which are greater than 0.\n    '''\n    factors = []\n    sum = 0\n    for i in list:\n        if i > 0:\n            factors.append(i)\n            sum = sum + i\n    return factors, sum\n    \ndef factors_and_sums_greater_than_from_list_2(list):\n    '''\n    Write a function to find all factors of given number and sum of its factors, which are greater than 0.\n    '''\n    factors = []\n    sum = 0\n    for i in list:\n        if i > 0:\n            factors.append(i)\n            sum = sum + i\n    return factors, sum\n    \ndef sum_of_squares_from_list_2(list):\n    '''\n    Write a function to find the sum of squares of the first n natural numbers.\n    '''\n    total = 0\n    for i in list:\n        total = total + i**2\n    return total\n    \ndef sum_of_squares_from_list_3(list):\n    '''\n    Write a function to find the sum of squares of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(len(list)):\n        total = total + list[i]**2\n    return total\n    \ndef sum_of_squares_from_list_4(list):\n    '''\n    Write a function to find the sum of squares of the first n natural numbers.\n    '''\n    total = 0\n    for i in list:\n        total = total + i**2\n    return total\n    \ndef sum_of_squares_from_list_5(list):\n    '''\n    Write a function to find the sum of squares of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(len(list)):\n        total = total + list[i]**2\n    return total\n    \ndef sum_of_squares_from_list_6(list):\n    '''\n    Write a function to find the sum of squares of the first n natural numbers.\n    '''\n    total = 0\n    for i in range(len(list)):\n        total = total + list[i]**2\n    return total\n    \ndef sum_of_squares_from_list_7(list)"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    \n    number_list=[a,b,c]\n    number_list.sort()\n    if len(number_list)==1:\n        return number_list[0]\n    elif len(number_list)==2:\n        if number_list[0]==number_list[1]:\n            return number_list[0]\n        else:\n            return (number_list[0]+number_list[1])/2\n    else:\n        return (number_list[0]+number_list[1])/2"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_of_numbers = (a,b,c)\n    list_of_numbers = sorted(list_of_numbers)\n    if len(list_of_numbers) % 2 == 0:\n        median_of_three = (list_of_numbers[len(list_of_numbers) // 2] + list_of_numbers[(len(list_of_numbers) // 2) - 1]) / 2\n    else:\n        median_of_three = list_of_numbers[len(list_of_numbers) // 2]\n    return median_of_three\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a >= b and a >= c:\n        return a\n    elif b >= a and b >= c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in nums:\n        sum = sum + int(i)\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    #iterate through each number in list\n    #convert number to string\n    #get number of digits in string\n    #count digits in string\n    \n    return sum([int(i) for i in str(sum(nums))])\n    \nprint(sum_of_digits([345, 27, 22, 777]))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return [int(x) for x in str(sum(nums))]\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for num in nums:\n        s += sum_of_digits_rec(num)\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums_sum = 0\n    for n in nums:\n        nums_sum += sum_of_digits_helper(n)\n    return nums_sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums_sum = 0\n    for num in nums:\n        nums_sum += len(str(num))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    nums = sorted(nums)\n    total = 0\n    for num in nums:\n        total += num%10\n    return total\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(x) for x in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for i in range(len(nums)):\n        result += int(nums[i])\n    return result\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    total = 0\n    for x in nums:\n        total += sum_of_digits(x)\n    return total\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0],\n            test_tup1[1] ^ test_tup2[1])\n    \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return(test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return 'Both the tuples should have same length'\n    else:\n        result = []\n        for i in range(len(test_tup1)):\n            result.append(int(bool(test_tup1[i]) ^ bool(test_tup2[i])))\n        return result\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    test_result = (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n    return test_result\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #print(f\"test_tup1={test_tup1}\")\n    #print(f\"test_tup2={test_tup2}\")\n    #print(f\"test_tup1[0]={test_tup1[0]}\")\n    #print(f\"test_tup1[1]={test_tup1[1]}\")\n    #print(f\"test_tup2[0]={test_tup2[0]}\")\n    #print(f\"test_tup2[1]={test_tup2[1]}\")\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    tup1_1 = test_tup1[0]\n    tup2_1 = test_tup1[1]\n    tup3_1 = test_tup1[2]\n    tup4_1 = test_tup1[3]\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    #zip_test = zip(test_tup1, test_tup2)\n    #print(zip_test)\n    #print(zip(test_tup1, test_tup2))\n    #print(list(zip(test_tup1, test_tup2)))\n    #print(list(zip_test))\n    #print(test_tup1)\n    #print(test_tup2)\n    \n    a = list(zip(test_tup1, test_tup2))\n    a_xor = [(i[0] ^ i[1]) for i in a]\n    return a_xor\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    # This function takes two tuples of same size as inputs,\n    # Returns a tuple with size same as input tuples\n    # Bitwise XOR of two numbers\n    return (test_tup1[0] ^ test_tup1[1], test_tup2[0] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result_tup = []\n    for i in range(len(test_tup1)):\n        bitwise_xor_num = test_tup1[i] ^ test_tup2[i]\n        result_tup.append(bitwise_xor_num)\n    return result_tup\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    freq = {}\n    for i in test_list:\n        freq[i] = test_list.count(i)\n    \n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_count = 0\n    for tup in test_list:\n        for val in tup:\n            if val not in test_list:\n                unique_count += 1\n                break\n    return unique_count\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    res = {}\n    for item in test_list:\n        if item in res.keys():\n            res[item] += 1\n        else:\n            res[item] = 1\n    return len(res)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return(len(list(set(test_list))))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Write your code here\n    freq = {}\n    for i in test_list:\n        for j in i:\n            if j in freq:\n                freq[j] += 1\n            else:\n                freq[j] = 1\n    print(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for element in test_list:\n        if element in freq:\n            freq[element] += 1\n        else:\n            freq[element] = 1\n    return freq\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(test_list)))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # write your solution here\n    result = []\n    list_copy = list(test_list)\n    for i in range(0,len(list_copy)):\n        list_copy[i] = tuple(list_copy[i])\n    #print(list_copy)\n    for i in range(0,len(list_copy)):\n        if list_copy.count(list_copy[i]) == 1:\n            result.append(list_copy[i])\n    return len(result)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    tuple_list = []\n    for i in test_list:\n        for j in i:\n            tuple_list.append(j)\n    print(\"Unique tuples:\",len(set(tuple_list)))\n    \n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq_dict = {}\n    for item in test_list:\n        if item in freq_dict.keys():\n            freq_dict[item] += 1\n        else:\n            freq_dict[item] = 1\n    return freq_dict\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup_a, tup_b = test_tup1, test_tup2\n    return tup_a, tup_b\n    \n    #Assertion:\n    #assert add_nested_tuples((1, 2, 3, 4, 5, 6), (7, 8, 9, 10, 11, 12)) == (1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_tup1 = (test_tup1)\n    nested_tup2 = (test_tup2)\n    for i in range(0, len(nested_tup1)):\n        if isinstance(nested_tup1[i], (tuple, list)):\n            nested_tup1[i] = add_nested_tuples(nested_tup1[i], nested_tup2[i])\n        else:\n            nested_tup1[i] += nested_tup2[i]\n    return nested_tup1\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    nested_list = []\n    for i in range(len(test_tup1)):\n        if type(test_tup1[i]) == tuple and type(test_tup2[i]) == tuple:\n            nested_list.append(add_nested_tuples(test_tup1[i], test_tup2[i]))\n        else:\n            nested_list.append(test_tup1[i] + test_tup2[i])\n    return tuple(nested_list)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i]+test_tup2[i])\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = []\n    tup2 = []\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return list(map(sum, zip(*(iter(test_tup1), iter(test_tup2)))))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple([tup1[i] + tup2[i] for i in range(len(tup1))])\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    tup1 = ()\n    tup2 = ()\n    #new_tup = ()\n    #new_tup = list(tup1)\n    #new_tup.append(tup2)\n    #print(new_tup)\n    #print(tup1)\n    #print(tup2)\n    #print(tup1 + tup2)\n    new_tup = list(tup1)\n    for i in range(len(new_tup)):\n        if i == len(new_tup):\n            new_tup.append(tup2)\n        else:\n            new_tup[i] = new_tup[i] + tup2[i]\n    print(new_tup)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    test_list1 = []\n    test_list2 = []\n    for i, j in zip(test_tup1, test_tup2):\n        test_list1.append(i)\n        test_list2.append(j)\n    tup = tuple(test_list1)\n    return tup + tuple(test_list2)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_tup = ()\n    for i in range(len(test_tup1)):\n        temp = ()\n        for j in range(len(test_tup1[i])):\n            temp += (test_tup1[i][j] + test_tup2[i][j],)\n        res_tup += (temp,)\n    return res_tup\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\nprint(minimum(5,6))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(a)\n    else:\n        print(b)\n    \nminimum(6,3)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\nprint(\"\\nMinimum of two numbers is:\", minimum(10,20))\nprint(\"Minimum of two numbers is:\", minimum(20,10))\nprint(\"Minimum of two numbers is:\", minimum(5,5))\nprint(\"Minimum of two numbers is:\", minimum(100,55))\nprint(\"Minimum of two numbers is:\", minimum(5,-5))\nprint(\"Minimum of two numbers is:\", minimum(20,5))\nprint(\"Minimum of two numbers is:\", minimum(55,5))\nprint(\"Minimum of two numbers is:\", minimum(55,-5))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if(a>b):\n        return(b)\n    else:\n        return(a)\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return(a if a<b else b)\n    \ndef minimum(a,b,c):\n    '''\n    Write a python function to find the minimum of three numbers.\n    '''\n    return(a if a<b else b if b<c else c)\n    \ndef minimum(a,b,c,d,e):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e)\n    \ndef minimum(a,b,c,d,e,f):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f)\n    \ndef minimum(a,b,c,d,e,f,g):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g)\n    \ndef minimum(a,b,c,d,e,f,g,h):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h)\n    \ndef minimum(a,b,c,d,e,f,g,h,i):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h if h<i else i)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h if h<i else i if i<j else j)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h if h<i else i if i<j else j if j<k else k)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h if h<i else i if i<j else j if j<k else k if k<l else l)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h if h<i else i if i<j else j if j<k else k if k<l else l if l<m else m)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h if h<i else i if i<j else j if j<k else k if k<l else l if l<m else m if m<n else n)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h if h<i else i if i<j else j if j<k else k if k<l else l if l<m else m if m<n else n if n<o else o)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h if h<i else i if i<j else j if j<k else k if k<l else l if l<m else m if m<n else n if n<o else o if o<p else p)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h if h<i else i if i<j else j if j<k else k if k<l else l if l<m else m if m<n else n if n<o else o if o<p else p if p<q else q)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h if h<i else i if i<j else j if j<k else k if k<l else l if l<m else m if m<n else n if n<o else o if o<p else p if p<q else q if q<r else r)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s):\n    '''\n    Write a python function to find the minimum of five numbers.\n    '''\n    return(a if a<b else b if b<c else c if c<d else d if d<e else e if e<f else f if f<g else g if g<h else h if h<i else i if i<j else j if j<k else k if k<l else l if l<m else m if m<n else n if n<o else o if o<p else p if p<q else q if q<r else r if r<s else s)\n    \ndef minimum(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \ndef maximum(a,b):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \n    \n    \n    \ndef main():\n    \n    a = int(input('Enter the number 1'))\n    b = int(input('Enter the number 2'))\n    \n    \n    print('The minimum number is ',minimum(a,b))\n    print('The maximum number is ',maximum(a,b))\n    \nif __name__ == \"__main__\":\n    main()\n    "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(\"Minimum Number: \",a)\n    elif a == b:\n        print(\"Minimum Number: \",a)\n    else:\n        print(\"Minimum Number: \",b)\nminimum(3,3)\nminimum(7,3)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        min=a\n        max=b\n    else:\n        min=b\n        max=a\n    return min,max\n    \nif __name__=='__main__':\n    a=int(input('Enter the value of a: '))\n    b=int(input('Enter the value of b: '))\n    print('Minimum value is',minimum(a,b))\n    \n    \n    "
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return (a if a<b else b)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return any(x in tuplex for x in tuple1) \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for val in tuplex:\n        if val == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return tuplex in tuple1\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for each in tuplex:\n        if each == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in tuplex:\n        if i == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuple1[0] == tuplex[i]:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return any(x in tuplex for x in tuple1)\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    x = 0\n    for i in range(0,len(tuplex)):\n        if tuplex[i] == tuple1[x]:\n            x += 1\n    if x == len(tuple1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for i in range(len(tuplex)):\n        if tuplex[i] == tuple1:\n            return True\n    return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex in tuple1: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if (x % 2) == 0:\n        print(\"The parity of the number is odd\")\n    else:\n        print(\"The parity of the number is even\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if(x&1):\n        return(False)\n    else:\n        return(True)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #your code here\n    #print(x)\n    y = (x - x%2)\n    #print(y)\n    if y%2 == 0:\n        print(y,\"is even\")\n    else:\n        print(y,\"is odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2 == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    p = 0\n    if x % 2 == 0:\n        p = x\n    else:\n        p = x - 1\n    return p\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x > 0: \n        parity = parity ^ x%10\n        x = x//10\n    return parity\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x%2 == 0:\n        print(\"Even\")\n    else:\n        print(\"Odd\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    x = x % 2\n    return x\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) == 0\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x!=0:\n        parity = parity ^ x & 1\n        x = x >> 1\n    return parity\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    str_n = str_n[::-1]\n    for i in range(len(str_n)):\n        if i!= 0 and str_n[i] == str_n[i-1]:\n            str_n = str_n[:i] + str_n[i+1:]\n            break\n    \n    if not str_n:\n        str_n = '1'\n    str_n = int(str_n[::-1])\n    return str(str_n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num_str = str(n)\n    while True:\n        flag = 0\n        num_str_copy = num_str[:]\n        for i in range(len(num_str) - 1):\n            if num_str[i] > num_str[i + 1]:\n                if flag == 0:\n                    flag = 1\n                    num_str = num_str[i] + num_str_copy[i + 1:] + num_str_copy[i] + num_str_copy[i + 1:] + num_str_copy[i] + num_str_copy[i + 1:]\n                else:\n                    num_str = num_str[:i] + num_str_copy[i + 1:] + num_str_copy[i] + num_str_copy[i + 1:] + num_str_copy[i] + num_str_copy[i + 1:]\n        if flag == 0:\n            break\n    return int(num_str)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # O(n) time and space\n    def next_bigger(n):\n        def reverse(n):\n            str_n = str(n)\n            return int(str_n[::-1])\n        def swap_digits(n):\n            str_n = str(n)\n            return int(str_n[0] + str_n[2] + str_n[1])\n        # compare a with next bigger element\n        a = n\n        b = -1\n        for i in range(1,n+1):\n            if a < i:\n                b = i\n                break\n            a = a*10 + i\n        if b == -1:\n            return -1\n        return swap_digits(b)\n    # use a stack, O(n) time and space\n    def next_bigger(n):\n        '''\n        Write a function to create the next bigger number by rearranging the digits of a given number.\n        '''\n        def check_prev(n):\n            stack = []\n            while n:\n                stack.append(n%10)\n                n = n//10\n            # at first you should have 2 numbers in stack\n            # then you need to compare them\n            # then you can swap the two numbers\n            n = stack[-1]\n            while stack:\n                if stack[-1] <= n:\n                    return n\n                n = stack.pop()\n            return n\n        def swap_digits(n):\n            str_n = str(n)\n            return int(str_n[0] + str_n[2] + str_n[1])\n        # compare a with next bigger element\n        a = n\n        b = -1\n        while a:\n            a = check_prev(a)\n            b = swap_digits(b)\n        return b\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    list_num = list(map(int, str(n)))\n    i = 0\n    if len(list_num) == 1:\n        return 1\n    while i < len(list_num) - 1:\n        if list_num[i] > list_num[i + 1]:\n            break\n        i += 1\n    if i == len(list_num) - 1:\n        return n\n    for j in range(i, len(list_num)):\n        if list_num[i] < list_num[j]:\n            list_num[i], list_num[j] = list_num[j], list_num[i]\n            break\n    return int(''.join(list_num))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    string_n = str(n)\n    number = int(string_n[::-1])\n    number = list(str(number))\n    number = number[:-1]\n    number = int(''.join(number))\n    return number\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    str_n = str(n)\n    next_bigger = int(''.join(sorted(str_n, reverse=True)))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    return int(''.join(sorted(str(n),reverse=True)))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    if n <= 0:\n        return -1\n    #input: 1234\n    #output: 54321\n    ans = int(\"\".join(sorted([str(x) for x in str(n)])))\n    return ans\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    num = str(n)\n    max_num = -1\n    for i in range(len(num)):\n        if int(num[i]) > max_num:\n            max_num = int(num[i])\n    max_num = str(max_num)\n    for i in range(len(num)):\n        if int(num[i]) < max_num:\n            max_num = int(num[i])\n    max_num = int(max_num) + 1\n    num = str(max_num)\n    for i in range(len(num)):\n        if int(num[i]) > max_num:\n            max_num = int(num[i])\n    max_num = str(max_num)\n    for i in range(len(num)):\n        if int(num[i]) < max_num:\n            max_num = int(num[i])\n    max_num = int(max_num) - 1\n    num = str(max_num)\n    return max_num\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # numbers that can be the next bigger number\n    next_bigger_numbers = {\n        1 : '11',\n        2 : '21',\n        3 : '12',\n        4 : '41',\n        5 : '51',\n        6 : '61',\n        7 : '71',\n        8 : '81',\n        9 : '91',\n        10 : '11',\n        11 : '12',\n        12 : '13',\n        13 : '14',\n        14 : '15',\n        15 : '16',\n        16 : '17',\n        17 : '18',\n        18 : '19',\n        19 : '20',\n        20 : '21',\n        21 : '22',\n        22 : '23',\n        23 : '24',\n        24 : '25',\n        25 : '26',\n        26 : '27',\n        27 : '28',\n        28 : '29',\n        29 : '30',\n        30 : '31',\n        31 : '32',\n        32 : '33',\n        33 : '34',\n        34 : '35',\n        35 : '36',\n        36 : '37',\n        37 : '38',\n        38 : '39',\n        39 : '40',\n        40 : '41',\n        41 : '42',\n        42 : '43',\n        43 : '44',\n        44 : '45',\n        45 : '46',\n        46 : '47',\n        47 : '48',\n        48 : '49',\n        49 : '50',\n        50 : '51',\n        51 : '52',\n        52 : '53',\n        53 : '54',\n        54 : '55',\n        55 : '56',\n        56 : '57',\n        57 : '58',\n        58 : '59',\n        59 : '60',\n        60 : '61',\n        61 : '62',\n        62 : '63',\n        63 : '64',\n        64 : '65',\n        65 : '66',\n        66 : '67',\n        67 : '68',\n        68 : '69',\n        69 : '70',\n        70 : '71',\n        71 : '72',\n        72 : '73',\n        73 : '74',\n        74 : '75',\n        75 : '76',\n        76 : '77',\n        77 : '78',\n        78 : '79',\n        79 : '80',\n        80 : '81',\n        81 : '82',\n        82 : '83',\n        83 : '84',\n        84 : '85',\n        85 : '86',\n        86 : '87',\n        87 : '88',\n        88 : '89',\n        89 : '90',\n        90 : '91',\n        91 : '92',\n        92 : '93',\n        93 : '94',\n        94 : '95',\n        95 : '96',\n        96 : '97',\n        97 : '98',\n        98 : '99',\n        99 : '100',\n        100 : '101',\n        101 : '102',\n        102 : '103',\n        103 : '104',\n        104 : '105',\n        105 : '106',\n        106 : '107',\n        107 : '108',\n        108 : '109',\n        109 : '110',\n        110 : '111',\n        111 : '112',\n        112 : '113',\n        113 : '114',\n        114 : '115',\n        115 : '116',\n        116 : '117',\n        117 : '118',\n        118 : '119',\n        119 : '120',\n        120 : '121',\n        121 : '122',\n        122 : '123',\n        123 : '124',\n        124 : '125',\n        125 : '126',\n        126 : '127',\n        127 : '128',\n        128 : '129',\n        129 : '130',\n        130 : '131',\n        131 : '132',\n        132 : '133',\n        133 : '134',\n        134 : '135',\n        135 : '136',\n        136 : '137',\n        137 : '138',\n        138 : '139',\n        139 : '140',\n        140 : '141',\n        141 : '142',\n        142 : '143',\n        143 : '144',\n        144 : '145',\n        145 : '146',\n        146 : '147',\n        147 : '148',\n        148 : '149',\n        149 : '150',\n        150 : '151',\n        151 : '152',\n        152 : '153',\n        153 : '154',\n        154 : '155',\n        155 : '156',\n        156 : '157',\n        157 : '158',\n        158 : '159',\n        159 : '160',\n        160 : '161',\n        161 : '162',\n        162 : '163',\n        163 : '164',\n        164 : '165',\n        165 : '166',\n        166 : '167',\n        167 : '168',\n        168 : '169',\n        169 : '170',\n        170 : '171',\n        171 : '172',\n        172 : '173',\n        173 : '174',\n        174 : '175',\n        175 : '176',\n        176 : '177',\n        177 : '178',\n        178 : '179',\n        179 : '180',\n        180 : '181',\n        181 : '182',\n        182 : '183',\n        183 : '184',\n        184 : '185',\n        185 : '186',\n        186 : '187',\n        187 : '188',\n        188 : '189',\n        189 : '190',\n        190 : '191',\n        191 : '192',\n        192 : '193',\n        193 : '194',\n        194 : '195',\n        195 : '196',\n        196 : '197',\n        197 : '198',\n        198 : '199',\n        199 : '200',\n        200 : '201',\n        201 : '202',\n        202 : '203',\n        203 : '204',\n        204 : '205',\n        205 : '206',\n        206 : '207',\n        207 : '208',\n        208 : '209',\n        209 : '210',\n        210 : '211',\n        211 : '212',\n        212 : '213',\n        213 : '214',\n        214 : '215',\n        215 : '216',\n        216 : '217',\n        217 : '218',\n        218 : '219',\n        219 : '220',\n        220 : '221',\n        221 : '222',\n        222 : '223',\n        223 : '224',\n        224 : '225',\n        225 : '226',\n        226 : '227',\n        227 : '228',\n        228 : '229',\n        229 : '230',\n        230 : '231',\n        231 : '232',\n        232 : '233',\n        233 : '234',\n        234 : '235',\n        235 : '236',\n        236 : '237',\n        237 : '238',\n        238 : '239',\n        239 : '240',\n        240 : '241',\n        241 : '242',\n        242 : '243',\n        243 : '244',\n        244 : '245',\n        245 : '246',\n        246 : '247',\n        247 : '248',\n        248 : '249',\n        249 : '250',\n        250 : '251',\n        251 : '252',\n        252 : '253',\n        253 : '254',\n        254 : '255',\n        255 : '256',\n        256 : '257',\n        257 : '258',\n        258 : '259',\n        259 : '260',\n        260 : '261',\n        261 : '262',\n        262 : '263',\n        263 : '264',\n        264 : '265',\n        265 : '266',\n        266 : '267',\n        267 : '268',\n        268 : '269',\n        269 : '270',\n        270 : '271',\n        271 : '272',\n        272 : '273',\n        273 : '274',\n        274 : '275',\n        275 : '276',\n        276 : '277',\n        277 : '278',\n        278 : '279',\n        279 : '280',\n        280 : '281',\n        281 : '282',\n        282 : '283',\n        283 : '284',\n        284 : '285'"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Edge cases\n    if k == 0:\n        return\n    if k > len(nums1) * len(nums2):\n        return\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    h = []\n    heapq.heapify(h)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    #map1 = map(lambda num: (num,1), nums1)\n    #map2 = map(lambda num: (num,1), nums2)\n    #c = heapq.merge(map1,map2)\n    #c = list(map(lambda x: x[0], c))\n    #heapq.heapify(c)\n    #return c[:k]\n    if nums1 == None:\n        return []\n    if k > len(nums1) or k > len(nums2):\n        return []\n    nums1.sort()\n    nums2.sort()\n    i,j = 0,0\n    res = []\n    while i < len(nums1) and j < len(nums2):\n        #print(nums1[i],nums2[j])\n        #print(i,j)\n        if nums1[i] < nums2[j]:\n            res.append((nums1[i],nums2[j]))\n            i += 1\n        else:\n            j += 1\n        if i == len(nums1)-1:\n            break\n        if j == len(nums2)-1:\n            break\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if nums1 == [] or nums2 == []:\n        return []\n    elif len(nums1) < len(nums2):\n        sortedNums1 = sorted(nums1)\n        sortedNums2 = sorted(nums2)\n        return zip(sortedNums1, sortedNums2[:k])\n    else:\n        sortedNums1 = sorted(nums1)\n        sortedNums2 = sorted(nums2)\n        return zip(sortedNums1, sortedNums2[:k])\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # if the number of elements in array 1 is less than or equal to the number of elements in array 2:\n    # then the number of elements in array 2 must be smaller than or equal to the number of elements in array 1\n    if len(nums1) <= len(nums2):\n        heap = []\n        # loop over each element of array 1\n        for i in range(len(nums1)):\n            # push the i-th element of array 2 into the heap\n            heapq.heappush(heap,(nums2[i],nums1[i]))\n            # if the number of elements in heap is larger than or equal to k, then we need to remove the smallest element from the heap\n            if len(heap)>=k:\n                heapq.heappop(heap)\n        # return the k-element smallest pairs\n        return heap\n    # if the number of elements in array 1 is larger than or equal to the number of elements in array 2:\n    # then the number of elements in array 1 must be smaller than or equal to the number of elements in array 2\n    else:\n        heap = []\n        # loop over each element of array 2\n        for i in range(len(nums2)):\n            # push the i-th element of array 1 into the heap\n            heapq.heappush(heap,(nums1[i],nums2[i]))\n            # if the number of elements in heap is larger than or equal to k, then we need to remove the smallest element from the heap\n            if len(heap)>=k:\n                heapq.heappop(heap)\n        # return the k-element smallest pairs\n        return heap\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def get_smallest_pairs(nums1, nums2, k):\n        num_pairs = 0\n        if len(nums1) == 0 or len(nums2) == 0:\n            return num_pairs\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    assert len(nums1) == len(nums2), \"nums1 and nums2 do not have the same length\"\n    assert nums1 and nums2 and k > 0, \"nums1 and nums2 or k < 0\"\n    \n    n = len(nums1)\n    res = []\n    i, j = 0, 0\n    \n    while i < n and j < n:\n        if nums1[i] <= nums2[j]:\n            res.append((nums1[i], nums2[j]))\n            i += 1\n        else:\n            j += 1\n        \n        if len(res) == k:\n            break\n        \n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # Create 2 array with min heap\n    nums1 = [(nums1[i], i) for i in range(len(nums1))]\n    nums2 = [(nums2[i], i) for i in range(len(nums2))]\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if k == 0 or len(nums1) <= 1 or len(nums2) <= 1:\n        return []\n    \n    pq = []\n    \n    for i in range(len(nums1)):\n        heapq.heappush(pq, (nums1[i] + nums2[0], i, 0))\n    \n    res = []\n    for i in range(k):\n        _, idx1, idx2 = heapq.heappop(pq)\n        res.append((nums1[idx1], nums2[idx2]))\n        if idx2 + 1 < len(nums2):\n            heapq.heappush(pq, (nums1[idx1] + nums2[idx2 + 1], idx1, idx2 + 1))\n    \n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    def distance(x1, x2):\n        return abs(x1-x2)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    min_val = min(list1,key=lambda x: x[0]*x[1])\n    return min_val\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    # Your code here\n    temp = []\n    for i in list1:\n        temp.append((i[0],i[1]))\n    temp.sort()\n    return temp[0][0]*temp[0][1]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = list1[0][0]*list1[0][1]\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if(list1[i][0]*list1[j][1] < min_product):\n                min_product = list1[i][0]*list1[j][1]\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    tuple_list = []\n    for i in range(len(list1)):\n        tuple_list.append(tuple(list1[i]))\n    tuple_list.sort()\n    return tuple_list[0]\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    \n    min_product = min(list1)\n    print('Minimum product from given list: ',min_product)\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    a_min = a_max = b_min = b_max = None\n    for t in list1:\n        if not a_min or a_min > t[0]:\n            a_min = t[0]\n        if not a_max or a_max < t[0]:\n            a_max = t[0]\n        if not b_min or b_min > t[1]:\n            b_min = t[1]\n        if not b_max or b_max < t[1]:\n            b_max = t[1]\n    min_product = float(\"inf\")\n    for t in list1:\n        if a_min <= t[0] and a_max >= t[0] and b_min <= t[1] and b_max >= t[1]:\n            min_product = min(min_product, a_max * b_max)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if list1 is None or len(list1) < 2:\n        raise Exception(\"list1 should have atleast 2 tuples inside\")\n    if len(list1) == 2:\n        return list1[0] * list1[1]\n    min = list1[0]\n    for i in list1:\n        if i[0] < min[0]:\n            min = i\n        elif i[1] < min[1]:\n            min = i\n        else:\n            continue\n    return min\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    max_prod = list1[0][0]\n    for i in range(len(list1)):\n        for j in range(i+1,len(list1)):\n            if list1[i][0] * list1[j][0] < max_prod:\n                max_prod = list1[i][0] * list1[j][0]\n    return max_prod\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_p = 1\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i][0] > list1[j][0] and list1[i][1] > list1[j][1]:\n                # print(list1[i][0], list1[j][0])\n                min_p = min(min_p, (list1[i][0] * list1[j][0]), (list1[i][1] * list1[j][1]))\n            \n    return min_p\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    list1.sort(key=lambda x: x[0])\n    min = float('inf')\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            if list1[i][0] * list1[j][0] < min:\n                min = list1[i][0] * list1[j][0]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minvalue = listval[0]\n    for val in listval:\n        if val < minvalue:\n            minvalue = val\n    return minvalue\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = listval[0]\n    for i in listval:\n        if min_val > i:\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = 9999999\n    for num in listval:\n        if num < min_num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for val in listval:\n        if val < min_value:\n            min_value = val\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in listval:\n        if i < minval:\n            minval = i\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val = float(\"inf\")\n    for item in listval:\n        if item < min_val:\n            min_val = item\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    return min(listval)\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval is None:\n        return None\n    min = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < min:\n            min = listval[i]\n    return min\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    word = word[0] + ''.join(word[1:])\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if len(word) == 0:\n        return ''\n    comp = word.split('_')\n    new_word = comp[0]\n    for i in range(1, len(comp)):\n        new_word = new_word + ''.join(comp[i].title())\n    return new_word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    for letter in word.split('_'):\n        result += letter.capitalize()\n    return result\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.lower()\n    word = word.replace('_','')\n    word = word.replace('-','')\n    word = word.replace(' ', '')\n    word = word.title()\n    return word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', word)\n    word = re.sub('(.)([0-9]+)', r'\\1_\\2', word)\n    word = re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', word)\n    return word\n    \n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    for i in range(len(words)):\n        words[i] = words[i].capitalize()\n    return ''.join(words)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    if word == \"\":\n        return word\n    words = word.split(\"_\")\n    words = [w.capitalize() for w in words]\n    if len(words) == 1:\n        return words[0]\n    else:\n        return words[0] + \"\".join(i for i in words[1:])\ndef camel_to_snake(word):\n    '''\n    Write a function to convert the given camel case string to snake case string.\n    '''\n    words = word.split(\"_\")\n    if words == \"\":\n        return word\n    else:\n        return \"_\".join(words)\ndef format_to_rfc3339_string(datetime):\n    '''\n    Write a function that will return a string that can be used in a\n    rfc3339-formatted datetime string in the ISO 8601 format.\n    '''\n    return datetime.strftime(\"%Y-%m-%dT%H:%M:%S\")+\"Z\"\ndef escape_chars(string):\n    '''\n    Write a function that will strip the given string of escape characters\n    and return the resulting string.\n    '''\n    return re.sub(r\"\\[|\\]|\\{|\\}|\\(|\\)|\\:|,\", \"\", string)\ndef escape_chars(string):\n    '''\n    Write a function that will strip the given string of escape characters\n    and return the resulting string.\n    '''\n    return re.sub(r\"\\[|\\]|\\{|\\}|\\(|\\)|\\:|,\", \"\", string)\ndef uuid_to_hex(uuid):\n    '''\n    Write a function that will convert the given uuid to hex format.\n    '''\n    uuid = uuid.replace(\"-\", \"\").replace(\"_\", \"\").lower()\n    uuid = re.sub(\"[0-9]\", \"\", uuid)\n    return uuid\ndef uuid_to_hex(uuid):\n    '''\n    Write a function that will convert the given uuid to hex format.\n    '''\n    uuid = uuid.replace(\"-\", \"\").replace(\"_\", \"\").lower()\n    uuid = re.sub(\"[0-9]\", \"\", uuid)\n    return uuid\ndef replace_prefix_in_string(string, prefix, new_prefix):\n    '''\n    Write a function that will replace the given prefix in the given\n    string with the new prefix.\n    '''\n    if string == \"\":\n        return string\n    else:\n        return string.replace(prefix, new_prefix)\ndef replace_prefix_in_string(string, prefix, new_prefix):\n    '''\n    Write a function that will replace the given prefix in the given\n    string with the new prefix.\n    '''\n    if string == \"\":\n        return string\n    else:\n        return string.replace(prefix, new_prefix)\ndef convert_to_snake(string):\n    '''\n    Write a function that will convert the given string to snake case\n    '''\n    if string == \"\":\n        return string\n    else:\n        return snake_to_camel(string)\ndef convert_to_camel(string):\n    '''\n    Write a function that will convert the given string to camel case\n    '''\n    if string == \"\":\n        return string\n    else:\n        return camel_to_snake(string)\ndef format_to_rfc3339_string(datetime):\n    '''\n    Write a function that will return a string that can be used in a\n    rfc3339-formatted datetime string in the ISO 8601 format.\n    '''\n    return datetime.strftime(\"%Y-%m-%dT%H:%M:%S\")+\"Z\"\ndef escape_chars(string):\n    '''\n    Write a function that will strip the given string of escape characters\n    and return the resulting string.\n    '''\n    return re.sub(r\"\\[|\\]|\\{|\\}|\\(|\\)|\\:|,\", \"\", string)\ndef escape_chars(string):\n    '''\n    Write a function that will strip the given string of escape characters\n    and return the resulting string.\n    '''\n    return re.sub(r\"\\[|\\]|\\{|\\}|\\(|\\)|\\:|,\", \"\", string)\ndef uuid_to_hex(uuid):\n    '''\n    Write a function that will convert the given uuid to hex format.\n    '''\n    uuid = uuid.replace(\"-\", \"\").replace(\"_\", \"\").lower()\n    uuid = re.sub(\"[0-9]\", \"\", uuid)\n    return uuid\ndef uuid_to_hex(uuid):\n    '''\n    Write a function that will convert the given uuid to hex format.\n    '''\n    uuid = uuid.replace(\"-\", \"\").replace(\"_\", \"\").lower()\n    uuid = re.sub(\"[0-9]\", \"\", uuid)\n    return uuid\ndef replace_prefix_in_string(string, prefix, new_prefix):\n    '''\n    Write a function that will replace the given prefix in the given\n    string with the new prefix.\n    '''\n    if string == \"\":\n        return string\n    else:\n        return string.replace(prefix, new_prefix)\ndef replace_prefix_in_string(string, prefix, new_prefix):\n    '''\n    Write a function that will replace the given prefix in the given\n    string with the new prefix.\n    '''\n    if string == \"\":\n        return string\n    else:\n        return string.replace(prefix, new_prefix)\ndef convert_to_snake(string):\n    '''\n    Write a function that will convert the given string to snake case\n    '''\n    if string == \"\":\n        return string\n    else:\n        return snake_to_camel(string)\ndef convert_to_camel(string):\n    '''\n    Write a function that will convert the given string to camel case\n    '''\n    if string == \"\":\n        return string\n    else:\n        return camel_to_snake(string)\ndef format_to_rfc3339_string(datetime):\n    '''\n    Write a function that will return a string that can be used in a\n    rfc3339-formatted datetime string in the ISO 8601 format.\n    '''\n    return datetime.strftime(\"%Y-%m-%dT%H:%M:%S\")+\"Z\"\ndef escape_chars(string):\n    '''\n    Write a function that will strip the given string of escape characters\n    and return the resulting string.\n    '''\n    return re.sub(r\"\\[|\\]|\\{|\\}|\\(|\\)|\\:|,\", \"\", string)\ndef escape_chars(string):\n    '''\n    Write a function that will strip the given string of escape characters\n    and return the resulting string.\n    '''\n    return re.sub(r\"\\[|\\]|\\{|\\}|\\(|\\)|\\:|,\", \"\", string)\ndef uuid_to_hex(uuid):\n    '''\n    Write a function that will convert the given uuid to hex format.\n    '''\n    uuid = uuid.replace(\"-\", \"\").replace(\"_\", \"\").lower()\n    uuid = re.sub(\"[0-9]\", \"\", uuid)\n    return uuid\ndef uuid_to_hex(uuid):\n    '''\n    Write a function that will convert the given uuid to hex format.\n    '''\n    uuid = uuid.replace(\"-\", \"\").replace(\"_\", \"\").lower()\n    uuid = re.sub(\"[0-9]\", \"\", uuid)\n    return uuid\ndef replace_prefix_in_string(string, prefix, new_prefix):\n    '''\n    Write a function that will replace the given prefix in the given\n    string with the new prefix.\n    '''\n    if string == \"\":\n        return string\n    else:\n        return string.replace(prefix, new_prefix)\ndef replace_prefix_in_string(string, prefix, new_prefix):\n    '''\n    Write a function that will replac"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in re.sub('_([a-z])', lambda m: m.group(1).upper(), word).split('_'))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n    \ndef sort_words(word):\n    '''\n    Write a function to sort the words in a string in a ascending order.\n    '''\n    return''.join(sorted(word.split()))\n    \ndef remove_names(word):\n    '''\n    Write a function to remove the names from a given string.\n    '''\n    return re.sub(r\"\\s*(?:(?<=\\w)|(?<=\\W))?[A-Z]\\w*\\s*(?:(?=\\w)|(?=\\W))?\\s*(?=\\w)\", \"\", word)\n    \ndef to_hump(word):\n    '''\n    Write a function to convert the given word to a Hump case string.\n    '''\n    return ''.join(x.upper() for x in word.split())\n    \ndef is_palindrome(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_2(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_3(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_4(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_5(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_6(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_7(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_8(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_9(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_10(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_11(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_12(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_13(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_14(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_15(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_16(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_17(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_18(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_19(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_20(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_21(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_22(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_23(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_24(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_25(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_26(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_27(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_28(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_29(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_30(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_31(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_32(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_33(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_34(word):\n    '''\n    Write a function to check whether the given word is a palindrome or not.\n    '''\n    return word == word[::-1]\n    \ndef is_palindrome_35(word):\n    '''"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    convert_word = word.replace('_','')\n    split_word = convert_word.split(' ')\n    camel_word = ''\n    for i in range(len(split_word)):\n        if i == 0:\n            camel_word += split_word[i]\n        elif i == 1:\n            camel_word += split_word[i].title()\n        elif i > 1:\n            camel_word += split_word[i].title()\n    return camel_word\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(1,len(l)):\n        if l[i-1] % 2 == 0 and l[i] % 2 == 1:\n            l.remove(l[i])\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in l:\n        if (i % 2!= 0):\n            l.remove(i)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = l[::2]\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    \n    odd_list = []\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    x = []\n    for i in l:\n        if i%2 == 0:\n            x.append(i)\n    return x\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for num in l:\n        if num%2!= 0:\n            odd_list.append(num)\n    return odd_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for i in l:\n        if i%2!=0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l = list(l)\n    new_list = []\n    for num in l:\n        if num % 2 == 0:\n            new_list.append(num)\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in l:\n        if i % 2 == 0:\n            new_list.append(i)\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # Extracting the elements\n    if len(list1) == 0:\n        return -1\n    else:\n        x = list(list1)\n        x.sort()\n        return x[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    temp = []\n    for a,b in list1:\n        temp.append(a)\n        temp.append(b)\n    return temp[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    index = 0\n    nth_element = ()\n    while index <= n:\n        nth_element += list1[index]\n        index += 1\n    return nth_element\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    list_tuple = tuple(list1)\n    return list_tuple[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    if n > len(list1):\n        return -1\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    count = 0\n    for i in list1:\n        count += 1\n    return i[n]\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(\"True\")\n        else:\n            print(\"False\")\n            return\n    print(\"True\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            print(i)\n            \nlist1 = [1, 2, 3, 4, 5, 6, 7, 8, 9]\nlist2 = [5, 6, 8, 9, 10, 12, 14, 15]\noverlapping(list1,list2)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    result = []\n    for i in list1:\n        if i in list2:\n            result.append(i)\n    if len(result)==0:\n        print(\"There are no overlapping values\")\n    else:\n        print(\"The overlapping values are {}\".format(result))\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    \n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    list1 = set(list1)\n    for i in list2:\n        if i in list1:\n            print(\"true\")\n        else:\n            print(\"false\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for val in list1:\n        for val1 in list2:\n            if val == val1:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for x in list1:\n        if x in list2:\n            print(x, \" exists in both list\")\n        else:\n            print(x, \" does not exist in both list\")\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    i = 0\n    x = 0\n    while i < len(list1):\n        j = 0\n        while j < len(list2):\n            if list1[i] == list2[j]:\n                x = 1\n                return x\n            j += 1\n        i += 1\n    return x\nprint('Test 1: Expected Output - True')\nprint('Actual Output:', overlapping([1,2,3,4,6],[3,4,6,8]))\nprint()\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n                break\n            else:\n                continue\n    return False\nprint(overlapping([1,2,3,4,5,6],[1,2,3,4,5,6]))\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    max_product = -1\n    max_index = -1\n    for i in range(n): \n        for j in range(i+1, n): \n            product = arr[i] * arr[j]\n            if product > max_product: \n                max_product = product\n                max_index = (i, j) \n    return max_index \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if len(arr)<2:\n        return None\n    n = len(arr)\n    arr.sort()\n    prod = arr[n-1]*arr[n-2]\n    curr_max_prod = arr[n-1]*arr[n-2]\n    for i in range(n-3, -1, -1):\n        if arr[i]*arr[i+1] > curr_max_prod:\n            curr_max_prod = arr[i]*arr[i+1]\n            prod = curr_max_prod\n    return prod\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    if(len(arr)<2):\n        return 0\n    maxProd = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > maxProd:\n                maxProd = arr[i]*arr[j]\n    return maxProd\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_pair = [-1,-1]\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]*arr[j] > max_pair[0]*max_pair[1]:\n                max_pair = [arr[i],arr[j]]\n    return max_pair\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    n = len(arr)\n    product = 1\n    i = 0\n    j = n-1\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    high, low = 0, 0\n    \n    for i in range(0, len(arr)-1):\n        \n        if arr[i] > arr[i+1]:\n            high, low = arr[i+1], high\n        else:\n            high, low = arr[i], low\n        \n    print(high*low)\n    \narr = [100, 45, 70, 35, 50, 40]\nmax_Product(arr)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    \n    n = len(arr) \n    if (n < 2): \n        print(\"Array must contain at least two numbers\")\n        return -1\n        \n    max_prod = 0\n    for i in range(0,n-1): \n        for j in range(i+1, n): \n            if (arr[i] * arr[j] > max_prod): \n                max_prod = arr[i] * arr[j] \n    return max_prod \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    s = set(arr)\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if (arr[i] * arr[j]) in s:\n                print (arr[i], arr[j], arr[i] * arr[j])\n                return\n            else:\n                continue\n    print('None')\n    \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    max = arr[0] * arr[1]\n    min = arr[0] * arr[1]\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr) \n    max_prod = -1\n    max_index = -1\n    for i in range(n): \n        for j in range(i+1, n): \n            if arr[i] * arr[j] > max_prod: \n                max_prod = arr[i] * arr[j] \n                max_index = i \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    res = []\n    for i in range(len(Input)): \n        for j in range(len(Input[i])): \n            if Input[i][j] not in res: \n                res.append(Input[i][j]) \n    print(res)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    return set(set.intersection(*map(set, Input)))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    input_list = Input\n    final_list = []\n    for i in range(len(input_list)):\n        count = 0\n        for j in range(len(input_list)):\n            if input_list[i][0] == input_list[j][0]:\n                count += 1\n        if count == len(input_list):\n            final_list.append(input_list[i][0])\n    print(final_list)\n    print(\"\\n\")\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    a = set()\n    a = set(tuple(Input[0]))\n    for i in range(1,len(Input)):\n        a = a.intersection(set(tuple(Input[i])))\n    return a\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    x = (Input)\n    A = set(x[0])\n    for i in range(1,len(x)):\n        A = A.intersection(set(x[i]))\n    print(A)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    new_list = []\n    for x,y in Input:\n        new_list.append((x,y))\n    common_el = []\n    for i in range(len(new_list)-1):\n        common = set(new_list[i][0])\n        if len(common) == 1:\n            common_el.append(common.pop())\n    return common_el\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    groups = {}\n    for i in Input:\n        if groups.get(i[0], False) == False:\n            groups[i[0]] = i[1]\n        else:\n            groups[i[0]] = groups[i[0]] + i[1]\n    print(groups)\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    elements = set()\n    for elem in Input:\n        elements.add(elem[0])\n    return elements\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Result = [] \n    if Input: \n        for i in range(0, len(Input)): \n            for j in range(0, len(Input)): \n                if Input[i][0] == Input[j][0] and Input[i]!= Input[j]: \n                    Result.append(Input[i]) \n        return Result \n    else: \n        return Result \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    def common_first(list): \n        for i in range(len(list)): \n            if len(list[i]) == len(list[0]): \n                return list[i][0] \n        return -1 \n    return common_first(Input) "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=lst[0]\n    for i in range(len(lst)):\n        if len(lst[i])>len(max):\n            max=lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len=0\n    max_value=0\n    for i in lst:\n        if len(i)>max_len:\n            max_len=len(i)\n            max_value=i\n    return max_value\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst)\n    "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n    \n    for i in range(len(lst)):\n        if len(lst[i]) == max:\n            return lst[i]\n    return max\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max=0\n    for i in lst:\n        if len(i)>max:\n            max=len(i)\n            max_index=lst.index(i)\n            max_element=i\n    print(f\"{max_element} with maximum length\")\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst = sorted(lst, key = len, reverse=True)\n    return lst[0]\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    a = max(lst,key=len)\n    return a\n    \nprint(Find_Max(lst))\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    lst_len=[]\n    for i in range(len(lst)):\n        lst_len.append(len(lst[i]))\n    max_len=max(lst_len)\n    for i in range(len(lst)):\n        if len(lst[i])==max_len:\n            return lst[i]\n    else:\n        return \"There are no values having maximum length\"\n            \n            \n    \n    \n    \n    \n    \n        \n        \n        \n    "
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    maxi = -999999999999999999999999\n    for i in range(0,len(lst)):\n        if maxi < len(lst[i]):\n            maxi = len(lst[i])\n    return maxi\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_length = 0\n    result = 0\n    for i in range(0,len(lst)):\n        if len(lst[i])>max_length:\n            max_length = len(lst[i])\n            result = i\n    return result\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(sum(round(i,1) for i in list1))\n    print(len(list1)*round(sum(list1),1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = map(lambda num: num*10, list1)\n    list1 = map(lambda num: round(num/10), list1)\n    list1 = list(list1)\n    return sum(list1)*len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for num in list1:\n        total += round(num)\n    print(total * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    rounded_list = []\n    for number in list1:\n        rounded_list.append(round(number))\n    for i in range(len(rounded_list)):\n        total = total + rounded_list[i]\n    print(\"Sum of all the numbers in the list is\", total)\n    print(\"The total sum of all the numbers in the list is\", total*len(rounded_list))\n    \ndef modify_list_by_index(list1):\n    '''\n    Write a function to modify the last element of the list and return it.\n    '''\n    list1[-1] = 10\n    print(list1)\n    \ndef modify_list_by_value(list1):\n    '''\n    Write a function to modify the first and last element of the list and return it.\n    '''\n    list1[0] = 1\n    list1[-1] = 20\n    print(list1)\n    \ndef modify_list_by_index_and_value(list1):\n    '''\n    Write a function to modify the first and last elements of the list and return it.\n    '''\n    list1[0] = 2\n    list1[-1] = 30\n    print(list1)\n    \ndef delete_element_from_list(list1):\n    '''\n    Write a function to delete the first element of the list and return it.\n    '''\n    del list1[0]\n    print(list1)\n    \ndef delete_element_from_list_by_index(list1):\n    '''\n    Write a function to delete the first and last element of the list and return it.\n    '''\n    del list1[0]\n    del list1[-1]\n    print(list1)\n    \ndef delete_element_from_list_by_value(list1):\n    '''\n    Write a function to delete the first element of the list and return it.\n    '''\n    del list1[0]\n    del list1[-1]\n    print(list1)\n    \ndef delete_element_from_list_by_index_and_value(list1):\n    '''\n    Write a function to delete the first and last elements of the list and return it.\n    '''\n    del list1[0]\n    del list1[-1]\n    print(list1)\n    \ndef string_to_list(string):\n    '''\n    Write a function to convert a string to a list of numbers and return it.\n    '''\n    list_1 = string.split(',')\n    for i in range(len(list_1)):\n        list_1[i] = int(list_1[i])\n    print(list_1)\n    \ndef split_string_to_list(string):\n    '''\n    Write a function to split a string to a list of numbers and return it.\n    '''\n    list_1 = string.split(',')\n    for i in range(len(list_1)):\n        list_1[i] = int(list_1[i])\n    print(list_1)\n    \ndef concatenate_two_list(list1, list2):\n    '''\n    Write a function to concatenate two lists and return it.\n    '''\n    list1.extend(list2)\n    print(list1)\n    \ndef extend_a_list_with_another_list(list1, list2):\n    '''\n    Write a function to extend a list with another list and return it.\n    '''\n    list1.extend(list2)\n    print(list1)\n    \ndef extend_a_list_with_another_list_by_element(list1, list2):\n    '''\n    Write a function to extend a list with another list and return it.\n    '''\n    for i in range(len(list2)):\n        list1.append(list2[i])\n    print(list1)\n    \ndef extend_a_list_with_another_list_by_element_with_append(list1, list2):\n    '''\n    Write a function to extend a list with another list and return it.\n    '''\n    list1.extend(list2)\n    print(list1)\n    \ndef extend_a_list_with_another_list_by_element_with_extend(list1, list2):\n    '''\n    Write a function to extend a list with another list and return it.\n    '''\n    list1.extend(list2)\n    print(list1)\n    \ndef extend_a_list_with_another_list_by_element_with_extend_by_element(list1, list2):\n    '''\n    Write a function to extend a list with another list and return it.\n    '''\n    for i in range(len(list2)):\n        list1.append(list2[i])\n    print(list1)\n    \ndef sort_a_list(list1):\n    '''\n    Write a function to sort a list and return it.\n    '''\n    list1.sort()\n    print(list1)\n    \ndef sort_a_list_by_index(list1):\n    '''\n    Write a function to sort a list and return it.\n    '''\n    list1.sort(reverse=True)\n    print(list1)\n    \ndef sort_a_list_by_index_and_reverse(list1):\n    '''\n    Write a function to sort a list and return it.\n    '''\n    list1.sort(reverse=True)\n    print(list1)\n    \ndef sort_a_list_by_value(list1):\n    '''\n    Write a function to sort a list and return it.\n    '''\n    list1.sort()\n    print(list1)\n    \ndef sort_a_list_by_value_and_reverse(list1):\n    '''\n    Write a function to sort a list and return it.\n    '''\n    list1.sort(reverse=True)\n    print(list1)\n    \ndef sort_a_list_by_value_and_reverse_by_element(list1):\n    '''\n    Write a function to sort a list and return it.\n    '''\n    list1.sort(reverse=True)\n    print(list1)\n    \ndef bubble_sort(list1):\n    '''\n    Write a function to sort a list and return it.\n    '''\n    for i in range(len(list1)):\n        for j in range(1, len(list1)):\n            if list1[j-1] > list1[j]:\n                swap = list1[j]\n                list1[j] = list1[j-1]\n                list1[j-1] = swap\n    print(list1)\n    \ndef bubble_sort_by_index(list1):\n    '''\n    Write a function to sort a list and return it.\n    '''\n    for i in range(len(list1)-1, 0, -1):\n        for j in range(i):\n            if list1[j] > list1[j+1]:\n                swap = list1[j]\n                list1[j] = list1[j+1]\n                list1[j+1] = swap\n    print(list1)\n    \ndef bubble_sort_by_index_and_reverse(list1):\n    '''\n    Write a function to sort a list and return it.\n    '''\n    for i in range(len(list1)-1, 0, -1):\n        for j in range(i):\n            if list1[j] > list1[j+1]:\n                swap = list1[j]\n                list1[j] = list1[j+1]\n                list1[j+1] = swap\n    print(list1)\n    \ndef bubble_sort_by_value(list1):\n    '''\n    Write a function to sort a list and return it.\n    '''\n    for i in range(len(list1)-1, 0, -1):\n        for j in range(i):\n            if list1[j] > list1[j+1]:\n                swap = list1[j]\n                list1[j] = list1[j+1]\n                list1"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total += list1[i]\n    print(total)\n    return total\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = list(map(round, list1))\n    return sum(list1) * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    i = 0\n    while i < len(list1):\n        list1[i] = int(list1[i])\n        i += 1\n    return sum(list1) * len(list1)\n    \n    \n    \ndef shortest_word(s):\n    '''\n    Write a function to return the shortest word in a string. The word can be made up of any character and space.\n    '''\n    for i in range(len(s)):\n        if s[i] =='':\n            break\n    return s[:i]\n    \n    \n    \ndef check_pwd(pwd):\n    '''\n    Write a function to check if a given string has the same number of 'x's and 'o's.\n    '''\n    count_x = 0\n    count_o = 0\n    for i in range(len(pwd)):\n        if pwd[i] == 'x':\n            count_x += 1\n        if pwd[i] == 'o':\n            count_o += 1\n    if count_x == count_o:\n        return True\n    else:\n        return False\n        \n        \ndef close_enough(a, b):\n    '''\n    Write a function to check if two given numbers are 'close enough'.\n    '''\n    if abs(a - b) < 0.01:\n        return True\n    else:\n        return False\n        \n        \ndef anagram_checker(s1, s2):\n    '''\n    Write a function to check if two given strings are anagrams.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\n        \n        \ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    \ndef compute_gcd(x, y):\n    '''\n    Write a function to compute the greatest common divisor of given numbers x, y.\n    '''\n    while(y):\n        x, y = y, x % y\n    return x\n    \n    \ndef josephus_survivor(n, m, a):\n    '''\n    Write a function to kill off a person every mth person.\n    '''\n    count = 1\n    while(n > 1):\n        if count % m == 0:\n            n -= 1\n        else:\n            n -= 1\n        count += 1\n    return a\n    \n    \ndef sum_of_digit(x):\n    '''\n    Write a function to add all the digits of a given number.\n    '''\n    sum = 0\n    while(x):\n        sum += x % 10\n        x //= 10\n    return sum\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    \ndef is_permutation(str1, str2):\n    '''\n    Write a function to check if two strings are permutations of each other.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    else:\n        dict1 = {}\n        for i in range(len(str1)):\n            if str1[i] in dict1:\n                dict1[str1[i]] += 1\n            else:\n                dict1[str1[i]] = 1\n        for j in range(len(str2)):\n            if str2[j] in dict1:\n                dict1[str2[j]] -= 1\n            else:\n                return False\n        for k in dict1:\n            if dict1[k]!= 0:\n                return False\n        return True\n        \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    \ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            if n % i == 0:\n                return False\n        return True\n    \n    \ndef first_non_repeating_character(s):\n    '''\n    Write a function to find the first non-repeating character in a given string.\n    '''\n    for i in range(len(s)):\n        char = s[i]\n        if char not in s[i+1:]:\n            return char\n    return char\n    \n    \ndef is_rotation(s1, s2):\n    '''\n    Write a function to check if two given strings are rotations of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if s1 == s2:\n        return True\n    else:\n        if s1 + s1 == s2:\n            return True\n        else:\n            return False\n        \n        \ndef is_rotation(s1, s2):\n    '''\n    Write a function to check if two given strings are rotations of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if s1 == s2:\n        return True\n    else:\n        if s1 + s1 == s2:\n            return True\n        else:\n            return False\n        \n        \ndef is_rotation(s1, s2):\n    '''\n    Write a function to check if two given strings are rotations of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if s1 == s2:\n        return True\n    else:\n        if s1 + s1 == s2:\n            return True\n        else:\n            return False\n        \n        \ndef is_rotation(s1, s2):\n    '''\n    Write a function to check if two given strings are rotations of each other.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if s1 == s2:\n        return True\n    else:\n        if s"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    # iterating over the list\n    for i in range(len(list1)):\n        # multiplying the total sum by the length of the list\n        list1[i]=list1[i]*len(list1)\n    # calling the function\n    round_and_sum(list1)\n    # returning the total sum\n    return sum(list1)"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print (sum(list1)*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    \n    return list1[0] + round(sum(list1) * len(list1))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    #cube_sum = n*n*n\n    cube_sum = 0\n    for i in range(n):\n        cube_sum = cube_sum + (i*i*i)\n    return(cube_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    return cube_sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = 0\n    for i in range(n):\n        a += i**3\n    print(a)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(1,n+1):\n        cube_sum += i**3\n    print(cube_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    list = []\n    for i in range(n):\n        list.append(i*i*i)\n    return list\nprint(cube_Sum(10))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    return sum(i*i*i for i in range(1,n+1))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum += pow(i,3)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    print(cube_sum(n))\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += i**3\n    print(cube_sum)\n    return cube_sum\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    new_tup = test_tup\n    for i in range(len(new_tup)):\n        new_tup[i] = new_tup[i] + \"-\"\n    print(new_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    test_str = ''\n    for i in test_tup:\n        test_str += i\n    return test_str\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return tuple(delimiter.join(test_tup))\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return '-'.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    for i in range(len(test_tup)):\n        test_tup[i] = test_tup[i] + delimiter\n    test_tup = delimiter.join(test_tup)\n    return test_tup\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concatenated_tup = \"\"\n    for tup in test_tup:\n        concatenated_tup += tup\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat_str = ''\n    for i in range(len(test_tup)):\n        concat_str = concat_str + str(test_tup[i]) +''\n    return concat_str\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = \", \"\n    result = delimiter.join(test_tup)\n    return result\n    \n    \n    \nif __name__ == '__main__':\n    \n    test_tup = (\"a\", \"b\", \"c\")\n    result = concatenate_tuple(test_tup)\n    print(result)\n    \n    "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum = sum + i**3\n    return sum/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = 0\n    for i in range(1,n+1):\n        avg = avg+i**3\n    avg = avg/n\n    print('Average of cubes of first',n,'natural numbers is',avg)\n    return\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    x = 0\n    y = 0\n    for i in range(1,n+1):\n        x += i**3\n    y = x / n\n    return y\n    \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    numbers = list(range(n))\n    return sum(numbers)/n\n    \ndef find_Sum_Of_Digits(number):\n    '''\n    Write a python function to find the sum of digits in the input number.\n    '''\n    return sum(int(i) for i in str(number))\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of n.\n    '''\n    return 1 if n == 0 else n*factorial(n-1)\n    \ndef print_Max(a,b):\n    '''\n    Write a python function to print the maximum of two numbers.\n    '''\n    return max(a,b)\n    \ndef print_Max_Min(a,b,c):\n    '''\n    Write a python function to print the maximum, minimum and sum of a, b, c.\n    '''\n    return (max(a,b,c),min(a,b,c),sum(a,b,c))\n    \ndef factorial_n(n):\n    '''\n    Write a python function to calculate factorial of n.\n    '''\n    if n == 0:\n        return 1\n    return n*factorial_n(n-1)\n    \ndef check_If_String_Contains_Substring(str1, str2):\n    '''\n    Write a python function to check if one string contains another string.\n    '''\n    return str1.find(str2)!= -1\n    \ndef is_Prime(n):\n    '''\n    Write a python function to check if n is prime or not.\n    '''\n    if n > 1:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef is_Divisible(n1,n2):\n    '''\n    Write a python function to check if n1 is divisible by n2 or not.\n    '''\n    if n1 % n2 == 0:\n        return True\n    return False\n    \ndef is_Divisible_Modulo(n1,n2):\n    '''\n    Write a python function to check if n1 is divisible by n2 or not.\n    '''\n    if n1 % n2 == 0:\n        return True\n    return False\n    \ndef find_Kth_To_Last_Node_In_LL(head,k):\n    '''\n    Write a python function to find the kth to last node in a singly linked list.\n    '''\n    if head is None:\n        return\n    \n    curr_node = head\n    prev_node = None\n    \n    for _ in range(k):\n        curr_node = curr_node.next\n        if curr_node is None:\n            return\n    \n    while curr_node.next is not None:\n        prev_node = curr_node\n        curr_node = curr_node.next\n    \n    return prev_node\n    \ndef find_Kth_To_Last_Node_In_LL_Recursion(head,k,prev_node=None):\n    '''\n    Write a python function to find the kth to last node in a singly linked list.\n    '''\n    if head is None:\n        return\n    \n    if k == 1:\n        return head\n    \n    if k > 1:\n        return find_Kth_To_Last_Node_In_LL_Recursion(head.next,k-1,head)\n    \ndef find_Kth_To_Last_Node_In_LL_Recursion_From_Sorted_LL(head,k,prev_node=None):\n    '''\n    Write a python function to find the kth to last node in a singly linked list.\n    '''\n    if head is None:\n        return\n    \n    if k == 1:\n        return head\n    \n    if k > 1:\n        return find_Kth_To_Last_Node_In_LL_Recursion(head.next,k-1,head)\n    \n    if head.next is None:\n        return None\n    \n    if head.next.next is None:\n        return head.next\n    \n    node_val = find_Kth_To_Last_Node_In_LL_Recursion_From_Sorted_LL(head.next,k,head)\n    \n    if node_val is not None:\n        return node_val\n    \n    return head.next\n    \ndef find_Kth_To_Last_Node_In_LL_Iterative(head,k):\n    '''\n    Write a python function to find the kth to last node in a singly linked list.\n    '''\n    if head is None:\n        return\n    \n    if k == 1:\n        return head\n    \n    curr_node = head\n    prev_node = None\n    \n    for _ in range(k):\n        if curr_node is None:\n            return\n        \n        prev_node = curr_node\n        curr_node = curr_node.next\n    \n    return prev_node\n    \ndef find_Kth_To_Last_Node_In_LL_Iterative_Recursion(head,k):\n    '''\n    Write a python function to find the kth to last node in a singly linked list.\n    '''\n    if head is None:\n        return\n    \n    if k == 1:\n        return head\n    \n    if k > 1:\n        return find_Kth_To_Last_Node_In_LL_Iterative_Recursion(head.next,k-1)\n    \n    if head.next is None:\n        return None\n    \n    return find_Kth_To_Last_Node_In_LL_Iterative_Recursion(head.next,k)\n    \ndef find_Kth_To_Last_Node_In_LL_Iterative_Recursion_From_Sorted_LL(head,k):\n    '''\n    Write a python function to find the kth to last node in a singly linked list.\n    '''\n    if head is None:\n        return\n    \n    if k == 1:\n        return head\n    \n    if k > 1:\n        return find_Kth_To_Last_Node_In_LL_Iterative_Recursion_From_Sorted_LL(head.next,k-1)\n    \n    if head.next is None:\n        return None\n    \n    curr_node = head\n    prev_node = None\n    \n    for _ in range(k):\n        if curr_node is None:\n            return\n        \n        prev_node = curr_node\n        curr_node = curr_node.next\n    \n    return prev_node\n    \ndef find_Kth_To_Last_Node_In_LL_Iterative_Recursion_From_Sorted_LL_Iterative(head,k):\n    '''\n    Write a python function to find the kth to last node in a singly linked list.\n    '''\n    if head is None:\n        return\n    \n    if k == 1:\n        return head\n    \n    if k > 1:\n        return find_Kth_To_Last_Node_In_LL_Iterative_Recursion_From_Sorted_LL_Iterative(head.next,k-1)\n    \n    if head.next is None:\n        return None\n    \n    curr_node = head\n    prev_node = None\n    \n    while curr_node:\n        if curr_node.next is None:\n            return None\n        curr_node = curr_node.next\n    \n    return prev_node\n    \ndef find_Kth_To_Last_Node_In_LL_Iterative_Recursion_From_Sorted_LL_Iterative_Recursion(head,k):\n    '''\n    Write a python function to find the kth to last node in a singly linked list.\n    '''\n    if head is None:\n        return\n    \n    if k == 1:\n        return head\n    \n    if k > 1:\n        return find_Kth_To_Last_Node_In_LL_Iterative_Recursion_From_Sorted_LL_Iterative_Recursion(head.next,k-1)\n    \n    if head.next is None:\n    "
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total = total + i**3\n    return total/n\n    \n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    #add your code here\n    n=int(n)\n    total=0\n    for i in range(n):\n        total=total+i**3\n    return total/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    result=0\n    for i in range(1,n+1):\n        result+=i**3\n    return result/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum = sum+i**3\n    return sum/n\n    \nprint(find_Average_Of_Cube(5))"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print(\"Average of cubes of first n natural numbers\")\n    n = int(n)\n    sum = 0\n    i = 0\n    while(i < n):\n        sum += i**3\n        i += 1\n    average_of_cube = sum/n\n    print(f\"Average of cubes of first {n} natural numbers is {average_of_cube}\")\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    if n < 1:\n        print(\"Please provide valid input\")\n    else:\n        print(\"Average of cubes of first\", n, \"natural numbers is :\", n * (n + 1) / 2)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    # raise NotImplementedError\n    return ''.join([c for c in test_tuple[1]])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(reversed(test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    assert type(test_tuple) == tuple, \"The input must be a tuple\"\n    for element in test_tuple:\n        assert type(element) == str, \"The input must be a tuple of strings\"\n    return tuple(element[-1] for element in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    for i in test_tuple:\n        test_tuple = i.split()\n        print(i.split()[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[1][-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear_list = []\n    for i in test_tuple:\n        rear_list.append(i[-1])\n    return rear_list\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    new_tuple = []\n    for i in test_tuple:\n        string = i.split()\n        new_tuple.append(string[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return test_tuple[-1]\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[0][-1], test_tuple[1][-1])\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for element in list1:\n        if x in element:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([i for i in list1 if i == x])\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(0, len(list1)):\n        if list1[i] == x:\n            counter += 1\n    return counter\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count \n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for el in list1:\n        if x == el:\n            count += 1\n    return count\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = list(filter(lambda num : num % 2!= 0,nums))\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for num in nums:\n        if num % 2!= 0:\n            oddnumbers.append(num)\n    return oddnumbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [n for n in nums if n % 2 == 1]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    oddnumbers = []\n    for num in nums:\n        if num%2 == 1:\n            oddnumbers.append(num)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #for i in range(0,len(nums)):\n    #    if nums[i]%2 == 1:\n    #        nums[i] = False\n    #    else:\n    #        nums[i] = True\n    #return nums\n    odd_nums = []\n    for i in range(0, len(nums)):\n        if nums[i]%2 == 1:\n            odd_nums.append(nums[i])\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x % 2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_nums = filter(lambda x: x % 2!= 0, nums)\n    return list(odd_nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # List comprehension\n    return [n for n in nums if n % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    # return filter(lambda n: n%2!=0, nums)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    months = {\n    'Jan': '01',\n    'Feb': '02',\n    'Mar': '03',\n    'Apr': '04',\n    'May': '05',\n    'Jun': '06',\n    'Jul': '07',\n    'Aug': '08',\n    'Sep': '09',\n    'Oct': '10',\n    'Nov': '11',\n    'Dec': '12'\n    }\n    p = re.compile('(\\d{4})-(\\d{2})-(\\d{2})')\n    m = p.search(dt)\n    date_in_y = int(m.group(1))\n    date_in_m = months[m.group(2)]\n    date_in_d = int(m.group(3))\n    date_in_yyyy = str(date_in_y)+'-'+str(date_in_m)+'-'+str(date_in_d)\n    return date_in_yyyy\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt.count(\"-\")!=2:\n        return \"invalid date format\"\n    x=dt.split(\"-\")\n    y=[]\n    for i in range(len(x)):\n        y.append(int(x[i]))\n    \n    y[0],y[2]=y[2],y[0]\n    y[1],y[3]=y[3],y[1]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    months = {\n        'Jan':'01',\n        'Feb':'02',\n        'Mar':'03',\n        'Apr':'04',\n        'May':'05',\n        'Jun':'06',\n        'Jul':'07',\n        'Aug':'08',\n        'Sep':'09',\n        'Oct':'10',\n        'Nov':'11',\n        'Dec':'12'\n    }\n    \n    list_months = []\n    list_months.append(months.get(dt[0:3].lower()))\n    \n    d = int(list_months[0])\n    m = int(dt[3:5])\n    y = int(dt[6:])\n    \n    return str(d)+'-'+str(m)+'-'+str(y)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # YYYY-MM-DD -> DD-MM-YYYY\n    ddmmy = re.match(r'(\\d\\d\\d\\d)-(\\d\\d)-(\\d\\d)',dt)\n    if ddmmy:\n        dd,mm,yy = ddmmy.groups()\n        return str(dd)+'-'+str(mm)+'-'+str(yy)\n    # DD-MM-YYYY -> YYYY-MM-DD\n    ddmmyy = re.match(r'(\\d\\d)-(\\d\\d)-(\\d\\d)',dt)\n    if ddmmyy:\n        dd,mm,yy = ddmmyy.groups()\n        return str(yy)+'-'+str(mm)+'-'+str(dd)\n    # DD-MM-YYYY -> YYYY-MM-DD\n    ddmmyy = re.match(r'(\\d\\d)-(\\d\\d)-(\\d\\d)',dt)\n    if ddmmyy:\n        dd,mm,yy = ddmmyy.groups()\n        return str(yy)+'-'+str(mm)+'-'+str(dd)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # from datetime import datetime\n    # dt= datetime.strptime('07-06-2019', '%d-%m-%Y').strftime('%d-%m-%Y')\n    date_time = dt.split('-')\n    date_time[0] = int(date_time[0])\n    date_time[1] = int(date_time[1])\n    date_time[2] = int(date_time[2])\n    date = date_time[2] - 2000\n    month = int((date_time[1] - 1) / 3) + 1\n    month_name = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec']\n    month_name = month_name[month - 1]\n    day = date_time[0]\n    print(f'{day}-{month_name}-{date_time[2]}')\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    month, day, year = date[0], date[1], date[2]\n    final_date = day + '-' + month + '-' + year\n    return final_date\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    fmt = re.findall(r'\\d{4}',dt)[0]\n    return(f'{fmt}-{re.findall(r\"[a-z]\", dt)[0]}-{fmt}')\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if dt is None:\n        return None\n    d = re.findall(r\"\\d+\",dt)\n    if len(d)==3:\n        return d[2]+\"-\"+d[1]+\"-\"+d[0]\n    else:\n        return d[0] + \"-\" + d[1] + \"-\" + d[2]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    y = int(dt[0:4])\n    m = int(dt[5:7])\n    d = int(dt[8:10])\n    dd = d + m // 12\n    mm = m % 12 + 1\n    yyyy = y - dd\n    if mm < 10:\n        mm = '0' + str(mm)\n    if dd < 10:\n        dd = '0' + str(dd)\n    return str(dd) + '-' + str(mm) + '-' + str(yyyy)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    return f'{dt[:2]}-{dt[2:4]}-{dt[4:]}'\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        i = 0\n        while i + gap < n:\n            j = i + gap\n            temp = my_list[j]\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n            i += 1\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            curr_val = my_list[i]\n            curr_index = i\n            while curr_index >= gap and my_list[curr_index - gap] > curr_val:\n                my_list[curr_index] = my_list[curr_index - gap]\n                curr_index -= gap\n            my_list[curr_index] = curr_val\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    N = len(my_list)\n    gap = N // 2\n    while gap > 0:\n        for i in range(gap, N):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > temp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n // 2\n    while gap > 0:\n        for i in range(gap, n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = gap // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    \n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and temp < my_list[j-gap]:\n                my_list[j] = my_list[j-gap]\n                j = j-gap\n            my_list[j] = temp\n        gap = gap//2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    size = len(my_list)\n    gap = 1\n    while gap < size:\n        gap = gap*2 + 1\n        for i in range(gap, size):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n // 2\n    while gap >= 1:\n        for i in range(gap, n):\n            tmp = my_list[i]\n            j = i\n            while j >= gap and my_list[j - gap] > tmp:\n                my_list[j] = my_list[j - gap]\n                j -= gap\n            my_list[j] = tmp\n        gap //= 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    if n<=1:\n        return my_list\n    gap = n//2\n    while gap>0:\n        for i in range(gap,n):\n            curr = my_list[i]\n            j = i\n            while j>=gap and my_list[j-gap]>curr:\n                my_list[j] = my_list[j-gap]\n                j-=gap\n            my_list[j] = curr\n        gap = gap//2\n    return my_list\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0]) and (test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    and_tuple = (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n    return and_tuple\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(tup1[i] and tup2[i] for i in range(len(tup1)))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (test_tup1[0] and test_tup2[0], test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    ans = (tuple(i and j for i,j in zip(test_tup1, test_tup2)),\n            tuple(i and j for i,j in zip(test_tup1, test_tup2)))\n    return ans\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(x and y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(test_tup1) + tuple(test_tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    print(test_tup1)\n    print(test_tup2)\n    and_tup = (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n    print(and_tup)\n    return and_tup\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 and tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (a+b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    roots = []\n    for x in range(a, b):\n        y = a*x**2+b*x+c\n        roots.append([x,y])\n    return roots\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x0 = a/2\n    y0 = b * x0**2 + c * x0\n    return x0, y0\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    p = (b**2) - 4*a*c\n    if p < 0:\n        return print(\"There is no directrix.\")\n    else:\n        x1 = (-b + sqrt(p)) / (2 * a)\n        x2 = (-b - sqrt(p)) / (2 * a)\n        print(f\"The directrix is: x1 = {x1}, x2 = {x2}.\")\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a\n    y = b * x**2 + c\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.linspace(a, b, 1000)\n    y = c * x**2 + a * x + b \n    return x, y \n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    import math\n    D = a**2 - b*c\n    D = math.sqrt(D)\n    x = (-b + D)/(2*a)\n    y = (-b - D)/(2*a)\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0.0\n    f = 0.0\n    d = 0.0\n    x1 = 0.0\n    x2 = 0.0\n    x3 = 0.0\n    d1 = 0.0\n    d2 = 0.0\n    d3 = 0.0\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = symbols('x')\n    expr = ((a*x**2)+(b*x)+c)\n    directrix = solve(expr, x)\n    return directrix\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == b == c == 0:\n        return \"The function has the form: ax^2 + bx + c\"\n    if a == 0 and b == 0 and c == 0:\n        return \"The function has the form: ax^2 + b\"\n    if a == 0 and b!= 0:\n        return \"The function has the form: bx + c\"\n    if b == 0 and a!= 0:\n        return \"The function has the form: ax^2 + b\"\n    if a == 0 and b == 0 and c!= 0:\n        return \"The function has the form: b\"\n    if a == 0 and b!= 0 and c == 0:\n        return \"The function has the form: bx\"\n    if a!= 0 and b == 0 and c!= 0:\n        return \"The function has the form: ax^2 + b\"\n    if b!= 0 and a == 0 and c!= 0:\n        return \"The function has the form: ax^2 + b\"\n    if a!= 0 and b!= 0 and c == 0:\n        return \"The function has the form: ax^2 + bx\"\n    if a!= 0 and b!= 0 and c!= 0:\n        return \"The function has the form: ax^2 + bx + c\"\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    from math import sqrt, atan, degrees\n    if a!= 0:\n        return atan(b / a)\n    elif b == 0 and c == 0:\n        return 0\n    elif b == 0:\n        return 180\n    else:\n        return degrees(atan(c / a))\n    \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    count_same = 0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            if list1[i] == list2[j]:\n                count_same += 1\n                if count_same == 2:\n                    return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(set(list1) & set(list2)) == 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common = []\n    for i in range(0, len(list1)):\n        for j in range(0, len(list2)):\n            if list1[i] == list2[j]:\n                common.append(list1[i])\n    if len(common)!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    #common_elements = []\n    #for i in range(len(list1)):\n        #if list1[i] in list2:\n            #common_elements.append(list1[i])\n    #return common_elements\n    #return any(x in list2 for x in list1)\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for x in list1:\n        if x in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return any(list1[i] == list2[i] for i in range(len(list1)))\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_elements = []\n    for item in list1:\n        if item in list2:\n            common_elements.append(item)\n    if common_elements == []:\n        return False\n    return True\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_trapezium = base1 + base2\n    height_trapezium = height/2\n    median_length = (base_trapezium + height_trapezium)/2\n    return median_length\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if height < (base1 + base2):\n        raise ValueError\n    else:\n        return (base1 + base2) / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    '''\n    >>> median_trapezium(4,5,2)\n    3\n    >>> median_trapezium(6,9,2)\n    3.5\n    >>> median_trapezium(2,2,2)\n    2\n    >>> median_trapezium(1,2,3)\n    2\n    '''\n    '''\n    O(log n) time | O(1) space\n    '''\n    # if(base1 < base2):\n    #     base1, base2 = base2, base1\n    # if(height < 0):\n    #     raise ValueError('Height cannot be negative.')\n    if(base1 <= 0 or base2 <= 0 or height <= 0):\n        raise ValueError('Height, base1, and base2 must be positive.')\n    if(height % 2 == 0):\n        return 0\n    return (base1 + base2 - 2 * height)/2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # Find the half-height and half-width of the trapezium\n    half_height = height / 2\n    half_width = height / 3\n    # Find the length of the trapezium\n    trapezium = base1 + base2\n    # Return the median length of the trapezium\n    return trapezium / 2\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trap_and_triangle(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trap_and_triangle_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_perimeter_and_triangle(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_perimeter_and_triangle_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trap_and_triangle_perimeter_and_triangle_diameter(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trap_and_triangle_perimeter_and_triangle_diameter_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trap_and_triangle_perimeter_and_triangle_area(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trap_and_triangle_perimeter_and_triangle_area_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trap_and_triangle_perimeter_and_triangle_perimeter(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trap_and_triangle_perimeter_and_triangle_perimeter_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trap_and_triangle_perimeter_and_triangle_perimeter_area(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trap_and_triangle_perimeter_and_triangle_perimeter_area_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_diameter(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_diameter_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_area(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_area_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_perimeter(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_perimeter_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_perimeter_area(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_perimeter_area_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_perimeter_perimeter(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_perimeter_perimeter_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_perimeter_perimeter_area(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_perimeter_perimeter_area_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_area(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_area_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_perimeter_area_perimeter(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_perimeter_area_perimeter_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_area_perimeter_perimeter(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_area_perimeter_perimeter_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_area_perimeter_perimeter_perimeter(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    pass\ndef median_trapezium_and_triangle_perimeter_and_trapezium_perimeter_area_perimeter_perimeter_diameters(base1,base2,height):\n    '''\n    Write a function to find the median length of a trape"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    # I have an idea:\n    # I want to find the first trapezium with the longest side\n    # I want to find the second trapezium with the shortest side\n    # Then I can just compare both sides\n    # If both sides are the same, I can just take the shorter one\n    # Now I can just average both sides, keeping the same weight\n    # Then I can just divide by 2\n    # The weight can be computed by subtracting each side with the base\n    # Then I can just return the smallest positive value\n    # Then I can just return the median of the two values\n    # I can then rewrite the code to just return the average of the two values\n    # Then I can just add each side until the base is reached\n    # Then I can just add each side until the height is reached\n    # Then I can just return the two values\n    # I can also return the median of the two values\n    \n    # I have a reasonable idea:\n    # I can use a binary search on the heights to find the height that satisfies the rule\n    # Then I can use a binary search on the bases to find the height that satisfies the rule\n    # Then I can use a binary search on the base to find the base that satisfies the rule\n    # Then I can use a binary search on the height to find the height that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use a binary search on the width to find the width that satisfies the rule\n    # Then I can use "
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 >= base2:\n        base1, base2 = base2, base1\n    if base1 > height or base2 > height:\n        return 0\n    return 0.5*(base1+base2)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base_ratio = base1/base2\n    height_ratio = height/base1\n    return base_ratio*height_ratio\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2)*height\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if number > element:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for element in arr:\n        if element > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n    \ndef get_array():\n    '''\n    Get the length and space needed for an array with integers from the user.\n    '''\n    space = input(\"Enter the space needed for an array: \")\n    while len(space) == 0:\n        space = input(\"Enter the space needed for an array: \")\n    length = input(\"Enter the length of the array: \")\n    while len(length) == 0:\n        length = input(\"Enter the length of the array: \")\n    return int(length), int(space)\n    \ndef get_input():\n    '''\n    Get the input needed for the array.\n    '''\n    number = input(\"Enter an array: \")\n    while len(number) == 0:\n        number = input(\"Enter an array: \")\n    return number\n    \ndef insert_array(length, space):\n    '''\n    Inserts numbers into an array.\n    '''\n    array = []\n    for i in range(length):\n        array.append(random.randint(0, 50))\n    array_space = [0 for x in range(space)]\n    for i in range(len(array)):\n        array_space[i] = array[i]\n    return array, array_space\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number > i:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for elem in arr:\n        if number > elem:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number < arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] >= number:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number == i:\n            return True\n    return False\n    \ndef find_max_value(arr):\n    '''\n    Write a function to find the maximum value in the given array.\n    '''\n    max = arr[0]\n    for i in arr:\n        if i > max:\n            max = i\n    return max\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    greater_array = []\n    for element in arr:\n        if element > number:\n            greater_array.append(element)\n    return greater_array\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.search(r'ab+', text) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"ab+\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_two(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a+\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a*\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a+?\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a{1,}\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a{1,5}\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a+?\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a+?\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a{1,}\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a{1,5}\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a+?\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a+?\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a{1,}\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a{1,5}\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a{1,5}\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a+?\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a+?\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a+?\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a{1,}\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a{1,5}\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = r\"a{1,5}\"\n    pattern = re.compile(regex)\n    \n    matches = pattern.finditer(text)\n    \n    for match in matches:\n        print(match.group())\n        \ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by one o"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # pattern = re.compile(r'ab')\n    # match = pattern.findall(text)\n    # print(match)\n    # return pattern.findall(text)\n    return re.compile(r'a.b').findall(text)\n    #pattern = re.compile(r'a.b')\n    #matches = pattern.findall(text)\n    #return matches\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'a[b]*')\n    result = pattern.search(text)\n    return result\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # YOUR CODE HERE\n    match = re.match(r'.*(a).*(b)', text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pat1 = re.compile(r\"ab\")\n    m = pat1.search(text)\n    if m:\n        return True\n    return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # regular expressions used to check for numbers\n    r_alphas = re.compile('[a-zA-Z]+')\n    r_alphas_num = re.compile('\\d')\n    # regular expression that matches a b followed by an a\n    text_match_one = re.compile(r'ab*')\n    if text_match_one.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'a+b+'\n    return re.match(pattern,text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    #matchingPattern = re.compile(r'a+b')\n    matchingPattern = re.compile(r'(ab)+')\n    if matchingPattern.search(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab')\n    matches = pattern.findall(text)\n    return matches\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n > 0):\n        return (int(math.log10(n)) + 1)\n    else:\n        return -1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = abs(n)\n    print(n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    result = 0\n    while n > 0 :\n        result = n % 10\n        n = n // 10\n    return result\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    n = n % 100\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n >= 0 :\n        n = abs(n)\n        while n > 0 :\n            last_digit = n % 10\n            n = n // 10\n        return last_digit\n    else :\n        n = abs(n)\n        while n > 0 :\n            last_digit = n % 10\n            n = n // 10\n        return -last_digit\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n > 0:\n        return last_Digit(n//10) + int(n % 10)\n    else:\n        return -1\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    \n    n = abs(n)\n    result = n % 10\n    \n    return result\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n)%10\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return([-i for i in list1])\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nums = []\n    for num in list1:\n        if num < 0:\n            neg_nums.append(num)\n    return neg_nums\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    negative=[]\n    for x in list1:\n        if x<0:\n            negative.append(x)\n    return negative\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for num in list1:\n        if num < 0:\n            neg_nos.append(num)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    a = []\n    for i in range(len(list1)):\n        if list1[i] < 0:\n            a.append(list1[i])\n    return a\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return [x for x in list1 if x<0]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    if(len(list1)==0):\n        return []\n    else:\n        return[list1[0],-list1[0]]+neg_nos(list1[1:])\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    a = []\n    for i in list1:\n        if i >= 0:\n            a.append(i)\n    print(a)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    #print(\"The Negative numbers in the List are:\")\n    #for i in list1:\n    #    if i>0:\n    #        continue\n    #    else:\n    #        print(i)\n    for i in list1:\n        if i<0:\n            print(i)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list_neg = []\n    for x in list1:\n        if x < 0:\n            list_neg.append(x)\n    return list_neg\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    # Remove the odd characters\n    new_str = \"\"\n    for char in str1:\n        if char.isdigit() or char.isalpha():\n            new_str += char\n    \n    return new_str\n    \ndef replace_string(str1, replacement_string):\n    '''\n    Write a function to replace a word with another word in a string.\n    '''\n    # Replace the word\n    new_str = str1.replace(str1, replacement_string)\n    \n    return new_str\n    \ndef remove_long_words(str1, max_length):\n    '''\n    Write a function to remove all words which are longer than a given length in a string.\n    '''\n    # Remove words longer than max_length\n    new_str = \"\"\n    for word in str1.split():\n        if len(word) <= max_length:\n            new_str += word\n        else:\n            pass\n    \n    return new_str\n    \ndef has_numbers(input_string):\n    '''\n    Write a function that will return true if any numbers are in a given string.\n    '''\n    # Check if any numbers are in the string\n    for char in input_string:\n        if char.isdigit():\n            return True\n    return False\n    \ndef to_lower(input_string):\n    '''\n    Write a function that will return the string converted to lower case.\n    '''\n    # Convert to lower case\n    return input_string.lower()\n    \ndef text_to_sentences(input_string):\n    '''\n    Write a function that will return a list of sentences from a given text.\n    '''\n    # Split the string into sentences\n    return input_string.split(\".\")\n    \ndef sentence_to_words(sentence):\n    '''\n    Write a function that will return a list of words from a sentence.\n    '''\n    # Split the sentence into words\n    return sentence.split()\n    \ndef remove_punctuations(sentence):\n    '''\n    Write a function that will remove all punctuations from a given sentence.\n    '''\n    # Remove punctuations\n    new_str = \"\"\n    for char in sentence:\n        if char.isalpha():\n            new_str += char\n    \n    return new_str\n    \ndef word_to_sentence(word):\n    '''\n    Write a function that will return the sentence that starts with a word.\n    '''\n    # Split the word\n    word_list = word.split()\n    sentence_list = []\n    \n    for i in range(0, len(word_list)):\n        if i == 0:\n            sentence_list.append(word_list[i])\n        elif i == len(word_list) - 1:\n            sentence_list.append(word_list[i])\n        else:\n            sentence_list.append(word_list[i])\n    \n    sentence = \" \".join(sentence_list)\n    \n    return sentence\n    \ndef get_index(list1, item):\n    '''\n    Write a function that will return the index position of a given item in a list.\n    '''\n    for i in range(0, len(list1)):\n        if list1[i] == item:\n            return i\n    \n    return -1\n    \ndef get_minimum(list1):\n    '''\n    Write a function that will return the minimum number from a list.\n    '''\n    # Get the minimum\n    minimum = list1[0]\n    for item in list1:\n        if item < minimum:\n            minimum = item\n    \n    return minimum\n    \ndef get_maximum(list1):\n    '''\n    Write a function that will return the maximum number from a list.\n    '''\n    # Get the maximum\n    maximum = list1[0]\n    for item in list1:\n        if item > maximum:\n            maximum = item\n    \n    return maximum\n    \ndef get_average(list1):\n    '''\n    Write a function that will return the average of a list.\n    '''\n    # Get the average\n    total = 0\n    for item in list1:\n        total += item\n    \n    return total / len(list1)\n    \ndef is_palindrome(input_string):\n    '''\n    Write a function that will return True if a given string is a palindrome.\n    '''\n    # Check if the string is a palindrome\n    for i in range(0, len(input_string) // 2):\n        if input_string[i]!= input_string[len(input_string) - i - 1]:\n            return False\n    \n    return True\n    \ndef replace_spaces(input_string):\n    '''\n    Write a function that will return a string without any spaces.\n    '''\n    # Replace spaces\n    new_str = \"\"\n    for char in input_string:\n        if char!= \" \":\n            new_str += char\n    \n    return new_str\n    \ndef get_total_words(input_string):\n    '''\n    Write a function that will return the number of words in a given string.\n    '''\n    # Get the total words\n    return len(input_string.split())\n    \ndef sort_alpha_numeric(input_string):\n    '''\n    Write a function that will return a sorted list of words.\n    '''\n    # Sort alphabetic and numericals\n    alphanumeric = input_string.split()\n    sorted_list = sorted(alphanumeric)\n    sorted_list_num = []\n    \n    for i in range(0, len(sorted_list)):\n        for word in sorted_list:\n            if word.isalpha() or word.isdigit():\n                sorted_list_num.append(word)\n    \n    return sorted_list_num\n    \ndef get_first_occurrence(input_string, character):\n    '''\n    Write a function that will return the index position of the first occurance of a character in a given string.\n    '''\n    # Get the index of the character\n    index = input_string.find(character)\n    \n    while index!= -1:\n        # Check if the character is not the last character\n        if index + 1!= len(input_string):\n            # Get the index of the next character\n            index = input_string.find(character, index + 1)\n        else:\n            break\n    \n    return index\n    \ndef is_prime(input_number):\n    '''\n    Write a function that will return True if a given number is prime.\n    '''\n    # Check if the number is not divisible by any other number\n    if input_number > 1:\n        for i in range(2, input_number):\n            if input_number % i == 0:\n                return False\n        return True\n    return False\n    \ndef factorial(input_number):\n    '''\n    Write a function that will return the factorial of a given number.\n    '''\n    # Compute the factorial\n    result = 1\n    while input_number > 1:\n        result = result * input_number\n        input_number -= 1\n    \n    return result\n    \ndef reverse_str(input_string):\n    '''\n    Write a function that will return the string with all characters reversed.\n    '''\n    # Reverse the string\n    new_str = \"\"\n    for char in input_string:\n        new_str = char + new_str\n    \n    return new_str\n    \ndef sum_of_square_numbers(number):\n    '''\n    Write a function that will return the sum of all the squares of a given number.\n    '''\n    # Compute the sum\n    sum = 0\n    for i in range(1, number):\n        sum += i * i\n    \n    return sum\n    \ndef get_sum_of_numbers(list1):\n    '''\n    Write a function that will return the sum of all the elements in a list.\n    '''\n    # Get the sum\n    total = 0\n    for item in list1:\n        total += item\n    \n    return total\n    \ndef max_number(list1):\n    '''\n    Write a function that will return the maximum number from a list.\n    '''\n    # Get the maximum\n    maximum = list1[0]\n    for item in list1:\n        if item > maximum:\n            maximum = item"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if str1:\n        for i in str1:\n            if ord(i) % 2!= 0:\n                str1 = str1.replace(i, '')\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_chars = 'B'\n    new_str = \"\"\n    for i in str1:\n        if i in odd_chars:\n            continue\n        else:\n            new_str = new_str + i\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd = \"!@#$%^&*()_+\"\n    new_str = \"\"\n    for i in str1:\n        if i not in odd:\n            new_str = new_str+i\n    print(\"New string is \",new_str)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    list1 = list(str1)\n    for i in range(len(list1)):\n        if list1[i] % 2!= 0:\n            list1.remove(list1[i])\n    return ''.join(list1)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str1 = 'abcde'\n    s = ''\n    for i in str1:\n        if i % 2 == 0:\n            s = s + i\n    print(s)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if not (i % 2):\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    str2 = ''\n    for char in str1:\n        if char.isdigit():\n            str2 += char\n    return str2\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('O',' ')\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    for i in range(0,len(str1),2):\n        str1 = str1.replace(str1[i],'')\n    return str1\nprint(remove_odd(\"programming\"))\nprint(remove_odd(\"program\"))\nprint(remove_odd(\"geeks\"))\nprint(remove_odd(\"geeks for geeks\"))\nprint(remove_odd(\"hacker\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"g\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\"))\nprint(remove_odd(\"geek\")"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(test_list)\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    if len(test_list) == 0:\n        return 0\n    bid_pairs = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == test_list[j]:\n                bid_pairs += 1\n    return bid_pairs\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    cnt = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i][0] < test_list[j][0] and test_list[i][1] > test_list[j][1]:\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    def is_palindrome(x):\n        \"\"\"Returns True if and only if x is a palindrome\"\"\"\n        y = reversed(x)\n        return x == y\n    count = 0\n    for i in range(len(test_list)-1):\n        if is_palindrome(test_list[i]) and is_palindrome(test_list[i+1]):\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return 0\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(0, len(test_list)-1):\n        for j in range(i+1, len(test_list)):\n            if test_list[i] == (test_list[j][1],test_list[j][0]):\n                count += 1\n            if test_list[i] == (test_list[j][0],test_list[j][1]):\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(list(filter(lambda x: x[0] == x[1], test_list)))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    if not isinstance(test_list, list) or len(test_list) < 2:\n        return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # 1st solution\n    # return len(list(groupby(test_list, lambda x: tuple(reversed(x)))))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return sum(1 for x, y in test_list if (x < y) and (y < x))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = sorted(L)\n    for i in range(len(L)):\n        if i == 0:\n            if L[i]!= 0:\n                return 0\n        if L[i] == L[i-1]:\n            continue\n        else:\n            return sum(L[:i+1])\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = list(map(int, L))\n    \n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single_number = 0\n    for number in L:\n        single_number = single_number + number\n    return single_number\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #create a list out of the input\n    l = L\n    #use the built-in function sum to get the total sum of all the integers in the list\n    total = sum(l)\n    #use the built-in function int to convert the total to an integer\n    total_int = int(total)\n    #return the total_int\n    return total_int\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    L = [str(num) for num in L]\n    return int(\"\".join(L))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # Iterate over L\n    total = 0\n    for n in L:\n        total += n\n    return total\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    # print(L)\n    if not L:\n        return\n    elif len(L) == 1:\n        return L[0]\n    else:\n        return L[0] * 10 + L[1]\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    sum_int = 0\n    for i in range(len(L)):\n        sum_int += L[i]\n    return sum_int\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    single = 0\n    for n in L:\n        single = single + n\n    return single\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = re.compile(r'\\b[rR]\\b')\n    position = []\n    for m in regex.finditer(text):\n        position.append(m.start())\n    return position\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(r'(\\w+)(\\s*\\w+)\\s?(adverb)')\n    all_matches = adverb_pattern.finditer(text)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # first, split by spaces\n    split_text = text.split(' ')\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    position = []\n    word_list = text.split()\n    for i in range(len(word_list)):\n        if re.search(r\"\\bADV\\b\", word_list[i]):\n            position.append(i)\n    return position\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = r'(?<=\\s)[A-Z].+[\\s][ADV]'\n    adverb_search = re.findall(adverb_pattern,text)\n    if len(adverb_search)!= 0:\n        return adverb_search\n    else:\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    return_dict = {}\n    if len(text.split()) > 1:\n        for word in text.split():\n            if word.endswith('.'):\n                return_dict[word] = text.split().index(word)\n    return return_dict\n    \n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    regex = re.compile(r'\\b(adv)\\b')\n    result = regex.findall(text)\n    return result\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_position = []\n    p = re.compile(\"([a-zA-Z]+)\")\n    for i in p.finditer(text):\n        adverb_position.append(i.start())\n    return adverb_position\nprint(find_adverb_position('In the summer, we saw the most beautiful flowers of all time. The total number of flowers is almost 3,000,000. And they are all beautiful. It is a beautiful year, when flowers bloom.'))\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    r = r\"(\\b|^)(adverb|adverbs)\\b(?!\\.)\"\n    # r = r\"(adverb|adverbs)\\b\"\n    regex = re.compile(r)\n    return regex.findall(text)\n    \n    # return text.find('adverb')\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pattern_adverb = re.compile(r'\\b(a|an|the)\\b',re.IGNORECASE)\n    pattern_adverb_adj = re.compile(r'(\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\b', re.IGNORECASE)\n    pattern_adverb_adj2 = re.compile(r'\\b(\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\b', re.IGNORECASE)\n    if(pattern_adverb.findall(text)):\n        pattern = re.compile(r'\\b(a|an|the)\\b',re.IGNORECASE)\n        matches = pattern.finditer(text)\n        result = \"\"\n        for match in matches:\n            result = match.group(0)\n            if(result):\n                return result\n    if(pattern_adverb_adj.findall(text)):\n        pattern = re.compile(r'\\b(a|an|the)\\b',re.IGNORECASE)\n        matches = pattern.finditer(text)\n        result = \"\"\n        for match in matches:\n            result = match.group(0)\n            if(result):\n                return result\n    if(pattern_adverb_adj2.findall(text)):\n        pattern = re.compile(r'\\b(a|an|the)\\b',re.IGNORECASE)\n        matches = pattern.finditer(text)\n        result = \"\"\n        for match in matches:\n            result = match.group(0)\n            if(result):\n                return result\n    return \"\"\n    \ndef find_noun_position(text):\n    '''\n    Write a function to find the first noun and their positions in a given sentence.\n    '''\n    pattern_noun = re.compile(r'\\b(a|an|the)\\b',re.IGNORECASE)\n    pattern_noun_adj = re.compile(r'(\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\b', re.IGNORECASE)\n    pattern_noun_adj2 = re.compile(r'(\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\b', re.IGNORECASE)\n    pattern_noun_adj3 = re.compile(r'(\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\b', re.IGNORECASE)\n    pattern_noun_adj4 = re.compile(r'(\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\b', re.IGNORECASE)\n    pattern_noun_adj5 = re.compile(r'(\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\b', re.IGNORECASE)\n    pattern_noun_adj6 = re.compile(r'(\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\b', re.IGNORECASE)\n    pattern_noun_adj7 = re.compile(r'(\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\b', re.IGNORECASE)\n    pattern_noun_adj8 = re.compile(r'(\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\b', re.IGNORECASE)\n    pattern_noun_adj9 = re.compile(r'(\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+\\s+\\w+)\\b', re.IGNORECASE)\n    if(pattern_noun.findall(text)):\n        pattern = re.compile(r'\\b(a|an|the)\\b',re.IGNORECASE)\n        matches = pattern.finditer(text)\n        result = \"\"\n        for match in matches:\n            result = match.group(0)\n            if(result):\n                return result\n    if(pattern_noun_adj.findall(text)):\n        pattern = re.compile(r'\\b(a|an|the)\\b',re.IGNORECASE)\n        matches = pattern.finditer(text)\n        result = \"\"\n        for match in matches:\n            result = match.group(0)\n            if(result):\n                return result\n    if(pattern_noun_adj2.findall(text)):\n        pattern = re.compile(r'\\b(a|an|the)\\b',re.IGNORECASE)\n        matches = pattern.finditer(text)\n        result = \"\"\n        for match in matches:\n            result = match.group(0)\n            if(result):\n                return result\n    if(pattern_noun_adj3.findall(text)):\n        pattern = re.compile(r'\\b(a|an|the)\\b',re.IGNORECASE)\n        matches = pattern.finditer(text)\n        result = \"\"\n        for match in matches:\n            result = match.group(0)\n            if(result):\n                return result\n    if(pattern_noun_adj4.findall(text)):\n        pattern = re.compile(r'\\b(a|an|the)\\b',re.IGNORECASE)\n        matches = pattern.finditer(text)\n        result = \"\"\n        for match in matches:\n            result = match.group(0)\n            if(result):\n                return result\n    if(pattern_noun_adj5.findall(text)):\n        pattern = re.compile(r'\\b(a|a"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if l == 0:\n        return 0\n    elif l == 1:\n        return 3\n    else:\n        return 6 * l * l + 2 * l\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    #surfacearea = (3 * l * l) + 6 * l\n    surfacearea = ((l ** 2) * 3) + ((l ** 2) * 6)\n    return surfacearea\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l**2)*6\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l**2 * 6\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return l*6\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    if type(l)!= int:\n        raise TypeError\n    if l <= 0:\n        raise ValueError\n    if l == 0:\n        return 6\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    \n    return(l**2 * 6)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    S = 6 * (l ** 2)\n    return S\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * (l ** 2)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    nums.sort()\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    print(count/len(nums))\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for i in range(len(nums)):\n        if nums[i] >= 0:\n            pos_count += 1\n    return pos_count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    total = 0\n    negative = 0\n    for i in nums:\n        if i > 0:\n            total += 1\n        else:\n            negative += 1\n    if total == 0:\n        return 0\n    return positive_count / total\n    \nprint(positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9]))\nprint(positive_count([-1, -2, -3, -4, -5, -6, -7, -8, -9, 0]))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(0, len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return float(len(nums) - nums.count(0))/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return len([i for i in nums if i>0])\ndef is_palindrome(n):\n    '''\n    Write a function to check whether an integer is a palindrome or not.\n    '''\n    s = str(n)\n    return s == s[::-1]\ndef array_sum(nums):\n    '''\n    Write a function that takes a list of numbers and return the sum.\n    '''\n    return sum(nums)\ndef sum_of_squares(nums):\n    '''\n    Write a function to find the sum of squares of all the numbers in a list.\n    '''\n    return sum([i*i for i in nums])\ndef max_in_list(nums):\n    '''\n    Write a function to find the largest number in a list.\n    '''\n    return max(nums)\ndef max_number(nums):\n    '''\n    Write a function to find the largest number in a list.\n    '''\n    largest = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > largest:\n            largest = nums[i]\n    return largest\ndef max_positive_count(nums):\n    '''\n    Write a function to find the number of positives numbers in a list.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\ndef merge_sorted_arrays(arr1, arr2):\n    '''\n    Write a function that merges two sorted arrays into a new sorted array.\n    '''\n    i = 0\n    j = 0\n    arr = []\n    while i<len(arr1) and j < len(arr2):\n        if arr1[i] < arr2[j]:\n            arr.append(arr1[i])\n            i += 1\n        else:\n            arr.append(arr2[j])\n            j += 1\n    if i < len(arr1):\n        arr.extend(arr1[i:])\n    if j < len(arr2):\n        arr.extend(arr2[j:])\n    return arr\ndef merge_sort(nums):\n    '''\n    Write a function that takes an unsorted list and sorts it using the merge-sort algorithm.\n    '''\n    if len(nums) <= 1:\n        return nums\n    mid = len(nums)//2\n    left_arr = nums[:mid]\n    right_arr = nums[mid:]\n    merge_sort(left_arr)\n    merge_sort(right_arr)\n    i = 0\n    j = 0\n    k = 0\n    while i < len(left_arr) and j < len(right_arr):\n        if left_arr[i] < right_arr[j]:\n            nums[k] = left_arr[i]\n            i += 1\n        else:\n            nums[k] = right_arr[j]\n            j += 1\n        k += 1\n    while i < len(left_arr):\n        nums[k] = left_arr[i]\n        i += 1\n        k += 1\n    while j < len(right_arr):\n        nums[k] = right_arr[j]\n        j += 1\n        k += 1\n    return nums\ndef can_merge(nums):\n    '''\n    Write a function that determines if the array can be divided into two subarrays that have the same sum.\n    '''\n    sums = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sums.append(nums[i]+nums[j])\n    return len(sums)>=2 and len(set(sums)) == 1\ndef single_number(nums):\n    '''\n    Write a function that finds the single number in an array.\n    '''\n    sums = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sums.append(nums[i]+nums[j])\n    return len(sums)>=2 and len(set(sums)) == 1\ndef single_number_v2(nums):\n    '''\n    Write a function that finds the single number in an array.\n    '''\n    sums = []\n    for i in range(len(nums)):\n        for j in range(i+1, len(nums)):\n            sums.append(nums[i]+nums[j])\n    return len(sums)>=2 and len(set(sums)) == 1\ndef num_compare(n1, n2):\n    '''\n    Write a function to compare two numbers.\n    '''\n    return n1 - n2\ndef num_compare_v2(n1, n2):\n    '''\n    Write a function to compare two numbers.\n    '''\n    return n1 - n2\ndef longest_common_prefix(strings):\n    '''\n    Write a function that takes an array of strings and returns the longest common prefix.\n    '''\n    prefix = ''\n    if len(strings) == 0:\n        return prefix\n    longest_prefix = strings[0]\n    for i in range(1, len(strings)):\n        if len(strings[i]) < len(longest_prefix):\n            longest_prefix = strings[i]\n    for i in range(len(longest_prefix)):\n        for j in range(len(strings)):\n            if longest_prefix[i]!= strings[j][i]:\n                return prefix\n        prefix += longest_prefix[i]\n    return prefix\ndef longest_common_prefix_v2(strings):\n    '''\n    Write a function that takes an array of strings and returns the longest common prefix.\n    '''\n    prefix = ''\n    if len(strings) == 0:\n        return prefix\n    longest_prefix = strings[0]\n    for i in range(1, len(strings)):\n        if len(strings[i]) < len(longest_prefix):\n            longest_prefix = strings[i]\n    for i in range(len(longest_prefix)):\n        for j in range(len(strings)):\n            if longest_prefix[i]!= strings[j][i]:\n                return prefix\n        prefix += longest_prefix[i]\n    return prefix\ndef reverse_vowels(s):\n    '''\n    Write a function that takes a string and returns the string with vowels reversed.\n    '''\n    s = s.lower()\n    d = {'a': 'e', 'e': 'a', 'i': 'i', 'o': 'u', 'u': 'o'}\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in vowels:\n            s[i] = d[s[i]]\n    return ''.join(s)\ndef reverse_vowels_v2(s):\n    '''\n    Write a function that takes a string and returns the string with vowels reversed.\n    '''\n    d = {'a': 'e', 'e': 'a', 'i': 'i', 'o': 'u', 'u': 'o'}\n    s = s.lower()\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    s = list(s)\n    for i in range(len(s)):\n        if s[i] in vowels:\n            s[i] = d[s[i]]\n    return ''.join(s)\ndef longest_word(words):\n    '''\n    Write a function that takes an array of words and returns the longest one.\n    '''\n    longest = ''\n    for word in words:\n        if len(word) >= len(longest):\n            longest = word\n    return longest\ndef longest_word_v2(words):\n    '''\n    Write a function that takes an array of words and returns the longest one.\n    '''\n    longest = ''\n    for word in words:\n        if len(word) >= len(longest):\n            longest = word\n    return longest\nde"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for x in nums:\n        if x > 0:\n            count += 1\n    return count/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -99999999999\n    for i in list1:\n        if i<0 and i>largest:\n            largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_num = -1\n    for i in range(len(list1)):\n        if list1[i]<0:\n            if list1[i]>largest_num:\n                largest_num = list1[i]\n    return largest_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -1000000\n    for i in range(len(list1)): \n        if (list1[i] > max): \n            max = list1[i] \n    print(max) \n  "
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    lst1 = list1\n    max_neg = 0\n    for i in range(len(lst1)):\n        if lst1[i] < 0 and lst1[i] > max_neg:\n            max_neg = lst1[i]\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) < 1:\n        return None\n    if len(list1) == 1:\n        return list1[0]\n    else:\n        for i in range(len(list1) - 1):\n            if list1[i] < 0:\n                if list1[i + 1] > 0:\n                    return list1[i + 1]\n        return list1[len(list1) - 1]\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = 0\n    for i in list1:\n        if i < 0:\n            if i > max:\n                max = i\n    return max\n    \ndef smallest_pos(list1):\n    '''\n    Write a python function to find the smallest positive number from the given list.\n    '''\n    min = list1[0]\n    for i in list1:\n        if i >= 0:\n            if i < min:\n                min = i\n    return min\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max = -1\n    for i in list1:\n        if i < 0 and max < 0:\n            max = i\n        elif i < 0 and max > 0:\n            continue\n        elif i > 0:\n            max = -1\n            break\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    # print(\"Input List : \", list1) \n    # print(\"\\n\")\n    largest = 0\n    for i in list1:\n        if i<0:\n            if i > largest:\n                largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if(list1[i]<0):\n            list2.append(list1[i])\n    return max(list2)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if len(list1) == 0:\n        return None\n    result = list1[0]\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > result:\n            result = list1[i]\n    return result\n    \nprint(largest_neg([-2, -5, 2, -3, -1])) \nprint(largest_neg([]))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Your code here\n    test_list = test_list[:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(tuple(test_list[i][:K]))\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [[k] for k in test_list if k[0] > K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    temp = []\n    for i in range(len(test_list)):\n        if len(test_list[i]) >= K:\n            temp.append(test_list[i][:K])\n        else:\n            temp.append(test_list[i])\n    return temp\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    list_to_return = []\n    for tuple in test_list:\n        if len(tuple) <= K:\n            list_to_return.append(tuple)\n        else:\n            list_to_return.append(tuple[:K])\n    return list_to_return\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return tuple(tup[:K] for tup in test_list)\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    new_list = []\n    for tuple in test_list:\n        new_list.append(tuple[:K])\n    return new_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # make a copy of the original list\n    new_test_list = []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][0:K]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    return [tuple(i[:K]) for i in test_list]\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return (test_tup1, test_tup2)\n    else:\n        return (test_tup2, test_tup1)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup1 = (test_tup1[0]*test_tup2[0], test_tup1[1]*test_tup2[0])\n    test_tup1 = (test_tup1[0]*test_tup2[1], test_tup1[1]*test_tup2[1])\n    test_tup1 = (test_tup1[0]*test_tup2[2], test_tup1[1]*test_tup2[2])\n    test_tup1 = (test_tup1[0]*test_tup2[3], test_tup1[1]*test_tup2[3])\n    return test_tup1\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication = []\n    for i in range(len(test_tup1)):\n        index_multiplication.append(test_tup1[i] * test_tup2[i])\n    return index_multiplication\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1_index = 0\n    test_tup2_index = 0\n    \n    # Get the length of each tuple\n    list_len_tup1 = len(test_tup1)\n    list_len_tup2 = len(test_tup2)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    final_tup = (0,0,0,0)\n    for i in range(len(test_tup1)):\n        final_tup = final_tup + (test_tup1[i]*test_tup2[i],)\n    return final_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    for i in range(len(test_tup1)):\n        test_list1[i] = test_list1[i] * test_list2[i]\n    return tuple(test_list1)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_multiplication = (x*y for x, y in zip(test_tup1, test_tup2))\n    return index_multiplication\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(a*b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    ans_tup = ()\n    for i in range(len(test_tup1)):\n        ans_tup = ans_tup + (test_tup1[i] * test_tup2[i], )\n    return ans_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        return list(map(lambda x, y: x * y, test_tup1, test_tup2))\n    else:\n        return 'Invalid Input'\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in range(len(tup)):\n        lst[tup[i]] = lst[tup[i]]+1\n    print(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for ele in tup:\n        lst[ele]+=1\n    return lst \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_occ = 0\n    for item in lst:\n        if item in tup:\n            count_occ += 1\n    return count_occ\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count_occ = []\n    for ele in lst:\n        if ele in tup:\n            count_occ.append(ele)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).most_common()\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    lst.append(tup)\n    # Create a dictionary with key as elements of list and values as it's occurence.\n    dict_count = Counter(lst)\n    # Return the dictionary.\n    return dict_count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counter = Counter(tup)\n    for i in lst:\n        print(counter[i], end=' ')\n    print()\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    cnt = 0\n    lst.sort()\n    for i in lst:\n        for j in tup:\n            if i == j:\n                cnt += 1\n                break\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for element in tup:\n        lst[element] += 1\n    return lst\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in lst: \n        if i in tup: \n            count+=1\n    return count \n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for i in nums:\n        cube_list.append(i**3)\n    return cube_list\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_list = []\n    for num in nums:\n        cube_list.append(num**3)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    # c_nums = []\n    # for i in range(len(nums)):\n    #     c_nums.append(nums[i]**3)\n    # return c_nums\n    return list(map(lambda x: x**3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    nums_cubes = []\n    for num in nums:\n        nums_cubes.append(num**3)\n    print(nums_cubes)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**3)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in nums:\n        print(i**3)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num ** 3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda x:x**3,nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**3\n    return nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cubes.append(num**3)\n    return cubes\n    \nprint(cube_nums([1, 2, 3])) # Expected output: [1, 8, 27]\nprint(cube_nums([-1, -2, -3])) # Expected output: [-1, -8, -27]\nprint(cube_nums([0, 0, 0])) # Expected output: [0, 0, 0]\nprint(cube_nums([-3, 2, 4])) # Expected output: [-27, 8, 27]\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 2\n    else:\n        return 2 * cal_sum(n - 1) + n\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return int(n) * (int(n)+1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + cal_sum(n - 1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a = 0\n    while n >= 2:\n        a = (n//2) + a\n        n = n//2\n    return a + n\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += (i*(i+1)/2)\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_n = 0\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        sum_n = cal_sum(n - 1) + cal_sum(n - 2)\n        return sum_n\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n==1: \n        return 1 \n    else: \n        return n+ cal_sum(n-1) \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    a=str(n)\n    sum=0\n    for i in a:\n        sum+=int(i)\n    return sum\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = ''\n    if l:\n        for i in range(l):\n            result += str[i]\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return (str.split(\"\\n\")[0:l])\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(l):\n        result.append(str[i])\n    return result\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    n = l[0].count(str)\n    print(n)\n    new_l = []\n    for i in range(len(l)):\n        if(l[i].count(str) == n):\n            new_l.append(l[i])\n    return new_l\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return \" \".join(str[i:i+l] for i in range(0, len(str), l))\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    count = 0\n    ans = []\n    for x in l:\n        if count == l_count:\n            break\n        if (len(x) >= l):\n            ans.append(x)\n            count = count + 1\n    return ans\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    a = []\n    for i in range(0, l):\n        a.append(str.pop())\n    return a\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    length = int(l)\n    if str!= \"\":\n        str = str.split(\" \")\n        str = \" \".join(str[:length])\n    else:\n        str = \"\"\n    return str\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    result = []\n    for i in range(l):\n        try:\n            result.append(str[i])\n        except IndexError:\n            break\n    return result\n    \ndef find_substring(str, sub):\n    '''\n    Write a function to find specified size substring in a given string.\n    '''\n    result = []\n    for i in range(len(str)):\n        if str[i:i+len(sub)] == sub:\n            result.append(i)\n    return result\n    \ndef has_no_duplicates(list1):\n    '''\n    Write a function to check whether the given list contains any duplicates or not.\n    '''\n    return len(list1) == len(set(list1))\n    \ndef replace_string(str, sub, rep):\n    '''\n    Write a function to replace substring with other string in a given string.\n    '''\n    result = str\n    for i in range(len(str)):\n        if str[i:i+len(sub)] == sub:\n            result = result[:i] + rep + result[i+len(sub):]\n            break\n    return result\n    \ndef remove_substring(str, sub):\n    '''\n    Write a function to remove substring from a given string.\n    '''\n    result = str\n    for i in range(len(str)):\n        if str[i:i+len(sub)] == sub:\n            result = result[:i] + result[i+len(sub):]\n            break\n    return result\n    \ndef remove_substring_2(str, sub):\n    '''\n    Write a function to remove substring from a given string.\n    '''\n    result = str\n    result = result.replace(sub, '', 1)\n    return result\n    \ndef remove_substring_3(str, sub):\n    '''\n    Write a function to remove substring from a given string.\n    '''\n    result = str\n    result = result.replace(sub, '', 1)\n    return result\n    \ndef replace_string_count(str, sub, rep):\n    '''\n    Write a function to replace substring with other string in a given string.\n    '''\n    result = 0\n    for i in range(len(str)):\n        if str[i:i+len(sub)] == sub:\n            result = result + 1\n            result = result + 1\n            str = str[:i] + rep + str[i+len(sub):]\n            break\n    return result\n    \ndef replace_string_count_2(str, sub, rep):\n    '''\n    Write a function to replace substring with other string in a given string.\n    '''\n    result = 0\n    for i in range(len(str)):\n        if str[i:i+len(sub)] == sub:\n            result = result + 1\n            str = str[:i] + rep + str[i+len(sub):]\n            break\n    return result\n    \ndef replace_string_count_3(str, sub, rep):\n    '''\n    Write a function to replace substring with other string in a given string.\n    '''\n    result = 0\n    for i in range(len(str)):\n        if str[i:i+len(sub)] == sub:\n            result = result + 1\n            str = str[:i] + rep + str[i+len(sub):]\n            break\n    return result\n    \ndef replace_string_count_4(str, sub, rep):\n    '''\n    Write a function to replace substring with other string in a given string.\n    '''\n    result = 0\n    for i in range(len(str)):\n        if str[i:i+len(sub)] == sub:\n            result = result + 1\n            str = str[:i] + rep + str[i+len(sub):]\n            break\n    return result\n    \ndef reverse_string(str):\n    '''\n    Write a function to reverse the given string.\n    '''\n    result = str\n    return result[::-1]\n    \ndef reverse_string_2(str):\n    '''\n    Write a function to reverse the given string.\n    '''\n    result = str\n    result = result[::-1]\n    return result\n    \ndef reverse_string_3(str):\n    '''\n    Write a function to reverse the given string.\n    '''\n    result = str[::-1]\n    return result\n    \ndef is_palindrome(str):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    result = str\n    result = result.lower()\n    return result == result[::-1]\n    \ndef is_palindrome_2(str):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    result = str\n    result = result.lower()\n    return result == result[::-1]\n    \ndef is_palindrome_3(str):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    result = str.lower()\n    return result == result[::-1]\n    \ndef is_palindrome_4(str):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    result = str.lower()\n    return result == result[::-1]\n    \ndef length_of_longest_substring(str):\n    '''\n    Write a function to find length of the longest substring without repeating characters.\n    '''\n    result = 0\n    result = len(str)\n    return result\n    \ndef length_of_longest_substring_2(str):\n    '''\n    Write a function to find length of the longest substring without repeating characters.\n    '''\n    result = 0\n    result = len(str)\n    return result\n    \ndef length_of_longest_substring_3(str):\n    '''\n    Write a function to find length of the longest substring without repeating characters.\n    '''\n    result = 0\n    result = len(str)\n    return result\n    \ndef length_of_longest_substring_4(str):\n    '''\n    Write a function to find length of the longest substring without repeating characters.\n    '''\n    result = 0\n    result = len(str)\n    return result\n    \ndef sum_of_distinct_values(arr):\n    '''\n    Write a function that returns sum of distinct values in an array.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        if arr[i] not in arr[i+1:]:\n            result = result + arr[i]\n    return result\n    \ndef sum_of_distinct_values_2(arr):\n    '''\n    Write a function that returns sum of distinct values in an array.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[j] not in arr[i:j]:\n                result = result + arr[i:j]\n    return result\n    \ndef sum_of_distinct_values_3(arr):\n    '''\n    Write a function that returns sum of distinct values in an array.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == arr[j]:\n                break\n        result = result + arr[i]\n    return result\n    \ndef sum_of_distinct_values_4(arr):\n    '''\n    Write a function that returns sum of distinct values in an array.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] == arr[j]:\n                break\n        result = result + arr[i]\n    return result\n    \ndef sum_of_distinct_values_5(arr):\n    '''\n    Write a function that returns sum of distinct values in an array.\n    '''\n    result = 0\n    result = sum(set(arr))\n    return result\n    "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    # import numpy as np\n    import random\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = re.sub(\"\\s+\", \" \", text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    \n    # return text1.replace(' ', '')\n    \n    # Using re.sub()\n    text2 = re.sub(r'\\s+', '', text1)\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    print(text1.split())\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n    \n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    #Remove all whitespaces\n    text = text1.strip()\n    return text\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(' ','')\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    return actual_cost - sale_amount \n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return 0\n    else:\n        return (actual_cost-sale_amount)\n        \ndef primes(start,end):\n    '''\n    Write a function that gives all prime numbers in the given range.\n    '''\n    lst=[]\n    for i in range(start,end+1):\n        if is_prime(i):\n            lst.append(i)\n    return lst\n        \ndef is_prime(n):\n    '''\n    Write a function that checks if a given number is prime or not.\n    '''\n    if n<=1:\n        return False\n    else:\n        for i in range(2,n):\n            if n%i==0:\n                return False\n        return True\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(actual_cost > sale_amount):\n        return actual_cost - sale_amount\n    else:\n        return 0\n    \ndef check_odd(num):\n    '''\n    Write a function that checks whether a number is odd or even.\n    '''\n    if(num%2==0):\n        return False\n    else:\n        return True\n    \ndef check_even(num):\n    '''\n    Write a function that checks whether a number is even or odd.\n    '''\n    if(num%2==0):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return (actual_cost - sale_amount)\n    else:\n        return (sale_amount - actual_cost)\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost==sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss_amount = actual_cost * (sale_amount / actual_cost)\n    return loss_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost <= sale_amount:\n        return 0\n    else:\n        return actual_cost-sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(actual_cost>sale_amount):\n        return actual_cost-sale_amount\n    else:\n        return 0\n    \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n):\n        if(i == n):\n            break\n        if(i % 2 == 0 and n % i == 0):\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, int(n/2)) :\n        if (n%i == 0) :\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    print(\"The sum of factors is : \",end=\"\")\n    sum=0\n    for i in range(1,n+1) :\n        if(n%i==0) :\n            sum = sum+i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if(n % i == 0) :\n            if(i % 2 == 0) :\n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if(i % 2 == 0):\n            sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1, n + 1):\n        if(n % i == 0):\n            s = s + i\n    return s\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        if(n%i == 0):\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    return sum(i for i in range(1,n+1) if n%i == 0)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    if n%2==0:\n        return n+sumofFactors(n//2)\n    else:\n        return n\ndef isPerfectSquare(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    return math.sqrt(n)==int(math.sqrt(n))\ndef primeFactors(n):\n    '''\n    Write a python function to find the prime factors of a number.\n    '''\n    while n%2==0:\n        print(2)\n        n=n//2\n    for i in range(3,int(math.sqrt(n))+1,2):\n        while n%i==0:\n            print(i)\n            n=n//i\n    if n>2:\n        print(n)\ndef isPerfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if n%i==0:\n            sum+=i\n    return sum==n\ndef isArmstrong(n):\n    '''\n    Write a python function to check whether a number is armstrong or not.\n    '''\n    sum=0\n    temp=n\n    while temp:\n        temp//=10\n        sum+=pow(temp%10,3)\n    return sum==n\ndef isPalindrome(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    else:\n        return n==n[::-1]\ndef isPalindrome2(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    strn=str(n)\n    if strn[:int(len(strn)/2)]==strn[int(len(strn)/2):][::-1]:\n        return True\n    else:\n        return False\ndef isPerfect(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        if n%i==0:\n            sum+=i\n    return sum==n\ndef isPerfect2(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum=0\n    temp=n\n    while temp:\n        temp//=10\n        sum+=pow(temp%10,3)\n    return sum==n\ndef isPerfect3(n):\n    '''\n    Write a python function to check whether a number is perfect or not.\n    '''\n    sum=0\n    temp=n\n    while temp:\n        temp//=10\n        sum+=pow(temp%10,3)\n        if sum>temp:\n            return False\n    return True\ndef isPalindrome3(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    if n<0:\n        return False\n    else:\n        return n==n[::-1]\ndef isPalindrome4(n):\n    '''\n    Write a python function to check whether a number is palindrome or not.\n    '''\n    temp=n\n    rev=0\n    while temp:\n        rev=rev*10+temp%10\n        temp//=10\n    if rev==n:\n        return True\n    return False\ndef isPrime(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isPrime2(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isPrime3(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,int(n/2)+1):\n        if n%i==0:\n            return False\n    return True\ndef isPrime4(n):\n    '''\n    Write a python function to check whether a number is prime or not.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n%i==0:\n            return False\n    return True\ndef isPerfectSquare2(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(n**0.5):\n        return True\n    else:\n        return False\ndef isPerfectSquare3(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare4(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare5(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare6(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare7(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare8(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare9(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare10(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare11(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare12(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare13(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare14(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n==int(math.sqrt(n)):\n        return True\n    else:\n        return False\ndef isPerfectSquare15(n):\n    '''\n    Write a python function to check whether a number is perfect square or not.\n    '''\n    if n="
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    # code here \n    sum = 0\n    while(n>0):\n        if(n%2==0):\n            sum=sum+n\n        n=n//2\n    return sum\n    \n    #another way\n    '''\n    n=int(input(\"Enter a number : \"))\n    sum=0\n    for i in range(1,n+1):\n        if(n%i==0):\n            sum+=i\n    print(sum)\n    '''\ndef factorial(n):\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match_list = re.findall(r'\\bz\\w+\\b', text)\n    print('Found the following z\\'s:')\n    print(match_list)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'z$',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    match = re.findall(r'z', text)\n    return match\ndef text_match_word_no_regex(text):\n    '''\n    Write a function that matches a word without regex.\n    '''\n    match = text.find('z')\n    return match\ndef text_match_word_regex(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_word_no_match(text):\n    '''\n    Write a function that matches a word that doesn't exist.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_words_no_match(text):\n    '''\n    Write a function that matches a word that doesn't exist.\n    '''\n    match = re.findall(r'z', text)\n    return match\ndef text_match_wordz_regex(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = text.find('z')\n    return match\ndef text_match_wordz_no_regex_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n    return match\ndef text_match_wordz_no_regex_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match_no_match(text):\n    '''\n    Write a function that matches a word with regex.\n    '''\n    match = re.search(r'z', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    \n    match = re.findall('z', text)\n    if match:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word_list=re.findall(r'\\bz\\w+',text)\n    return word_list\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r'\\bz+\\b', text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile(r'z')\n    return pattern.search(text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #checking if 'z' is in the word\n    # if 'z' in text:\n    #     return 'contains z'\n    # else:\n    #     return 'does not contain z'\n    return 'contains z' if 'z' in text else 'does not contain z'\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    #text = 'Let it be, let it be, let it be. I will not touch it.'\n    #print(text.find('z'))\n    #print(text.find('zz'))\n    #print(text.find('zzz'))\n    #print(text.find('zzzz'))\n    #print(text.find('zzzzzz'))\n    #print(text.find('zzzzzzzz'))\n    #print(text.find('zzzzzzzzzz'))\n    #print(text.find('zzzzzzzzzzzzz'))\n    #print(text.find('zzzzzzzzzzzzzzzz'))\n    #print(text.find('zzzzzzzzzzzzzzzzzz'))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = re.compile('[z]')\n    result = re.findall(pattern, text)\n    return result\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return(monthnum2%4==0)\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2:\n        return True\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 2 or monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        if monthnum2 == 2:\n            if year%4==0:\n                if year%100==0:\n                    if year%400==0:\n                        print(\"{0} is a leap year\".format(year))\n                        return True\n                    else:\n                        print(\"{0} is not a leap year\".format(year))\n                        return False\n                else:\n                    print(\"{0} is a leap year\".format(year))\n                    return True\n            else:\n                print(\"{0} is a leap year\".format(year))\n                return True\n        else:\n            if monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n                if year%4==0:\n                    print(\"{0} is a leap year\".format(year))\n                    return True\n                else:\n                    print(\"{0} is not a leap year\".format(year))\n                    return False\n            else:\n                print(\"{0} is not a leap year\".format(year))\n                return False\n    else:\n        if monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n            if year%400==0:\n                print(\"{0} is a leap year\".format(year))\n                return True\n            elif year%100!=0:\n                print(\"{0} is not a leap year\".format(year))\n                return False\n            else:\n                print(\"{0} is a leap year\".format(year))\n                return True\n        else:\n            print(\"{0} is not a leap year\".format(year))\n            return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return 31\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        return 30\n    else:\n        return 0\n    "
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        if 31 == monthnum2:\n            return True\n        else:\n            return False\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        if 30 == monthnum2:\n            return True\n        else:\n            return False\n    elif monthnum2 == 2:\n        if 29 == monthnum2:\n            return True\n        else:\n            return False\n    else:\n        print(\"Month number is not valid\")\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        print('31 days')\n    elif monthnum2 == 4 or monthnum2 == 6 or monthnum2 == 9 or monthnum2 == 11:\n        print('30 days')\n    else:\n        print('29 days')\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        if monthnum2 == 1:\n            print(\"True\")\n        elif monthnum2 == 3:\n            print(\"True\")\n        elif monthnum2 == 5:\n            print(\"True\")\n        elif monthnum2 == 7:\n            print(\"True\")\n        elif monthnum2 == 8:\n            print(\"True\")\n        elif monthnum2 == 10:\n            print(\"True\")\n        elif monthnum2 == 12:\n            print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        return '31'\n    else:\n        return '30'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    new_list = []\n    for i in range(len(stringlist)):\n        new_list.append(stringlist[i][::-1])\n    print(new_list)\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reverse_string_list = []\n    for i in range(len(stringlist)):\n        reverse_string_list.append(stringlist[i][::-1])\n    return reverse_string_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    print(stringlist[::-1])\n    return stringlist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)-1, -1, -1):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for string in stringlist:\n        result.append(string[::-1])\n    return result"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    if len(stringlist) == 1:\n        return stringlist\n    else:\n        return reverse_string_list(stringlist[1:]) + stringlist[:1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist[::-1]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    for i in range(1, len(lst)):\n        if len(lst[i]) < len(lst[i-1]):\n            lst[i], lst[i-1] = lst[i-1], lst[i]\n    return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len=min(lst)\n    min_len_lst=[]\n    for i in range(0,len(lst)):\n        if lst[i]==min_len:\n            min_len_lst.append(lst[i])\n    print(\"The minimum length sublist is\", min_len_lst)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    \n    def length_finder(lst, item):\n        lst.append(item)\n        for i in range(len(lst)):\n            print(lst)\n            if lst[i]!= 0:\n                lst[i] = 0\n            else:\n                lst[i] = lst[i-1]\n        return lst\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    if len(lst) == 0:\n        return None\n    if len(lst) == 1:\n        return lst[0]\n    return lst[0] if len(lst[0]) < len(lst[1]) else lst[1]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    length = len(lst)\n    if length == 0:\n        return None\n    min_len = len(lst[0])\n    min_lst = []\n    for i in range(length):\n        if len(lst[i]) < min_len:\n            min_len = len(lst[i])\n            min_lst = lst[i]\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    minimum = lst[0]\n    for i in range(1,len(lst)):\n        if (len(lst[i]) < len(minimum)):\n            minimum = lst[i]\n    return minimum\n    \n    \ndef Find_Max(lst):\n    '''\n    Write a python function to find the sublist having maximum length.\n    '''\n    maximum = lst[0]\n    for i in range(1,len(lst)):\n        if (len(lst[i]) > len(maximum)):\n            maximum = lst[i]\n    return maximum\n    \n    \ndef Count_Character_Occurence(string, character):\n    '''\n    Write a python function to count occurrences of the character in a string.\n    '''\n    count = 0\n    for i in range(len(string)):\n        if (string[i] == character):\n            count = count + 1\n    return count\n    \n    \ndef Find_Last_N_Character(string, N):\n    '''\n    Write a python function to find the last N characters of a string.\n    '''\n    return string[len(string)-N:]\n    \n    \ndef Count_Character_Occurence_in_Substring(string, sub_string, character):\n    '''\n    Write a python function to count occurrences of the character in a sub-string of a string.\n    '''\n    count = 0\n    for i in range(len(string)-len(sub_string)+1):\n        if (string[i:i+len(sub_string)] == sub_string):\n            count = count + 1\n    return count\n    \n    \ndef Find_Common_Character(string1, string2):\n    '''\n    Write a python function to find the common characters of two strings.\n    '''\n    lst1 = list(string1)\n    lst2 = list(string2)\n    common = []\n    for i in range(len(lst1)):\n        if (lst1[i] in lst2):\n            common.append(lst1[i])\n    common = ''.join(common)\n    return common\n    \n    \ndef Add_String(string1, string2):\n    '''\n    Write a python function to add two strings together.\n    '''\n    lst1 = list(string1)\n    lst2 = list(string2)\n    result = []\n    for i in range(len(lst1)):\n        if (lst1[i] == lst2[i]):\n            result.append(lst1[i])\n        else:\n            result.append(lst1[i] + lst2[i])\n    return ''.join(result)\n    \n    \ndef Remove_Duplicates_In_String(string):\n    '''\n    Write a python function to remove duplicate characters in a string.\n    '''\n    lst = list(string)\n    seen = set()\n    seen_add = seen.add\n    lst = [x for x in lst if x not in seen and not seen_add(x)]\n    return ''.join(lst)\n    \n    \ndef Check_Palindrome(string):\n    '''\n    Write a python function to check whether the input string is a palindrome.\n    '''\n    new_string = string.lower()\n    for i in range(int(len(new_string)/2)):\n        if (new_string[i]!= new_string[len(new_string)-i-1]):\n            return False\n    return True\n    \n    \ndef Check_Palindrome_1(string):\n    '''\n    Write a python function to check whether the input string is a palindrome.\n    '''\n    lst = list(string)\n    lst.reverse()\n    if (lst == list(string)):\n        return True\n    return False\n    \n    \ndef Generate_Prime_Numbers(number):\n    '''\n    Write a python function to generate all prime numbers between 2 and n.\n    '''\n    lst = list(range(2,number))\n    for i in range(2,number):\n        if (i in lst):\n            lst.remove(i)\n    return lst\n    \n    \ndef Find_Prime_Numbers(number):\n    '''\n    Write a python function to find all prime numbers between 2 and n.\n    '''\n    lst = list(range(2,number))\n    for i in range(2,number):\n        if (i in lst):\n            lst.remove(i)\n    return lst\n    \n    \ndef Find_Prime_Numbers_with_2(number):\n    '''\n    Write a python function to find all prime numbers in a range with 2.\n    '''\n    lst = list(range(2,number))\n    for i in range(2,number):\n        if (i in lst):\n            lst.remove(i)\n    return lst\n    \n    \ndef Check_Palindrome_2(string):\n    '''\n    Write a python function to check whether the input string is a palindrome.\n    '''\n    lst = list(string)\n    lst.reverse()\n    if (lst == list(string)):\n        return True\n    return False\n    \n    \ndef Find_Prime_Numbers_with_3(number):\n    '''\n    Write a python function to find all prime numbers in a range with 3.\n    '''\n    lst = list(range(2,number))\n    for i in range(2,number):\n        if (i in lst):\n            lst.remove(i)\n            if (i%3 == 0):\n                lst.remove(i)\n    return lst\n    \n    \ndef Reverse_Int(string):\n    '''\n    Write a python function to reverse an integer.\n    '''\n    lst = list(string)\n    lst.reverse()\n    return int(''.join(lst))\n    \n    \ndef Convert_Binary(number):\n    '''\n    Write a python function to convert an integer to binary.\n    '''\n    while (number!= 0):\n        if (number%2 == 0):\n            print('0',end='')\n        else:\n            print('1',end='')\n        number = number//2\n    return\n    \n    \ndef Convert_Binary_1(number):\n    '''\n    Write a python function to convert an integer to binary.\n    '''\n    lst = []\n    if (number < 0):\n        number = -number\n    while (number!= 0):\n        lst.append(number%2)\n        number = number//2\n    lst.reverse()\n    return ''.join([str(i) for i in lst])\n    \n    \ndef Convert_Binary_2(number):\n    '''\n    Write a python function to convert an integer to binary.\n    '''\n    s = ''\n    while (number!= 0):\n        s = str(number%2) + s\n        number = number//2\n    return s\n    \n    \ndef Convert_Binary_3(number):\n    '''\n    Write a python function to convert an integer to binary.\n    '''\n    s = ''\n    while (number!= 0):\n        s = str(number%2) + s\n        number = number//2\n    return s\n    \n    \ndef Convert_Binary_4(number):\n    '''\n    Write a python function to convert an integer to binary.\n    '''\n    s = ''\n    while (number!= 0):\n        s = str(number%2) + s\n        number = number//2\n    return s\n    \n    \ndef Convert_Binary_5(number):\n    '''\n    Write a python function to convert an integer to binary.\n    '''\n    s = ''\n    while (number!= 0):\n        s = str(number%2) + s\n        number = number//2\n    return s\n    \n    \ndef Convert_Binary_6(number):\n    '''\n    Write a python function to convert an integer to binary.\n    '''\n    s = ''\n    while (number!= 0):\n        s = str(number%2) + s\n        number = number//2\n    return s\n    \n    \ndef Convert_Binary_7(number):\n    '''\n    Write a python function to conver"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_sub = []\n    for i in range(len(lst)):\n        if len(min_sub) == 0:\n            min_sub.append(lst[i])\n        else:\n            if len(lst[i]) < len(min_sub):\n                min_sub = lst[i]\n    return min_sub\n    "
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_length = lst[0]\n    min_index = 0\n    for i in range(1, len(lst)): \n        if len(lst[i]) < min_length:\n            min_length = len(lst[i]) \n            min_index = i \n    return lst[min_index] \n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_val = lst[0]\n    for i in lst:\n        if len(i) < len(min_val):\n            min_val = i\n    return min_val\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    # code here \n    min_len = lst[0]\n    min_id = 0\n    for i in range(1,len(lst)):\n        if len(lst[i])<min_len:\n            min_len = len(lst[i])\n            min_id = i\n    return min_id\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l * b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\nprint(rectangle_area(5,6))\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l * b\n    return area\nprint(rectangle_area(5,3)"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print(area)\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    print(l*b)\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    return area\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str_to_be_removed = []\n    for ch in str1:\n        if ch.isupper():\n            str_to_be_removed.append(ch)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2 = str1.lower()\n    str2 = str2.replace(str2.upper(), \"\")\n    return str2\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = re.sub(r'[A-Z]', \"\", str1)\n    return str1\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str1 = str1.replace('A', '')\n    str1 = str1.replace('B', '')\n    str1 = str1.replace('C', '')\n    str1 = str1.replace('D', '')\n    str1 = str1.replace('E', '')\n    str1 = str1.replace('F', '')\n    str1 = str1.replace('G', '')\n    str1 = str1.replace('H', '')\n    str1 = str1.replace('I', '')\n    str1 = str1.replace('J', '')\n    str1 = str1.replace('K', '')\n    str1 = str1.replace('L', '')\n    str1 = str1.replace('M', '')\n    str1 = str1.replace('N', '')\n    str1 = str1.replace('O', '')\n    str1 = str1.replace('P', '')\n    str1 = str1.replace('Q', '')\n    str1 = str1.replace('R', '')\n    str1 = str1.replace('S', '')\n    str1 = str1.replace('T', '')\n    str1 = str1.replace('U', '')\n    str1 = str1.replace('V', '')\n    str1 = str1.replace('W', '')\n    str1 = str1.replace('X', '')\n    str1 = str1.replace('Y', '')\n    str1 = str1.replace('Z', '')\n    return str1\ndef convert_string_to_lowercase(str1):\n    '''\n    Write a function to convert a string to lowercase.\n    '''\n    return str1.lower()\ndef string_to_list(str1):\n    '''\n    Write a function to convert a string to list of words.\n    '''\n    return str1.split(' ')\ndef remove_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    str1 = str1.replace('.', '')\n    str1 = str1.replace(',', '')\n    str1 = str1.replace('?', '')\n    str1 = str1.replace('!', '')\n    str1 = str1.replace('\"', '')\n    str1 = str1.replace(\"'\", '')\n    return str1\ndef convert_string_to_int(str1):\n    '''\n    Write a function to convert a string to integer.\n    '''\n    return int(str1)\ndef get_length(str1):\n    '''\n    Write a function to get length of the given string.\n    '''\n    return len(str1)\ndef remove_non_alphabetic(str1):\n    '''\n    Write a function to remove all non-alphabetic characters.\n    '''\n    str1 = re.sub('[^a-zA-Z]', '', str1)\n    return str1\ndef lower_case_first_word(str1):\n    '''\n    Write a function to lowercase the first word of a string.\n    '''\n    str1 = str1.split(' ')\n    str1 = str1[0].lower() + str1[1:]\n    return str1\ndef lower_case_all_words(str1):\n    '''\n    Write a function to lowercase all the words of a string.\n    '''\n    str1 = str1.split(' ')\n    str1 = ''.join(str1)\n    return str1.lower()\ndef upper_case_first_word(str1):\n    '''\n    Write a function to upper case the first word of a string.\n    '''\n    str1 = str1.split(' ')\n    str1 = str1[0].upper() + str1[1:]\n    return str1\ndef upper_case_all_words(str1):\n    '''\n    Write a function to upper case all the words of a string.\n    '''\n    str1 = str1.split(' ')\n    str1 = ''.join(str1)\n    return str1.upper()\ndef count_lower_case_characters(str1):\n    '''\n    Write a function to count lower case characters in a string.\n    '''\n    return str1.lower().count(' ') + str1.lower().count('.') + str1.lower().count(',') + str1.lower().count('?') + str1.lower().count('!') + str1.lower().count('-') + str1.lower().count('\"') + str1.lower().count(\"'\")\ndef count_uppercase_characters(str1):\n    '''\n    Write a function to count uppercase characters in a string.\n    '''\n    return str1.upper().count(' ') + str1.upper().count('.') + str1.upper().count(',') + str1.upper().count('?') + str1.upper().count('!') + str1.upper().count('-') + str1.upper().count('\"') + str1.upper().count(\"'\")\ndef count_digit_characters(str1):\n    '''\n    Write a function to count digits characters in a string.\n    '''\n    return str1.count(' ') + str1.count('.') + str1.count(',') + str1.count('?') + str1.count('!') + str1.count('-') + str1.count('\"') + str1.count(\"'\") + str1.count('0') + str1.count('1') + str1.count('2') + str1.count('3') + str1.count('4') + str1.count('5') + str1.count('6') + str1.count('7') + str1.count('8') + str1.count('9')\ndef count_alphabetic_characters(str1):\n    '''\n    Write a function to count alphabetical characters in a string.\n    '''\n    return str1.lower().count(' ') + str1.lower().count('.') + str1.lower().count(',') + str1.lower().count('?') + str1.lower().count('!') + str1.lower().count('-') + str1.lower().count('\"') + str1.lower().count(\"'\")\ndef count_alphanumeric_characters(str1):\n    '''\n    Write a function to count alphanumeric characters in a string.\n    '''\n    return str1.isalnum()\ndef count_non_alphabetic_characters(str1):\n    '''\n    Write a function to count non-alphabetic characters in a string.\n    '''\n    return str1.isalpha()\ndef count_non_alphanumeric_characters(str1):\n    '''\n    Write a function to count non-alphanumeric characters in a string.\n    '''\n    return str1.isdigit()\ndef count_punctuations_characters(str1):\n    '''\n    Write a function to count punctuations characters in a string.\n    '''\n    return str1.count('.') + str1.count(',') + str1.count('?') + str1.count('!') + str1.count('-') + str1.count('\"') + str1.count(\"'\") + str1.count('\\'') + str1.count('(') + str1.count(')') + str1.count('[') + str1.count(']') + str1.count('{') + str1.count('}')\ndef count_special_characters_characters(str1):\n    '''\n    Write a function to count special characters characters in a string.\n    '''\n    return str1.count('@') + str1.count('#') + str1.count('$') + str1.count('&') + str1.count('_') + str1.count('-') + str1.count('=') + str1.count('+') + str1.count(';') + str1.count(':') + str1.count('\\'') + str1.count('(') + str1.count(')') + str1.count('*') + str1.count('|') + str1.count('/') + str1.count('>') + str1.count('<'"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    remove_upper_str = str1.lower()\n    remove_upper_str = re.sub('[A-Z]', '', remove_upper_str)\n    return remove_upper_str\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)-1):\n        lst[i].pop(0)\n        lst[i].pop(0)\n    print lst\n    return(lst)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = []\n    for i in lst:\n        res.append(i[0])\n    return res\n    \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    first_elem = []\n    for sub_list in lst: \n        first_elem.append(sub_list[0])\n    return first_elem\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [x[0] for x in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for elem in lst: \n        if type(elem) == list: \n            print (elem[0])\n        else:\n            print (elem)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst1 = []\n    for i in lst:\n        lst1.append(i[0])\n    return lst1\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in lst: \n        if type(i) is list: \n            print(i[0], end ='') \n    print() \n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        print(lst[i][0])\n        \n    "
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    result = []\n    for sub_list in lst:\n        result.append(sub_list[0])\n    return result\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst = lst[::-1]\n    for i in range(len(lst)):\n        lst[i].reverse()\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            lst[i][j] = lst[i][j][::-1]\n    return lst\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(1 for c in str if c.isupper())\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    # return str.upper().count('U')\n    return sum(c.isupper() for c in str)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if(i.isupper()):\n            count += 1\n    return count\n    \nprint(upper_ctr('this is a test of a function'))\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count=0\n    for i in range(len(str)):\n        if ord(str[i])>=65 and ord(str[i])<=90:\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for c in str:\n        if c.isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for ch in str:\n        if ch.isupper():\n            count+=1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return str.upper().count('A')\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return len([i for i in str if i.isupper()])\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError('Input must be a list')\n    else:\n        if len(list1) < 1:\n            return []\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return list1\n    list1.sort()\n    combs = []\n    for i in range(0, len(list1)):\n        if i == 0 or list1[i]!= list1[i-1]:\n            if i == len(list1)-1:\n                combs.append(list1[i])\n            else:\n                combs.append([list1[i]])\n                for j in range(i+1, len(list1)):\n                    if list1[j]!= list1[j-1]:\n                        combs[len(combs)-1].append(list1[j])\n                        break\n    return combs\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    output = []\n    if len(list1) > 0:\n        output.append(list1)\n    else:\n        return output\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    \n    list1 = sorted(list1)\n    combinations_dict = {}\n    if not list1:\n        return []\n    for i, elt in enumerate(list1):\n        new_list = list1[:i] + list1[i+1:]\n        if new_list:\n            combinations_dict[elt] = combinations_list(new_list)\n        else:\n            combinations_dict[elt] = [[elt]]\n    return combinations_dict\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    new_list = []\n    for i in range(1, len(list1)+1):\n        for j in combinations_rec(list1, i):\n            new_list.append(j)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations = []\n    for x in range(len(list1) + 1):\n        for subset in combinations_list_iterative(list1, x):\n            combinations.append(subset)\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    result_list = []\n    for i in range(0,len(list1)):\n        for j in range(i,len(list1)):\n            result_list.append(list1[i] + list1[j])\n    return result_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    res = []\n    for idx in range(len(list1)):\n        for i in combinations_list(list1[idx+1:]):\n            res.append([list1[idx]] + i)\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    for i in range(len(list1)+1):\n        for j in range(i+1, len(list1)+1):\n            for k in range(j+1, len(list1)+1):\n                print(list1[i:j], list1[j:k], list1[k:])\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = float('-inf')\n    sub_product = float('-inf')\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Write your code here\n    if not arr:\n        return 0\n    max_product = arr[0]\n    max_product_arr = [max_product]\n    for i in range(1, len(arr)):\n        if max_product < 0:\n            max_product = arr[i]\n        else:\n            max_product *= arr[i]\n        max_product_arr.append(max_product)\n    print(max_product_arr)\n    return max(max_product_arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if not arr: return 0\n    curr_max = max_product = arr[0]\n    for num in arr[1:]:\n        curr_max = max(curr_max * num, num)\n        max_product = max(curr_max, max_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            arr[i] = arr[i-1] * arr[i]\n    \n    return max(arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -999999\n    curr_max = 0\n    for i in range(len(arr)):\n        if (arr[i] > 0 and curr_max > 0):\n            curr_max = max(arr[i], curr_max * arr[i])\n        else:\n            curr_max = 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    n = len(arr)\n    if n==0: return 0\n    min_value = 1e9\n    max_value = -1e9\n    for i in range(n):\n        if arr[i]<min_value:\n            min_value = arr[i]\n        if arr[i]>max_value:\n            max_value = arr[i]\n    \n    ans = 0\n    for i in range(n):\n        for j in range(i,n):\n            prod = 1\n            for k in range(i,j+1):\n                prod *= arr[k]\n            ans = max(ans,prod)\n    return max(ans,min_value,max_value)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # if we need to return the maximum product of a subarray\n    # we can do it using two pointers and the product of the two pointers will be the answer\n    # if we need to return the maximum product of a subarray of length more than 1\n    # we can use a dictionary to store the previous max product\n    \n    max_product = -sys.maxsize-1\n    \n    curr_max_product = 1\n    \n    for i in range(len(arr)):\n        curr_max_product = max(curr_max_product * arr[i], arr[i])\n        max_product = max(max_product, curr_max_product)\n        \n    return max_product\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    max_product = arr[0]\n    current_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        current_product = max(current_product * arr[i], arr[i])\n        max_product = max(max_product, current_product)\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def max_product(nums):\n        n = len(nums)\n        if n == 0:\n            return 0\n        if n == 1:\n            return nums[0]\n        max_left = max_product(nums[1:])\n        max_right = max_product(nums[:-1])\n        return max(max_left, max_right, max_left * max_right)\n    return max_product(arr)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    size = len(arr)\n    max_product = arr[0]\n    max_product_start = 0\n    max_product_end = 0\n    current_product = 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values()))==1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict.values()) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return dict.values() == list(dict.values())[0]\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict)==1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    lst = []\n    for item in dict:\n        if dict[item] not in lst:\n            lst.append(dict[item])\n        if len(lst) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) == 1:\n        return True\n    elif len(dict) > 1:\n        for x in dict:\n            if dict[x] == n:\n                return True\n    return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict.values()) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict) == len(set(dict.values()))\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= n:\n        return False\n    else:\n        return len(set(dict.values())) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return dict[n] == dict.get(n-1)\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    final_dict = {}\n    for key, value in dict1.items():\n        if value!= {}:\n            final_dict[key] = value\n    return final_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in dict1.keys():\n        if dict1[i] == '' or dict1[i] =='':\n            dict1.pop(i)\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for item in dict1.items():\n        if len(item[1])!= 0:\n            dict2[item[0]] = item[1]\n    return dict2\n    # for item in dict1.items():\n    #     if len(item[1])!= 0:\n    #         dict2[item[0]] = item[1]\n    # return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return dict(filter(lambda d: d[1], dict1.items()))\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for i in list(dict1.keys()):\n        if len(dict1[i]) == 0:\n            del dict1[i]\n    return dict1\n    \n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    d={}\n    for i in dict1:\n        if dict1[i]!=None:\n            d[i]=dict1[i]\n    return d\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    final_dict = {}\n    for key, value in dict1.items():\n        if value!= '':\n            final_dict[key] = value\n    return final_dict\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    keys=[]\n    for key, value in dict1.items():\n        if value:\n            keys.append(key)\n    for key in keys:\n        del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == {}:\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dictionary1 = dict1\n    dictionary2 = {}\n    for key,value in dictionary1.items():\n        if value!= \"\":\n            dictionary2[key] = value\n    return dictionary2\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr:\n        return None\n    \n    curr_max, curr_min = arr[0], arr[0]\n    max_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        curr_max, curr_min = max(arr[i], curr_max * arr[i], curr_min * arr[i]), min(arr[i], curr_max * arr[i], curr_min * arr[i])\n        max_product = max(curr_max, max_product)\n        \n    return max_product\n    \n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # edge cases\n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    \n    # find the max product for left and right of the array\n    left = max_product(arr[:len(arr)//2])\n    right = max_product(arr[len(arr)//2:])\n    \n    # max product for left and right = left * right\n    max_product = max(left, right)\n    \n    # multiply products\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n        \n    return max(max_product, prod)\n    \n    \narr = [2, 3, -2, 4]\nprint(max_product(arr)"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # we will use 2 pointers that will move along the array in a circle\n    # we will check whether the current number is negative or positive. if it is positive, we will increase the positive_num\n    # and if it is negative, we will increase the negative_num\n    # if the number is negative and positive, we will multiply those numbers and check if its greater than max_product\n    # if we have found a new positive number, we can continue\n    # if we have found a new negative number, we can check if its greater than max_product, if yes, we must update max_product\n    # otherwise, we can update both the pointers\n    # if both pointers are positive and non-zero, we will keep moving them around in a circle\n    # if both pointers are negative and non-zero, we will increment them to 0 and repeat\n    # if both pointers are 0, we will continue, else we have a problem\n    # if we have found a positive number that is greater than max_product, we set max_product to this value\n    # if we have found a negative number that is greater than max_product, we will set max_product to this value\n    # if we have found a positive number that is less than max_product, we will set max_product to this value\n    # if we have found a negative number that is less than max_product, we will set max_product to this value\n    # if we have found a positive number that is equal to max_product, we will set max_product to this value\n    # if we have found a negative number that is equal to max_product, we will set max_product to this value\n    # if we have found a positive number that is equal to 0, we will set max_product to this value\n    # if we have found a negative number that is equal to 0, we will set max_product to this value\n    # if we have found a positive number that is equal to max_product, we set max_product to this value\n    # if we have found a negative number that is equal to max_product, we will set max_product to this value\n    # otherwise, we set max_product to 0\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # First max_product_starting from the left\n    max_product_starting_from_left = arr[0]\n    for i in range(1, len(arr)):\n        max_product_starting_from_left = max(max_product_starting_from_left*arr[i], arr[i])\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = arr[0]\n    for i in range(1, len(arr)):\n        temp = arr[i]\n        max_prod = max(temp, temp*max_prod)\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    n = len(arr)\n    max_product = -999999999999999\n    for i in range(n):\n        for j in range(i, n):\n            max_product = max(max_product, arr[i] * arr[j])\n    return max_product\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product_so_far = arr[0]\n    curr_max_product = 1\n    for i in range(1, len(arr)):\n        curr_max_product = max(arr[i] * curr_max_product, arr[i])\n        max_product_so_far = max(curr_max_product, max_product_so_far)\n    return max_product_so_far\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return None\n    if len(arr) == 1:\n        return arr[0]\n    result = arr[0]\n    for i in range(1,len(arr)):\n        result = max(result * arr[i], arr[i])\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    # initialization of starting and ending index of maximum product product\n    start = 0\n    end = 0\n    \n    # looping through the array\n    for i in range(1,len(arr)):\n        # if there is a multiplication, then we need to update the start and end index\n        if arr[i]*arr[start]>arr[end]*arr[i]:\n            start = i\n            end = i\n            \n        # if the multiplication is not present, then there will be only one element after that multiplication, so we \n        # update the start and end index\n        elif arr[i]*arr[start]<arr[end]*arr[i]:\n            start = i\n            end = i\n            \n    # returning the maximum product\n    return arr[start], arr[end]\n    "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if len(arr) == 0:\n        return -1\n    max_product_so_far = 0\n    min_value = arr[0]\n    for i in range(1, len(arr)):\n        min_value = min(min_value, arr[i])\n        max_product_so_far = max(max_product_so_far, min_value * arr[i])\n    return max_product_so_far\n    \n    \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return test_tup\n    else:\n        return test_tup[0] + add_pairwise(test_tup[1:])\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0]+test_tup[1],test_tup[1]+test_tup[2],test_tup[2]+test_tup[0]\n    "
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    pairwise = []\n    \n    for i in range(len(test_tup) - 1):\n        if i == 0:\n            pairwise.append(test_tup[i] + test_tup[i+1])\n        elif i == len(test_tup) - 2:\n            pairwise.append(test_tup[i] + test_tup[i-1])\n        else:\n            pairwise.append(test_tup[i] + test_tup[i-1] + test_tup[i+1])\n        \n    pairwise.append(test_tup[0] + test_tup[-1])\n    return pairwise\n    \n    \n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    numbers = list(test_tup)\n    a = numbers.pop()\n    b = numbers.pop()\n    numbers.insert(0,a+b)\n    return tuple(numbers)\n    \ntest_tup = (4,5,6)\nresult = add_pairwise(test_tup)\nprint(result)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    add_tup = []\n    for i in range(0,len(test_tup)-1):\n        add_tup.append(test_tup[i] + test_tup[i+1])\n    return add_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    if len(test_tup) == 2:\n        sum_tup = test_tup[0] + test_tup[1]\n        return sum_tup\n    else:\n        sum_tup = test_tup[0] + add_pairwise(test_tup[1:])\n        return sum_tup\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    output_tuple = ()\n    for i in range(len(test_tup)):\n        temp = test_tup[i]\n        if i < len(test_tup) - 1:\n            output_tuple += (temp + test_tup[i + 1],)\n        else:\n            output_tuple += (temp,)\n    return output_tuple\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    a, b = test_tup\n    return a + b\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    sum_pair = 0\n    for i in range(len(test_tup)):\n        sum_pair += test_tup[i]\n    return sum_pair\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    # from collections import deque\n    # def add_pairwise(test_tup):\n    #     queue = deque(test_tup)\n    #     while len(queue) > 1:\n    #         queue.appendleft(queue.popleft() + queue.popleft())\n    #     return queue.pop()\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    mul = 1\n    for i in range(n):\n        mul = mul * arr[i]\n    return mul % n\n    \n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in arr:\n        product *= i\n    product %= n\n    return product\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod = prod * arr[i] % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod * i) % n \n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    n = n \n    if len(arr) == 1: \n        return arr[0]\n    \n    arr1 = arr[0]\n    arr2 = arr[1]\n    res = arr1 * arr2\n    for i in range(len(arr)-2): \n        arr1 = arr[i+2]\n        res = res * arr1\n    return res % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    x=1\n    for i in arr:\n        x=x*i%n\n    return x\nif __name__ == \"__main__\": \n    print(find_remainder([1,2,3], 10)"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, n):\n        product = product * arr[i]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    total = 1\n    for item in arr:\n        total = total * item % n\n    return total\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for x in arr:\n        product *= x\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    \n    return prod % n\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # code here\n    if len(l) > 1:\n        for i in range(len(l)-1):\n            if l[i] + 1!= l[i+1]:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    a = []\n    for i in range(len(l)):\n        if l[i]-1!=l[i+1]:\n            a.append(l[i])\n    if len(a)==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if (l[i] == l[i+1]-1):\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(0,len(l)-1):\n        if (l[i]==l[i+1]):\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1): \n        if l[i] == l[i+1]: \n            return True\n    return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    flag = True\n    for i in range(len(l) - 1):\n        if (l[i] == l[i+1] - 1) or (l[i] == l[i+1] + 1):\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) < 2:\n        return False\n    else:\n        if l[0] == l[1]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    count = 0\n    for i in range(len(l)):\n        if l[i] == l[i+1]:\n            count += 1\n        else:\n            count = 0\n        if count > 1:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) > 1:\n        for i in range(len(l)-1):\n            if l[i+1]-l[i]!= 1:\n                return False\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    inter = []\n    for item in test_list1:\n        if item in test_list2 and item not in inter:\n            inter.append(item)\n    return tuple(inter)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # Initializing the lists\n    tuple1 = []\n    tuple2 = []\n    # Initializing the intersection\n    intersection = []\n    # Splitting the tuples into lists\n    for i in test_list1:\n        tuple1.append(i.split())\n    for i in test_list2:\n        tuple2.append(i.split())\n    # Checking for the values of each tuple\n    for i in tuple1:\n        for j in tuple2:\n            if i == j:\n                intersection.append(i)\n    # Printing the result\n    print(\"The Intersection of the two tuples is: \", end=\"\")\n    for i in intersection:\n        print(i, end=\" \")\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    ans = []\n    for i in range(len(test_list1)):\n        for j in range(len(test_list2)):\n            if test_list1[i] == test_list2[j]:\n                ans.append(test_list1[i])\n    return ans\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for i in test_list1:\n        if i in test_list2:\n            new_list.append(i)\n    return tuple(new_list)\n    \ntest_list1 = (1, 2, 3, 4, 5)\ntest_list2 = (5, 6, 7, 8, 9)\nprint(\"The intersection of elements in the given tuple list: \",tuple_intersection(test_list1, test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_intersection = []\n    for i in range(0, len(test_list1)):\n        if test_list1[i] in test_list2:\n            tuple_intersection.append(test_list1[i])\n    return tuple_intersection\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    result_tuple = tuple()\n    for i in test_list1:\n        if i in test_list2 and i not in result_tuple:\n            result_tuple = result_tuple + (i,)\n    return result_tuple\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if (len(test_list1) == len(test_list2)):\n        return tuple(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == 0:\n        return test_list1\n    if len(test_list2) == 0:\n        return test_list2\n    if test_list1[0] == test_list2[0]:\n        return test_list1[0]\n    elif test_list1[0] < test_list2[0]:\n        return tuple_intersection(test_list1[1:], test_list2)\n    else:\n        return tuple_intersection(test_list1, test_list2[1:])\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    s = []\n    for i in test_list1:\n        if i in test_list2:\n            s.append(i)\n    return tuple(s)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = ''\n    for i in range(0,len(str1)):\n        if str1[i] == ch:\n            str2 += newch\n        else:\n            str2 += str1[i]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n    \n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    for i in range(len(str1)):\n        if str1[i] == ch:\n            str1 = str1[:i] + newch + str1[i+1:]\n    return str1\n    "
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    if(isinstance(str1,str)):\n        str1 = list(str1)\n    if(isinstance(ch,str)):\n        ch = list(ch)\n    if(isinstance(newch,str)):\n        newch = list(newch)\n    if(isinstance(str1,list) and isinstance(ch,list) and isinstance(newch,list)):\n        str1 = ''.join(str1)\n        str1 = list(str1)\n        for i in range(len(str1)):\n            for j in range(len(ch)):\n                if(str1[i]==ch[j]):\n                    str1[i]=newch[j]\n        return ''.join(str1)\n    else:\n        return print('Wrong input')\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    #\n    str1=str1.replace(ch,newch)\n    print(str1)\nreplace_char('abcdef', 'c', '*')\nreplace_char('abcdef', 'c', 'b')\nreplace_char('abcdef', 'c', 'd')\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1=str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = sorted(dict1.items(), key=lambda kv: kv[1])\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda item: item[1], reverse = True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda item: item[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_keys = sorted(dict1.keys(), key=lambda k: dict1[k], reverse=True)\n    for key in sorted_keys:\n        print(f'{key} : {dict1[key]}')\n    return\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_dict = dict(sorted(dict1.items(), key=lambda item: item[1], reverse=True))\n    return sorted_dict\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return dict(sorted(dict1.items(), key=lambda kv: kv[1]))\nprint(sort_counter({'a': 4, 'b': 3, 'c': 2, 'd': 1, 'e': 2, 'f': 0, 'g': 1, 'h': 1, 'i': 3, 'j': 1, 'k': 1, 'l': 1}))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    d = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    #d = sorted(dict1.items(), key=lambda x: x[0])\n    return d\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = sorted(dict1.items(), key=lambda item: item[1], reverse=True)\n    return new_dict\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    \n    # find max and min value and return their sum\n    min_value = nums[0]\n    max_value = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max_value:\n            max_value = nums[i]\n        if nums[i] < min_value:\n            min_value = nums[i]\n    \n    # find sum and return\n    sum_nums = 0\n    for i in range(len(nums)):\n        if nums[i] >= max_value and nums[i] <= min_value:\n            sum_nums = sum_nums + nums[i]\n    return sum_nums\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    #nums = [int(n) for n in input().split(' ')]\n    #largest = -1\n    #smallest = -1\n    #for n in nums:\n        #if n < largest:\n            #largest = n\n        #if n > smallest:\n            #smallest = n\n    #print(largest + smallest)\n    #https://www.codewars.com/kata/529f3d5c6e2d4f5e9000006d/train/python\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[0] + nums[-1]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = -sys.maxsize-1\n    smallest = sys.maxsize\n    for num in nums:\n        if num > largest:\n            largest = num\n        elif num < smallest:\n            smallest = num\n    print(\"Largest Number:\", largest)\n    print(\"Smallest Number:\", smallest)\n    return largest, smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max_num = 0\n    min_num = 0\n    for i in range(len(nums)):\n        if nums[i] > max_num:\n            max_num = nums[i]\n        if nums[i] < min_num:\n            min_num = nums[i]\n    return max_num + min_num\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return(sum(sorted(nums)[:2]))\n    \n    \n    \n    \n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    lst = []\n    for i in range(0,len(nums)):\n        if nums[i] > nums[-1]:\n            lst.append(nums[i])\n    for j in range(0,len(nums)-1):\n        if nums[j] < nums[-1]:\n            lst.append(nums[j])\n    print(sum(lst))\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = None\n    smallest = None\n    for x in nums:\n        if smallest is None:\n            smallest = x\n        elif x < smallest:\n            smallest = x\n        elif largest is None:\n            largest = x\n        elif x > largest:\n            largest = x\n    return largest + smallest\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = 0\n    smallest = 0\n    for num in nums:\n        if num > largest:\n            largest = num\n        if num < smallest:\n            smallest = num\n    print('largest number in the array:', largest)\n    print('smallest number in the array:', smallest)\n    sum = largest + smallest\n    print('sum of the largest and smallest number in the array:', sum)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string\n    \n    \ndef is_upper(string):\n    '''\n    Write a python function to convert the given string to upper case.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string\n    \n    \ndef is_capital(string):\n    '''\n    Write a python function to check if given string is a capital string or not.\n    '''\n    \n    capital = string.capitalize()\n    return capital\n    \n    \ndef is_title(string):\n    '''\n    Write a python function to check if the given string is title case string or not.\n    '''\n    \n    title = string.title()\n    return title\n    \n    \ndef find_first_lower(string):\n    '''\n    Write a python function to return the first lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[0]\n    \n    \ndef find_first_upper(string):\n    '''\n    Write a python function to return the first uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[0]\n    \n    \ndef find_last_lower(string):\n    '''\n    Write a python function to return the last lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[-1]\n    \n    \ndef find_last_upper(string):\n    '''\n    Write a python function to return the last uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[-1]\n    \n    \ndef find_second_lower(string):\n    '''\n    Write a python function to return the second lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[1]\n    \n    \ndef find_second_upper(string):\n    '''\n    Write a python function to return the second uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[1]\n    \n    \ndef find_third_lower(string):\n    '''\n    Write a python function to return the third lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[2]\n    \n    \ndef find_third_upper(string):\n    '''\n    Write a python function to return the third uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[2]\n    \n    \ndef find_four_lower(string):\n    '''\n    Write a python function to return the fourth lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[3]\n    \n    \ndef find_four_upper(string):\n    '''\n    Write a python function to return the fourth uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[3]\n    \n    \ndef find_fifth_lower(string):\n    '''\n    Write a python function to return the fifth lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[4]\n    \n    \ndef find_fifth_upper(string):\n    '''\n    Write a python function to return the fifth uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[4]\n    \n    \ndef find_sixth_lower(string):\n    '''\n    Write a python function to return the sixth lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[5]\n    \n    \ndef find_sixth_upper(string):\n    '''\n    Write a python function to return the sixth uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[5]\n    \n    \ndef find_seventh_lower(string):\n    '''\n    Write a python function to return the seventh lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[6]\n    \n    \ndef find_seventh_upper(string):\n    '''\n    Write a python function to return the seventh uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[6]\n    \n    \ndef find_eighth_lower(string):\n    '''\n    Write a python function to return the eighth lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[7]\n    \n    \ndef find_eighth_upper(string):\n    '''\n    Write a python function to return the eighth uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[7]\n    \n    \ndef find_ninth_lower(string):\n    '''\n    Write a python function to return the ninth lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[8]\n    \n    \ndef find_ninth_upper(string):\n    '''\n    Write a python function to return the ninth uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[8]\n    \n    \ndef find_tenth_lower(string):\n    '''\n    Write a python function to return the tenth lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[9]\n    \n    \ndef find_tenth_upper(string):\n    '''\n    Write a python function to return the tenth uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[9]\n    \n    \ndef find_eleventh_lower(string):\n    '''\n    Write a python function to return the eleventh lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[10]\n    \n    \ndef find_eleventh_upper(string):\n    '''\n    Write a python function to return the eleventh uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[10]\n    \n    \ndef find_twelfth_lower(string):\n    '''\n    Write a python function to return the twelfth lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[11]\n    \n    \ndef find_twelfth_upper(string):\n    '''\n    Write a python function to return the twelfth uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[11]\n    \n    \ndef find_thirteenth_lower(string):\n    '''\n    Write a python function to return the thirteenth lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[12]\n    \n    \ndef find_thirteenth_upper(string):\n    '''\n    Write a python function to return the thirteenth uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    return upper_string[12]\n    \n    \ndef find_fourteenth_lower(string):\n    '''\n    Write a python function to return the fourteenth lowercase character of given string.\n    '''\n    \n    lower_string = string.lower()\n    return lower_string[13]\n    \n    \ndef find_fourteenth_upper(string):\n    '''\n    Write a python function to return the fourteenth uppercase character of given string.\n    '''\n    \n    upper_string = string.upper()\n    retur"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    print(string.lower())\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.replace(\"a\",\"\").replace(\"b\",\"\").replace(\"c\",\"\").replace(\"d\",\"\").replace(\"e\",\"\").replace(\"f\",\"\").replace(\"g\",\"\").replace(\"h\",\"\").replace(\"i\",\"\").replace(\"j\",\"\").replace(\"k\",\"\").replace(\"l\",\"\").replace(\"m\",\"\").replace(\"n\",\"\").replace(\"o\",\"\").replace(\"p\",\"\").replace(\"q\",\"\").replace(\"r\",\"\").replace(\"s\",\"\").replace(\"t\",\"\").replace(\"u\",\"\").replace(\"v\",\"\").replace(\"w\",\"\").replace(\"x\",\"\").replace(\"y\",\"\").replace(\"z\",\"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower().replace(' ','')\n    \n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = str1.replace(str1.lower(), \"\")\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    output = \"\"\n    for x in range(len(str1)):\n        if not (str1[x].isupper()):\n            output += str1[x]\n    return output\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]+', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub(r'[a-z]','',str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    if not str1:\n        return str1\n    return re.sub(r'[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = \"\"\n    for char in str1:\n        if not char.islower():\n            result += char\n    return result\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    # return re.sub(\"[a-z]+\", \"\", str1)\n    # return re.sub(\"\\W+\", \"\", str1)\n    # return re.sub(\"[a-z]+\", \"\", str1, flags=re.IGNORECASE)\n    return str1.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return \"\".join([letter for letter in str1 if not letter.islower()])\n    \ndef remove_digits(str1):\n    '''\n    Write a function to remove all digits from a given string.\n    '''\n    return \"\".join([letter for letter in str1 if not letter.isdigit()])\n    \ndef get_words_in_string(str1):\n    '''\n    Write a function that returns a list of words from a given string.\n    '''\n    return re.findall(r'\\w+',str1)\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function that removes all punctuation from a given string.\n    '''\n    return \"\".join([letter for letter in str1 if not letter in \"~!@#$%^&*()_+={}[]:;?><|/.,'\\\" \"])\n    \ndef remove_nonletters(str1):\n    '''\n    Write a function that removes all characters that are not letters from a given string.\n    '''\n    return \"\".join([letter for letter in str1 if letter.isalpha()])\n    \ndef get_unique_words_in_list(str1):\n    '''\n    Write a function that returns a list of unique words from a given list.\n    '''\n    return list(set(str1))\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to determine if a string is a palindrome.\n    '''\n    return str1 == str1[::-1]\n    \ndef remove_numbers(str1):\n    '''\n    Write a function that removes all numbers from a given string.\n    '''\n    return \"\".join([letter for letter in str1 if not letter.isdigit()])\n    \ndef find_longest_word(str1):\n    '''\n    Write a function to find the longest word from a given string.\n    '''\n    return max(str1.split(), key=len)\n    \ndef remove_multiple_spaces(str1):\n    '''\n    Write a function to remove all multiple spaces from a given string.\n    '''\n    return str1.replace(\"  \", \" \")\n    \ndef replace_special_characters(str1):\n    '''\n    Write a function to replace all special characters from a given string.\n    '''\n    return str1.replace(\"#\", \"\")\n    \ndef remove_all_special_characters(str1):\n    '''\n    Write a function to remove all special characters from a given string.\n    '''\n    return \"\".join(re.findall(r'[^\\w\\s#]',str1))\n    \ndef remove_all_special_characters_except_spaces(str1):\n    '''\n    Write a function to remove all special characters except spaces from a given string.\n    '''\n    return \"\".join(re.findall(r'[^\\s]',str1))\n    \ndef lowercase_string(str1):\n    '''\n    Write a function to convert a string in lowercase letters.\n    '''\n    return str1.lower()\n    \ndef remove_and_print_words_from_list(str1):\n    '''\n    Write a function that removes and prints all the words from a list of strings.\n    '''\n    return \" \".join([word for word in str1 if not word.isalpha()])\n    \ndef remove_duplicates_from_string(str1):\n    '''\n    Write a function to remove duplicates from a given string.\n    '''\n    return \"\".join(set(str1))\n    \ndef remove_letters_from_string(str1, letters):\n    '''\n    Write a function to remove the letters from a given string.\n    '''\n    return \"\".join([letter for letter in str1 if letter not in letters])\n    \ndef remove_duplicates_from_list(str1):\n    '''\n    Write a function to remove duplicates from a given list.\n    '''\n    return list(set(str1))\n    \ndef count_uppercase_letters(str1):\n    '''\n    Write a function to count the number of uppercase letters from a given string.\n    '''\n    return sum([1 for letter in str1 if letter.isupper()])\n    \ndef count_lowercase_letters(str1):\n    '''\n    Write a function to count the number of lowercase letters from a given string.\n    '''\n    return sum([1 for letter in str1 if letter.islower()])\n    \ndef count_digits(str1):\n    '''\n    Write a function to count the number of digits from a given string.\n    '''\n    return sum([1 for letter in str1 if letter.isdigit()])\n    \ndef count_nonalpha_letters(str1):\n    '''\n    Write a function to count the number of non-alphabetical letters from a given string.\n    '''\n    return sum([1 for letter in str1 if letter.isalpha()])\n    \ndef get_most_frequent_letter(str1):\n    '''\n    Write a function that returns the most frequent letter from a given string.\n    '''\n    return max(str1.split(), key=str1.count)\n    \ndef get_first_word_in_string(str1):\n    '''\n    Write a function that returns the first word from a given string.\n    '''\n    return str1.split()[0]\n    \ndef get_words_from_list_with_pattern(str1, pattern):\n    '''\n    Write a function that returns a list of words from a given string that match a given regular expression pattern.\n    '''\n    return re.findall(pattern, str1)\n    \ndef get_longest_word(str1):\n    '''\n    Write a function that returns the longest word from a given string.\n    '''\n    return max(str1.split(), key=len)\n    \ndef get_last_word_in_string(str1):\n    '''\n    Write a function that returns the last word from a given string.\n    '''\n    return str1.split()[-1]\n    \ndef get_longest_word_with_number_of_characters(str1, n):\n    '''\n    Write a function that returns the longest word in a given string that contains at least n characters.\n    '''\n    return max([word for word in str1.split() if len(word) >= n], key=len)\n    \ndef get_most_common_letters(str1, n):\n    '''\n    Write a function that returns the n most common letters from a given string.\n    '''\n    return \"\".join(sorted(list(set(str1.split())))[-n:])\n    \ndef find_number_of_matches_for_pattern(str1, pattern):\n    '''\n    Write a function that returns the number of matches for a given pattern.\n    '''\n    return sum(1 for _ in re.finditer(pattern, str1))\n    \ndef remove_pattern(str1, pattern):\n    '''\n    Write a function that removes the pattern from a given string.\n    '''\n    return re.sub(pattern, \"\", str1)\n    \ndef replace_pattern(str1, old_pattern, new_pattern):\n    '''\n    Write a function that replaces a pattern in a given string.\n    '''\n    return re.sub(old_pattern, new_pattern, str1)\n    \ndef get_lines_in_string(str1, pattern):\n    '''\n    Write a function that returns a list of lines in a given string that match a given regular expression pattern.\n    '''\n    return re.findall(pattern, str1)\n    \ndef get_lines_from_file(file_name, pattern):\n    '''\n    Write a function that reads a file and returns a list of lines that match a given regular expression pattern.\n    '''\n    return re.findall(pattern, file_name)\n    \ndef remove_punctuation_from_line(str1):\n    '''\n    Write a function that removes all punctuation characters from a line.\n    '''\n    return \"\".join([letter for letter in str1 if not letter in \"~!@#$%^&*()_+={}[]:;?><|/.,"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n//10!= 0 :\n        n //= 10\n    return n\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s = str(n)\n    return s[0]\n    \n    \ndef second_Digit(n):  \n    '''\n    Write a python function to find the second digit of a given number.\n    '''\n    s = str(n)\n    return s[1]\n    \n    \ndef sum_of_Digits(n):  \n    '''\n    Write a python function to find the sum of digits in a given number.\n    '''\n    s = str(n)\n    num_str = \"\"\n    for i in s:\n        num_str += i\n    return sum(map(int,num_str))\n    \n    \ndef is_Prime(n):\n    '''\n    Write a python function to check if the number is prime or not.\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n    \n    \ndef is_palindrome(n):\n    '''\n    Write a python function to check if a given number is palindrome or not.\n    '''\n    s = str(n)\n    s_rev = s[::-1]\n    if s == s_rev:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    first = n\n    while first // 10!= 0 :\n        first = first // 10\n    return first\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    # your code here\n    return n // 10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if n == 0 :\n        return n\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r > 0 :\n            return r\n    return r\n        \n        \n        \ndef last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n == 0 :\n        return n\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r == 0 :\n            return 0\n        else :\n            return r\n        \n        \n        \ndef Digits(n) :\n    '''\n    Write a python function to find the number of digits of a given number.\n    '''\n    if n == 0 :\n        return 0\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r == 0 :\n            return 1\n        else :\n            return 1+Digits(r)\n        \n        \n        \ndef no_Of_Zeros(n) :\n    '''\n    Write a python function to find the number of zeros in a given number.\n    '''\n    if n == 0 :\n        return 1\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r == 0 :\n            return 1+no_Of_Zeros(r)\n        else :\n            return 1+no_Of_Zeros(r)\n        \n        \n        \ndef sum_Digits(n) :\n    '''\n    Write a python function to find the sum of digits of a given number.\n    '''\n    if n == 0 :\n        return 0\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r == 0 :\n            return 0\n        else :\n            return 10+sum_Digits(r)\n        \n        \n        \ndef number_Of_Ones(n) :\n    '''\n    Write a python function to find the number of ones in a given number.\n    '''\n    if n == 0 :\n        return 0\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r == 1 :\n            return 1+number_Of_Ones(r)\n        else :\n            return 1+number_Of_Ones(r)\n        \n        \n        \ndef no_Of_Ones(n) :\n    '''\n    Write a python function to find the number of ones in a given number.\n    '''\n    if n == 0 :\n        return 0\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r == 1 :\n            return 1+no_Of_Ones(r)\n        else :\n            return 1+no_Of_Ones(r)\n        \n        \n        \ndef reverse(n) :\n    '''\n    Write a python function to find the reverse of a given number.\n    '''\n    if n == 0 :\n        return 0\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r > 0 :\n            return r+reverse(n)\n        else :\n            return reverse(n)\n        \n        \n        \ndef is_Palindrome(n) :\n    '''\n    Write a python function to find whether a given number is a palindrome or not.\n    '''\n    if n == 0 :\n        return True\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r > 0 :\n            return is_Palindrome(r) and is_Palindrome(n)\n        else :\n            return is_Palindrome(n)\n        \n        \n        \ndef palindrome(n) :\n    '''\n    Write a python function to find whether a given number is a palindrome or not.\n    '''\n    if n == 0 :\n        return True\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r > 0 :\n            return palindrome(r) and palindrome(n)\n        else :\n            return palindrome(n)\n        \n        \n        \ndef palindrome2(n) :\n    '''\n    Write a python function to find whether a given number is a palindrome or not.\n    '''\n    if n == 0 :\n        return True\n    r = n%10\n    n = n//10\n    if r == n :\n        return True\n    else :\n        return False\n        \n        \n        \ndef DivisibleBySeven(n) :\n    '''\n    Write a python function to find whether a given number is divisible by 7 or not.\n    '''\n    if n == 0 :\n        return True\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r == 7 :\n            return True\n        else :\n            return False\n        \n        \n        \ndef ArmstrongNumber(n) :\n    '''\n    Write a python function to find whether a given number is armstrong or not.\n    '''\n    r = 0\n    while n > 0 :\n        r = r+n%10\n        n = n//10\n    if r == n :\n        return True\n    else :\n        return False\n        \n        \n        \ndef armstrong(n) :\n    '''\n    Write a python function to find whether a given number is armstrong or not.\n    '''\n    if n == 0 :\n        return True\n    while n > 0 :\n        r = 0\n        n = n//10\n        while n > 0 :\n            r = r+n%10\n            n = n//10\n        if r == n :\n            return True\n        else :\n            return False\n        \n        \n        \ndef Subset(a, b):\n    '''\n    Write a python function to check whether a given set is a subset of another given set.\n    '''\n    if len(a) == 0 or len(b) == 0 :\n        return False\n    r = 0\n    while r < len(b) :\n        if a[r] not in b :\n            return False\n        r = r+1\n    return True\n        \n        \n        \ndef in_Sorted(s, p) :\n    '''\n    Write a python function to check whether a given set is in a given sorted set.\n    '''\n    if len(s) == 0 or len(p) == 0 :\n        return False\n    r = 0\n    while r < len(p) :\n        if s[r]!= p[r] :\n            return False\n        r = r+1\n    return True\n        \n        \n        \ndef First_K_Digits(n, k) :\n    '''\n    Write a python function to find the first k digits of a given number.\n    '''\n    if n == 0 :\n        return 0\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r == 0 :\n            return 0\n        else :\n            return First_K_Digits(r, k)\n        \n        \n        \ndef First_K_Digits2(n, k) :\n    '''\n    Write a python function to find the first k digits of a given number.\n    '''\n    if n == 0 :\n        return 0\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r == 0 :\n            return 0\n        else :\n            return First_K_Digits2(r, k)\n        \n        \n        \ndef reverse_words(str) :\n    '''\n    Write a python function to find the reverse of a given string.\n    '''\n    if str == \"\" :\n        return str\n    str = str.split()\n    s = \"\"\n    for i in range(len(str)-1, -1, -1) :\n        s += str[i]\n    return s\n        \n        \n        \ndef triplet(n,k,d):\n    '''\n    Write a python function to find whether a given number is triplet or not.\n    '''\n    if n == 0 :\n        return False\n    while n > 0 :\n        r = n%10\n        n = n//10\n        if r == 0 :\n            return False\n        else :\n            if (k%r == 0) and (d%r == 0"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n // 10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    while n > 9 :\n        n = n/10\n    return int(n)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n%10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    count = 0\n    while(n!= 0) :\n        count = count + 1\n        n = n // 10\n    return count\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    l = []\n    for x in list:\n        if x % 2!= 0:\n            l.append(x)\n    return l\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i % 2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odds = []\n    for i in list:\n        if i % 2 == 1:\n            odds.append(i)\n    return odds\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd =[]\n    for i in range(len(list)):\n        if list[i]%2!=0:\n            odd.append(list[i])\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return list[1::2] \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    return (list[1::2]) \nprint(Split([1,2,3,4,5,6]))\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if list[i] % 2!= 0:\n            odd.append(list[i])\n    return odd\n    \n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if (i % 2) == 0:\n            odd.append(list[i])\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for i in list:\n        if i % 2!= 0:\n            odd_list.append(i)\n    return odd_list\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def cube(x) :\n        return x**3\n    sum_of_first_n_numbers = sum(list(map(cube, range(1,n+1))))\n    sum_of_first_n_numbers_in_squares = sum(list(map(cube, range(1,n+1))))\n    return sum_of_first_n_numbers - sum_of_first_n_numbers_in_squares\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sumOfCubes = 0\n    for i in range(n+1):\n        sumOfCubes += i**3\n    sumOfN = 0\n    for i in range(n+1):\n        sumOfN += i\n    return sumOfN**3 - sumOfCubes\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    from math import factorial\n    def difference(n) : \n        return (factorial(n) * (n ** 2)) - (factorial(n))\n    print(difference(1))\n    print(difference(2))\n    print(difference(3))\n    print(difference(4))\n    print(difference(5))\n    print(difference(6))\n    print(difference(7))\n    print(difference(8))\n    print(difference(9))\n    print(difference(10))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    #n=int(input(\"enter the no\"))\n    i=0\n    sum=0\n    while(i<n):\n        sum=sum+(i**3)\n        i+=1\n    sum1=0\n    while(i<n):\n        sum1=sum1+(i**3)\n        i+=1\n    print(sum1-sum)\n    \ndef factorial(n) :\n    '''\n    Write a python program to find the factorial of a given number.\n    '''\n    i=1\n    while(i<=n):\n        i=i*(n+1)\n    return i\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n1=[]\n    n2=[]\n    for i in range(0,n):\n        n1.append(i)\n    for j in range(n):\n        n2.append(j**3)\n    n1.extend(n2)\n    print(sum(n1))\n    print(sum(n2))\n    print(sum(n1)-sum(n2))\n    return n1\nn=int(input())\nprint(difference(n))"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1):\n        sum+=i*i*i\n    print(\"The difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers is:\",sum)\ndef geometric(n):\n    '''\n    Write a python function to compute the geometric mean of the first n natural numbers.\n    '''\n    sum=1\n    for i in range(1,n+1):\n        sum*=i\n    print(\"The geometric mean of the first n natural numbers is:\",sum**(1/n))\ndef isPrime(n):\n    '''\n    Write a python function to determine whether the given number is prime or not.\n    '''\n    if n>1:\n        for i in range(2,n):\n            if n%i==0:\n                print(n,\"is not a prime number\")\n                break\n        else:\n            print(n,\"is a prime number\")\n    else:\n        print(n,\"is not a prime number\")\ndef average(a,b):\n    '''\n    Write a python function to compute the average of the given numbers.\n    '''\n    print(\"The average of the given numbers is:\",a+b/2)\ndef reverse(s):\n    '''\n    Write a python function to reverse the string.\n    '''\n    print(s[::-1])\ndef addDigits(n):\n    '''\n    Write a python function to find the sum of the digits of the given number.\n    '''\n    sum=0\n    while n>0:\n        sum+=n%10\n        n=n//10\n    print(\"The sum of the digits of the given number is:\",sum)\ndef factorial(n):\n    '''\n    Write a python function to compute the factorial of the given number.\n    '''\n    if n==0:\n        print(\"Factorial of 0 is 1\")\n    elif n==1:\n        print(\"Factorial of 1 is 1\")\n    else:\n        fact=1\n        for i in range(1,n+1):\n            fact=fact*i\n        print(\"The factorial of\",n,\"is:\",fact)\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    a=0\n    s=s.lower()\n    if s[0]==s[-1]:\n        for i in range(len(s)//2):\n            if s[i]==s[-i-1]:\n                a=a+1\n            else:\n                return False\n        if a==len(s)/2:\n            return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    # your code here\n    a=0\n    s=s.lower()\n    if s[0]==s[-1]:\n        for i in range(len(s)//2):\n            if s[i]==s[-i-1]:\n                a=a+1\n            else:\n                return False\n        if a==len(s)/2:\n            return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    return s == s[::-1]\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is a palindrome or not.\n    '''\n    s = s.lower()\n    if s == s[::-1]:\n        return True\n    else:\n        return False\ndef isPalindrome(s):\n    '''\n    Write a python function to check if the string is "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum1=sum(range(1,n+1))\n    sum2=sum(range(1,n+1))**3\n    return sum2-sum1\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    return sum(list(map(lambda x : x**3, range(1, n+1)))) - sum(list(map(lambda x : x**3, range(1, n+1))))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0:\n        return 0\n    return n*(n+1)//2 - sum([x*x*x for x in range(0,n)])\n    \n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum += i**3\n    sum2 = 0\n    for i in range(n):\n        sum2 += i\n    print(sum - sum2)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if (A[i] ^ A[j]) % 2!= 0:\n                count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    res = 0\n    for i in range(N):\n        if A[i]&1!= A[i+1]&1 :\n            res = res+1\n    return res\nA = list(map(int,input().split()))\nN = len(A)\nprint(find_Odd_Pair(A,N)"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1,N):\n            if A[i] ^ A[j] == 1:\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    # For any pair, xor_value > 0 \n    \n    pair = 0\n    for i in range(0,N-1) : \n        for j in range(i+1,N) : \n            if A[i] ^ A[j] > 0 : \n                pair += 1\n    return pair \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    ans = 0\n    for i in range(1,N+1):\n        ans = ans + ((A & i)>>1)\n    print(ans)\n    return ans\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(N):\n        if (A[i] & 1) == 1:\n            odd_count += 1\n    return odd_count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        if (A[i] & 1)!= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    # edge cases\n    if N == 0 : \n        return 0\n    if N == 1 : \n        return 0\n    \n    # looping from 0 to (n-1)\n    for i in range(0,N-1) :\n        if A[i] == A[i+1] :\n            continue\n        else :\n            if A[i] ^ A[i+1] == 1 :\n                count += 1\n                \n    # recursion\n    return find_Odd_Pair(A,N-1) + count \n    "
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    i = 0 \n    count = 0\n    while i < N : \n        if (A[i] ^ i) % 2 == 1 : \n            count += 1\n        i += 1\n    return count \n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_count = 0\n    for i in range(0, N):\n        for j in range(i + 1, N):\n            if A[i] ^ A[j] == 1:\n                odd_count += 1\n    return odd_count \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n    "
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if len(string) < 1:\n        return string\n    else:\n        if string[0].isupper():\n            return string.lower()\n        elif string[0].islower():\n            return string.upper()\n        else:\n            return string\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    string = string.upper()\n    return string\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    string = string.lower()\n    return string.upper()\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == \"\":\n        return \"\"\n    lst = list(string)\n    for i, x in enumerate(lst):\n        if x.isupper():\n            lst[i] = x.lower()\n        else:\n            lst[i] = x.upper()\n    return \"\".join(lst)\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if isinstance(string, str):\n        return string.upper() if is_lower(string) else string.lower()\n    else:\n        raise TypeError(\"Input must be a string\")\n        \ndef is_lower(string):\n    '''\n    Write a function to check if all the characters in a string are lower case.\n    '''\n    if isinstance(string, str):\n        return all(char.islower() for char in string)\n    else:\n        raise TypeError(\"Input must be a string\")\n    \ndef is_integer(number):\n    '''\n    Write a function to check if a passed argument is an integer or not.\n    '''\n    if isinstance(number, int):\n        return True\n    elif isinstance(number, float):\n        return number.is_integer()\n    else:\n        raise TypeError(\"Input must be a number\")\n        \ndef remove_all(str1, str2):\n    '''\n    Write a function to remove all occurrences of a substring from another string.\n    '''\n    return str1.replace(str2, '')\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    d1, d2 = n1, n2\n    dsum = 0\n    while d1 > 0:\n        dsum += abs(d1 - d2)\n        d1, d2 = d1 // 10, d2 // 10\n    return dsum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    dif = 0\n    for i in range(len(n1)):\n        dif += int(n1[i]) - int(n2[i])\n    return dif\n    \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    diff = abs(n1 - n2)\n    digit_sum = 0\n    for i in range(1,10):\n        if diff == i:\n            digit_sum += 1\n        else:\n            diff -= i\n            digit_sum += 1\n    return digit_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_difference = 0\n    while n1 or n2:\n        sum_difference += abs(n1 % 10 - n2 % 10)\n        n1 = n1 // 10\n        n2 = n2 // 10\n    return sum_difference\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == 0:\n        return 0\n    if n2 == 0:\n        return 0\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance_sum = 0\n    while n1>0 or n2>0:\n        distance_sum += abs(n1%10-n2%10)\n        n1 = n1//10\n        n2 = n2//10\n    return distance_sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = str(n1)\n    n2 = str(n2)\n    d = len(n1)\n    diff = 0\n    for i in range(d):\n        diff += abs(int(n1[i]) - int(n2[i]))\n    return diff\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    \n    d1 = list(map(int, str(n1)))\n    d2 = list(map(int, str(n2)))\n    \n    sum_d1_d2 = 0\n    for i in range(len(d1)):\n        sum_d1_d2 += abs(d1[i] - d2[i])\n    \n    return sum_d1_d2\n    \n    \n    \nif __name__ == '__main__':\n    \n    print(digit_distance_nums(1234, 1234))\n    print(digit_distance_nums(1234, 2345))\n    print(digit_distance_nums(2345, 1234))\n    print(digit_distance_nums(2345, 2345))\n    \n    \n    \n    \n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 == n2:\n        return 0\n    if n1 > n2:\n        num1, num2 = n1, n2\n    else:\n        num1, num2 = n2, n1\n    distance = 0\n    while num1 > 0:\n        distance += abs(num1 - num2)\n        num1, num2 = num1 // 10, num2 // 10\n    return distance\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    if n1 > n2:\n        n1, n2 = n2, n1\n    sum = 0\n    while n1!= 0 or n2!= 0:\n        sum += abs(n1 % 10 - n2 % 10)\n        n1 //= 10\n        n2 //= 10\n    return sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    \n    if size == 0:\n        return\n    \n    max_sum = a[0]\n    curr_sum = a[0]\n    \n    for i in range(1, size):\n        curr_sum = max(curr_sum + a[i], a[i])\n        max_sum = max(max_sum, curr_sum)\n    \n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    \n    max_sum = a[0]\n    curr_sum = 0\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # Dict to track the sum of the sublists\n    sums = {\n        0: 1\n    }\n    max_sum = 0\n    # Iterate through the list\n    for i in range(0, size):\n        # Iterate through the dictionary\n        for j in range(0, max_sum):\n            # Increment the dictionary sum\n            sums[sums[j] + a[i]] = sums[sums[j]] + 1\n            # Check if the current sum is greater than max_sum\n            if sums[sums[j] + a[i]] > max_sum:\n                # Update the max_sum\n                max_sum = sums[sums[j] + a[i]]\n    # Return the max_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = -1\n    max_ending_here = 0\n    for i in range(size):\n        max_ending_here += a[i]\n        if max_so_far < max_ending_here:\n            max_so_far = max_ending_here\n        if max_ending_here < 0:\n            max_ending_here = 0\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(size):\n        for j in range(i, size):\n            sub_sum = sum(a[i:j+1])\n            if sub_sum > max_sum:\n                max_sum = sub_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = float('-inf')\n    sum_list = []\n    for i in range(size):\n        sum_list.append(a[i])\n        if sum(sum_list) <= 0:\n            sum_list = []\n            sum_list.append(a[i])\n        elif sum(sum_list) > 0:\n            while sum(sum_list) >= 0:\n                if max_sum < sum(sum_list):\n                    max_sum = sum(sum_list)\n                sum_list.remove(sum_list[0])\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -(sys.maxsize-1)\n    curr_sum = 0\n    start_index = 0\n    end_index = 0\n    \n    for i in range(0,size):\n        curr_sum += a[i]\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = 0\n    curr_idx = 0\n    for i in range(size):\n        curr_sum = curr_sum + a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            curr_idx = i\n    return max_sum, curr_idx\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size < 0:\n        return None\n    sums = [0 for _ in range(size)]\n    max_sum = 0\n    for i in range(size):\n        sums[i] = a[i]\n        max_sum = max(max_sum, sums[i])\n        for j in range(i + 1, size):\n            sums[j] = sums[j - 1] + a[j]\n            max_sum = max(max_sum, sums[j])\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -sys.maxsize - 1\n    curr_sum = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1_elements = test_tup1[0]\n    test_tup2_elements = test_tup2[0]\n    union = list(set(test_tup1_elements) | set(test_tup2_elements))\n    union.sort()\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_set1 = set(test_tup1)\n    test_set2 = set(test_tup2)\n    return (test_set1 | test_set2)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    \n    #declare and initialize variables\n    lst1 = []\n    lst2 = []\n    union_lst = []\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    # test_tup1 = (2,4,5,5,6,7,8)\n    # test_tup2 = (1,3,4,6,7)\n    # union = set(test_tup1).union(set(test_tup2))\n    union = set(test_tup1) | set(test_tup2)\n    union = sorted(union)\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for i in range(len(test_tup1)):\n        union.append(test_tup1[i])\n    for i in range(len(test_tup2)):\n        if test_tup2[i] not in union:\n            union.append(test_tup2[i])\n    union.sort()\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    for i in test_tup1:\n        if i not in union_tup:\n            union_tup.append(i)\n    for j in test_tup2:\n        if j not in union_tup:\n            union_tup.append(j)\n    union_tup.sort()\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    union = set1 | set2\n    sorted_union = sorted(union)\n    print(sorted_union)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = tuple()\n    union_tup = test_tup1 + test_tup2\n    union_tup = sorted(union_tup)\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    for elem in test_tup1:\n        union_list.append(elem)\n    for elem in test_tup2:\n        if elem not in union_list:\n            union_list.append(elem)\n    union_list.sort()\n    return union_list\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    #make a list of union\n    union = []\n    for item in test_tup1:\n        if item not in test_tup2:\n            union.append(item)\n    for item in test_tup2:\n        if item not in test_tup1:\n            union.append(item)\n    #sort the union\n    union.sort()\n    return union\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    curr_max = max(lst, key=lambda x: len(x))\n    return len(curr_max)\n    \ndef Find_Max_Length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    return max(len(sub_list) for sub_list in lst)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for i in lst:\n        if len(i) > max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max = 0\n    for i in range(0, len(lst)):\n        if len(lst[i]) > max:\n            max = len(lst[i])\n    print(max)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    l=len(lst)\n    s = 0\n    count = 0\n    for i in range(l):\n        if lst[i] == 1:\n            count = count + 1\n        else:\n            count = 0\n        if count > s:\n            s = count\n        \n    return s\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 1:\n        return n\n    n = 2\n    while n <= n:\n        for i in range(n-1):\n            for j in range(i+1, n):\n                sub_lst = lst[i:j]\n                sub_lst.sort()\n                if len(sub_lst) < n:\n                    continue\n                elif len(sub_lst) == n:\n                    if sub_lst[0]!= sub_lst[n-1]:\n                        continue\n                sub_lst.sort(reverse = True)\n                if sub_lst[0]!= sub_lst[n-1]:\n                    continue\n                if len(sub_lst) == n:\n                    return n\n        n += 1\n    return n\n        \n    \n    \ndef Find_Max_Length_2(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 1:\n        return n\n    n = 2\n    while n <= n:\n        for i in range(n-1):\n            for j in range(i+1, n):\n                sub_lst = lst[i:j]\n                sub_lst.sort()\n                if len(sub_lst) < n:\n                    continue\n                elif len(sub_lst) == n:\n                    if sub_lst[0]!= sub_lst[n-1]:\n                        continue\n                sub_lst.sort(reverse = True)\n                if sub_lst[0]!= sub_lst[n-1]:\n                    continue\n                if len(sub_lst) == n:\n                    return n\n        n += 1\n    return n\n    \n    \ndef find_max_length(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 1:\n        return n\n    n = 2\n    while n <= n:\n        for i in range(n-1):\n            for j in range(i+1, n):\n                sub_lst = lst[i:j]\n                sub_lst.sort()\n                if len(sub_lst) < n:\n                    continue\n                elif len(sub_lst) == n:\n                    if sub_lst[0]!= sub_lst[n-1]:\n                        continue\n                sub_lst.sort(reverse = True)\n                if sub_lst[0]!= sub_lst[n-1]:\n                    continue\n                if len(sub_lst) == n:\n                    return n\n        n += 1\n    return n\n    \ndef find_max_length_2(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 1:\n        return n\n    n = 2\n    while n <= n:\n        for i in range(n-1):\n            for j in range(i+1, n):\n                sub_lst = lst[i:j]\n                sub_lst.sort()\n                if len(sub_lst) < n:\n                    continue\n                elif len(sub_lst) == n:\n                    if sub_lst[0]!= sub_lst[n-1]:\n                        continue\n                sub_lst.sort(reverse = True)\n                if sub_lst[0]!= sub_lst[n-1]:\n                    continue\n                if len(sub_lst) == n:\n                    return n\n        n += 1\n    return n\n    \n    \n    \ndef Find_Max_Length_3(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 1:\n        return n\n    n = 2\n    while n <= n:\n        for i in range(n-1):\n            for j in range(i+1, n):\n                sub_lst = lst[i:j]\n                sub_lst.sort()\n                if len(sub_lst) < n:\n                    continue\n                elif len(sub_lst) == n:\n                    if sub_lst[0]!= sub_lst[n-1]:\n                        continue\n                sub_lst.sort(reverse = True)\n                if sub_lst[0]!= sub_lst[n-1]:\n                    continue\n                if len(sub_lst) == n:\n                    return n\n        n += 1\n    return n\n    \n    \n    \ndef Find_Max_Length_4(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 1:\n        return n\n    n = 2\n    while n <= n:\n        for i in range(n-1):\n            for j in range(i+1, n):\n                sub_lst = lst[i:j]\n                sub_lst.sort()\n                if len(sub_lst) < n:\n                    continue\n                elif len(sub_lst) == n:\n                    if sub_lst[0]!= sub_lst[n-1]:\n                        continue\n                sub_lst.sort(reverse = True)\n                if sub_lst[0]!= sub_lst[n-1]:\n                    continue\n                if len(sub_lst) == n:\n                    return n\n        n += 1\n    return n\n    \n    \n    \ndef Find_Max_Length_5(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 1:\n        return n\n    n = 2\n    while n <= n:\n        for i in range(n-1):\n            for j in range(i+1, n):\n                sub_lst = lst[i:j]\n                sub_lst.sort()\n                if len(sub_lst) < n:\n                    continue\n                elif len(sub_lst) == n:\n                    if sub_lst[0]!= sub_lst[n-1]:\n                        continue\n                sub_lst.sort(reverse = True)\n                if sub_lst[0]!= sub_lst[n-1]:\n                    continue\n                if len(sub_lst) == n:\n                    return n\n        n += 1\n    return n\n    \n    \n    \ndef Find_Max_Length_6(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 1:\n        return n\n    n = 2\n    while n <= n:\n        for i in range(n-1):\n            for j in range(i+1, n):\n                sub_lst = lst[i:j]\n                sub_lst.sort()\n                if len(sub_lst) < n:\n                    continue\n                elif len(sub_lst) == n:\n                    if sub_lst[0]!= sub_lst[n-1]:\n                        continue\n                sub_lst.sort(reverse = True)\n                if sub_lst[0]!= sub_lst[n-1]:\n                    continue\n                if len(sub_lst) == n:\n                    return n\n        n += 1\n    return n\n    \n    \n    \ndef Find_Max_Length_7(lst):\n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    n = len(lst)\n    if n == 1:\n        return n\n    n = 2\n    while n <= n:\n        for i in range(n-1):\n            for j in range(i+1, n):\n                sub_lst = lst[i:j]\n                sub_lst.sort()\n                if len(sub_lst) < n:\n                    continue\n                elif len(sub_lst) == n:\n                    if sub_lst[0]!= sub_ls"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if lst==[]:\n        return 0\n    else:\n        return max(Find_Max_Length(lst[1:]), Find_Max_Length(lst[:-1])) +1\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    lst_len = len(lst)\n    if lst_len < 1:\n        return -1\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if not lst:\n        return 0\n    res = 1\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if lst[i] < lst[j]:\n                res = max(res,j-i+1)\n    return res\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    length_list = 0\n    max_length_sublist = 0\n    for i in range(len(lst)):\n        length = 1\n        for j in range(i+1, len(lst)):\n            if lst[i] == lst[j]:\n                length += 1\n            else:\n                break\n        if length_list < length:\n            length_list = length\n            max_length_sublist = lst[i]\n    return length_list"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst) == 1:\n        return 1\n    else:\n        maxlen = 0\n        for i in range(len(lst)):\n            if len(lst[i]) > maxlen:\n                maxlen = len(lst[i])\n    return maxlen\n    \n    \ndef Find_Common_Prefix(lst):\n    '''\n    Write a python function to find the common prefix in a list.\n    '''\n    prefix = ''\n    if len(lst) == 1:\n        return lst[0]\n    else:\n        for i in range(len(lst[0])):\n            common = lst[0][:i+1]\n            for j in range(1, len(lst)):\n                if common not in lst[j]:\n                    common = common[:i]\n                    break\n            if common == lst[0]:\n                return lst[0][:i+1]\n            \n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    try:\n        if text:\n            return re.findall(r\"\\\"(.*?)\\\"\",text)\n        else:\n            return []\n    except:\n        return []\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    # Find the index of the first quotation mark.\n    start = text.find(\"'\")\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.strip()\n    if text.startswith('\\\"') and text.endswith('\\\"'):\n        return text[1:-1].strip()\n    else:\n        raise Exception\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    return re.findall(pattern, text)\n    # what I should have done is:\n    # pattern = r'\"(.*?)\"'\n    # return re.findall(pattern, text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    \n    regex = re.compile(r'\"(.*?)\"')\n    return regex.findall(text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = re.compile(\"\\\"(.*?)\\\"\")\n    match = pattern.findall(text)\n    return match\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    result = re.findall('\"([^\"]*)\"', text)\n    return result\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if \"\\\"\\\"\" in text:\n        start_index = text.index(\"\\\"\\\"\")\n        end_index = start_index+2\n    elif \"\\\"\" in text:\n        start_index = text.index(\"\\\"\")\n        end_index = start_index+1\n    else:\n        start_index = text.index(\"\\'\")\n        end_index = start_index+1\n    return text[start_index:end_index]\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    pattern = r'\"(.*?)\"'\n    values = re.findall(pattern, text)\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    ans = re.findall('\\\"[\\w\\s]+\\\"', text)\n    ans = [x.replace('\\\"','') for x in ans]\n    return ans\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    x = {}\n    \n    for i in range(len(arr)):\n        if arr[i] in x.keys():\n            x[arr[i]] += 1\n        else:\n            x[arr[i]] = 1\n    print(x)\n    \n    num_of_pairs = 0\n    for key,value in x.items():\n        num_of_pairs += (value * (value - 1)) / 2\n    print(num_of_pairs)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    arr.sort()\n    for i in range(n-1):\n        if (arr[i] == arr[i+1]):\n            count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    unordered_pairs=0\n    for i in range(n):\n        for j in range(n):\n            if (i!=j):\n                if (arr[i]!=arr[j]):\n                    unordered_pairs+=1\n    print(unordered_pairs)\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    arr.sort()\n    count = 0\n    for i in range(n-1):\n        for j in range(i+1, n):\n            if arr[i] == arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                count+=1\n    print(count)\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #Time Complexity: O(n*n)\n    '''\n    We can try to make use of the following facts that we know:\n    1. We are able to find the number of pairs such that the first element is not greater than the second element\n    2. Each element is used only once\n    3. The pairs will always have unique elements\n    '''\n    #1.\n    res = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]>arr[j]:\n                res += 1\n    return res\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]!= arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    i=0\n    while i < len(arr):\n        x=arr[i]\n        j=i+1\n        while j < len(arr):\n            if (x==arr[j]) or (x==arr[j]-1):\n                break\n            j=j+1\n        if j == len(arr):\n            return True\n        i=i+1\n    return False\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    #counting number of pairs\n    count = 0\n    for i in range(n):\n        for j in range(n):\n            if i!= j:\n                count +=1\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[i]!=arr[j]:\n                count+=1\n    return count\n    \ndef add_one(arr):\n    '''\n    Write a python function which takes a list of integers and adds 1 to each element.\n    '''\n    for i in range(len(arr)):\n        arr[i]+=1\n    return arr\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    for i in word:\n        print(i)\n        \ndef concatenate(word):\n    '''\n    Write a python function to concatenate a list of strings.\n    '''\n    concat = \"\"\n    for i in word:\n        concat += i\n        \n    return concat\n    \ndef common_characters(str1, str2):\n    '''\n    Write a python function to find the number of common characters \n    between two strings.\n    '''\n    \n    \n    common = 0\n    for i in range(0, len(str1)):\n        if str1[i] == str2[i]:\n            common += 1\n    return common\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return(list(word))\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return [char for char in word]\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while(n):\n        s += n%10\n        n = n//10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n == 0:\n        return n\n    return (n % 10) + sum_digits(n // 10)\n    \n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return int(sum([int(i) for i in str(n)]))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return int(sum([int(x) for x in str(n)]))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    while n>9:\n        n = n//10 + n%10\n    return n\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum([int(i) for i in str(n)])\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    s = 0\n    while n!= 0:\n        s += n%10\n        n = n//10\n    return s\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    res = 0\n    while n>0:\n        res += n%10\n        n = n//10\n    return res\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    if n < 0:\n        return -n\n    else:\n        digits = 0\n        while n!= 0:\n            n = n // 10\n            digits = digits + n % 10\n        return digits\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    #Finding out the length of the list\n    length = len(list1)\n    \n    #Initializing a variable for increasing and decreasing index values\n    decreasing_index = 0\n    increasing_index = length - 1\n    \n    #Looping through the entire list\n    while decreasing_index <= increasing_index:\n        \n        #Increasing index and decreasing index\n        decreasing_index = decreasing_index + 1\n        increasing_index = increasing_index - 1\n        \n        #Cheking whether the elements are same\n        if list1[decreasing_index]!= list1[increasing_index]:\n            return False\n    \n    #Returning True if the list is sorted\n    return True\n    \n    \n    \nlist1 = [5, 4, 3, 2, 1]\nprint(issort_list(list1))\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    elif list1[0] > list1[1]:\n        return False\n    else:\n        return issort_list(list1[1:])\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    sorted = True\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            sorted = False\n    return sorted\n    \n    \n    \ndef isUnique(list1):\n    '''\n    Write a function to check whether a specified list is unique or not.\n    '''\n    seen = set()\n    for item in list1:\n        if item in seen:\n            return False\n        else:\n            seen.add(item)\n    return True\n    \ndef isPalindrome(string1):\n    '''\n    Write a function to check whether a specified string is palindrome or not.\n    '''\n    string1 = string1.lower()\n    string1 = string1.replace(\" \",\"\")\n    if len(string1)%2 == 0:\n        if string1 == string1[::-1]:\n            return True\n        else:\n            return False\n    else:\n        if string1 == string1[::-1]:\n            return True\n        else:\n            return False\n    \ndef intergerToString(x):\n    '''\n    Write a function to convert a integer to a string in python using recursion.\n    '''\n    if x == 0:\n        return \"0\"\n    elif x == 1:\n        return \"1\"\n    else:\n        return str(x) + intergerToString(x-1)\n    \ndef numberOfPaths(m, n):\n    '''\n    Write a function to find the number of paths from top left corner to bottom right corner in a m x n grid.\n    '''\n    if m == 1:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        return numberOfPaths(m-1,n) + numberOfPaths(m,n-1)\n    \ndef fizzBuzz(n):\n    '''\n    Write a function which returns the numbers that satisfy the following condition:\n    1. Divisible by 3.\n    2. Divisible by 5.\n    3. Divisible by both 3 and 5.\n    '''\n    fizz = []\n    buzz = []\n    for i in range(1,n+1):\n        if i%3==0:\n            fizz.append(i)\n        if i%5==0:\n            buzz.append(i)\n    print(fizz)\n    print(buzz)\n    result = []\n    for i in range(len(fizz)):\n        result.append(fizz[i])\n        result.append(buzz[i])\n    return result\n    \ndef maxMinList(list1):\n    '''\n    Write a function to find the max and min values of a list.\n    '''\n    print(max(list1))\n    print(min(list1))\n    \ndef getMaximumLength(arr, k):\n    '''\n    Write a function to find the maximum length of a run of k or more consecutive elements in an array.\n    '''\n    consecutive = 0\n    max = 0\n    for i in range(len(arr)):\n        if arr[i]==k:\n            consecutive += 1\n            max = max if max>consecutive else consecutive\n        elif arr[i]!=k:\n            consecutive = 0\n    return max\n    \ndef getMaximumXOR(arr):\n    '''\n    Write a function to find the maximum value of a XOR over all numbers in an array.\n    '''\n    xor = 0\n    result = []\n    for i in range(len(arr)):\n        if i==0:\n            result.append(arr[i])\n        else:\n            result.append(result[i-1]^arr[i])\n    return result[len(arr)-1]\n    \ndef longestPalindrome(string1):\n    '''\n    Write a function to find the longest palindrome in a string.\n    '''\n    string1 = string1.lower()\n    string1 = string1.replace(\" \",\"\")\n    if len(string1)%2 == 0:\n        for i in range(int(len(string1)/2)):\n            if string1[i]!=string1[len(string1)-i-1]:\n                return string1[:len(string1)-i]\n        return string1\n    else:\n        for i in range(int(len(string1)/2)):\n            if string1[i]!=string1[len(string1)-i-1]:\n                return string1[:len(string1)-i]\n        return string1\n    \ndef isAnagram(str1,str2):\n    '''\n    Write a function that checks whether two strings are anagrams or not.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    if len(str1)!=len(str2):\n        return False\n    else:\n        if str1 == str2:\n            return True\n        else:\n            return False\n    \ndef isPalindrome(string1):\n    '''\n    Write a function to check whether a specified string is a palindrome or not.\n    '''\n    string1 = string1.lower()\n    string1 = string1.replace(\" \",\"\")\n    if len(string1)%2 == 0:\n        for i in range(int(len(string1)/2)):\n            if string1[i]!=string1[len(string1)-i-1]:\n                return False\n        return True\n    else:\n        for i in range(int(len(string1)/2)):\n            if string1[i]!=string1[len(string1)-i-1]:\n                return False\n        return True\n    \ndef gcd(x,y):\n    '''\n    Write a function to compute GCD of two numbers using recursion.\n    '''\n    if y == 0:\n        return x\n    else:\n        return gcd(y,x%y)\n    \ndef countPrime(n):\n    '''\n    Write a function to count the number of prime numbers less than a specified number.\n    '''\n    if n <= 1:\n        return 0\n    elif n == 2:\n        return 1\n    elif n>2:\n        count = 0\n        for i in range(2,n):\n            if n%i==0:\n                count = count + 1\n        return count\n    \ndef lcs(str1,str2, m, n):\n    '''\n    Write a function that returns the length of the longest common subsequence of two given strings.\n    '''\n    if m == 0 or n == 0:\n        return 0\n    elif str1[m-1] == str2[n-1]:\n        return 1 + lcs(str1, str2, m-1, n-1)\n    else:\n        return max(lcs(str1, str2, m-1, n), lcs(str1, str2, m, n-1))\n    \ndef countPrimes(n):\n    '''\n    Write a function to count the number of prime numbers less than a specified number.\n    '''\n    if n <= 1:\n        return 0\n    elif n > 1:\n        count = 0\n        for i in range(2,n):\n            if n%i == 0:\n                count = count + 1\n        return count\n    \ndef isPrime(n):\n    '''\n    Write a function to check whether a specified number is prime or not.\n    '''\n    if n <= 1:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2:\n        for i in range(2,n):\n            if n%i == 0:\n                return False\n        return True\n    \ndef isUgly(num):\n    '''\n    Write a function to check whether a specified number is ugly or not.\n    '''\n    if num == 1:\n        return True\n    while num%2 == 0:\n        num = num/2\n    while num%5 == 0:\n        num = num/5\n    while num%3 == 0:\n        num = num/3\n    return num == 1\n    \ndef nthUglyNumber(n):\n    '''\n    Write a function to find the nth ugly number.\n    '''\n    ugly = 0\n    if n == 1:\n        return 1\n    elif n == "
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    size = len(list1)\n    if size == 0:\n        return False\n    if size <= 1:\n        return True\n    for i in range(size):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(1,len(list1)):\n        if list1[i-1] > list1[i]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    check = True\n    for i in range(len(list1)-1):\n        if list1[i]>list1[i+1]:\n            check = False\n            break\n    return check\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if list1 == sorted(list1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    a = []\n    for i in range(length):\n        a.append({})\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    \n    return [{} for _ in range(length)]\n    \n    \n    \n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    l = []\n    for i in range(length):\n        l.append({})\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    pass\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    my_list = []\n    for i in range(length):\n        my_list.append({})\n    return my_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{}]*length\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    # Define variables\n    empty_list = []\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    #return [{}]*length\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    empty_list = []\n    for i in range(length):\n        empty_list.append({})\n    return empty_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=lambda x: (sorted(x, key=lambda y: (sorted(y), y))))\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n        new_list.append(list1[i])\n    return new_list\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Code goes here\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            list1[i][j] = str(list1[i][j])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Convert all lists in a list of lists\n    list2 = []\n    for item in list1:\n        list2.append(item)\n    #print(list2)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for sublist in list1:\n        for i in range(len(sublist)):\n            sublist[i] = sorted(sublist[i])\n    return list1\n    \ndef main():\n    n = int(input())\n    list1 = []\n    for i in range(n):\n        list1.append(list(input().split()))\n    list1 = sort_sublists(list1)\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            print(list1[i][j], end=\" \")\n        print(\"\")\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Approach - 1 - Using List Comprehensions\n    '''\n    new_list = [[] for _ in range(len(list1))]\n    for sublist in list1:\n        for index, item in enumerate(sublist):\n            new_list[index].append(item)\n    return new_list\n    '''\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i].sort()\n    return list1\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    seen_add = seen.add\n    return [x for x in nums if not (x in seen or seen_add(x))]\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # create a set of the unique values of nums and return the list\n    # code provided by the online course\n    return list(set(nums))\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            nums.pop(i+1)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set()\n    for num in nums:\n        if num not in nums_set:\n            nums_set.add(num)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums_set = set(nums)\n    nums_list = list(nums_set)\n    nums_list.sort()\n    return nums_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_nums = set()\n    for num in nums:\n        unique_nums.add(num)\n    return list(unique_nums)\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    res = []\n    for i in nums:\n        if i not in res:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    nums = sorted(nums)\n    for i in range(len(nums)-1):\n        if nums[i] == nums[i+1]:\n            nums.remove(nums[i])\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    for num in nums:\n        if nums.count(num) == 2:\n            nums.remove(num)\n    return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    uniq_nums = []\n    for i in range(len(nums)):\n        for j in range(len(nums[i])):\n            if nums[i][j] not in uniq_nums:\n                uniq_nums.append(nums[i][j])\n    return uniq_nums\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for element in list_data:\n        if element not in result:\n            result *= element\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_unique = 1\n    for i in list_data:\n        if type(i) == int or type(i) == float:\n            product_unique *= i\n    return product_unique\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_lst = list(set(list_data))\n    product = 1\n    for i in unique_lst:\n        product = product * i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    data = []\n    for item in list_data:\n        if item not in data:\n            result = result * item\n            data.append(item)\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    # Initializing list of unique numbers.\n    list_unique = []\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # get length of the list\n    n = len(list_data)\n    # list comprehension\n    lst_output = [i * j for i, j in enumerate(list_data) if i!= j]\n    # return the product of unique numbers in the list\n    return reduce(lambda x, y: x * y, lst_output)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_nums = []\n    for i in list_data:\n        if i not in unique_nums:\n            unique_nums.append(i)\n    product = 1\n    for i in unique_nums:\n        product *= i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    product = 1\n    for i in unique_list:\n        product = product * i\n    return product\n    \nprint(unique_product([2,3,4,5,6,5,6,6,5,6,6,7,8,9,4,5,6,7,8,9]))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    for i in list_data:\n        result *= i\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    result = 1\n    \n    for i in range(0,len(list_data)):\n        if(list_data[i]!=''):\n            result *= list_data[i]\n    \n    return result\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159265359\n    a = pi * r**2\n    area = 2 * pi * r * h\n    return a + area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*(r+h)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return pi * r * (r + h)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    s=math.pi*math.pow(r,2)*h\n    print(s)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*3.14*r*h+2*3.14*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    PI = 3.14159265\n    area = PI * (r ** 2) * h\n    return area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    if not isinstance(r, (int, float)) or not isinstance(h, (int, float)):\n        raise ValueError\n    else:\n        return 2*pi*r*h + 2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    surface_area = 2*math.pi*r*(r+h)\n    return surface_area\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if i==0:\n            if A[i] in B:\n                if A[i+1] in B:\n                    continue\n                else:\n                    return False\n            else:\n                return False\n        if A[i] in B:\n            continue\n        else:\n            return False\n    return True\nA=[3,9,4,6,2,5,1]\nB=[1,5,2]\nprint(is_Sub_Array(A,B))"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n    \ndef Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if A[i] in B:\n            if B.index(A[i])!=i:\n                return True\n    return False\n    \ndef isSubArray(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        for j in range(i,len(A)):\n            if A[j:j+len(B)]==B:\n                return True\n    return False\n    \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    index = 0\n    flag = True\n    while flag and index<len(A):\n        if A[index:index+len(B)]==B:\n            flag = False\n        else:\n            index += 1\n    return flag\n    \ndef Sub_Array(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    index = 0\n    flag = True\n    while flag and index<len(A):\n        if A[index:index+len(B)]==B:\n            flag = False\n        else:\n            index += 1\n    return flag\n    \ndef isSubArray(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    index = 0\n    flag = True\n    while flag and index<len(A):\n        if A[index:index+len(B)]==B:\n            flag = False\n        else:\n            index += 1\n    return flag\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(A)):\n        if i in range(len(B)):\n            if A[i] == B[i]:\n                continue\n            else:\n                return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(B) > len(A):\n        return False\n    elif len(B) == len(A) and len(A) == 0:\n        return True\n    elif len(B) == len(A) and len(A)!= 0:\n        for i in range(len(A)):\n            if A[i] in B:\n                return True\n    return False\n    \nif __name__ == '__main__':\n    A = [1,2,3]\n    B = [1,2]\n    print(is_Sub_Array(A,B))"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) > len(B):\n        return False\n    count = 0\n    for i in range(len(A)):\n        if A[i] == B[count]:\n            count += 1\n            if count == len(B):\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for x in A:\n        if x in B:\n            return True\n    return False\n    \nif __name__ == '__main__':\n    A = [1,2,3,4]\n    B = [1,2]\n    C = [-1,-2,1,2]\n    \n    print(is_Sub_Array(A,B))\n    print(is_Sub_Array(A,C))\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=0\n    for i in range(0,len(B)):\n        if (len(A)==0):\n            flag=0\n            break\n        elif (len(A)<len(B)):\n            flag=0\n            break\n        else:\n            if (B[i]==A[0]):\n                #print(\"match\")\n                A.pop(0)\n                flag=1\n                continue\n            else:\n                flag=0\n                break\n    #print(flag)\n    return flag\ndef is_Sub_Array1(A,B):\n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    flag=0\n    if (len(A)==0):\n        flag=0\n        return flag\n    elif (len(A)<len(B)):\n        flag=0\n        return flag\n    else:\n        if (B[0]==A[0]):\n            #print(\"match\")\n            A.pop(0)\n            flag=1\n            return flag\n        else:\n            flag=0\n            return flag\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    N,M=len(A),len(B)\n    for i in range(0,N-M+1):\n        if is_Sliced_list(A,i,M):\n            return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A) <= len(B):\n        return False\n    temp = []\n    for i in range(len(A)):\n        if A[i] == B[0]:\n            temp.append(1)\n    if temp == [1] * len(A):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if (B==[]):\n        print(\"true\")\n        return True\n    else:\n        for i in range(len(B)):\n            if A[i] ==B[0]:\n                if is_Sub_Array(A[i+1:],B[1:]):\n                    return True\n            else:\n                return False\n        return False\nprint(is_Sub_Array([1,3,5,7],[2,3,5,7]))\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return (n - 1)%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n<10):\n        return 1\n    else:\n        res = 1\n        while (n > 9):\n            res = res * 10\n            n = n // 10\n        res = res * (n % 10)\n        return int(res)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    result = 1\n    while n>0:\n        result *= n\n        n-=1\n    return result%10"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 1: \n        return 1\n    if n == 0: \n        return 1\n    return n % 10 * last_Digit_Factorial(n//10) \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    fac_list = []\n    fact = 1\n    while(fac_list):\n        last_digit = fact%10\n        fac_list.append(last_digit)\n        fact = fact//10\n    if(fac_list[-1] == n):\n        print(fac_list[-1])\n    else:\n        print('Not found')\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x = n\n    ans = 1\n    while n > 9:\n        ans = ans * (n % 10)\n        n = int(n/10)\n    ans = ans * (n % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n    ans = ans * (x % 10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    i = 10\n    while(i>1):\n        n = n//i\n        i = i - 1\n    return n\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    n = str(n)\n    l = len(n)\n    fact = 1\n    for i in range(l):\n        fact = fact * int(n[l-i-1])\n    return fact\nprint(\"factorial of 3 is\",last_Digit_Factorial(3))\nprint(\"factorial of 13 is\",last_Digit_Factorial(13))\nprint(\"factorial of 5 is\",last_Digit_Factorial(5))\nprint(\"factorial of 5 is\",last_Digit_Factorial(10))\nprint(\"factorial of 5 is\",last_Digit_Factorial(11))\nprint(\"factorial of 10 is\",last_Digit_Factorial(12))\nprint(\"factorial of 15 is\",last_Digit_Factorial(16))\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    sum = 1\n    for i in range(1,n+1):\n        sum = sum * i\n    return sum % 10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x = 1\n    for i in range(1,n+1):\n        x = x*i\n    return x%10\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = list()\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output_list = []\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list(itertools.chain(list1,list2,list3))\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    inter_list = []\n    for i in range(len(list1)):\n        inter_list += [list1[i]]\n        inter_list += [list2[i]]\n        inter_list += [list3[i]]\n    return inter_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_inter = []\n    for i in range(len(list1)):\n        list_inter.append(list1[i])\n        list_inter.append(list2[i])\n        list_inter.append(list3[i])\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    # Your code here\n    new_list = []\n    for i in range(len(list1)):\n        new_list.append(list1[i])\n        new_list.append(list2[i])\n        new_list.append(list3[i])\n    return new_list"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i] for i in range(len(list1))] + [list2[i] for i in range(len(list2))] + [list3[i] for i in range(len(list3))]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    if len(list1) == len(list2) == len(list3):\n        length = len(list1)\n        interleaved_list = []\n        for i in range(length):\n            interleaved_list.append(list1[i])\n            interleaved_list.append(list2[i])\n            interleaved_list.append(list3[i])\n        return interleaved_list\n    else:\n        print(\"Lengths of lists are not equal\")\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    return (test_tup1 - test_tup2), (test_tup2 - test_tup1)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(test_tup1[i])\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    d = []\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            d.append(test_tup1[i])\n    return d\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    d1 = {}\n    d2 = {}\n    dissimil_tup = []\n    for i in range(len(test_tup1)):\n        if d1.get(test_tup1[i]) == None:\n            d1[test_tup1[i]] = 1\n        else:\n            d1[test_tup1[i]] += 1\n        if d2.get(test_tup2[i]) == None:\n            d2[test_tup2[i]] = 1\n        else:\n            d2[test_tup2[i]] += 1\n    for key1 in d1:\n        if key1 in d2:\n            if d1[key1]!= d2[key1]:\n                dissimil_tup.append(key1)\n    return dissimil_tup\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Empty tuples\n    if test_tup1 == tuple() and test_tup2 == tuple():\n        return (0,0)\n    # Not empty tuples\n    # Let us first check if they are of the same length\n    if len(test_tup1)!= len(test_tup2):\n        return (0,0)\n    # Both tuples have the same length, we will consider the pair-wise comparison of the tuples\n    # We will use a sliding window of length 2\n    for i in range(len(test_tup1)-1):\n        # We will create a 2d array of tuples with the given length. We will then compare the elements from the\n        # pairs of tuples, and find the disimilar elements by checking the difference of the elements.\n        test_tup1_sliding_window = [[test_tup1[j], test_tup1[j+1]] for j in range(i, i+2)]\n        test_tup2_sliding_window = [[test_tup2[j], test_tup2[j+1]] for j in range(i, i+2)]\n        # We will compare the elements from the pairs of tuples, and find the disimilar elements by checking the\n        # difference of the elements.\n        if test_tup1_sliding_window!= test_tup2_sliding_window:\n            return (i, i+1)\n    # If no disimilar elements are found, return 0,0\n    return (0,0)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    dissimilar_index = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_index.append(i)\n    return dissimilar_index\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    test_tup1 = test_tup1.split('-')\n    test_tup2 = test_tup2.split('-')\n    test_tup1 = set(test_tup1)\n    test_tup2 = set(test_tup2)\n    result = test_tup1 ^ test_tup2\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elems = []\n    for elem1, elem2 in zip(test_tup1, test_tup2):\n        if elem1!= elem2:\n            dissimilar_elems.append(elem1)\n    return dissimilar_elems\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return\n    dif_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dif_list.append(test_tup1[i])\n    return dif_list\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    count = 0\n    for i in range(0, len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    \n    if len(test_tuple) == 0:\n        return test_tuple\n    \n    else:\n        for num in range(len(test_tuple)):\n            if test_tuple[num] % 2 == 0:\n                return even_ele(test_tuple[:num] + test_tuple[num + 1:], even_fnc)\n            \n            else:\n                test_tuple = test_tuple[:num] + test_tuple[num + 1:]\n                return even_ele(test_tuple, even_fnc)\n                \n            \ndef unival(test_tuple):\n    '''\n    Write a function to check whether a given nested tuple is univalue.\n    '''\n    \n    if len(test_tuple) == 0:\n        return True\n    \n    elif len(test_tuple) == 1:\n        return test_tuple[0] == 1\n    \n    else:\n        if type(test_tuple[0]) == tuple:\n            return unival(test_tuple[0])\n        else:\n            return test_tuple[0] == 1\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    pass\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    for item in test_tuple: \n        if even_fnc(item) == True: \n            new_tuple += (item, )\n    return new_tuple \n    "
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if not isinstance(i, tuple):\n            if not even_fnc(i):\n                return False\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for x in test_tuple:\n        if isinstance(x, tuple):\n            even_ele(x, even_fnc)\n        else:\n            if even_fnc(x):\n                continue\n            else:\n                test_tuple = test_tuple[:test_tuple.index(x)] + test_tuple[test_tuple.index(x) + 1:]\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple): \n        for t in test_tuple: \n            if isinstance(t, tuple): \n                even_ele(t, even_fnc) \n            elif isinstance(t, list): \n                even_fnc(t) \n            else: \n                continue \n    else: \n        return \n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    if not isinstance(test_tuple, tuple):\n        raise TypeError(\"Invalid type\")\n    else:\n        result = []\n        for i in range(len(test_tuple)):\n            if even_fnc(test_tuple[i]) == True:\n                result.append(test_tuple[i])\n        return tuple(result)\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in range(len(test_tuple)):\n        if even_fnc(test_tuple[i]):\n            test_tuple = test_tuple[:i] + test_tuple[i + 1:]\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    even_list = []\n    for each_tuple in test_tuple:\n        for each_element in each_tuple:\n            if (even_fnc(each_element)) == True:\n                even_list.append(each_element)\n    print(\"Even elements in tuple: \", even_list)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return 4*(b**2)+2*(s**2)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    h = s + b\n    s = 2 * (b + h)\n    a = (s * h)/2\n    print('The surface area of a square pyramid with a given base edge and height is {0:.2f}.'.format(a))\n    \ndef leftovers(b,s,a):\n    '''\n    Write a python function to find the number of squares to cover a given number of cups.\n    '''\n    l = s + b\n    r = l - a\n    print('{0} squares left.'.format(r))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    area = ((0.5*b*s*s) + (0.5*b*s*s + 0.5*b*s*s + 0.5*b*s*s + 0.5*b*s*s) + (0.5*b*s*s + 0.5*b*s*s + 0.5*b*s*s + 0.5*b*s*s + 0.5*b*s*s))*s\n    print(\"Area of the square pyramid =\",area)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    a = b*s\n    area = 4*a\n    print(area)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of "
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # Sample Input\n    # s=5\n    # b=3\n    # Sample Output\n    # 27\n    # Explanation\n    # The surface area is equal to: (5*3*2 + 2*2*3*2) - 2*(5*3*2) = 27\n    # Assume that:\n    # b, s > 0\n    if b > 0 and s > 0:\n        x = 2*(s*s) + (2*s*(b-s)) + (2*(s-s))\n        print(x)\n    else:\n        print(\"error\")\nsurface_Area(10,2)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    S = b * s\n    return S\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface_area = 0\n    a = b * s\n    surface_area = a * (a + 1) / 2\n    return surface_area \n    \ndef bubbleSort(arr): \n    n = len(arr) \n    swapped = True\n    \n    while(swapped == True): \n        swapped = False\n        for i in range(n-1): \n            if arr[i] > arr[i+1]: \n                arr[i], arr[i+1] = arr[i+1], arr[i] \n                swapped = True\n                \narr = list(map(int,input().split()))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    Area = 0.5*b*s\n    print(\"Area =\",Area)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s_area= b*s\n    return s_area\ndef surface_Area_of_cuboid(b,h): \n    '''\n    Write a python function to find the surface area of a cuboid with a given base edge and height.\n    '''\n    c_area= b*h\n    return c_area\ndef surface_Area_of_cone(r,h): \n    '''\n    Write a python function to find the surface area of a cone with a given radius and height.\n    '''\n    s_area= 0.5*pi*r*h\n    return s_area\ndef surface_Area_of_cylinder(r,h): \n    '''\n    Write a python function to find the surface area of a cylinder with a given radius and height.\n    '''\n    s_area= 2*pi*r*h\n    return s_area\ndef surface_Area_of_triangle(b,h): \n    '''\n    Write a python function to find the surface area of a triangle with a given base edge and height.\n    '''\n    s_area= b*h/2\n    return s_area\ndef volume_of_sphere(radius): \n    '''\n    Write a python function to find the volume of a sphere with a given radius.\n    '''\n    v_area= 4/3*pi*(radius**3)\n    return v_area\ndef volume_of_cube(side): \n    '''\n    Write a python function to find the volume of a cube with a given length.\n    '''\n    v_area= side**3\n    return v_area\ndef volume_of_cuboid(b,h): \n    '''\n    Write a python function to find the volume of a cuboid with a given base edge and height.\n    '''\n    v_area= b*h\n    return v_area\ndef volume_of_cone(r,h): \n    '''\n    Write a python function to find the volume of a cone with a given radius and height.\n    '''\n    v_area= 0.5*pi*r*h\n    return v_area\ndef volume_of_cylinder(r,h): \n    '''\n    Write a python function to find the volume of a cylinder with a given radius and height.\n    '''\n    v_area= 0.5*pi*r*h\n    return v_area\ndef volume_of_triangle(b,h): \n    '''\n    Write a python function to find the volume of a triangle with a given base edge and height.\n    '''\n    v_area= b*h/3\n    return v_area\ndef is_triangle_equilateral(s,t):\n    '''\n    Write a python function to check if the three sides of a triangle are of equal length.\n    '''\n    if (s==t) or (s==t):\n        return True\n    else:\n        return False\ndef is_triangle_right(b,h): \n    '''\n    Write a python function to check if the triangle is a right triangle.\n    '''\n    s= b+h\n    t= b*h\n    if (s==t):\n        return True\n    else:\n        return False\ndef is_triangle_isosceles(s,t):\n    '''\n    Write a python function to check if the triangle is a isosceles triangle.\n    '''\n    if (s==t) or (s==t):\n        return True\n    else:\n        return False\ndef is_triangle_scalene(s,t):\n    '''\n    Write a python function to check if the triangle is a scalene triangle.\n    '''\n    if (s!=t) and (s!=t):\n        return True\n    else:\n        return False\ndef is_triangle_equilateral_or_scalene(s,t):\n    '''\n    Write a python function to check if the triangle is equilateral or scalene triangle.\n    '''\n    if (is_triangle_equilateral(s,t) or is_triangle_scalene(s,t)):\n        return True\n    else:\n        return False\ndef is_triangle_equilateral_or_isosceles(s,t):\n    '''\n    Write a python function to check if the triangle is equilateral or isosceles triangle.\n    '''\n    if (is_triangle_equilateral(s,t) or is_triangle_isosceles(s,t)):\n        return True\n    else:\n        return False\ndef is_rectangle_equilateral(a,b):\n    '''\n    Write a python function to check if the two sides of a rectangle are of equal length.\n    '''\n    if (a==b):\n        return True\n    else:\n        return False\ndef is_rectangle_right(a,b):\n    '''\n    Write a python function to check if the rectangle is a right rectangle.\n    '''\n    if ((a==b) or (a==b)):\n        return True\n    else:\n        return False\ndef is_rectangle_isosceles(a,b):\n    '''\n    Write a python function to check if the rectangle is a isosceles rectangle.\n    '''\n    if (a!=b) and (a!=b):\n        return True\n    else:\n        return False\ndef is_rectangle_scalene(a,b):\n    '''\n    Write a python function to check if the rectangle is a scalene rectangle.\n    '''\n    if (a==b):\n        return False\n    else:\n        return True\ndef is_rectangle_equilateral_or_scalene(a,b):\n    '''\n    Write a python function to check if the rectangle is equilateral or scalene rectangle.\n    '''\n    if (is_rectangle_equilateral(a,b) or is_rectangle_scalene(a,b)):\n        return True\n    else:\n        return False\ndef is_rectangle_equilateral_or_isosceles(a,b):\n    '''\n    Write a python function to check if the rectangle is equilateral or isosceles rectangle.\n    '''\n    if (is_rectangle_equilateral(a,b) or is_rectangle_isosceles(a,b)):\n        return True\n    else:\n        return False\ndef is_triangle_right_triangle(s,t,u):\n    '''\n    Write a python function to check if the triangle is a right triangle.\n    '''\n    if ((s==t) or (s==t)) and (s==u):\n        return True\n    else:\n        return False\ndef is_triangle_isosceles_triangle(s,t,u):\n    '''\n    Write a python function to check if the triangle is an isosceles triangle.\n    '''\n    if ((s==t) or (s==t)) and (s==u):\n        return True\n    else:\n        return False\ndef is_triangle_scalene_triangle(s,t,u):\n    '''\n    Write a python function to check if the triangle is a scalene triangle.\n    '''\n    if ((s==t) or (s==t)) and (s==u):\n        return False\n    else:\n        return True\ndef is_triangle_equilateral_or_scalene_triangle(s,t,u):\n    '''\n    Write a python function to check if the triangle is equilateral or scalene triangle.\n    '''\n    if ((is_triangle_equilateral(s,t)) or (is_triangle_scalene(s,t))):\n        return True\n    else:\n        return False\ndef is_triangle_equilateral_or_isosceles_triangle(s,t,u):\n    '''\n    Write a python function to check if the triangle is equilateral or isosceles triangle.\n    '''\n    if ((is_triangle_equilateral(s,t)) or (is_triangle_isosceles(s,t))):\n        return True\n    else:\n        return False\ndef is_triangle_scalene_triangle(s,t,u):\n    '''\n    Write a python function to check if the triangle is a scalene triangle.\n    '''\n    if (i"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return len(dict1) == 0\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    my_dict = {}\n    if my_dict:\n        print(\"The dictionary is not empty\")\n    else:\n        print(\"The dictionary is empty\")\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1)==0:\n        return True\n    else:\n        return False\n        \ndict_a={\"vicky\":32,\"gaurav\":32,\"divya\":32,\"emma\":32}\ndict_b=dict()\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        print(\"no empty dictionary\")\n    else:\n        print(\"empty dictionary\")\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    \n    if not dict1:\n        print(\"True\")\n    else:\n        print(\"False\")\n        \nmy_dict(None)\nmy_dict([])\nmy_dict({})\nmy_dict({\"key\": 1})\nmy_dict({\"key\": 1, \"key2\": 2})\nmy_dict({\"key\": 1, \"key2\": 2, \"key3\": 3})\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    return dict1 == {}\n    \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num <= 1:\n        return 1\n    \n    #If we don't have to calculate the solution, we can do it in a loop\n    result = 0\n    for i in range(1, num):\n        result += (catalan_number(i-1) * catalan_number(num-i))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catal_numbers = []\n    for i in range(num):\n        catal_numbers.append(0)\n    catal_numbers[0] = 1\n    for i in range(1,num):\n        for j in range(i):\n            catal_numbers[i] = catal_numbers[i] + catal_numbers[j] * catal_numbers[i-1-j]\n    return catal_numbers[num-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    else:\n        #return (catalan_number(num-1) * num) / (num+1)\n        return num * catalan_number(num-1) / (num+1)\n    \n    \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    #first, calculate nth catalan number using recursion\n    def recursion(num):\n        #base case\n        if num == 0:\n            return 1\n        else:\n            return(recursion(num-1)*(num+1))\n    #now call function\n    return(recursion(num))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    def catalan_number_recursive(num, n):\n        if n <= 1:\n            return 1\n        else:\n            return catalan_number_recursive(num, n - 1) * num\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = 1\n    for i in range(2,num+1):\n        res = res * i\n    return res\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1:\n        return 1\n    else:\n        return catalan_number(num-1) * (num) + (num * (num-1)) // 2\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    \n    if num == 0:\n        return 1\n    else:\n        ans = 0\n        for i in range(0, num):\n            ans += catalan_number(i) * catalan_number(num-i-1)\n        return ans\n        \n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    catalan = 1\n    for i in range(1, num+1):\n        catalan = catalan * (2*i-1)/i\n    return int(catalan)\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    #n=10\n    #start=0\n    #count=0\n    #end=10**5\n    #while(start<=end):\n    #    count+=start\n    #    start=start+1\n    #return count%10\n    n,start,count=0,1,1\n    while(n<num):\n        count=count+(start*(n+1))//(n+1)\n        start+=1\n        n+=1\n    return count%10\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #returns a list of strings in order of appearance\n    adverb_list = []\n    for item in re.finditer(r\"ly\", text):\n        if item.end() == 2:\n            adverb_list.append(text[item.start()-2:item.end()-1])\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ## Time complexity: O(n)\n    ## Space complexity: O(1)\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    import re\n    text = text.lower()\n    # Ex: find_adverbs('This is a great day! How are you doing? I am great!')\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex:\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # 'find_adverbs('This is a great day! How are you doing? I am great!')'\n    # Ex"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #start = \"from\"\n    #end = \"ly\"\n    #if re.search(r\"\\b\\w+ly\\b\", text):\n    #    print(\"Found!\")\n    #return end\n    start = \"from\"\n    end = \"ly\"\n    #start = \"from\"\n    #end = \"ly\"\n    if re.search(r\"\\b\\w+ly\\b\", text):\n        print(\"Found!\")\n        print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    return re.search(r\"\\b\\w+ly\\b\", text).span()\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #return re.search(r\"\\b\\w+ly\\b\", text).span()\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #print(re.search(r\"\\b\\w+ly\\b\", text).span())\n    #return re.search(r\"\\b\\w+ly\\b\", text).span()\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_pattern = r'[a-zA-Z0-9\\s]+[A-Z][A-Z]+ly'\n    adverb_list = re.findall(adverb_pattern, text)\n    return adverb_list\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    result = []\n    rv = re.compile(r'(ly)', re.IGNORECASE)\n    matches = rv.findall(text)\n    result += [(m[0], m[1]) for m in matches]\n    return result\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #r'ly$'\n    #r'\\bly\\b'\n    # r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'ly\\b$'\n    #r'ly$'\n    #r'\\bly$'\n    #r'\\bly\\b$'\n    #r'ly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'\\bly\\b$'\n    #r'"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    for i in range(len(text)):\n        if 'ly' in text[i:i+4] and text[i-1]!='':\n            adverbs.append((text[i-1],i))\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    pos = []\n    for i,v in enumerate(text):\n        if re.match('ly$',v):\n            pos.append(i)\n    return pos\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    # Write your code here\n    list_of_adverbs = []\n    #positions = []\n    for i in range(len(text)):\n        #print(text[i])\n        if text[i] == 'ly':\n            list_of_adverbs.append(text[i-1])\n            #positions.append(i)\n    #print(list_of_adverbs)\n    #print(positions)\n    return list_of_adverbs\n    '''\n    for i in range(len(text)):\n        #print(text[i])\n        if text[i] == 'ly':\n            list_of_adverbs.append(text[i-1])\n    print(list_of_adverbs)\n    '''\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items_heap = []\n    i = 0\n    for item in items:\n        heapq.heappush(items_heap,(item,i))\n        i+=1\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items, key=lambda x: x[1], reverse=True)\n    return items[:n]\n    # return heapq.nlargest(n, items, key=lambda x: x[1])\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda item: item.price,reverse=True)\n    return items[:n]\ndef shopping_list(items,limit):\n    '''\n    Write a function that returns a list of items that are under the given price limit.\n    '''\n    items.sort(key=lambda item: item.price,reverse=True)\n    lst = []\n    for item in items:\n        if item.price <= limit:\n            lst.append(item)\n    return lst\ndef find_expensive_items(items,n):\n    '''\n    Write a function that returns a list of items that are under the given price limit.\n    '''\n    items.sort(key=lambda item: item.price,reverse=True)\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    my_dict = {}\n    for i in items:\n        if i in my_dict:\n            my_dict[i] += 1\n        else:\n            my_dict[i] = 1\n    heap = []\n    for i in my_dict.keys():\n        heapq.heappush(heap,(my_dict[i],i))\n    result = []\n    for i in range(n):\n        result.append(heapq.heappop(heap)[1])\n    return result\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    # create a list of tuples (item, price)\n    items = [(item, price) for item, price in items]\n    heapq.heapify(items) # create a heap out of items\n    # print(heap)\n    # create a list of tuples (item, price)\n    expensive_items = []\n    for _ in range(n):\n        expensive_items.append(heapq.heappop(items)) # pop the item with the lowest price\n    return expensive_items\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if len(items)==0:\n        return []\n    if n>len(items):\n        return []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if items == None or len(items) == 0 or n < 1:\n        return None\n    item = heapq.nsmallest(n,items,key=lambda x: x[1])\n    return item\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    items.sort(key=lambda x: x[1])\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items, key=lambda i: i[1], reverse=True)\n    return items[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    price_dict = {}\n    for item in items:\n        if item in price_dict:\n            price_dict[item] += 1\n        else:\n            price_dict[item] = 1\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n>=len(l):\n        return l\n    return l[:n]+l[n:n+1]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l1=l[0:n]\n    l2=l[n:]\n    return l1+l2\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    if n < 0:\n        return l\n    if n == 0:\n        return l\n    for i in range(0, n):\n        l.pop(0)\n    l.append(l[0])\n    return l\n        \n    \ndef split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n > len(l):\n        return l\n    if n < 0:\n        return l\n    if n == 0:\n        return l\n    l = l[n:]\n    l.extend(l[:n])\n    return l\n        \n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n >= len(l):\n        return\n    else:\n        start = l[:n]\n        end = l[n:]\n        return start + end\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    first = l[:n]\n    last = l[n:]\n    return first + last\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    #temp = l.pop(n-1)\n    #l.append(temp)\n    l1 = []\n    for i in range(len(l)):\n        if(i < n):\n            l1.append(l[i])\n    l1.extend(l[n:])\n    return l1\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if n == len(l):\n        return []\n    else:\n        return l[:n]+[l[n]]+split_Arr(l[n+1:], n)\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n]+l[n:]\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\nprint(list_tuple([1,2,3]))\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_list = []\n    for x in listx:\n        new_list.append(tuple(x))\n    return tuple(new_list)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #x = tuple(listx)\n    #print(x)\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #your code here\n    tup=tuple(listx)\n    return tup\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    # Time - O(n) | Space - O(1)\n    # nums = [10, 4, 2, 11, 5]\n    # target = 9\n    # Output - 4\n    # nums = [10, 5, 6]\n    # target = 9\n    # Output - 1\n    smallest = min(nums)\n    largest = max(nums)\n    return largest - smallest\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    nums.sort()\n    return abs(nums[-1] - nums[0])\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_val = float(\"inf\")\n    max_val = float(\"-inf\")\n    for i in range(len(nums)):\n        if nums[i] < min_val:\n            min_val = nums[i]\n        if nums[i] > max_val:\n            max_val = nums[i]\n    print(max_val - min_val)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_ = nums[0]\n    min_ = nums[0]\n    for i in nums:\n        if i > max_:\n            max_ = i\n        if i < min_:\n            min_ = i\n    return max_ - min_\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    max_val = nums[0]\n    min_val = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] > max_val:\n            max_val = nums[i]\n        if nums[i] < min_val:\n            min_val = nums[i]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    # NOTE: to find the difference between 2 lists use : listA = A[i] - listB[i]\n    # NOTE: to find the difference between 2 strings use : strA = str1 - str2\n    # NOTE: to find the difference between 2 lists of strings use : listA = A[i] - listB[i]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    s_num = sorted(nums)\n    return s_num[-1] - s_num[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    diff = max(nums) - min(nums)\n    return diff\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n    "
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(f\"Difference of largest and smallest number is {max(nums) - min(nums)}\")\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return list(filter(lambda x: x**2 == a or x**2 == b, range(a, b+1)))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    count = 0\n    while a <= b:\n        if a**2 == a:\n            count += 1\n        a += 1\n    return count\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a > b:\n        a, b = b, a\n    for i in range(a+1, b+1):\n        if i**2 == i:\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    my_list = list(range(a,b))\n    list1 = list()\n    for i in my_list:\n        list1.append(i**2)\n    return list1\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if i*i == i:\n            print(i, end = \" \")\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    def perfect_square(x):\n        i = 0\n        while i * i <= x:\n            i += 1\n        return i - 1\n    return (perfect_square(a), perfect_square(b))\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    import math\n    nums = []\n    for num in range(a, b+1):\n        square_num = math.sqrt(num)\n        if square_num.is_integer():\n            nums.append(num)\n    return nums\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a, b+1):\n        if(math.sqrt(i).is_integer()):\n            print(i, end=\" \")\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    count = 0\n    for x in range(a, b+1):\n        if x**2 == x:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    start = int(a ** 0.5)\n    end = int(b ** 0.5)\n    if start > end:\n        start, end = end, start\n    return [i ** 2 for i in range(start, end + 1)]\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x\n    theta = y\n    x1 = r*cos(theta)\n    y1 = r*sin(theta)\n    return x1,y1\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    x1 = x*cos(theta)\n    y1 = y*sin(theta)\n    return (x1,y1)\ndef polar_rect_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    theta = cmath.acos(y/x)\n    r = x*cos(theta)\n    return (r,theta)\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r,theta)\ndef rect_polar_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef polar_rect_3(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_3(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_4(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_4(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef polar_rect_5(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_5(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_6(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_6(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef polar_rect_7(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_7(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_8(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_8(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_9(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_9(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef polar_rect_10(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_10(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_11(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_11(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef polar_rect_12(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_12(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_13(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef rect_polar_13(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.acos(y/r)\n    return (r*cos(theta),r*sin(theta))\ndef polar_rect_14(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates."
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*2), (2*cmath.sqrt(x**2+y**2))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=complex(x,y)\n    radius=abs(r)\n    angle=cmath.phase(r)\n    if radius>=0:\n        x_rect=radius*cmath.cos(angle)\n        y_rect=radius*cmath.sin(angle)\n        return x_rect,y_rect\n    else:\n        return -1,-1\ndef polar_rect_2(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    x,y=polar_rect(x,y)\n    return x,y\ndef rect_polar_2(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r=complex(x,y)\n    radius=abs(r)\n    angle=cmath.phase(r)\n    return radius,angle\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    theta = cmath.atan(y/x)\n    return (r,theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = complex(x,y)\n    theta = cmath.phase(r)\n    return int(r.real),int(r.imag),int(theta)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*x + y*y) ** 0.5, math.degrees(math.atan2(y, x))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x**2+y**2\n    theta=math.degrees(math.acos(y/r))\n    if x<0:\n        theta=360-theta\n    elif x>0:\n        theta=theta\n    if x==0:\n        if y<0:\n            theta=360-theta\n        elif y>0:\n            theta=theta\n    return(int(x*math.cos(math.radians(theta))),int(y*math.sin(math.radians(theta))))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rectangle_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rectangle_to_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rectangle_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rectangle_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef rect_to_rect(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    return x,y\ndef pol_rect_conv(x,y):\n    '''\n    Writ"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    try:\n        r=x**2+y**2\n        angle=cmath.acos(x/r)\n        if(y<0):\n            angle=-angle\n        if(r>0):\n            return(angle,r)\n        else:\n            return(angle,0)\n    except:\n        print(\"Invalid input\")\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    try:\n        r=(x**2+y**2)**0.5\n        angle=cmath.acos((x**2+y**2)/r)\n        if(y>0):\n            angle=cmath.pi-angle\n        return(angle,r)\n    except:\n        print(\"Invalid input\")\nprint(\"Polar to Rectangular coordinate conversion\")\nwhile(1):\n    print(\"\\n1.Convert polar to rectangular coordinates\\n2.Convert rectangular to polar coordinates\")\n    choice=int(input(\"Enter your choice: \"))\n    if(choice==1):\n        x=float(input(\"Enter the x value: \"))\n        y=float(input(\"Enter the y value: \"))\n        angle,r=polar_rect(x,y)\n        print(\"Angle={0:.2f} degree and radius={1:.2f}\".format(angle,r))\n    elif(choice==2):\n        x=float(input(\"Enter the x value: \"))\n        y=float(input(\"Enter the y value: \"))\n        angle,r=rect_polar(x,y)\n        print(\"Angle={0:.2f} degree and radius={1:.2f}\".format(angle,r))\n    else:\n        print(\"Invalid choice\")\n        "
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList[0]\n    newList[0] = newList[-1]\n    newList[-1] = a\n    print(newList)\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    a = newList.pop(0)\n    newList.append(a)\n    return newList\n    \ndef sorted_List(newList):\n    '''\n    Write a python function to sort a list.\n    '''\n    newList = sorted(newList)\n    return newList\n    \ndef last_occur_index(newList):\n    '''\n    Write a python function to get the last occurance of an element from a list.\n    '''\n    c = 0\n    for i in range(len(newList)):\n        if newList[i] == newList[-1]:\n            c = i\n    return c\n    \ndef reversed_List(newList):\n    '''\n    Write a python function to get the reversed list.\n    '''\n    newList.reverse()\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    list = newList[:]\n    a = list[0]\n    list[0] = list[-1]\n    list[-1] = a\n    return list\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if not newList: \n        return newList\n    else: \n        newList[0], newList[-1] = newList[-1], newList[0] \n        return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    \n    length = len(newList)\n    newList[0], newList[length-1] = newList[length-1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    if len(newList) == 0:\n        return newList\n    else:\n        newList[0] = newList[-1]\n        newList[-1] = newList[0]\n        return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.append(newList[0])\n    #newList.append(newList[-1])\n    newList[0], newList[-1]=newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    #newList=[]\n    #newList.appen"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:] + newList[1:-1] + newList[:1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # setting pointers for first and last element\n    first = newList[0]\n    last = newList[-1]\n    \n    # swapping the values\n    newList[0] = last\n    newList[-1] = first\n    \n    # Return the new list with new values\n    return newList\n    \nif __name__ == \"__main__\":\n    # Test Case 1\n    list = [1, 2, 3, 4]\n    print(swap_List(list))\n    # Test Case 2\n    list = [1, 1]\n    print(swap_List(list))\n    # Test Case 3\n    list = []\n    print(swap_List(list))\n    # Test Case 4\n    list = [1]\n    print(swap_List(list))\n    # Test Case 5\n    list = [1, 1]\n    print(swap_List(list)"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    return (0.25**k) * (2**n) * (math.factorial(n))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    binomial_coeff_sum = 0\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n<1):\n        return 0\n    if (n == 0):\n        return 1\n    if (n==1):\n        return k\n    c = binomial_Coeff(n-1,k)\n    return (k*c)+binomial_Coeff(n-1,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    import math as m\n    return (int(m.factorial(n))/(int(m.factorial(k))*int(m.factorial(n-k))))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n <= 0:\n        return 1\n    return factorial(n) / factorial(k) / factorial(n - k)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    coeff=0\n    for i in range(n+1):\n        coeff+=i*(n-i)\n    return coeff\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    result = 0\n    for i in range(1,n+1):\n        result += math.factorial(n)/(math.factorial(k)*math.factorial(n-k))\n    return result\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    res = n*(n-1)/2\n    for i in range(1,k+1):\n        res+=i\n    return res\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    s=0\n    for i in range(k):\n        n=n+1\n        s=s+i*(n-i)\n    return s\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    num = n*(n+1)//2\n    prod = 1\n    if n > 0:\n        for i in range(1,n+1):\n            num -= i\n            prod = prod*i\n    else:\n        num = 1\n        for i in range(1,n+1):\n            num += i\n        prod = num\n    print(prod)\n    return prod\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if '.' in ip:\n        ip = re.sub(r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})', r'\\2\\3\\4\\5', ip)\n    else:\n        ip = re.sub(r'^(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})', r'\\2\\3\\4', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    count = 0\n    new_ip = []\n    for num in ip:\n        if count == 0 and num == 0:\n            new_ip.append(0)\n        elif num == 0:\n            count += 1\n        else:\n            new_ip.append(num)\n            count = 0\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    ip[3] = re.sub('0+', '', ip[3])\n    return '.'.join(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = re.sub('0+', '', ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == \"0.0.0.0\":\n        return \"\"\n    else:\n        return ip.lstrip(\"0\")\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_list = re.split(r'\\.', ip)\n    ip_list[1] = ip_list[1].lstrip('0')\n    return '.'.join(ip_list)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return ip.strip()\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return '.'.join([str(int(octet)) for octet in ip.split('.') if octet!= '0'])\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = list(ip)\n    temp = []\n    for i in ip:\n        if i!='0':\n            temp.append(i)\n    ip = ''.join(temp)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip=ip.split('.')\n    for i in range(len(new_ip)):\n        if new_ip[i]=='0':\n            new_ip[i]=''\n    return '.'.join(new_ip)\ndef find_ip_or_prefix(string):\n    '''\n    Write a function that accepts a string in the form of CIDR notation.\n    Return the network address and the prefix length of the network.\n    The CIDR notation is a way of assigning a range of addresses and a prefix length to a single address.\n    The first address in the range, or in the address, is called the network address, and the last address in the range is the prefix length.\n    '''\n    if(len(string)==1):\n        return string, int(string)\n    elif(string[-1]=='.'):\n        string=string[:-1]\n    network,prefix=string.split('/')\n    network_address=network.split('.')\n    new_network_address=network_address[:3]+[int(network_address[3])-int(prefix)]\n    return '.'.join(new_network_address), int(prefix)\ndef is_valid_IP_address(ip):\n    '''\n    Write a function that accepts an IP address in dotted quad notation.\n    The IP address is composed of a series of numbers that represent values.\n    The numbers are separated by dots and each number is between 0-255.\n    The function should return true if the IP address is valid and false if it is not.\n    '''\n    ip_split=ip.split('.')\n    if len(ip_split)==4:\n        for i in ip_split:\n            if int(i)>255 or int(i)<0:\n                return False\n        return True\n    return False\ndef is_valid_IP_address_v2(ip):\n    '''\n    Write a function that accepts an IP address in dotted quad notation.\n    The IP address is composed of a series of numbers that represent values.\n    The numbers are separated by dots and each number is between 0-255.\n    The function should return true if the IP address is valid and false if it is not.\n    '''\n    return ip.count('.')==3 and all([len(i)==4 and int(i)>=0 and int(i)<=255 for i in ip.split('.')])\ndef is_valid_IP_address_v3(ip):\n    '''\n    Write a function that accepts an IP address in dotted quad notation.\n    The IP address is composed of a series of numbers that represent values.\n    The numbers are separated by dots and each number is between 0-255.\n    The function should return true if the IP address is valid and false if it is not.\n    '''\n    ip_split=ip.split('.')\n    if len(ip_split)==4:\n        for i in ip_split:\n            if int(i)>255 or int(i)<0:\n                return False\n        return True\n    return False\ndef find_network_address(ip, prefix):\n    '''\n    Write a function that accepts an IP address and the prefix length.\n    The function should return the network address of the IP address with the given prefix length.\n    The network address is the address that is the base address of a network segment.\n    '''\n    ip_split=ip.split('.')\n    new_ip=ip_split[:3]+[int(ip_split[3])-prefix]\n    return '.'.join(new_ip)\ndef get_host_address(host_ip):\n    '''\n    Write a function that accepts an IP address in dotted quad notation.\n    The IP address is composed of a series of numbers that represent values.\n    The numbers are separated by dots and each number is between 0-255.\n    The function should return the host address of the given IP address.\n    '''\n    host_ip_split=host_ip.split('.')\n    host_ip_split[3]=str(255-int(host_ip_split[3]))\n    return '.'.join(host_ip_split)\ndef get_broadcast_address(ip, prefix):\n    '''\n    Write a function that accepts an IP address and prefix length.\n    The function should return the broadcast address of the IP address with the given prefix length.\n    The broadcast address is the address that is the largest address that can be assigned to a host given its network address and the prefix length.\n    '''\n    ip_split=ip.split('.')\n    new_ip=ip_split[:3]+[int(ip_split[3])+prefix]\n    return '.'.join(new_ip)\ndef find_host_address(host_ip, prefix):\n    '''\n    Write a function that accepts an IP address and prefix length.\n    The function should return the host address of the IP address with the given prefix length.\n    The host address is the address that is the largest address that can be assigned to a host given its network address and the prefix length.\n    '''\n    broadcast_address=get_broadcast_address(host_ip,prefix)\n    network_address=find_network_address(broadcast_address,prefix)\n    return get_host_address(network_address)\ndef find_prefix_with_most_network_addresses(ip, num):\n    '''\n    Write a function that accepts an IP address and the number of addresses.\n    The function should return the prefix length of the IP address with the highest number of addresses assigned to it.\n    The IP address should have at least num network addresses.\n    '''\n    ip_split=ip.split('.')\n    if num>=0 and num<=255:\n        if num==0:\n            return ''\n        if int(ip_split[3])<num:\n            if int(ip_split[3])==0:\n                return ''\n            return int(ip_split[3])\n        return '.'.join([ip_split[0],ip_split[1],ip_split[2],str(num)])\n    return ''\ndef find_prefix_with_least_network_addresses(ip, num):\n    '''\n    Write a function that accepts an IP address and the number of addresses.\n    The function should return the prefix length of the IP address with the least number of addresses assigned to it.\n    The IP address should have at least num network addresses.\n    '''\n    ip_split=ip.split('.')\n    if num>=0 and num<=255:\n        if num==0:\n            return ''\n        if int(ip_split[3])>num:\n            return int(ip_split[3])\n        return '.'.join([ip_split[0],ip_split[1],ip_split[2],str(num)])\n    return ''\ndef is_valid_IP_address_or_host_address(ip):\n    '''\n    Write a function that accepts an IP address in dotted quad notation.\n    The IP address is composed of a series of numbers that represent values.\n    The numbers are separated by dots and each number is between 0-255.\n    The function should return true if the IP address is valid and false if it is not.\n    '''\n    try:\n        ip_split=ip.split('.')\n        if len(ip_split)==4:\n            for i in ip_split:\n                if int(i)>255 or int(i)<0:\n                    return False\n            return True\n        return False\n    except:\n        return False\ndef find_network_address_or_host_address(ip, prefix):\n    '''\n    Write a function that accepts an IP address and prefix length.\n    The function should return the network address of the IP address with the given prefix length.\n    The network address is the address that is the base address of a network segment.\n    '''\n    ip_split=ip.split('.')\n    if len(ip_split)==4:\n        new_ip=ip_split[:3]+[int(ip_split[3])-prefix]\n        if int(new_ip[3])>=0 and int(new_ip[3])<=255:\n            return '.'.join(new_ip)\n    return ''\ndef get_host_address_or_network_address(ip, prefix):\n    '''\n    Write a function that accepts an IP address and prefix length.\n    The function should return the host address of the IP address with the given prefix length.\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_index = -1\n    odd_index = -1\n    for i,val in enumerate(list1):\n        if val % 2 == 0:\n            even_index = i\n        else:\n            odd_index = i\n    if even_index == -1:\n        return -1\n    return abs(list1[even_index]-list1[odd_index])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    n = len(list1)\n    even_first = list1[0]\n    odd_first = list1[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i])\n    return abs(list2[0]-list2[1])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return abs(even - odd)\n    \n    \ndef count_digits(num):\n    '''\n    Write a function to count the number of digits in a given number.\n    '''\n    count = 0\n    while num > 0:\n        count += 1\n        num //= 10\n    return count\n    \ndef is_palindrome(num):\n    '''\n    Write a function to check if a number is palindrome or not.\n    '''\n    num_str = str(num)\n    for i in range(len(num_str) // 2):\n        if num_str[i]!= num_str[-i - 1]:\n            return False\n    return True\n    \ndef missing_letter(s1, s2):\n    '''\n    Write a function to find the missing letter in two strings\n    '''\n    s1 = list(s1)\n    s2 = list(s2)\n    s1 = sorted(s1)\n    s2 = sorted(s2)\n    for i in s1:\n        if i not in s2:\n            return i\n    for i in s2:\n        if i not in s1:\n            return i\n    \ndef compare_strings(str1, str2):\n    '''\n    Write a function to compare strings by reversing them and then checking if they are equal or not.\n    '''\n    str1 = str1[::-1]\n    str2 = str2[::-1]\n    if str1 == str2:\n        return True\n    return False\n    \ndef palindrome_permutation(s):\n    '''\n    Write a function to check whether a string is a permutation of a palindrome.\n    '''\n    s = s.replace(\" \", \"\")\n    s = list(s)\n    for i in range(len(s)):\n        if s.count(s[i]) % 2!= 0:\n            return False\n    s = s[::-1]\n    for i in range(len(s)):\n        if s.count(s[i]) % 2!= 0:\n            return False\n    return True\n    \ndef palindrome(s):\n    '''\n    Write a function to check whether a string is palindrome or not.\n    '''\n    s = s.replace(\" \", \"\")\n    s = list(s)\n    for i in range(len(s)):\n        if s.count(s[i]) % 2!= 0:\n            return False\n    s = s[::-1]\n    for i in range(len(s)):\n        if s.count(s[i]) % 2!= 0:\n            return False\n    return True\n    \ndef is_anagram(str1, str2):\n    '''\n    Write a function to check whether two strings are anagram or not.\n    '''\n    if len(str1)!= len(str2):\n        return False\n    str1 = str1.replace(\" \", \"\")\n    str2 = str2.replace(\" \", \"\")\n    str1 = list(str1)\n    str2 = list(str2)\n    for i in range(len(str1)):\n        if str1.count(str1[i])!= str2.count(str2[i]):\n            return False\n    return True\n    \ndef is_pangram(str1, alphabet):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    str1 = str1.replace(\" \", \"\")\n    alphabet = alphabet.replace(\" \", \"\")\n    str1 = set(str1)\n    alphabet = set(alphabet)\n    if len(str1.intersection(alphabet)) == len(str1):\n        return True\n    return False\n    \ndef is_pangram2(str1, alphabet):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    alphabet = alphabet.replace(\" \", \"\")\n    alphabet = set(alphabet)\n    if len(alphabet) == len(str1):\n        return True\n    return False\n    \ndef is_pangram3(str1, alphabet):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    alphabet = alphabet.replace(\" \", \"\")\n    alphabet = set(alphabet)\n    alphabet = sorted(alphabet)\n    str1 = str1.replace(\" \", \"\")\n    str1 = sorted(str1)\n    for i in range(len(str1)):\n        if str1[i] not in alphabet:\n            return False\n    return True\n    \ndef is_pangram4(str1, alphabet):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    alphabet = alphabet.replace(\" \", \"\")\n    alphabet = set(alphabet)\n    str1 = str1.replace(\" \", \"\")\n    for i in alphabet:\n        if i not in str1:\n            return False\n    return True\n    \ndef is_pangram5(str1, alphabet):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    alphabet = alphabet.replace(\" \", \"\")\n    alphabet = set(alphabet)\n    str1 = str1.replace(\" \", \"\")\n    for i in range(len(str1)):\n        if str1[i] not in alphabet:\n            return False\n    return True\n    \ndef is_pangram6(str1, alphabet):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    alphabet = alphabet.replace(\" \", \"\")\n    alphabet = set(alphabet)\n    str1 = str1.replace(\" \", \"\")\n    if len(alphabet) == len(str1):\n        return True\n    return False\n    \ndef is_pangram7(str1, alphabet):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    alphabet = alphabet.replace(\" \", \"\")\n    alphabet = set(alphabet)\n    alphabet = sorted(alphabet)\n    str1 = str1.replace(\" \", \"\")\n    str1 = sorted(str1)\n    for i in range(len(str1)):\n        if str1[i] not in alphabet:\n            return False\n    return True\n    \ndef is_pangram8(str1, alphabet):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    alphabet = alphabet.replace(\" \", \"\")\n    alphabet = set(alphabet)\n    alphabet = sorted(alphabet)\n    str1 = str1.replace(\" \", \"\")\n    str1 = sorted(str1)\n    for i in range(len(str1)):\n        if str1[i] not in alphabet:\n            return False\n    return True\n    \ndef is_pangram9(str1, alphabet):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    alphabet = alphabet.replace(\" \", \"\")\n    alphabet = set(alphabet)\n    str1 = str1.replace(\" \", \"\")\n    str1 = sorted(str1)\n    for i in range(len(str1)):\n        if str1[i] not in alphabet:\n            return False\n    return True\n    \ndef is_pangram10(str1, alphabet):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    alphabet = alphabet.replace(\" \", \"\")\n    alphabet = set(alphabet)\n    str1 = str1.replace(\" \", \"\")\n    for i in range(len(str1)):\n        if str1[i] not in alphabet:\n            return False\n    return True\n    \ndef is_pangram11(str1, alphabet):\n    '''\n    Write a function to check whether a string is a pangram or not.\n    '''\n    alphabet = alphabet.replace(\" \", \"\""
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    odd = 0\n    even = 0\n    for x in list1:\n        if x % 2 == 0:\n            even = even + x\n        else:\n            odd = odd + x\n    print(even - odd)\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    # write your solution here\n    if len(list1) <= 0:\n        return \"Invalid input\"\n    \n    even_number = 0\n    odd_number = 0\n    for i in range(0,len(list1)):\n        if list1[i]%2 == 0:\n            even_number = even_number + list1[i]\n        else:\n            odd_number = odd_number + list1[i]\n    diff = abs(even_number - odd_number)\n    return diff\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if(i%2 == 0):\n            even += i\n        else:\n            odd += i\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 1:\n        return list1[0]\n    elif len(list1) == 2:\n        return abs(list1[0] - list1[1])\n    else:\n        return abs(list1[0] - list1[1] + list1[2])\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list1 = sorted(list1)\n    if list1[0] % 2 == 0:\n        return list1[0] - list1[1]\n    else:\n        return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            list2.append(list1[i])\n        else:\n            list2.append(list1[i])\n    odd_e = 0\n    for i in range(len(list2)):\n        if list2[i] % 2 == 1:\n            odd_e = list2[i]\n    even_e = 0\n    for i in range(len(list2)):\n        if list2[i] % 2 == 0:\n            even_e = list2[i]\n    dif_e = even_e - odd_e\n    return dif_e\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(n):\n        if str1[i]!=str2[i]:\n            count += 1\n            str1 = list(str1)\n            str2 = list(str2)\n            \n            str1[i],str2[i] = str2[i],str1[i]\n            str1 = \"\".join(str1)\n            str2 = \"\".join(str2)\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(0, len(str1)) :\n        if str1[i]!= str2[i] :\n            count += 1\n            str1 = str1[:i] + str1[i+1:]\n            str2 = str2[:i] + str2[i+1:]\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(len(str1)) : \n        if str1[i]!= str2[i] : \n            count += 1\n    return count \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # print(\"Started\")\n    # print(str1)\n    # print(str2)\n    swaps = 0\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if len(str1) == len(str2) :\n        return -1\n    swaps = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            swaps+=1\n            str1,str2 = swap(str1,str2,i)\n    return swaps\n    "
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # swap = 1\n    # for x in str1 :\n    #     if x!= str2[x] :\n    #         swap += 1\n    # return swap\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = ''.join(str1)\n    str2 = ''.join(str2)\n    swap = 0\n    if(str1 == str2):\n        return 0\n    else:\n        for i in range(0,len(str1)):\n            if(str1[i]!= str2[i]):\n                new_str1 = str1[i]\n                new_str2 = str2[i]\n                swap+=1\n        return swap\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=list(str1)\n    str2=list(str2)\n    count=0\n    for i in range(0,len(str1)) : \n        if str1[i]==str2[i] :\n            pass\n        else :\n            str1[i]=str2[i]\n            count+=1\n    return count\n    \ndef min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1=list(str1)\n    str2=list(str2)\n    count=0\n    for i in range(0,len(str1)) : \n        if str1[i]==str2[i] :\n            pass\n        else :\n            str1[i]=str2[i]\n            str2[i]=str1[i]\n            count+=1\n    return count\n    \n    \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    def swap(string, i, j): \n        string = list(string)\n        string[i], string[j] = string[j], string[i]\n        string = ''.join(string)\n        return string\n    str1 = list(str1)\n    str2 = list(str2)\n    count = 0\n    i = 0\n    j = 0\n    while(i < len(str1) and j < len(str2)):\n        if(str1[i] == str2[j]):\n            i += 1\n            j += 1\n        else:\n            str1 = swap(str1,i,j)\n            count += 1\n            j += 1\n            i = 0\n    while(i < len(str1)):\n        str1 = swap(str1,i,i)\n        count += 1\n        i += 1\n    while(j < len(str2)):\n        str2 = swap(str2,j,j)\n        count += 1\n        j += 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    count = 0\n    for i in range(0,len(str1)) : \n        if(str1[i]!= str2[i]) : \n            count = count+1\n            print(\"swap required for \",str1,\" and \",str2,\" count = \",count)\n            return count\n    print(\"no swap required for \",str1,\" and \",str2)\n    return count\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for ele in tuple_list:\n        tuple_size += sys.getsizeof(ele)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    s = 0\n    for val in tuple_list:\n        s += sys.getsizeof(val)\n    return s\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    num_bytes = 0\n    for x in tuple_list:\n        num_bytes += sys.getsizeof(x)\n    return num_bytes\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size = 0\n    for val in tuple_list:\n        size += sys.getsizeof(val)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_list_size=0\n    for i in tuple_list:\n        if type(i)==int:\n            tuple_list_size+=8\n        elif type(i)==float:\n            tuple_list_size+=8\n        elif type(i)==str:\n            tuple_list_size+=len(i)\n        elif type(i)==bool:\n            if i:\n                tuple_list_size+=1\n            else:\n                tuple_list_size+=0\n        elif type(i)==dict:\n            tuple_list_size+=tuple_size(i.values())\n        else:\n            pass\n    return tuple_list_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    byte_size = 0\n    for index in range(len(tuple_list)):\n        byte_size += sys.getsizeof(tuple_list[index])\n    return byte_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    tuple_size = 0\n    for i in tuple_list:\n        tuple_size = tuple_size + sys.getsizeof(i)\n    return tuple_size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    sum = 0\n    for i in range(len(tuple_list)):\n        sum += sys.getsizeof(tuple_list[i])\n    return sum\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    i1, i2 = 0, 0\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    p1, p2 = 0, 0\n    while p2 < len(arr2):\n        if p1 >= len(arr1):\n            p2 += 1\n            continue\n        if arr1[p1] > arr2[p2]:\n            p2 += 1\n        elif arr1[p1] < arr2[p2]:\n            p1 += 1\n        else:\n            return arr1[p1]\n    \n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1_sz = len(arr1)\n    arr2_sz = len(arr2)\n    if arr1_sz == 0:\n        return arr2[k-1]\n    elif arr2_sz == 0:\n        return arr1[k-1]\n    else:\n        if k == 1:\n            return min(arr1[0],arr2[0])\n        elif k > 1:\n            if arr1_sz >= k and arr2_sz >= k:\n                return find_kth(arr1[1:], arr2, k-1)\n            else:\n                return find_kth(arr1, arr2[1:], k-1)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1.extend(arr2)\n    n = len(arr1)\n    if k <= n and k > 0:\n        low = 0\n        high = n - 1\n        mid = n >> 1\n        while low <= high:\n            if arr1[mid] == k:\n                return arr1[mid]\n            elif arr1[mid] > k:\n                high = mid - 1\n            else:\n                low = mid + 1\n            mid = (low + high) // 2\n        return arr1[mid]\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # Edge cases\n    if not arr1 or not arr2:\n        return -1\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    \n    # Now we need to find the position of k - 1th element.\n    # We can use binary search in this case.\n    left = 0\n    right = len(arr1)\n    while left < right:\n        # How we need to find k - 1th element is this.\n        # Suppose k = 7\n        # We will have 9 elements in the array,\n        # If we want to find 7th element, we will need to find 3rd element,\n        # which is 9 / 2 = 4th element.\n        # So we will iterate left = 1 and right = 5.\n        middle = (left + right) // 2\n        \n        # Now we need to find k - 1th element.\n        # So let us start searching for k - 1th element\n        # At the middle element\n        if arr1[middle] > arr2[middle]:\n            # arr1[middle] > arr2[middle] means that arr2[middle] is smaller than\n            # arr1[middle], so we need to increase left to middle + 1\n            left = middle + 1\n        else:\n            # arr1[middle] < arr2[middle] means that arr1[middle] is smaller than\n            # arr2[middle], so we need to decrease right to middle - 1\n            right = middle\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 == 0:\n        return arr2[k-1]\n    if n2 == 0:\n        return arr1[k-1]\n    if n1 >= n2:\n        return find_kth(arr2, arr1, k)\n    if n2 > 0:\n        if arr1[n1 - 1] < arr2[0]:\n            return find_kth(arr1, arr2, k)\n    else:\n        if arr1[n1 - 1] > arr2[0]:\n            return find_kth(arr1, arr2, k)\n    p = n1 - 1\n    q = 0\n    s = p + q\n    while s <= k:\n        if arr1[p] > arr2[q]:\n            s += 1\n            q += 1\n        elif arr1[p] < arr2[q]:\n            s += 1\n            p += 1\n        elif arr1[p] == arr2[q]:\n            s += 1\n            p += 1\n            q += 1\n    if k < s:\n        return find_kth(arr1, arr2, k)\n    else:\n        return arr2[q-1]\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    idx1 = 0\n    idx2 = 0\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    len1 = len(arr1)\n    len2 = len(arr2)\n    low1 = 0\n    low2 = 0\n    high = min(len1, len2)\n    while low1 <= high:\n        mid1 = (low1+high)//2\n        mid2 = (low2+high)//2\n        if arr1[mid1] == arr2[mid2]:\n            if mid1 == k-1:\n                return arr1[mid1]\n            if mid1 == k:\n                return arr1[mid1]\n            if k >= mid2:\n                low2 = mid1+1\n            else:\n                low1 = mid1-1\n        elif arr1[mid1] > arr2[mid2]:\n            if mid1 == k-1:\n                return arr1[mid1]\n            if mid1 == k:\n                return arr1[mid1]\n            low2 = mid1+1\n        else:\n            if mid2 == k-1:\n                return arr2[mid2]\n            if mid2 == k:\n                return arr2[mid2]\n            low1 = mid2+1\n    return -1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if arr1:\n        i = 0\n        while i < len(arr1) and k > 0:\n            if arr2 and arr1[i] < arr2[0]:\n                arr2.pop(0)\n                k -= 1\n            else:\n                arr1.pop(i)\n                k -= 1\n            i += 1\n        return arr1[i - 1] if k == 0 else None\n    else:\n        return arr2[k - 1] if k > 0 else None\n    \n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n = len(arr1) + len(arr2)\n    if k > n:\n        return -1\n    elif k == 0:\n        return min(arr1[0], arr2[0])\n    if len(arr1) == 0:\n        if arr2[k-1] == arr2[0]:\n            return arr2[0]\n        return arr2[k-1]\n    if len(arr2) == 0:\n        if arr1[k-1] == arr1[0]:\n            return arr1[0]\n        return arr1[k-1]\n    if k <= len(arr1) and k <= len(arr2):\n        if arr1[len(arr1)-1] < arr2[len(arr2)-1]:\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        return find_kth(arr1[k-len(arr1):], arr2, k-len(arr1))\n    return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n    \ndef find_kth_fast(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2):\n        return min(arr1[-1], arr2[-1])\n    \n    if k <= len(arr1):\n        if arr1[len(arr1)-1] < arr2[len(arr2)-1]:\n            return find_kth(arr1, arr2[k-len(arr1):], k-len(arr1))\n        return find_kth(arr1[k-len(arr1):], arr2, k-len(arr1))\n    if k <= len(arr2):\n        if arr2[len(arr2)-1] < arr1[len(arr1)-1]:\n            return find_kth(arr1, arr2[k-len(arr2):], k-len(arr2))\n        return find_kth(arr1[k-len(arr2):], arr2, k-len(arr2))\n    \ndef find_kth_fast2(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0:\n        return arr2[k-1]\n    if len(arr2) == 0:\n        return arr1[k-1]\n    if k == 0:\n        return min(arr1[0], arr2[0])\n    if k == len(arr1) + len(arr2):\n        return min(arr1[-1], arr2[-1])\n    \n    if k <= len(arr1):\n        if arr1[len(arr1)-1] < arr2[len(arr2)-1]:\n            return find_kth_fast(arr1, arr2[k-len(arr1):], k-len(arr1))\n        return find_kth_fast(arr1[k-len(arr1):], arr2, k-len(arr1))\n    if k <= len(arr2):\n        if arr2[len(arr2)-1] < arr1[len(arr1)-1]:\n            return find_kth_fast(arr1, arr2[k-len(arr2):], k-len(arr2))\n        return find_kth_fast(arr1[k-len(arr2):], arr2, k-len(arr2))\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp=number\n    sum_digit = 0\n    while(temp>0):\n        digit = temp % 10\n        sum_digit = sum_digit + (digit ** 3)\n        temp = temp // 10\n    if number == sum_digit:\n        print(number,\"is an armstrong number\")\n    else:\n        print(number,\"is not an armstrong number\")\n    \n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if number == sum:\n        print(f'{number} is armstrong')\n    else:\n        print(f'{number} is not armstrong')\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    total = 0\n    while temp > 0:\n        digit = temp%10\n        total = total + pow(digit,3)\n        temp = temp//10\n    if total == number:\n        print(f\"{number} is an Armstrong number\")\n    else:\n        print(f\"{number} is not an Armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    list_1 = list(str(number))\n    sum_1 = 0\n    for i in range(len(list_1)):\n        sum_1 += int(list_1[i])**len(list_1)\n    if sum_1 == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit_sum = 0\n    digit_product = 1\n    while number > 0:\n        digit_sum += number % 10\n        number = number // 10\n        digit_product *= number % 10\n        number = number // 10\n    return digit_sum == digit_product\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = abs(number)\n    sum = 0\n    n = len(str(number))\n    while number > 0:\n        sum = sum + (number % 10) ** n\n        number = number // 10\n    return sum == number\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    for i in str(number):\n        sum = sum + int(i)**3\n    return number == sum\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    sum = 0\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp = temp // 10\n    if number == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    \n    if str(number) == str(number)[::-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    temp = number\n    while temp > 0:\n        digit = temp % 10\n        sum += digit ** 3\n        temp //= 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    sum = 0\n    for i in range(n+1):\n        sum = sum + i\n    avg = sum/n\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    if number == 1:\n        sum = 0\n        average = 0\n    else:\n        sum = 0\n        average = 0\n        sum = sum + number\n        average = average + (number / 2)\n        for i in range(2, number):\n            sum = sum + i\n            average = average + (i / 2)\n    print('Sum: ', sum)\n    print('Average: ', average)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    for i in range(0, number):\n        sum += i\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    \n    #sum and average of first n natural numbers\n    sum = 0\n    average = 0\n    \n    while n > 0:\n        sum += n\n        n -= 1\n    \n    average = sum / n\n    \n    print('Sum:', sum)\n    print('Average:', average)\n    \n    return (sum, average)\n    \n    "
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(0, number):\n        sum = sum + i\n    avg = sum / number\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n    sum = 0\n    avg = 0\n    if n == 0:\n        sum = 0\n        avg = 0\n    else:\n        sum = n*(n+1)/2\n        avg = sum/n\n    return sum, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    total_count = 0\n    for i in range(1,number+1):\n        total += i\n        total_count += 1\n    average = total/total_count\n    return total,average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    for i in range(number):\n        total += i\n    avg = total/number\n    return total, avg\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum += i\n    average = sum/number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    count = 0\n    while count <= number:\n        sum = sum + count\n        average = sum / number\n        count = count + 1\n    return sum, average\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #code here\n    \n    if (n%2==0) :\n        print(n,\"is even\")\n    else:\n        print(n,\"is odd\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    #code here\n    if n%2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        return True\n    else:\n        return False\nn = int(input())\nis_Even(n)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # code here\n    \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n == 0:\n        print(\"It is an Even number.\")\n    else:\n        print(\"It is an Odd number.\")\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2==0:\n        print(\"It's an even number.\")\n    else:\n        print(\"It's an odd number.\")\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    chars = {}\n    for i in range(len(str1)):\n        if str1[i] in chars:\n            chars[str1[i]] += 1\n        else:\n            chars[str1[i]] = 1\n    for j in range(len(str1)):\n        if chars[str1[j]] > 1:\n            return str1[j]\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.strip()\n    len_str = len(str1)\n    i = 0\n    while i < len_str:\n        j = i + 1\n        while j < len_str:\n            if str1[i] == str1[j]:\n                return str1[i]\n            j += 1\n        i += 1\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char = \"\"\n    count = 0\n    for i in range(len(str1)):\n        if str1[i] in char:\n            count = count + 1\n        else:\n            char = char + str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    for i in range(len(str1)-1):\n        if str1[i] == str1[i+1]:\n            return str1[i]\n    return None\n    \ndef check_if_palindrome(str1):\n    '''\n    Write a python function to check if a string is palindrome or not.\n    '''\n    for i in range(len(str1)//2):\n        if str1[i]!= str1[len(str1)-i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    list1=list(str1)\n    for i in range(len(list1)-1):\n        if list1[i]==list1[i+1]:\n            print(list1[i])\n            break\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    return str1.find(str1[0])+1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for c in str1:\n        if c in char_dict:\n            char_dict[c] += 1\n        else:\n            char_dict[c] = 1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_set = set(str1)\n    for char in char_set:\n        if str1.count(char) > 1:\n            return char\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for i in range(len(str1)):\n        if str1[i] in d:\n            return str1[i]\n        d[str1[i]] = i\n    return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # Python program to find the first repeated character in a given string.\n    # dict = {}\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for num in range(n):\n        for i in range(1, num):\n            if num % i == 0:\n                break\n        else:\n            ludic.append(num)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucid = []\n    for i in range(1, n+1):\n        if all((i % x == 0) for x in range(2, i)):\n            lucid.append(i)\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    count = 0\n    while count < n:\n        if count >= 1:\n            count += sum(int(x) for x in str(count))\n        if count == n:\n            break\n    return count\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    lucids = []\n    for i in range(1, n + 1):\n        count = 0\n        while i >= 10:\n            i = i // 10\n            count += 1\n        if count % 2 == 0:\n            lucids.append(i)\n    return lucids\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n    \ndef get_ludic_2(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    pass\n    \ndef get_longest_palindrome(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_2(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_3(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_4(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_5(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_6(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_7(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_8(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_9(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_10(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_11(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_12(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_13(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_14(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_15(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_16(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_17(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_18(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_19(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_20(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_21(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_22(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_23(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_24(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_25(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_26(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_27(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_28(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_29(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_30(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_31(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_32(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_33(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_34(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_35(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_36(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_37(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_38(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_39(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_40(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_41(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_42(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_43(s):\n    '''\n    Write a function to get the longest palindrome for a given string.\n    '''\n    pass\n    \ndef get_longest_palindrome_44(s):\n    '''\n    Write a function to get the longest palindrome fo"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    num = 1\n    while num <= n:\n        if is_ludic(num):\n            ludic.append(num)\n        num += 1\n    return lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(n) if is_ludic(i)]\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludics = []\n    i = 2\n    while(True):\n        if i > n:\n            break\n        elif is_ludic(i):\n            ludics.append(i)\n        i += 1\n    return ludics\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    start = 1\n    end = n\n    mid = n\n    while start <= end:\n        mid = (start + end) // 2\n        # print(start, end, mid)\n        if mid * mid <= n:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return start - 1\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_ludic(number):\n        str_number = str(number)\n        num_set = {int(str_number[i:i+2]) for i in range(len(str_number)-1)}\n        if 0 not in num_set:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    word_list = s.split()\n    word_list.reverse()\n    return \" \".join(word_list)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    l = s.split()\n    return \" \".join(l[::-1])\n    # space = \" \"\n    # l = s.split()\n    # rev = l[::-1]\n    # return space.join(rev)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split is used to split the sentence in a list. \n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s = s[::-1]\n    s =''.join(s)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split()\n    s.reverse()\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # s =''.join(s.split()[::-1])\n    # return s\n    s =''.join(s.split()[::-1])\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    # split_words = s.split()\n    # join_words = \" \".join(split_words[::-1])\n    # return join_words\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(' ')\n    s.reverse()\n    return''.join(s)\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num < 2:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                print(f\"{num} is not a prime number.\")\n                break\n            else:\n                print(f\"{num} is a prime number.\")\n                break\n    else:\n        print(f\"{num} is not a prime number.\")\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    elif num % 2 == 0:\n        return False\n    for i in range(3, int(math.sqrt(num) + 1), 2):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2:\n        return True\n    if num == 0 or num == 1 or num == -1:\n        return False\n    if num % 2 == 0:\n        return False\n    i = 3\n    while i * i <= num:\n        if num % i == 0:\n            return False\n        i += 2\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    prime = 1\n    if num == 1:\n        return False\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                prime = 0\n                break\n        if prime == 1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    # make sure it is a positive integer\n    if type(num)!= int:\n        return False\n    # check if a number is divisible by any number between 2 and the number itself\n    for i in range(2,num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 2 or num == 3:\n        return True\n    if num < 2 or num % 2 == 0:\n        return False\n    for i in range(3, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree < 0:\n        return -degree + 360\n    elif degree > 360:\n        return degree - 360\n    else:\n        return degree\ndef add(x, y):\n    '''\n    Write a function to add two numbers.\n    '''\n    return x + y\ndef sub(x, y):\n    '''\n    Write a function to subtract two numbers.\n    '''\n    return x - y\ndef mul(x, y):\n    '''\n    Write a function to multiply two numbers.\n    '''\n    return x * y\ndef div(x, y):\n    '''\n    Write a function to divide two numbers.\n    '''\n    return x / y\ndef mod(x, y):\n    '''\n    Write a function to find the mod of two numbers.\n    '''\n    return x % y\ndef pow(x, y):\n    '''\n    Write a function to raise a number to a power.\n    '''\n    return x ** y\ndef log(x, base=2):\n    '''\n    Write a function to log a number in base 2.\n    '''\n    if base < 2:\n        return -math.inf\n    if base > 2 and x == 0:\n        return -math.inf\n    if base > 2 and x == 1:\n        return 0\n    if base > 2 and x == 2:\n        return 1\n    if base > 2 and x > 2:\n        return math.log(x, base)\n    else:\n        return math.log(x, base)\ndef exp(x, base=2):\n    '''\n    Write a function to raise a number to a power.\n    '''\n    if base < 2:\n        return -math.inf\n    if base > 2 and x == 0:\n        return -math.inf\n    if base > 2 and x == 1:\n        return 1\n    if base > 2 and x > 2:\n        return math.exp(x, base)\n    else:\n        return math.exp(x, base)\ndef factorial(x):\n    '''\n    Write a function to compute factorial of a number.\n    '''\n    if x < 0:\n        return -1\n    if x == 0:\n        return 1\n    return math.factorial(x)\ndef reverse(s):\n    '''\n    Write a function to reverse a string.\n    '''\n    if s == '':\n        return s\n    if len(s) == 1:\n        return s[0]\n    return s[-1] + reverse(s[:-1])\ndef max_reverse(s):\n    '''\n    Write a function to compute the max of a string's characters.\n    '''\n    if len(s) == 0:\n        return 0\n    max_char = s[0]\n    for i in range(1, len(s)):\n        if s[i] > max_char:\n            max_char = s[i]\n    return max_char\ndef count(s, c):\n    '''\n    Write a function to count how many time a character appears in a string.\n    '''\n    if c not in s:\n        return 0\n    count = 0\n    for i in range(len(s)):\n        if s[i] == c:\n            count += 1\n    return count\ndef non_repeat_string(s):\n    '''\n    Write a function to find the longest non-repeating substring in a string.\n    '''\n    if len(s) == 0:\n        return ''\n    if len(s) == 1:\n        return s\n    if len(s) == 2:\n        return s[0]\n    max_substring = ''\n    for i in range(len(s) - 1):\n        substring = s[i: i + 2]\n        if len(substring) == 2 and substring not in max_substring:\n            max_substring = substring\n    return max_substring\ndef is_palindrome(s):\n    '''\n    Write a function to check if a string is palindrome.\n    '''\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1]\n    if s[0]!= s[len(s) - 1]:\n        return False\n    return is_palindrome(s[1: len(s) - 1])\ndef is_palindrome_recursive(s):\n    '''\n    Write a function to check if a string is palindrome.\n    '''\n    if len(s) == 0:\n        return False\n    if len(s) == 1:\n        return True\n    if len(s) == 2:\n        return s[0] == s[1]\n    if s[0]!= s[len(s) - 1]:\n        return False\n    return is_palindrome_recursive(s[1: len(s) - 1])\ndef right_rotate(s, k):\n    '''\n    Write a function to rotate a string by k positions.\n    '''\n    if k < 0:\n        return ''\n    if k > len(s):\n        k = k % len(s)\n    for i in range(k):\n        s = s[1:] + s[0]\n    return s\ndef is_anagram(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) == 0:\n        return False\n    if len(s1) == 1:\n        return True\n    if len(s1) == 2:\n        return s1[0] == s2[0] and s1[1] == s2[1]\n    if s1[0]!= s2[0]:\n        return False\n    return is_anagram(s1[1:], s2[1:])\ndef is_anagram_recursive(s1, s2):\n    '''\n    Write a function to check if two strings are anagrams.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    if len(s1) == 0:\n        return False\n    if len(s1) == 1:\n        return True\n    if len(s1) == 2:\n        return s1[0] == s2[0] and s1[1] == s2[1]\n    if s1[0]!= s2[0]:\n        return False\n    return is_anagram_recursive(s1[1:], s2[1:])\ndef sub_matrix_sum(a, k):\n    '''\n    Write a function to compute the sum of a submatrix of a matrix.\n    '''\n    if k < 0 or k >= len(a):\n        return 0\n    sum = 0\n    for i in range(len(a)):\n        for j in range(len(a)):\n            if i < j and i + j < len(a) - k:\n                sum += a[i][j]\n    return sum\ndef partition(s):\n    '''\n    Write a function to partition a string into all possible palindrome\n    substrings.\n    '''\n    if len(s) < 1:\n        return []\n    if len(s) == 1:\n        return [[s[0]]]\n    if len(s) == 2:\n        return [[s[0], s[1]]]\n    if len(s) == 3:\n        return [[s[0], s[1], s[2]]]\n    if len(s) == 4:\n        return [[s[0], s[1], s[2], s[3]]]\n    if len(s) == 5:\n        return [[s[0], s[1], s[2], s[3], s[4]]]\n    palindrome_partition = partition(s[1: len(s) - 1])\n    for i in range(len(palindrome_partition)):\n        palindrome_partition[i] += [s[0]]\n    return palindrome_partition\ndef search(a, x):\n    '''\n    Write a function to search a sorted array using Binary Search.\n    '''\n    if a == [] or a == None or len(a) < "
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * math.pi / 180.0\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree*math.pi/180\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.radians(degree)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi/180)\n    return radian\ndef radian_degree(degree):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = degree*(180/math.pi)\n    return degree\ndef deg_minute(degree):\n    '''\n    Write a function to convert degrees to minutes.\n    '''\n    minute = degree*(60/360)\n    return minute\ndef deg_minute(minute):\n    '''\n    Write a function to convert minutes to degrees.\n    '''\n    degree = minute*(180/60)\n    return degree\ndef deg_second(degree):\n    '''\n    Write a function to convert degrees to seconds.\n    '''\n    second = degree*(360/360)\n    return second\ndef deg_second(second):\n    '''\n    Write a function to convert seconds to degrees.\n    '''\n    degree = second*(360/360)\n    return degree\ndef radian_minute(radian):\n    '''\n    Write a function to convert radians to minutes.\n    '''\n    minute = radian*(60/360)\n    return minute\ndef radian_minute(minute):\n    '''\n    Write a function to convert minutes to radians.\n    '''\n    radian = minute*(360/60)\n    return radian\ndef radian_second(radian):\n    '''\n    Write a function to convert radians to seconds.\n    '''\n    second = radian*(360/360)\n    return second\ndef radian_second(second):\n    '''\n    Write a function to convert seconds to radians.\n    '''\n    radian = second*(360/360)\n    return radian\ndef degree_minute(degree):\n    '''\n    Write a function to convert degrees to minutes.\n    '''\n    minute = degree*(60/360)\n    return minute\ndef degree_minute(minute):\n    '''\n    Write a function to convert minutes to degrees.\n    '''\n    degree = minute*(360/60)\n    return degree\ndef degree_second(degree):\n    '''\n    Write a function to convert degrees to seconds.\n    '''\n    second = degree*(360/360)\n    return second\ndef degree_second(second):\n    '''\n    Write a function to convert seconds to degrees.\n    '''\n    degree = second*(360/360)\n    return degree\ndef radian_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = radian*(180/math.pi)\n    return degree\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi/180)\n    return radian\ndef radian_minute(radian):\n    '''\n    Write a function to convert radians to minutes.\n    '''\n    minute = radian*(60/math.pi)\n    return minute\ndef radian_minute(minute):\n    '''\n    Write a function to convert minutes to radians.\n    '''\n    radian = minute*(math.pi/60)\n    return radian\ndef radian_second(radian):\n    '''\n    Write a function to convert radians to seconds.\n    '''\n    second = radian*(2*math.pi)\n    return second\ndef radian_second(second):\n    '''\n    Write a function to convert seconds to radians.\n    '''\n    radian = second*(2*math.pi)\n    return radian\ndef degree_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi/180)\n    return radian\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = radian*(180/math.pi)\n    return degree\ndef degree_minute(degree):\n    '''\n    Write a function to convert degrees to minutes.\n    '''\n    minute = degree*(60/360)\n    return minute\ndef degree_minute(minute):\n    '''\n    Write a function to convert minutes to degrees.\n    '''\n    degree = minute*(360/60)\n    return degree\ndef degree_second(degree):\n    '''\n    Write a function to convert degrees to seconds.\n    '''\n    second = degree*(360/360)\n    return second\ndef degree_second(second):\n    '''\n    Write a function to convert seconds to degrees.\n    '''\n    degree = second*(360/360)\n    return degree\ndef radian_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = radian*(180/math.pi)\n    return degree\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi/180)\n    return radian\ndef radian_minute(radian):\n    '''\n    Write a function to convert radians to minutes.\n    '''\n    minute = radian*(60/math.pi)\n    return minute\ndef radian_minute(minute):\n    '''\n    Write a function to convert minutes to radians.\n    '''\n    radian = minute*(math.pi/60)\n    return radian\ndef radian_second(radian):\n    '''\n    Write a function to convert radians to seconds.\n    '''\n    second = radian*(2*math.pi)\n    return second\ndef radian_second(second):\n    '''\n    Write a function to convert seconds to radians.\n    '''\n    radian = second*(2*math.pi)\n    return radian\ndef degree_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi/180)\n    return radian\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = radian*(180/math.pi)\n    return degree\ndef degree_minute(degree):\n    '''\n    Write a function to convert degrees to minutes.\n    '''\n    minute = degree*(60/360)\n    return minute\ndef degree_minute(minute):\n    '''\n    Write a function to convert minutes to degrees.\n    '''\n    degree = minute*(360/60)\n    return degree\ndef degree_second(degree):\n    '''\n    Write a function to convert degrees to seconds.\n    '''\n    second = degree*(360/360)\n    return second\ndef degree_second(second):\n    '''\n    Write a function to convert seconds to degrees.\n    '''\n    degree = second*(360/360)\n    return degree\ndef radian_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degree = radian*(180/math.pi)\n    return degree\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.pi/180)\n    return radian\ndef radian_minute(radian):\n    '''\n    Write a function to convert radians to minutes.\n    '''\n    minute = radian*(60/math.pi)\n    return minute\ndef radian_minute(minute):\n    '''\n    Write a function to convert minutes to radians.\n    '''\n    radian = minute*(math.pi/60)\n    return radian\ndef radian_second(radian):\n    '''\n    Write a function to convert radians to seconds.\n    '''\n    second = radian*(2*math.pi)\n    return second\ndef radian_second(second):\n    '''\n    Write a function to convert seconds to radians.\n    '''\n    radian = second*(2*math.pi)\n    return radian\ndef degree_radian(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree*(math.p"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    if degree < 0:\n        degree = -1*degree\n        radian = math.pi*degree/180.0\n    else:\n        radian = degree/180.0*math.pi\n    return radian\ndef radian_degree(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    degrees = radian*180.0/math.pi\n    if degrees < -180:\n        degrees = -180.0\n    elif degrees > 180:\n        degrees = 180.0\n    return degrees\ndef deg2rad(degrees):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degrees*math.pi/180.0\ndef rad2deg(radians):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    return radians*180.0/math.pi\ndef rad_to_dms(rad):\n    '''\n    Write a function to convert radians to degrees, minutes, and seconds.\n    '''\n    degrees = rad/math.pi*180.0\n    minutes = degrees/60.0\n    seconds = minutes/60.0\n    return degrees, minutes, seconds\ndef dms_to_rad(degrees, minutes, seconds):\n    '''\n    Write a function to convert degrees, minutes, and seconds to radians.\n    '''\n    return degrees + minutes/60.0 + seconds/3600.0*180.0\ndef lonlat_distance(a, b):\n    '''\n    Write a function to compute the distance between two points on the earth (specified in decimal degrees).\n    '''\n    # convert decimal degrees to radians\n    lon1, lat1, lon2, lat2 = map(radian_degree, [a, b])\n    # haversine formula\n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    # Radius of earth in kilometers is 6371\n    km = 6371 * c\n    return km\ndef calc_dist_polar(lat1, lon1, lat2, lon2):\n    '''\n    Write a function to compute the distance between two points on the earth (specified in decimal degrees).\n    '''\n    # convert decimal degrees to radians\n    lat1, lon1, lat2, lon2 = map(radian_degree, [lat1, lon1, lat2, lon2])\n    # haversine formula\n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    # Radius of earth in kilometers is 6371\n    km = 6371 * c\n    return km\ndef calc_dist_cartesian(x1, y1, x2, y2):\n    '''\n    Write a function to compute the distance between two points on the earth (specified in decimal degrees).\n    '''\n    # convert decimal degrees to radians\n    x1, y1, x2, y2 = map(radian_degree, [x1, y1, x2, y2])\n    # haversine formula\n    dlon = x2 - x1 \n    dlat = y2 - y1 \n    a = math.sin(dlat/2)**2 + math.cos(y1) * math.cos(y2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    # Radius of earth in kilometers is 6371\n    km = 6371 * c\n    return km\ndef calc_dist_ecef(x1, y1, z1, x2, y2, z2):\n    '''\n    Write a function to compute the distance between two points on the earth (specified in decimal degrees).\n    '''\n    # convert decimal degrees to radians\n    x1, y1, z1, x2, y2, z2 = map(radian_degree, [x1, y1, z1, x2, y2, z2])\n    # haversine formula\n    dlon = x2 - x1 \n    dlat = y2 - y1 \n    dz = z2 - z1 \n    a = math.sin(dlat/2)**2 + math.cos(y1) * math.cos(y2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    # Radius of earth in kilometers is 6371\n    km = 6371 * c\n    return km\ndef calc_dist_lla(lat1, lon1, h1, lat2, lon2, h2):\n    '''\n    Write a function to compute the distance between two points on the earth (specified in decimal degrees).\n    '''\n    # convert decimal degrees to radians\n    lat1, lon1, h1, lat2, lon2, h2 = map(radian_degree, [lat1, lon1, h1, lat2, lon2, h2])\n    # haversine formula\n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    # Radius of earth in kilometers is 6371\n    km = 6371 * c\n    return km\ndef calc_dist_mga(lat1, lon1, h1, lat2, lon2, h2):\n    '''\n    Write a function to compute the distance between two points on the earth (specified in decimal degrees).\n    '''\n    # convert decimal degrees to radians\n    lat1, lon1, h1, lat2, lon2, h2 = map(radian_degree, [lat1, lon1, h1, lat2, lon2, h2])\n    # haversine formula\n    dlon = lon2 - lon1 \n    dlat = lat2 - lat1 \n    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    # Radius of earth in kilometers is 6371\n    km = 6371 * c\n    return km\ndef calc_dist_cartesian_2(x1, y1, x2, y2):\n    '''\n    Write a function to compute the distance between two points on the earth (specified in decimal degrees).\n    '''\n    # convert decimal degrees to radians\n    x1, y1, x2, y2 = map(radian_degree, [x1, y1, x2, y2])\n    # haversine formula\n    dlon = x2 - x1 \n    dlat = y2 - y1 \n    a = math.sin(dlat/2)**2 + math.cos(y1) * math.cos(y2) * math.sin(dlon/2)**2\n    c = 2 * math.asin(math.sqrt(a)) \n    # Radius of earth in kilometers is 6371\n    km = 6371 * c\n    return km\ndef calc_dist_ecef_2(x1, y1, z1, x2, y2, z2):\n    '''\n    Write a function to compute the distance between two points on the earth (specified in decimal degrees).\n    '''\n    # convert decimal degrees to radians\n    x1, y1, z1, x2, y2, z2 = map(radian_degree, [x1, y1, z1, x2, y2, z2])\n    # haversine formula\n    dlon = x2 - x1 \n    dlat = y2 - y"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_re = re.compile(pattern)\n    match = pattern_re.search(text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex = re.compile(pattern)\n    match = regex.search(text)\n    return match.group(), match.start(), match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    regex_pattern = re.compile(pattern)\n    match = regex_pattern.search(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    try:\n        return re.search(pattern, text).group(), re.search(pattern, text).start(), re.search(pattern, text).end()\n    except AttributeError:\n        return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    if m is not None:\n        return m.group(), m.start(), m.end()\n    return None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # '''\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    try:\n        return re.search(pattern, text).span()\n    except AttributeError:\n        return ()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern = re.compile(pattern)\n    match = pattern.search(text)\n    return match.group(0), match.start(), match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    p = re.compile(pattern)\n    result = p.search(text)\n    if result:\n        return result.group(0), result.start(), result.end()\n    else:\n        return '', -1, -1\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    result = re.search(pattern, text)\n    start = result.start()\n    end = result.end()\n    return text[start:end], start, end\n    \n    \ndef replace_literal(text, pattern, replace):\n    '''\n    Write a function to replace a regex pattern in a string. The function should return the original string with the pattern replaced.\n    '''\n    result = re.search(pattern, text)\n    new_text = text[:result.start()] + replace + text[result.end():]\n    return new_text\n    \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    return bell_Number(n-1)+bell_Number(n-2)*2\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 1: \n        return 1\n    else: \n        return (n * (n + 1)) // 2\n    \nprint(bell_Number(5)) \nprint(bell_Number(6)) \nprint(bell_Number(10)) \nprint(bell_Number(100))\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    total = 0\n    for i in range(n):\n        total += (i+1)*(i+2)*(i+3)//6\n    return total\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return bell_Number(n-1) + 2 * bell_Number(n-2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    bell_num = 1\n    for i in range(1,n+1):\n        bell_num = bell_num * i\n    return bell_num\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 0:\n        return 1\n    return n*bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    import math\n    def nth_bell(n):\n        return bell_num_rec(n)\n    def bell_num_rec(n):\n        if n == 0:\n            return 1\n        return bell_num_rec(n-1) + nth_bell(n-1)\n    return bell_num_rec(n)\n    \n    "
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell(n):\n        if n == 1:\n            return 1\n        else:\n            return bell(n-1) + (n-1)*bell(n-2)\n    \n    print(bell(n))\nbell_Number(2)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n <= 1: \n        return n\n    else: \n        return (n * (n-1) + bell_Number(n-1)) / 2\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Return a copy of list 1.\n    return list(list1)\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) == 1:\n        return []\n    if list1[0] == L:\n        return list1[1:]\n    if list1[-1] == L:\n        return list1[:-1]\n    if len(list1) == 2:\n        return []\n    if list1[0] == L:\n        return list1[1:]\n    if list1[-1] == L:\n        return list1[:-1]\n    mid = len(list1)//2\n    if list1[mid] == L:\n        return list1[mid+1:]\n    if list1[mid] == L:\n        return list1[:mid]\n    if list1[mid]!= L:\n        if list1[mid] == L:\n            return list1[mid+1:]\n        if list1[mid] == L:\n            return list1[:mid]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    #first add kth element to a new list\n    new_list = []\n    new_list.append(list1[k])\n    for i in range(len(list1) - 1):\n        new_list.append(list1[i+1])\n    #now remove kth element\n    list1.pop(k)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.remove(list1[L])\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.sort()\n    k=int(input(\"Enter the position of element to be removed: \"))\n    return list1[0:k-1]+list1[k+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    x = list1[:L]\n    y = list1[L+1:]\n    return x + y\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    del list1[L]\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    count = 0\n    for x in list1:\n        if count!= L:\n            print(x, end = \" \")\n        count += 1\n    print()\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    k = list1.pop(L)\n    return list1\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(lambda x: x[N-1], test_list))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    maximum = []\n    test_list.sort()\n    for i in range(N):\n        maximum.append(test_list[i][i])\n    return maximum\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if N == 0:\n        return max(test_list)\n    max_ = max(test_list[N])\n    for i in range(N, len(test_list)):\n        if max_ < max(test_list[i]):\n            max_ = max(test_list[i])\n    return max_\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max_so_far = -math.inf\n    for n in range(len(test_list)):\n        if test_list[n][N] > max_so_far:\n            max_so_far = test_list[n][N]\n    return max_so_far\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    max_val = -1000000000\n    for i in range(len(test_list)):\n        if max_val < test_list[i][N]:\n            max_val = test_list[i][N]\n            \n    return max_val\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    result = []\n    \n    for i in range(len(test_list)):\n        result.append(test_list[i][N-1])\n        \n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_matrix = matrix_from_list(test_list)\n    return max(test_matrix[N-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # Get the maximum value\n    maximum = max(test_list[N-1])\n    \n    # Get then'th value in the column\n    nth_value = test_list[N-1][N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    # First, check if matrix is empty\n    if len(test_list) == 0:\n        return 0\n    \n    # If matrix is not empty\n    else:\n        max_of_nth_column = []\n        for i in range(len(test_list[0])):\n            max_of_nth_column.append(max_of_nth(test_list[1:], i))\n        return max(max_of_nth_column)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        output.append(max(test_list[i][N-1:]))\n    return output\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst, key=lambda x: (x[0], x[1]))\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    result = []\n    for i in range(len(lst)):\n        if i == 0:\n            result.append(lst[i][0])\n            result.append(lst[i][1])\n        elif i == len(lst) - 1:\n            result.append(lst[i-1][0])\n            result.append(lst[i][1])\n        else:\n            result.append(lst[i][0])\n            result.append(lst[i][1])\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    merged_list = []\n    \n    for i in lst:\n        merged_list.append(i[0])\n        merged_list.append(i[1])\n    \n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst)\n    sorted_lst = [lst[0][0],lst[0][1]]\n    for i in range(1,len(lst)):\n        if lst[i][0]<=sorted_lst[1]:\n            sorted_lst[0]=lst[i][0]\n            sorted_lst[1]=lst[i][1]\n        else:\n            sorted_lst.insert(1,lst[i][0])\n            sorted_lst.insert(2,lst[i][1])\n    return sorted_lst\nprint(merge([[2,3], [5,4], [9,6], [1,7]]))\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = list(lst)\n    merged_list = []\n    for i in range(0, len(lst), 2):\n        merged_list.append(lst[i])\n    return merged_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst_new=[]\n    for i in range(len(lst)):\n        lst_new.append([lst[i][0],lst[i][1]])\n    return lst_new\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    for i in range(len(lst)):\n        lst[i].insert(0,lst[i].pop(1))\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    #Solution using nested for loop \n    final_list = []\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            final_list.append(lst[i][j])\n    return final_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return zip(lst[0],lst[1])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    if not lst:\n        return None\n    new_list = []\n    for i in lst:\n        new_list.append([i[0], i[1]])\n    return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for value in test_list:\n        cummulative_sum += value\n    return cummulative_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    summ = 0\n    res = []\n    for i in test_list:\n        summ += i\n        res.append(summ)\n    return res\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    my_list=list(test_list)\n    cummulative_list=[]\n    for i in range(0,len(my_list)):\n        cummulative_list.append(my_list[i])\n        if i > 0:\n            cummulative_list.append(cummulative_list[i-1]+my_list[i])\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i]\n    return total_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        sum = 0\n        for j in range(i):\n            sum += test_list[j]\n        new_list.append(sum)\n    return new_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    return sum(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # itertools.accumulate()\n    return list(accumulate(test_list, lambda x, y: x + y))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    if len(test_list) == 0:\n        return 0\n    else:\n        summation = test_list[0]\n        for item in test_list[1:]:\n            summation += item\n        return summation\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    # lst = []\n    # for i in range(len(test_list)):\n    #     if len(lst) == 0:\n    #         lst.append(test_list[i])\n    #         continue\n    #     else:\n    #         lst.append(lst[i] + test_list[i])\n    # return lst\n    \n    return sum(test_list)\n    \n    \n    \n    \ndef rearrange_digits(input_list):\n    '''\n    Given an input list of non-negative integers, return a new list of non-negative integers that is\n    the permutation of the digits in input list in the lexicographic order. A permutation is a rearrangement of\n    digits to form a number where no digit occurs more than once. For example, the permutation [1, 2, 3]\n    forms 132 (just like 013 in the example above) and the permutation [3, 2, 1] forms\n    321 (just like 213 in the example above).\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    from operator import add\n    from functools import reduce\n    return reduce(add, test_list)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    average_list = []\n    for t in nums:\n        total = 0\n        for i in range(0, len(t)):\n            total += t[i]\n        average_list.append(total / len(t))\n    return average_list\n    \ndef average_list(nums):\n    '''\n    Write a function which takes a list of numbers and returns the average value for the list as a list.\n    '''\n    total = 0\n    for num in nums:\n        total += num\n    return total / len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        for j in range(len(nums[i])):\n            total += nums[i][j]\n    return total / total_nums\n    \ndef average_tuple_2(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i])\n    return total / total_nums\n    \ndef average_tuple_3(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_4(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_5(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_6(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_7(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_8(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_9(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_10(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_11(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_12(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_13(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_14(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_15(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_16(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_17(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_18(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_19(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    return total / total_nums\n    \ndef average_tuple_20(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    total = 0\n    total_nums = len(nums)\n    for i in range(total_nums):\n        total += sum(nums[i]) / len(nums[i])\n    retur"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    my_list = []\n    for tup in nums:\n        my_list.append(sum(tup)/len(tup))\n    return my_list\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [(sum(x)/len(x)) for x in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    nums = tuple(nums)\n    return tuple(sum(num) / len(num) for num in nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return(list(map(lambda x: sum(x)/len(x), nums)))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    '''\n    Example:\n        Input:\n            (\n                (1,3,5),\n                (4,2,6)\n            )\n        Output:\n            [3.4, 3.2]\n    '''\n    nums = nums[0]\n    result = []\n    total = 0\n    for i in nums:\n        total += i\n    result.append(total/len(nums))\n    total = 0\n    for i in nums:\n        total += i\n    result.append(total/len(nums))\n    total = 0\n    for i in nums:\n        total += i\n    result.append(total/len(nums))\n    return result\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return [round(sum(i) / len(i), 1) for i in nums]\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    # s1 = 0\n    # s2 = 0\n    # for i in nums:\n    #     s1 += i[0]\n    #     s2 += i[1]\n    # return s1/len(nums), s2/len(nums)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    result = []\n    for item in nums:\n        result.append(sum(item)/len(item))\n    return result\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    \n    a = 0\n    for i in range(0, len(test_tup1)):\n        a = a + test_tup1[i] % test_tup2[i]\n        \n    return a\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    test_tup = {}\n    for i in range(0, len(test_tup1)):\n        test_tup[i] = test_tup1[i] % test_tup2[i]\n    return tuple(test_tup)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(int(i % j) for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    x = tuple(map(lambda y: y % 2, test_tup1))\n    y = tuple(map(lambda z: z % 2, test_tup2))\n    return x, y\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise Exception('Tuple lengths are not the same')\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    return ((test_tup1[i] % test_tup2[i]) for i in range(len(test_tup1)))\n    \ndef tuple_range(start, stop):\n    '''\n    Write a function which takes two integers and generates a tuple containing all the integers from start to stop (inclusive).\n    '''\n    \n    return range(start, stop + 1)\n    \ndef tuple_count(test_tup, item):\n    '''\n    Write a function which takes a tuple and an item and returns the number of occurences of that item in the tuple.\n    '''\n    \n    return (test_tup.count(item))\n    \ndef tuple_index(test_tup, item):\n    '''\n    Write a function which takes a tuple and an item and returns the index of that item in the tuple.\n    '''\n    \n    return test_tup.index(item)\n    \ndef tuple_find(test_tup, item):\n    '''\n    Write a function which takes a tuple and an item and returns the index of that item in the tuple.\n    '''\n    \n    return (test_tup.index(item))\n    \ndef tuple_append(test_tup, item):\n    '''\n    Write a function which takes a tuple and an item and appends the item to the end of the tuple.\n    '''\n    \n    return test_tup + (item,)\n    \ndef tuple_insert(test_tup, item, index):\n    '''\n    Write a function which takes a tuple and an item and inserts the item at the given index in the tuple.\n    '''\n    \n    return test_tup[:index] + (item,) + test_tup[index:]\n    \ndef tuple_multiply(test_tup, factor):\n    '''\n    Write a function which takes a tuple and a factor and returns a tuple containing the elements of the tuple multiplied by the factor.\n    '''\n    \n    return (test_tup[i] * factor for i in range(len(test_tup)))\n    \ndef tuple_filter(test_tup, filter_func):\n    '''\n    Write a function which takes a tuple and a filter function and returns a new tuple containing only the elements that satisfy the filter function.\n    '''\n    \n    return tuple(filter(filter_func, test_tup))\n    \ndef tuple_reversed(test_tup):\n    '''\n    Write a function which takes a tuple and returns a new tuple that contains the elements in the same order but in reverse.\n    '''\n    \n    return tuple(test_tup[::-1])\n    \ndef tuple_sum(test_tup):\n    '''\n    Write a function which takes a tuple and returns the sum of all the values in the tuple.\n    '''\n    \n    return sum(test_tup)\n    \ndef tuple_min(test_tup):\n    '''\n    Write a function which takes a tuple and returns the minimum value in the tuple.\n    '''\n    \n    return min(test_tup)\n    \ndef tuple_max(test_tup):\n    '''\n    Write a function which takes a tuple and returns the maximum value in the tuple.\n    '''\n    \n    return max(test_tup)\n    \ndef tuple_sorted(test_tup):\n    '''\n    Write a function which takes a tuple and returns a new tuple in which all the elements of the original tuple are sorted.\n    '''\n    \n    return sorted(test_tup)\n    \ndef tuple_sorted_reversed(test_tup):\n    '''\n    Write a function which takes a tuple and returns a new tuple in which all the elements of the original tuple are sorted in reverse.\n    '''\n    \n    return sorted(test_tup, reverse=True)\n    \ndef tuple_map(test_tup, func):\n    '''\n    Write a function which takes a tuple and a function and returns a new tuple in which all the elements of the original tuple are mapped by the function.\n    '''\n    \n    return tuple(map(func, test_tup))\n    \ndef tuple_filter_false(test_tup, filter_func):\n    '''\n    Write a function which takes a tuple and a function and returns a new tuple in which all the elements of the original tuple are filtered by the function.\n    '''\n    \n    return tuple(filter(filter_func, test_tup))\n    \ndef tuple_zip(*args):\n    '''\n    Write a function which takes any number of tuples and returns a tuple containing the elements of each tuple in the same order as they appear in the tuples.\n    '''\n    \n    return tuple(zip(*args))\n    \ndef tuple_zip_with(*args, **kwargs):\n    '''\n    Write a function which takes any number of tuples and returns a tuple containing the elements of each tuple in the same order as they appear in the tuples.\n    '''\n    \n    return tuple(zip(*args))\n    \ndef tuple_zip_with_default(*args, **kwargs):\n    '''\n    Write a function which takes any number of tuples and returns a tuple containing the elements of each tuple in the same order as they appear in the tuples.\n    '''\n    \n    return tuple(zip_with_default(*args))\n    \ndef tuple_zip_longest(*args, **kwargs):\n    '''\n    Write a function which takes any number of tuples and returns a tuple containing the elements of each tuple in the same order as they appear in the tuples.\n    '''\n    \n    return tuple(zip_longest(*args))\n    \ndef tuple_group_by(test_tup, key):\n    '''\n    Write a function which takes a tuple and an item and returns a new tuple with each item in the original tuple grouped by the item.\n    '''\n    \n    return group_by(test_tup, key)\n    \ndef tuple_group_by_key(test_tup, key):\n    '''\n    Write a function which takes a tuple and an item and returns a new tuple with each item in the original tuple grouped by the item.\n    '''\n    \n    return group_by_key(test_tup, key)\n    \ndef tuple_group_by_key_with_value(test_tup, key, value):\n    '''\n    Write a function which takes a tuple and an item and returns a new tuple with each item in the original tuple grouped by the item and the value associated with that item.\n    '''\n    \n    return group_by_key_with_value(test_tup, key, value)\n    \ndef tuple_group_by_value(test_tup, key):\n    '''\n    Write a function which takes a tuple and an item and returns a new tuple with each item in the original tuple grouped by the item.\n    '''\n    \n    return group_by_value(test_tup, key)\n    \ndef tuple_count_by(test_tup, key):\n    '''\n    Write a function which takes a tuple and an item and returns a new tuple with each item in the original tuple grouped by the item.\n    '''\n    \n    return count_by(test_tup, key)\n    \ndef tuple_count_by_value(test_tup, key):\n    '''\n    Write a function which takes a tuple and an item and returns a new tuple with each item in the original tuple grouped by the item.\n    '''\n    \n    return count_by_value(test_tup, key)\n    \ndef tuple_reduce(test_tup, func, initial=None):\n    '''\n    Write a function which takes a tuple and an item and returns a new tuple with each item in the original tuple grouped by the item.\n    '''\n    \n    return reduce(func, test_tup, initial)\n    \ndef tuple_reduce_with(test_tup, func, initial=None):\n    '''\n    Write a function which takes a tuple and an item and returns a new tuple with each item in the original tuple grouped by the item.\n    '''\n    \n    return reduce_with(func, test_tup, initial)\n    \ndef tuple_filter_not(test_tup, filter_func):\n    '''\n    Write a function which takes a tuple and a filter function and returns a new tuple containing only the elements that satisfy the filter function."
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    # Define output variable\n    out = ()\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    try:\n        assert len(test_tup1) == len(test_tup2)\n    except AssertionError:\n        print('The lengths of the tuples should be same')\n        return\n    else:\n        res = []\n        for i in range(len(test_tup1)):\n            res.append(test_tup1[i] % test_tup2[i])\n        return tuple(res)\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(x%y for x,y in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    #Table is created by adding '0' to the table and then subtracting by 1 in each row\n    #d - the steps\n    #0 - the row number\n    #1 - the column number\n    #2 - the number of jumps\n    table = [[0 for i in range(3)] for j in range(d)]\n    \n    #The number of jumps from (0, 0) to (0, d - 1) is 0\n    table[0][0] = 0\n    \n    #The number of jumps from (d - 1, 0) to (d - 1, d - 1) is 1\n    table[d - 1][0] = 1\n    \n    #To find the number of jumps from (0, 0) to (1, 0), the number of jumps is -1\n    for i in range(1, d): \n        table[0][i] = -1\n        \n    #To find the number of jumps from (d - 1, 0) to (d - 1, d - 1), the number of jumps is 1\n    for i in range(1, d): \n        table[i][0] = 1\n        \n    #To find the number of jumps from (1, 1) to (d - 1, d - 1), the number of jumps is 2\n    for i in range(1, d): \n        table[1][i] = 2\n    \n    #To find the number of jumps from (1, 1) to (d - 1, d - 1), the number of jumps is 3\n    for i in range(1, d): \n        table[i][1] = 3\n        \n    #If the table is solved then return the number of jumps\n    if(table[d-1][d-1]!= -1):\n        return table[d-1][d-1]\n    \n    #Recursion is needed to solve the table\n    else:\n        \n        #If the value of d is not greater than 0 and the value of d is also less than d, then the number of jumps is 0\n        if(d > 0 and d <= d):\n            return 0\n        \n        #If the value of d is greater than 0 and the value of d is also greater than d, then the number of jumps is 1\n        elif(d > 0 and d > d):\n            return 1\n        \n        #If the value of d is greater than 0 and the value of d is also greater than d and is greater than d - 1, then the number of jumps is 2\n        elif(d > 0 and d > d and d > d - 1):\n            return 2\n        \n        #If the value of d is greater than 0 and the value of d is also greater than d and is also greater than d - 1, then the number of jumps is 3\n        elif(d > 0 and d > d and d > d - 1):\n            return 3\n        \n        #Else the number of jumps is -1\n        else:\n            return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    jumps = 0\n    for step in range(1, steps+1):\n        if step == 1 or step == 2:\n            jumps += 1\n        else:\n            if (step - 2) % d == 0:\n                jumps += 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if d==0: return 1\n    count = 0\n    for i in range(1, steps+1):\n        count += min_Jumps(i, d-i)\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if(steps < 0 or d < 0 or d == 0):\n        return -1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    min_jumps = 0\n    current_index = 0\n    while current_index < len(steps):\n        if steps[current_index] - steps[current_index - 1] <= d:\n            current_index += 1\n        else:\n            min_jumps += 1\n            current_index = current_index - 1\n    return min_jumps\n    \n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    min_jump = math.inf\n    steps_count = 0\n    if steps > min_jump: \n        steps_count = 0\n    else: \n        while(steps >= d):\n            steps_count += 1\n            steps -= d\n        min_jump = steps_count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # if steps < 2: \n    #     return 0\n    # jumps = 1\n    # # print(\"step: \", steps, \" d: \", d)\n    # if steps > d:\n    #     return -1\n    # while steps > 1:\n    #     if steps - d >= 0:\n    #         steps = steps - d\n    #     else: \n    #         return -1\n    #     jumps = jumps + 1\n    #     # print(\"step: \", steps, \" d: \", d)\n    # return jumps\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    max_jumps = 0\n    curr_jumps = 0\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if not steps: \n        return 0\n    if steps[0] == 0: \n        return 1\n    if d == 1: \n        return 0\n    res = 0\n    for i in range(1, d): \n        res = max(res, min_Jumps(steps[i:], i))\n    res = max(res, min_Jumps(steps[d:], d))\n    return res + 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    '''\n    A jump is defined as a step forward without backtracking.\n    Step forward is defined as taking a step in the positive direction in the same direction as the direction of the current position,\n    which is the direction of the current position.\n    '''\n    '''\n    The number of jumps required is the minimum number of steps required to reach the destination.\n    '''\n    '''\n    The starting point has the direction and distance from itself to itself as (0, 0).\n    The destination point has the direction and distance from the origin to itself as (0, 0).\n    The distance between two points is defined as the difference between the two coordinates.\n    '''\n    '''\n    The number of jumps needed to reach a point of form (d, 0) from origin is the minimum number of steps required to reach the destination.\n    '''\n    '''\n    Example 1:\n    Input: steps = 1, d = 1\n    Output: 1\n    \n    Input: steps = 3, d = 1\n    Output: 2\n    \n    Input: steps = 4, d = 1\n    Output: 2\n    \n    Input: steps = 10, d = 1\n    Output: 4\n    '''\n    '''\n    Solution:\n    1. Brute Force:\n        In each iteration we check all the possible coordinates to make sure that the final point is either of the form (d, 0) or not.\n        Also we need to make sure that we don't have any jumps of length greater than the given steps.\n    2. Use the concept of array to store the count of steps in different directions.\n        If the current coordinate is of the form (x, 0) and the previous coordinate is of the form (x+1, 0), then count++.\n        If the current coordinate is of the form (x, 0) and the previous coordinate is of the form (x-1, 0), then count--.\n        If the current coordinate is of the form (0, y) and the previous coordinate is of the form (0, y+1), then count++.\n        If the current coordinate is of the form (0, y) and the previous coordinate is of the form (0, y-1), then count--.\n        Also, we need to make sure that we don't have any jumps of length greater than the given steps.\n    3. Use the concept of array to store the count of steps in different directions.\n        Let n be the size of array.\n        If we have a step forward of length k, then we will add k*2 to the count of steps of steps length k in the current direction.\n        If we have a step forward of length k, then we will add k*2-1 to the count of steps of steps length k in the current direction.\n        If we have a step forward of length k, then we will add k*2-2 to the count of steps of steps length k in the current direction.\n        If we have a step forward of length k, then we will add k*2-3 to the count of steps of steps length k in the current direction.\n        If we have a step forward of length k, then we will add k*2-4 to the count of steps of steps length k in the current direction.\n        In such a way, we have a count array.\n        We now need to check whether the final coordinate is of the form (d, 0) or not.\n        We can check if the count array has 5 elements.\n        If it has 5 elements, then it is the final point.\n        If it has 4 elements, then the point is not the final point.\n        We can also check whether the final coordinate is of the form (0, 0) or not.\n        If it has 4 elements, then the point is not the final point.\n        If it has 3 elements, then the point is the final point.\n        We can also check whether the final coordinate is of the form (d, 0) or not.\n        If it has 2 elements, then the point is the final point.\n        If it has 1 element, then the point is the final point.\n        We can also check whether the final coordinate is of the form (0, y) or not.\n        If it has 3 elements, then the point is not the final point.\n        If it has 2 elements, then the point is not the final point.\n        If it has 1 element, then the point is the final point.\n        We can also check whether the final coordinate is of the form (x, 0) or not.\n        If it has 2 elements, then the point is not the final point.\n        If it has 1 element, then the point is not the final point.\n        If it has 0 elements, then the point is the final point.\n    '''\n    def min_jumps(steps, d):\n        x, y = 0, 0\n        # Write your code here\n        # base case\n        if steps < 0:\n            return 0\n        if steps == 0:\n            return 1\n        # temp array to store the counts of jumps in different directions\n        temp = [0 for i in range(steps)]\n        # To check if we need a step back or not\n        need_back = steps\n        # iterate until all the coordinates are visited\n        for i in range(0, steps):\n            # If we can move forward in positive direction then we can move forward\n            # in positive direction\n            if abs(x) + 1 == d:\n                x += 1\n                temp[i] += 1\n                need_back -= 1\n            else:\n                # If we can move forward in negative direction then we can move forward\n                # in negative direction\n                if abs(x) - 1 == d:\n                    x -= 1\n                    temp[i] += 1\n                    need_back -= 1\n                else:\n                    # If we can move forward in positive direction\n                    if abs(y) + 1 == d:\n                        y += 1\n                        temp[i] += 1\n                        need_back -= 1\n                    # If we can move forward in negative direction\n                    else:\n                        if abs(y) - 1 == d:\n                            y -= 1\n                            temp[i] += 1\n                            need_back -= 1\n                        # Else we cannot move further\n                        else:\n                            # If we can move forward in positive direction\n                            if abs(x) + 1 == d:\n                                x += 1\n                                temp[i] += 1\n                                need_back -= 1\n                            # Else we can move forward in negative direction\n                            else:\n                                if abs(y) + 1 == d:\n                                    y += 1\n                                    temp[i] += 1\n                                    need_back -= 1\n                                # Else we cannot move further\n                                else:\n                                    if abs(x) - 1 == d:\n                                        x -= 1\n                                        temp[i] += 1\n                                        need_back -= 1\n                                    # Else we cannot move further\n                                    else:\n                                        if abs(y) + 1 == d:\n                                            y += 1\n                                            temp[i] += 1\n                                            need_back -= 1\n                                        # Else we cannot move further\n                                        else:\n                                            if abs(y) - 1 == d:\n                                                y -= 1\n                                                temp[i] += 1\n                                                need_back -= 1\n                                            # Else we cannot move further\n                                            else:\n                                                # If we can move forward in positive direction\n                                                if abs(x) + 1 == d:\n                                                    x += 1\n                                                    temp[i] += 1\n                                                    need_back -= 1\n                                                # Else we can move forward in negative direction\n                                                else:\n                                                    if abs(x) - 1 == d:\n                                                        x -= 1\n                                                        temp[i] += 1\n                                                        need_back -= 1\n                                                # Else we cannot move further\n                                                else:\n                                                    if abs(y) + 1 == d:\n                                                        y += 1\n                                                        temp[i] += 1\n                                                        need_back -= 1\n                                                # Else we cannot move further\n                                                else:\n                                                    if abs(y) - 1 == d:\n                                                        y -= 1\n                                                        temp[i] += 1\n                                                        need_back -= 1\n        # Now we have the final coordinate.\n        # The final coordinate is of the form (d, 0)\n        # To check if we can reach this point or not\n        if abs(x) + 1 == d:\n            x += 1\n            temp[steps] += 1\n            return temp[steps]\n        # To check if we can reach this point or not\n        elif abs(x) - 1 == d:\n            x -= 1\n            temp[steps] += 1\n            return temp[steps]"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    try:\n        return [n1/n2 for n1,n2 in zip(nums1,nums2)]\n    except ZeroDivisionError:\n        return \"Zero Division Error\"\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    out = []\n    for x in range(len(nums1)):\n        out.append(nums1[x]/nums2[x])\n    return out\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    assert len(nums1) == len(nums2)\n    return [x1/x2 for x1,x2 in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    i = 0\n    list1 = []\n    list2 = []\n    while i<len(nums1):\n        list1.append(nums1[i])\n        list2.append(nums2[i])\n        i+=1\n    i = 0\n    while i<len(nums1):\n        list1[i]= list1[i]/list2[i]\n        i+=1\n    return list1\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    #   1. if one of the lists are empty, then return empty list\n    if len(nums1) == 0:\n        return []\n    if len(nums2) == 0:\n        return []\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    new_list = []\n    for i in range(len(nums1)):\n        new_list.append(nums1[i]/nums2[i])\n    return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [nums1[i]/nums2[i] for i in range(len(nums1))]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    pass\n    "
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return list(map(lambda x,y: x/y,nums1,nums2))\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    #To loop the test_str and check if it is an integer\n    for i in test_str:\n        if i.isnumeric() == False:\n            break\n    #To change the value of test_str\n    test_str = test_str.replace(test_str[i:], \"\")\n    #To add the number to test_str\n    test_str = test_str + (i * int(i))\n    #To print the changed string\n    print(test_str)\n    return test_str\n    \ndef make_dict(test_dict, key, value):\n    '''\n    Make a dictionary with the key as key and the value as value\n    '''\n    test_dict[key] = value\n    return test_dict\n    \ndef number_of_evens(test_list):\n    '''\n    Write a function that returns the number of even numbers in a list\n    '''\n    count = 0\n    for i in test_list:\n        if i % 2 == 0:\n            count += 1\n    return count\n    \ndef remove_nth(test_list, n):\n    '''\n    Write a function that returns a list without the n-th element.\n    '''\n    return test_list[:n] + test_list[n+1:]\n    \ndef max_in_list(test_list):\n    '''\n    Write a function that returns the maximum value in a list.\n    '''\n    return max(test_list)\n    \ndef sum_of_squares(test_list):\n    '''\n    Write a function that returns the sum of the squares of all the numbers in a list.\n    '''\n    return sum(i*i for i in test_list)\n    \ndef is_list_permutation(test_list, target_list):\n    '''\n    Write a function that returns True if test_list is a permutation of target_list.\n    '''\n    test_list.sort()\n    target_list.sort()\n    return test_list == target_list\n    \ndef remove_duplicate_letters(test_str):\n    '''\n    Write a function that removes any duplicate letters in a string. \n    '''\n    letter_list = []\n    for i in test_str:\n        if i not in letter_list:\n            letter_list.append(i)\n    return ''.join(letter_list)\n    \ndef is_super_numeric(test_str):\n    '''\n    Write a function to check if the string is a super numeric string.\n    '''\n    if test_str == \"\":\n        return False\n    if test_str.isnumeric() == False:\n        return False\n    for i in range(1,len(test_str)):\n        if test_str[i-1].isnumeric() == False or test_str[i].isnumeric() == False:\n            return False\n    return True\n    \ndef mirror_letters(test_str):\n    '''\n    Write a function that takes a string and returns a string that is the same string but with the characters in the string mirrored, from left to right.\n    '''\n    #To mirror the string\n    test_str = test_str + test_str[::-1]\n    return test_str[::-1]\n    \ndef test_is_isogram(test_str):\n    '''\n    Write a function to check if the given string is an isogram.\n    '''\n    test_str = test_str.lower()\n    test_str = remove_duplicate_letters(test_str)\n    test_str = mirror_letters(test_str)\n    return len(test_str) == len(set(test_str))\n    \ndef test_is_palindrome(test_str):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    test_str = test_str.lower()\n    test_str = remove_duplicate_letters(test_str)\n    test_str = mirror_letters(test_str)\n    return test_str == test_str[::-1]\n    \ndef reverse_words(test_str):\n    '''\n    Write a function to reverse the order of the words in a given string.\n    '''\n    #To reverse the string\n    test_str = test_str.split()\n    #To reverse the word in the list\n    test_str.reverse()\n    #To join the reversed words\n    test_str =''.join(test_str)\n    return test_str\n    \ndef test_is_pallindrome(test_str):\n    '''\n    Write a function to check if the given string is a pallindrome.\n    '''\n    test_str = test_str.lower()\n    test_str = remove_duplicate_letters(test_str)\n    test_str = reverse_words(test_str)\n    return test_str == test_str[::-1]\n    \ndef test_is_palindrome_iterative(test_str):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    #To reverse the string\n    test_str = test_str.lower()\n    test_str = remove_duplicate_letters(test_str)\n    test_str = reverse_words(test_str)\n    #To compare the strings\n    return test_str == test_str[::-1]\n    \ndef test_is_palindrome_recursive(test_str):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    if len(test_str) <= 1:\n        return True\n    else:\n        if test_str[0] == test_str[-1]:\n            return test_is_palindrome_recursive(test_str[1:-1])\n        else:\n            return False\n    \ndef is_anagram(test_str1, test_str2):\n    '''\n    Write a function to check if the given strings are anagrams or not.\n    '''\n    test_str1 = test_str1.lower()\n    test_str2 = test_str2.lower()\n    test_str1 = remove_duplicate_letters(test_str1)\n    test_str2 = remove_duplicate_letters(test_str2)\n    return test_str1 == test_str2\n    \ndef is_palindrome(test_str):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    test_str = test_str.lower()\n    test_str = remove_duplicate_letters(test_str)\n    test_str = reverse_words(test_str)\n    return test_str == test_str[::-1]\n    \ndef test_is_palindrome(test_str):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    test_str = test_str.lower()\n    test_str = remove_duplicate_letters(test_str)\n    test_str = reverse_words(test_str)\n    return test_str == test_str[::-1]\n    \ndef test_is_palindrome_iterative(test_str):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    if len(test_str) <= 1:\n        return True\n    else:\n        if test_str[0] == test_str[-1]:\n            return test_is_palindrome_iterative(test_str[1:-1])\n        else:\n            return False\n    \ndef test_is_palindrome_recursive(test_str):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    if len(test_str) <= 1:\n        return True\n    else:\n        if test_str[0] == test_str[-1]:\n            return test_is_palindrome_recursive(test_str[1:-1])\n        else:\n            return False\n    \ndef test_is_palindrome_recursive_with_cache(test_str):\n    '''\n    Write a function to check if the given string is a palindrome.\n    '''\n    cache = {}\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    tmp = ''\n    for char in test_str:\n        if char.isdigit():\n            tmp += char\n    while tmp:\n        test_str += tmp[0]\n        tmp = tmp[1:]\n    return test_str\n    \n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    return test_str.join(str(i) for i in range(0, len(test_str))).strip('0')\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    s = test_str\n    for i in range(0, len(s)):\n        if s[i].isdigit():\n            count = i\n            while s[count].isdigit():\n                count += 1\n            s = s[0:i] + s[count:] + s[i:count]\n    print(s)\n    return s\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    for i in range(0, len(test_str)):\n        if test_str[i].isnumeric():\n            new_str = test_str[i + 1:len(test_str)]\n            test_str = test_str[:i] + new_str\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Move the numbers to the end\n    new_str = test_str[0]\n    for i in range(len(test_str)-1):\n        if int(test_str[i]) < int(test_str[i+1]):\n            new_str += test_str[i]\n        else:\n            new_str += test_str[i+1]\n    \n    # Add the numbers to the front\n    for i in range(len(test_str)):\n        if int(test_str[i]) > int(new_str[i]):\n            new_str += test_str[i]\n    return new_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    try:\n        test_str_num = test_str.split()\n        test_str_new = test_str_num[0]\n        for num in range(len(test_str_num)):\n            test_str_new = test_str_new +'' + test_str_num[num+1]\n        test_str = test_str_new\n    except Exception as e:\n        print('Invalid input, please enter a string')\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    num_list = []\n    word = ''\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            num_list.append(test_str[i])\n        else:\n            word += test_str[i]\n    print(num_list)\n    print(word)\n    return word + word.join(num_list)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # base case\n    if test_str == '':\n        return test_str\n    # handle if only one character\n    if len(test_str) == 1:\n        return test_str\n    # start at the end, work backwards\n    i = len(test_str)-1\n    while i > 0:\n        if test_str[i-1].isnumeric():\n            if test_str[i-1] == '0':\n                test_str = test_str[0:i-1] + test_str[i:]\n                return test_str\n            else:\n                test_str = test_str[0:i] + test_str[i-1] + test_str[i:]\n                return test_str\n        i = i - 1\n    return test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    #iterate thru the list and calculate the subset and keep the highest one\n    subsets = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            #find the subset and add it to the subsets\n            if a[i] % a[j] == 0:\n                subsets.append(a[i:j])\n    #sort the subset and keep the highest one\n    subsets.sort()\n    #print the highest subset\n    print(subsets[-1])\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    subsets_list = []\n    for i in range(len(a)):\n        for j in range(i+1, len(a)):\n            if a[i]%a[j] == 0:\n                subsets_list.append([a[i],a[j]])\n    return max(subsets_list)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort(reverse=True)\n    n = len(a)\n    if n == 0: return -1\n    if n == 1: return a[0]\n    if a[0] % a[1]!= 0: return -1\n    if a[n-1] % a[n-2]!= 0: return -1\n    i = 2\n    j = n - 3\n    while i < j:\n        if a[i] % a[i+1]!= 0 and a[i] % a[i+2]!= 0 and a[j] % a[j-1]!= 0 and a[j] % a[j-2]!= 0:\n            return a[i] * a[j]\n        i += 1\n        j -= 1\n    return -1\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # a = [5,2,4,5,8,3,7,7,9,2,3,2,4]\n    a = sorted(a)\n    r = set()\n    def find(a, l, r, s, t):\n        if (r-l) == 0:\n            return 0\n        # s = size\n        if a[l] % s == 0:\n            r = find(a, l+1, r, s, t+a[l])\n        if a[r] % s == 0:\n            l = find(a, l, r-1, s, t+a[r])\n        return max(r-l, r-l, l, r)\n    return find(a, 0, len(a)-1, 1, 0)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    max_size = 0\n    for i in range(len(a)-1):\n        for j in range(i+1,len(a)):\n            if a[i]%a[j]==0:\n                size = a[i]//a[j]+1\n            else:\n                size = a[i]//a[j]\n            if size>max_size:\n                max_size = size\n    return max_size\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n=len(a)\n    dp=[[-1]*n for _ in range(n)]\n    res=0\n    for i in range(n):\n        dp[i][i]=1\n        for j in range(i+1,n):\n            if a[j]%a[i]==0 and dp[i][j-1]!=-1:\n                dp[i][j]=dp[i][j-1]+1\n                res=max(res,dp[i][j])\n    return res"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    for i in range(0, len(a)):\n        for j in range(i, len(a)):\n            if a[i] % a[j] == 0:\n                a[i] = 0\n                a[j] = 0\n                if i!= j:\n                    a[i] = 0\n                    a[j] = 0\n    print(a)\n    print(a.count(0))\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    largest_subset = []\n    subset = []\n    for i in range(0, len(a)):\n        subset = []\n        for j in range(0, len(a)):\n            if j not in subset:\n                subset.append(j)\n            if i not in subset:\n                if a[i] % a[j] == 0:\n                    subset.append(j)\n            if len(subset) > len(largest_subset):\n                largest_subset = subset\n    return largest_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    import itertools\n    l = set(a)\n    max = 1\n    \n    for p in itertools.permutations(l):\n        if sum(p) % 2!= 0:\n            continue\n        if max < len(p):\n            max = len(p)\n    return max\n    \ndef print_grid(grid, N):\n    '''\n    Write a function to print the grid in a NxN grid.\n    '''\n    for row in range(N):\n        for col in range(N):\n            print(grid[row][col], end=\" \")\n        print(\"\")\n        \ndef max_sum_increasing_subsequence(arr):\n    '''\n    Write a function to find the maximum sum of a subsequence in an array of positive numbers, such that all elements of the subsequence are in non-decreasing order.\n    '''\n    max_sum = 0\n    d = {0: 0}\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] < arr[j]:\n                if arr[i] + arr[j] in d:\n                    d[arr[i] + arr[j]] = max(d[arr[i] + arr[j]], d[arr[i]] + arr[j])\n                else:\n                    d[arr[i] + arr[j]] = d[arr[i]] + arr[j]\n                max_sum = max(max_sum, d[arr[i] + arr[j]])\n    return max_sum\n    \ndef print_path(path, N):\n    '''\n    Write a function to print the path from root to leaf nodes of a tree in a NxN grid.\n    '''\n    for i in range(len(path)):\n        print(path[i], end=\" \")\n    print()\n    \ndef dfs(root, i, j, path, N):\n    '''\n    Write a function to find the maximum value of a path of nodes from the root to a leaf node.\n    '''\n    path.append(root.val)\n    if i == N-1 and j == N-1:\n        return root.val\n    if root.left:\n        if j == N-1:\n            if root.left.left:\n                return dfs(root.left, i+1, 0, path, N)\n            elif root.left.right:\n                return dfs(root.left, i+1, 0, path, N)\n        else:\n            if root.left.left:\n                return dfs(root.left, i+1, 0, path, N)\n            elif root.left.right:\n                return dfs(root.left, i+1, 0, path, N)\n    if root.right:\n        if j == N-1:\n            if root.right.left:\n                return dfs(root.right, i+1, 0, path, N)\n            elif root.right.right:\n                return dfs(root.right, i+1, 0, path, N)\n        else:\n            if root.right.left:\n                return dfs(root.right, i+1, 0, path, N)\n            elif root.right.right:\n                return dfs(root.right, i+1, 0, path, N)\n    if not root.left and not root.right:\n        return root.val\n    if root.left and not root.right:\n        if i == N-1:\n            if root.left.left:\n                return dfs(root.left, i+1, 0, path, N)\n            elif root.left.right:\n                return dfs(root.left, i+1, 0, path, N)\n        else:\n            if root.left.left:\n                return dfs(root.left, i+1, 0, path, N)\n            elif root.left.right:\n                return dfs(root.left, i+1, 0, path, N)\n    if not root.left and root.right:\n        if i == N-1:\n            if root.right.left:\n                return dfs(root.right, i+1, 0, path, N)\n            elif root.right.right:\n                return dfs(root.right, i+1, 0, path, N)\n        else:\n            if root.right.left:\n                return dfs(root.right, i+1, 0, path, N)\n            elif root.right.right:\n                return dfs(root.right, i+1, 0, path, N)\n    if root.left and root.right:\n        if i == N-1:\n            if root.right.left:\n                return dfs(root.right, i+1, 0, path, N)\n            elif root.right.right:\n                return dfs(root.right, i+1, 0, path, N)\n        else:\n            if root.right.left:\n                return dfs(root.right, i+1, 0, path, N)\n            elif root.right.right:\n                return dfs(root.right, i+1, 0, path, N)\n    path.pop()\n    return 0\n    \ndef print_path_bfs(root, path, N):\n    '''\n    Write a function to print the path from root to leaf nodes of a tree in a NxN grid.\n    '''\n    q = []\n    q.append(root)\n    while q:\n        print(q[0].val, end=\" \")\n        if q[0].left:\n            q.append(q[0].left)\n        if q[0].right:\n            q.append(q[0].right)\n        q.pop(0)\n    \ndef level_order_traversal(root):\n    '''\n    Write a function to return the level order traversal of a binary tree.\n    '''\n    if root is None:\n        return []\n    q = []\n    q.append(root)\n    res = []\n    while q:\n        res.append(q[0].val)\n        for i in range(len(q)):\n            if q[i].left:\n                q.append(q[i].left)\n            if q[i].right:\n                q.append(q[i].right)\n        q.pop(0)\n    return res\n    \ndef is_valid(root, height):\n    '''\n    Write a function to check if the binary tree is balanced or not.\n    '''\n    if root is None:\n        return True\n    if abs(height(root.left) - height(root.right)) > 1:\n        return False\n    return is_valid(root.left, height(root.left)) and is_valid(root.right, height(root.right))\n    \ndef is_same_tree(p, q):\n    '''\n    Write a function to check if two binary trees are identical.\n    '''\n    if p is None and q is None:\n        return True\n    if p and q:\n        return p.val == q.val and is_same_tree(p.left, q.left) and is_same_tree(p.right, q.right)\n    return False\n    \ndef is_symmetric(root):\n    '''\n    Write a function to check if the binary tree is symmetric.\n    '''\n    def is_mirror(t1, t2):\n        if t1 is None and t2 is None:\n            return True\n        if t1 is None or t2 is None:\n            return False\n        return t1.val == t2.val and is_mirror(t1.left, t2.right) and is_mirror(t1.right, t2.left)\n    return is_mirror(root, root)\n    \ndef kth_largest(arr, k):\n    '''\n    Write a function to find the kth largest element in an unsorted array.\n    '''\n    return heapq.nlargest(k, arr)[-1]\n    \ndef kth_smallest(arr, k):\n    '''\n    Write a function to find the kth smallest element in an unsorted array.\n    '''\n    return heapq.nsmallest(k, arr)[-1]\n    \ndef max_sum_subarray"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1.sort()\n    arr2.sort()\n    mid_idx = (n//2)\n    #If even number of elements, then just take first element from both the arrays\n    if n%2==0:\n        return (arr1[mid_idx]+arr2[mid_idx])/2\n    else:\n        return arr1[mid_idx]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    sorted_list = merge_two_lists(arr1, arr2)\n    sorted_list.sort()\n    if n % 2 == 0:\n        return (sorted_list[n//2 - 1] + sorted_list[n//2]) / 2\n    else:\n        return sorted_list[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    merge = MergeSort()\n    merge.merge_sort(arr1, arr2, 0, n - 1)\n    return merge.merge_sort(arr1, arr2, 0, n - 1)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    # sorted(arr)\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    \n    n1 = len(arr1)\n    n2 = len(arr2)\n    \n    if n1 > n2:\n        arr2.extend([float('inf')])\n        n2 += 1\n        \n    if n1 < n2:\n        arr1.extend([float('inf')])\n        n1 += 1\n        \n    mid = (n1 + n2) // 2\n    \n    if (n1 + n2) % 2 == 1:\n        return median(arr1, arr2, mid)\n    else:\n        return median(arr1, arr2, mid)\n        \ndef median(arr1, arr2, mid):\n    '''\n    median(arr1, arr2, mid)\n    \n    Two sorted lists arr1 and arr2 whose size is N and N <= 2*M, \n    where N = len(arr1) and M = len(arr2). \n    Median is the middle element of the sorted list. \n    Find median of two sorted lists using above function.\n    '''\n    i = mid - 1\n    j = mid\n    \n    while True:\n        if (i == -1) and (j == len(arr2)):\n            return min(arr1)\n        elif (i == -1) and (j < len(arr2)):\n            return max(arr2)\n        elif (i == len(arr1)) and (j == -1):\n            return min(arr1)\n        elif (i == len(arr1)) and (j >= len(arr2)):\n            return max(arr1)\n        else:\n            if arr1[i] < arr2[j]:\n                return arr1[i]\n            else:\n                return arr2[j]\n        i = i - 1\n        j = j + 1\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    temp = []\n    if len(arr1) > len(arr2):\n        temp = arr2\n        arr2 = arr1\n        arr1 = temp\n    for i in range(len(arr1)):\n        temp.append(arr1[i])\n        temp.append(arr2[i])\n    temp.sort()\n    return temp[int(len(arr1)+len(arr2)/2)]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n    mid = n//2\n    if n % 2 == 0:\n        return (arr1[mid] + arr2[mid]) / 2\n    else:\n        return arr1[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    i,j = 0,0\n    output = []\n    while(i<n and j<n):\n        if(arr1[i]<arr2[j]):\n            output.append(arr1[i])\n            i += 1\n        else:\n            output.append(arr2[j])\n            j += 1\n    while(i<n):\n        output.append(arr1[i])\n        i += 1\n    while(j<n):\n        output.append(arr2[j])\n        j += 1\n    if(n%2==1):\n        return output[n//2]\n    else:\n        return (output[n//2-1] + output[n//2])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n % 2 == 0:\n        return (arr1[n//2-1] + arr1[n//2]) / 2\n    else:\n        return arr1[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l = 0\n    r = n-1\n    while l <= r:\n        mid = l + (r-l)//2\n        if arr1[mid] < arr2[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    mid = l\n    l = 0\n    r = n-1\n    while l <= r:\n        mid = l + (r-l)//2\n        if arr1[mid] <= arr2[mid]:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return arr1[mid]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if (n == 0):\n        return -1\n    if (n == 1):\n        return arr1[0]\n    low = 0\n    high = n - 1\n    while (low <= high):\n        i = (low + high) // 2\n        j = ((n + 1) // 2) - i\n        if (arr1[i] < arr2[j]):\n            low = i + 1\n        elif (arr1[i] > arr2[j]):\n            high = i - 1\n        else:\n            if (i == 0 or arr1[i - 1]!= arr1[i]):\n                return arr1[i]\n            else:\n                low = i - 1\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    n_dict = {}\n    for index, value in enumerate(nums):\n        if index == 0:\n            n_dict[index] = value\n            continue\n        n_dict[index] = value * n_dict[index - 1]\n    return n_dict\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(len(nums)):\n        nums[i] = nums[i]**n\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    try:\n        if len(nums) > 0 and isinstance(n,int) and n > 0:\n            if n == 1:\n                return nums\n            elif n > 1:\n                return [num ** n for num in nums]\n            else:\n                return None\n        else:\n            return None\n    except:\n        return None\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    new_list = []\n    for i in range(len(nums)):\n        new_list.append(n**i)\n    return new_list\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n > len(nums):\n        return []\n    if n == 1:\n        return nums\n    else:\n        return nums + nth_nums(nums,n-1)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n == 0:\n        return []\n    if n < 0:\n        return None\n    else:\n        return nums * n\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in nums:\n        result.append(i**n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    l = []\n    for i in range(len(nums)):\n        l.append(nums[i]**n)\n    return l\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    assert n >= 1, \"n should be a positive integer\"\n    result = []\n    for i in nums:\n        result.append(i ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n < len(nums):\n        new_list = []\n        for num in nums:\n            new_list.append(num**n)\n        return new_list\n    else:\n        return 'not enough numbers'\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = string.upper()\n    return new_string\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # return string.upper()\n    return string.upper() if type(string) == str else string\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    l=len(newList)\n    newList[0]=newList[l-1]\n    newList[l-1]=newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)==1:\n        print(\"Invalid Input\")\n    else:\n        newList[0],newList[-1]=newList[-1],newList[0]\n        return newList\n    \ndef quick_Sort(newList): \n    '''\n    Write a python function to sort a list in ascending order using the quick sort algorithm.\n    '''\n    if len(newList)<=1:\n        return newList\n    else:\n        pivot=newList[0]\n        less=[]\n        pivots=[]\n        greater=[]\n        for i in range(len(newList)):\n            if newList[i]<pivot:\n                less.append(newList[i])\n            elif newList[i]>pivot:\n                greater.append(newList[i])\n            else:\n                pivots.append(newList[i])\n        return quick_Sort(less)+pivots+quick_Sort(greater)\n    \ndef inversion_count(newList): \n    '''\n    Write a python function to count the number of inversions in a given list.\n    '''\n    if len(newList)<=1:\n        return newList\n    else:\n        pivot=newList[0]\n        less=[]\n        pivots=[]\n        greater=[]\n        for i in range(len(newList)):\n            if newList[i]<pivot:\n                less.append(newList[i])\n            elif newList[i]>pivot:\n                greater.append(newList[i])\n            else:\n                pivots.append(newList[i])\n        total_count=0\n        inversion_count(less)+inversion_count(greater)+total_count\n        return inversion_count(less)+inversion_count(greater)+total_count\n    \ndef palindrome_check(newList): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(newList)<=1:\n        return newList\n    else:\n        newList=newList.replace(\" \",\"\")\n        newList=newList.lower()\n        l=0\n        r=len(newList)-1\n        while l<r:\n            if newList[l]!=newList[r]:\n                return False\n            else:\n                l+=1\n                r-=1\n        return True\n    \ndef two_sum(newList): \n    '''\n    Write a python function to find all unique pairs in a list which sum to a given value.\n    '''\n    if len(newList)<=1:\n        return newList\n    else:\n        newList=newList.replace(\" \",\"\")\n        newList=newList.lower()\n        newList=newList.split()\n        newList=set(newList)\n        newList=list(newList)\n        for i in range(len(newList)):\n            for j in range(len(newList)):\n                if int(newList[i])+int(newList[j])==int(newList[i])*2:\n                    print(\"The pair\",int(newList[i]),int(newList[j]))\n    \ndef unique_char(newList): \n    '''\n    Write a python function to find the number of unique characters in a given string.\n    '''\n    if len(newList)<=1:\n        return newList\n    else:\n        newList=newList.replace(\" \",\"\")\n        newList=newList.lower()\n        newList=newList.split()\n        newList=set(newList)\n        newList=list(newList)\n        return len(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList) - 1\n    newList[length], newList[0] = newList[0], newList[length]\n    return newList\n    "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    mid = len(newList)//2\n    newList[0], newList[-1] = newList[-1], newList[0]\n    print(\"swap_List\", newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # newList = [1, 2, 3, 4, 5]\n    # newList[0], newList[-1] = newList[-1], newList[0]\n    # print(newList)\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # get length of list\n    length = len(newList)\n    \n    # get the first element\n    element = newList[0]\n    \n    # swap the first and last element\n    newList[0], newList[length - 1] = newList[length - 1], newList[0]\n    \n    return newList\n    \ndef swap_List_recursive(newList, start, end): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    \n    # get length of list\n    length = len(newList)\n    \n    # get the first element\n    element = newList[0]\n    \n    # swap the first and last element\n    newList[0], newList[length - 1] = newList[length - 1], newList[0]\n    \n    # recurse\n    if start < length - 1 and end > 0:\n        swap_List_recursive(newList, start + 1, end - 1)\n    \n    return newList\n    \ndef get_max_heap(newList):\n    '''\n    Write a python function to get maximum element from a given heap.\n    '''\n    \n    # swap the first and last element\n    newList = swap_List(newList)\n    \n    # return the last element\n    return newList[-1]\n    \ndef get_max_heap_recursive(newList, start, end):\n    '''\n    Write a python function to get maximum element from a given heap.\n    '''\n    \n    # get the maximum element\n    max_element = get_max_heap(newList)\n    \n    # swap the first and last element\n    newList = swap_List_recursive(newList, start, end)\n    \n    return max_element\n    \ndef merge_two_sorted_arrays(list_1, list_2):\n    '''\n    Write a python function to merge two sorted arrays into one sorted array.\n    '''\n    \n    # create empty list\n    newList = []\n    \n    # get the length of list_1 and list_2\n    length_1 = len(list_1)\n    length_2 = len(list_2)\n    \n    # get the pointer for the main list\n    main_pointer = 0\n    \n    # start the loop\n    while main_pointer < length_1 + length_2:\n        # check if the first element of list_1 is smaller than the first element of list_2\n        if list_1[main_pointer] < list_2[main_pointer - length_1]:\n            # if yes, add the first element of list_1 to the main list\n            newList.append(list_1[main_pointer])\n            # move the pointer to the next element of list_1\n            main_pointer += 1\n        else:\n            # if not, add the first element of list_2 to the main list\n            newList.append(list_2[main_pointer - length_1])\n            # move the pointer to the next element of list_2\n            main_pointer += 1\n            \n    # return the new list\n    return newList\n    \ndef merge_two_sorted_arrays_recursive(list_1, list_2):\n    '''\n    Write a python function to merge two sorted arrays into one sorted array.\n    '''\n    \n    # create empty list\n    newList = []\n    \n    # get the length of list_1 and list_2\n    length_1 = len(list_1)\n    length_2 = len(list_2)\n    \n    # get the pointer for the main list\n    main_pointer = 0\n    \n    # start the loop\n    while main_pointer < length_1 + length_2:\n        # check if the first element of list_1 is smaller than the first element of list_2\n        if list_1[main_pointer] < list_2[main_pointer - length_1]:\n            # if yes, add the first element of list_1 to the main list\n            newList.append(list_1[main_pointer])\n            # move the pointer to the next element of list_1\n            main_pointer += 1\n        else:\n            # if not, add the first element of list_2 to the main list\n            newList.append(list_2[main_pointer - length_1])\n            # move the pointer to the next element of list_2\n            main_pointer += 1\n            \n    # return the new list\n    return newList\n    \ndef get_middle_element(newList):\n    '''\n    Write a python function to get middle element from a given list.\n    '''\n    \n    # get the length of the list\n    length = len(newList)\n    \n    # get the mid point\n    mid_point = length // 2\n    \n    # return the middle element\n    return newList[mid_point]\n    \ndef get_middle_element_recursive(newList, start, end):\n    '''\n    Write a python function to get middle element from a given list.\n    '''\n    \n    # get the length of the list\n    length = len(newList)\n    \n    # get the mid point\n    mid_point = length // 2\n    \n    # return the middle element\n    return newList[mid_point]\n    \ndef min_heapify(newList, length, i):\n    '''\n    Write a python function to convert a given array into a min heap.\n    '''\n    \n    # if the index is not at the root\n    if i!= 0:\n        # check if the left child of the element is smaller than the element\n        left_child = 2 * i\n        # if the left child of the element is smaller than the element\n        if left_child < length and newList[left_child] < newList[i]:\n            # if the right child of the element is smaller than the element\n            right_child = 2 * i + 1\n            # if the right child of the element is smaller than the element\n            if right_child < length and newList[right_child] < newList[left_child]:\n                # if the element is smaller than the parent\n                if newList[i] < newList[left_child] and newList[i] < newList[right_child]:\n                    # swap the elements\n                    newList[i], newList[left_child] = newList[left_child], newList[i]\n                    # recurse to the left child\n                    min_heapify(newList, length, left_child)\n                # swap the elements\n                newList[i], newList[right_child] = newList[right_child], newList[i]\n                # recurse to the right child\n                min_heapify(newList, length, right_child)\n    # return the new list\n    return newList\n    \ndef min_heapify_recursive(newList, length, i):\n    '''\n    Write a python function to convert a given array into a min heap.\n    '''\n    \n    # if the index is not at the root\n    if i!= 0:\n        # check if the left child of the element is smaller than the element\n        left_child = 2 * i\n        # if the left child of the element is smaller than the element\n        if left_child < length and newList[left_child] < newList[i]:\n            # if the right child of the element is smaller than the element\n            right_child = 2 * i + 1\n            # if the right child of the element is smaller than the element\n            if right_child < length and newList[right_child] < newList[left_child]:\n                # if the element is smaller than the parent\n                if newList[i] < newList[left_child] and newList[i] < newList[right_child]:\n                    # swap the elements\n                    newList[i], newList[left_child] = newList[left_child], newList[i]\n                    # recurse to the left child\n                    min_heapify_recursive(newList, length, left_child)\n                # swap the elements\n                    newList[i], newList[right_child] = newList[right_child], newList[i]\n                    # recurse to the right child\n                    min_heapify_recursive(newList, length, right_child)\n    # return the new list\n    return newList\n    \ndef heappush(newList, item):\n    '''\n    Write "
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0] \n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    # your code here\n    newList.pop(0)\n    newList.pop(-1)\n    newList.insert(0,newList[-1])\n    newList.insert(-1,newList[0])\n    print(newList)\nswap_List([1,2,3])\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    r = int(r)\n    \n    def is_triangle_in_semicircle(a, b, c, x, y, z) :\n    \n        a,b,c = sorted([a,b,c])\n        \n        if a + b > c and a + c > b and b + c > a :\n            return True\n        else :\n            return False\n        \n    \n    def area_of_triangle(a, b, c) :\n    \n        S = (a + b + c)/2\n        \n        area_triangle = math.sqrt(S*(S-a)*(S-b)*(S-c))\n        \n        return area_triangle\n    \n    \n    def circumscribed_triangle(a, b, c) :\n    \n        a,b,c = sorted([a,b,c])\n        \n        p = (a+b+c)/2\n        area_triangle = math.sqrt(p*(p-a)*(p-b)*(p-c))\n        \n        return area_triangle\n        \n    \n    def semicircle_area(a, b) :\n    \n        a,b = sorted([a,b])\n        \n        area_semicircle = a*b\n        \n        return area_semicircle\n        \n    \n    def circle_radius(x, y, z) :\n    \n        x,y,z = sorted([x,y,z])\n        \n        radius = math.sqrt(x**2 + y**2 + z**2)\n        \n        return radius\n        \n    \n    def triangle_centre(a, b, c) :\n    \n        a,b,c = sorted([a,b,c])\n        \n        x = (a + b + c) / 2\n        y = math.sqrt(x**2 - a**2)\n        z = math.sqrt(x**2 - b**2)\n        \n        centre = (x, y, z)\n        \n        return centre\n        \n    \n    def find_centre(a, b, c, r) :\n    \n        a,b,c = sorted([a,b,c])\n        \n        if r == 0 :\n            a,b,c = sorted([a,b,c])\n            \n            x = (a + b + c)/2\n            y = math.sqrt(x**2 - a**2)\n            z = math.sqrt(x**2 - b**2)\n            \n            centre = (x, y, z)\n            \n            return centre\n        \n        else :\n            r = int(r)\n            \n            centre = triangle_centre(a, b, c)\n            \n            return centre\n        \n    \n    def main():\n    \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('The centre of the triangle with radii a, b, c is :', find_centre(a, b, c, r))\n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))\n        print('Circumscribed triangle : ', circumscribed_triangle(r, r, r))\n        print('Semicircle area : ', semicircle_area(r, r))\n        \n        print('Area of the largest triangle inscribed in a semicircle with a given radius : ', area_of_triangle(r, r, r))"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    \n    def area(rad):\n        ar = math.pi * rad ** 2\n        print(ar)\n        return ar\n    \n    \n    \n    \n    \n    \n    \n    \n    area(5)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    if(r<=0) :\n        return 0\n    if(r==1) :\n        return math.pi\n    x=math.sqrt(r*r+1)\n    y=math.sqrt(r*r-1)\n    s=(x+y)*0.5\n    h=math.sqrt(s*(s-x)*(s-y))\n    return 0.5*(s*h)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 0\n    area += math.pi * r * math.sqrt(3)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    # Base case: when the radius is 0.5\n    if r == 0.5:\n        return 1/2\n    # Recursive case:\n    else:\n        return 0.5*math.sqrt(r*(r-0.5)*(r+0.5))\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 0\n    for i in range(1, r) : \n        area = i * r * math.sqrt(1/3)\n        if (area > area) : \n            break\n    print(area)\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def area(r):\n        y=1/2*math.sqrt(1+math.sqrt(r*r*(1+math.sqrt(r*r-1))))\n        area=(r**2*(y**2-r**2)*3.14)/4\n        return area\n    print(area(r))\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (r**2)*(3**0.5)\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def triangle_area(r) : \n        '''\n        Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        Input: \n            r = radius of the semicircle\n        Output:\n            area of the largest triangle\n        Example:\n            Input: \n            r = 2.0\n            Output:\n            12.566370614359172\n        '''\n        # A function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n        # This function takes in the radius of the semicircle as input and prints the area of the largest triangle inscribed in it.\n        # The area of a triangle is found by the formula of the triangle whose angle is the largest.\n        # If the radius is given as 0, the largest triangle is of diameter 1 and is the unit square.\n        # If the radius is greater than 0, then the largest triangle is inscribed inside a circle with radius r.\n        # In order to find the largest triangle inside a circle, we can either choose the smaller angle or longer hypotenuse,\n        # and use this to find the area of the largest triangle inside the circle.\n        # If the radius is not given, the function should return None.\n        def largest_triangle_area(r, a, b):\n            # A function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n            # This function takes in the radius of the semicircle as input and prints the area of the largest triangle inscribed in it.\n            # The area of a triangle is found by the formula of the triangle whose angle is the largest.\n            # If the radius is given as 0, the largest triangle is of diameter 1 and is the unit square.\n            # If the radius is greater than 0, then the largest triangle is inscribed inside a circle with radius r.\n            # In order to find the largest triangle inside a circle, we can either choose the smaller angle or longer hypotenuse,\n            # and use this to find the area of the largest triangle inside the circle.\n            # If the radius is not given, the function should return None.\n            # The function should print the area of the largest triangle inscribed inside the circle\n            # and also return the area of the largest triangle inscribed inside the circle.\n            # The function returns the area of the largest triangle and the area of the largest triangle inscribed inside the circle.\n            # Area of a triangle is found by the formula of the triangle whose angle is the largest.\n            # Area of the circle is found by the formula of the circle with radius r.\n            # If the radius is given as 0, the largest triangle is of diameter 1 and is the unit square.\n            # If the radius is greater than 0, then the largest triangle is inscribed inside a circle with radius r.\n            # In order to find the largest triangle inside a circle, we can either choose the smaller angle or longer hypotenuse,\n            # and use this to find the area of the largest triangle inside the circle.\n            # If the radius is not given, the function should return None.\n            # Area of the largest triangle inscribed inside the circle is found by the formula of the circle with radius r.\n            # Area of the largest triangle inscribed inside the circle is found by the formula of the triangle whose angle is the largest.\n            # So if the largest triangle is of the form of (a, b), where a and b are sides of the triangle,\n            # the area of the largest triangle inscribed inside the circle is given by:\n            # (a*b)/2.\n            # Thus if radius is given as 0, the largest triangle is of diameter 1 and is the unit square.\n            # If the radius is greater than 0, then the largest triangle is inscribed inside a circle with radius r.\n            # In order to find the largest triangle inside a circle, we can either choose the smaller angle or longer hypotenuse,\n            # and use this to find the area of the largest triangle inside the circle.\n            # If the radius is not given, the function should return None.\n            # The function should print the area of the largest triangle inscribed inside the circle\n            # and also return the area of the largest triangle inscribed inside the circle.\n            # The function returns the area of the largest triangle and the area of the largest triangle inscribed inside the circle.\n            # Area of a triangle is found by the formula of the triangle whose angle is the largest.\n            # Area of the circle is found by the formula of the circle with radius r.\n            # If the radius is given as 0, the largest triangle is of diameter 1 and is the unit square.\n            # If the radius is greater than 0, then the largest triangle is inscribed inside a circle with radius r.\n            # In order to find the largest triangle inside a circle, we can either choose the smaller angle or longer hypotenuse,\n            # and use this to find the area of the largest triangle inside the circle.\n            # If the radius is not given, the function should return None.\n            # Area of the largest triangle inscribed inside the circle is found by the formula of the circle with radius r.\n            # Area of the largest triangle inscribed inside the circle is found by the formula of the triangle whose angle is the largest.\n            # So if the largest triangle is of the form of (a, b), where a and b are sides of the triangle,\n            # the area of the largest triangle inscribed inside the circle is given by:\n            # (a*b)/2.\n            # Thus if radius is given as 0, the largest triangle is of diameter 1 and is the unit square.\n            # If the radius is greater than 0, then the largest triangle is inscribed inside a circle with radius r.\n            # In order to find the largest triangle inside a circle, we can either choose the smaller angle or longer hypotenuse,\n            # and use this to find the area of the largest triangle inside the circle.\n            # If the radius is not given, the function should return None.\n            # Area of the largest triangle inscribed inside the circle is found by the formula of the circle with radius r.\n            # Area of the largest triangle inscribed inside the circle is found by the formula of the triangle whose angle is the largest.\n            # So if the largest triangle is of the form of (a, b), where a and b are sides of the triangle,\n            # the area of the largest triangle inscribed inside the circle is given by:\n            # (a*b)/2.\n            # Thus if radius is given as 0, the largest triangle is of diameter 1 and is the unit square.\n            # If the radius is greater than 0, then the largest triangle is inscribed inside a circle with radius r.\n            # In order to find the largest triangle inside a circle, we can either choose the smaller angle or longer hypotenuse,\n            # and use this to find the area of the largest triangle inside the circle.\n            # If the radius is not given, the function should return None.\n            # Area of the largest triangle inscribed inside the circle is found by the formula of the circle with radius r.\n            # Area of the largest triangle inscribed inside the circle is found by the formula of the triangle whose angle is the largest.\n            # So if the largest triangle is of the form of (a, b), where a and b are sides of the triangle,\n            # the area of the largest triangle inscribed inside the circle is given by:\n            # (a*b)/2.\n            # Thus if radius is given as 0, the largest triangle is of diameter 1 and is the unit square.\n            # If the radius is greater than 0, then the largest triangle is inscribed inside a circle with radius r.\n            # In order to find the largest triangle inside a circle, we can either choose the smaller angle or longer hypotenuse,\n            # and use this to find the area of the largest triangle inside the circle.\n            # If the radius is not given, the function should return None.\n            # The function should print the area of the largest triangle inscribed inside the circle\n            # and also return the area of the largest triangle inscribed inside the circle.\n            # The function returns the area of the largest triangle and the area of the largest triangle inscribed inside the circle.\n            # Area of a triangle is found by the formula of the triangle whose angle is the largest.\n            # Area of the circle is found by the formula of the circle with radius r.\n            # If the radius is given as 0, the largest triangle is of diameter 1 and is the unit square.\n            # If the radius is greater than 0, then the largest triangle is inscribed inside a circle with radius r.\n            # In order to find the largest triangle inside a circle, we ca"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    def triangle_area(r) :\n        if r <= 0:\n            print(\"The radius should be greater than 0.\")\n        else:\n            a = (math.sqrt(3)*r**2)/2\n            print(\"The area of the triangle is:\",a)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if end<start:\n        return start\n    mid=(start+end)//2\n    if array[mid]==mid:\n        return find_First_Missing(array,start,mid-1)\n    elif array[mid]==mid+1:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return mid\ndef find_Second_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the second smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if end<start:\n        return start\n    mid=(start+end)//2\n    if array[mid]==mid:\n        return find_Second_Missing(array,start,mid-1)\n    elif array[mid]==mid+1:\n        return find_Second_Missing(array,mid+1,end)\n    else:\n        return mid\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start > end:\n        return None\n    if start == end:\n        if array[start] == start:\n            return start\n        return None\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)\n    if start > end:\n        return None\n    for i in range(start,end):\n        if i not in array:\n            return i\n    return None\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start>end:\n        return None\n    if start<=end:\n        return (start+end)//2\n    \ndef find_lucky_numbers(arr,n):\n    '''\n    Write a python function to find the lucky numbers in an array.\n    '''\n    num=sorted(arr)\n    lucky=[]\n    for i in range(len(num)):\n        if i+1 in num and i+2 in num:\n            lucky.append(i+1)\n    return lucky\n    \ndef find_leap_year(year):\n    '''\n    Write a python function to find the leap year of a given year.\n    '''\n    if year%4==0:\n        if year%100==0:\n            if year%400==0:\n                return True\n            else:\n                return False\n        else:\n            return True\n    else:\n        return False\n    \ndef find_longest_substring(string,pattern):\n    '''\n    Write a python function to find the longest substring that contains all the given characters.\n    '''\n    if len(string)<len(pattern):\n        return None\n    dp=[0 for i in range(len(string))]\n    for i in range(len(pattern)):\n        dp[i]=1\n        for j in range(i+1,len(string)):\n            if string[j]==pattern[i]:\n                dp[j]=max(dp[j],dp[j-i]+1)\n    return max(dp)\n    \ndef longest_substring_with_k_distinct(string,k):\n    '''\n    Write a python function to find the longest substring that contains at most k distinct characters.\n    '''\n    if k==0 or len(string)<=0:\n        return 0\n    if k>len(set(string)):\n        return 0\n    counter=[0 for i in range(26)]\n    dp=[0 for i in range(26)]\n    for i in range(len(string)):\n        counter[ord(string[i])-ord('a')]+=1\n        for j in range(26):\n            if counter[j]<=k:\n                dp[j]=max(dp[j],dp[i]+1)\n    return max(dp)\n    \ndef find_max_subarray_sum(arr,k):\n    '''\n    Write a python function to find the maximum sum of an array with at least 2 distinct numbers.\n    '''\n    if k==0 or len(arr)<=0:\n        return 0\n    if k>len(set(arr)):\n        return 0\n    max_sum=0\n    current_sum=0\n    for i in range(len(arr)):\n        if arr[i]>0:\n            current_sum+=arr[i]\n            if current_sum>max_sum:\n                max_sum=current_sum\n        else:\n            current_sum=0\n    return max_sum\n    \ndef find_subarray_with_product_less_than_k(array,k):\n    '''\n    Write a python function to find the maximum possible sum of all possible subarray of an array of positive integers whose product is less than k.\n    '''\n    if k==0:\n        return 0\n    if len(array)<2:\n        return 0\n    max_sum=0\n    current_sum=0\n    for i in range(len(array)):\n        if array[i]>0:\n            current_sum*=array[i]\n            if current_sum>max_sum:\n                max_sum=current_sum\n        else:\n            current_sum=0\n    return max_sum\n    \ndef find_number_of_sum_to_target_number(array,target):\n    '''\n    Write a python function to find the number of ways to sum up to a given target number\n    '''\n    array.sort()\n    if target==0:\n        return 1\n    if len(array)<2:\n        return 0\n    dp=[[0 for i in range(target+1)] for j in range(len(array)+1)]\n    for i in range(len(array)+1):\n        dp[i][0]=1\n    for i in range(1,len(array)+1):\n        dp[i][0]=0\n        dp[i][1]=0\n    for i in range(2,len(array)+1):\n        for j in range(1,target+1):\n            if j<=array[i-1]:\n                dp[i][j]=dp[i-1][j]+dp[i-1][j-array[i-1]]\n            else:\n                dp[i][j]=dp[i-1][j]\n    return dp[len(array)][target]\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return None\n    if start==end:\n        return start+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    if array[start] == array[end] and start!= end:\n        return array[start]\n    mid = (start + end)//2\n    if array[mid] == array[start] or array[mid] == array[end]:\n        if array[mid]!= array[start]:\n            return array[start]\n        else:\n            return array[end]\n    if array[mid] < array[end]:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return find_First_Missing(array,start,mid-1)\nif __name__ == '__main__':\n    print(find_First_Missing([2, 3, 4, 7, 11]))\n    print(find_First_Missing([2, 2, 2, 2]))\n    print(find_First_Missing([3, 4, 5, 6, 7]))\n    print(find_First_Missing([1, 2, 3, 4]))\n    print(find_First_Missing([1, 2, 3, 5]))\n    print(find_First_Missing([1, 2, 4, 6, 7, 8, 10]))\n    print(find_First_Missing([1, 2, 3, 5]))\n    print(find_First_Missing([1, 2, 4, 6, 7, 8, 10, 12]))\n    print(find_First_Missing([1, 2, 3, 5, 6, 7]))\n    print(find_First_Missing([1, 2, 3, 4, 6, 7]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35]))\n    print(find_First_Missing([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36]))\n    print"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if start>=end:\n        return start\n    mid=(start+end)//2\n    if array[mid]==mid+1:\n        return find_First_Missing(array,start,mid-1)\n    elif array[mid]==mid:\n        return find_First_Missing(array,mid+1,end)\n    else:\n        return mid\n    \n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array) - 1\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = ''.join(string.split(' '))\n    return string\n    \n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    new_string = string.replace(' ', '%20')\n    return new_string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            l.append(list[i])\n    return l\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    li = []\n    for i in list:\n        if i % 2 == 0:\n            li.append(i)\n    return li\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    odd_list = []\n    for item in list:\n        if item%2==0:\n            even_list.append(item)\n        else:\n            odd_list.append(item)\n    return (even_list,odd_list)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list = list[:]\n    n = 0\n    while n < len(list):\n        if list[n]%2 == 0:\n            list.pop(n)\n        else:\n            n += 1\n    return list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] \n    for num in list: \n        if num%2 == 0: \n            even_list.append(num) \n    return even_list \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    # your code here\n    even = []\n    for i in range(len(list)):\n        if list[i] % 2 == 0:\n            even.append(list[i])\n    return even\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    for num in list:\n        if num % 2 == 0:\n            evens.append(num)\n    return evens\n    "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    num = list[:]\n    for x in range(len(num)):\n        if num[x]%2 == 0:\n            num.pop(x)\n    print(num)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] \n    for number in list:\n        if number % 2 == 0:\n            even_list.append(number)\n    return even_list\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = []\n    if ele[0] == 0:\n        adj.append([ele[0]+1, ele[1]])\n        if ele[1] == 0:\n            adj.append([ele[0]+1, ele[1]+1])\n        elif ele[1] == len(ele[0])-1:\n            adj.append([ele[0]+1, ele[1]-1])\n        else:\n            adj.append([ele[0]+1, ele[1]+1])\n            adj.append([ele[0]+1, ele[1]-1])\n    elif ele[0] == len(ele[0])-1:\n        adj.append([ele[0]-1, ele[1]])\n        if ele[1] == 0:\n            adj.append([ele[0]-1, ele[1]+1])\n        elif ele[1] == len(ele[0])-1:\n            adj.append([ele[0]-1, ele[1]-1])\n        else:\n            adj.append([ele[0]-1, ele[1]+1])\n            adj.append([ele[0]-1, ele[1]-1])\n    elif ele[1] == 0:\n        adj.append([ele[0], ele[1]+1])\n        if ele[0] == 0:\n            adj.append([ele[0]+1, ele[1]+1])\n        elif ele[0] == len(ele[0])-1:\n            adj.append([ele[0]-1, ele[1]+1])\n        else:\n            adj.append([ele[0]+1, ele[1]+1])\n            adj.append([ele[0]-1, ele[1]+1])\n    elif ele[1] == len(ele[0])-1:\n        adj.append([ele[0], ele[1]-1])\n        if ele[0] == 0:\n            adj.append([ele[0]+1, ele[1]-1])\n        elif ele[0] == len(ele[0])-1:\n            adj.append([ele[0]-1, ele[1]-1])\n        else:\n            adj.append([ele[0]+1, ele[1]-1])\n            adj.append([ele[0]-1, ele[1]-1])\n    else:\n        adj.append([ele[0], ele[1]+1])\n        adj.append([ele[0], ele[1]-1])\n        adj.append([ele[0]+1, ele[1]+1])\n        adj.append([ele[0]-1, ele[1]+1])\n        adj.append([ele[0]-1, ele[1]-1])\n        adj.append([ele[0]+1, ele[1]-1])\n    return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    adj = [ele[0] + 1, ele[1], ele[0] - 1, ele[1], ele[0], ele[1] - 1, ele[0] + 1, ele[1] - 1]\n    if adj[0] > 7 or adj[0] < 0:\n        return False\n    if adj[1] > 7 or adj[1] < 0:\n        return False\n    else:\n        return adj\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if (ele[0] + 1, ele[1]) not in sub:\n        sub.append((ele[0] + 1, ele[1]))\n    if (ele[0] - 1, ele[1]) not in sub:\n        sub.append((ele[0] - 1, ele[1]))\n    if (ele[0], ele[1] + 1) not in sub:\n        sub.append((ele[0], ele[1] + 1))\n    if (ele[0], ele[1] - 1) not in sub:\n        sub.append((ele[0], ele[1] - 1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == (0,0):\n        return [((1,1), (1,0)), ((1,0), (0,1)), ((-1,1), (-1,0)), ((-1,0), (-1,-1))]\n    elif ele == (0,1):\n        return [((1,1), (0,0)), ((1,0), (0,1)), ((1,1), (0,-1)), ((0,0), (1,-1))]\n    elif ele == (1,0):\n        return [((0,0), (0,1)), ((0,1), (1,1)), ((0,-1), (0,-1)), ((1,0), (1,1))]\n    elif ele == (1,1):\n        return [((0,0), (0,1)), ((0,1), (0,-1)), ((0,0), (1,-1)), ((1,1), (1,-1))]\n    elif ele == (0,2):\n        return [((0,0), (0,1)), ((0,1), (0,-1)), ((1,0), (1,1)), ((1,1), (1,-1))]\n    elif ele == (2,0):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,1)), ((-1,-1), (-1,1))]\n    elif ele == (2,1):\n        return [((0,0), (0,1)), ((0,1), (0,-1)), ((1,0), (1,1)), ((-1,-1), (-1,0))]\n    elif ele == (2,2):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,1)), ((-1,-1), (-1,0))]\n    elif ele == (2,3):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (3,2):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,1)), ((-1,0), (-1,-1))]\n    elif ele == (3,3):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (3,4):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (4,3):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (4,4):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (4,5):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (5,4):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (5,5):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (5,6):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (6,5):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (6,6):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (6,7):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (7,6):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    elif ele == (7,7):\n        return [((0,0), (0,1)), ((0,1), (1,-1)), ((1,0), (1,-1)), ((-1,0), (-1,-1))]\n    else:\n        return []\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    return [(ele[0] + 1, ele[1]), (ele[0] - 1, ele[1]), (ele[0], ele[1] + 1), (ele[0], ele[1] - 1)]\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele in sub:\n        sub.remove(ele)\n        return sub\n    sub.append(ele)\n    return adjac(ele[0], sub) + adjac(ele[1], sub)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    coor = list(ele)\n    sub.append(tuple(coor))\n    #print(coor)\n    x = coor[0]\n    y = coor[1]\n    if x-1 >= 0:\n        if not(coor in adjac(x-1, sub)):\n            sub.append(tuple((x-1, y)))\n    if y-1 >= 0:\n        if not(coor in adjac(x, y-1, sub)):\n            sub.append(tuple((x, y-1)))\n    if x+1 <= 4:\n        if not(coor in adjac(x+1, sub)):\n            sub.append(tuple((x+1, y)))\n    if y+1 <= 4:\n        if not(coor in adjac(x, y+1, sub)):\n            sub.append(tuple((x, y+1)))\n    #print(sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if type(ele) == tuple:\n        x, y = ele\n        if x - 1 >= 0:\n            sub.append((x-1, y))\n        if x + 1 <= 6:\n            sub.append((x+1, y))\n        if y - 1 >= 0:\n            sub.append((x, y-1))\n        if y + 1 <= 6:\n            sub.append((x, y+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for x in range(0, 4): \n        if x == 0: \n            sub.append((ele[0] - 1, ele[1])) \n        elif x == 1: \n            sub.append((ele[0] + 1, ele[1])) \n        elif x == 2: \n            sub.append((ele[0], ele[1] - 1)) \n        else: \n            sub.append((ele[0], ele[1] + 1)) \n    return sub \n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    sub.append((x,y-1))\n    sub.append((x,y+1))\n    sub.append((x-1,y))\n    sub.append((x+1,y))\n    sub.append((x-1,y-1))\n    sub.append((x+1,y+1))\n    sub.append((x-1,y+1))\n    sub.append((x+1,y-1))\n    return sub\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.strip().replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = []\n    for i in text.split(' '):\n        result.append(i.replace(' ', '_'))\n    return '_'.join(result)\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == \"\":\n        return \"\"\n    return text.replace(\" \", \"_\")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_str = text.replace(\" \", \"_\")\n    return new_str.replace(\"_\", \" \")\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_')\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # print(num_list)\n    while 0 in num_list:\n        num_list.remove(0)\n    while 0 in num_list:\n        num_list.remove(0)\n    # print(num_list)\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    index=0\n    while index < len(num_list):\n        if num_list[index] == 0:\n            del num_list[index]\n            num_list.append(0)\n        else:\n            index+=1\n    print(num_list)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # new_list = []\n    # for i in range(len(num_list)):\n    #     if num_list[i]!= 0:\n    #         new_list.append(num_list[i])\n    #         new_list.append(0)\n    # return new_list\n    if len(num_list) == 0:\n        return []\n    if num_list[0] == 0:\n        num_list.remove(0)\n        num_list.append(0)\n    for i in range(len(num_list)-1):\n        if num_list[i] == 0 and num_list[i+1]!= 0:\n            num_list.remove(0)\n            num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    #my_list = num_list[:]\n    #my_list.sort()\n    #for i in range(len(num_list)):\n    #    if num_list[i]!= 0:\n    #        num_list.insert(i,num_list.pop(i))\n    #return my_list\n    # return num_list[:]\n    # return num_list.sort(key = lambda x: x == 0, reverse = False)\n    # return sorted(num_list, key = lambda x: x == 0, reverse = True)\n    # return num_list.sort(key = lambda x: x == 0, reverse = True)\n    return num_list[:]\n    # return num_list.sort(key = lambda x: x == 0, reverse = True)\n    # return sorted(num_list, key = lambda x: x == 0, reverse = True)\n    # return sorted(num_list, key = lambda x: x == 0, reverse = False)\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    if not num_list:\n        return num_list\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            i -= 1\n        i += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    j = len(num_list)-1\n    while i <= j:\n        if num_list[i] == 0:\n            num_list.append(0)\n            i += 1\n        elif num_list[j] == 0:\n            num_list.append(0)\n            j -= 1\n        else:\n            i += 1\n            j -= 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    move = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[i], num_list[move] = num_list[move], num_list[i]\n            move += 1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    \n    n = len(num_list)\n    for i in range(n):\n        for j in range(n-i-1):\n            if num_list[j] == 0:\n                num_list[j],num_list[j+1] = num_list[j+1],num_list[j]\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    l = []\n    for n in num_list:\n        if n!= 0:\n            l.append(n)\n    for i in range(len(l)):\n        if i == len(l) - 1:\n            break\n        if l[i] == 0:\n            l.append(l[i])\n            l.pop(i)\n    return l\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!= 0:\n            num_list[count], num_list[i] = num_list[i], num_list[count]\n            count += 1\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = sum ^ (arr[i] + arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor_sum = 0\n    for i in range(n-1) :\n        for j in range(i+1,n) :\n            xor_sum += arr[i] ^ arr[j]\n    return xor_sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            total = total ^ arr[i] ^ arr[j]\n    return total\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    xor = []\n    for i in range(n-1):\n        for j in range(i+1,n):\n            xor.append(arr[i] ^ arr[j])\n    return sum(xor)\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    \n    s = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            s = s ^ arr[i] ^ arr[j]\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    Sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            Sum += (arr[i] ^ arr[j])\n    return Sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            sum = sum + (arr[i] ^ arr[j])\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # code here\n    arr_s = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            arr_s = arr_s + (arr[i] ^ arr[j])\n    return arr_s\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    total_xor = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            total_xor = total_xor + arr[i] ^ arr[j]\n    return total_xor\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            res += arr[i] ^ arr[j]\n    return res \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    if len(iterable) <= 1:\n        return iterable\n    \n    hq.heapify(iterable)\n    \n    for i in range(len(iterable) - 1):\n        iterable[i], iterable[i + 1] = iterable[i + 1], iterable[i]\n    return iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    myheap = []\n    sorted_list = []\n    for x in iterable:\n        hq.heappush(myheap, x)\n    while myheap:\n        sorted_list.append(hq.heappop(myheap))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hp = []\n    hq.heapify(hp)\n    for i in iterable:\n        hq.heappush(hp, i)\n    return [hq.heappop(hp) for _ in range(len(hp))]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_list = []\n    while iterable:\n        value = iterable.pop()\n        sorted_list.append(value)\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    iterable = list(iterable)\n    hq.heapify(iterable)\n    output = []\n    while iterable:\n        output.append(iterable.pop(0))\n    return output\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return sorted(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    list_ = []\n    for element in iterable:\n        list_.append(element)\n    heapq.heapify(list_)\n    return list_\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    sorted_list = []\n    hq.heapify(iterable)\n    for i in range(len(iterable)):\n        sorted_list.append(hq.heappop(iterable))\n    return sorted_list\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [i for i in h]\n    \n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    print(\"\\n\\nOriginal List:\",iterable)\n    for i in range(len(iterable)):\n        print(iterable[i])\n        iterable[i] = hq.heappop(iterable)\n    print(\"\\n\\nSorted List:\",iterable)\n    print(\"\\n\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        print(\"True\")\n    else:\n        print(\"False\")\n        "
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost < 0:\n        raise Exception(\"Error: Can't have negative profit\")\n    if actual_cost > sale_amount:\n        raise Exception(\"Error: Can't have profit larger than sale amount\")\n    return actual_cost == 0\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    elif actual_cost > sale_amount:\n        return False\n    else:\n        return None\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if sale_amount >= actual_cost:\n        return False\n    return True\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"Yes, this is not a profitable scenario\")\n    elif actual_cost < sale_amount:\n        print(\"Yes, you have negative profit\")\n    else:\n        print(\"No, you have negative loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n    \nprint(noprofit_noloss(1000,700))\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    actual_cost = float(actual_cost)\n    sale_amount = float(sale_amount)\n    if actual_cost <= sale_amount:\n        print(\"No profit\")\n    else:\n        print(\"No loss\")\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v=float(v)\n    t=float(t)\n    wci=42.5+0.6215*t-11.37*math.pow(v,0.16)+0.4275*math.pow(t,0.16)\n    return int(wci)\ndef print_wci(wci):\n    '''\n    Write a function that prints the wind chill index rounded to the next integer.\n    '''\n    print(wci)\ndef main():\n    '''\n    Write a program that prompts the user to enter a wind speed (km/h) and a temperature (Celsius) and uses wind_chill() to calculate and print the wind chill index rounded to the next integer.\n    '''\n    wind_speed=input(\"Enter wind speed (km/h) \")\n    temp=input(\"Enter temperature (Celsius) \")\n    wci=wind_chill(wind_speed,temp)\n    print_wci(wci)\nif __name__=='__main__':\n    main("
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 13.12 + (0.6215 * t) - (11.37 * math.pow(v,0.16)) + (0.3965 * math.pow(t,0.16))\n    return round(wci)\n    \n    \nprint(wind_chill(12,36))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = 32.0\n    k =.0065\n    V = v * 1.852\n    T = t + 273.15\n    U = V * (math.sqrt(5) / 2.0)\n    e = 0.6215 * (math.exp((17.27 * T) / (T + 237.3)))\n    windchill = 35.74 + 0.6215 * (0.4275 * ((U * (math.sqrt(5))) / ((U ** (1/3)) + 0.112 * (math.sqrt(5)))) - 3.686)\n    windchill = (windchill * (1 + k * (t - C)))\n    return round(windchill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    # Kelvin to Celsius conversion\n    t = t-273.15\n    # Apply calculation\n    wci = 35.74 + 0.6215 * t - 35.75 * math.pow(v,0.16) + 0.4275 * t * math.pow(v,0.16)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = (v**0.16)*(math.exp((0.6215 * t)-(11.37 * math.pow((v**0.16), 2)))/2)\n    return(v)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #v = wind speed in km/h\n    #t = temperature in degrees celsius\n    k = 1.8 * 10**3\n    a = 35.74 + 0.6215 * t - 35.75 * math.pow(t,0.16) + 0.4275 * math.pow(t,0.16)\n    b = 0.6215 * t + 35.75 * math.pow(t,0.16) - 35.74 * math.pow(t,0.16)\n    c = 0.0065 * math.pow(v,0.16)\n    d = math.sqrt(pow(a,2) + pow(b,2) + pow(c,2))\n    return d\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.6215\n    f = 0.1188\n    wind_chill = (a*math.pow(v,0.16))+(c*math.pow(v,0.16))+((a*b*math.pow(v,0.16))+(c*b*math.pow(v,0.16)))*(math.pow(t,0.16))+((a*b*c*math.pow(v,0.16))+(c*b*c*math.pow(v,0.16))+(a*c*math.pow(v,0.16))*(math.pow(t,0.16)))*(math.pow(t,0.16))+((a*b*c*d*math.pow(v,0.16))+(c*b*c*d*math.pow(v,0.16))+(a*c*d*math.pow(v,0.16))*(math.pow(t,0.16)))*(math.pow(t,0.16))\n    return int(wind_chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #TODO: Your code here\n    t = t + 273.15\n    wind_speed = math.sqrt(v**2 + 0.75*((t-32)**2))\n    wind_chill = -42.379 + 2.04901523*t + 10.14333127*math.pow(wind_speed,0.16) - 0.22475541*math.pow(wind_speed,2) + 0.00683783*math.pow(wind_speed,4) - 0.0001248*math.pow(wind_speed,6)\n    wind_chill = round(wind_chill)\n    return wind_chill\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = float(v)\n    t = float(t)\n    b = 35.74 + 0.6215 * t - 35.75 * math.pow(v, 0.16) + 0.4275 * math.pow(v, 0.16) * math.pow(t, 0.16)\n    return b\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = 35.74 + 0.6215 * t - 35.75 * math.pow(t, 2) + 0.4275 * math.pow(t, 3)\n    return (wind_chill_index * (v**0.16)) + 32\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    if isinstance(sample_names,list):\n        for i in sample_names:\n            if isinstance(i,str):\n                if i[0].islower():\n                    sample_names.remove(i)\n        return sum(len(i) for i in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names.copy()\n    for i in range(len(sample_names)):\n        if sample_names[i][0].islower():\n            sample_names.pop(i)\n    sample_names = list(map(lambda s: len(s), sample_names))\n    return sum(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for x in sample_names:\n        if x[0].islower():\n            result += len(x)\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    #your code here\n    \ndef reverse_nam(sample_names):\n    '''\n    Write a function that takes in a list of names, reverses each name and returns the reversed list.\n    '''\n    #your code here\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sample_names = sample_names[:]\n    sample_names = list(filter(lambda x:x[0].isupper(), sample_names))\n    return sum(len(name) for name in sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sample_nam1(sample_names):\n        def remove_lowercase(sample_names):\n            for i in range(len(sample_names)):\n                if sample_names[i][0] == 'l':\n                    sample_names.pop(i)\n            return sample_names\n        sample_names1 = remove_lowercase(sample_names)\n        sum = 0\n        for i in range(len(sample_names1)):\n            sum += len(sample_names1[i])\n        return sum\n    return sample_nam1(sample_names)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    def sum_nam(sample_names):\n        sample_nam = []\n        for i in sample_names:\n            if i[0].lower() in sample_nam:\n                continue\n            else:\n                sample_nam.append(i)\n        return sum([len(i) for i in sample_nam])\n    return sum_nam(sample_nam)\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # list_of_names = ['sdfjh','fhjdsh','fhjsh','jhfhjsh','jhjfhjhs']\n    # sample_names = list_of_names[0:3]\n    # sample_names = list_of_names\n    sum_nam = 0\n    for i in sample_names:\n        sum_nam += len(i)\n    return sum_nam\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    result = 0\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for i in sample_names:\n        if i.lower() == i:\n            sum += len(i)\n    return sum\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in range(len(items)):\n        items[i] = items[i].strip('()')\n        #print(items)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for item in items:\n        if re.match(r'\\(', item)!= None:\n            item = re.sub(r'\\(', '', item)\n        if re.match(r'\\)', item)!= None:\n            item = re.sub(r'\\)', '', item)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    for i in items:\n        # I used regex to strip the parenthesis from the string\n        # regex_par = r'(\\(.*\\))'\n        # regex_ind = r'(.*)(\\(.*\\))'\n        # expression = re.compile(regex_par)\n        # parenthesis = re.compile(regex_ind)\n        # final_par = expression.sub(r'\\2', i)\n        # final_ind = parenthesis.sub(r'\\2', final_par)\n        # print(final_ind)\n        final_ind = i.replace('(', '').replace(')', '')\n        print(final_ind)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = re.split(\"\\(|\\)|\\[|\\]|\\{|\\}\",items)\n    return result[1]\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    try:\n        if items!= '':\n            if items[0] == '(' and items[-1] == ')':\n                items = items.replace('(','')\n                items = items.replace(')','')\n                items = items.strip()\n                return items\n            else:\n                return items\n        else:\n            return items\n    except:\n        return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    final_list = []\n    for item in items:\n        if item[0]!= '(':\n            final_list.append(item)\n        else:\n            final_list.append(item[1:len(item)-1])\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    new_items = items\n    for i in range(len(items)):\n        if items[i] == '(' or items[i] == ')':\n            new_items = new_items[:i] + new_items[i+1:]\n    return new_items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    delim = '('\n    items = items.strip()\n    if items.startswith(delim):\n        items = items[1:]\n    if items.endswith(delim):\n        items = items[:-1]\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    pattern = r\"\\((.*?)\\)\"\n    result = re.sub(pattern, \"\", items)\n    return result\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n -= 1\n    x = 1\n    if n == 0:\n        return x\n    while x < n:\n        x += 2\n        x += (n*2) - 2\n    return x\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return int(n*(n+1)/2)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    return (1 * (n-1)) + (2 * (n-2))\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n * (n - 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # construct the non-diagonal matrix, with the nth value being the number itself\n    # n - 1 because non-diagonal matrix starts with n - 1\n    n = n - 1\n    mat = np.matrix([[1,1], [1,1]])\n    mat = mat.copy()\n    \n    # iterate over the non-diagonal matrix\n    # keep track of the first element, because the nth value is the one after the first element\n    # and therefore the next number is the first element of the next matrix\n    for i in range(n - 1):\n        for j in range(1, i + 2):\n            mat[j - 1][i + 1] = mat[i + 1][j - 1]\n        \n    return mat[1][1]\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # non-diagonal number is the sum of the squares of the numbers in the lower-right triangle of the nth non-diagonal\n    # the sum of the squares of the numbers in the lower-right triangle of a square will equal the square of the number of the square in the lower-right triangle \n    # therefore, the sum of the squares of the numbers in the lower-right triangle of a square will equal the square of the number of the square\n    # if n is a multiple of 4, then the non-diagonal number would be the sum of the squares of the numbers in the lower-right triangle of the square\n    # if n is a multiple of 8, then the non-diagonal number would be the sum of the squares of the numbers in the lower-right triangle of the square\n    # using the function below\n    # (n + 1) * (n + 2) * (n + 3) * (n + 4)\n    # get the number of squares in the lower-right triangle by using the function sqrt\n    # get the number of squares in the lower-right triangle by using the function sqrt\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the function sum\n    # sum the squares of the numbers in the lower-right triangle of a square by using the functio"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return 2*(n-1) + 1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    \n    if n <= 1:\n        return 1\n    else:\n        return n * (n + 1) // 2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = int(n)\n    return sum([x**2 + x for x in range(1, n//2)])\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1:\n        return 1\n    return n*(n - 1)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('z', text):\n        if re.search('z$', text):\n            if re.search('^z', text):\n                if re.search('z^z', text):\n                    return 'yep'\n                else:\n                    return 'nope'\n            else:\n                return 'nope'\n        else:\n            return 'nope'\n    else:\n        return 'nope'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #Get the word with the middle letter\n    middle_word=text[text.index(' ')+1:text.index(' ')+2]\n    #Check if the middle word is 'z', except at the start and end of the word\n    if middle_word=='z':\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    z_pattern = r'z'\n    middle_word_pattern = r'\\w'\n    return re.search(middle_word_pattern+r'z'+middle_word_pattern, text)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    word = text.split()\n    new_text = ''\n    for i in word:\n        if i.endswith('z'):\n            new_text = new_text + i\n        elif i.startswith('z'):\n            new_text = new_text + i\n        else:\n            new_text = new_text +'' + i\n    return new_text\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search('^z(.+?)z$',text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #matches_wordz_middle = re.findall(r'z[^z]+z[^z]+z', text)\n    matches_wordz_middle = re.findall(r'z[^z]+z[^z]+', text)\n    return matches_wordz_middle\ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_wordz_end = re.findall(r'z[^z]+z', text)\n    return matches_wordz_end\ndef text_match_wordz_begin(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_wordz_begin = re.findall(r'z[^z]+', text)\n    return matches_wordz_begin\ndef text_match_wordz_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_wordz_all = re.findall(r'z[^z]+', text)\n    return matches_wordz_all\ndef text_match_one_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    #matches_one_wordz_middle = re.findall(r'z[^z]+z[^z]+z', text)\n    matches_one_wordz_middle = re.findall(r'z[^z]+z[^z]+', text)\n    return matches_one_wordz_middle\ndef text_match_one_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_one_wordz_end = re.findall(r'z[^z]+z', text)\n    return matches_one_wordz_end\ndef text_match_one_wordz_begin(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_one_wordz_begin = re.findall(r'z[^z]+', text)\n    return matches_one_wordz_begin\ndef text_match_one_wordz_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_one_wordz_all = re.findall(r'z[^z]+', text)\n    return matches_one_wordz_all\ndef text_match_two_words_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_two_words_middle = re.findall(r'z[^z]+z[^z]+z', text)\n    return matches_two_words_middle\ndef text_match_two_words_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_two_words_end = re.findall(r'z[^z]+z', text)\n    return matches_two_words_end\ndef text_match_two_words_begin(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_two_words_begin = re.findall(r'z[^z]+', text)\n    return matches_two_words_begin\ndef text_match_two_words_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_two_words_all = re.findall(r'z[^z]+', text)\n    return matches_two_words_all\ndef text_match_one_wordz_begin(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_one_wordz_begin = re.findall(r'z[^z]+', text)\n    return matches_one_wordz_begin\ndef text_match_one_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_one_wordz_middle = re.findall(r'z[^z]+z[^z]+z', text)\n    return matches_one_wordz_middle\ndef text_match_one_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_one_wordz_end = re.findall(r'z[^z]+z', text)\n    return matches_one_wordz_end\ndef text_match_one_wordz_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_one_wordz_all = re.findall(r'z[^z]+', text)\n    return matches_one_wordz_all\ndef text_match_two_words_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_two_words_all = re.findall(r'z[^z]+', text)\n    return matches_two_words_all\ndef text_match_three_words_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_three_words_all = re.findall(r'z[^z]+', text)\n    return matches_three_words_all\ndef text_match_four_words_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_four_words_all = re.findall(r'z[^z]+', text)\n    return matches_four_words_all\ndef text_match_five_words_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_five_words_all = re.findall(r'z[^z]+', text)\n    return matches_five_words_all\ndef text_match_six_words_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_six_words_all = re.findall(r'z[^z]+', text)\n    return matches_six_words_all\ndef text_match_seven_words_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_seven_words_all = re.findall(r'z[^z]+', text)\n    return matches_seven_words_all\ndef text_match_eight_words_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_eight_words_all = re.findall(r'z[^z]+', text)\n    return matches_eight_words_all\ndef text_match_nine_words_all(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    matches_nine_words_al"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    t = text\n    # print(re.split('[^a-zA-Z]+',t))\n    # x = re.split('[^a-zA-Z]+',t)\n    # print(x)\n    # for i in x:\n    #     if i == 'z':\n    #         x.remove(i)\n    #         break\n    # print(x)\n    # print(len(x))\n    z_count = 0\n    # print(x)\n    # print(len(x))\n    for i in range(len(x)-1):\n        # print(x[i])\n        # print(x[i+1])\n        if x[i] == 'z' and x[i+1] == 'z':\n            z_count += 1\n    print(z_count)\n    \n    # print(re.split('[^a-zA-Z]+',text))\n    # print(re.split('[^a-zA-Z]+',t))\n    # print(re.split('[^a-zA-Z]+',text))\n    if z_count == 0:\n        print('y')\n        \n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = text.lower()\n    if text[0] == 'z' and text[1]!= 'z':\n        return 'True'\n    elif text[-1] == 'z' and text[-2]!= 'z':\n        return 'True'\n    else:\n        return 'False'\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search(r'(.*z)(?=.{1,3})(.*z)',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.search(r'^[a-zA-Z]+([a-zA-Z]+)[a-zA-Z]+[a-zA-Z]+$', text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # Initializing left and right pointers\n    left = 0\n    right = len(input) - 1\n    while left <= right: \n        while left <= right and input[left] <= k: \n            left += 1\n        while left <= right and input[right] >= k: \n            right -= 1\n        # Swapping the left and right pointers. \n        input[left], input[right] = input[right], input[left] \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    arr = input\n    len_arr = len(arr)\n    if k > len_arr:\n        k = len_arr\n    k = k - 1\n    i = 0\n    j = 0\n    while j < k:\n        i += 1\n        j = i\n    arr = arr[:k+1]\n    arr.reverse()\n    arr = arr[:-1]\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    left = 0\n    right = len(input)-1\n    \n    while left <= right:\n        while left < k and right >= 0:\n            if input[left] > input[right]:\n                input[left], input[right] = input[right], input[left]\n            left+=1\n            right-=1\n        left = 0\n        right = len(input)-1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    count = 0\n    for i in range(len(input)):\n        if input[i] == k:\n            break\n        count += 1\n    return input[:count][::-1]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input.split()\n    arr.sort()\n    print(\" \".join(arr[:k]))\n    return \" \".join(arr[:k])\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    \n    #Convert to array of integers\n    a = list(map(int,input.split()))\n    \n    #Initialize index and length of array\n    i = 0\n    n = len(a)\n    \n    #Initialize the starting and ending indexes of the array\n    start, end = 0, n-1\n    \n    #Iterate untill the array is reversed\n    while i < k:\n        #Swap the numbers with the index range\n        a[i], a[start] = a[start], a[i]\n        i += 1\n        start += 1\n        \n    #If k is greater than the length of array, reverse the whole array\n    if k > n:\n        a = a[::-1]\n        \n    #Reverse the elements in the range\n    else:\n        for i in range(k, n):\n            a[i], a[end] = a[end], a[i]\n            end -= 1\n    \n    #print the array\n    print(a)\n    \n    \nif __name__ == '__main__':\n    input = input()\n    k = int(input())\n    reverse_Array_Upto_K(input, k)\n    \n    "
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = []\n    for i in range(k):\n        arr.append(input[i])\n    for i in range(len(input)-k):\n        arr.append(input[i+k])\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    def reverse(arr, start, end):\n        while(start<=end):\n            temp = arr[start]\n            arr[start] = arr[end]\n            arr[end] = temp\n            start+=1\n            end-=1\n        return arr\n    n = len(input)\n    if(n <= k):\n        return input\n    return reverse(input,0,k-1) + input[k:]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    #if len(input) <= k:\n    #    return input\n    #i = 0\n    #j = 0\n    #while i <= k and j < len(input):\n    #    if input[j] < input[k]:\n    #        input[i], input[j] = input[j], input[i]\n    #        i += 1\n    #        j += 1\n    #    else:\n    #        j += 1\n    #return input\n    #print(input)\n    #print(input[0:k])\n    #print(input[k:])\n    #input[0:k], input[k:] = input[k:], input[0:k]\n    #print(input)\n    #print(input[0:k])\n    #print(input[k:])\n    #return input[0:k] + input[k:]\n    #print(input)\n    #print(input[0:k])\n    #print(input[k:])\n    #return input[len(input)-k:] + input[0:len(input)-k]\n    #print(input)\n    #print(input[0:k])\n    #print(input[k:])\n    #return input[k:len(input)] + input[0:k]\n    #print(input)\n    #print(input[0:k])\n    #print(input[k:])\n    #return input[k:len(input)] + input[0:k]\n    return input[-k:] + input[0:-k]\n    \n    #return input[len(input)-k:] + input[0:len(input)-k]\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    for i in range(k):\n        input.append(input[-1])\n        input.pop(0)\n    print(input)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_tup[4], test_tup[5], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return(tuple(test_tup) + (test_dict,))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_tup[4], test_tup[5], test_tup[6], test_tup[7], test_tup[8], test_tup[9], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tuple_add = test_tup + (test_dict,)\n    return tuple_add\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup + (test_dict,))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return(tuple(dict.update(test_tup, test_dict)))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = list(test_tup)\n    test_tup.append(test_dict)\n    test_tup = tuple(test_tup)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict, )\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple((*test_tup, *test_dict.items()))\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    arr = [[0 for i in range(n)] for j in range(n)]\n    max_avg = 0\n    x = 0\n    y = 0\n    for i in range(n):\n        for j in range(n):\n            arr[i][j] = cost[i][j]\n    for i in range(n):\n        for j in range(n):\n            if(i == 0 and j == 0):\n                continue\n            elif(i == 0):\n                arr[i][j] += arr[i][j-1]\n            elif(j == 0):\n                arr[i][j] += arr[i-1][j]\n            else:\n                arr[i][j] = (arr[i][j] + arr[i-1][j] + arr[i][j-1])/3\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(max_avg < arr[i][j]):\n                max_avg = arr[i][j]\n                x = i\n                y = j\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(i == x and j == y):\n                continue\n            elif(i == x):\n                arr[i][j] += arr[i][j-1]\n            elif(j == y):\n                arr[i][j] += arr[i-1][j]\n            else:\n                arr[i][j] = (arr[i][j] + arr[i-1][j] + arr[i][j-1])/3\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(max_avg < arr[i][j]):\n                max_avg = arr[i][j]\n                x = i\n                y = j\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(i == x and j == y):\n                continue\n            elif(i == x):\n                arr[i][j] += arr[i][j-1]\n            elif(j == y):\n                arr[i][j] += arr[i-1][j]\n            else:\n                arr[i][j] = (arr[i][j] + arr[i-1][j] + arr[i][j-1])/3\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(max_avg < arr[i][j]):\n                max_avg = arr[i][j]\n                x = i\n                y = j\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(i == x and j == y):\n                continue\n            elif(i == x):\n                arr[i][j] += arr[i][j-1]\n            elif(j == y):\n                arr[i][j] += arr[i-1][j]\n            else:\n                arr[i][j] = (arr[i][j] + arr[i-1][j] + arr[i][j-1])/3\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(max_avg < arr[i][j]):\n                max_avg = arr[i][j]\n                x = i\n                y = j\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(i == x and j == y):\n                continue\n            elif(i == x):\n                arr[i][j] += arr[i][j-1]\n            elif(j == y):\n                arr[i][j] += arr[i-1][j]\n            else:\n                arr[i][j] = (arr[i][j] + arr[i-1][j] + arr[i][j-1])/3\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(max_avg < arr[i][j]):\n                max_avg = arr[i][j]\n                x = i\n                y = j\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(i == x and j == y):\n                continue\n            elif(i == x):\n                arr[i][j] += arr[i][j-1]\n            elif(j == y):\n                arr[i][j] += arr[i-1][j]\n            else:\n                arr[i][j] = (arr[i][j] + arr[i-1][j] + arr[i][j-1])/3\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(max_avg < arr[i][j]):\n                max_avg = arr[i][j]\n                x = i\n                y = j\n    # for i in range(n):\n    #     for j in range(n):\n    #         print(arr[i][j], end = \" \")\n    #     print()\n    # print()\n    for i in range(n):\n        for j in range(n):\n            if(i == x and j == y):\n                continue\n            elif(i == x):\n                arr[i][j] += arr[i][j-1]\n            elif(j == y):\n                arr[i][j] += arr[i-1][j]\n            else:\n                arr[i][j] = (arr[i][j] + arr[i-1][j] + arr[i][j-1])/3\n    # for i in range(n):\n    #     for j in range(n)"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    def getMaxPath(grid, i, j, path, sums, m, n):\n        if i<0 or j<0 or i>=m or j>=n:\n            return 0\n        \n        # if already visited\n        if grid[i][j] == -1:\n            return 0\n        \n        path += str(grid[i][j])\n        \n        # go right\n        currentSum = getMaxPath(grid, i, j+1, path, sums, m, n)\n        \n        # go down\n        currentSum = max(currentSum, getMaxPath(grid, i+1, j, path, sums, m, n))\n        \n        # update sums\n        sums[0] += (int(path[-1]) - int(path[0])) * (grid[i][j])\n        \n        # return maximum sum\n        return currentSum\n    \n    def getMaxAveragePath(grid, m, n):\n        # initialize the sums and path\n        sums = [0]\n        path = ''\n        \n        # get maximum path through grid\n        sums = getMaxPath(grid, 0, 0, path, sums, m, n)\n        \n        return sums[0] / len(sums)\n    \n    # print(getMaxAveragePath(cost, 3, 3))\n    \n    def getMaxPath(grid, i, j, path, sums, m, n):\n        if i<0 or j<0 or i>=m or j>=n:\n            return 0\n        \n        # if already visited\n        if grid[i][j] == -1:\n            return 0\n        \n        path += str(grid[i][j])\n        \n        # go right\n        currentSum = getMaxPath(grid, i, j+1, path, sums, m, n)\n        \n        # go down\n        currentSum = max(currentSum, getMaxPath(grid, i+1, j, path, sums, m, n))\n        \n        # update sums\n        sums[0] += (int(path[-1]) - int(path[0])) * (grid[i][j])\n        \n        # return maximum sum\n        return currentSum\n    \n    def getMaxAveragePath(grid, m, n):\n        # initialize the sums and path\n        sums = [0]\n        path = ''\n        \n        # get maximum path through grid\n        sums = getMaxPath(grid, 0, 0, path, sums, m, n)\n        \n        return sums[0] / len(sums)\n    \n    # print(getMaxAveragePath(cost, 3, 3))\n    \n    def getMaxPath(grid, i, j, path, sums, m, n):\n        if i<0 or j<0 or i>=m or j>=n:\n            return 0\n        \n        # if already visited\n        if grid[i][j] == -1:\n            return 0\n        \n        path += str(grid[i][j])\n        \n        # go right\n        currentSum = getMaxPath(grid, i, j+1, path, sums, m, n)\n        \n        # go down\n        currentSum = max(currentSum, getMaxPath(grid, i+1, j, path, sums, m, n))\n        \n        # update sums\n        sums[0] += (int(path[-1]) - int(path[0])) * (grid[i][j])\n        \n        # return maximum sum\n        return currentSum\n    \n    def getMaxAveragePath(grid, m, n):\n        # initialize the sums and path\n        sums = [0]\n        path = ''\n        \n        # get maximum path through grid\n        sums = getMaxPath(grid, 0, 0, path, sums, m, n)\n        \n        return sums[0] / len(sums)\n    \n    # print(getMaxAveragePath(cost, 3, 3))\n    \n    # BFS\n    def getMaxPath(grid, i, j, path, sums, m, n):\n        q = deque()\n        visited = [[False for i in range(m)] for i in range(n)]\n        \n        q.append([i, j])\n        visited[i][j] = True\n        \n        while q:\n            \n            x, y = q.popleft()\n            \n            if x<0 or y<0 or x>=m or y>=n:\n                continue\n            \n            if grid[x][y] == -1:\n                continue\n            \n            path += str(grid[x][y])\n            \n            # go right\n            if x+1 < m:\n                if not visited[x+1][y]:\n                    q.append([x+1, y])\n                    visited[x+1][y] = True\n            \n            # go down\n            if y+1 < n:\n                if not visited[x][y+1]:\n                    q.append([x, y+1])\n                    visited[x][y+1] = True\n            \n            # update sums\n            sums[0] += (int(path[-1]) - int(path[0])) * (grid[x][y])\n        \n        return sums[0] / len(sums)\n    \n    # print(getMaxPath(cost, 3, 3))\n    \n    def getMaxAveragePath(grid, m, n):\n        q = deque()\n        visited = [[False for i in range(m)] for i in range(n)]\n        \n        q.append([0, 0])\n        visited[0][0] = True\n        \n        while q:\n            \n            x, y = q.popleft()\n            \n            if x<0 or y<0 or x>=m or y>=n:\n                continue\n            \n            if grid[x][y] == -1:\n                continue\n            \n            q.append([x+1, y])\n            q.append([x, y+1])\n            \n            visited[x][y] = True\n        \n        return visited[m-1][n-1]\n    \n    # print(getMaxAveragePath(cost, 3, 3))\n    \n    # DFS\n    def getMaxPath(grid, i, j, path, sums, m, n):\n        if i<0 or j<0 or i>=m or j>=n:\n            return 0\n        \n        # if already visited\n        if grid[i][j] == -1:\n            return 0\n        \n        path += str(grid[i][j])\n        \n        # go right\n        currentSum = getMaxPath(grid, i, j+1, path, sums, m, n)\n        \n        # go down\n        currentSum = max(currentSum, getMaxPath(grid, i+1, j, path, sums, m, n))\n        \n        # update sums\n        sums[0] += (int(path[-1]) - int(path[0])) * (grid[i][j])\n        \n        # return maximum sum\n        return currentSum\n    \n    # print(getMaxPath(cost, 3, 3))\n    \n    def getMaxAveragePath(grid, m, n):\n        q = deque()\n        visited = [[False for i in range(m)] for i in range(n)]\n        \n        q.append([0, 0])\n        visited[0][0] = True\n        \n        while q:\n            \n            x, y = q.popleft()\n            \n            if x<0 or y<0 or x>=m or y>=n:\n                continue\n            \n            if grid[x][y] == -1:\n                continue\n            \n            q.append([x+1, y])\n            q.append([x, y+1])\n            \n            visited[x][y] = True\n        \n        return visited[m-1][n-1]\n    \n    # print(getMaxAveragePath(cost, 3, 3))\n    \n    # DFS + Heap\n    def getMaxPath(grid, i, j, path, sums, m, n):\n        if i"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0] * n for _ in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = cost[i][j]\n    for i in range(n):\n        for j in range(n):\n            if i == 0 or j == 0:\n                dp[i][j] = cost[i][j]\n            else:\n                dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n    print(dp)\n    return max(dp[n - 1]) / n\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[-1 for i in range(n)] for j in range(n)]\n    # dp[i][j] : if the path starts at i,j, then the average of the path is (j+1) / (i+1)\n    dp[0][0] = 0\n    for i in range(n):\n        for j in range(n):\n            if dp[i][j] == -1:\n                continue\n            # this cell is already visited, then check the up cell to see if we can go to this cell using a lower cost path\n            if i > 0 and dp[i][j] > -1 and cost[i][j] + dp[i-1][j] < cost[i][j]:\n                dp[i][j] = cost[i][j] + dp[i-1][j]\n            # this cell is already visited, then check the left cell to see if we can go to this cell using a lower cost path\n            if j > 0 and dp[i][j] > -1 and cost[i][j] + dp[i][j-1] < cost[i][j]:\n                dp[i][j] = cost[i][j] + dp[i][j-1]\n    return (dp[-1][-1]/(n*n))\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    from math import ceil\n    from itertools import chain, combinations\n    from collections import Counter\n    \n    # This is the input matrix\n    mat = cost\n    m, n = len(mat), len(mat[0])\n    if m <= 0 or n <= 0:\n        return\n    \n    # This array will contain the total cost\n    # of all paths ending with each cell.\n    path_cost = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # For each cell, find the cost of paths ending in\n    # that cell.\n    for i in range(m):\n        for j in range(n):\n            path_cost[i][j] = sum([mat[i][k] + mat[k][j] for k in range(n) if i!= k!= j])\n    \n    # This array will contain the min cost of paths ending\n    # in each cell.\n    min_cost = [[float(\"inf\") for _ in range(n)] for _ in range(m)]\n    \n    # Find the minimum cost of each path ending in each cell.\n    # (i.e., paths ending in cell i and cell j will have\n    # cost min(min_cost[i][j], path_cost[i][j]).\n    for i in range(m):\n        for j in range(n):\n            if min_cost[i][j] == float(\"inf\"):\n                min_cost[i][j] = path_cost[i][j]\n            else:\n                min_cost[i][j] = min(min_cost[i][j], path_cost[i][j])\n    \n    # This array will contain the average cost of each cell.\n    avg_cost = [[float(\"inf\") for _ in range(n)] for _ in range(m)]\n    \n    # Find the average cost of each cell. (i.e., cell i and cell j\n    # will have cost average(avg_cost[i][j], min_cost[i][j] + path_cost[i][j]).\n    for i in range(m):\n        for j in range(n):\n            if avg_cost[i][j] == float(\"inf\"):\n                avg_cost[i][j] = path_cost[i][j]\n            else:\n                avg_cost[i][j] = ceil((avg_cost[i][j] + min_cost[i][j]) / 2)\n    \n    # This array will contain the maximum average of each cell.\n    max_avg = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Find the maximum average of each cell. (i.e., cell i and cell j\n    # will have cost max(max_avg[i][j], avg_cost[i][j]).\n    for i in range(m):\n        for j in range(n):\n            if max_avg[i][j] == 0:\n                max_avg[i][j] = avg_cost[i][j]\n            else:\n                max_avg[i][j] = max(max_avg[i][j], avg_cost[i][j])\n    \n    # Find the maximum average path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_avg[i][j], avg_cost[i][j] + min_cost[i][j]).\n    max_avg_path = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if max_avg_path[i][j] == 0:\n                max_avg_path[i][j] = max_avg[i][j]\n            else:\n                max_avg_path[i][j] = max(max_avg_path[i][j], max_avg[i][j])\n    \n    # This array will contain the maximum average path ending\n    # in each cell.\n    max_avg_path_avg = [[0 for _ in range(n)] for _ in range(m)]\n    \n    # Find the maximum average path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_avg_path_avg[i][j], avg_cost[i][j] + min_cost[i][j]).\n    for i in range(m):\n        for j in range(n):\n            if max_avg_path_avg[i][j] == 0:\n                max_avg_path_avg[i][j] = max_avg_path[i][j]\n            else:\n                max_avg_path_avg[i][j] = max(max_avg_path_avg[i][j], max_avg_path[i][j])\n    \n    # This array will contain the maximum path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_path_avg[i][j], path_cost[i][j]).\n    max_path_avg = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if max_path_avg[i][j] == 0:\n                max_path_avg[i][j] = path_cost[i][j]\n            else:\n                max_path_avg[i][j] = max(max_path_avg[i][j], path_cost[i][j])\n    \n    # This array will contain the maximum path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_path_avg[i][j], path_cost[i][j] + min_cost[i][j]).\n    max_path_avg_min = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if max_path_avg_min[i][j] == 0:\n                max_path_avg_min[i][j] = max_path_avg[i][j]\n            else:\n                max_path_avg_min[i][j] = max(max_path_avg_min[i][j], max_path_avg[i][j])\n    \n    # This array will contain the maximum path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_path_avg_min[i][j], path_cost[i][j] + min_cost[i][j]).\n    max_path_avg_min_min = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if max_path_avg_min_min[i][j] == 0:\n                max_path_avg_min_min[i][j] = max_path_avg_min[i][j]\n            else:\n                max_path_avg_min_min[i][j] = max(max_path_avg_min_min[i][j], max_path_avg_min[i][j])\n    \n    # This array will contain the maximum path ending in each cell.\n    # (i.e., path ending in cell i and cell j will have\n    # cost max(max_path_avg_min_min[i][j], path_cost[i][j] + min_cost[i][j]).\n    max_path_avg_min_min_min = [[0 for _ in range(n)] for _ in range(m)]\n    for i in range(m):\n        for j in range(n):\n            if max_path_avg_min_min_min[i][j] == 0:\n                max_path_avg_min_min_mi"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    max_avg = -1\n    n_t_avg = 0\n    n_t_path = []\n    n_f_avg = 0\n    n_f_path = []\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    #First create 2D list\n    matrix = [[0 for i in range(N)] for j in range(N)]\n    #Get the value\n    for i in range(N):\n        for j in range(N):\n            matrix[i][j] = cost[i][j]\n    \n    #Recursion\n    return maxAverageOfPathRec(matrix,N,0,0,0)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # Get the dimensions\n    m = len(cost)\n    n = len(cost[0])\n    \n    # Total paths\n    paths = 1\n    \n    # Get the sum of all paths\n    sum_paths = 0\n    for i in range(0, m):\n        sum_paths += paths * cost[i][i]\n        paths += 1\n    for i in range(0, m-1):\n        sum_paths += paths * cost[i][i+1]\n        paths += 1\n    for i in range(0, n):\n        sum_paths += paths * cost[i][i+1]\n        paths += 1\n    \n    # Get the minimum costs\n    min_costs = min(min(cost[i][j] for j in range(0, m)) for i in range(0, n))\n    max_costs = max(max(cost[i][j] for j in range(0, m)) for i in range(0, n))\n    \n    # Get the range of averages\n    range_avg = (max_costs - min_costs) / (paths - 1)\n    \n    # Return the max average\n    return sum_paths / range_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # n = len(cost)\n    # m = len(cost[0])\n    # dp = [[0]*m for i in range(n)]\n    # dp[0][0] = cost[0][0]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    if n == 0:\n        return 0\n    if n == 1:\n        return cost[0][0]\n    #dp[i][j] represents the maximum average of paths ending at (i,j)\n    dp = [[0 for _ in range(n)] for _ in range(n)]\n    dp[0][0] = cost[0][0]\n    for i in range(n):\n        dp[0][i] = cost[0][i] + dp[0][i-1]\n    for j in range(n):\n        dp[j][0] = cost[j][0] + dp[j-1][0]\n    #for all other cells, we can either go from left to right or down\n    for i in range(1,n):\n        for j in range(1,n):\n            dp[i][j] = max(cost[i][j] + dp[i-1][j], cost[i][j] + dp[i][j-1])\n    return max(dp[-1])/2\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    def is_valid(student):\n        if student[0] >= h and student[1] >= w:\n            return True\n        return False\n    return filter(is_valid,students.items())\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print('Filtering students...')\n    min_height = h\n    min_weight = w\n    result = {}\n    for student,details in students.items():\n        if details[0] >= min_height and details[1] >= min_weight:\n            result[student] = details\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    \n    height=[]\n    weight=[]\n    for st in students.keys():\n        height.append(students[st][0])\n        weight.append(students[st][1])\n    \n    print(height)\n    print(weight)\n    \n    min_h=h\n    min_w=w\n    \n    height_=[]\n    weight_=[]\n    \n    for h in height:\n        if min_h>h:\n            height_=h\n    for w in weight:\n        if min_w>w:\n            weight_=w\n    \n    print(height_)\n    print(weight_)\n    \n    return_list=[]\n    \n    for st in students.keys():\n        if students[st][0]>height_ or students[st][1]>weight_:\n            return_list.append(students[st])\n    \n    return return_list\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = []\n    for s in students:\n        if h > students[s][0] and w > students[s][1]:\n            result.append(students[s])\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = {'Bieo':(1.75,100),\n                'Dill':(1.89,100),\n                'Max':(1.9,100),\n                'Ayta':(1.8,100),\n                'Adal':(1.92,100),\n                'Alexa':(1.8,100),\n                'Cheyenne':(1.9,100),\n                'Hefsia':(1.9,100),\n                'Leila':(1.9,100),\n                'Terrance':(1.8,100),\n                'Zorica':(1.9,100)}\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    out = []\n    for i in students.keys():\n        if students[i][0]>h and students[i][1]>w:\n            out.append(i)\n    return out\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    dict_filter={}\n    for student in students:\n        if students[student][0]>=h and students[student][1]>=w:\n            dict_filter[student]=students[student]\n    return dict_filter\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    print('Filter data')\n    for student in students:\n        if (students[student][0] >= h and students[student][1] >= w):\n            yield students[student]\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students=dict()\n    for student,info in students.items():\n        if info[0]>h and info[1]>w:\n            new_students[student]=info\n    print(new_students)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':(1.68,85),'Charles':(1.75,45),'Brinda':(1.52,42),'Mandy':(1.45,70)}\n    # print(students)\n    # students = {'David':"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # My own solution:\n    # Using an array for the two lists. This is O(n) time and O(n) space.\n    # O(n) because the list is converted to an array and each value is counted.\n    # O(n) because it loops through the array and checks if the current value is the same as any element in the other array.\n    # O(n) because it loops through the array and adds it to the set.\n    # O(1) because it computes the length of the array once.\n    # O(1) because it checks if the value is in the set once.\n    \n    # Create an empty set:\n    same_values_set = set()\n    \n    # Loop through the lists and check if the current value is in the set:\n    for num in nums1:\n        if num in same_values_set:\n            # If it is in the set, increment the counter:\n            same_values_set.add(num)\n            \n    # Loop through the lists and check if the current value is in the set:\n    for num in nums2:\n        if num in same_values_set:\n            # If it is in the set, increment the counter:\n            same_values_set.add(num)\n            \n    # Return the length of the set:\n    return len(same_values_set)\n    \n    # Solution from LeetCode:\n    # Two pointers.\n    # Iterate through each element of the first list, to find an element with the same value in the second list.\n    # If the element is found, increment the count.\n    # Time: O(n)\n    # Space: O(1)\n    \n    # Initialize two pointers:\n    p1, p2 = 0, 0\n    count = 0\n    \n    # Loop through the first list:\n    while p1 < len(nums1):\n        # If the current value matches with any element in the second list,\n        # then increment the count:\n        if nums1[p1] == nums2[p2]:\n            count += 1\n            \n        # Iterate the second pointer, because we need to increment it each time\n        # if the current value matches with any element in the second list:\n        p2 += 1\n        \n        # If there are no more elements in the second list,\n        # then break the loop:\n        if p2 >= len(nums2):\n            break\n        \n        # Iterate the first pointer:\n        p1 += 1\n        \n        # Return the count:\n    return count\n    \n    # Solution from LeetCode:\n    # Using the elements of each list.\n    # Time: O(n)\n    # Space: O(n)\n    \n    # Initialize two pointers:\n    p1, p2 = 0, 0\n    count = 0\n    \n    # Loop through each element in the first list:\n    while p1 < len(nums1):\n        # If the current element is not in the second list, then\n        # it is a new pair:\n        if nums1[p1] not in nums2:\n            count += 1\n            \n        # Iterate the first pointer:\n        p1 += 1\n    \n    # Loop through each element in the second list:\n    while p2 < len(nums2):\n        # If the current element is not in the first list,\n        # it is a new pair:\n        if nums2[p2] not in nums1:\n            count += 1\n            \n        # Iterate the second pointer:\n        p2 += 1\n        \n        # Return the count:\n    return count\n    \ndef rotate_by_90_degrees(nums):\n    '''\n    Given a list of n integers, where n is at least 2. Return the list of numbers with each number rotated by 90 degrees (clockwise).\n    '''\n    # Solution from LeetCode:\n    # First, we take the first element as the first element in the list.\n    # We put the first element of the list into the first position.\n    # We loop through the list and swap the elements at each position with the elements in front of them,\n    # starting from the second element.\n    # We swap the elements in front of the first element with the last element.\n    # We reverse the order of the other elements and then return the list.\n    \n    # Initialize the list:\n    rotated_nums = []\n    \n    # Reverse the list:\n    nums.reverse()\n    \n    # Put the first element into the first position:\n    rotated_nums.append(nums[0])\n    \n    # Loop through the rest of the list:\n    for num in nums[1:]:\n        # Swap the element with the element to the front of the list:\n        rotated_nums.append(nums[nums.index(num)])\n    \n    # Reverse the order of the list:\n    rotated_nums.reverse()\n    \n    # Return the list:\n    return rotated_nums\n    \ndef rotate_by_90_degrees_2(nums):\n    '''\n    Given a list of n integers, where n is at least 2. Return the list of numbers with each number rotated by 90 degrees (clockwise).\n    '''\n    # Solution from LeetCode:\n    # The question asks for 90 degree rotations.\n    # To rotate a list by 90 degrees, we can rotate it by 90 degrees, then rotate it again by 90 degrees and then we rotate it again by 90 degrees.\n    # This can be done in 3 steps.\n    # 1. We can rotate the list in reverse order.\n    # 2. We can rotate the list by 90 degrees.\n    # 3. We can rotate the list again by 90 degrees.\n    \n    # Initialize the list:\n    rotated_nums = []\n    \n    # We can rotate the list in reverse order by reversing the list:\n    rotated_nums = nums[::-1]\n    \n    # We can rotate the list by 90 degrees, using the list slicing:\n    rotated_nums = nums[-1:] + nums[:-1]\n    \n    # We can rotate the list again by 90 degrees, using the list slicing:\n    rotated_nums = nums[-1:] + nums[:1]\n    \n    # Return the list:\n    return rotated_nums\n    \ndef get_winner(votes):\n    '''\n    Given an election where each voter votes for exactly one candidate, and the\n    number of voters voting for each candidate, calculate and return the winning\n    candidate.\n    '''\n    # Initialize a variable to store the number of votes for each candidate:\n    number_of_votes_for_each_candidate = []\n    \n    # Loop through each vote:\n    for vote in votes:\n        # Get the number of votes for each candidate:\n        number_of_votes_for_each_candidate.append(vote.count(1))\n        \n        # Return the candidate with the most votes:\n    return max(number_of_votes_for_each_candidate)\n    \ndef get_winner_2(votes):\n    '''\n    Given an election where each voter votes for exactly one candidate, and the\n    number of voters voting for each candidate, calculate and return the winning\n    candidate.\n    '''\n    # Initialize a variable to store the number of votes for each candidate:\n    number_of_votes_for_each_candidate = []\n    \n    # Loop through each vote:\n    for vote in votes:\n        # Get the number of votes for each candidate:\n        number_of_votes_for_each_candidate.append(vote.count(1))\n        \n        # Return the candidate with the most votes:\n    return max(number_of_votes_for_each_candidate)\n    \ndef get_winner_3(votes):\n    '''\n    Given an election where each voter votes for exactly one candidate, and the\n    number of voters voting for each candidate, calculate and return the winning\n    candidate.\n    '''\n    # Initialize a variable to store the number of votes for each candidate:\n    number_of_votes_for_each_candidate = []\n    \n    # Loop through each vote:\n    for vote in votes:\n        # Get the number of votes for each candidate:\n        number_of_votes_for_each_candidate.append(vote.count(1))\n        \n        # Return the candidate with the most votes:"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Start with the lenght of nums1 and nums2\n    count = len(nums1) + len(nums2)\n    # for each element in nums1\n    for i in range(len(nums1)):\n        # loop over each element in nums2\n        for j in range(len(nums2)):\n            # if nums1 and nums2 elements are equal\n            if nums1[i] == nums2[j]:\n                # add 1 to the count\n                count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i,j in zip(nums1,nums2):\n        if i == j:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef all_the_same(elements):\n    '''\n    Given an array of elements of any type, determine if the array contains the same elements at each index.\n    '''\n    flag = True\n    for i in range(len(elements)):\n        if elements[i]!= elements[i+1]:\n            flag = False\n            break\n    return flag\ndef palindrome(string):\n    '''\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    '''\n    flag = True\n    if type(string)!= str or string == None:\n        flag = False\n    else:\n        for i in range(len(string)):\n            if string[i] not in 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789':\n                flag = False\n                break\n    return flag\ndef balanced_paranthesis(string):\n    '''\n    Given a string consisting of brackets, determine if the order of brackets is balanced.\n    '''\n    count = 0\n    for i in string:\n        if i == '(':\n            count += 1\n        elif i == ')':\n            count -= 1\n        if count < 0:\n            return False\n    return count == 0\ndef check_palindrome(string):\n    '''\n    Given a string, determine if it is a palindrome, considering only alphanumeric characters and ignoring cases.\n    '''\n    flag = True\n    if type(string)!= str or string == None:\n        flag = False\n    else:\n        new_string = ''\n        for i in string:\n            if i.isalnum():\n                new_string += i.lower()\n        return new_string == new_string[::-1]\ndef can_break_it(string):\n    '''\n    Given an array of integers, determine whether it can be broken into two pieces such that each piece sums to the same value.\n    '''\n    flag = True\n    if type(string)!= list or string == None:\n        flag = False\n    elif len(string) == 1:\n        if string[0]!= 0:\n            flag = False\n    else:\n        new_list = []\n        for i in string:\n            if i == 0:\n                new_list = []\n            else:\n                new_list.append(i)\n        new_list = set(new_list)\n        if len(new_list) == 2:\n            if new_list == {1,2}:\n                flag = False\n        else:\n            flag = False\n    return flag\ndef longest_substring(string, k):\n    '''\n    Given a string and an integer k, determine the length of the longest substring that consists of at most k distinct characters.\n    '''\n    flag = True\n    if type(string)!= str or string == None:\n        flag = False\n    elif k <= 0:\n        flag = False\n    else:\n        char_dict = {}\n        for i in string:\n            if i not in char_dict:\n                char_dict[i] = 1\n            else:\n                char_dict[i] += 1\n        new_list = []\n        for i in string:\n            new_list.append(i)\n        new_list = set(new_list)\n        new_list = list(new_list)\n        if len(new_list) > k:\n            flag = False\n        else:\n            if new_list == None:\n                flag = False\n            else:\n                new_list = {}\n                new_list = new_list.fromkeys(new_list, 0)\n                for i in range(len(new_list)):\n                    if new_list[new_list.keys()[i]] == 0:\n                        new_list[new_list.keys()[i]] = 0\n                    else:\n                        new_list[new_list.keys()[i]] = 1\n                for i in range(len(new_list)):\n                    if new_list[new_list.keys()[i]] == 1:\n                        new_list[new_list.keys()[i]] = 0\n                    else:\n                        flag = False\n    return flag\ndef longest_substring_2(string):\n    '''\n    Given a string, determine the length of the longest substring that does not contain any of the letters 'a', 'b', or 'c'.\n    '''\n    flag = True\n    if type(string)!= str or string == None:\n        flag = False\n    else:\n        new_list = []\n        new_list = list(set(new_list))\n        new_list = list(set(new_list))\n        for i in string:\n            if i not in new_list:\n                flag = False\n                break\n        if flag == True:\n            flag = False\n    return flag\ndef two_sum(numbers, target):\n    '''\n    Given an array of integers, return indices of the two numbers such that they add up to a specific target.\n    '''\n    flag = True\n    if type(numbers)!= list or type(numbers) == None or target == None:\n        flag = False\n    elif len(numbers) < 2:\n        flag = False\n    else:\n        for i in range(len(numbers)):\n            for j in range(i+1, len(numbers)):\n                if numbers[i] + numbers[j] == target:\n                    flag = True\n                    break\n                else:\n                    flag = False\n    return flag\ndef count_odd_digits(number):\n    '''\n    Given a number, determine the number of odd digits.\n    '''\n    flag = True\n    if type(number)!= int or number == None:\n        flag = False\n    else:\n        count = 0\n        for i in str(number):\n            if int(i) % 2!= 0:\n                count += 1\n        return count\ndef next_bigger_decreasing(n):\n    '''\n    Given an array of integers, return the index of the first number in the array that is greater than the number at the same index in the sorted array.\n    '''\n    flag = True\n    if type(n)!= list or type(n) == None or n == None:\n        flag = False\n    else:\n        for i in range(len(n)):\n            if i == 0:\n                if n[i] > n[i+1]:\n                    flag = False\n                    break\n            if i > 0:\n                if n[i] <= n[i-1]:\n                    flag = False\n                    break\n        if flag == False:\n            flag = False\n    return flag\ndef is_substring(string, substring):\n    '''\n    Given two strings, determine if one is a substring of the other.\n    '''\n    flag = True\n    if type(string)!= str or type(string) == None or type(substring)!= str or type(substring) == None:\n        flag = False\n    elif len(string) < len(substring):\n        flag = False\n    elif substring == string[:len(substring)]:\n        flag = True\n    else:\n        flag = False\n    return flag\ndef pair_sum(numbers, target):\n    '''\n    Given an array of integers, find a pair in the array whose sum is equal to a given target value.\n    '''\n    flag = True\n    if type(numbers)!= list or type(numbers) == None or target == None:\n        flag = False\n    elif len(numbers) < 2:\n        flag = False\n    else:\n        for i in range(len(numbers)):\n            for j in range(i+1, len(numbers)):\n                if numbers[i] + numbers[j] == target:\n                    flag = True\n                    break\n                else:\n                    flag = False\n    return flag\ndef sort_array(numbers):\n    '''\n    Given an array of integers, sort it.\n    '''\n    flag = True\n    if type(numbers)!= list or type(numbers) == None:\n    "
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    \n    d1 = {}\n    d2 = {}\n    for i,v in enumerate(nums1):\n        if d1.get(v, None):\n            d1[v] += 1\n        else:\n            d1[v] = 1\n    for i,v in enumerate(nums2):\n        if d2.get(v, None):\n            d2[v] += 1\n        else:\n            d2[v] = 1\n    c = 0\n    for i,v in enumerate(d1):\n        if d2.get(v, None):\n            if d1[v] == d2[v]:\n                c += 1\n    return c\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return len([i for i in range(len(nums1)) if nums1[i] == nums2[i]])\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Your code here\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert (power >= 1), \"Power must be a positive integer.\"\n    base = int(base)\n    power = int(power)\n    result = 0\n    while power > 0:\n        result = result + base\n        base = base * 10\n        power = power - 1\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # Make a list with digits in the base and power, the power is always bigger than the base\n    digits = list(range(base, base + power + 1))\n    # Calculate the sum of the digits and store it into sum\n    sum = 0\n    for digit in digits:\n        sum = sum + digit\n    # Return sum\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # your code here\n    return 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if base == 0:\n        return 0\n    if power == 0:\n        return 1\n    i = 0\n    while True:\n        i += base\n        if i >= 10:\n            break\n        power += 1\n    return (i*(10**power))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    if base < 10:\n        if power == 0:\n            result = 1\n        else:\n            result = base\n    else:\n        base_digits = split_digits(base)\n        power_digits = split_digits(power)\n        for index in range(len(base_digits)):\n            result += base_digits[index]**power_digits[index]\n        return result\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    while power > 0:\n        result += base % 10\n        base //= 10\n        power -= 1\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    pow_sum = 0\n    while power >= 1:\n        rem = base % 10\n        pow_sum += rem\n        base = base//10\n        power = power - 1\n    return pow_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power < 0:\n        return 0\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    string = str(base)\n    sum = 0\n    for i in string:\n        sum += int(i)**power\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += (base * (base * base))\n    return sum\nprint(power_base_sum(2, 3)) # should print 8\nprint(power_base_sum(0, 3)) # should print 0\nprint(power_base_sum(0, 0)) # should print 0"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    \n    # print(re.findall(r'\\\"(.*?)\\\"', text1))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r'\\\"(.*?)\\\"', text1, re.I))\n    # print(re.findall(r"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text2 = text1.replace(\"\\\"\", \" \")\n    # print(text2)\n    text3 = re.findall(r'\\\"(.+?)\\\"',text2)\n    # print(text3)\n    return(text3)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    print(text1)\n    \n    if '\"' in text1:\n        d={'(':'{','[':'[','{':'{',')':'}',']':']','}':']',';':':','=':'=='}\n        s1 = ''\n        s2 = ''\n        s3 = ''\n        s4 = ''\n        q1 = ''\n        q2 = ''\n        q3 = ''\n        q4 = ''\n        for i in text1:\n            if i in d.keys():\n                s1 += i\n            elif s1!= '':\n                s2 += i\n                if i in d.values():\n                    s3 += i\n                elif s2!= '':\n                    s4 += i\n                    if i in d.keys():\n                        q1 += i\n                    elif s4!= '':\n                        q2 += i\n                        if i in d.keys():\n                            q3 += i\n                        elif s3!= '':\n                            q4 += i\n        text1 = s1 + s2 + s3 + s4 + q1 + q2 + q3 + q4\n        #text1 = text1.replace('\"',' ')\n        text1 = re.sub(r'([\"\\'])(\\w+)([\"\\']\\w+)', r'\\2\\3', text1)\n        text1 = text1.replace('\"',' ')\n        print(text1)\n        \n    \n    else:\n        print(\"Not found\")\n    "
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quote = re.compile('\\\"')\n    extracted_string = quote.search(text1)\n    return extracted_string\ndef extract_date_time(text1):\n    '''\n    Write a function to extract values between dates and times \"dd/mm/yyyy hh:mm:ss\" and \"hh:mm\" of the given string.\n    '''\n    date_time_regex = re.compile(r'(\\d\\d/\\d\\d/\\d{4} )?(\\d\\d?:\\d\\d)([ ]\\d\\d?:\\d\\d)?')\n    extracted_string = date_time_regex.search(text1)\n    return extracted_string\ndef extract_phone_number(text1):\n    '''\n    Write a function to extract phone numbers (i.e. 9-digit numbers) of the given string.\n    '''\n    phone_regex = re.compile(r'\\(?\\+?1?\\)?[.-]?\\d{3,4}[.-]?\\d{3,4}[.-]?\\d{2,4}')\n    extracted_string = phone_regex.search(text1)\n    return extracted_string\ndef extract_email_id(text1):\n    '''\n    Write a function to extract values of the form name@gmail.com from the given string.\n    '''\n    email_regex = re.compile(r'([\\w-]*@gmail.com)')\n    extracted_string = email_regex.search(text1)\n    return extracted_string\ndef extract_country_calling_code(text1):\n    '''\n    Write a function to extract country calling codes from the given string.\n    '''\n    country_calling_code_regex = re.compile(r'[0-9]')\n    extracted_string = country_calling_code_regex.search(text1)\n    return extracted_string\ndef extract_ip_address(text1):\n    '''\n    Write a function to extract values of the form x.x.x.x from the given string.\n    '''\n    ip_regex = re.compile(r'(\\d{1,3}\\.){3}\\d{1,3}')\n    extracted_string = ip_regex.search(text1)\n    return extracted_string\ndef extract_url(text1):\n    '''\n    Write a function to extract the URL from the given string.\n    '''\n    url_regex = re.compile(r'(https?://)?(\\w+\\.)?\\w+')\n    extracted_string = url_regex.search(text1)\n    return extracted_string\ndef extract_domain_name(text1):\n    '''\n    Write a function to extract the domain name from the given string.\n    '''\n    domain_name_regex = re.compile(r'(\\w+\\.)+\\w+')\n    extracted_string = domain_name_regex.search(text1)\n    return extracted_string\ndef extract_username(text1):\n    '''\n    Write a function to extract the username from the given string.\n    '''\n    username_regex = re.compile(r'(\\w+)')\n    extracted_string = username_regex.search(text1)\n    return extracted_string\ndef extract_domain_name_and_username(text1):\n    '''\n    Write a function to extract the domain name and username from the given string.\n    '''\n    domain_name_and_username_regex = re.compile(r'(\\w+\\.\\w+)')\n    extracted_string = domain_name_and_username_regex.search(text1)\n    return extracted_string\ndef extract_urls(text1):\n    '''\n    Write a function to extract the URLs from the given string.\n    '''\n    urls = re.compile(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\), ]|(?:%[0-9a-fA-F][0-9a-fA-F]))+')\n    extracted_string = urls.findall(text1)\n    return extracted_string\ndef extract_ip_addresses(text1):\n    '''\n    Write a function to extract the IP addresses from the given string.\n    '''\n    ip_addresses = re.compile(r'(([1-9][0-9]{0,2})|([1-9][0-9]{1,2})|([0-9][1,2]{1,3}))(([.])|([:][0-9]+))*')\n    extracted_string = ip_addresses.findall(text1)\n    return extracted_string\ndef extract_ip_addresses_of_cidr_notation(text1):\n    '''\n    Write a function to extract the IP addresses of the CIDR notation from the given string.\n    '''\n    ip_address_of_cidr_notation_regex = re.compile(r'(((([1-9][0-9]{0,2})|([1-9][0-9]{1,2})|([0-9][1,2]{1,3}))(([.])|([:][0-9]+))*)|((([0-9]{1,2})|([1-9][0-9]{0,2})|([0-9]{1,3}))(([.])|([:][0-9]+))*)')\n    extracted_string = ip_address_of_cidr_notation_regex.findall(text1)\n    return extracted_string\ndef extract_ip_addresses_of_port_number_notation(text1):\n    '''\n    Write a function to extract the IP addresses of the port number notation from the given string.\n    '''\n    ip_address_of_port_number_notation_regex = re.compile(r'(((([1-9][0-9]{0,2})|([1-9][0-9]{1,2})|([0-9][1,2]{1,3}))(([.])|([:][0-9]+))*)|(([0-9]{1,2})|([1-9][0-9]{0,2})|([0-9]{1,3}))(([.])|([:][0-9]+))*)')\n    extracted_string = ip_address_of_port_number_notation_regex.findall(text1)\n    return extracted_string\ndef extract_url_of_email_address(text1):\n    '''\n    Write a function to extract URLs of the email address from the given string.\n    '''\n    email_address_url_regex = re.compile(r'(https?://)?([\\w\\d]+\\.)?[\\w\\d]+')\n    extracted_string = email_address_url_regex.findall(text1)\n    return extracted_string\ndef extract_email_addresses(text1):\n    '''\n    Write a function to extract the email addresses from the given string.\n    '''\n    email_addresses = re.compile(r'[\\w\\d.+]+@[\\w\\d.+]+')\n    extracted_string = email_addresses.findall(text1)\n    return extracted_string\ndef extract_phone_numbers(text1):\n    '''\n    Write a function to extract the phone numbers from the given string.\n    '''\n    phone_numbers = re.compile(r'(\\+?1?\\)?[.-]?\\d{3,4}[.-]?\\d{3,4}[.-]?\\d{2,4}')\n    extracted_string = phone_numbers.findall(text1)\n    return extracted_string\ndef extract_dates(text1):\n    '''\n    Write a function to extract dates from the given string.\n    '''\n    dates = re.compile(r'(([1-9][0-9]{0,2})|([1-9][0-9]{1,2})|([0-9][1,2]{"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pat = r'\\\"{1}([\\s\\S]*?)\\\"{1}'\n    match = re.findall(pat, text1)\n    return match\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    # pattern = re.compile(r'\\\"(.*)\\\"')\n    # results = re.findall(pattern,text1)\n    # print(results)\n    # result = re.findall(r'\\\"(.*)\\\"',text1)\n    # print(result)\n    # match = re.match(pattern,text1)\n    # print(match)\n    # if match:\n    #     return match.group(1)\n    # else:\n    #     return None\n    return re.findall(r\"\\\"(.*)\\\"\",text1)\n    #return re.search(pattern,text1).group(1)\n    #return re.search(pattern,text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    match=re.search(r'\"(.*)\"',text1)\n    if match:\n        return match.group(1)\n    else:\n        return None\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.replace(\"\u2019\", \"\")\n    text1 = text1.replace(\"'\", \"\")\n    text1 = text1.replace(\"[\", \"\")\n    text1 = text1.replace(\"]\", \"\")\n    text1 = text1.replace(\" \", \"\")\n    text1 = text1.replace(\"\\n\", \"\")\n    text1 = text1.replace(\"\\t\", \"\")\n    text1 = text1.replace(\"\\r\", \"\")\n    text1 = text1.replace(\"\\u00a0\", \"\")\n    text1 = text1.replace(\"\\u00b7\", \"\")\n    text1 = text1.replace(\"\\u00a1\", \"\")\n    text1 = text1.replace(\"\\u00b0\", \"\")\n    text1 = text1.replace(\"\\u00a2\", \"\")\n    text1 = text1.replace(\"\\u00a3\", \"\")\n    text1 = text1.replace(\"\\u00b3\", \"\")\n    text1 = text1.replace(\"\\u00a4\", \"\")\n    text1 = text1.replace(\"\\u00a5\", \"\")\n    text1 = text1.replace(\"\\u00b5\", \"\")\n    text1 = text1.replace(\"\\u00a6\", \"\")\n    text1 = text1.replace(\"\\u00a7\", \"\")\n    text1 = text1.replace(\"\\u00b6\", \"\")\n    text1 = text1.replace(\"\\u00a8\", \"\")\n    text1 = text1.replace(\"\\u00a9\", \"\")\n    text1 = text1.replace(\"\\u00b9\", \"\")\n    text1 = text1.replace(\"\\u00aa\", \"\")\n    text1 = text1.replace(\"\\u00ab\", \"\")\n    text1 = text1.replace(\"\\u00b8\", \"\")\n    text1 = text1.replace(\"\\u00ac\", \"\")\n    text1 = text1.replace(\"\\u00ad\", \"\")\n    text1 = text1.replace(\"\\u00ae\", \"\")\n    text1 = text1.replace(\"\\u00af\", \"\")\n    text1 = text1.replace(\"\\u00b2\", \"\")\n    text1 = text1.replace(\"\\u00b3\", \"\")\n    text1 = text1.replace(\"\\u00b4\", \"\")\n    text1 = text1.replace(\"\\u00b5\", \"\")\n    text1 = text1.replace(\"\\u00b6\", \"\")\n    text1 = text1.replace(\"\\u00b7\", \"\")\n    text1 = text1.replace(\"\\u00b8\", \"\")\n    text1 = text1.replace(\"\\u00b9\", \"\")\n    text1 = text1.replace(\"\\u00ba\", \"\")\n    text1 = text1.replace(\"\\u00bb\", \"\")\n    text1 = text1.replace(\"\\u00bc\", \"\")\n    text1 = text1.replace(\"\\u00bd\", \"\")\n    text1 = text1.replace(\"\\u00be\", \"\")\n    text1 = text1.replace(\"\\u00bf\", \"\")\n    text1 = text1.replace(\"\\u00c0\", \"\")\n    text1 = text1.replace(\"\\u00c1\", \"\")\n    text1 = text1.replace(\"\\u00c2\", \"\")\n    text1 = text1.replace(\"\\u00c3\", \"\")\n    text1 = text1.replace(\"\\u00c4\", \"\")\n    text1 = text1.replace(\"\\u00c5\", \"\")\n    text1 = text1.replace(\"\\u00c6\", \"\")\n    text1 = text1.replace(\"\\u00c7\", \"\")\n    text1 = text1.replace(\"\\u00c8\", \"\")\n    text1 = text1.replace(\"\\u00c9\", \"\")\n    text1 = text1.replace(\"\\u00ca\", \"\")\n    text1 = text1.replace(\"\\u00cb\", \"\")\n    text1 = text1.replace(\"\\u00cc\", \"\")\n    text1 = text1.replace(\"\\u00cd\", \"\")\n    text1 = text1.replace(\"\\u00ce\", \"\")\n    text1 = text1.replace(\"\\u00cf\", \"\")\n    text1 = text1.replace(\"\\u00d0\", \"\")\n    text1 = text1.replace(\"\\u00d1\", \"\")\n    text1 = text1.replace(\"\\u00d2\", \"\")\n    text1 = text1.replace(\"\\u00d3\", \"\")\n    text1 = text1.replace(\"\\u00d4\", \"\")\n    text1 = text1.replace(\"\\u00d5\", \"\")\n    text1 = text1.replace(\"\\u00d6\", \"\")\n    text1 = text1.replace(\"\\u00d7\", \"\")\n    text1 = text1.replace(\"\\u00d8\", \"\")\n    text1 = text1.replace(\"\\u00d9\", \"\")\n    text1 = text1.replace(\"\\u00da\", \"\")\n    text1 = text1.replace(\"\\u00db\", \"\")\n    text1 = text1.replace(\"\\u00dc\", \"\")\n    text1 = text1.replace(\"\\u00dd\", \"\")\n    text1 = text1.replace(\"\\u00de\", \"\")\n    text1 = text1.replace(\"\\u00df\", \"\")\n    text1 = text1.replace(\"\\u00e0\", \"\")\n    text1 = text1.replace(\"\\u00e1\", \"\")\n    text1 = text1.replace(\"\\u00e2\", \"\")\n    text1 = text1.replace(\"\\u00e3\", \"\")\n    text1 = text1.replace(\"\\u00e4\", \"\")\n    text1 = text1.replace(\"\\u00e5\", \"\")\n    text1 = text1.replace(\"\\u00e6\", \"\")\n    text1 = text1.replace(\"\\u00e7\", \"\")\n    text1 = text1.replace(\"\\u00e8\", \"\")\n    text1 = text1.replace(\"\\u00e9\", \"\")\n    text1 = text1.replace(\"\\u00ea\", \"\")\n    text1 = text1.replace(\"\\u00eb\", \"\")\n    text1 = text1.replace(\"\\u00ec\", \"\")\n    text1 = text1.replace(\"\\u00ed\", \"\")\n    text1 = text1.replace(\"\\u00ee\", \"\")\n    text1 = text1.replace(\"\\u00ef\", \"\")\n    text1 = text1.replace(\"\\u00f0\", \"\")\n    text1 = text1.replace(\"\\u00f1\", \"\")\n    text1 = text1.replace(\"\\u00f2\", \"\")\n    text1 = text1.replace(\"\\u00f3\", \"\")\n    text1 = text1.replace(\"\\u00f4\", \"\")\n    text1 = text1.replace(\"\\u00f5\", \"\")\n    text1 = text1.replace(\"\\u00f6\", \"\")\n    text1 = text1.replace(\"\\u00f7\", \"\")\n    text1 = text1.replace(\"\\u00f8\", \"\")\n    text1 = text1.replace(\"\\u00f9\", \"\")\n    text1 = text1.replace(\"\\u00fa\", \"\")\n    text1 = text1.replace(\"\\u00fb\", \"\")\n    text1 = text1.replace(\"\\u00fc\", \"\")\n    text1 = text1.replace(\"\\u00fd\", \"\")\n    text1 = text1.replace(\"\\u00fe\", \"\")\n    text1 = text1.replace(\"\\u00ff\", \"\")\n    text1 = text1.replace(\"\\u0100\", \"\")\n    text1 = text1.replace(\"\\u0101\", \"\")\n    text1 = text1.replace(\"\\u0102\", \"\")\n    text1 = text1.replace(\"\\u0103\", \"\")\n    text1 = text1.replace(\"\\u0104\", \"\")\n    text1 = text1.replace(\"\\u0105\", \"\")\n    text1 = text1.replace(\"\\"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #print(text1)\n    quotation = re.findall('\"[a-zA-Z]+\"', text1)\n    quotation = \" \".join(quotation)\n    quotation = quotation.strip()\n    return quotation\n    #print(quotation)\ndef extract_bracket(text1):\n    '''\n    Write a function to extract values between the square brackets.\n    '''\n    #print(text1)\n    bracket = re.findall('\"[a-zA-Z]+\"', text1)\n    bracket = \" \".join(bracket)\n    bracket = bracket.strip()\n    return bracket\n    #print(bracket)\ndef extract_values(text1):\n    '''\n    Write a function to extract values between the square brackets.\n    '''\n    text1 = text1.lower()\n    #print(text1)\n    bracket = re.findall('\"[a-zA-Z]+\"', text1)\n    bracket = \" \".join(bracket)\n    #print(bracket)\n    bracket = bracket.strip()\n    values = re.findall('[0-9]', bracket)\n    values = \" \".join(values)\n    values = values.strip()\n    return values\n    #print(values)\ndef extract_operators(text1):\n    '''\n    Write a function to extract operator values between the square brackets.\n    '''\n    text1 = text1.lower()\n    operators = re.findall('\"[a-zA-Z]+\"', text1)\n    operators = \" \".join(operators)\n    #print(operators)\n    operators = operators.strip()\n    operators = re.findall('[0-9]+', operators)\n    operators = \" \".join(operators)\n    operators = operators.strip()\n    return operators\n    #print(operators)\ndef extract_parentheses(text1):\n    '''\n    Write a function to extract parenthesis values.\n    '''\n    text1 = text1.lower()\n    parentheses = re.findall('\"[a-zA-Z]+\"', text1)\n    parentheses = \" \".join(parentheses)\n    #print(parentheses)\n    parentheses = parentheses.strip()\n    parentheses = re.findall('[0-9]+', parentheses)\n    parentheses = \" \".join(parentheses)\n    parentheses = parentheses.strip()\n    return parentheses\n    #print(parentheses)\ndef extract_matrix(text1):\n    '''\n    Write a function to extract matrix values.\n    '''\n    matrix = re.findall('[a-zA-Z]+[a-zA-Z]+', text1)\n    matrix = \" \".join(matrix)\n    matrix = matrix.strip()\n    return matrix\n    #print(matrix)\ndef extract_matrix_with_brackets(text1):\n    '''\n    Write a function to extract matrix values with square brackets.\n    '''\n    matrix = re.findall('\"[a-zA-Z]+[a-zA-Z]+\"', text1)\n    matrix = \" \".join(matrix)\n    matrix = matrix.strip()\n    return matrix\n    #print(matrix)\ndef extract_multiline_values(text1):\n    '''\n    Write a function to extract multiline values between square brackets.\n    '''\n    text1 = text1.lower()\n    text1 = re.sub('\"[a-zA-Z]+\"', '', text1)\n    multiline = re.findall('\"[a-zA-Z]+\"', text1)\n    multiline = \" \".join(multiline)\n    multiline = multiline.strip()\n    return multiline\n    #print(multiline)\ndef extract_multiline_values_with_brackets(text1):\n    '''\n    Write a function to extract multiline values between square brackets.\n    '''\n    text1 = text1.lower()\n    text1 = re.sub('\"[a-zA-Z]+\"', '', text1)\n    multiline = re.findall('\"[a-zA-Z]+\"', text1)\n    multiline = \" \".join(multiline)\n    multiline = multiline.strip()\n    return multiline\n    #print(multiline)\ndef extract_multi_values(text1):\n    '''\n    Write a function to extract multi line values with square brackets.\n    '''\n    text1 = text1.lower()\n    text1 = re.sub('\"[a-zA-Z]+\"', '', text1)\n    multiline = re.findall('\"[a-zA-Z]+\"', text1)\n    multiline = \" \".join(multiline)\n    multiline = multiline.strip()\n    return multiline\n    #print(multiline)\ndef extract_values_with_brackets(text1):\n    '''\n    Write a function to extract values with square brackets.\n    '''\n    text1 = text1.lower()\n    text1 = re.sub('\"[a-zA-Z]+\"', '', text1)\n    values = re.findall('\"[a-zA-Z]+\"', text1)\n    values = \" \".join(values)\n    values = values.strip()\n    return values\n    #print(values)\ndef extract_values_without_brackets(text1):\n    '''\n    Write a function to extract values without square brackets.\n    '''\n    text1 = text1.lower()\n    text1 = re.sub('\"[a-zA-Z]+\"', '', text1)\n    values = re.findall('\"[a-zA-Z]+\"', text1)\n    values = \" \".join(values)\n    values = values.strip()\n    return values\n    #print(values)\ndef extract_values_in_matrix(text1):\n    '''\n    Write a function to extract values in matrix.\n    '''\n    text1 = text1.lower()\n    values = re.findall('\"[a-zA-Z]+\"', text1)\n    values = \" \".join(values)\n    values = values.strip()\n    values = re.findall('[0-9]+', values)\n    values = \" \".join(values)\n    values = values.strip()\n    return values\n    #print(values)\ndef extract_values_in_matrix_with_brackets(text1):\n    '''\n    Write a function to extract values in matrix.\n    '''\n    text1 = text1.lower()\n    values = re.findall('\"[a-zA-Z]+\"', text1)\n    values = \" \".join(values)\n    values = values.strip()\n    values = re.findall('[0-9]+', values)\n    values = \" \".join(values)\n    values = values.strip()\n    return values\n    #print(values)\ndef extract_values_in_string(text1):\n    '''\n    Write a function to extract values in string.\n    '''\n    text1 = text1.lower()\n    values = re.findall('\"[a-zA-Z]+\"', text1)\n    values = \" \".join(values)\n    values = values.strip()\n    return values\n    #print(values)\ndef extract_values_in_string_with_brackets(text1):\n    '''\n    Write a function to extract values in string.\n    '''\n    text1 = text1.lower()\n    values = re.findall('\"[a-zA-Z]+\"', text1)\n    values = \" \".join(values)\n    values = values.strip()\n    return values\n    #print(values)\ndef extract_values_in_string_with_special_symbols(text1):\n    '''\n    Write a function to extract values in string.\n    '''\n    text1 = text1.lower()\n    values = re.findall('\"[a-zA-Z]+\"', text1)\n    values = \" \".join(values)\n    values = values.strip()\n    values = re.findall('\\*\\*|[0-9]+', values)\n    values = \" \".join(values)\n    values = values"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    result = re.findall('\"([^\"]*)\"', text1)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    my_tuple = []\n    for i in range(len(test_tup)):\n        my_tuple.append(test_tup[i] * (i+1))\n    return my_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = tuple()\n    for i in range(len(test_tup)-1):\n        result = result + (test_tup[i]*test_tup[i+1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return t_1*t_2, t_1*t_3, t_1*t_4, t_1*t_5, t_1*t_6, t_1*t_7, t_1*t_8, t_1*t_9, t_1*t_10, t_1*t_11, t_1*t_12, t_1*t_13, t_1*t_14, t_1*t_15, t_1*t_16, t_1*t_17, t_1*t_18, t_1*t_19, t_1*t_20, t_1*t_21, t_1*t_22, t_1*t_23, t_1*t_24, t_1*t_25, t_1*t_26, t_1*t_27, t_1*t_28, t_1*t_29, t_1*t_30, t_1*t_31, t_1*t_32, t_1*t_33, t_1*t_34, t_1*t_35, t_1*t_36, t_1*t_37, t_1*t_38, t_1*t_39, t_1*t_40, t_1*t_41, t_1*t_42, t_1*t_43, t_1*t_44, t_1*t_45, t_1*t_46, t_1*t_47, t_1*t_48, t_1*t_49, t_1*t_50, t_1*t_51, t_1*t_52, t_1*t_53, t_1*t_54, t_1*t_55, t_1*t_56, t_1*t_57, t_1*t_58, t_1*t_59, t_1*t_60, t_1*t_61, t_1*t_62, t_1*t_63, t_1*t_64, t_1*t_65, t_1*t_66, t_1*t_67, t_1*t_68, t_1*t_69, t_1*t_70, t_1*t_71, t_1*t_72, t_1*t_73, t_1*t_74, t_1*t_75, t_1*t_76, t_1*t_77, t_1*t_78, t_1*t_79, t_1*t_80, t_1*t_81, t_1*t_82, t_1*t_83, t_1*t_84, t_1*t_85, t_1*t_86, t_1*t_87, t_1*t_88, t_1*t_89, t_1*t_90, t_1*t_91, t_1*t_92, t_1*t_93, t_1*t_94, t_1*t_95, t_1*t_96, t_1*t_97, t_1*t_98, t_1*t_99, t_1*t_100, t_1*t_101, t_1*t_102, t_1*t_103, t_1*t_104, t_1*t_105, t_1*t_106, t_1*t_107, t_1*t_108, t_1*t_109, t_1*t_110, t_1*t_111, t_1*t_112, t_1*t_113, t_1*t_114, t_1*t_115, t_1*t_116, t_1*t_117, t_1*t_118, t_1*t_119, t_1*t_120, t_1*t_121, t_1*t_122, t_1*t_123, t_1*t_124, t_1*t_125, t_1*t_126, t_1*t_127, t_1*t_128, t_1*t_129, t_1*t_130, t_1*t_131, t_1*t_132, t_1*t_133, t_1*t_134, t_1*t_135, t_1*t_136, t_1*t_137, t_1*t_138, t_1*t_139, t_1*t_140, t_1*t_141, t_1*t_142, t_1*t_143, t_1*t_144, t_1*t_145, t_1*t_146, t_1*t_147, t_1*t_148, t_1*t_149, t_1*t_150, t_1*t_151, t_1*t_152, t_1*t_153, t_1*t_154, t_1*t_155, t_1*t_156, t_1*t_157, t_1*t_158, t_1*t_159, t_1*t_160, t_1*t_161, t_1*t_162, t_1*t_163, t_1*t_164, t_1*t_165, t_1*t_166, t_1*t_167, t_1*t_168, t_1*t_169, t_1*t_170, t_1*t_171, t_1*t_172, t_1*t_173, t_1*t_174, t_1*t_175, t_1*t_176, t_1*t_177, t_1*t_178, t_1*t_179, t_1*t_180, t_1*t_181, t_1*t_182, t_1*t_183, t_1*t_184, t_1*t_185, t_1*t_186, t_1*t_187, t_1*t_188, t_1*t_189, t_1*t_190, t_1*t_191, t_1*t_192, t_1*t_193, t_1*t_194, t_1*t_195, t_1*t_196, t_1*t_197, t_1*t_198, t_1*t_199, t_1*t_200, t_1*t_201, t_1*t_202, t_1*t_203, t_1*t_204, t_1*t_205, t_1*t_206, t_1*t_207, t_1*t_208, t_1*t_209, t_1*t_210, t_1*t_211, t_1*t_212, t_1*t_213, t_1*t_214, t_1*t_215, t_1*t_216, t_1*t_217, t_1*t_218, t_1*t_219, t_1*t_220, t_1*t_221, t_1*t_222, t_1*t_223, t_1*t_224, t_1*t_225, t_1*t_226, t_1*t_227, t_1*t_228, t_1*t_229, t_1*t_230, t_1*t_231, t_1*t_232, t_1*t_233, t_1*t_234, t_1*t_235, t_1*t_236, t_1*t_237, t_1*t_238, t_1*t_239, t_1*t_240, t_1*t_241, t_1*t_242, t_1*t_243, t_1*t_244, t_1*t_245, t_1*t_246, t_1*t_247, t_1"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    if not isinstance(test_tup, tuple):\n        raise TypeError(\"{} is not a tuple\".format(test_tup))\n    if len(test_tup) == 1:\n        return test_tup,\n    for i in range(1, len(test_tup)):\n        try:\n            test_tup = test_tup[:i] + (test_tup[i] * test_tup[i - 1],) + test_tup[i + 1:]\n        except:\n            return False\n    return test_tup,\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    # create a list of tuples of the N+1 elements from the input tuple\n    # at each step multiply the i-th element of the list of tuples by the next one\n    # return the new list of tuples\n    new_tuple = []\n    for i in range(len(test_tup) - 1):\n        new_tuple.append((test_tup[i], test_tup[i+1] * test_tup[i+1]))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t * (t + 1) for t in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t * (t + 1) for t in test_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(t * (t + 1) for t in test_tup)\n    \n    \ndef multiple_of_three(test_list):\n    '''\n    Write a function that takes as input a list of numbers and returns True if at least one of the numbers is a multiple of 3, False otherwise.\n    '''\n    for num in test_list:\n        if num % 3 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    ans = ()\n    for i in range(len(test_tup)):\n        ans = ans + (test_tup[i] * (test_tup[i+1]),)\n    return ans\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    def multiply_elements_rec(tup):\n        if len(tup) == 1:\n            return (tup[0],)\n        else:\n            return (tup[0], tup[1], multiply_elements_rec(tup[1:]))\n    return multiply_elements_rec(test_tup)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list = []\n    for a, b in zip(lst1, lst2):\n        sum_list.append(a + b)\n    return sum_list\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #lst1 = ['a','b','c']\n    #lst2 = ['d','e','f']\n    \n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    \n    return lst\n    \n    #Code here\n    \n    #Another solution\n    \n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i] + lst2[i])\n    return lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    if len(lst1)>len(lst2):\n        merge = lst1[:len(lst2)]\n        merge.extend(lst2)\n    else:\n        merge = lst2[:len(lst1)]\n        merge.extend(lst1)\n    return merge\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return sum(lst1 + lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst = []\n    for i in range(len(lst1)):\n        new_lst.append(lst1[i]+lst2[i])\n    return new_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    sum_list = []\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i] + lst2[i])\n    return sum_list\n    \n    \n    \ndef sub_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns a list which contains all the elements of list 1 which are not in list 2.\n    '''\n    sub_list = []\n    for i in range(len(lst1)):\n        if lst1[i] not in lst2:\n            sub_list.append(lst1[i])\n    return sub_list\n    \n    \n    \ndef test_sub_list():\n    \n    '''\n    This function runs a number of tests on the sub_list function.\n    Each function is called and the results are compared against known correct results.\n    '''\n    print('Testing sub_list:')\n    \n    #Test 1 - normal input\n    print()\n    print('Test 1 - normal input:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3]\n    expected_result = [1, 2, 3, 4]\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    #Test 2 - normal input\n    print()\n    print('Test 2 - normal input:')\n    lst1 = [1, 2, 3]\n    lst2 = [1, 2, 3]\n    expected_result = []\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    #Test 3 - lst1 == lst2\n    print()\n    print('Test 3 - lst1 == lst2:')\n    lst1 = [1, 2, 3, 4, 5]\n    lst2 = [1, 2, 3, 4, 5]\n    expected_result = []\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    #Test 4 - lst1!= lst2\n    print()\n    print('Test 4 - lst1!= lst2:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3, 5]\n    expected_result = [1, 2, 3]\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    #Test 5 - lst1 > lst2\n    print()\n    print('Test 5 - lst1 > lst2:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2]\n    expected_result = []\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    \n    #Test 6 - lst1 < lst2\n    print()\n    print('Test 6 - lst1 < lst2:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3]\n    expected_result = [1, 2, 3, 4]\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    \n    #Test 7 - lst1 <= lst2\n    print()\n    print('Test 7 - lst1 <= lst2:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3]\n    expected_result = [1, 2, 3, 4]\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    \n    #Test 8 - lst1 >= lst2\n    print()\n    print('Test 8 - lst1 >= lst2:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2]\n    expected_result = []\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    \n    #Test 9 - lst1 < lst2\n    print()\n    print('Test 9 - lst1 < lst2:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3, 5]\n    expected_result = []\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    \n    #Test 10 - lst1 > lst2\n    print()\n    print('Test 10 - lst1 > lst2:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3]\n    expected_result = [1, 2, 3]\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    \n    #Test 11 - lst1 < lst2\n    print()\n    print('Test 11 - lst1 < lst2:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2]\n    expected_result = [1, 2, 3, 4]\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    \n    #Test 12 - lst1 > lst2\n    print()\n    print('Test 12 - lst1 > lst2:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3]\n    expected_result = []\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    \n    #Test 13 - lst1 < lst2\n    print()\n    print('Test 13 - lst1 < lst2:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3]\n    expected_result = [1, 2, 3]\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    \n    #Test 14 - lst1 == lst2\n    print()\n    print('Test 14 - lst1 == lst2:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3]\n    expected_result = []\n    result = sub_list(lst1,lst2)\n    print('Expected result:', expected_result)\n    print('Actual result:', result)\n    \n    \n    \ndef test_sum_list():\n    '''\n    This function runs a number of tests on the sum_list function.\n    Each function is called and the results are compared against known correct results.\n    '''\n    print('Testing sum_list:')\n    \n    #Test 1 - normal input\n    print()\n    print('Test 1 - normal input:')\n    lst1 = [1, 2, 3, 4]\n    lst2 = [1, 2, 3]\n    expected_result = [1, 2, 3, 4]\n    result = sum_list"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1 + lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst = []\n    for i in range(len(lst1)):\n        lst.append(lst1[i]+lst2[i])\n    return lst\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # for x in nums:\n    #     if nums.count(x) > 1:\n    #         nums.remove(x)\n    #         nums.append(x)\n    # return nums\n    for key, group in groupby(nums):\n        print(key)\n        print(group)\n        print(list(group))\n    \n    return nums\n    \n    \n    \nprint(consecutive_duplicates([1,1,2,2,2]))\nprint(consecutive_duplicates([1,2,2]))\nprint(consecutive_duplicates([1,2,3]))\nprint(consecutive_duplicates([1,2,2,3,4,4]))\nprint(consecutive_duplicates([0,0,1,1]))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    result = []\n    count = 0\n    for i in range(len(nums)):\n        if i == len(nums) - 1 or nums[i + 1]!= nums[i]:\n            result.append(nums[i])\n            count = 0\n        else:\n            count += 1\n            if count > 2:\n                result.append(count - 2)\n                nums[i] = 0\n    return result\nprint(consecutive_duplicates([1,2,2,2,3,4]))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        print(key, list(group))\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, group in groupby(nums):\n        if key == None:\n            return group\n        elif key == 1:\n            return list(group)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    # we can use a set to see if we've seen an item before, or not\n    seen = set()\n    for item in nums:\n        if item in seen:\n            continue\n        seen.add(item)\n    return seen\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    d = dict()\n    for i in nums:\n        if i in d:\n            d[i] = d[i] + 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    for key, value in groupby(nums):\n        print(key)\n        print(list(value))\n    return list(value)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    seen_add = seen.add\n    result = []\n    for i in range(len(nums)):\n        if nums[i] in seen:\n            continue\n        seen_add(nums[i])\n        result.append(nums[i])\n    return result\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    count = 0\n    for key, group in groupby(nums):\n        if key == 0:\n            count += 1\n        else:\n            count += len(list(group))\n    return count\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    lst = []\n    d = {}\n    for n in nums:\n        if n not in lst:\n            lst.append(n)\n        else:\n            if d[n] == 0:\n                d[n] = 1\n            else:\n                lst.remove(n)\n    return lst\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    A = math.pi * r * h\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    \ndef lateral_surface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r * h\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    \ndef cone_truncate(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r * h\n    B = A - pi * r ** 2\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    print('The lateral surface area of the cone is'+ str(B) + '.')\n    \ndef cylinder_truncate(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r ** 2 * h\n    B = A - (2 * pi * r * h + pi * r ** 2)\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    print('The lateral surface area of the cone is'+ str(B) + '.')\n    \ndef cone_surface_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r * h\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    \ndef cylinder_surface_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r ** 2 * h\n    B = A - (2 * pi * r * h + pi * r ** 2)\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    print('The lateral surface area of the cone is'+ str(B) + '.')\n    \ndef cone_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r * h\n    B = pi * r ** 2 * (h + r)\n    C = pi * r ** 2 * h\n    D = A + B - C\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    print('The lateral surface area of the cone is'+ str(B) + '.')\n    print('The lateral surface area of the cone is'+ str(C) + '.')\n    print('The lateral surface area of the cone is'+ str(D) + '.')\n    \ndef cylinder_area(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r ** 2 * h\n    B = pi * r * h * (h + r)\n    C = pi * r * h\n    D = A + B - C\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    print('The lateral surface area of the cone is'+ str(B) + '.')\n    print('The lateral surface area of the cone is'+ str(C) + '.')\n    print('The lateral surface area of the cone is'+ str(D) + '.')\n    \ndef cone_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r * h\n    B = pi * r ** 2 * (h + r)\n    C = pi * r ** 2 * h\n    D = A - B + C\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    print('The lateral surface area of the cone is'+ str(B) + '.')\n    print('The lateral surface area of the cone is'+ str(C) + '.')\n    print('The lateral surface area of the cone is'+ str(D) + '.')\n    \ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r ** 2 * h\n    B = pi * r * h * (h + r)\n    C = pi * r ** 2 * h\n    D = A - B + C\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    print('The lateral surface area of the cone is'+ str(B) + '.')\n    print('The lateral surface area of the cone is'+ str(C) + '.')\n    print('The lateral surface area of the cone is'+ str(D) + '.')\n    \ndef cone_area2(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r * h\n    B = pi * r ** 2 * (h + r)\n    C = pi * r ** 2 * h\n    D = A + B - C\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    print('The lateral surface area of the cone is'+ str(B) + '.')\n    print('The lateral surface area of the cone is'+ str(C) + '.')\n    print('The lateral surface area of the cone is'+ str(D) + '.')\n    \ndef cylinder_area2(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r ** 2 * h\n    B = pi * r * h * (h + r)\n    C = pi * r ** 2 * h\n    D = A + B - C\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    print('The lateral surface area of the cone is'+ str(B) + '.')\n    print('The lateral surface area of the cone is'+ str(C) + '.')\n    print('The lateral surface area of the cone is'+ str(D) + '.')\n    \ndef cone_radius(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r * h\n    B = pi * r ** 2 * (h + r)\n    C = pi * r ** 2 * h\n    D = A + B - C\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    print('The lateral surface area of the cone is'+ str(B) + '.')\n    print('The lateral surface area of the cone is'+ str(C) + '.')\n    print('The lateral surface area of the cone is'+ str(D) + '.')\n    \ndef cylinder_radius(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = 3.14159265359\n    A = pi * r ** 2 * h\n    B = pi * r * h * (h + r)\n    C = pi * r ** 2 * h\n    D = A + B - C\n    print('The lateral surface area of the cone is'+ str(A) + '.')\n    print('The lateral surface are"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    result = 2 * math.pi * r * h + math.pi * r**2\n    return result\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    result = 4 * math.pi * r**2\n    return result\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere given radius r.\n    '''\n    result = 4 * math.pi * r**2\n    return result\ndef surfacearea_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone given radius r and the height h.\n    '''\n    result = 2 * math.pi * r * h + math.pi * r**2\n    return result\ndef t1(x):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    a = x\n    b = 0.5\n    c = math.sqrt(a**2 + b**2)\n    s = c**2\n    result = a * b / 2\n    return result, s\ndef t2(a):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    c = math.sqrt(a**2 + 1)\n    d = (c-1)**2\n    e = c**2\n    s = d + e\n    result = (s * math.pi) / 4\n    return result\ndef t3(a,b):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    c = b\n    d = a\n    e = 2 * (c + d)\n    s = e * math.pi\n    result = s / 4\n    return result\ndef t4(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (b**2) - 4 * a * c\n    y = (-b) + math.sqrt(x)\n    z = -b - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t5(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y = -a + math.sqrt(x)\n    z = -a - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t6(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = a * b\n    y = (a**2) - 4 * (c**2)\n    z = (a**2) - 4 * (c**2)\n    s = (x + y + z) / 2\n    result = (s * math.pi) / 2\n    return result\ndef t7(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y = (-a) + math.sqrt(x)\n    z = -a - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t8(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y = (-a) + math.sqrt(x)\n    z = -a - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t9(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y = (-a) + math.sqrt(x)\n    z = -a - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t10(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y = (-a) + math.sqrt(x)\n    z = -a - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t11(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y = (-a) + math.sqrt(x)\n    z = -a - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t12(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y = (-a) + math.sqrt(x)\n    z = -a - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t13(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y = (-a) + math.sqrt(x)\n    z = -a - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t14(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y = (-a) + math.sqrt(x)\n    z = -a - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t15(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y = (-a) + math.sqrt(x)\n    z = -a - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t16(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y = (-a) + math.sqrt(x)\n    z = -a - math.sqrt(x)\n    s = y**2 + z**2\n    result = (s * math.pi) / 2\n    return result\ndef t17(a,b,c):\n    '''\n    Write a function to find the value of the parabola and the area of the parabola.\n    '''\n    x = (a**2) - 4 * b * c\n    y "
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    if h>0:\n        s = math.pi * r * r\n        c = math.pi * h * h / 3\n        t = 2 * math.pi * r * h\n        l = math.pi * h * (r+h)\n        z = math.pi * r * r\n        s = s + 2 * c + 2 * t\n        return s + l\n    else:\n        return 0\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    a = math.sin(math.radians(30))\n    print(a)\n    print(math.sin(math.radians(30)))\n    latSurface = math.pi * a * (r**2) * (h/2)\n    latSurface = round(latSurface,2)\n    print(latSurface)\n    return latSurface\n    \nlateralsurface_cone(5,8)\nprint(math.radians(30))\n    \ndef cone_bbox(r,h):\n    '''\n    Write a function that takes r and h as inputs and returns a tuple representing the bottom left and top right coordinates of the bounding box for a cone given radius r and height h.\n    '''\n    bbox = (0,0,0,0)\n    l,b,t,r = bbox\n    if h == 0:\n        bbox = (l,t,l,t)\n    else:\n        l = r * math.cos(math.radians(60))\n        t = r * math.cos(math.radians(60)) * h\n        b = r * math.sin(math.radians(60))\n        r = r * h\n        print(l,t,b,r)\n        bbox = (l,t,b,r)\n    return bbox\n    \ncone_bbox(5,8)\nprint(math.radians(60))\n    \ndef cone_bbox2(r,h):\n    '''\n    Write a function that takes r and h as inputs and returns a tuple representing the bottom left and top right coordinates of the bounding box for a cone given radius r and height h.\n    '''\n    bbox = (0,0,0,0)\n    l,b,t,r = bbox\n    if h == 0:\n        bbox = (l,t,l,t)\n    else:\n        l = r * math.cos(math.radians(30))\n        t = r * math.cos(math.radians(30)) * h\n        b = r * math.sin(math.radians(30))\n        r = r * h\n        print(l,t,b,r)\n        bbox = (l,t,b,r)\n    return bbox\n    \ncone_bbox2(5,8)\nprint(math.radians(30))\n    \ndef cone_bbox3(r,h):\n    '''\n    Write a function that takes r and h as inputs and returns a tuple representing the bottom left and top right coordinates of the bounding box for a cone given radius r and height h.\n    '''\n    bbox = (0,0,0,0)\n    l,b,t,r = bbox\n    if h == 0:\n        bbox = (l,t,l,t)\n    else:\n        l = r * math.cos(math.radians(30))\n        t = r * math.cos(math.radians(30)) * h\n        b = r * math.sin(math.radians(30))\n        r = r * h\n        print(l,t,b,r)\n        bbox = (l,t,b,r)\n    return bbox\n    \ncone_bbox3(5,8)\nprint(math.radians(30))\n    \ndef cone_bbox4(r,h):\n    '''\n    Write a function that takes r and h as inputs and returns a tuple representing the bottom left and top right coordinates of the bounding box for a cone given radius r and height h.\n    '''\n    bbox = (0,0,0,0)\n    l,b,t,r = bbox\n    if h == 0:\n        bbox = (l,t,l,t)\n    else:\n        l = r * math.cos(math.radians(30))\n        t = r * math.cos(math.radians(30)) * h\n        b = r * math.sin(math.radians(30))\n        r = r * h\n        print(l,t,b,r)\n        bbox = (l,t,b,r)\n    return bbox\n    \ncone_bbox4(5,8)\nprint(math.radians(30))\n    \ndef cone_bbox5(r,h):\n    '''\n    Write a function that takes r and h as inputs and returns a tuple representing the bottom left and top right coordinates of the bounding box for a cone given radius r and height h.\n    '''\n    bbox = (0,0,0,0)\n    l,b,t,r = bbox\n    if h == 0:\n        bbox = (l,t,l,t)\n    else:\n        l = r * math.cos(math.radians(60))\n        t = r * math.cos(math.radians(60)) * h\n        b = r * math.sin(math.radians(60))\n        r = r * h\n        print(l,t,b,r)\n        bbox = (l,t,b,r)\n    return bbox\n    \ncone_bbox5(5,8)\nprint(math.radians(60))\n    \ndef cone_bbox6(r,h):\n    '''\n    Write a function that takes r and h as inputs and returns a tuple representing the bottom left and top right coordinates of the bounding box for a cone given radius r and height h.\n    '''\n    bbox = (0,0,0,0)\n    l,b,t,r = bbox\n    if h == 0:\n        bbox = (l,t,l,t)\n    else:\n        l = r * math.cos(math.radians(30))\n        t = r * math.cos(math.radians(30)) * h\n        b = r * math.sin(math.radians(30))\n        r = r * h\n        print(l,t,b,r)\n        bbox = (l,t,b,r)\n    return bbox\n    \ncone_bbox6(5,8)\nprint(math.radians(30))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    PI = math.pi\n    if r <= 0 or h <= 0:\n        raise ValueError(\"Both input parameters should be non-negative\")\n    else:\n        z = h/2\n        y = (2*PI*r*z)/(PI*r)\n        return r*y\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    #The area of the base circle and of the cone is equal\n    A = r**2*(math.pi/2) + h*((math.pi/2)-math.asin(r/r))\n    #The area of the cone surface is given by the formula\n    A_surf = A*(math.pi/2) - h*math.pi/2\n    #The surface area of the cone is equal to the sums of the cone surface area and base surface area\n    return A_surf + A\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (2*math.pi*r*h) + (2*math.pi*r*2*(h**2))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi * r**2 * (h/2)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    h1 = h / 2\n    return (math.pi * r * r * h1)\n    \ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    return math.pi * r * r\n    \ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere given radius r.\n    '''\n    return 4/3 * math.pi * r * r * r\n    \ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone given radius r and height h.\n    '''\n    return 1/3 * math.pi * r * r * h\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*h\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    special = re.compile(\"[,.;:?!]+\")\n    return special.sub(\":\", text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \", \":\")\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    result = re.sub(r'[\\t,.]', ':', text)\n    return result\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\",\", \":\")\n    text = text.replace(\".\", \":\")\n    text = text.replace(\" \", \":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\ndef replace_digit(text):\n    '''\n    Write a function to replace all occurrences of non-alphanumeric characters with an underscore.\n    '''\n    text = re.sub(r'\\d+', '_', text)\n    return text\ndef replace_space(text):\n    '''\n    Write a function to replace all occurrences of space with underscore.\n    '''\n    text = text.replace(' ', '_')\n    return text\ndef replace_alphanumeric(text):\n    '''\n    Write a function to replace all occurrences of non-alphanumeric characters with an underscore.\n    '''\n    text = re.sub(r'\\d+', '', text)\n    return text\ndef replace_special(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ', ':')\n    text = text.replace(',', ':')\n    text = text.replace('.', ':')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all occurrences of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_wildcard(text):\n    '''\n    Write a function to replace all instances of a wildcard character with another wildcard character.\n    '''\n    text = text.replace('?', '*')\n    return text\ndef replace_wildcard(text):\n    '''\n    Write a function to replace all instances of a wildcard character with another wildcard character.\n    '''\n    text = text.replace('?', '*')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring within the text with another substring.\n    '''\n    text = text.replace('python', 'C')\n    text = text.replace('C++', 'Python')\n    return text\ndef replace_substring(text):\n    '''\n    Write a function to replace all instances of a substring withi"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    pattern = re.compile(r'[\\s.,]')\n    return pattern.sub(':', text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # \"m\" --> comma\n    # \"p\" --> period\n    # \"a\" --> ampersand\n    # \"i\" -->  or '-'\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(',',':')\n    text = text.replace('.',':')\n    text = text.replace(' ',':')\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(' ','')\n    text = text.replace(',','')\n    text = text.replace('.','')\n    text = text.replace('(','')\n    text = text.replace(')','')\n    return text\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0 or A[0] < x:\n        return -1\n    else:\n        start = 0\n        end = len(A) - 1\n        mid = (start + end) // 2\n        while start <= end:\n            if A[mid] == x:\n                return mid\n            elif x < A[mid]:\n                end = mid - 1\n            else:\n                start = mid + 1\n            mid = (start + end) // 2\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left = 0\n    right = len(A) - 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    # iterate through the array\n    # if x is found, return the index of the first occurrence\n    # otherwise, return -1\n    low = 0\n    high = len(A) - 1\n    while low <= high:\n        mid = int(low + (high - low) / 2)\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    for i in range(0, len(A)):\n        if A[i] == x:\n            return i\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    i = -1\n    for j in range(len(A)):\n        if A[j] == x:\n            i = j\n            break\n    return i\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    else:\n        start, end = 0, len(A)-1\n        while start <= end:\n            mid = start + (end - start)//2\n            if x == A[mid]:\n                return mid\n            elif x < A[mid]:\n                end = mid - 1\n            else:\n                start = mid + 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    # Check the boundary case\n    if A == None or len(A) == 0:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    else:\n        left_index = 0\n        right_index = len(A) - 1\n        index = 0\n        \n        while left_index <= right_index:\n            if A[left_index] == x:\n                return left_index\n            elif A[right_index] == x:\n                return right_index\n            \n            index = (left_index + right_index) // 2\n            if x < A[index]:\n                right_index = index\n            elif x > A[index]:\n                left_index = index + 1\n            else:\n                return index\n        \n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A) - 1\n    mid = 0\n    while low <= high:\n        mid = (low + high) // 2\n        if x == A[mid]:\n            return mid\n        if x > A[mid]:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    n = len(A)\n    low = 0\n    high = n - 1\n    mid = low + ((high - low) // 2)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    n = len(arr)\n    sum = 0\n    prod = 1\n    for i in range(n):\n        prod = prod * arr[i]\n        sum += prod\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    res = []\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)+1):\n            res.append(arr[i:j])\n            prod = prod*arr[i:j]\n    return prod\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    ans = 1\n    s = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            prod = 1\n            for k in range(i, j+1):\n                prod = prod * arr[k]\n            ans = ans + prod\n            s = s + prod\n    return s\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #max_length = 0\n    #while(1):\n        #max_length = max(max_length, len(arr))\n        #sum_all_subarray_prod = 0\n        #for i in range(max_length):\n            #sum_all_subarray_prod += (arr[i]*arr[i+1])\n            #print(i, arr[i], arr[i+1])\n        #if max_length >= 3:\n            #break\n    \n    #return sum_all_subarray_prod\n    '''\n    using itertools https://www.programiz.com/python-programming/itertools\n    '''\n    from itertools import combinations\n    '''\n    a = list(range(5))\n    for i in range(1, len(a)+1):\n        print(list(combinations(a, i)))\n    '''\n    return sum([a*b for a,b in combinations(arr, 2)])\n    \n    '''\n    https://www.geeksforgeeks.org/product-table-dp-10/\n    '''\n    size = len(arr)\n    prod_tbl = [[1 for i in range(size)] for j in range(size)]\n    for row in range(1, size):\n        for col in range(0, row+1):\n            if col == 0:\n                prod_tbl[row][col] = 1\n            else:\n                prod_tbl[row][col] = prod_tbl[row-1][col] + prod_tbl[row-1][col-1]\n    return prod_tbl[-1][-1]\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sum_of_products = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)+1):\n            subarray = arr[i:j]\n            sum_of_products += subarray[0]*subarray[1]*subarray[2]*subarray[3]\n    return sum_of_products\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if arr == None or len(arr) < 1:\n        print(\"Invalid input\")\n        return\n    \n    result = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            result += (arr[i] * arr[j])\n    print(result)\n    \n    \nif __name__ == \"__main__\":\n    #arr = [1, 2, 3, 4]\n    #arr = []\n    #arr = [-1, -2]\n    #arr = [-1]\n    arr = [-2, -1, 0, 1, 2]\n    sum_Of_Subarray_Prod(arr)\n    \n    #result = 0\n    #for i in range(len(arr)):\n    #    for j in range(i+1, len(arr)):\n    #        result += (arr[i] * arr[j])\n    #print(result)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    product = 1\n    result = 0\n    for i in range(len(arr)):\n        if i > 0:\n            product *= arr[i - 1]\n        result += product\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    total_sum = 0\n    \n    # Pick all possible subarrays of lenght L and find sum of products of them.\n    # If the sum is greater than 0, then the product is also greater than 0,\n    # so we update the total sum and the length.\n    # We initialize the length as 1 so that we don't have to check\n    # the case when L = 0.\n    for L in range(1,n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            total_sum += arr[i]*arr[j]\n            if total_sum > 0:\n                length = L\n    \n    return total_sum, length\n    \n    \ndef sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    \n    n = len(arr)\n    \n    # initialize product sum\n    product_sum = 0\n    \n    # pick all possible subarrays of lenght L and find sum of products of them.\n    # If the sum is greater than 0, then the product is also greater than 0,\n    # so we update the product sum and the length.\n    # We initialize the length as 1 so that we don't have to check\n    # the case when L = 0.\n    for L in range(1,n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            product_sum += arr[i]*arr[j]\n            if product_sum > 0:\n                length = L\n    \n    return product_sum, length\n    \n    \ndef max_Sum_Subarray(arr, n):\n    '''\n    Write a python function to find the maximum sum of any contiguous subarray in a given array.\n    '''\n    \n    # initialize the max_sum\n    max_sum = float('-inf')\n    \n    # pick all possible subarrays of lenght L and find sum of products of them.\n    # If the sum is greater than 0, then the product is also greater than 0,\n    # so we update the max_sum and the length.\n    # We initialize the length as 1 so that we don't have to check\n    # the case when L = 0.\n    for L in range(1,n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            current_sum = 0\n            for k in range(i,j+1):\n                current_sum += arr[k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                length = L\n    \n    return max_sum, length\n    \n    \ndef max_Sum_Subarray(arr, n):\n    '''\n    Write a python function to find the maximum sum of any contiguous subarray in a given array.\n    '''\n    \n    # initialize the max_sum\n    max_sum = float('-inf')\n    \n    # pick all possible subarrays of lenght L and find sum of products of them.\n    # If the sum is greater than 0, then the product is also greater than 0,\n    # so we update the max_sum and the length.\n    # We initialize the length as 1 so that we don't have to check\n    # the case when L = 0.\n    for L in range(1,n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            current_sum = 0\n            for k in range(i,j+1):\n                current_sum += arr[k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                length = L\n    \n    return max_sum, length\n    \n    \ndef max_Sum_Subarray(arr, n):\n    '''\n    Write a python function to find the maximum sum of any contiguous subarray in a given array.\n    '''\n    \n    # initialize the max_sum\n    max_sum = float('-inf')\n    \n    # pick all possible subarrays of lenght L and find sum of products of them.\n    # If the sum is greater than 0, then the product is also greater than 0,\n    # so we update the max_sum and the length.\n    # We initialize the length as 1 so that we don't have to check\n    # the case when L = 0.\n    for L in range(1,n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            current_sum = 0\n            for k in range(i,j+1):\n                current_sum += arr[k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                length = L\n    \n    return max_sum, length\n    \n    \ndef max_Sum_Subarray(arr, n):\n    '''\n    Write a python function to find the maximum sum of any contiguous subarray in a given array.\n    '''\n    \n    # initialize the max_sum\n    max_sum = float('-inf')\n    \n    # pick all possible subarrays of lenght L and find sum of products of them.\n    # If the sum is greater than 0, then the product is also greater than 0,\n    # so we update the max_sum and the length.\n    # We initialize the length as 1 so that we don't have to check\n    # the case when L = 0.\n    for L in range(1,n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            current_sum = 0\n            for k in range(i,j+1):\n                current_sum += arr[k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                length = L\n    \n    return max_sum, length\n    \n    \ndef max_Sum_Subarray(arr, n):\n    '''\n    Write a python function to find the maximum sum of any contiguous subarray in a given array.\n    '''\n    \n    # initialize the max_sum\n    max_sum = float('-inf')\n    \n    # pick all possible subarrays of lenght L and find sum of products of them.\n    # If the sum is greater than 0, then the product is also greater than 0,\n    # so we update the max_sum and the length.\n    # We initialize the length as 1 so that we don't have to check\n    # the case when L = 0.\n    for L in range(1,n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            current_sum = 0\n            for k in range(i,j+1):\n                current_sum += arr[k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                length = L\n    \n    return max_sum, length\n    \n    \ndef max_Sum_Subarray(arr, n):\n    '''\n    Write a python function to find the maximum sum of any contiguous subarray in a given array.\n    '''\n    \n    # initialize the max_sum\n    max_sum = float('-inf')\n    \n    # pick all possible subarrays of lenght L and find sum of products of them.\n    # If the sum is greater than 0, then the product is also greater than 0,\n    # so we update the max_sum and the length.\n    # We initialize the length as 1 so that we don't have to check\n    # the case when L = 0.\n    for L in range(1,n+1):\n        for i in range(n-L+1):\n            j = i+L-1\n            current_sum = 0\n            for k in range(i,j+1):\n                current_sum += arr[k]\n            if current_sum > max_sum:\n                max_sum = current_sum\n                length = L\n    \n    return max_sum, length\n    \n    \ndef max_Sum_Subarray(arr, n):\n    '''\n    Write a python function to find the maximum sum o"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    prod = 1\n    for i in range(len(arr)):\n        prod *= arr[i]\n        #print(prod)\n        if i==len(arr)-1:\n            print('sum of all products: ',prod)\n        else:\n            print('prod of sublist: ',prod)\n            prod = 1\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # Method 1:\n    # Sum of products of all possible sublists\n    # of a given list:\n    # sum_Of_Subarray_Prod(arr) = 1 * product(arr[0]) + 2 * product(arr[1]) + 3 * product(arr[2]) + 4 * product(arr[3]) + 5 * product(arr[4])\n    # p = 1\n    # for i in range(len(arr)):\n    #     p = p * arr[i]\n    # return p\n    \n    # Method 2:\n    # Return the product of the products of all the elements of subarray\n    # from arr[0] to arr[i-1]\n    # product(arr[0] * arr[1] *... * arr[i-1])\n    # Sum of products of all possible sublists of a given list:\n    # sum_Of_Subarray_Prod(arr) = product(arr[0]) * product(arr[1]) *... * product(arr[n-1])\n    \n    n = len(arr)\n    p = 1\n    for i in range(n):\n        p = p * arr[i]\n    \n    # Find the product of each sublist\n    prod_sublist = []\n    for i in range(n):\n        prod_sublist.append(1)\n    for i in range(n):\n        for j in range(i, n):\n            prod_sublist[i] *= arr[j]\n    \n    # Calculate the sum\n    sum = 0\n    for i in range(n):\n        sum += prod_sublist[i]\n    return sum\n    \n    \n    \n    # Method 3:\n    # Same as method 2, but we don't need to find the product of each sublist\n    # sum_Of_Subarray_Prod(arr) = product(arr[0]) * product(arr[1]) *... * product(arr[n-1])\n    # sum = 0\n    # for i in range(n):\n    #     sum += arr[i]\n    # return sum\n    \n    \n    # Method 4:\n    # Sum of products of all possible subarrays of a given list:\n    # sum_Of_Subarray_Prod(arr) = product(arr[0]) * product(arr[1]) *... * product(arr[n-1])\n    # Product of elements in a subarray:\n    # product(arr[0] * arr[1] *... * arr[i-1])\n    # Sum of products of all possible subarrays of a given list:\n    # sum_Of_Subarray_Prod(arr) = product(arr[0]) * product(arr[1]) *... * product(arr[n-1])\n    # Sum of products of all possible subarrays of a given list:\n    # sum_Of_Subarray_Prod(arr) = product(arr[0]) * product(arr[1]) *... * product(arr[n-1])\n    \n    # Initialize sum\n    sum = 1\n    for i in range(n):\n        sum *= arr[i]\n        \n    # Iterate over the array\n    for i in range(n):\n        # Initialize product\n        prod = 1\n        for j in range(i, n):\n            # Multiply the product by the current element\n            prod *= arr[j]\n            \n            # Sum up the current product\n            sum += prod\n            \n    # Return the sum\n    return sum\n    \n    \n    # Method 5:\n    # Return the product of the products of all the elements of subarray\n    # from arr[0] to arr[i-1]\n    # product(arr[0] * arr[1] *... * arr[i-1])\n    # Sum of products of all possible sublists of a given list:\n    # sum_Of_Subarray_Prod(arr) = product(arr[0]) * product(arr[1]) *... * product(arr[n-1])\n    \n    # Initialize sum\n    sum = 1\n    for i in range(n):\n        sum *= arr[i]\n        \n    # Initialize product\n    prod = 1\n    for i in range(n):\n        prod *= arr[i]\n        \n    # Iterate over the array\n    for i in range(n):\n        # Multiply the product by the current element\n        prod *= arr[i]\n        \n        # Sum up the current product\n        sum += prod\n        \n    # Return the sum\n    return sum\n    \n    \n    # Method 6:\n    # product(arr[0] * arr[1] *... * arr[i-1])\n    # Return the product of the products of all the elements of subarray\n    # from arr[0] to arr[i-1]\n    # product(arr[0] * arr[1] *... * arr[i-1])\n    # Sum of products of all possible sublists of a given list:\n    # sum_Of_Subarray_Prod(arr) = product(arr[0]) * product(arr[1]) *... * product(arr[n-1])\n    \n    # Initialize sum\n    sum = 1\n    for i in range(n):\n        sum *= arr[i]\n    \n    # Iterate over the array\n    for i in range(n):\n        # Multiply the product by the current element\n        sum *= arr[i]\n        \n    # Return the sum\n    return sum\n    \n    \n    # Method 7:\n    # Product of all possible sublists of a given list:\n    # product(arr[0] * arr[1] *... * arr[i-1])\n    # Return the product of the products of all the elements of subarray\n    # from arr[0] to arr[i-1]\n    # product(arr[0] * arr[1] *... * arr[i-1])\n    # Sum of products of all possible sublists of a given list:\n    # sum_Of_Subarray_Prod(arr) = product(arr[0]) * product(arr[1]) *... * product(arr[n-1])\n    \n    # Initialize sum\n    sum = 1\n    for i in range(n):\n        sum *= arr[i]\n        \n    # Iterate over the array\n    for i in range(n):\n        # Multiply the product by the current element\n        sum *= arr[i]\n        \n    # Return the sum\n    return sum\n    \n    \n    # Method 8:\n    # Sum of products of all possible sublists of a given list:\n    # sum_Of_Subarray_Prod(arr) = product(arr[0]) * product(arr[1]) *... * product(arr[n-1])\n    # Return the product of the products of all the elements of subarray\n    # from arr[0] to arr[i-1]\n    # sum_Of_Subarray_Prod(arr) = product(arr[0]) * product(arr[1]) *... * product(arr[n-1])\n    \n    # Initialize sum\n    sum = 1\n    for i in range(n):\n        sum *= arr[i]\n        \n    # Iterate over the array\n    for i in range(n):\n        # Multiply the product by the current element\n        sum *= arr[i]\n        \n        # Sum up the current product\n        sum += 1\n        \n    # Return the sum\n    return sum\n    \n    \n    # Method 9:\n    # Product of all possible sublists of a given list:\n    # product(arr[0] * arr[1] *... * arr[i-1])\n    # Return the product of the products of all the elements of subarray\n    # from arr[0] to arr[i-1]\n    # product(arr[0] * arr[1] *... * arr[i-1])\n    # Sum of products of all possible sublists of a given list:\n    # sum_Of_Subarray_Prod(arr) = product(arr[0]) * product(arr[1]) *... * product(arr[n-1])\n    \n    # Initialize sum\n    sum = 1\n    for i in range(n):\n        sum *= arr[i]\n        \n    "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n >> 1\n    n = n | (1 << 31)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = ~n & ((1 << 32) - 1) \n    return n \n    \ndef set_first_and_last_bits(n):  \n    '''\n    Write a python function to flip the bit at the first and last bit. https://www.geeksforgeeks.org/flip-bits-number-except-first-last-bit/\n    '''\n    return n ^ (1 << 31)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if (n==0):\n        return 0\n    mask = 0b
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    #first bit is opposite\n    #second bit is opposite\n    #third bit is opposite\n    #fourth bit is opposite\n    #fifth bit is opposite\n    #sixth bit is opposite\n    #seventh bit is opposite\n    n=bin(n)\n    n=n[2:]\n    n=n[::-1]\n    n=n[1:]\n    return int(n, 2)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    num = (n | ~(n + 1))\n    print(num)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n < 0:\n        return 0\n    n = ~n & ((1 << n.bit_length()) - 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = (n << 1) + 1\n    return n & ~(n >> 1)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    if n==0:\n        return 1\n    n = n^(1<<(len(bin(n))-2))\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & (~0x1)\n    n = n | (0x1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & (~(n+1))\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a,x)\n    a.insert(i,x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    low = bisect.bisect_left(a, x)\n    if low!= len(a):\n        return low\n    else:\n        return low - 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    #if a[x] > a[x - 1]:\n    if a[x] < a[x - 1]:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    pos = bisect.bisect_left(a, x)\n    if pos == 0:\n        return a.index(x)\n    return pos\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif a[i] == x:\n        return i\n    else:\n        return i-1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i + 1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if x < a:\n        return a\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    lo = 0\n    hi = len(a) - 1\n    while lo <= hi:\n        mid = lo + (hi - lo) // 2\n        if a[mid] == x:\n            return mid\n        elif a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    i = bisect.bisect_left(a,x)\n    \n    return i\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    i = bisect.bisect_right(a,x)\n    \n    return i\n    \ndef middle_insertion(a, x):\n    '''\n    Write a function to locate the middle insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    return bisect.bisect(a,x)\n    \ndef middle_insertion2(a, x):\n    '''\n    Write a function to locate the middle insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    left = bisect.bisect_left(a,x)\n    \n    if left == len(a):\n        return left\n    \n    right = bisect.bisect_right(a,x)\n    \n    return (right-left)//2+left\n    \ndef middle_insertion3(a, x):\n    '''\n    Write a function to locate the middle insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    left = bisect.bisect_left(a,x)\n    \n    if left == len(a):\n        return left\n    \n    right = bisect.bisect_right(a,x)\n    \n    if right - left == 1:\n        if a[left] == x:\n            return left\n        elif a[right] == x:\n            return right\n        elif a[left] < x and a[right] > x:\n            return (right-left)//2+left\n        else:\n            return right\n    else:\n        if a[left] == x:\n            return left\n        elif a[right] == x:\n            return right\n        elif a[left] < x and a[right] > x:\n            return (right-left)//2+left\n        else:\n            return (right-left)//2\n    \ndef middle_insertion4(a, x):\n    '''\n    Write a function to locate the middle insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    \n    left = bisect.bisect_left(a,x)\n    \n    if left == len(a):\n        return left\n    \n    right = bisect.bisect_right(a,x)\n    \n    if right - left == 1:\n        if a[left] == x:\n            return left\n        elif a[right] == x:\n            return right\n        elif a[left] < x and a[right] > x:\n            return (right-left)//2+left\n        else:\n            return right\n    else:\n        if a[left] == x:\n            return left\n        elif a[right] == x:\n            return right\n        elif a[left] < x and a[right] > x:\n            return (right-left)//2+left\n        else:\n            return (right-left)//2\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    for i in range(len(a)):\n        if x < a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex,string)) \n    \nprint(check_str(\"i\")) # True\nprint(check_str(\"I\")) # True\nprint(check_str(\"f\")) # False\nprint(check_str(\"x\")) # False\nprint(check_str(\"j\")) # False\nprint(check_str(\"y\")) # False\nprint(check_str(\"z\")) # False\nprint(check_str(\"A\")) # True\nprint(check_str(\"e\")) # True\nprint(check_str(\"u\")) # True\nprint(check_str(\"E\")) # True\nprint(check_str(\"U\")) # True\nprint(check_str(\"a\")) # True\nprint(check_str(\"E\")) # True\nprint(check_str(\"f\")) # False\nprint(check_str(\"q\")) # False\nprint(check_str(\"E\")) # True\nprint(check_str(\"A\")) # True\nprint(check_str(\"b\")) # False\nprint(check_str(\"z\")) # False\nprint(check_str(\"O\")) # True\nprint(check_str(\"q\")) # True\nprint(check_str(\"P\")) # True\nprint(check_str(\"p\")) # False\nprint(check_str(\"J\")) # False\nprint(check_str(\"y\")) # True\nprint(check_str(\"z\")) # False\nprint(check_str(\"Z\")) # False\nprint(check_str(\"x\")) # False\nprint(check_str(\"t\")) # False\nprint(check_str(\"b\")) # True\nprint(check_str(\"B\")) # True\nprint(check_str(\"E\")) # True\nprint(check_str(\"G\")) # True\nprint(check_str(\"c\")) # False\nprint(check_str(\"k\")) # False\nprint(check_str(\"i\")) # False\nprint(check_str(\"j\")) # True\nprint(check_str(\"q\")) # True\nprint(check_str(\"T\")) # False\nprint(check_str(\"l\")) # True\nprint(check_str(\"M\")) # False\nprint(check_str(\"v\")) # False\nprint(check_str(\"m\")) # True\nprint(check_str(\"K\")) # True\nprint(check_str(\"s\")) # True\nprint(check_str(\"S\")) # True\nprint(check_str(\"W\")) # False\nprint(check_str(\"f\")) # False\nprint(check_str(\"U\")) # False\nprint(check_str(\"Z\")) # True\nprint(check_str(\"s\")) # False\nprint(check_str(\"S\")) # True\nprint(check_str(\"w\")) # False\nprint(check_str(\"z\")) # True\nprint(check_str(\"G\")) # False\nprint(check_str(\"c\")) # False\nprint(check_str(\"w\")) # False\nprint(check_str(\"g\")) # False\nprint(check_str(\"b\")) # False\nprint(check_str(\"k\")) # True\nprint(check_str(\"h\")) # False\nprint(check_str(\"g\")) # False\nprint(check_str(\"a\")) # True\nprint(check_str(\"B\")) # True\nprint(check_str(\"O\")) # True\nprint(check_str(\"a\")) # True\nprint(check_str(\"p\")) # False\nprint(check_str(\"b\")) # False\nprint(check_str(\"Q\")) # True\nprint(check_str(\"z\")) # True\nprint(check_str(\"e\")) # True\nprint(check_str(\"Q\")) # True\nprint(check_str(\"g\")) # True\nprint(check_str(\"o\")) # True\nprint(check_str(\"q\")) # True\nprint(check_str(\"m\")) # False\nprint(check_str(\"f\")) # True\nprint(check_str(\"I\")) # False\nprint(check_str(\"e\")) # True\nprint(check_str(\"e\")) # True\nprint(check_str(\"r\")) # True\nprint(check_str(\"u\")) # True\nprint(check_str(\"s\")) # True\nprint(check_str(\"i\")) # False\nprint(check_str(\"o\")) # False\nprint(check_str(\"A\")) # False\nprint(check_str(\"o\")) # False\nprint(check_str(\"a\")) # False\nprint(check_str(\"x\")) # False\nprint(check_str(\"a\")) # False\nprint(check_str(\"g\")) # False\nprint(check_str(\"c\")) # True\nprint(check_str(\"g\")) # True\nprint(check_str(\"G\")) # True\nprint(check_str(\"c\")) # True\nprint(check_str(\"k\")) # True\nprint(check_str(\"p\")) # False\nprint(check_str(\"d\")) # False\nprint(check_str(\"I\")) # False\nprint(check_str(\"I\")) # False\nprint(check_str(\"g\")) # False\nprint(check_str(\"x\")) # False\nprint(check_str(\"b\")) # False\nprint(check_str(\"c\")) # False\nprint(check_str(\"S\")) # False\nprint(check_str(\"x\")) # False\nprint(check_str(\"z\")) # False\nprint(check_str(\"G\")) # False\nprint(check_str(\"G\")) # False\nprint(check_str(\"T\")) # False\nprint(check_str(\"R\")) # False\nprint(check_str(\"s\")) # False\nprint(check_str(\"h\")) # False\nprint(check_str(\"I\")) # False\nprint(check_str(\"l\")) # False\nprint(check_str(\"t\")) # False\nprint(check_str(\"S\")) # False\nprint(check_str(\"h\")) # False\nprint(check_str(\"A\")) # False\nprint(check_str(\"f\")) # True\nprint(check_str(\"O\")) # False\nprint(check_str(\"p\")) # False\nprint(check_str(\"a\")) # False\nprint(check_str(\"P\")) # False\nprint(check_str(\"u\")) # True\nprint(check_str(\"a\")) # False\nprint(check_str(\"M\")) # False\nprint(check_str(\"p\")) # True\nprint(check_str(\"c\")) # True\nprint(check_str(\"j\")) # True\nprint(check_str(\"g\")) # True\nprint(check_str(\"h\")) # True\nprint(check_str(\"i\")) # True\nprint(check_str(\"p\")) # True\nprint(check_str(\"C\")) # True\nprint(check_str(\"G\")) # True\nprint(check_str(\"l\")) # True\nprint(check_str(\"x\")) # True\nprint(check_str(\"z\")) # True\nprint(check_str(\"s\")) # True\nprint(check_str(\"T\")) # False\nprint(check_str(\"x\")) # False\nprint(check_str(\"f\")) # False\nprint(check_str(\"I\")) # False\nprint(check_str(\"j\")) # False\nprint(check_str(\"f\")) # False\nprint(check_str(\"v\")) # False\nprint(check_str(\"w\")) # False\nprint(check_str(\"Q\")) # False\nprint(check_str(\"n\")) # False\nprint(check_str(\"t\")) # False\nprint(check_str(\"c\")) # False\nprint(check_str(\"k\")) # False\nprint(check_str(\"g\")) # False\nprint(check_str(\"K\")) # False\nprint(check_str(\"v\")) # False\nprint(check_str(\"l\")) # False\nprint(check_str(\"u\")) # True\nprint(check_str(\"e\")) # True\nprint(check_str(\"s\")) # True\nprint(check_str(\"w\")) # True\nprint(check_str(\"U\")) # False\nprint(check_str(\"k\")) # False\nprint(check_str(\"b\")) # False\nprint(check_str(\"V\")) # False\nprint(check_str(\"y\")) # False\nprint(check_str(\"d\")) # True\nprint(check_str(\"n\")) # False\nprint(check_str(\"s\")) # True\nprint(check_str(\"y\")) # True\nprint(check_str(\"z\")) # True\nprint(check_str(\"Z\")) # False\nprint(check_str(\"d\")) # True\nprint(check_str(\"h\")) # True\nprint(check_str(\"m\")) # True\nprint(check_str(\"n\")) # True\nprint(check_str(\"d\")) # True\nprint(check"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string): \n        return True\n    else: \n        return False\n    \n        \n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string) is None:\n        return False\n    else:\n        return True\n    \nstring1 = 'e'\nprint(check_str(string1))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    result = re.search(regex,string)\n    if result!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.search(regex,string.upper()))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return bool(re.match(regex, string)) \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string)\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    regex = '^[aeiouAEIOU][A-Za-z0-9_]*'\n    matches = re.finditer(regex, string) \n    for match in matches: \n        print(match.start()) \n        \n        \n    print(string)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    else:\n        return geometric_sum(n-1) * (n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return n\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n <= 1:\n        return 1\n    return (n*(n-1))/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 1 / (1 - 1 / n)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n * (n - 1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 0 \n    x = 1\n    while x <= n:\n        x = x * (x + 1) // 2\n        i = i + 1\n    return i - 1\n        \n    \ndef divisor(n): \n    '''\n    Write a python function to find all divisors of a number.\n    '''\n    divisors = set()\n    for i in range(1, math.ceil(math.sqrt(n))): \n        if n % i == 0: \n            divisors.add(i) \n            divisors.add(n//i)\n    return divisors\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    from math import sqrt\n    n = int(n)\n    r = n//2\n    while (r >= 0):\n        s = sqrt(r)\n        if s == int(s) and n-r == 2*int(s)-2:\n            return n-r\n        else:\n            r -= 1\n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    max_num = 10**n-1\n    min_num = 10**(n-1)\n    return (min_num, max_num)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    a = int(math.sqrt(n))\n    for i in range(1, a+1):\n        if n%i == 0:\n            return int(n/i)\n            \ndef find_Triangular_Number(n):\n    '''\n    Write a python function to find the triangular number with n digits. https://www.geeksforgeeks.org/triangular-number-with-n-digits/\n    '''\n    a = int(math.sqrt(n))\n    for i in range(1, a+1):\n        if n%i == 0:\n            return int(n/i)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n):\n        x = math.factorial(n-1)*(n-i)\n        if x%10==5 or x%10==6:\n            print(i)\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    import math\n    # Find next perfect square number \n    sq = math.ceil(math.sqrt(n))\n    s_sq = str(sq*sq)\n    s_sq_lst = list(s_sq)\n    for i in range(len(s_sq_lst)):\n        if s_sq_lst[i] == '9':\n            s_sq_lst[i] = '2'\n            break\n    # Find start index of the element to be searched in the list \n    s_sq_lst.reverse()\n    s = int(\"\".join(s_sq_lst))\n    if s == 0:\n        return 0\n    # Find the index of the element to be searched\n    count = 0\n    while(s):\n        count+=1\n        s = int(s/10)\n    return count\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(n,0,-1):\n        j = math.floor(math.sqrt(i))\n        while j > 0:\n            if i % j == 0:\n                return j\n            j -= 1\ndef problem_22(): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits.\n    '''\n    def find_Index(n):\n        '''\n        Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n        '''\n        for i in range(n,0,-1):\n            j = math.floor(math.sqrt(i))\n            while j > 0:\n                if i % j == 0:\n                    return j\n                j -= 1\n    def problem_21():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j = math.floor(math.sqrt(i))\n                while j > 0:\n                    if i % j == 0:\n                        return j\n                    j -= 1\n    def problem_22():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j = math.floor(math.sqrt(i))\n                while j > 0:\n                    if i % j == 0:\n                        return j\n                    j -= 1\n    def problem_22():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j = math.floor(math.sqrt(i))\n                while j > 0:\n                    if i % j == 0:\n                        return j\n                    j -= 1\n    def problem_21():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j = math.floor(math.sqrt(i))\n                while j > 0:\n                    if i % j == 0:\n                        return j\n                    j -= 1\n    def problem_21():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j = math.floor(math.sqrt(i))\n                while j > 0:\n                    if i % j == 0:\n                        return j\n                    j -= 1\n    def problem_22():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j = math.floor(math.sqrt(i))\n                while j > 0:\n                    if i % j == 0:\n                        return j\n                    j -= 1\n    def problem_22():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j = math.floor(math.sqrt(i))\n                while j > 0:\n                    if i % j == 0:\n                        return j\n                    j -= 1\n    def problem_22():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j = math.floor(math.sqrt(i))\n                while j > 0:\n                    if i % j == 0:\n                        return j\n                    j -= 1\n    def problem_22():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j = math.floor(math.sqrt(i))\n                while j > 0:\n                    if i % j == 0:\n                        return j\n                    j -= 1\n    def problem_22():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j = math.floor(math.sqrt(i))\n                while j > 0:\n                    if i % j == 0:\n                        return j\n                    j -= 1\n    def problem_22():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j = math.floor(math.sqrt(i))\n                while j > 0:\n                    if i % j == 0:\n                        return j\n                    j -= 1\n    def problem_22():\n        '''\n        Write a python function to find the index of smallest triangular number with n digits.\n        '''\n        def find_Index(n):\n            '''\n            Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n            '''\n            for i in range(n,0,-1):\n                j "
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # print(1)\n    if n<=1: \n        return n-1\n    else:\n        for i in range(1,n-1):\n            # print(i)\n            # print(n)\n            if n%i == 0:\n                return i\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    n = n - 1\n    p = int(math.sqrt(2*n + 1))\n    for i in range(1, p+1):\n        k = 0\n        j = 1\n        while j < i:\n            k += j\n            j += 1\n        if k == n:\n            return i\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    \n    for i in range(1,n+1):\n        if(i*(i+1)/2)**0.5 >n:\n            print(i-1)\n            break\n        elif(i*(i+1)/2)**0.5 ==n:\n            print(i)\n            break\ndef find_Digits_of_Triangular_Number(n):\n    '''\n    Write a python function to find the number of digits of triangular number with n digits. https://www.geeksforgeeks.org/number-of-digits-of-a-triangular-number/\n    '''\n    print(math.log(n)/math.log(3))\ndef find_Number_Of_Triangles(n):\n    '''\n    Write a python function to find the number of triangular numbers with n digits. https://www.geeksforgeeks.org/number-of-triangular-numbers/\n    '''\n    for i in range(1,n+1):\n        if(i*(i+1)/2)**0.5 >n:\n            print(i)\n            break\n        else:\n            print(i-1)\n            break\ndef find_Min_Max_Of_Triangular_Numbers(n):\n    '''\n    Write a python function to find the minimum and maximum of triangular numbers with n digits. https://www.geeksforgeeks.org/min-max-of-triangular-number/\n    '''\n    lst = []\n    for i in range(1,n+1):\n        lst.append(i*(i+1)/2)\n    lst = sorted(lst)\n    print(lst[0],lst[-1])\ndef find_Min_Max_Of_Triangular_Numbers_2(n):\n    '''\n    Write a python function to find the minimum and maximum of triangular numbers with n digits. https://www.geeksforgeeks.org/min-max-of-triangular-number/\n    '''\n    lst = []\n    for i in range(1,n+1):\n        lst.append(i*(i+1)/2)\n    lst = sorted(lst)\n    print(lst[0],lst[-1])\ndef find_Min_Max_Of_Triangular_Numbers_3(n):\n    '''\n    Write a python function to find the minimum and maximum of triangular numbers with n digits. https://www.geeksforgeeks.org/min-max-of-triangular-number/\n    '''\n    lst = []\n    for i in range(1,n+1):\n        lst.append(i*(i+1)/2)\n    lst = sorted(lst)\n    print(lst[0],lst[-1])\ndef find_Min_Max_Of_Triangular_Numbers_4(n):\n    '''\n    Write a python function to find the minimum and maximum of triangular numbers with n digits. https://www.geeksforgeeks.org/min-max-of-triangular-number/\n    '''\n    lst = []\n    for i in range(1,n+1):\n        lst.append(i*(i+1)/2)\n    lst = sorted(lst)\n    print(lst[0],lst[-1])\ndef find_Number_Of_Factors(n):\n    '''\n    Write a python function to find the number of factors of a number with n digits. https://www.geeksforgeeks.org/number-of-factors-of-a-number/\n    '''\n    from math import sqrt\n    def prime_factors(n): \n        i = 2\n        factors = [] \n        while i*i <= n: \n            if n % i: \n                i += 1\n            else: \n                n //= i \n                factors.append(i)\n        if n > 1: \n            factors.append(n)\n        return factors\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dct = {}\n    for i in range(len(test_tup)-1):\n        dct[test_tup[i]] = test_tup[i+1]\n    return dct\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return dict(zip(tuple(range(len(test_tup))), test_tup))\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # Approach 1\n    test_dict = {}\n    for key,val in enumerate(test_tup):\n        if key == 0 or key == len(test_tup)-1:\n            continue\n        else:\n            test_dict[val] = test_tup[key-1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    return {el[0]: el[1] for el in zip(range(len(test_tup) - 1), test_tup)}\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = {}\n    test_dict = dict(zip(test_tup[0::2],test_tup[1::2]))\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = dict()\n    test_dict[test_tup[0]] = test_tup[1]\n    return test_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = test_tup[i+1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    out_dict = {}\n    for i in range(0, len(test_tup), 2):\n        out_dict[test_tup[i]] = test_tup[i+1]\n    return out_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    \n    # key,value\n    result_dict = dict()\n    \n    for i in range(len(test_tup)-1):\n        result_dict[test_tup[i]] = test_tup[i+1]\n    \n    # return result_dict\n    "
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        d[test_tup[i]] = i\n    return d\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    l = list(s)\n    s = set(s)\n    if len(l) == len(s):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    #your code here\n    return len(set(s))==1\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 2:\n        return False\n    if s[0] == s[-1]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 1 :\n        return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return s.isalpha() == True and len(s) >= 2\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    s1 = s\n    for i in range(len(s)) :\n        if s[i]!= s1[i] :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    \n    if len(s)==0 :\n        return False\n    elif len(s)==1 :\n        return True\n    elif s[0]!=s[-1] :\n        return False\n    else :\n        return all_Characters_Same(s[1:-1])\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    return len(s) == len(set(s))\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    chars = s[0]\n    for i in range(1, len(s)):\n        if chars!= s[i]:\n            return False\n    return True\n    \ns = \"dadad\"\nprint(all_Characters_Same(s))\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s)<2:\n        return True\n    return s[0]==s[-1] and all_Characters_Same(s[1:-1])\nprint(all_Characters_Same(\"aa\"))\nprint(all_Characters_Same(\"ab\"))\nprint(all_Characters_Same(\"aabbcdd\"))\nprint(all_Characters_Same(\"\"))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side\n    return (s**2)/2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side/2\n    return (s*(s-1)*(s-2)*(s-3)) ** 0.5\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    print(side**3 / 4)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side**2\n    s = math.sqrt(a)\n    return (1/3)*s*s*s\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a, b, c, d = side[0], side[1], side[2], side[3]\n    return (a*d)/2.0\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area = (1/6)*side**2\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side**2)/6\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side\n    return (1/2)*a*a*a\ndef area_octahedron(side):\n    '''\n    Write a function to caluclate the area of a octahedron.\n    '''\n    a = side\n    return (2/3)*a*a*a\ndef area_dodecahedron(side):\n    '''\n    Write a function to caluclate the area of a dodecahedron.\n    '''\n    a = side\n    return (1/2)*a*a*a*a\ndef area_icosahedron(side):\n    '''\n    Write a function to caluclate the area of an icosahedron.\n    '''\n    a = side\n    return (2/3)*a*a*a\ndef area_cylinder(r):\n    '''\n    Write a function to caluclate the area of a cylinder.\n    '''\n    return r*r*math.pi\ndef volume_cylinder(r):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    return (math.pi*r*r)/3\ndef volume_sphere(r):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    return (4/3)*math.pi*r*r*r\ndef volume_cone(r1,r2):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    return math.pi*r1*r2/3\ndef volume_cone_3(r1,r2):\n    '''\n    Write a function to caluclate the volume of a cone with 3 radii.\n    '''\n    return math.pi*r1*r2*(r1**2+r2**2)/6\ndef volume_cylinder_2(r):\n    '''\n    Write a function to caluclate the volume of a cylinder with 2 radii.\n    '''\n    return math.pi*r*r\ndef volume_tetrahedron_4(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with 4 sides.\n    '''\n    return side*side*side*(1/2)\ndef volume_tetrahedron_6(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with 6 sides.\n    '''\n    return side*side*side*(1/2)*2\ndef volume_tetrahedron_8(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with 8 sides.\n    '''\n    return side*side*side*(1/2)*3\ndef volume_dodecahedron_6(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron with 6 sides.\n    '''\n    return side*side*side*(1/2)*6\ndef volume_icosahedron_5(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron with 5 sides.\n    '''\n    return side*side*side*(1/2)*5\ndef volume_dodecahedron_8(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron with 8 sides.\n    '''\n    return side*side*side*(1/2)*8\ndef volume_icosahedron_6(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron with 6 sides.\n    '''\n    return side*side*side*(1/2)*6\ndef volume_icosahedron_8(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron with 8 sides.\n    '''\n    return side*side*side*(1/2)*8\ndef volume_dodecahedron_4(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron with 4 sides.\n    '''\n    return side*side*side*(1/2)*4\ndef volume_dodecahedron_6(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron with 6 sides.\n    '''\n    return side*side*side*(1/2)*6\ndef volume_tetrahedron_5(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with 5 sides.\n    '''\n    return side*side*side*(1/2)*5\ndef volume_tetrahedron_8(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with 8 sides.\n    '''\n    return side*side*side*(1/2)*8\ndef volume_tetrahedron_10(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with 10 sides.\n    '''\n    return side*side*side*(1/2)*10\ndef volume_dodecahedron_3(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron with 3 sides.\n    '''\n    return side*side*side*(1/2)*3\ndef volume_icosahedron_5(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron with 5 sides.\n    '''\n    return side*side*side*(1/2)*5\ndef volume_icosahedron_7(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron with 7 sides.\n    '''\n    return side*side*side*(1/2)*7\ndef volume_icosahedron_8(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron with 8 sides.\n    '''\n    return side*side*side*(1/2)*8\ndef volume_tetrahedron_10(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with 10 sides.\n    '''\n    return side*side*side*(1/2)*10\ndef volume_dodecahedron_5(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron with 5 sides.\n    '''\n    return side*side*side*(1/2)*5\ndef volume_tetrahedron_4(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with 4 sides.\n    '''\n    return side*side*side*(1/2)*4\ndef volume_icosahedron_7(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron with 7 sides.\n    '''\n    return side*side*side*(1/2)*7\ndef volume_icosahedron_6(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron with 6 sides.\n    '''\n    return side*side*side*(1/2)*6\ndef volume_icosahedron_4(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron with 4 sides.\n    '''\n    return side*side*side*(1/2)*4\ndef volume_tetrahedron_6(side):\n    '''\n    Write a function to caluclate the volume of a tetrahedron with 6 sides.\n    '''\n    return side*side*side*(1/2)*6\ndef volume_octahedron(side):\n    '''\n    Write a function to caluclate the volume of a octahedron.\n    '''\n    return side*side*side\ndef volume_dodecahedron(side):\n    '''\n    Write a function to caluclate the volume of a dodecahedron.\n    '''\n    return side*side*side*side\ndef volume_icosahedron(side):\n    '''\n    Write a function to caluclate the volume of an icosahedron.\n    '''\n    return side*side*side*side"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    s = side\n    a = (s * (s - 1) * 0.25)\n    area = (a * 4) / 3\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side_sq = side ** 2\n    return math.sqrt(1/3 + 1/2*math.sqrt(2)/4*side_sq)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m > len(list):\n        return None\n    if m == len(list):\n        return list\n    for _ in range(m):\n        temp = list[-1]\n        list.pop()\n        list.append(temp)\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    \n    for i in range(m):\n        #store first item\n        item = list[0]\n        #store list items after first item\n        list[0] = list[-1]\n        #pop last item\n        list.pop()\n        #append first item\n        list.insert(0, item)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        temp = list[i]\n        j = i\n        while True:\n            k = j + 1\n            if k > len(list) - 1:\n                k = 0\n            if list[k]!= None:\n                list[j] = list[k]\n                j = k\n            else:\n                list[j] = None\n                break\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.insert(0, list.pop())\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # TODO: Write your code here\n    list.reverse()\n    \n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list_length = len(list)\n    last_element = list_length - 1\n    for i in range(m):\n        next_element = last_element\n        last_element = list[0]\n        list[0] = next_element\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    list.append(list.pop(0))\n    for i in range(len(list) - m):\n        list.insert(0, list.pop())\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    count = m\n    while count > 0:\n        first_elem = list[0]\n        for i in range(len(list)-1):\n            list[i] = list[i+1]\n        list[len(list)-1] = first_elem\n        count -= 1\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for item in test_tup:\n        if item is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all([i is not None for i in test_tup])\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return test_tup is not None\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    #Solution\n    for i in test_tup:\n        if i == None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if len(test_tup) == 0:\n        return True\n    for val in test_tup:\n        if val is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if test_tup[0] == None or test_tup[1] == None or test_tup[2] == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return {num for num in range(startnum, endnum + 1) if all(int(d) == num % int(d) for d in str(num))}\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    pass\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    \n    return list(range(startnum, endnum))\n    \ndef concatenate_strings(word1, word2):\n    '''\n    Write a function to return the concatenation of two strings. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-29.php\n    '''\n    \n    return word1 + word2\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    output = []\n    for number in range(startnum, endnum+1):\n        if(number%2 == 0 and number%3 == 0 and number%5 == 0 and number%7 == 0 and number%9 == 0 and number%11 == 0 and number%13 == 0 and number%17 == 0 and number%19 == 0):\n            output.append(number)\n    return output\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return (x for x in range(startnum, endnum + 1) if all(x % i == 0 for i in range(1, x)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    result = []\n    for num in range(startnum,endnum+1):\n        s = list(str(num))\n        if all(item%x == 0 for x in s):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(range(startnum, endnum + 1))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(map(lambda num: num, range(startnum, endnum)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for i in range(startnum, endnum + 1):\n        if (i % 1!= 0) and (i % 2!= 0) and (i % 3!= 0) and (i % 4!= 0) and (i % 5!= 0) and (i % 6!= 0) and (i % 7!= 0) and (i % 8!= 0) and (i % 9!= 0) and (i % 10!= 0):\n            print(i)\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: all(x%y==0 for y in list(map(int,str(x)))), range(startnum,endnum+1)))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a <= 0 or a > 360:\n        return None\n    if a > 180:\n        a = a - 360\n    if a > 180:\n        a = 360 - a\n    total = 2 * math.pi * r * r\n    return total * a / 360\ndef input_number(prompt):\n    '''\n    Write a function that asks the user for an integer number. The function should return the number if it is valid. It should prompt the user to enter an integer number between 0 and 100. The number entered by the user should be converted to the nearest integer.\n    '''\n    while True:\n        n = input(prompt)\n        if n.isdigit():\n            n = int(n)\n            if 0 <= n <= 100:\n                return n\n            else:\n                print(\"You have entered an invalid integer\")\n                continue\n        else:\n            print(\"You have not entered an integer\")\n            continue\ndef sin(x):\n    '''\n    Write a function that takes a real number as input and computes its sine.\n    '''\n    return math.sin(x)\ndef cos(x):\n    '''\n    Write a function that takes a real number as input and computes its cosine.\n    '''\n    return math.cos(x)\ndef tan(x):\n    '''\n    Write a function that takes a real number as input and computes its tangent.\n    '''\n    return math.tan(x)\ndef sine(x):\n    '''\n    Write a function that takes a real number as input and computes its sine.\n    '''\n    return math.sin(x)\ndef cosine(x):\n    '''\n    Write a function that takes a real number as input and computes its cosine.\n    '''\n    return math.cos(x)\ndef tan(x):\n    '''\n    Write a function that takes a real number as input and computes its tangent.\n    '''\n    return math.tan(x)\ndef is_number(n):\n    '''\n    Write a function that takes a real number as input and computes its absolute value.\n    '''\n    return n == int(n)\ndef convert_to_fahrenheit(x):\n    '''\n    Write a function that takes a real number as input and computes its absolute value.\n    '''\n    return x * 1.8 + 32\ndef add(x,y):\n    '''\n    Write a function that takes two real numbers as inputs and computes their sum.\n    '''\n    return x + y\ndef subtract(x,y):\n    '''\n    Write a function that takes two real numbers as inputs and computes their difference.\n    '''\n    return x - y\ndef multiply(x,y):\n    '''\n    Write a function that takes two real numbers as inputs and computes their product.\n    '''\n    return x * y\ndef divide(x,y):\n    '''\n    Write a function that takes two real numbers as inputs and computes their quotient.\n    '''\n    return x / y\ndef sqrt(x):\n    '''\n    Write a function that takes a real number as input and computes its square root.\n    '''\n    return x**0.5\ndef square(x):\n    '''\n    Write a function that takes a real number as input and computes its square.\n    '''\n    return x * x\ndef log(x,y):\n    '''\n    Write a function that takes two real numbers as inputs and computes their logarithm.\n    '''\n    return math.log(x,y)\ndef inverse_log(x,y):\n    '''\n    Write a function that takes two real numbers as inputs and computes their logarithm inverse.\n    '''\n    return math.log(x,y)**-1\ndef ln(x):\n    '''\n    Write a function that takes a real number as input and computes its natural logarithm.\n    '''\n    return math.log(x)\ndef square_root(x):\n    '''\n    Write a function that takes a real number as input and computes its square root.\n    '''\n    return math.sqrt(x)\ndef cube_root(x):\n    '''\n    Write a function that takes a real number as input and computes its cube root.\n    '''\n    return math.pow(x,1/3)\ndef sq(x):\n    '''\n    Write a function that takes a real number as input and computes its square.\n    '''\n    return x * x\ndef cube(x):\n    '''\n    Write a function that takes a real number as input and computes its cube.\n    '''\n    return x**3\ndef tanh(x):\n    '''\n    Write a function that takes a real number as input and computes its hyperbolic tangent.\n    '''\n    return math.tanh(x)\ndef sinh(x):\n    '''\n    Write a function that takes a real number as input and computes its hyperbolic sine.\n    '''\n    return math.sinh(x)\ndef asin(x):\n    '''\n    Write a function that takes a real number as input and computes its inverse hyperbolic sine.\n    '''\n    return math.asin(x)\ndef acos(x):\n    '''\n    Write a function that takes a real number as input and computes its inverse hyperbolic cosine.\n    '''\n    return math.acos(x)\ndef atan(x):\n    '''\n    Write a function that takes a real number as input and computes its inverse hyperbolic tangent.\n    '''\n    return math.atan(x)\ndef arc_sin(x):\n    '''\n    Write a function that takes a real number as input and computes its inverse hyperbolic sine.\n    '''\n    return math.asin(x)\ndef arc_cos(x):\n    '''\n    Write a function that takes a real number as input and computes its inverse hyperbolic cosine.\n    '''\n    return math.acos(x)\ndef arc_tan(x):\n    '''\n    Write a function that takes a real number as input and computes its inverse hyperbolic tangent.\n    '''\n    return math.atan(x)\ndef factorial(x):\n    '''\n    Write a function that takes a real number as input and computes its factorial.\n    '''\n    return math.factorial(x)\ndef power(x,y):\n    '''\n    Write a function that takes two real numbers as input and computes their power.\n    '''\n    return x**y\ndef square_root(x):\n    '''\n    Write a function that takes a real number as input and computes its square root.\n    '''\n    return math.sqrt(x)\ndef cubic_root(x):\n    '''\n    Write a function that takes a real number as input and computes its cube root.\n    '''\n    return math.pow(x,1/3)\ndef is_prime(x):\n    '''\n    Write a function that takes a real number as input and computes its prime factorization.\n    '''\n    return math.factorial(x)\ndef fact(x):\n    '''\n    Write a function that takes a real number as input and computes its factorial.\n    '''\n    return math.factorial(x)\ndef complex(x):\n    '''\n    Write a function that takes a real number as input and computes its complex conjugate.\n    '''\n    return math.conjugate(x)\ndef exp(x):\n    '''\n    Write a function that takes a real number as input and computes its exponential.\n    '''\n    return math.exp(x)\ndef log(x,y):\n    '''\n    Write a function that takes two real numbers as input and computes their logarithm.\n    '''\n    return math.log(x,y)\ndef sinh(x):\n    '''\n    Write a function that takes a real number as input and computes its hyperbolic sine.\n    '''\n    return math.sinh(x)\ndef cosh(x):\n    '''\n    Write a function that takes a real number as input and computes its hyperbolic cosine.\n    '''\n    return math"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    return r**2*math.sin(math.radians(a))\ndef vangle(v):\n    '''\n    Write a function to find the angle of a vector.\n    Inputs: a list of two elements, first element represents magnitude, second element represents angle in degrees.\n    Outputs: an angle in degrees.\n    '''\n    if len(v)!=2:\n        return None\n    return math.degrees(math.atan(v[1]/v[0]))\ndef count_angels(angle_list):\n    '''\n    Write a function that takes a list of angles and returns the number of angles in the list.\n    '''\n    count = 0\n    for i in range(len(angle_list)):\n        if vangle(angle_list[i]) == None:\n            count += 1\n    return count\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r * math.sin(math.radians(a))) > 0 :\n        return math.pi * r**2\n    else:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        r=math.radians(r)\n        sector_area=math.pi*(r**2)*a/360\n        return sector_area\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    sector = math.pi * r * r\n    sector = sector * a / 180\n    return sector\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a > 360:\n        return None\n    s=math.pi*r**2\n    x=s*math.sin(math.radians(a))\n    return x\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return math.pi*r**2*a/180\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (r**2)*math.sin(a/2)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    area = (math.pi*r**2)/2\n    if a > 360:\n        return None\n    else:\n        return area\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a > 360):\n        return None\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    rows = len(X) + 1\n    cols = len(Y) + 1\n    dp = [[0 for i in range(cols)] for j in range(rows)]\n    \n    for i in range(1, rows):\n        for j in range(1, cols):\n            if X[i-1] == Y[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    return dp[-1][-1]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    dp = [[0] * (len(Y)+1) for _ in range(len(X)+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    len_x = len(X)\n    len_y = len(Y)\n    len_z = len(Z)\n    \n    # if any of the input strings are empty\n    if len_x == 0 or len_y == 0 or len_z == 0:\n        return \"\"\n    \n    # declaring the array for storing the dp values \n    L = [[None]*(len_y + 1) for i in range(len_x + 1)] \n    \n    # If i is source and j is dest, then lcs for j \n    # starting from i = 0 is just the string itself \n    for i in range(len_x + 1): \n        for j in range(len_y + 1): \n            if i == 0 or j == 0: \n                L[i][j] = 0\n            elif X[i-1] == Y[j-1]: \n                L[i][j] = L[i-1][j-1] + 1\n            else: \n                L[i][j] = max(L[i-1][j], L[i][j-1]) \n                \n    # L is passed to the print_lcs function. \n    return print_lcs(X, Y, Z, L, len_x, len_y, len_z)\n    "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # matrix \n    m = len(X) + 1\n    n = len(Y) + 1\n    o = len(Z) + 1\n    lcsMatrix = [[0 for i in range(o)] for j in range(n)] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    X_length = len(X) \n    Y_length = len(Y) \n    Z_length = len(Z) \n    \n    # Base Cases  \n    if (X_length == 0) or (Y_length == 0) or (Z_length == 0): \n        return 0\n    if (X_length == 1) or (Y_length == 1) or (Z_length == 1): \n        return 1\n    \n    # Dynamic Programming \n    dp_table = [[0 for x in range(Z_length + 1)] for y in range(X_length + 1)] \n    \n    for i in range(1, X_length + 1): \n        for j in range(1, Z_length + 1): \n            for k in range(1, Y_length + 1): \n                if (X[i - 1] == Y[k - 1]) and (X[i - 1] == Z[j - 1]): \n                    dp_table[i][j] = dp_table[i - 1][j - 1] + 1\n                else: \n                    dp_table[i][j] = max(dp_table[i][j - 1], dp_table[i - 1][j]); \n    \n    return dp_table[X_length][Y_length]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs_of_two(X, Y):\n        '''\n        Write a function to find the longest common subsequence of the given two string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-two-strings/\n        '''\n        # Base Case\n        if (len(X) == 0) or (len(Y) == 0):\n            return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    k = len(Z)\n    dp = [[[0 for i in range(k+1)] for i in range(n+1)] for i in range(m+1)]\n    \n    for i in range(1, m+1):\n        for j in range(1, n+1):\n            for k in range(1, k+1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][j][k] = dp[i-1][j-1][k-1] + 1\n                else:\n                    dp[i][j][k] = max(dp[i][j-1][k], dp[i][j][k-1], dp[i-1][j][k])\n    return dp[m][n][k]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def find_LCS_length_recursive(X, Y, Z, m, n, o):\n        '''\n        This function is similar to LCS, but it checks if the subsequence X[0...i-1] and Y[0...j-1] is present in Z[0...k-1]. The length of the substrings X and Y are compared.\n        Note that the length of X, Y and Z can be varying.\n        \n        Time Complexity: O(3N + M)\n        Space Complexity: O(M)\n        '''\n        # If the first string is empty, the result is the second string\n        # If the second string is empty, the result is the first string\n        if X == \"\" or Y == \"\" or Z == \"\":\n            return o\n        # If the characters are the same, then only one character needs to be checked\n        if X[0] == Y[0]:\n            o = find_LCS_length_recursive(X[1:], Y[1:], Z[1:], m, n, o)\n            m = m - 1\n            n = n - 1\n            o = o + 1\n        # If the characters are not the same, then the result is\n        # found by checking with the first character\n        else:\n            o = max(find_LCS_length_recursive(X, Y, Z[1:], m, n, o), find_LCS_length_recursive(X[1:], Y, Z, m, n, o))\n            m = m - 1\n            n = n - 1\n        return o\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # Create an empty dp table \n    table = [[None]*(len(Y) + 1) for i in range(len(X) + 1)] \n    # Fill dp table in bottom up manner \n    for i in range(len(X) + 1): \n        for j in range(len(Y) + 1): \n            for k in range(len(Z) + 1): \n                if i == 0 or j == 0 or k == 0: \n                    table[i][j] = 0\n                elif X[i - 1] == Y[j - 1] == Z[k - 1]: \n                    table[i][j] = table[i-1][j-1] + 1\n                else: \n                    table[i][j] = max(table[i][j-1], table[i-1][j], table[i-1][j-1]) \n    return table[len(X)][len(Y)] \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    dp = [[0 for i in range(len(Z) + 1)] for j in range(len(X) + 1)]\n    for i in range(1, len(X) + 1):\n        for j in range(1, len(Y) + 1):\n            for k in range(1, len(Z) + 1):\n                if X[i-1] == Y[j-1] == Z[k-1]:\n                    dp[i][k] = 1 + dp[i-1][k-1] + dp[i-1][k]\n                else:\n                    dp[i][k] = max(dp[i-1][k], dp[i][k-1])\n    return dp[-1][-1]\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.lower()\n    spaces = re.compile(r\"([a-z])([A-Z])\")\n    result = spaces.sub(r\"\\1 \\2\", str1)\n    result = result.split()\n    result = \" \".join(result)\n    print(result)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    capital = re.findall(r'\\w[A-Z]', str1)\n    capital_spaces = re.sub(r'\\w[A-Z]', r' \\w ', str1)\n    final = re.sub(r'\\s+', r' ', capital_spaces)\n    return final\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.upper()\n    result = re.sub(r\"\\b(\\w)(\\1{2})\", r\"\\1 \\2\", str1)\n    return result.lower()\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return re.sub(r'\\b([A-Z][a-z]+)', r' \\1', str1)\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    \n    str1 = str1.lower()\n    str1 = re.sub(r'(?<= )[A-Z][a-z]+', r'\\1 \\1', str1)\n    return str1\n    #return str1.split()\n    #return \" \".join(sorted(str1.split()))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #st = \"Hello World\"\n    st = str1.replace(\" \",\"\")\n    st = st.capitalize()\n    return st\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str2 = ''\n    for i in range(len(str1)):\n        if(str1[i].isupper() and i!=0):\n            str2 = str2 +'' + str1[i]\n        else:\n            str2 = str2 + str1[i]\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return \" \".join([word.capitalize() + \" \" if word.isupper() else word for word in str1.split()])\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = re.sub(r'\\b([A-Z])([a-z]+)', r'\\1 \\2', str1)\n    str1 = re.sub(r'([a-z])([A-Z])', r'\\1 \\2', str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    lst=re.findall(r'\\b[A-Z][a-z]*\\b',str1)\n    for i in lst:\n        str1=str1.replace(i,' '+i+' ')\n    return str1\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    \n    def sort_string(str_list):\n        return sorted(str_list, key=lambda x: re.match('[+-]?\\d+', x))\n        \n    nums_str = sort_string(nums_str)\n    print(nums_str)\n    \n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = nums_str.split(' ')\n    nums_list_tup = []\n    for i in nums_list:\n        nums_list_tup.append(int(i))\n    nums_list_tup.sort()\n    result = []\n    for i in range(len(nums_list_tup)):\n        result.append(str(nums_list_tup[i]))\n    result =''.join(result)\n    return result\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    return sorted(nums_str, key=float)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    new_list = []\n    for item in nums_str:\n        new_list.append(int(item))\n    new_list.sort()\n    nums_str = []\n    for item in new_list:\n        nums_str.append(str(item))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    nums_int = []\n    nums_float = []\n    for i in range(len(nums_str)):\n        if str.isdigit(nums_str[i]):\n            nums_int.append(int(nums_str[i]))\n        elif str.isfloat(nums_str[i]):\n            nums_float.append(float(nums_str[i]))\n    nums.append(nums_int)\n    nums.append(nums_float)\n    nums.sort()\n    return nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str.sort(key=float)\n    return nums_str\n    \n    \nif __name__ == '__main__':\n    nums_str = [\"15\", \"24\", \"24\", \"24\", \"48\", \"24\"]\n    print(sort_numeric_strings(nums_str)"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_list = []\n    for s in nums_str:\n        nums_list.append(float(s))\n    nums_list.sort(key=str)\n    return nums_list\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [num.strip() for num in nums_str.split(\",\")]\n    nums = [float(num) for num in nums]\n    nums.sort()\n    nums_str = \",\".join([str(num) for num in nums])\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    sorted_nums = []\n    \n    for num_str in nums_str:\n        sorted_nums.append(int(num_str))\n    \n    sorted_nums.sort()\n    \n    return sorted_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = sorted(nums_str, key=int)\n    return nums_str\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list + [test_tup]\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    return test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] += test_tup[j]\n    return test_list\n    \n    "
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    n = len(arr)\n    # check if current index is greater than parent index\n    # if it is, then the current index is not the min of heap\n    # so return False\n    if i > 0 and arr[i] < arr[(i - 1) // 2]:\n        return False\n    # check if the current index's left child is greater than parent index\n    # if it is, then the current index is not the min of heap\n    # so return False\n    if 2 * i + 2 < n:\n        if arr[i] > arr[2 * i + 2]:\n            return False\n    # check if the current index's right child is greater than parent index\n    # if it is, then the current index is not the min of heap\n    # so return False\n    if 2 * i + 1 < n:\n        if arr[i] > arr[2 * i + 1]:\n            return False\n    # if we are here, then the current index is the min of heap\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # BASE CASE 1\n    if arr[i] == None:\n        return True\n    if arr[i] <= arr[i*2] or arr[i] <= arr[i*2+1]:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    parent_index = i\n    while arr[parent_index] >= arr[parent_index - 1]:\n        if parent_index == 0:\n            return True\n        parent_index = parent_index - 1\n    return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] >= arr[2 * i + 1] and arr[i] >= arr[2 * i + 2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    i = i\n    arr = arr\n    cnt = 0\n    while i > 0 and arr[(i-1)//2] > arr[i]:\n        i = i//2\n        cnt += 1\n    return cnt\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr) or arr[i]!= arr[len(arr)-1]:\n        return False\n    elif i == 0:\n        return True\n    else:\n        return check_min_heap_helper(arr, i-1) and arr[i] > arr[i-1]\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr == None: return True\n    if arr[i] <= arr[2 * i + 1]:\n        return check_min_heap_helper(arr, 2 * i + 1)\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    l = i\n    r = i * 2\n    if l >= len(arr):\n        return True\n    elif r + 1 <= len(arr):\n        if arr[l] > arr[r]:\n            return False\n        else:\n            return check_min_heap_helper(arr, l + 1) and check_min_heap_helper(arr, r + 1)\n    else:\n        return check_min_heap_helper(arr, l + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if i == 0:\n        return True\n    \n    # if parent and child have same priority\n    if arr[i] <= arr[int(i/2)]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i >= len(arr):\n        return True\n    if arr[i] > arr[i + 1]:\n        return False\n    return check_min_heap_helper(arr, i + 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # base case: jacobsthal number is always greater than 1\n    if n < 2:\n        return n\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # return the nth number in the series\n    n += 1\n    if n == 1:\n        return 1\n    if n == 2:\n        return 1\n    if n == 3:\n        return 2\n    if n == 4:\n        return 2\n    if n == 5:\n        return 3\n    if n == 6:\n        return 4\n    if n == 7:\n        return 5\n    if n == 8:\n        return 6\n    if n == 9:\n        return 7\n    if n == 10:\n        return 8\n    if n == 11:\n        return 9\n    if n == 12:\n        return 10\n    if n == 13:\n        return 11\n    if n == 14:\n        return 12\n    if n == 15:\n        return 13\n    if n == 16:\n        return 14\n    if n == 17:\n        return 15\n    if n == 18:\n        return 16\n    if n == 19:\n        return 17\n    if n == 20:\n        return 18\n    if n == 21:\n        return 19\n    if n == 22:\n        return 20\n    if n == 23:\n        return 21\n    if n == 24:\n        return 22\n    if n == 25:\n        return 23\n    if n == 26:\n        return 24\n    if n == 27:\n        return 25\n    if n == 28:\n        return 26\n    if n == 29:\n        return 27\n    if n == 30:\n        return 28\n    if n == 31:\n        return 29\n    if n == 32:\n        return 30\n    if n == 33:\n        return 31\n    if n == 34:\n        return 32\n    if n == 35:\n        return 33\n    if n == 36:\n        return 34\n    if n == 37:\n        return 35\n    if n == 38:\n        return 36\n    if n == 39:\n        return 37\n    if n == 40:\n        return 38\n    if n == 41:\n        return 39\n    if n == 42:\n        return 40\n    if n == 43:\n        return 41\n    if n == 44:\n        return 42\n    if n == 45:\n        return 43\n    if n == 46:\n        return 44\n    if n == 47:\n        return 45\n    if n == 48:\n        return 46\n    if n == 49:\n        return 47\n    if n == 50:\n        return 48\n    if n == 51:\n        return 49\n    if n == 52:\n        return 50\n    if n == 53:\n        return 51\n    if n == 54:\n        return 52\n    if n == 55:\n        return 53\n    if n == 56:\n        return 54\n    if n == 57:\n        return 55\n    if n == 58:\n        return 56\n    if n == 59:\n        return 57\n    if n == 60:\n        return 58\n    if n == 61:\n        return 59\n    if n == 62:\n        return 60\n    if n == 63:\n        return 61\n    if n == 64:\n        return 62\n    if n == 65:\n        return 63\n    if n == 66:\n        return 64\n    if n == 67:\n        return 65\n    if n == 68:\n        return 66\n    if n == 69:\n        return 67\n    if n == 70:\n        return 68\n    if n == 71:\n        return 69\n    if n == 72:\n        return 70\n    if n == 73:\n        return 71\n    if n == 74:\n        return 72\n    if n == 75:\n        return 73\n    if n == 76:\n        return 74\n    if n == 77:\n        return 75\n    if n == 78:\n        return 76\n    if n == 79:\n        return 77\n    if n == 80:\n        return 78\n    if n == 81:\n        return 79\n    if n == 82:\n        return 80\n    if n == 83:\n        return 81\n    if n == 84:\n        return 82\n    if n == 85:\n        return 83\n    if n == 86:\n        return 84\n    if n == 87:\n        return 85\n    if n == 88:\n        return 86\n    if n == 89:\n        return 87\n    if n == 90:\n        return 88\n    if n == 91:\n        return 89\n    if n == 92:\n        return 90\n    if n == 93:\n        return 91\n    if n == 94:\n        return 92\n    if n == 95:\n        return 93\n    if n == 96:\n        return 94\n    if n == 97:\n        return 95\n    if n == 98:\n        return 96\n    if n == 99:\n        return 97\n    if n == 100:\n        return 98\n    if n == 101:\n        return 99\n    if n == 102:\n        return 100\n    if n == 103:\n        return 101\n    if n == 104:\n        return 102\n    if n == 105:\n        return 103\n    if n == 106:\n        return 104\n    if n == 107:\n        return 105\n    if n == 108:\n        return 106\n    if n == 109:\n        return 107\n    if n == 110:\n        return 108\n    if n == 111:\n        return 109\n    if n == 112:\n        return 110\n    if n == 113:\n        return 111\n    if n == 114:\n        return 112\n    if n == 115:\n        return 113\n    if n == 116:\n        return 114\n    if n == 117:\n        return 115\n    if n == 118:\n        return 116\n    if n == 119:\n        return 117\n    if n == 120:\n        return 118\n    if n == 121:\n        return 119\n    if n == 122:\n        return 120\n    if n == 123:\n        return 121\n    if n == 124:\n        return 122\n    if n == 125:\n        return 123\n    if n == 126:\n        return 124\n    if n == 127:\n        return 125\n    if n == 128:\n        return 126\n    if n == 129:\n        return 127\n    if n == 130:\n        return 128\n    if n == 131:\n        return 129\n    if n == 132:\n        return 130\n    if n == 133:\n        return 131\n    if n == 134:\n        return 132\n    if n == 135:\n        return 133\n    if n == 136:\n        return 134\n    if n == 137:\n        return 135\n    if n == 138:\n        return 136\n    if n == 139:\n        return 137\n    if n == 140:\n        return 138\n    if n == 141:\n        return 139\n    if n == 142:\n        return 140\n    if n == 143:\n        return 141\n    if n == 144:\n        return 142\n    if n == 145:\n        return 143\n    if n == 146:\n        return 144\n    if n == 147:\n        return 145\n    if n == 148:\n        return 146\n    if n == 149:\n        return 147\n    if n == 150:\n        return 148\n    if n == 151:\n        return 149\n    if n == 152:\n        return 150\n    if n == 153:\n        return 151\n    if n == 154:\n        return 152\n    if n == 155:\n        return 153\n    if n == 156:\n        return 154\n    if n == 157:\n        return 155\n    if n == 158:\n        return 156\n    if n == 159:\n        return 157\n    if n == 160:\n        return 158\n    if n == 161:\n        return 159\n    if n == 162:\n        return 160\n    if n == 163:\n        return 161\n    if n == 164:\n        return 162\n    if n == 165:\n        return 163\n    if n == 166:\n        return 164\n    if n == 167:\n        return 165\n    if n == 168:\n        return 166\n    if n == 169:\n        return 167\n    if n == 170:\n        return 168\n    if n == 171:\n        return 169\n    if n == 172:\n        return 170\n    if n == 173:\n        return 171\n    if n == 174:\n        return 172\n    if n == 175:\n        return 173\n    if n == 176:"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_num_rec(n):\n        if n == 1:\n            return 1\n        elif n == 2:\n            return 1\n        else:\n            return jacobsthal_num_rec(n-1) + jacobsthal_num_rec(n-2)\n    return jacobsthal_num_rec(n)\n    \n    "
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    m = n + 1\n    j = 2\n    k = 3\n    while (m > 0): \n        j = (j * (k + 1)) // 2\n        m = m - 1\n    return j\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    # Step 1: find the first two numbers in the sequence\n    # Step 2: find the first term, which is equal to the square of the second term\n    # Step 3: Find the term, which is equal to the first term * the third term.\n    \n    \n    # Step 1: Find the first two numbers in the sequence\n    first = 0\n    second = 1\n    \n    # Step 2: find the first term, which is equal to the square of the second term\n    while(second <= n):\n        # Step 3: Find the term, which is equal to the first term * the third term.\n        third = (first + second)\n        first = second\n        second = third\n        \n    return third\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    if n == 6:\n        return 13\n    if n == 7:\n        return 21\n    if n == 8:\n        return 34\n    if n == 9:\n        return 55\n    if n == 10:\n        return 89\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1682\n    if n == 17:\n        return 2687\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 24395\n    if n == 22:\n        return 46581\n    if n == 23:\n        return 83963\n    if n == 24:\n        return 138561\n    if n == 25:\n        return 268565\n    if n == 26:\n        return 487065\n    if n == 27:\n        return 874621\n    if n == 28:\n        return 1519565\n    if n == 29:\n        return 3539765\n    if n == 30:\n        return 6148765\n    if n == 31:\n        return 96987665\n    if n == 32:\n        return 163158565\n    if n == 33:\n        return 3936458565\n    if n == 34:\n        return 7275625565\n    if n == 35:\n        return 1096765765\n    if n == 36:\n        return 2443458565\n    if n == 37:\n        return 4696522565\n    if n == 38:\n        return 8897022565\n    if n == 39:\n        return 1419715455\n    if n == 40:\n        return 321050455\n    if n == 41:\n        return 544825455\n    if n == 42:\n        return 8838405455\n    if n == 43:\n        return 153198405\n    if n == 44:\n        return 36164995\n    if n == 45:\n        return 56694595\n    if n == 46:\n        return 988964595\n    if n == 47:\n        return 1724944595\n    if n == 48:\n        return 38602095\n    if n == 49:\n        return 687454595\n    if n == 50:\n        return 1020944595\n    if n == 51:\n        return 2414554595\n    if n == 52:\n        return 4464095\n    if n == 53:\n        return 76760545\n    if n == 54:\n        return 11784045\n    if n == 55:\n        return 2625405\n    if n == 56:\n        return 4649045\n    if n == 57:\n        return 8886845\n    if n == 58:\n        return 12886845\n    if n == 59:\n        return 2754845\n    if n == 60:\n        return 4684845\n    if n == 61:\n        return 8986845\n    if n == 62:\n        return 13284845\n    if n == 63:\n        return 2754445\n    if n == 64:\n        return 468445\n    if n == 65:\n        return 8896445\n    if n == 66:\n        return 13286445\n    if n == 67:\n        return 273664\n    if n == 68:\n        return 468364\n    if n == 69:\n        return 89864\n    if n == 70:\n        return 132864\n    if n == 71:\n        return 273664\n    if n == 72:\n        return 468364\n    if n == 73:\n        return 88964\n    if n == 74:\n        return 132864\n    if n == 75:\n        return 27364\n    if n == 76:\n        return 468364\n    if n == 77:\n        return 8986364\n    if n == 78:\n        return 13286364\n    if n == 79:\n        return 273648\n    if n == 80:\n        return 4683648\n    if n == 81:\n        return 8896364\n    if n == 82:\n        return 13286363\n    if n == 83:\n        return 273652\n    if n == 84:\n        return 4683652\n    if n == 85:\n        return 89862\n    if n == 86:\n        return 132862\n    if n == 87:\n        return 27365\n    if n == 88:\n        return 468365\n    if n == 89:\n        return 8896\n    if n == 90:\n        return 1328\n    if n == 91:\n        return 2736\n    if n == 92:\n        return 46836\n    if n == 93:\n        return 889\n    if n == 94:\n        return 1328\n    if n == 95:\n        return 2735\n    if n == 96:\n        return 46835\n    if n == 97:\n        return 889\n    if n == 98:\n        return 1327\n    if n == 99:\n        return 2724\n    if n == 100:\n        return 46824\n    if n == 101:\n        return 888\n    if n == 102:\n        return 1315\n    if n == 103:\n        return 2712\n    if n == 104:\n        return 46812\n    if n == 105:\n        return 888\n    if n == 106:\n        return 13\n    if n == 107:\n        return 27\n    if n == 108:\n        return 468\n    if n == 109:\n        return 887\n    if n == 110:\n        return 13\n    if n == 111:\n        return 26\n    if n == 112:\n        return 467\n    if n == 113:\n        return 886\n    if n == 114:\n        return 132\n    if n == 115:\n        return 26\n    if n == 116:\n        return 466\n    if n == 117:\n        return 885\n    if n == 118:\n        return 13\n    if n == 119:\n        return 26\n    if n == 120:\n        return 464\n    if n == 121:\n        return 884\n    if n == 122:\n        return 13\n    if n == 123:\n        return 26\n    if n == 124:\n        return 463\n    if n == 125:\n        return 883\n    if n == 126:\n        return 13\n    if n == 127:\n        return 26\n    if n == 128:\n        return 462\n    if n == 129:\n        return 882\n    if n == 130:\n        return 13\n    if n == 131:\n        return 26\n    if n == 132:\n        return 461\n    if n == 133:\n        return 881\n    if n == 134:\n        return 13\n    if n == 135:\n        return 26\n    if n == 136:\n        return 460\n    if n == 137:\n        return 880\n    if n == 138:\n        return 13\n    if n == 139:\n        return 26\n    if n == 140:\n        return 459\n    if n == 141:\n        return 879\n    if n == 142:\n        return 13\n    if n == 143:\n        return 26\n    if n == 144:\n        return 458\n    if n == 145:\n        return 878\n    if n == 146:\n        return 13\n    if n == 147:\n        return 26\n    if n == 148:\n        return 457\n    if n == 149:\n        return 877\n    if n == 150:\n        return 13\n    if n == 151:\n        return 26\n    if n == 152:\n        return 456\n    if n == 153:\n        return 876\n    if n == 154:\n        return 13\n    if n == 155:\n        return 26\n    i"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    import math\n    return math.sqrt((2*n + 1)/4)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    # check if n is valid\n    if n < 0 or n > 2**31:\n        raise Exception('n is not in range')\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    \n    if n == 0:\n        return 0\n    \n    elif n == 1:\n        return 1\n    \n    else:\n        return jacobsthal_num(n-1) + (jacobsthal_num(n-1)*2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 1\n    y = 2\n    c = 1\n    if (n == 0):\n        return 1\n    while (n > 1):\n        c = x + y\n        x = y\n        y = c\n        n = n - 1\n    return c\n    \ndef jacobsthal_num_list(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    x = 1\n    y = 2\n    c = 1\n    n_list = []\n    if (n == 0):\n        return 1\n    while (n > 1):\n        c = x + y\n        x = y\n        y = c\n        n_list.append(c)\n        n = n - 1\n    return n_list[-1]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    count = 0\n    min_list = []\n    while count!= K:\n        min_list.append(test_list[0])\n        test_list.remove(test_list[0])\n        count += 1\n    return min_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    sorted_list = sorted(test_list)\n    if K <= 0 or K > len(sorted_list):\n        return -1\n    min_val = sorted_list[0]\n    for i in range(1, K):\n        if sorted_list[i] < min_val:\n            min_val = sorted_list[i]\n    return min_val\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K > len(test_list):\n        return []\n    min_k_list = []\n    for i in range(K):\n        min_k_list.append(test_list[i])\n    min_k_list.sort(key=lambda x: x[2])\n    return min_k_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # sort the tuple list in increasing order based on the first element in tuple\n    test_list.sort(key = lambda x: x[0])\n    minimum_k_element = test_list[0:K]\n    # print(minimum_k_element)\n    # print('length of min_k_element: ', len(minimum_k_element))\n    for i in range(1, len(test_list)):\n        if test_list[i][0] < min(minimum_k_element, key=lambda x: x[0])[0]:\n            minimum_k_element.append(test_list[i])\n        else:\n            continue\n    # print('minimum_k_element: ', minimum_k_element)\n    return minimum_k_element\n    \nif __name__ == '__main__':\n    test_case = [['a', 5,'s'], ['b', 4,'s'], ['c', 1,'s'], ['d', 3,'s'], ['e', 2,'s'], ['f', 1,'s'], ['g', 5,'s'], ['h', 5,'s'], ['i', 2,'s'], ['j', 5,'s'], ['k', 2,'s'], ['l', 5,'s'], ['m', 1,'s'], ['n', 2,'s'], ['o', 5,'s']]\n    \n    K = 2\n    result = min_k(test_case, K)\n    print(result)"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # this is a brute force method\n    for i in range(len(test_list) - K + 1):\n        result = test_list[i: i + K]\n        if result == sorted(result):\n            return result\n    return None\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Creating a tuple list\n    tuple_list = tuple(test_list)\n    \n    # Sorting the tuple list\n    tuple_list.sort()\n    \n    # Finding the minimum k records\n    min_k = tuple_list[:K]\n    \n    # Returning the minimum k records\n    return min_k\n    \n    \ndef get_top_k_urls(test_list, K):\n    '''\n    Write a function to get top k URLs from list. https://www.geeksforgeeks.org/python-find-top-k-urls-from-list/ - in this case a verbatim copy of test cases\n    '''\n    # Creating a dictionary\n    dict = {}\n    \n    # Iterating through the list and appending values to the dictionary\n    for i in range(len(test_list)):\n        if test_list[i] in dict:\n            dict[test_list[i]] += 1\n        else:\n            dict[test_list[i]] = 1\n    \n    # Sorting dictionary values in descending order\n    sort_dict = sorted(dict.items(), key=lambda x: x[1], reverse=True)\n    \n    # Finding the top k URLs\n    top_k = list(sort_dict[:K])\n    \n    # Returning the top k URLs\n    return top_k\n    \n    "
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Sort the list first\n    test_list = sorted(test_list)\n    # Get the length of the list\n    length = len(test_list)\n    # Find the kth smallest element\n    k = length - K\n    # Return the kth smallest element\n    return test_list[k]\n    \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    #your code here\n    lst = sorted(test_list)\n    return lst[:K]\n    #return min(lst, key = lambda x : x[1])[1]\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) < K:\n        return None\n    else:\n        test_list.sort()\n        test_list = test_list[:K]\n        return test_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    n = len(test_list)\n    for i in range(n - K):\n        curr_min = test_list[i]\n        for j in range(i, i + K):\n            if curr_min[1] > test_list[j][1]:\n                curr_min = test_list[j]\n        test_list[i], test_list[i + K - 1] = curr_min, test_list[i]\n        \n    return test_list[:K]\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    return list(set(l1) & set(l2) & set(l3))\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    def common_values(l1, l2, l3):\n        result_list = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                for k in range(len(l3)):\n                    if l1[i] == l2[j] == l3[k]:\n                        result_list.append(l1[i])\n        return result_list\n    \n    return common_values(l1, l2, l3)\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l = []\n    for i in range(0, len(l1)):\n        for j in range(0, len(l2)):\n            for k in range(0, len(l3)):\n                if l1[i] == l2[j] and l1[i] == l3[k]:\n                    l.append(l1[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    li = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            for k in range(len(l3)):\n                if l1[i] == l2[j] == l3[k]:\n                    li.append(l1[i])\n    return li\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list = []\n    for i in range(len(l1)):\n        for j in range(len(l2)):\n            if l1[i] == l2[j]:\n                index_list.append(j)\n        for k in range(len(l3)):\n            if l1[i] == l3[k]:\n                index_list.append(k)\n    return index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_index_list = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] and l1[index] == l3[index]:\n            common_index_list.append(index)\n    return common_index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    \n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    \n    if len(l1) == len(l2) and len(l1) == len(l3):\n        return [e for e in l1 if e in l2 and e in l3]\n    else:\n        return []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_index = 0\n    l2_index = 0\n    l3_index = 0\n    solution_index = []\n    while l1_index < len(l1):\n        if l1[l1_index] == l2[l2_index] == l3[l3_index]:\n            solution_index.append(l1_index)\n        l1_index += 1\n        l2_index += 1\n        l3_index += 1\n    return solution_index\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_set = set(l1)\n    l2_set = set(l2)\n    l3_set = set(l3)\n    common = l1_set.intersection(l2_set, l3_set)\n    common = list(common)\n    return common\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common = []\n    i = 0\n    for i in range(len(l1)):\n        j = 0\n        for j in range(len(l2)):\n            k = 0\n            for k in range(len(l3)):\n                if l1[i] == l2[j] and l1[i] == l3[k]:\n                    common.append(l1[i])\n                    break\n    return common\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers, key=numbers.count)\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    print(numbers)\n    return numbers[1]\n    \n    \n    \n    \ndef third_smallest(numbers):\n    '''\n    Write a function to find the third smallest number in a list.\n    '''\n    numbers.sort()\n    print(numbers)\n    return numbers[2]\n    \n    \n    \n    \ndef nth_smallest(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[n-1]\n    \n    \n    \n    \ndef nth_smallest_rec(numbers, n):\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        numbers = sorted(numbers)\n        numbers.pop(0)\n        numbers = numbers + nth_smallest_rec(numbers, n-1)\n        return numbers[n-1]\n    \n    \n    \ndef nth_smallest_rec2(numbers, n):\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        numbers = sorted(numbers)\n        numbers = numbers + nth_smallest_rec2(numbers, n-1)\n        return numbers[n-1]\n    \n    \n    \ndef nth_smallest_rec3(numbers, n):\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        numbers = sorted(numbers)\n        numbers = numbers + nth_smallest_rec3(numbers, n-1)\n        return numbers[n-1]\n    \n    \n    \ndef nth_smallest_rec4(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        numbers = sorted(numbers)\n        numbers = numbers + nth_smallest_rec4(numbers, n-1)\n        return numbers[n-1]\n    \n    \n    \ndef nth_smallest_rec5(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec5(sorted(numbers), n-1)\n    \n    \n    \ndef nth_smallest_rec6(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec6(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec7(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec7(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec8(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec8(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec9(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec9(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec10(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec10(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec11(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec11(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec12(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec12(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec13(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec13(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec14(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec14(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec15(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec15(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec16(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec16(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec17(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec17(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec18(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec18(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec19(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''\n    if len(numbers)==1:\n        return numbers[0]\n    else:\n        return nth_smallest_rec19(sorted(numbers), len(numbers)-1, n-1)\n    \n    \n    \ndef nth_smallest_rec20(numbers, n):\n    '''\n    Write a function to find the nth smallest number in a list.\n    '''"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    \n    sorted_list = sorted(numbers)\n    print(sorted_list)\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return None\n    if len(numbers) == 2:\n        return min(numbers)\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) < 2:\n        return False\n    else:\n        return min(numbers)\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if not numbers:\n        return None\n    elif len(numbers) == 1:\n        return None\n    elif len(numbers) == 2:\n        return numbers[0]\n    else:\n        numbers.sort()\n        return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    if len(numbers) == 1:\n        return numbers[0]\n    \n    # ------------ MY SOLUTION ------------\n    smallest = numbers[0]\n    second_smallest = None\n    for i in range(len(numbers)):\n        if numbers[i] < smallest:\n            second_smallest = smallest\n            smallest = numbers[i]\n        elif numbers[i] < second_smallest:\n            second_smallest = numbers[i]\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    min = numbers[0]\n    for i in range(1, len(numbers)):\n        if min > numbers[i]:\n            min = numbers[i]\n    return min\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r'a(b+)', text):\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a{1,}b'\n    match = re.findall(pattern,text)\n    return match\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.match(r'a+b',text):\n        print(\"Match found\")\n    else:\n        print(\"Not a match\")\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = 'ab*'\n    match = re.search(pattern, text)\n    if match:\n        print('Match!')\n        print(match.group(0))\n    else:\n        print('No Match!')\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'a[ab]',text)\n    if match:\n        print(match)\n    else:\n        print(False)\ndef text_match_zero_one_v2(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.findall(r'a[ab]',text)\n    if match:\n        print(match)\n    else:\n        print(False)\ndef text_match_zero_one_v3(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match = re.search(r'a[ab]',text)\n    if match:\n        print(match.group())\n    else:\n        print(False)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    r = re.compile(r'(a+)(b+)')\n    match = r.match(text)\n    if match is not None:\n        return match.group(0), match.group(1), match.group(2)\n    else:\n        return None, None, None\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    match= re.search(r'a{1,}b',text)\n    if match:\n        print(match)\n    else:\n        print('match not found')\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    result = re.search(r'a(?:b)+', text)\n    return result\n    \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r'a(?:b)+', text):\n        return True\n    else:\n        return False\n        \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'a(?:b)+', text)!= None\n        \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(r'a(?:b)+', text):\n        return True\n    else:\n        return False\n        \ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(r'a(?:b)+', text)!= None\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.search(\"ab+\",text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # RegEx allows a regular expression to be defined as a sequence of characters. In this exercise we\u2019ll create a regular expression that matches strings that have 'a' followed by zero or one 'b' characters.\n    # Write the regular expression and the accompanying pattern that matches the examples.\n    # Your result should match this example.\n    # Example\n    # text_match_zero_one(\"ab\") \u279e False\n    # text_match_zero_one(\"bb\") \u279e True\n    # text_match_zero_one(\"ba\") \u279e False\n    # text_match_zero_one(\"b\") \u279e False\n    # text_match_zero_one(\"bbb\") \u279e False\n    \n    # Put your code here\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    \n    if len(test_list) == 0:\n        return 0\n    \n    if len(test_list) == 1:\n        return test_list\n    \n    list_size = len(test_list)\n    for index in range(1, list_size):\n        for item in range(list_size - index):\n            if test_list[item] == test_list[list_size - item - 1]:\n                reverse_count += 1\n    \n    return reverse_count\n    \ndef string_match(str1, str2):\n    '''\n    Write a function that returns the count of matching characters in two strings.\n    '''\n    if str1 == '' or str2 == '':\n        return 0\n    \n    match_count = 0\n    \n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            match_count += 1\n    \n    return match_count\n    \ndef string_match_pattern(str1, str2):\n    '''\n    Write a function that returns the count of matching characters in two strings.\n    '''\n    if str1 == '' or str2 == '':\n        return 0\n    \n    match_count = 0\n    pattern_size = len(str1)\n    for i in range(pattern_size):\n        if str1[i] == str2[i]:\n            match_count += 1\n    \n    return match_count\n    \ndef remove_first_occurence_non_repeating_character(str1):\n    '''\n    Write a function to remove the first occurrence of a non-repeating character from a given string.\n    '''\n    if str1 == '':\n        return str1\n    \n    index = 0\n    for i in range(len(str1)):\n        if str1[i] not in str1[:i]:\n            index = i\n            break\n    \n    return str1[:index]\n    \ndef remove_first_occurence_non_repeating_character_2(str1):\n    '''\n    Write a function to remove the first occurrence of a non-repeating character from a given string.\n    '''\n    if str1 == '':\n        return str1\n    \n    for i in range(len(str1)):\n        if str1[i] in str1[:i]:\n            str1 = str1[:i]\n            break\n    \n    return str1\n    \ndef replace_every_3rd_character(str1):\n    '''\n    Write a function to replace every third character in a string with a character of the same type.\n    '''\n    if str1 == '':\n        return str1\n    \n    for i in range(len(str1)):\n        if i % 3 == 0:\n            str1 = str1[:i] + str1[i+1:i+1] + str1[i]\n    \n    return str1\n    \ndef replace_every_3rd_character_2(str1):\n    '''\n    Write a function to replace every third character in a string with a character of the same type.\n    '''\n    if str1 == '':\n        return str1\n    \n    for i in range(len(str1)):\n        if i % 3 == 0:\n            str1 = str1[:i] + str1[i+1:i+1]\n    \n    return str1\n    \ndef find_longest_string(str1):\n    '''\n    Write a function to find the length of the longest substring of given string.\n    '''\n    if str1 == '':\n        return 0\n    \n    temp = str1[:]\n    max_length = 0\n    \n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if j >= i:\n                if temp[i:j+1] == temp[i:j+1][::-1]:\n                    temp = temp[:i] + temp[j+1:]\n                    max_length = max(max_length, len(temp))\n                    break\n    \n    return max_length\n    \ndef find_longest_string_2(str1):\n    '''\n    Write a function to find the length of the longest substring of given string.\n    '''\n    if str1 == '':\n        return 0\n    \n    longest_substring = str1[:]\n    max_length = len(longest_substring)\n    \n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if j >= i:\n                if longest_substring[i:j+1] == longest_substring[i:j+1][::-1]:\n                    if len(longest_substring) > max_length:\n                        max_length = len(longest_substring)\n                        longest_substring = longest_substring[:i] + longest_substring[j+1:]\n                    break\n    \n    return max_length\n    \ndef find_shortest_string(str1):\n    '''\n    Write a function to find the length of the shortest substring of given string.\n    '''\n    if str1 == '':\n        return 0\n    \n    temp = str1[:]\n    min_length = len(temp)\n    \n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if j >= i:\n                if temp[i:j+1] == temp[i:j+1][::-1]:\n                    temp = temp[:i] + temp[j+1:]\n                    min_length = min(min_length, len(temp))\n                    break\n    \n    return min_length\n    \ndef find_shortest_string_2(str1):\n    '''\n    Write a function to find the length of the shortest substring of given string.\n    '''\n    if str1 == '':\n        return 0\n    \n    min_length = len(str1)\n    \n    for i in range(len(str1)):\n        for j in range(len(str1)):\n            if j >= i:\n                if str1[i:j+1] == str1[i:j+1][::-1]:\n                    if len(str1[i:j+1]) < min_length:\n                        min_length = len(str1[i:j+1])\n                        break\n    \n    return min_length\n    \ndef string_compression(str1):\n    '''\n    Write a function to perform basic string compression using the counts of repeated characters.\n    '''\n    if str1 == '':\n        return str1\n    \n    compressed_string = ''\n    \n    char_dict = {}\n    \n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n            \n    for char, count in char_dict.items():\n        compressed_string += char + str(count)\n    \n    if len(compressed_string) > len(str1):\n        return compressed_string\n    else:\n        return str1\n    \ndef string_compression_2(str1):\n    '''\n    Write a function to perform basic string compression using the counts of repeated characters.\n    '''\n    if str1 == '':\n        return str1\n    \n    compressed_string = ''\n    \n    char_dict = {}\n    \n    for char in str1:\n        if char in char_dict:\n            char_dict[char] += 1\n        else:\n            char_dict[char] = 1\n    \n    for char, count in char_dict.items():\n        compressed_string += char + str(count)\n    \n    if len(compressed_string) > len(str1):\n        return compressed_string\n    else:\n        return str1\n    \ndef is_balanced(str1):\n    '''\n    Write a function to check if a string has balanced usage of parenthesis.\n    '''\n    if str1 == '':\n        return True\n    \n    stack = []\n    \n    for char in str1:\n        if char == ')':\n            if stack:\n                i"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    rev_list = []\n    res = 0\n    for i in range(len(test_list)):\n        rev_list.append(test_list[i][::-1])\n    for j in range(len(rev_list)):\n        for k in range(j+1, len(rev_list)):\n            if rev_list[j] == rev_list[k]:\n                res += 1\n    return res\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    pairs = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if j >= i and test_list[i] == test_list[j][::-1]:\n                pairs += 1\n    return pairs\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    def get_reverse_string(s):\n        return s[::-1]\n    \n    count = 0\n    \n    for i in range(len(test_list)):\n        for j in range(i, len(test_list)):\n            \n            rev_s1 = get_reverse_string(test_list[i])\n            rev_s2 = get_reverse_string(test_list[j])\n            \n            if (rev_s1 == rev_s2):\n                count += 1\n                \n    return count\n    "
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    count = 0\n    if len(test_list) < 2:\n        return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # remove the spaces\n    test_list = test_list.split(\" \")\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def reverse_count_pairs(lst):\n        s = {}\n        for i in range(len(lst)):\n            x = lst[i]\n            if x in s:\n                s[x] += 1\n            else:\n                s[x] = 1\n        return s\n    \n    lst = ['geeksforgeeks', 'geeks', 'for', 'geek']\n    # output: {'geeks': 2, 'geeksforgeeks': 1, 'geek': 1, 'forgeeks': 1}\n    count = reverse_count_pairs(lst)\n    print(count)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    if test_list == None:\n        return None\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #initializing the count to zero\n    count=0\n    #traversing the string list\n    for str in test_list:\n        #splitting the string list into two halves\n        str_list=str.split()\n        #going left to right\n        for i in range(0,len(str_list)-1):\n            #checking if the reverse is present\n            if (str_list[i]+str_list[i+1])==\"reverse\":\n                #incrementing the count\n                count+=1\n        #going right to left\n        for i in range(0,len(str_list)-1):\n            #checking if the reverse is present\n            if (str_list[i+1]+str_list[i])==\"reverse\":\n                #incrementing the count\n                count+=1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_pair = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if test_list[i] == test_list[j] and i!= j:\n                reverse_pair += 1\n    return reverse_pair\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    dict = {}\n    for elem in list1:\n        if elem not in dict:\n            dict[elem] = 1\n        else:\n            dict[elem] += 1\n    return dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    def my_dict(a):\n        b = {}\n        for i in range(len(a)):\n            if a[i] in b:\n                b[a[i]] = b[a[i]] + 1\n            else:\n                b[a[i]] = 1\n        return b\n    return my_dict(list1)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return dict.fromkeys(list1,tuple(list1)).values()\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    count_dict = {}\n    \n    for item in list1:\n        if tuple(item) not in count_dict.keys():\n            count_dict[tuple(item)] = 1\n        else:\n            count_dict[tuple(item)] += 1\n    \n    return count_dict\n    \ndef count_sublists(list1, list2):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    count_dict = {}\n    \n    for item in list1:\n        if tuple(item) not in count_dict.keys():\n            count_dict[tuple(item)] = 1\n        else:\n            count_dict[tuple(item)] += 1\n    \n    for item in list2:\n        if tuple(item) not in count_dict.keys():\n            count_dict[tuple(item)] = 1\n        else:\n            count_dict[tuple(item)] += 1\n    \n    return count_dict\n    \ndef get_max_number_of_common_sublists(list1, list2):\n    '''\n    Write a function that counts the number of common sublists. If there are no common sublists return -1.\n    '''\n    \n    # for each list in list1, count the number of elements in that list that are common with list2\n    count_dict1 = unique_sublists(list1)\n    count_dict2 = unique_sublists(list2)\n    \n    # if there is no common sublist, return -1\n    if count_dict1 == count_dict2:\n        return -1\n    \n    # for each unique common sublist, count the number of its occurencies in list1 and list2\n    common_sublists = []\n    for item in count_dict1.keys():\n        if item in count_dict2.keys():\n            common_sublists.append(item)\n    \n    # if there are no common sublists, return -1\n    if len(common_sublists) == 0:\n        return -1\n    \n    # count the number of occurencies in each list of common sublists\n    total_common_sublists = {}\n    for item in common_sublists:\n        total_common_sublists[item] = count_dict1[item] + count_dict2[item]\n    \n    # get the maximum number of occurencies in the lists\n    max_occurencies = max(total_common_sublists.values())\n    \n    # return the number of occurencies of the maximum number\n    return max_occurencies\n    \ndef get_max_common_sublist(list1, list2):\n    '''\n    Write a function that counts the number of common sublists. If there are no common sublists return -1.\n    '''\n    \n    # get the number of common sublists from the function get_max_number_of_common_sublists\n    max_occurencies = get_max_number_of_common_sublists(list1, list2)\n    \n    # if there are no common sublists, return -1\n    if max_occurencies == -1:\n        return -1\n    \n    # return the number of occurencies of the maximum number\n    return max_occurencies\n    \ndef get_max_common_sublist_from_files(file1, file2):\n    '''\n    Write a function that counts the number of common sublists. If there are no common sublists return -1.\n    '''\n    \n    with open(file1) as f1:\n        list1 = f1.read().splitlines()\n    with open(file2) as f2:\n        list2 = f2.read().splitlines()\n    \n    max_occurencies = get_max_common_sublist(list1, list2)\n    \n    return max_occurencies\n    \ndef count_substrings(string):\n    '''\n    Write a function that counts the number of substrings of a given string.\n    '''\n    \n    count = 0\n    \n    # for each index i in the range of len(string)\n    for i in range(len(string)):\n        # for each index j in range of len(string)\n        for j in range(len(string)):\n            # if string[i] == string[j]\n            if string[i] == string[j]:\n                # add 1 to the count variable\n                count += 1\n    \n    return count\n    \ndef get_number_of_substrings(string):\n    '''\n    Write a function that counts the number of substrings of a given string.\n    '''\n    \n    # count the number of substrings\n    count = 0\n    \n    # for each index i in the range of len(string)\n    for i in range(len(string)):\n        # for each index j in range of len(string)\n        for j in range(len(string)):\n            # if string[i] == string[j]\n            if string[i] == string[j]:\n                # add 1 to the count variable\n                count += 1\n    \n    # return the number of substrings\n    return count\n    \ndef get_number_of_substrings_from_files(file1, file2):\n    '''\n    Write a function that counts the number of substrings of a given string.\n    '''\n    \n    with open(file1) as f1:\n        string1 = f1.read()\n    with open(file2) as f2:\n        string2 = f2.read()\n    \n    count_1 = get_number_of_substrings(string1)\n    count_2 = get_number_of_substrings(string2)\n    \n    return max(count_1, count_2)\n    \ndef check_valid_parentheses(string):\n    '''\n    Write a function that checks if a given string contains only valid parentheses.\n    '''\n    \n    count = 0\n    # for each character in the string\n    for character in string:\n        # if the character is )\n        if character == ')':\n            # decrement the count variable\n            count -= 1\n        # if the character is (\n        elif character == '(':\n            # increment the count variable\n            count += 1\n        # if the count variable is 0\n        if count == 0:\n            return True\n    \n    # if the count variable is not zero, return False\n    return False\n    \ndef check_valid_parentheses_from_files(file1, file2):\n    '''\n    Write a function that checks if a given string contains only valid parentheses.\n    '''\n    \n    with open(file1) as f1:\n        string1 = f1.read()\n    with open(file2) as f2:\n        string2 = f2.read()\n    \n    count_1 = check_valid_parentheses(string1)\n    count_2 = check_valid_parentheses(string2)\n    \n    return count_1 and count_2\n    \ndef count_triangles(a, b, c):\n    '''\n    Write a function that returns the number of triangles that exist with the given sides.\n    '''\n    \n    # initialise count variable\n    count = 0\n    \n    # check if triangle exists\n    if a + b > c and a + c > b and b + c > a:\n        # check if triangle exists\n        if a * a + b * b == c * c or a * a + c * c == b * b or b * b + c * c == a * a:\n            # increment count\n            count += 1\n    \n    # return the count\n    return count\n    \ndef count_triangles_from_files(file1, file2):\n    '''\n    Write a function that returns the number of triangles that exist with the given sides.\n    '''\n    \n    # check if files exists\n    if os.path.exists(file1) and os.path.exists(file2):\n        # read files\n        with open(file1) as f1:\n            string1 = f1.read()\n        with open(file2) as f2:\n            string2 = f2.read()\n        \n        # count triangles\n        count"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    output = {}\n    output_copy = []\n    for i in range(len(list1)):\n        temp = []\n        for j in range(len(list1)):\n            if i == j:\n                pass\n            elif list1[j] not in temp:\n                temp.append(list1[j])\n            else:\n                pass\n        output[tuple(temp)] = output.get(tuple(temp),0)+1\n        output_copy.append(tuple(temp))\n    output_copy = set(output_copy)\n    output_copy = list(output_copy)\n    return output\n    \nprint(unique_sublists([[2,4],[3,6,7],[9],[1,3,4,8,9],[2,5,7]]))\n'''"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if not isinstance(list1, list):\n        raise TypeError(\"Input should be a list\")\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    unique = {}\n    for i in list1:\n        if i in unique.keys():\n            unique[i] += 1\n        else:\n            unique[i] = 1\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    my_dict = {}\n    for i in list1:\n        if i not in my_dict:\n            my_dict[tuple(i)] = 1\n        else:\n            my_dict[tuple(i)] += 1\n    return my_dict\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #\n    #\n    #\n    \n    \n    return False\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    # First convert the list into a tuple\n    # Now create a dictionary\n    # Now iterate through each element in the tuple and add the key to the dictionary and the value to 1\n    # Convert the dictionary back into a list and return it\n    \n    unique_sublists = {}\n    count = 1\n    for i in list1:\n        if type(i) is not tuple:\n            continue\n        else:\n            for j in i:\n                if j in unique_sublists:\n                    unique_sublists[j] = unique_sublists.get(j, 0) + 1\n                else:\n                    unique_sublists[j] = 1\n    return unique_sublists\n    \n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if type(num)!= str:\n        return False\n    # Without the '+' operation, this is of course not correct because a string may contain other symbols\n    # (e.g., a period). However, the latter is a valid decimal number, so it's not a problem.\n    return num == float(num)\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if (num == \"0\") or (num == \"00\"):\n        return False\n    else:\n        num = num.replace(\".\", \"\")\n        num = num.replace(\",\", \"\")\n        return True if num.isdigit() else False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return num == num[::-1] and num.find('.') > 0\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    #write your solution here\n    #test\n    #print(is_decimal(\"5.1\"))\n    #print(is_decimal(\"-5.1\"))\n    #print(is_decimal(\"-5.1.1\"))\n    #print(is_decimal(\"-5.1.\"))\n    #print(is_decimal(\"-5.1.01\"))\n    #print(is_decimal(\"-5.1.0.1\"))\n    #print(is_decimal(\"-5.1.0.1.1\"))\n    #print(is_decimal(\"-5.1.0.1.1.1\"))\n    #print(is_decimal(\"-5.1.0.1.1.1.1.1\"))\n    #print(is_decimal(\"-5.1.0.1.1.1.1.1.1.1.1\"))\n    #print(is_decimal(\"-5.1.0.1.1.1.1.1.1.1.1.1.1.1.1\"))\n    #print(is_decimal(\"-5.1.0.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1.1"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if \".\" in num:\n        num1 = num.split(\".\")\n        for i in num1:\n            if i[0] == \"-\":\n                if i.find(\"-\") > 0 and i.find(\"-\") < 2:\n                    return False\n        for i in num1:\n            if not i.isdigit():\n                return False\n        return True\n    elif num[0] == \"-\":\n        return False\n    for i in num:\n        if i == \".\":\n            return False\n        if not i.isdigit():\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(arr)<=1:\n        return True\n    elif arr.count(arr[0])==len(arr):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    i = 0\n    n = len(arr)\n    if n > 0:\n        if n == 1:\n            return True\n        for x in arr:\n            if x == i:\n                i = i + 1\n            else:\n                return False\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    if len(set(arr)) == 1:\n        print(\"\\nYes\")\n    else:\n        print(\"\\nNo\")\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_elements = set()\n    for num in arr:\n        if num in set_elements:\n            return False\n        else:\n            set_elements.add(num)\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # List comprehension to find the unique element\n    # return len(set(arr))==1\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # arr = [0, 1, 2, 2, 3, 3, 4, 5, 6, 7]\n    # arr = [1, 2, 2, 2, 2, 2, 2, 2, 2, 2]\n    # arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # arr = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\n    # arr = [1]\n    # arr = []\n    # print(unique_Element(arr))\n    if len(arr) == 0:\n        return 0\n    d = {}\n    for i in arr:\n        if i not in d:\n            d[i] = 1\n        else:\n            return 0\n    return 1\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    count = {}\n    for i in range(n):\n        if arr[i] in count:\n            count[arr[i]] += 1\n        else:\n            count[arr[i]] = 1\n    for i in count:\n        if count[i] == 1:\n            return i\n    return -1\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    if len(arr) == 0:\n        return False\n    for num in arr:\n        if num in d:\n            return False\n        else:\n            d[num] = 1\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    arr.sort()\n    print(arr)\n    for i in range(1,len(arr)):\n        if arr[i]==arr[i-1]:\n            return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    def isUnique(arr):\n        seen = set()\n        for num in arr:\n            if num in seen:\n                return False\n            seen.add(num)\n        return True\n    print(isUnique(arr))\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3%2==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    for x in range(1,13):\n        if monthnum3 == x:\n            print(\"True\")\n        else:\n            print(\"False\")\ncheck_monthnumber_number(3)\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == '4' or monthnum3 == '6' or monthnum3 == '9' or monthnum3 == '11':\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    for i in monthnum3:\n        if 30 < i or i == 0:\n            return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3==1 or monthnum3==4 or monthnum3==7 or monthnum3==10 or monthnum3==12:\n        return \"30 days\"\n    elif monthnum3==2:\n        return \"28 days\"\n    elif monthnum3 in range(5,8):\n        return \"31 days\"\n    else:\n        return \"30 days\"\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 4 or monthnum3 == 6 or monthnum3 == 9 or monthnum3 == 11:\n        return 1\n    else:\n        return 0\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3-1)%2 == 0:\n        print('It is an even month')\n    else:\n        print('It is an odd month')\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12):\n        return True\n    else:\n        return False\n    \ndef check_month_number_decade(monthnum4):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if(monthnum4 == 1 or monthnum4 == 3 or monthnum4 == 5 or monthnum4 == 7 or monthnum4 == 8 or monthnum4 == 10 or monthnum4 == 12):\n        return True\n    else:\n        return False\n    \ndef check_daynumber_number(daynum5):\n    '''\n    Write a function to check whether the given day number contains 31 days or not. Months are given as number from 1 to 12.\n    '''\n    if(daynum5 == 1 or daynum5 == 3 or daynum5 == 5 or daynum5 == 7 or daynum5 == 8 or daynum5 == 10 or daynum5 == 12):\n        return True\n    else:\n        return False\n    \ndef check_day_number_decade(daynum6):\n    '''\n    Write a function to check whether the given day number contains 31 days or not. Months are given as number from 1 to 12.\n    '''\n    if(daynum6 == 1 or daynum6 == 3 or daynum6 == 5 or daynum6 == 7 or daynum6 == 8 or daynum6 == 10 or daynum6 == 12):\n        return True\n    else:\n        return False\n    \ndef check_weekday_number(weekday7):\n    '''\n    Write a function to check whether the given weekday number contains 7 days or not.\n    '''\n    if(weekday7 == 1 or weekday7 == 2 or weekday7 == 3 or weekday7 == 4 or weekday7 == 5 or weekday7 == 6):\n        return True\n    else:\n        return False\n    \ndef check_weekday_number_decade(weekday8):\n    '''\n    Write a function to check whether the given weekday number contains 7 days or not.\n    '''\n    if(weekday8 == 1 or weekday8 == 2 or weekday8 == 3 or weekday8 == 4 or weekday8 == 5 or weekday8 == 6):\n        return True\n    else:\n        return False\n    \ndef check_week_number(weeknum9):\n    '''\n    Write a function to check whether the given week number contains 52 days or not.\n    '''\n    if(weeknum9 == 1 or weeknum9 == 2 or weeknum9 == 3 or weeknum9 == 4 or weeknum9 == 5 or weeknum9 == 6 or weeknum9 == 7 or weeknum9 == 8 or weeknum9 == 9 or weeknum9 == 10 or weeknum9 == 11 or weeknum9 == 12 or weeknum9 == 13 or weeknum9 == 14 or weeknum9 == 15 or weeknum9 == 16 or weeknum9 == 17 or weeknum9 == 18 or weeknum9 == 19 or weeknum9 == 20 or weeknum9 == 21 or weeknum9 == 22 or weeknum9 == 23 or weeknum9 == 24 or weeknum9 == 25 or weeknum9 == 26 or weeknum9 == 27 or weeknum9 == 28 or weeknum9 == 29 or weeknum9 == 30 or weeknum9 == 31 or weeknum9 == 32 or weeknum9 == 33 or weeknum9 == 34 or weeknum9 == 35 or weeknum9 == 36 or weeknum9 == 37 or weeknum9 == 38 or weeknum9 == 39 or weeknum9 == 40 or weeknum9 == 41 or weeknum9 == 42 or weeknum9 == 43 or weeknum9 == 44 or weeknum9 == 45 or weeknum9 == 46 or weeknum9 == 47 or weeknum9 == 48 or weeknum9 == 49 or weeknum9 == 50 or weeknum9 == 51 or weeknum9 == 52 or weeknum9 == 53 or weeknum9 == 54 or weeknum9 == 55 or weeknum9 == 56 or weeknum9 == 57 or weeknum9 == 58 or weeknum9 == 59 or weeknum9 == 60 or weeknum9 == 61 or weeknum9 == 62 or weeknum9 == 63 or weeknum9 == 64 or weeknum9 == 65 or weeknum9 == 66 or weeknum9 == 67 or weeknum9 == 68 or weeknum9 == 69 or weeknum9 == 70 or weeknum9 == 71 or weeknum9 == 72 or weeknum9 == 73 or weeknum9 == 74 or weeknum9 == 75 or weeknum9 == 76 or weeknum9 == 77 or weeknum9 == 78 or weeknum9 == 79 or weeknum9 == 80 or weeknum9 == 81 or weeknum9 == 82 or weeknum9 == 83 or weeknum9 == 84 or weeknum9 == 85 or weeknum9 == 86 or weeknum9 == 87 or weeknum9 == 88 or weeknum9 == 89 or weeknum9 == 90 or weeknum9 == 91 or weeknum9 == 92 or weeknum9 == 93 or weeknum9 == 94 or weeknum9 == 95 or weeknum9 == 96 or weeknum9 == 97 or weeknum9 == 98 or weeknum9 == 99 or weeknum9 == 100):\n        return True\n    else:\n        return False\n    \ndef check_week_number_decade(weeknum10):\n    '''\n    Write a function to check whether the given week number contains 52 days or not.\n    '''\n    if(weeknum10 == 1 or weeknum10 == 2 or weeknum10 == 3 or weeknum10 == 4 or weeknum10 == 5 or weeknum10 == 6 or weeknum10 == 7 or weeknum10 == 8 or weeknum10 == 9 or weeknum10 == 10 or weeknum10 == 11 or weeknum10 == 12 or weeknum10 == 13 or weeknum10 == 14 or weeknum10 == 15 or weeknum10 == 16 or weeknum10 == 17 or weeknum10 == 18 or weeknum10 == 19 or weeknum10 == 20 or weeknum10 == 21 or weeknum10 == 22 or weeknum10 == 23 or weeknum10 == 24 or weeknum10 == 25 or weeknum10 == 26 or weeknum10 == 27 or weeknum10 == 28 or weeknum10 == 29 or weeknum10 == 30 or weeknum10 == 31 or weeknum10 == 32 or weeknum10 == 33 or weeknum10 == 34 or weeknum10 == 35 or weeknum10 == 36 or weeknum10 == 37 or weeknum10 == 38 or weeknum10 == 39 or weeknum10 == 40 or weeknum10 == 41 or weeknum10 == 42 or weeknum10 == 43 or weeknum10 == 44 or weeknum10 == 45 or weeknum10 == 46 or weeknum10 == 47 or weeknum10 == 48 or weeknum10 == 49 or weeknum10 == 50 or weeknum10 == 51 or weeknum10 == 52 or weeknum10 == 53 or weeknum10 == 54 or weeknum10 == 55 or weeknum10 == 56 or weeknum10 == 57 or weeknum10 == 58 or weeknum10 == 59 or weeknum10 == 60 or weeknum10 == 61 or weeknum10 == 62 or weeknum10 == 63 or weeknum10 == 64 or weeknum10 == 65 or weeknum10 == 66 or weeknum10 == 67 or weeknum10 == 68 or weeknum10 == 69 or weeknum10 == 70 or weeknum10 == 71 or weeknum10 == 72 or weeknum10 == 73 or weeknum10 == 74 or weeknum10 == 75 or weeknum10 == 76 or weeknum10 == 77 or weeknum10 == 78 or weeknum10 == 79 or weeknum10 == 80 or weeknum10 == 81 or weeknum10 == 82 or weeknum10 == 83 or weeknum10 == 84 or weeknum10 == 85 or weeknum10 == 86 or weeknum10 == 87 or weeknum10 == 88 or weeknum10 == 89 or weeknum10 == 90 or weeknum10 == 91 or weeknum10 == 92 or weeknum10 == 93 or weeknum10 == 94 or weeknum10 == 95 or weeknum10 == 96 or weeknum10 == 97 or weeknum10 == 98 or weeknum10 == 99 or weeknum10 == 100):\n        return True\n    else:\n        return False\n    \ndef check_year_number(yearnum11):\n    '''\n    Write a function to check whether the given year number contains 12 months or not.\n    '''\n    if(yearnum11 == 1 or yearnum11 == 3 or yearnum11 == 5 or yearnum11 == 7 or yearnum11 == 8 or yearnum11 == 10 or yearnum11 == 12):\n        return True\n    else:\n        return False\n    \ndef check_year_number_decade(yearnum12):\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 1 or monthnum3 == 3 or monthnum3 == 5 or monthnum3 == 7 or monthnum3 == 8 or monthnum3 == 10 or monthnum3 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    print(monthnum3 % 30 == 0)\n    return monthnum3 % 30 == 0\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    minimum_diff = float('inf')\n    left = 0\n    right = 0\n    arr.sort()\n    for i in range(len(arr)):\n        if (i!=0) :\n            minimum_diff = min(minimum_diff,abs(arr[i]-arr[i-1]))\n    for i in range(len(arr)-1):\n        left_diff = abs(arr[i]-arr[i+1])\n        if (left_diff < minimum_diff):\n            minimum_diff = left_diff\n    return minimum_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 0: \n        return False\n    elif n == 1: \n        return arr[0] - arr[1] \n    else: \n        return min(arr[n-1] - arr[n-2], arr[n-1] - arr[n-3]) \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr)<2:\n        return -1\n    arr.sort()\n    min_diff = arr[1]-arr[0]\n    for i in range(0,n-1):\n        diff = arr[i+1]-arr[i]\n        if diff<min_diff:\n            min_diff = diff\n    return min_diff\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    i = 0\n    for j in range(1,n):\n        if abs(arr[j]-arr[i])<min_diff:\n            min_diff = abs(arr[j]-arr[i])\n        if arr[j]<arr[i]:\n            i = j\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n == 1:\n        return\n    if n == 2:\n        return abs(arr[0] - arr[1])\n    minimum = min(arr[0], arr[1])\n    if arr[0] > arr[1]:\n        if minimum < arr[1] - arr[0]:\n            minimum = arr[1] - arr[0]\n    if arr[0] < arr[1]:\n        if minimum < arr[0] - arr[1]:\n            minimum = arr[0] - arr[1]\n    for i in range(2,n):\n        if arr[i] < arr[0]:\n            if minimum < arr[i] - arr[0]:\n                minimum = arr[i] - arr[0]\n        if arr[i] > arr[1]:\n            if minimum < arr[1] - arr[i]:\n                minimum = arr[1] - arr[i]\n    return minimum\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        min_diff = min(min_diff, arr[i+1]-arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr = sorted(arr)\n    min_diff = float(\"inf\")\n    for i in range(len(arr)-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if len(arr)<2:\n        return \"Invalid Input\"\n    if n>len(arr):\n        return \"Invalid Input\"\n    if n==1:\n        return arr[0]-1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    print(\"the array is\",arr)\n    arr.sort()\n    diff_min = arr[0] - arr[1]\n    if (n < 3):\n        return diff_min\n    for i in range(1,n-1):\n        diff = arr[i] - arr[i-1]\n        if(diff < diff_min):\n            diff_min = diff\n    return diff_min\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float('inf')\n    min_pairs = []\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            diff = arr[i] - arr[j]\n            if(diff < min_diff):\n                min_diff = diff\n                min_pairs = [[arr[i],arr[j]],min_diff]\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n    \n    \ndef password_validation(password):\n    '''\n    Write a python function to validate a password\n    '''\n    count_lower = number_ctr(password)\n    count_upper = number_ctr(password)\n    count_number = number_ctr(password)\n    count_special = number_ctr(password)\n    if (count_lower >= 1) and (count_upper >= 1) and (count_number >= 1) and (count_special >= 1):\n        return True\n    else:\n        return False\n        \n        \ndef age_validation(age):\n    '''\n    Write a python function to validate an age.\n    '''\n    if (int(age) >= 18) and (int(age) <= 60):\n        return True\n    else:\n        return False\n        \n        \ndef gender_validation(gender):\n    '''\n    Write a python function to validate a gender.\n    '''\n    if (gender =='male'):\n        return True\n    elif (gender == 'female'):\n        return True\n    else:\n        return False\n        \n        \ndef gen_str_1():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(l)\n    \n        \ndef gen_str_2():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(sorted(l))\n    \n    \ndef gen_str_3():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(sorted(l, reverse = True))\n    \n    \ndef gen_str_4():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(l)\n    \n    \ndef gen_str_5():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(reversed(l))\n    \n    \ndef gen_str_6():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(reversed(sorted(l)))\n    \n    \ndef gen_str_7():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(sorted(l, reverse = True))\n    \n    \ndef gen_str_8():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(l)\n    \n    \ndef gen_str_9():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(reversed(l))\n    \n    \ndef gen_str_10():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(reversed(sorted(l)))\n    \n    \ndef gen_str_11():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(sorted(l, reverse = True))\n    \n    \ndef gen_str_12():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(l)\n    \n    \ndef gen_str_13():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(reversed(l))\n    \n    \ndef gen_str_14():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(reversed(sorted(l)))\n    \n    \ndef gen_str_15():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(sorted(l, reverse = True))\n    \n    \ndef gen_str_16():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(l)\n    \n    \ndef gen_str_17():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(reversed(sorted(l)))\n    \n    \ndef gen_str_18():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(reversed(sorted(l, reverse = True)))\n    \n    \ndef gen_str_19():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(sorted(l, reverse = True))\n    \n    \ndef gen_str_20():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(sorted(l))\n    \n    \ndef gen_str_21():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(reversed(sorted(l)))\n    \n    \ndef gen_str_22():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(reversed(sorted(l, reverse = True)))\n    \n    \ndef gen_str_23():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(l)\n    \n    \ndef gen_str_24():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(reversed(l))\n    \n    \ndef gen_str_25():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '''\n    l = ['a', 'b', 'c']\n    return \"\".join(l)\n    \n    \ndef gen_str_26():\n    '''\n    Write a python function to generate a string with characters (a, b, c) only.\n    '"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count=0\n    for i in str:\n        if i.isdigit():\n            count=count+1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    return len(str)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    result = 0\n    for i in range(0, len(str)):\n        if str[i].isdigit():\n            result += 1\n    return result\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if(type(str) == str):\n        number = 0\n        for i in str:\n            if(i.isdigit()):\n                number += 1\n        return number\n    else:\n        return -1\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num=0\n    for i in str:\n        if (i>='0') and (i<='9'):\n            num+=1\n    return num\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n    \ndef list_ctr(str):\n    '''\n    Write a python function to count number of letters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    return count\n    \ndef string_ctr(str):\n    '''\n    Write a python function to count number of characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isalpha() or i.isdigit() or i =='':\n            count += 1\n    return count\n    \ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(str) == 0:\n        return True\n    else:\n        if str[0].lower()!= str[len(str)-1].lower():\n            return False\n        else:\n            return is_palindrome(str[1:-1])\n    \ndef is_palindrome_2(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(str) < 2:\n        return True\n    else:\n        if str[0].lower()!= str[len(str)-1].lower():\n            return False\n        else:\n            return is_palindrome_2(str[1:-1])\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    if isinstance(str,str):\n        return len(str)\n    return 0\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n<=1:\n        return 1\n    \n    # since there are n-1 \n    # polite numbers, \n    # we can increase the range by one\n    # at every iteration.\n    polite = 1\n    for i in range(2, n+1):\n        # as the number of polite numbers\n        # is increasing in increasing order \n        polite = polite*i\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s=n+1\n    while(s!=0):\n        s=s-1\n        if(n%s==0):\n            return n\n        n=n//s\n    return -1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    num = 1\n    count = 0\n    while True:\n        if num == n:\n            break\n        if (num % 2 == 0):\n            num = num * 3 + 1\n        else:\n            num = num * 2 + 1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = n - 1\n    # code here\n    n = n +1\n    if(n%2 ==0):\n        n = n//2\n    else:\n        n = n//2\n        n = 3*n + 1\n    return n\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # code here \n    if n == 0:\n        return n\n    for i in range(n):\n        if i == 0:\n            x = 2\n        else:\n            x = ((n + 1) * i) + 1\n        if x == n and x!= 0:\n            print(x)\n        elif x % 2!= 0:\n            print(x)\n        else:\n            print(x)\n            \nis_polite(int(input())"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    print(\"n\\t\\t\\tpolite number\")\n    print(\"--------------------------------------------------------------\")\n    n = int(input())\n    s = 1\n    x = 1\n    i = 1\n    while(i<=n):\n        print(i,s)\n        s = s*x\n        x = x+1\n        i = i+1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n==1:\n        return 2\n    i = 3\n    while True: \n        if is_polite_fact(i) == True:\n            return i\n        i+=1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    return (n + 1) * n // 2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 5\n    if n == 4:\n        return 12\n    if n == 5:\n        return 20\n    if n == 6:\n        return 22\n    if n == 7:\n        return 23\n    if n == 8:\n        return 24\n    if n == 9:\n        return 25\n    if n == 10:\n        return 26\n    if n == 11:\n        return 27\n    if n == 12:\n        return 28\n    if n == 13:\n        return 29\n    if n == 14:\n        return 30\n    if n == 15:\n        return 31\n    if n == 16:\n        return 32\n    if n == 17:\n        return 33\n    if n == 18:\n        return 34\n    if n == 19:\n        return 35\n    if n == 20:\n        return 36\n    if n == 21:\n        return 37\n    if n == 22:\n        return 38\n    if n == 23:\n        return 39\n    if n == 24:\n        return 40\n    if n == 25:\n        return 41\n    if n == 26:\n        return 42\n    if n == 27:\n        return 43\n    if n == 28:\n        return 44\n    if n == 29:\n        return 45\n    if n == 30:\n        return 46\n    if n == 31:\n        return 47\n    if n == 32:\n        return 48\n    if n == 33:\n        return 49\n    if n == 34:\n        return 50\n    if n == 35:\n        return 51\n    if n == 36:\n        return 52\n    if n == 37:\n        return 53\n    if n == 38:\n        return 54\n    if n == 39:\n        return 55\n    if n == 40:\n        return 56\n    if n == 41:\n        return 57\n    if n == 42:\n        return 58\n    if n == 43:\n        return 59\n    if n == 44:\n        return 60\n    if n == 45:\n        return 61\n    if n == 46:\n        return 62\n    if n == 47:\n        return 63\n    if n == 48:\n        return 64\n    if n == 49:\n        return 65\n    if n == 50:\n        return 66\n    if n == 51:\n        return 67\n    if n == 52:\n        return 68\n    if n == 53:\n        return 69\n    if n == 54:\n        return 70\n    if n == 55:\n        return 71\n    if n == 56:\n        return 72\n    if n == 57:\n        return 73\n    if n == 58:\n        return 74\n    if n == 59:\n        return 75\n    if n == 60:\n        return 76\n    if n == 61:\n        return 77\n    if n == 62:\n        return 78\n    if n == 63:\n        return 79\n    if n == 64:\n        return 80\n    if n == 65:\n        return 81\n    if n == 66:\n        return 82\n    if n == 67:\n        return 83\n    if n == 68:\n        return 84\n    if n == 69:\n        return 85\n    if n == 70:\n        return 86\n    if n == 71:\n        return 87\n    if n == 72:\n        return 88\n    if n == 73:\n        return 89\n    if n == 74:\n        return 90\n    if n == 75:\n        return 91\n    if n == 76:\n        return 92\n    if n == 77:\n        return 93\n    if n == 78:\n        return 94\n    if n == 79:\n        return 95\n    if n == 80:\n        return 96\n    if n == 81:\n        return 97\n    if n == 82:\n        return 98\n    if n == 83:\n        return 99\n    if n == 84:\n        return 100\n    if n == 85:\n        return 101\n    if n == 86:\n        return 102\n    if n == 87:\n        return 103\n    if n == 88:\n        return 104\n    if n == 89:\n        return 105\n    if n == 90:\n        return 106\n    if n == 91:\n        return 107\n    if n == 92:\n        return 108\n    if n == 93:\n        return 109\n    if n == 94:\n        return 110\n    if n == 95:\n        return 111\n    if n == 96:\n        return 112\n    if n == 97:\n        return 113\n    if n == 98:\n        return 114\n    if n == 99:\n        return 115\n    if n == 100:\n        return 116\n    if n == 101:\n        return 117\n    if n == 102:\n        return 118\n    if n == 103:\n        return 119\n    if n == 104:\n        return 120\n    if n == 105:\n        return 121\n    if n == 106:\n        return 122\n    if n == 107:\n        return 123\n    if n == 108:\n        return 124\n    if n == 109:\n        return 125\n    if n == 110:\n        return 126\n    if n == 111:\n        return 127\n    if n == 112:\n        return 128\n    if n == 113:\n        return 129\n    if n == 114:\n        return 130\n    if n == 115:\n        return 131\n    if n == 116:\n        return 132\n    if n == 117:\n        return 133\n    if n == 118:\n        return 134\n    if n == 119:\n        return 135\n    if n == 120:\n        return 136\n    if n == 121:\n        return 137\n    if n == 122:\n        return 138\n    if n == 123:\n        return 139\n    if n == 124:\n        return 140\n    if n == 125:\n        return 141\n    if n == 126:\n        return 142\n    if n == 127:\n        return 143\n    if n == 128:\n        return 144\n    if n == 129:\n        return 145\n    if n == 130:\n        return 146\n    if n == 131:\n        return 147\n    if n == 132:\n        return 148\n    if n == 133:\n        return 149\n    if n == 134:\n        return 150\n    if n == 135:\n        return 151\n    if n == 136:\n        return 152\n    if n == 137:\n        return 153\n    if n == 138:\n        return 154\n    if n == 139:\n        return 155\n    if n == 140:\n        return 156\n    if n == 141:\n        return 157\n    if n == 142:\n        return 158\n    if n == 143:\n        return 159\n    if n == 144:\n        return 160\n    if n == 145:\n        return 161\n    if n == 146:\n        return 162\n    if n == 147:\n        return 163\n    if n == 148:\n        return 164\n    if n == 149:\n        return 165\n    if n == 150:\n        return 166\n    if n == 151:\n        return 167\n    if n == 152:\n        return 168\n    if n == 153:\n        return 169\n    if n == 154:\n        return 170\n    if n == 155:\n        return 171\n    if n == 156:\n        return 172\n    if n == 157:\n        return 173\n    if n == 158:\n        return 174\n    if n == 159:\n        return 175\n    if n == 160:\n        return 176\n    if n == 161:\n        return 177\n    if n == 162:\n        return 178\n    if n == 163:\n        return 179\n    if n == 164:\n        return 180\n    if n == 165:\n        return 181\n    if n == 166:\n        return 182\n    if n == 167:\n        return 183\n    if n == 168:\n        return 184\n    if n == 169:\n        return 185\n    if n == 170:\n        return 186\n    if n == 171:\n        return 187\n    if n == 172:\n        return 188\n    if n == 173:\n        return 189\n    if n == 174:\n        return 190\n    if n == 175:\n        return 191\n    if n == 176:\n        return 192\n    if n == 177:\n        return 193\n    if n == 178:\n        return 194\n    if n == 179:\n        return 195\n    if n == 180:\n        return 196\n    if n == 181:"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    polite_number = [] \n    for i in range(1,n+1): \n        polite_number.append(i) \n    return polite_number \ndef is_polite(n): \n    # Python program to demonstrate  \n    # nested function \n     \n    # define a function \n    def outer(n): \n         \n        # define a nested function \n        def inner(m): \n             \n            # return m*m \n            return m*m\n         \n        return inner \n     \n    # Driver code \n    ans = outer(n) \n    return ans \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n, \n    # and append squares of \n    # each number to the list \n    for i in range(1, n + 1): \n        squares.append(i * i) \n    # print list of squares \n    print(squares) \n    # return the squares \n    return squares \ndef is_polite(n):\n    # create an empty list \n    # to store squares of numbers \n    # in range from 1 to n \n    squares = [] \n     \n    # iterate from 1 to n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(len(l1)):\n        if i==len(l1)-1:\n            break\n        l2.append(l1[i:i+2])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    # Iterate through the list\n    for i in range(len(l1)):\n        # Extract the left and right indexes\n        left = i\n        right = left + 1\n        # Condition to check if the indexes are already consecutive\n        if right < len(l1):\n            # If they are then remove the left and right indexes\n            if abs(l1[left] - l1[right]) == 1:\n                del l1[left]\n                del l1[right - 1]\n        # If they are not then return the list\n    return l1\n    \n    \n    \n    \ndef find_odd_numbers(numbers):\n    '''\n    Write a function to find all odd numbers from a given list.\n    '''\n    # Iterate through the list\n    for i in range(len(numbers)):\n        # Extract the left and right indexes\n        left = i\n        right = left + 1\n        # Condition to check if the indexes are already consecutive\n        if right < len(numbers):\n            # If they are then remove the left and right indexes\n            if numbers[left] % 2 == 1:\n                del numbers[left]\n                del numbers[right - 1]\n    return numbers\n    \n    \n    \n    \ndef find_first_number_greater_than_n(l1, n):\n    '''\n    Write a function to return the first number in a list greater than a specified number.\n    '''\n    # Iterate through the list\n    for i in range(len(l1)):\n        # Extract the left and right indexes\n        left = i\n        right = left + 1\n        # Condition to check if the indexes are already consecutive\n        if right < len(l1):\n            # If they are then remove the left and right indexes\n            if l1[left] > n:\n                del l1[left]\n                del l1[right - 1]\n                return l1[0]\n    return -1\n    \n    \n    \n    \ndef common_elements(l1, l2):\n    '''\n    Write a function to return the common elements in 2 lists.\n    '''\n    # Iterate through the lists\n    for i in range(len(l1)):\n        # Extract the left and right indexes\n        left = i\n        right = left + 1\n        # Condition to check if the indexes are already consecutive\n        if right < len(l2):\n            # If they are then remove the left and right indexes\n            if l1[left] == l2[right]:\n                del l1[left]\n                del l2[right - 1]\n    return l1 + l2\n    \n    \n    \n    \ndef find_biggest_number(l1, l2, l3):\n    '''\n    Write a function to return the biggest of 3 numbers.\n    '''\n    # Check if the list is empty\n    if len(l1) == 0 and len(l2) == 0 and len(l3) == 0:\n        return -1\n    # Iterate through the list\n    for i in range(len(l1)):\n        # Extract the left and right indexes\n        left = i\n        right = left + 1\n        # Condition to check if the indexes are already consecutive\n        if right < len(l2):\n            # If they are then remove the left and right indexes\n            if l1[left] > l2[right]:\n                del l1[left]\n                del l2[right - 1]\n                return l1[0]\n        if right < len(l3):\n            # If they are then remove the left and right indexes\n            if l1[left] > l3[right]:\n                del l1[left]\n                del l3[right - 1]\n                return l1[0]\n        if right < len(l2) and l2[right] > l3[0]:\n            del l2[right - 1]\n            return l2[0]\n    return l1[0]\n    \n    \n    \n    \ndef find_strongest_number(l1, l2, l3):\n    '''\n    Write a function to return the number which is the maximum of the following two:\n    1. Return the second largest number in l1.\n    2. Return the second largest number in l2.\n    3. Return the second largest number in l3.\n    '''\n    # Check if the list is empty\n    if len(l1) == 0 and len(l2) == 0 and len(l3) == 0:\n        return -1\n    # Find the maximum of the list\n    max_1 = max(l1)\n    max_2 = max(l2)\n    max_3 = max(l3)\n    # Check which maximum is the highest\n    if max_1 > max_2 and max_1 > max_3:\n        return max_1\n    elif max_2 > max_1 and max_2 > max_3:\n        return max_2\n    else:\n        return max_3\n    \n    \n    \n    \ndef find_second_largest_number(l1, l2, l3):\n    '''\n    Write a function to return the second largest number in a list.\n    '''\n    # Check if the list is empty\n    if len(l1) == 0 and len(l2) == 0 and len(l3) == 0:\n        return -1\n    # Iterate through the list\n    for i in range(len(l1)):\n        # Extract the left and right indexes\n        left = i\n        right = left + 1\n        # Condition to check if the indexes are already consecutive\n        if right < len(l2):\n            # If they are then remove the left and right indexes\n            if l1[left] > l2[right]:\n                del l1[left]\n                del l2[right - 1]\n                return l1[0]\n        if right < len(l3):\n            # If they are then remove the left and right indexes\n            if l1[left] > l3[right]:\n                del l1[left]\n                del l3[right - 1]\n                return l1[0]\n        if right < len(l2) and l2[right] > l3[0]:\n            del l2[right - 1]\n            return l2[0]\n    return l1[0]\n    \n    \n    \n    \ndef find_sum_of_numbers(l1, l2):\n    '''\n    Write a function to return the sum of all numbers in a list.\n    '''\n    # Check if the list is empty\n    if len(l1) == 0 and len(l2) == 0:\n        return -1\n    # Iterate through the list\n    sum = 0\n    for i in range(len(l1)):\n        # Extract the left and right indexes\n        left = i\n        right = left + 1\n        # Condition to check if the indexes are already consecutive\n        if right < len(l2):\n            # If they are then remove the left and right indexes\n            sum = sum + l1[left] + l2[right]\n        if right < len(l2) and l2[right] > l1[left]:\n            del l2[right - 1]\n            return sum\n    return sum\n    \n    \n    \n    \ndef find_shortest_unique_string(l1):\n    '''\n    Write a function to return the shortest unique string from a list of strings.\n    '''\n    # Check if the list is empty\n    if len(l1) == 0:\n        return -1\n    # Iterate through the list\n    shortest = l1[0]\n    for i in range(len(l1)):\n        # Extract the left and right indexes\n        left = i\n        right = left + 1\n        # Condition to check if the indexes are already consecutive\n        if right < len(l1):\n            # If they are then remove the left and right indexes\n            if l1[left] == l1[right]:\n                del l1[left]\n                del l1[right - 1]\n    return shortest\n    \n    \n    \n    \ndef find_shortest_unique_substring(l1):\n    '''\n    Write a function to return the shortest unique substring from a list of strings.\n    '''\n    # Check if the list is empty\n    if len(l1) == 0:\n        return -1\n    # Iterate through the list\n    shortest = l1[0]\n    for i in range"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    length = len(l1)\n    if length < 2:\n        return []\n    \n    result = []\n    for i in range(length):\n        result.append(l1[i])\n        for j in range(i + 1, length):\n            result.append((l1[i], l1[j]))\n    return result\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x, y) for x in l1 for y in l1[x:x+2]]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    lst = []\n    for i in range(len(l1)-1):\n        lst.append((l1[i],l1[i+1]))\n    return lst\nprint(pair_wise([1,2,3,4,5]))\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i], l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    i = 0\n    out_list = []\n    while i < len(l1) - 1:\n        out_list.append((l1[i], l1[i + 1]))\n        i += 1\n    return out_list\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    res=[]\n    for i in range(len(l1)):\n        if i == len(l1)-1:\n            break\n        else:\n            res.append((l1[i],l1[i+1]))\n    return res\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    \n    pairs = []\n    \n    for i in range(0, len(l1)):\n        pairs.append([l1[i], l1[i+1]])\n    \n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    list_1 = []\n    list_2 = []\n    if len(l1) >= 1:\n        list_1 = list(l1)\n        for i in range(len(list_1) - 1):\n            list_2.append(list_1[i])\n            list_2.append(list_1[i + 1])\n        list_2.append(list_1[-1])\n        return list_2\n    else:\n        return None\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    arr.sort()\n    l = len(arr)\n    count = 0\n    for i in range(l-1):\n        for j in range(i+1,l):\n            if(arr[i]+arr[j]==sum):\n                count+=1\n    print(\"Number of pairs with sum \",sum,\":\",count)\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs_count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i]+arr[j] == sum:\n                pairs_count += 1\n    print(pairs_count)\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                result += 1\n    return result\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    cnt = 0\n    arr.sort()\n    for i in range(len(arr)-1):\n        if arr[i] + arr[i+1] == sum:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs = pairs + 1\n    return pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    pairs = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                pairs = pairs + 1\n    print(f\"number of pairs which sum is {sum}: {pairs}\")\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    number_pairs = 0\n    for index, val in enumerate(arr):\n        if sum-val in arr:\n            number_pairs += 1\n    return number_pairs\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    # num_pairs = 0\n    # for i in range(len(arr)):\n    #     for j in range(i+1, len(arr)):\n    #         if arr[i] + arr[j] == sum:\n    #             num_pairs += 1\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    d = []\n    for i in li1:\n        if i not in li2:\n            d.append(i)\n    for i in li2:\n        if i not in li1:\n            d.append(i)\n    return d\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = list(set(li1) - set(li2))\n    print(\"The Difference between the two list is : \", li_diff)\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for item in li1:\n        if item not in li2:\n            li3.append(item)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [i for i in li1 if i not in li2]\nprint(Diff([1,2,3],[2]))"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1)-set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in li1:\n        if i not in li2:\n            li3.append(i)\n    for i in li2:\n        if i not in li1:\n            li3.append(i)\n    return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_list = []\n    if(len(li1)==len(li2)):\n        for i in range(0,len(li1)):\n            if(li1[i]!=li2[i]):\n                li_list.append(li1[i])\n    else:\n        return None\n    return li_list\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = []\n    for i in li1:\n        if i not in li2:\n            li_diff.append(i)\n    return li_diff\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return list(set(li1) - set(li2))\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return li1.difference(li2)\n    # raise NotImplementedError\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s = 0\n    for i in range(1,n+1,2):\n        s += i**4\n    return s\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for num in range(1,n+1,2) :\n        sum += num**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2) : \n        sum = sum + i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if (i % 2)!= 0 : \n            sum += i**4\n    return sum\nprint(odd_num_sum(5)) \n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        if i % 2!= 0:\n            sum = sum + pow(i,4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if(i%2!=0):\n            s=s+i**2\n    print(s)\nodd_num_sum(5)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    if i % 2 == 1:\n    #        sum = sum + i ** 2\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of fifth power of first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i ** 5\n    #print (sum)\n    \n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #print (sum)\n    \n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    #sum = 0\n    #for i in range(1, n+1):\n    #    sum = sum + i\n    #prin"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    import math\n    odd = n\n    odd_sum = 0\n    while odd > 0 :\n        odd_sum += math.pow(odd,4)\n        odd -= 2\n    return odd_sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n,2):\n        sum = sum + (i ** 4)\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n + 1) : \n        if (i % 2!= 0) : \n            sum = sum + i**3\n    return sum\n    # your code goes here"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    map = {'(': 0, ')': 0, '{': 0, '}': 0, '[' : 0, ']': 0}\n    for i in exp:\n        if i in map:\n            map[i] += 1\n        else:\n            stack.append(i)\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    for char in exp:\n        if char in ['(', '[', '{']:\n            stack.append(char)\n        else:\n            if not stack:\n                return False\n            top = stack.pop()\n            if top == '(':\n                if char!= ')':\n                    return False\n            elif top == '[':\n                if char!= ']':\n                    return False\n            elif top == '{':\n                if char!= '}':\n                    return False\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    l=[]\n    s = list(exp)\n    for i in range(len(s)):\n        if s[i]=='(':\n            l.append(s.pop(i))\n        else:\n            if s:\n                if s[-1] == '(':\n                    l.append(s.pop())\n                    continue\n            l.append(s.pop())\n    if len(s)!= 0:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    dict1 = {')': '(', ']': '[', '}': '{'}\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    brackets = {'(':')', '{':'}', '[':']'}\n    stack = deque()\n    for i in exp:\n        if i in brackets.keys():\n            stack.append(i)\n        elif i in brackets.values():\n            if not stack:\n                return False\n            else:\n                top = stack.pop()\n                if i!= brackets[top]:\n                    return False\n    return True if not stack else False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i] == '(':\n            stack.append(exp[i])\n        elif exp[i] == ')':\n            if len(stack) == 0:\n                return False\n            stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    for i in range(len(exp)):\n        if exp[i]=='(':\n            stack.append('(')\n        elif exp[i]=='[':\n            stack.append('[')\n        elif exp[i]=='{':\n            stack.append('{')\n        elif exp[i]==')':\n            if len(stack)>0 and stack[-1]=='(':\n                stack.pop()\n            else:\n                return False\n        elif exp[i]==']':\n            if len(stack)>0 and stack[-1]=='[':\n                stack.pop()\n            else:\n                return False\n        elif exp[i]=='}':\n            if len(stack)>0 and stack[-1]=='{':\n                stack.pop()\n            else:\n                return False\n    if len(stack)==0:\n        return True\n    return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    bracket_map = {\")\": \"(\", \"}\": \"{\", \"]\": \"[\"}\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    res = []\n    for i in range(len(exp)):\n        if exp[i]=='(':\n            res.append(exp[i])\n        else:\n            if res==[]:\n                return False\n            else:\n                res.pop()\n    if len(res)==0:\n        return True\n    return False"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    symbols = [\"+\",\"-\",\"*\",\"/\",\"(\",\")\"]\n    queue = deque()\n    bracket_map = {\")\":\"(\",\"]\":\"[\",\"}\":\"{\"}\n    stack = []\n    for i in range(0,len(exp)):\n        if exp[i] not in symbols:\n            stack.append(exp[i])\n        else:\n            if exp[i] == \"(\":\n                queue.append(exp[i])\n            if exp[i] == \")\":\n                if len(queue) == 0:\n                    return False\n                else:\n                    queue.pop()\n            if exp[i] == \"[\":\n                queue.append(exp[i])\n            if exp[i] == \"]\":\n                if len(queue) == 0:\n                    return False\n                else:\n                    queue.pop()\n            if exp[i] == \"{\":\n                queue.append(exp[i])\n            if exp[i] == \"}\":\n                if len(queue) == 0:\n                    return False\n                else:\n                    queue.pop()\n    if len(queue)!= 0:\n        return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    str_list = test_str.split(\" \")\n    result = []\n    for i in str_list:\n        if len(i) == K:\n            result.append(i)\n    result = \" \".join(result)\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    res = []\n    for word in test_str.split():\n        if len(word) == K:\n            continue\n        else:\n            res.append(word)\n    return''.join(res)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length_list = []\n    for word in test_str.split():\n        if len(word) not in length_list:\n            length_list.append(len(word))\n    \n    result = []\n    for word in test_str.split():\n        if len(word) == K:\n            result.append(word)\n    \n    return''.join(result)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    #print(test_str)\n    return_str = \"\"\n    \n    for i in range(0, len(test_str)):\n        if i+K <= len(test_str):\n            return_str += test_str[i:i+K]\n            \n    return return_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    while True:\n        if test_str == \"\":\n            break\n        elif len(test_str) == K:\n            test_str = test_str[:-1]\n        else:\n            break\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Remove any words with length K\n    words = test_str.split()\n    result = ''\n    for word in words:\n        if len(word)!= K:\n            result += word +''\n    return result\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # after_del_str = str.split(test_str)\n    # after_del_list = []\n    # for val in after_del_str:\n    #     if len(val) == K:\n    #         after_del_list.append(val)\n    # return''.join(after_del_list)\n    return''.join([word for word in str.split(test_str) if len(word) == K])\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    for word in test_str.split():\n        if len(word) == K:\n            test_str = test_str.replace(word,'')\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return''.join(sorted(list(filter(lambda x : len(x) == K, test_str.split(' '))), reverse=True))\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if type(test_str) is not str:\n        return \"Input should be string\"\n    if type(K) is not int:\n        return \"Input should be integer\"\n    if K < 0:\n        return \"K can't be negative\"\n    if K == 0:\n        return test_str\n    lst = test_str.split(\" \")\n    if len(lst) <= K:\n        return \"String is not long enough\"\n    return \" \".join([word for word in lst if len(word) > K])\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    p = re.findall(r\"\\w+\",pattern)\n    pl = len(p)\n    for i in range(len(text)-pl+1):\n        if text[i:i+pl] == p:\n            return i+1\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    a=re.findall(pattern,text)\n    if a:\n        return a\n    else:\n        return None\ntext=\"dabxyzabaabcdabxyzabcdabxyzxyxbaaabcdabxyz\"\npattern=\"xy\"\nprint(occurance_substring(text,pattern))\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) == 0 and len(pattern) == 0:\n        return None\n    elif len(text) == 0:\n        return None\n    elif len(pattern) == 0:\n        return None\n    else:\n        result = re.finditer(pattern,text)\n        for r in result:\n            print(r)\n        return result\ndef occurance_substring_2(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) == 0 and len(pattern) == 0:\n        return None\n    elif len(text) == 0:\n        return None\n    elif len(pattern) == 0:\n        return None\n    else:\n        i = 0\n        j = 0\n        k = 0\n        text_length = len(text)\n        pattern_length = len(pattern)\n        i_end = 0\n        j_end = 0\n        k_end = 0\n        while i < text_length and j < pattern_length:\n            if text[i] == pattern[j]:\n                k = i\n                i += 1\n                j += 1\n                continue\n            if j < pattern_length:\n                k_end = k\n                j_end = j\n                k = k_end + 1\n                j = j_end + 1\n                continue\n            if i < text_length:\n                k_end = k\n                i_end = i\n                k = k_end + 1\n                i = i_end + 1\n                continue\n            else:\n                break\n        if j == pattern_length:\n            return k\n        if j < pattern_length:\n            return None\n        if i == text_length:\n            return None\n        if i < text_length:\n            return None\ndef occurrence_substring_3(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) == 0 and len(pattern) == 0:\n        return None\n    elif len(text) == 0:\n        return None\n    elif len(pattern) == 0:\n        return None\n    else:\n        i = 0\n        j = 0\n        k = 0\n        text_length = len(text)\n        pattern_length = len(pattern)\n        i_end = 0\n        j_end = 0\n        k_end = 0\n        while i < text_length and j < pattern_length:\n            if text[i] == pattern[j]:\n                k = i\n                i += 1\n                j += 1\n                continue\n            if j < pattern_length:\n                k_end = k\n                j_end = j\n                k = k_end + 1\n                j = j_end + 1\n                continue\n            if i < text_length:\n                k_end = k\n                i_end = i\n                k = k_end + 1\n                i = i_end + 1\n                continue\n            else:\n                break\n        if j == pattern_length:\n            return k\n        if j < pattern_length:\n            return None\n        if i == text_length:\n            return None\n        if i < text_length:\n            return None\ndef occurance_substring_4(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) == 0 and len(pattern) == 0:\n        return None\n    elif len(text) == 0:\n        return None\n    elif len(pattern) == 0:\n        return None\n    else:\n        i = 0\n        j = 0\n        k = 0\n        text_length = len(text)\n        pattern_length = len(pattern)\n        i_end = 0\n        j_end = 0\n        k_end = 0\n        while i < text_length and j < pattern_length:\n            if text[i] == pattern[j]:\n                k = i\n                i += 1\n                j += 1\n                continue\n            if j < pattern_length:\n                k_end = k\n                j_end = j\n                k = k_end + 1\n                j = j_end + 1\n                continue\n            if i < text_length:\n                k_end = k\n                i_end = i\n                k = k_end + 1\n                i = i_end + 1\n                continue\n            else:\n                break\n        if j == pattern_length:\n            return k\n        if j < pattern_length:\n            return None\n        if i == text_length:\n            return None\n        if i < text_length:\n            return None\ndef occurance_substring_5(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) == 0 and len(pattern) == 0:\n        return None\n    elif len(text) == 0:\n        return None\n    elif len(pattern) == 0:\n        return None\n    else:\n        i = 0\n        j = 0\n        k = 0\n        text_length = len(text)\n        pattern_length = len(pattern)\n        i_end = 0\n        j_end = 0\n        k_end = 0\n        while i < text_length and j < pattern_length:\n            if text[i] == pattern[j]:\n                k = i\n                i += 1\n                j += 1\n                continue\n            if j < pattern_length:\n                k_end = k\n                j_end = j\n                k = k_end + 1\n                j = j_end + 1\n                continue\n            if i < text_length:\n                k_end = k\n                i_end = i\n                k = k_end + 1\n                i = i_end + 1\n                continue\n            else:\n                break\n        if j == pattern_length:\n            return k\n        if j < pattern_length:\n            return None\n        if i == text_length:\n            return None\n        if i < text_length:\n            return None\ndef occurance_substring_6(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) == 0 and len(pattern) == 0:\n        return None\n    elif len(text) == 0:\n        return None\n    elif len(pattern) == 0:\n        return None\n    else:\n        i = 0\n        j = 0\n        k = 0\n        text_length = len(text)\n        pattern_length = len(pattern)\n        i_end = 0\n        j_end = 0\n        k_end = 0\n        while i < text_length and j < pattern_length:\n            if text[i] == pattern[j]:\n                k = i\n                i += 1\n                j += 1\n                continue\n            if j < pattern_length:\n                k_end = k\n                j_end = j\n                k = k_end + 1\n                j = j_end + 1\n                continue\n            if i < text_length:\n                k_end = k\n                i_end = i\n                k = k_end + 1\n                i = i_end + 1\n                continue\n            else:\n                break\n        if j == pattern_length:\n            return k\n        if j < pattern_length:\n            return None\n        if i == text_length:\n            return None\n        if i < text_length:\n            return None\ndef occurance_substring_7(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) == 0 and len(pattern) == 0:\n        return None\n    elif len(text) == 0:\n        return None\n    elif len(pattern) == 0:\n        return None\n    else:\n        i = 0\n        j = 0\n        k = 0\n        text_length = len(text)\n        pattern_length = len(pattern)\n        i_end = 0\n        j_end = 0\n    "
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    \n    if pattern in text:\n        pattern_re = re.compile(pattern)\n        match = pattern_re.finditer(text)\n        for i in match:\n            print(\"Position: \",i.span())\n            print(\"String: \",i.string)\n        \n    else:\n        print(\"No match found\")\n    return None\noccurance_substring(\"HELP\",\"H\")\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.search(pattern,text)\n    if match is not None:\n        return match.start(),match.end()\n    else:\n        return None\ndef substring_after_preceeding_spaces(text):\n    '''\n    Write a function to extract all substring of a given length starting from the first occurrence of space\n    '''\n    match = re.search('\\s+',text)\n    if match is not None:\n        return text[match.start():match.end()]\n    else:\n        return None\ndef substring_after_preceeding_spaces_2(text):\n    '''\n    Write a function to extract all substring of a given length starting from the first occurrence of space\n    '''\n    match = re.search('\\s+',text)\n    if match is not None:\n        return text[match.start()+1:match.end()]\n    else:\n        return None\ndef substring_before_preceeding_spaces(text):\n    '''\n    Write a function to extract all substring of a given length starting from the last occurrence of space\n    '''\n    match = re.search('\\s+',text)\n    if match is not None:\n        return text[:match.start()]\n    else:\n        return None\ndef substring_before_preceeding_spaces_2(text):\n    '''\n    Write a function to extract all substring of a given length starting from the last occurrence of space\n    '''\n    match = re.search('\\s+',text)\n    if match is not None:\n        return text[:match.start()]\n    else:\n        return None\ndef substring_between_preceeding_spaces(text):\n    '''\n    Write a function to extract all substring of a given length in between the occurrences of space\n    '''\n    match = re.search('\\s+',text)\n    if match is not None:\n        return text[match.start()+1:match.end()]\n    else:\n        return None\ndef substring_between_preceeding_spaces_2(text):\n    '''\n    Write a function to extract all substring of a given length in between the occurrences of space\n    '''\n    match = re.search('\\s+',text)\n    if match is not None:\n        return text[match.start()+1:match.end()]\n    else:\n        return None\ndef substring_between_preceeding_spaces_3(text):\n    '''\n    Write a function to extract all substring of a given length in between the occurrences of space\n    '''\n    match = re.search('\\s+',text)\n    if match is not None:\n        return text[match.start()+1:match.end()]\n    else:\n        return None\ndef substring_between_preceeding_spaces_4(text):\n    '''\n    Write a function to extract all substring of a given length in between the occurrences of space\n    '''\n    match = re.search('\\s+',text)\n    if match is not None:\n        return text[match.start()+1:match.end()]\n    else:\n        return None\ndef extract_phone_numbers(text):\n    '''\n    Write a function to extract all phone numbers in the given text\n    '''\n    # replace with a regex\n    match = re.findall(r'\\+?(?:\\d{1,3})?-?\\d{3}-\\d{3}-\\d{4}',text)\n    return match\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        result=re.findall(pattern,text)\n        return result[0]\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if pattern in text:\n        return pattern,text.find(pattern)\n    else:\n        return None\nprint(occurance_substring('aaabcc','a'))\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    occur=re.search(pattern,text)\n    if occur:\n        print('The Occurrence of the pattern is :',occur.span())\n        print('The start position is :',occur.start())\n        print('The end position is :',occur.end())\n        print('The original string is :',occur.string)\n        print('The group of match is :',occur.group())\n    else:\n        print('There is no match')\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result=re.finditer(pattern,text)\n    for i in result:\n        print(i)\n        print(i.span())\n        print(i.group())\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    # Create a list of indexes with the pattern\n    index = []\n    for i in range(len(text)):\n        if text[i:].startswith(pattern):\n            index.append(i)\n    return index\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    result = True\n    for i in range(0,len(nums)-1,2):\n        if nums[i] == 0:\n            result = False\n            break\n    return result\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd = []\n    for i in range(len(nums)):\n        if i % 2!= 0:\n            odd.append(nums[i])\n    if len(odd) == 0:\n        return \"True\"\n    else:\n        return \"False\"\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            if nums[i] % 2 == 1:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_pos = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            if nums[i] % 2 == 1:\n                odd_pos.append(i)\n    print(odd_pos)\nodd_position([1,2,3,4,5])\nodd_position([1,2,3,6,5,4,3,2,1])\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums),2):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n    # code here\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n    \n    \n    \n    \ndef check_palindrome(s):\n    '''\n    Write a python function to check whether a string is palindrome or not.\n    '''\n    return s == s[::-1]\n    \n    \n    \ndef even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2!= 0:\n            return False\n    return True\n    \n    \n    \n    \ndef super_reduced_string(s):\n    '''\n    Write a python function to check whether a given string is super reduced.\n    '''\n    seen = set()\n    for i in range(len(s)):\n        if s[i] in seen:\n            return False\n        seen.add(s[i])\n    return True\n    \n    \n    \ndef max_number(nums, k):\n    '''\n    Write a python function to find the maximum of a given list of numbers of length k.\n    '''\n    if k < len(nums):\n        return max(nums[k:])\n    else:\n        return max(nums)\n        \n    \n    \n    \ndef reverse_string(s):\n    '''\n    Write a python function to reverse a given string.\n    '''\n    return s[::-1]\n    \n    \n    \ndef largest_palindrome(nums):\n    '''\n    Write a python function to check whether a given list of numbers is a palindrome or not.\n    '''\n    for i in range(len(nums)):\n        if is_palindrome(nums, i, i):\n            return True\n        elif is_palindrome(nums, i, i + 1):\n            return True\n    return False\n    \n    \n    \ndef is_palindrome(nums, l, r):\n    while l <= r:\n        if nums[l]!= nums[r]:\n            return False\n        l = l + 1\n        r = r - 1\n    return True\n    \n    \n    \ndef find_longest_word(words):\n    '''\n    Write a python function to find the longest word in a given list of words.\n    '''\n    d = {}\n    for i in words:\n        d[i] = len(i)\n        \n    return max(d.keys(), key = lambda x: d[x])\n    \n    \n    \ndef is_sorted(nums):\n    '''\n    Write a python function to check whether a given list of numbers is sorted in non decreasing order or not.\n    '''\n    for i in range(len(nums) - 1):\n        if nums[i] > nums[i + 1]:\n            return False\n    return True\n    \n    \n    \ndef is_palindrome_two_pointer(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] == s[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\n    \n    \n    \ndef find_longest_word(words):\n    '''\n    Write a python function to find the longest word in a given list of words.\n    '''\n    for i in words:\n        if len(i) > len(longest_word):\n            longest_word = i\n    return longest_word\n    \n    \n    \ndef find_longest_word(words):\n    '''\n    Write a python function to find the longest word in a given list of words.\n    '''\n    longest = ''\n    for word in words:\n        if len(word) > len(longest):\n            longest = word\n    return longest\n    \n    \n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] == s[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\n    \n    \n    \ndef is_palindrome_two_pointers(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] == s[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\n    \n    \n    \ndef is_palindrome_two_pointers(s):\n    '''\n    Write a python function to check whether a given string is palindrome or not.\n    '''\n    i = 0\n    j = len(s) - 1\n    while i <= j:\n        if s[i] == s[j]:\n            i = i + 1\n            j = j - 1\n        else:\n            return False\n    return True\n    \n    \n    \ndef swap_case(s):\n    '''\n    Write a python function to swap cases of a given string.\n    '''\n    return s.swapcase()\n    \n    \n    \ndef count_substring(s, sub):\n    '''\n    Write a python function to count the number of occurrences of a substring in a given string.\n    '''\n    count = 0\n    for i in range(0, len(s)):\n        if s[i:i+len(sub)] == sub:\n            count += 1\n    return count\n    \n    \n    \ndef find_duplicates(s):\n    '''\n    Write a python function to find the duplicate characters in a given string.\n    '''\n    duplicate = []\n    for i in range(len(s)):\n        if s.count(s[i]) > 1:\n            duplicate.append(s[i])\n    return duplicate\n    \n    \n    \ndef get_factors(n):\n    '''\n    Write a python function to calculate all factors of a given number.\n    '''\n    factors = []\n    for i in range(1, n):\n        if n % i == 0:\n            factors.append(i)\n    return factors\n    \n    \n    \ndef is_permutation(s1, s2):\n    '''\n    Write a python function to check whether two given strings are permutations of each other.\n    '''\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\n    \n    \n    \ndef is_permutation_two_pointers(s1, s2):\n    '''\n    Write a python function to check whether two given strings are permutations of each other.\n    '''\n    if sorted(s1) == sorted(s2):\n        return True\n    else:\n        return False\n    \n    \n    \ndef reverse_vowels(s):\n    '''\n    Write a python function to reverse vowels in a string.\n    '''\n    vowels = set('aeiou')\n    for i in range(len(s)):\n        if s[i] in vowels:\n            s = s[:i] + s[i+1:] + s[i]\n    return s\n    \n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a python function to check whether two given strings are anagrams of each other or not.\n    '''\n    return sorted(s1) == sorted(s2)\n    \n    \n    \ndef longest_word_by_count(words):\n    '''\n    Write a python function to find the longest word in a list of words by length.\n    '''\n    max_len = max(len(word) for word in words)\n    max_len = max(max_len, len(words))\n    return max_len\n    "
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odd_index = []\n    for i in range(0,len(nums)):\n        if i % 2 == 1:\n            odd_index.append(i)\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i%2!=0:\n            if nums[i] % 2!=0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if i == len(nums):\n            if nums[i] == 0:\n                print(\"List contains 0 at odd index\")\n                break\n            else:\n                print(\"List does not contain 0 at odd index\")\n                break\n        if nums[i] % 2!= 0:\n            print(\"List contains 0 at odd index\")\n            break\n    else:\n        print(\"List does not contain 0 at odd index\")\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odds = []\n    for i in range(len(nums)):\n        if i%2!= 0:\n            odds.append(nums[i])\n    return odds\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in \"aeiou\" and test_str[i+1] in \"aeiou\":\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    characters = test_str\n    vowels = ['a','e','i','o','u']\n    vowel_count = {}\n    vowel_count['a'] = 0\n    vowel_count['e'] = 0\n    vowel_count['i'] = 0\n    vowel_count['o'] = 0\n    vowel_count['u'] = 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            # print(test_str[i])\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    count = 0\n    if not test_str:\n        return 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if len(test_str) < 2:\n        return 0\n    if test_str[0] == test_str[1] == test_str[2]:\n        return 3\n    if test_str[1] == test_str[2] == test_str[3]:\n        return 3\n    if test_str[2] == test_str[3] == test_str[4]:\n        return 3\n    if test_str[0] == test_str[3] == test_str[4]:\n        return 3\n    if test_str[1] == test_str[4] == test_str[5]:\n        return 3\n    if test_str[2] == test_str[5] == test_str[6]:\n        return 3\n    return 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    n = len(test_str)\n    count = 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'y']\n    count = 0\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = set(('a','e','i','o','u'))\n    count = 0\n    for char in test_str:\n        if char in vowels:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    cnt = 0\n    vowels = set(\"aeiou\")\n    for i in range(len(test_str)-1):\n        if test_str[i] in vowels and test_str[i+1] in vowels:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    result = 0\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr)==1:\n        return(arr[0])\n    elif len(arr)==2:\n        return(arr[0]+arr[1])\n    else:\n        return((find_sum(arr[0:len(arr):2])+find_sum(arr[1:len(arr):2])))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if i not in arr:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum_list = []\n    for i in range(0, len(arr)):\n        if i == 0 or i == 1:\n            sum_list.append(arr[i])\n        else:\n            if arr[i] not in sum_list:\n                sum_list.append(arr[i])\n    return sum(sum_list)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    for i in range(len(arr)):\n        if arr[i] not in arr[:i]:\n            return arr[i]\n    return -1\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    count = {}\n    for i in arr:\n        if i not in count:\n            count[i] = 1\n        else:\n            count[i] += 1\n    for i in arr:\n        if count[i] == 1:\n            print(i)\ndef insert_at_end(arr):\n    '''\n    Write a python function to insert element at the end of a list\n    '''\n    arr.append(new_element)\n    print(arr)\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for i in arr:\n        if arr.count(i) == 1:\n            sum += i\n    print(sum)\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    return sum(set(arr))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    total = 0\n    unique_elements = set(arr)\n    for num in unique_elements:\n        total += num\n    print(\"The sum of non-repeated elements in a given list: \",total)\n    \nif __name__ == '__main__':\n    arr = [3,3,7,4,3,7,3,4,5]\n    find_sum(arr"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # if list1 == [1,1,2,3]:\n    #     print('Yes')\n    #     # return None\n    # else:\n    #     print('No')\n    #     return None\n    res = []\n    \n    for i, j in groupby(list1):\n        res.append(list(j))\n    if len(res) == 0:\n        return None\n    else:\n        return res\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    temp = []\n    list1.sort()\n    for key, group in groupby(list1):\n        temp.append(list(group))\n    return temp\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pack1 = []\n    list1.sort()\n    for key, group in groupby(list1):\n        group1 = list(group)\n        if len(group1) > 1:\n            pack1.append(group1)\n    return pack1\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    res = []\n    l = len(list1)\n    if l==1:\n        res.append([list1[0]])\n        return res\n    else:\n        i = 0\n        while i<l-1:\n            if list1[i]==list1[i+1]:\n                res.append([list1[i]])\n                i+=1\n                continue\n            else:\n                res.append([list1[i],list1[i+1]])\n                i+=2\n                continue\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return_list = []\n    if len(list1) < 2:\n        return list1\n    else:\n        for k, g in groupby(list1):\n            return_list.append(list(g))\n    return return_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    d = {}\n    res = []\n    for elem in list1:\n        if elem not in d:\n            d[elem] = 0\n        d[elem] += 1\n    for k, v in d.items():\n        if v > 1:\n            res.append([k] * v)\n    return res\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    sorted_list = sorted(list1)\n    return pack_sublist(sorted_list)\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    pass\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    count=0\n    for key, group in groupby(list1):\n        #print(key, list(group))\n        count+=1\n        if(count==1):\n            list1 = list(group)\n            continue\n        if(count==2):\n            list1 = list1 + list(group)\n            continue\n    return list1\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(t) for k,t in groupby(list1)]\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count_dict = {}\n    unique_list = []\n    for i in range(len(list1)):\n        if list1[i] not in unique_list:\n            unique_list.append(list1[i])\n        if list1[i] not in count_dict:\n            count_dict[list1[i]] = 1\n        else:\n            count_dict[list1[i]] += 1\n    return count_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for item in list1:\n        if item not in count:\n            count[item] = 1\n        else:\n            count[item] += 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    my_dict = {}\n    for el in list1:\n        my_dict[tuple(el)] = list1.count(tuple(el))\n    return my_dict\n    \n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Your Code Here\n    d = {}\n    for i in range(len(list1)):\n        d[tuple(list1[i])] = 0\n    for i in range(len(list1)):\n        d[tuple(list1[i])] += 1\n    return d\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for x in list1:\n        if x not in count:\n            count[x] = 1\n        else:\n            count[x] += 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    return count\n    \ndef unique_sublists_v2(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = {}\n    for i in list1:\n        t = tuple(i)\n        if t in count:\n            count[t] += 1\n        else:\n            count[t] = 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Below is the brute force solution:\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    unique_dict = {}\n    for i in list1:\n        if i not in unique_dict:\n            unique_dict[tuple(i)] = 1\n        else:\n            unique_dict[tuple(i)] += 1\n    return unique_dict\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    final = {}\n    for i in list1:\n        if type(i) == list:\n            for j in i:\n                if j not in final:\n                    final[j] = 1\n                else:\n                    final[j] += 1\n    return final\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    \n    def count_list(a_list):\n        '''\n        Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n        '''\n        \n        \n        list_of_list = []\n        n = []\n        count_list = {}\n        count_n = {}\n        for i in range(len(a_list)):\n            for j in range(len(a_list[i])):\n                if a_list[i][j] not in list_of_list:\n                    list_of_list.append(a_list[i][j])\n                    count_list[a_list[i][j]] = 1\n                    count_n[a_list[i][j]] = 1\n                elif a_list[i][j] in list_of_list:\n                    count_list[a_list[i][j]] += 1\n                    count_n[a_list[i][j]] += 1\n        return count_list, count_n\n    \n    \n    \n    \n    a_list = [[1,2,3],[1,2,2],[1,2,3],[1,3,2],[1,3,3],[2,2,2],[2,3,3],[3,2,2],[3,2,3],[3,3,2],[3,3,3]]\n    count_list, count_n = count_list(a_list)\n    print(count_list)\n    print(count_n)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    lst_comb = list()\n    lst_comb.append(tuple(test_list))\n    \n    for i in range(2, len(test_list)+1):\n        lst = list(combinations(test_list,i))\n        for j in lst:\n            if sum(j) == (sum(test_list)):\n                lst_comb.append(j)\n    return lst_comb\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    list_len = len(test_list)\n    if list_len > 1:\n        for i in range(list_len):\n            for j in range(i+1,list_len):\n                comb = test_list[i] + test_list[j]\n                if test_list[i]!= test_list[j]:\n                    comb = test_list[i] + test_list[j]\n                    print(test_list[i],\"+\",test_list[j],\"=\",comb)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    return list(combinations(test_list, 2))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations_list = []\n    # combination_list = list(combinations(test_list, 2))\n    combination_list = list(combinations(test_list, 3))\n    for i in range(len(combination_list)):\n        sum_value = combination_list[i][0] + combination_list[i][1]\n        combinations_list.append(sum_value)\n    print(combinations_list)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    test_list = sorted(test_list)\n    for i in range(len(test_list)):\n        test_list[i] = (test_list[i],)\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            test_list[i] = test_list[i] + test_list[j]\n    return test_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in combinations(test_list,4):\n        print(i)\n    return i\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    my_list=[]\n    for i in combinations(test_list,3):\n        my_list.append(i)\n    return my_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    comb = []\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            for k in range(j+1,len(test_list)):\n                sum_of_combs = test_list[i] + test_list[j] + test_list[k]\n                comb.append((test_list[i],test_list[j],test_list[k]))\n    return comb\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = []\n    for i in range(len(test_list)):\n        combination = combinations(test_list[i], 2)\n        for c in combination:\n            if sum(c) == test_list[i][-1]:\n                result.append(tuple(c))\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # return combinations(test_list, 2)\n    return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    # return combinations(test_list, 2)\n    "
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div_count = 0\n    for i in range(1,n+1) :\n        if(n%i==0) : \n            div_count+=1\n    if(div_count%2==0) : \n        print(True)\n    else :\n        print(False)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    a = 1\n    if n % 2 == 0:\n        while(a <= math.sqrt(n)):\n            if (n % a == 0):\n                return False\n            a += 1\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n % 2 == 0 : \n        return True \n    else : \n        return False \n    \ndef fizz_buzz_counter(n) : \n    '''\n    Write a python function to check whether the number is divisible by 3 and 5. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-22.php\n    '''\n    if n % 3 == 0 and n % 5 == 0 : \n        return \"FizzBuzz\"\n    elif n % 3 == 0 : \n        return \"Fizz\"\n    elif n % 5 == 0 : \n        return \"Buzz\"\n    else : \n        return n \n    \ndef check_zero_sum_to_ten_sum(n) : \n    '''\n    Write a python function to check whether the sum of all the digits in a number is equal to 10. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum_of_digits = 0 \n    n = str(n) \n    for digit in n : \n        sum_of_digits += int(digit) \n    return sum_of_digits == 10\n    \ndef binary_search_tree_insert(tree, data) : \n    '''\n    Write a python function to insert data into a binary search tree. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-25.php\n    '''\n    if tree == None : \n        tree = Node(data)\n    else : \n        if tree.data == data : \n            return \n        elif tree.data > data : \n            if tree.left == None : \n                tree.left = Node(data)\n            else : \n                binary_search_tree_insert(tree.left, data)\n        else : \n            if tree.right == None : \n                tree.right = Node(data)\n            else : \n                binary_search_tree_insert(tree.right, data)\n                \nclass Node : \n    def __init__(self, data) : \n        self.data = data \n        self.left = None \n        self.right = None\n    def insert(self, data) : \n        if data < self.data : \n            if self.left == None : \n                self.left = Node(data)\n            else : \n                self.left.insert(data)\n        else : \n            if self.right == None : \n                self.right = Node(data)\n            else : \n                self.right.insert(data)\n    def __str__(self) : \n        return str(self.data)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return 0\n    divisors = []\n    for i in range(1,n+1):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    #check if n is even\n    if n % 2 == 0 : \n        return True\n    else : \n        return False\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    \n    #divisors = 2\n    divisors = 1\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divs = 0\n    for i in range(1, n+1):\n        if (n % i == 0) :\n            divs += 1\n    print(f\"The count of divisors is {divs}\")\n    return divs\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return(n % 2 == 0)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    divisors = 0\n    i = 1\n    while i <= n :\n        if n % i == 0 :\n            divisors += 1\n        i += 1\n    if divisors % 2 == 0 :\n        print(str(n) + \" is even\")\n    else :\n        print(str(n) + \" is odd\")\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    arr = [1,3,2,4,1,5]\n    odd_sum = 0\n    for i in range(1, len(arr)):\n        odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    total = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_len_sum = 0\n    for i in range(len(arr)):\n        odd_len_sum += sum(arr[i:i+2])\n    return odd_len_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0,len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if arr[j] % 2!= 0:\n                sum += arr[i:j+1]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr) < 1:\n        return 0\n    odd = []\n    for i in range(len(arr)):\n        if i % 2!= 0:\n            odd.append(arr[i])\n    even = arr[len(odd):]\n    if len(even) == 0:\n        return sum(odd)\n    if len(odd) == 0:\n        return sum(even)\n    return sum(odd) + sum(even)\n    \n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    # Write your code here\n    odd_sum = 0\n    for i in range(0,len(arr)-1):\n        if i%2==1:\n            odd_sum += arr[i]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    if len(arr)<1:\n        return -1\n    if len(arr)==1:\n        return arr[0]\n    s = 0\n    for i in range(1,len(arr)):\n        if i%2!=0:\n            s += arr[i]\n    return s\nprint(odd_length_sum([0,1,3,5,8]))\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    total = 0\n    for i in range(0, len(arr)):\n        if i % 2!= 0:\n            total += arr[i]\n    return total\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    s = 0\n    for i in range(0, n - 2):\n        if i % 2 == 1:\n            s += sum(arr[i:i + 3])\n    return s\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0, len(arr)):\n        if i%2!= 0:\n            sum += arr[i]\n    return sum\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert rgb to hsv\n    # initialize the color names dictionary\n    color_names = {\n        0: \"black\",\n        1: \"red\",\n        2: \"blue\",\n        3: \"yellow\",\n        4: \"magenta\",\n        5: \"cyan\",\n        6: \"white\"\n    }\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    h, s, v = 0, 0, 0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        return 0.0, 0.0, 0.0\n    s = delta / cmax\n    h = 0.0\n    if cmax == r:\n        h = (g - b) / delta\n    elif cmax == g:\n        h = 2.0 + (b - r) / delta\n    else:\n        h = 4.0 + (r - g) / delta\n    h *= 60\n    if h < 0:\n        h += 360\n    return h, s, s\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # convert rgb to hsv\n    # r, g, b = r / 255, g / 255, b / 255\n    max_value = max(r, g, b)\n    min_value = min(r, g, b)\n    delta = max_value - min_value\n    if delta == 0:\n        h = 0\n        s = 0\n        v = 0\n    elif max_value == r:\n        h = (60 * ((g - b) / delta)) % 360\n        s = delta / max_value\n        v = max_value\n    elif max_value == g:\n        h = (60 * ((b - r) / delta)) + 120\n        s = delta / max_value\n        v = max_value\n    elif max_value == b:\n        h = (60 * ((r - g) / delta)) + 240\n        s = delta / max_value\n        v = max_value\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n        s = 0\n        v = cmax\n    elif cmax == r:\n        h = (60 * ((g - b) / delta) + 360) % 360\n        s = delta / cmax\n        v = cmax\n    elif cmax == g:\n        h = (60 * ((b - r) / delta) + 120) % 360\n        s = delta / cmax\n        v = cmax\n    else:\n        h = (60 * ((r - g) / delta) + 240) % 360\n        s = delta / cmax\n        v = cmax\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r = float(r)\n    g = float(g)\n    b = float(b)\n    \n    min_val = min(r, g, b)\n    max_val = max(r, g, b)\n    \n    delta = max_val - min_val\n    \n    if delta == 0:\n        h = 0\n        s = 0\n        v = max_val\n    elif max_val == r:\n        h = (60 * ((g - b) / delta)) % 360\n        s = delta / max_val\n        v = max_val\n    elif max_val == g:\n        h = (60 * ((b - r) / delta)) % 360\n        s = delta / max_val\n        v = max_val\n    else:\n        h = (60 * ((r - g) / delta)) % 360\n        s = delta / max_val\n        v = max_val\n    \n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # rgb_to_hsv function goes here\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    \n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g - b) / df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b - r) / df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r - g) / df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df / mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r = float(r)\n    g = float(g)\n    b = float(b)\n    cmax = max(r, g, b)\n    cmin = min(r, g, b)\n    delta = cmax - cmin\n    if delta == 0:\n        h = 0\n    elif cmax == r:\n        h = 60 * (((g - b)/delta) % 6)\n    elif cmax == g:\n        h = 60 * (((b - r)/delta) + 2)\n    elif cmax == b:\n        h = 60 * (((r - g)/delta) + 4)\n    if cmax == 0:\n        s = 0\n    else:\n        s = delta / cmax\n    v = cmax\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # Step 1\n    r = r / 255\n    g = g / 255\n    b = b / 255\n    # Step 2\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    # Step 3\n    mx = mx + 0.00000001\n    # Step 4\n    d = mx - mn\n    # Step 5\n    if mx == mn:\n        h = 0\n    else:\n        if mx == r:\n            if g >= b:\n                h = (60 * ((g - b) / d) + 360) % 360\n            else:\n                h = (60 * ((g - b) / d) + 120) % 360\n        elif mx == g:\n            h = (60 * ((b - r) / d) + 240) % 360\n        else:\n            h = (60 * ((r - g) / d) + 300) % 360\n    # Step 6\n    s = mx / mx\n    # Step 7\n    v = mx\n    # Step 8\n    if r == mx:\n        hue = h / 60\n    else:\n        if r == g:\n            hue = (h / 60) + 1\n        else:\n            hue = (h / 60) + 2\n    # Step 9\n    if v == mx:\n        sat = s\n    else:\n        sat = (s / mx) * 255\n    # Step 10\n    val = v * 255\n    # Step 11\n    return (hue, sat, val)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even=0\n    odd=0\n    for i in range(len(list1)):\n        if(list1[i]%2==0):\n            even=even+list1[i]\n        else:\n            odd=odd+list1[i]\n    return even,odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in list1:\n        if i%2 == 0:\n            product = product*i\n        else:\n            product = product/i\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product=1\n    odd_product=1\n    for i in range(len(list1)):\n        if i%2==0:\n            even_product=even_product*list1[i]\n        else:\n            odd_product=odd_product*list1[i]\n    print(f'Even product of first {len(list1)} numbers is {even_product}.')\n    print(f'Odd product of first {len(list1)} numbers is {odd_product}.')\n    return even_product,odd_product\nlist1=list(map(int,input('Enter the numbers: ').split()))\nmul_even_odd(list1"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even = even + 1\n        else:\n            odd = odd + 1\n    product = product * even\n    product = product * odd\n    return product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in list1:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    even_prod = 1\n    odd_prod = 1\n    for i in even:\n        even_prod = even_prod * i\n    for i in odd:\n        odd_prod = odd_prod * i\n    return even_prod, odd_prod\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_product = 1\n    odd_product = 1\n    for i in range(0,len(list1)):\n        if i%2 == 0:\n            even_product = even_product * list1[i]\n        else:\n            odd_product = odd_product * list1[i]\n    return even_product, odd_product\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    prod_even_odd = 0\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            prod_even_odd += list1[i]\n        else:\n            continue\n    print(prod_even_odd)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return even,odd\nlist1 = [10,20,50,70]\nprint(mul_even_odd(list1))"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            even = even + list1[i]\n        else:\n            odd = odd + list1[i]\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for num in list1:\n        if num % 2 == 0:\n            even.append(num)\n        else:\n            odd.append(num)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tup = eval(test_str)\n    return int(tup)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str_int = test_str.replace(' ', '')\n    test_str_int = test_str_int.replace('[', '')\n    test_str_int = test_str_int.replace(']', '')\n    test_str_int = test_str_int.replace(',', '')\n    test_str_int = test_str_int.replace('(', '')\n    test_str_int = test_str_int.replace(')', '')\n    test_str_int = test_str_int.replace('\\'', '')\n    test_str_int = test_str_int.replace('.', '')\n    return tuple(int(n) for n in test_str_int.split(','))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_str = test_str\n    num_str = tuple_str[1:-1]\n    num = int(num_str)\n    print(num)\n    return num\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return eval(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) is not tuple:\n        raise TypeError(f\"{test_str} must be a tuple\")\n    if len(test_str)!= 3:\n        raise ValueError(f\"{test_str} must be of length 3\")\n    return test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = tuple_str_int.__doc__\n    print(\"\\n\\nThe tuple \",test_str,\" has \",type(test_str),'\\n')\n    print(\"int(\",test_str,\") = \",int(test_str),\"\\n\")\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # No need to do any checks on input.\n    if type(test_str) == str:\n        return tuple(int(x) for x in test_str.split(','))\n    return test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if test_str[0] == '-':\n        return (int(test_str[1:]), -1)\n    else:\n        return (int(test_str[1:]), 1)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str[1:-1].split(\", \"))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tup_str = eval(test_str)\n    tup_int = tuple(int(num) for num in tup_str)\n    return tup_int\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return len(a)\n    if a[i] == x:\n        return i\n    return i - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return i+1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    for i in range(len(a)):\n        if x > a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi)//2\n        if x < a[mid]:\n            hi = mid\n        else:\n            lo = mid + 1\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if not a:\n        return 0\n    \n    idx = bisect.bisect_left(a, x)\n    if idx == 0:\n        return 0\n    else:\n        return idx\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    \n    index = bisect.bisect_left(a, x)\n    if index == len(a):\n        return -1\n    elif a[index] == x:\n        return index\n    else:\n        return index+1\n        \na = [1,3,5,6]\nprint(right_insertion(a, 4))\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # test case 1: x < a[0]\n    # test case 2: x > a[-1]\n    left = 0\n    right = len(a)-1\n    while left <= right:\n        mid = (left + right) // 2\n        if x < a[mid]:\n            right = mid-1\n        elif x > a[mid]:\n            left = mid+1\n        else:\n            return mid\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    lo = 0\n    hi = len(a)\n    while lo < hi:\n        mid = (lo + hi) // 2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if a == None or x >= a:\n        return None\n    if a[0] <= x < a[-1]:\n        return 0\n    if x < a[0]:\n        return 0\n    for i in range(1,len(a)):\n        if x >= a[i-1] and x < a[i]:\n            return i\n    return len(a)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab')\n    return pattern.findall(text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab')\n    mo = pattern.finditer(text)\n    for m in mo:\n        print(m)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"ab*b\"\n    return re.search(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a_b = re.compile(r'a+b')\n    if a_b.match(text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    \n    pattern = re.compile(r'ab+')\n    \n    if pattern.search(text) == None:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    match = re.search(r'a\\bb\\bb\\bb', text)\n    return match\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r\"ab+b\"\n    if re.match(pattern, text):\n        return True\n    return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab', text)\n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3}', text)\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}', text)\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}?', text)\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}?', text)\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_twentyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_twentysix(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_twentyseven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_twentyeight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_twentyfive(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}*', text)\n    \ndef text_match_twentysix(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.search(r'ab{3,5}+', text)\n    \ndef text_match_twentyseven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.match(r'[ab]', text):\n        return True\n    return False\ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space.\n    '''\n    if re.match(r'[ab] e ', text):\n        return True\n    return False\ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e [a-zA-Z]*', text):\n        return True\n    return False\ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_twentyone(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_twentytwo(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_twentythree(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_twentyfour(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'\n    followed by an e followed by a space followed by one or more\n    alphabetic characters.\n    '''\n    if re.match(r'[ab] e ([a-zA-Z ]* )*', text):\n        return True\n    return False\ndef text_match_twentyfive(text):\n    ''"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search(r\"b.*b\",text):\n        return \"Yes\"\n    else:\n        return \"No\"\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_list = list(test_str)\n    for i in range(len(new_list)):\n        new_list[i] = int(new_list[i])\n    new_tuple = tuple(new_list)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list), test_str\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list) + (test_str,)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    for i in test_str:\n        new_tuple += (i, )\n    for i in test_list:\n        new_tuple += (i, )\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return test_list + [test_str]\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str.split(',')), test_list\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + [test_str])\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    #return tuple(test_list)\n    test_tuple = tuple(test_str.split(' '))\n    return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return (test_str, *test_list)\n    \n    \nif __name__ == '__main__':\n    \n    test_list = ['a', 1, 'b', 2]\n    test_str ='some random string'\n    \n    print(new_tuple(test_list, test_str)"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\nprint(even_position([1, 2, 3, 4]))\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if(i%2!= 0):\n            print(nums[i],end ='')\n    print()\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if(i%2 == 0 and nums[i]%2!= 0):\n            return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            print(nums[i])\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if (i + 1) % 2 == 0:\n            if nums[i] % 2!= 0:\n                return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i]%2==0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 0 for i in range(0, len(nums)))\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\nprint(even_position([3, 2, 1, 5, 6, 4]))\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!=0:\n            print(f\"{i} is not even\")\n            break\n    else:\n        print(f\"{nums} is even\")\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    n = 0\n    while n < len(nums):\n        if nums[n]%2!= 0:\n            return False\n        n += 2\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0] if len(test_tup) == 1 else (test_tup[0], remove_nested(test_tup[1:]))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if len(test_tup) == 1:\n        return ()\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return test_tup[0:2] + test_tup[4:]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple([i for i in test_tup if i!= (]])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(set(test_tup))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    remove_tup = test_tup\n    remove_tup_list = []\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    result = tuple([])\n    for item in test_tup:\n        if not isinstance(item, tuple):\n            result += (item,)\n        else:\n            result += remove_nested(item)\n    return result\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return tuple(item for item in test_tup if not isinstance(item, tuple))\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    l1 = []\n    for i in test_tup:\n        if isinstance(i, tuple):\n            for j in remove_nested(i):\n                l1.append(j)\n        else:\n            l1.append(i)\n    return tuple(l1)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    nested_tup = ()\n    for i in range(len(test_tup)):\n        nested_tup += (test_tup[i],)\n    return nested_tup\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for num in input_list:\n        if type(num) == list:\n            count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    list_count = 0\n    for i in input_list:\n        if type(i) is list:\n            list_count += 1\n    return list_count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    num_list = 0\n    for list in input_list:\n        if type(list) is list:\n            num_list += 1\n    return num_list\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    length = len(input_list)\n    counter = 0\n    for i in range(length):\n        if isinstance(input_list[i],list):\n            counter += 1\n    return counter \n    \n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if isinstance(item,list):\n            count +=1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    if not input_list:\n        return count\n    if isinstance(input_list, list):\n        for i in input_list:\n            if isinstance(i, list):\n                count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    if isinstance(input_list, int):\n        input_list = [input_list]\n    count = 0\n    for x in input_list:\n        if isinstance(x, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    i = 0\n    for x in input_list:\n        if isinstance(x,list):\n            i = i+1\n    return i\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # in python you can pass a list as a variable\n    input_list = [1,2,3,4,5,6]\n    return len(input_list)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==1:\n        if arr[0]==x:\n            return 0\n        else:\n            return -1\n    elif len(arr)==0:\n        return -1\n    else:\n        mid=len(arr)//2\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            return last(arr[:mid],x)\n        else:\n            return last(arr[mid+1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(0,len(arr)-1):\n        if arr[i]>x:\n            break\n    return i"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    mid = len(arr)//2\n    while low<=high:\n        if arr[mid]==x:\n            return mid\n        elif arr[mid]>x:\n            high = mid-1\n        else:\n            low = mid+1\n        mid = (low+high)//2\n    return -1\narr = [-10, -5, -3, -1, 0, 1, 2, 3, 4, 5, 8, 13, 21, 34, 55]\nx = 1\nprint(last(arr,x))\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    low = 0\n    high = length-1\n    while low<=high:\n        mid = low+(high-low)//2\n        if x == arr[mid]:\n            low = mid\n        elif x < arr[mid]:\n            high = mid-1\n        else:\n            low = mid+1\n    return low\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    low = 0\n    high = len(arr)-1\n    while low <= high:\n        mid = low + (high - low)//2\n        if x == arr[mid]:\n            return mid\n        elif x < arr[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = len(arr)\n    if l == 0:\n        return -1\n    if l == 1:\n        if arr[0] == x:\n            return 0\n        else:\n            return -1\n    if arr[0] <= x <= arr[l-1]:\n        p = binarysearch(arr, x, 0, l-1)\n        return l - p - 1\n    if x > arr[l-1]:\n        return l - 1\n    if x < arr[0]:\n        return 0\n    \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(0,len(arr)):\n        if arr[i]==x:\n            return len(arr)-i-1\n    return -1\nprint(last([4,6,7,9,10,11,12,13,14,15],10))\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr)-1\n    mid = 0\n    if len(arr) < 1:\n        return -1\n    while l<=r:\n        mid = (l+r)//2\n        if arr[mid] == x:\n            r = mid\n            break\n        elif arr[mid] < x:\n            l = mid+1\n        elif arr[mid] > x:\n            r = mid-1\n    if arr[mid] == x:\n        return mid\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    n=len(arr)\n    if n==0 or arr[n-1]<x:\n        return -1\n    if n==1:\n        if arr[0]==x:\n            return 0\n        return -1\n    if arr[n//2]==x:\n        return n//2\n    if arr[n-1]==x:\n        return n-1\n    if arr[n//2]>x:\n        return last(arr[:n//2],x)\n    else:\n        return last(arr[n//2+1:],x)\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l=0\n    r=len(arr)-1\n    while l<r:\n        m=(l+r)//2\n        if arr[m]>x:\n            r=m-1\n        else:\n            l=m+1\n    return r\n    \n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    print(\"\\n---starta_endb(text)---\")\n    result = re.findall(r'a.+b', text)\n    if len(result) == 0:\n        print(\"No match\")\n    else:\n        print(\"'a.+b' found: \", result)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"^a.*b$\")\n    result = pattern.match(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search('a.*b', text)\n    if result!= None:\n        print(result)\n    else:\n        print(\"No Match\")\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    regex = re.compile(r'a(.*?)b')\n    result = regex.search(text)\n    if result is not None:\n        return result.group(0)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    patt = re.compile(r\"a+b\")\n    if patt.search(text)!= None:\n        return True\n    else:\n        return False\nprint(text_starta_endb(\"aaaaaaaaaaaaab\"))\nprint(text_starta_endb(\"aaaaaaaaaaaaaaabb\"))\nprint(text_starta_endb(\"aaaaaaaaaaaaaabb\"))\nprint(text_starta_endb(\"aaaaaaaaaaaaabb\"))\nprint(text_starta_endb(\"aaaaaaaaaaaaab\"))\nprint(text_starta_endb(\"aaaaaaaaaaaaaa\"))\nprint(text_starta_endb(\"aaaaaaaaaaaaa\"))\nprint(text_starta_endb(\"aaaaaaaaaaaa\"))\nprint(text_starta_endb(\"aaaaaaaaa\"))\nprint(text_starta_endb(\"aaaaa\"))\nprint(text_starta_endb(\"aaa\"))\nprint(text_starta_endb(\"aaaa\"))\nprint(text_starta_endb(\"aaaaa\"))\nprint(text_starta_endb(\"a\"))\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    reg = re.compile(r'^a.*b$')\n    if reg.search(text):\n        print(\"Yes, it matches.\")\n    else:\n        print(\"No, it doesn't match.\")\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"a.*b\"\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    return re.findall(r'a.*?b', text)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    res = re.search('a.b',text)\n    return res\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r'ab.*b')\n    matches = re.findall(pattern, text)\n    return matches\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key in dict:\n        sum += dict[key]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for key, value in dict.items():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict.values():\n        sum += i\n    return sum\n        "
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    return sum(dict.values())\n    \nprint(return_sum({\"e\":5, \"b\":4, \"d\":1, \"h\":7, \"a\":3}))\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for k, v in dict.items():\n        total += v\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    #declare variable\n    sum = 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum_odd += i\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(n):\n        if i%2==1:\n            sum_odd += i\n    print(\"sum_odd:\", sum_odd)\n    \n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n<0:\n        return None\n    if n<=1:\n        return n\n    return n + sum_odd(n-1)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i % 2!= 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n <= 0:\n        return 0\n    n_sum = 0\n    i = 1\n    while i <= n:\n        if i % 2!= 0:\n            n_sum = n_sum + i\n        i = i + 1\n    return n_sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum_odd += i\n    print(\"Sum of odd numbers from {} to {} = {}\".format(n,l,sum_odd))\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum_odd = 0\n    for i in range(n):\n        if (i % 2!= 0):\n            sum_odd = sum_odd + i\n    return sum_odd\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2!= 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n):\n        if i % 2 == 1:\n            sum = sum + i\n    print(sum)\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n < 0:\n        return sum\n    for i in range(1, n+1):\n        if i % 2!= 0:\n            sum = sum + i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n    \ndef _find_min(arr):\n    '''\n    Write a python function to find the minium value in an array.\n    '''\n    return min(arr)\n    \ndef _find_max(arr):\n    '''\n    Write a python function to find the maximum value in an array.\n    '''\n    return max(arr)\n    \ndef _is_sorted(arr):\n    '''\n    Write a python function to check if a given array is sorted or not.\n    '''\n    return sorted(arr) == arr\n    \ndef _bubble_sort(arr):\n    '''\n    Write a python function to sort an array in a bubble fashion.\n    '''\n    arr_len = len(arr)\n    for i in range(arr_len):\n        for j in range(arr_len-i-1):\n            if arr[j] > arr[j+1]:\n                arr[j], arr[j+1] = arr[j+1], arr[j]\n            \ndef _selection_sort(arr):\n    '''\n    Write a python function to sort an array in a selection fashion.\n    '''\n    arr_len = len(arr)\n    for i in range(arr_len):\n        min_index = i\n        for j in range(i+1, arr_len):\n            if arr[j] < arr[min_index]:\n                min_index = j\n        arr[i], arr[min_index] = arr[min_index], arr[i]\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # code here \n    n = len(arr)\n    if n==0:\n        return 0\n    if n==1:\n        return arr[0]\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(len(arr)):\n        sum = sum + arr[i]\n    print(sum)\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # your code here\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    else:\n        return arr[0] + _sum(arr[1:])\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr)==0:\n        return 0\n    s=0\n    for i in range(len(arr)):\n        s=s+arr[i]\n    return s\ndef _multiply(arr):\n    '''\n    Write a python function to find the product of an array.\n    '''\n    if len(arr)==0:\n        return 1\n    s=1\n    for i in range(len(arr)):\n        s=s*arr[i]\n    return s\ndef _max(arr):\n    '''\n    Write a python function to find the maximum of an array.\n    '''\n    if len(arr)==0:\n        return 0\n    s=arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]>s:\n            s=arr[i]\n    return s\ndef _min(arr):\n    '''\n    Write a python function to find the minimum of an array.\n    '''\n    if len(arr)==0:\n        return 0\n    s=arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]<s:\n            s=arr[i]\n    return s\ndef _average(arr):\n    '''\n    Write a python function to find the average of an array.\n    '''\n    if len(arr)==0:\n        return 0\n    s=_sum(arr)\n    return s/len(arr)\ndef _median(arr):\n    '''\n    Write a python function to find the median of an array.\n    '''\n    if len(arr)==0:\n        return 0\n    arr.sort()\n    if len(arr)%2==0:\n        return (_sum(arr[len(arr)//2-1:len(arr)//2+1])/2)/len(arr)\n    else:\n        return arr[len(arr)//2]\ndef _mode(arr):\n    '''\n    Write a python function to find the mode of an array.\n    '''\n    if len(arr)==0:\n        return 0\n    from collections import Counter\n    count=Counter(arr)\n    if len(count)==1:\n        return arr[0]\n    else:\n        maxfreq=count.most_common(2)\n        if maxfreq[0][1]==maxfreq[1][1]:\n            return maxfreq[1][0]\n        else:\n            return maxfreq[0][0]\ndef _range(arr):\n    '''\n    Write a python function to find the range of an array.\n    '''\n    if len(arr)==0:\n        return 0\n    s=arr[0]\n    e=arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]>e:\n            e=arr[i]\n        if arr[i]<s:\n            s=arr[i]\n    return e-s\ndef _sort(arr):\n    '''\n    Write a python function to sort an array.\n    '''\n    if len(arr)==0:\n        return arr\n    s=arr[0]\n    for i in range(1,len(arr)):\n        if arr[i]<s:\n            s=arr[i]\n    for i in range(len(arr)-1):\n        if arr[i]>s:\n            arr[i],arr[i+1]=arr[i+1],arr[i]\n    return arr\ndef _append(arr):\n    '''\n    Write a python function to add an element to an array.\n    '''\n    if len(arr)==0:\n        return arr\n    else:\n        arr.append(int(input('Enter number to be appended in array:')))\n        return arr\ndef _popleft(arr):\n    '''\n    Write a python function to remove an element from the beginning of an array.\n    '''\n    if len(arr)==0:\n        return arr\n    else:\n        arr.pop(0)\n        return arr\ndef _reverse(arr):\n    '''\n    Write a python function to reverse an array.\n    '''\n    if len(arr)==0:\n        return arr\n    else:\n        arr.reverse()\n        return arr\ndef _count(arr):\n    '''\n    Write a python function to count the number of elements in an array.\n    '''\n    if len(arr)==0:\n        return 0\n    else:\n        return len(arr)\ndef _sum_of_squares(arr):\n    '''\n    Write a python function to find the sum of the squares of an array.\n    '''\n    if len(arr)==0:\n        return 0\n    s=0\n    for i in range(len(arr)):\n        s=s+arr[i]**2\n    return s\ndef _sum_of_even_digits(arr):\n    '''\n    Write a python function to find the sum of the even digits in an array.\n    '''\n    if len(arr)==0:\n        return 0\n    s=0\n    for i in range(len(arr)):\n        if i%2==0:\n            s=s+arr[i]\n    return s\ndef _sum_of_odd_digits(arr):\n    '''\n    Write a python function to find the sum of the odd digits in an array.\n    '''\n    if len(arr)==0:\n        return 0\n    s=0\n    for i in range(len(arr)):\n        if i%2!=0:\n            s=s+arr[i]\n    return s\ndef _list_of_common_elements(arr1,arr2):\n    '''\n    Write a python function to find the common elements of an array and another.\n    '''\n    if len(arr1)==0:\n        return []\n    if len(arr2)==0:\n        return []\n    l1=list(set(arr1))\n    l2=list(set(arr2))\n    c=[]\n    for i in l1:\n        if i in l2:\n            c.append(i)\n    return c\ndef _list_of_common_elements_m(arr1,arr2):\n    '''\n    Write a python function to find the common elements of an array and another.\n    '''\n    if len(arr1)==0:\n        return []\n    if len(arr2)==0:\n        return []\n    l1=list(set(arr1))\n    l2=list(set(arr2))\n    c=[]\n    for i in l1:\n        if i in l2:\n            c.append(i)\n    return c\ndef _list_of_common_elements_m2(arr1,arr2):\n    '''\n    Write a python function to find the common elements of an array and another.\n    '''\n    if len(arr1)==0:\n        return []\n    if len(arr2)==0:\n        return []\n    l1=list(set(arr1))\n    l2=list(set(arr2))\n    l1.sort()\n    l2.sort()\n    c=[]\n    i=j=0\n    while i<len(l1) and j<len(l2):\n        if l1[i]==l2[j]:\n            c.append(l1[i])\n            i+=1\n            j+=1\n        elif l1[i]<l2[j]:\n            i+=1\n        else:\n            j+=1\n    return c\ndef _print_array(arr):\n    '''\n    Write a python function to print an array.\n    '''\n    if len(arr)==0:\n        print(arr)\n    else:\n        for i in range(len(arr)):\n            print(arr[i],end=',')\n        print()\ndef _print_array_rec(arr):\n    '''\n    Write a python function to print an array using recursion.\n    '''\n    if len(arr)==0:\n        return arr\n    print(arr[0],end=',')\n    return _print_array_rec(arr[1:])\ndef _print_array_rec2(arr):\n    '''\n    Write a python function to print an array using re"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    ans = 0\n    for a in arr:\n        ans = ans + a\n    print('Sum of the elements of the array = ', ans)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    s=0\n    for i in arr:\n        s+=i\n    return s\nprint(\"Sum of Array:\",_sum([1,2,3,4,5]))\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # print('Rotating left by d bits')\n    # print('n:',n,'d:',d)\n    # print(n>>d)\n    return (n<<d) | (n>>(32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    \n    if(d == 0):\n        print(\"d cannot be zero.\")\n        return\n    elif(d > n):\n        print(\"d must be less than 32\")\n        return\n    else:\n        mask = pow(2,32)\n        num = n >> d\n        new_num = (num<<(32-d)) | (n&mask)\n        return new_num\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n<<d)|((n>>(32-d))&0xffffffff)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    d = d % 32\n    if d==0:\n        return n\n    return ((n << d) | (n >> (32-d))) & (2**32-1)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    n = (n << d) | (n >> 32 - d)\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return (n << d) | (n >> (32 - d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n    return (n << d) | (n >> (32-d))\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    if d == 0:\n        return n\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return ''.join(text.split())\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    import re\n    new_text = re.sub(r'\\s+','',text)\n    return new_text\ndef remove_all_spaces_2(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    import re\n    return re.sub(r'\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s', '', text)\n    #print(re.sub('\\s', '', text))\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = text.replace(\" \",\"\")\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    new_text = re.sub('\\s+', '', text)\n    return new_text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+', '', text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    string = text.strip()\n    print(string)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub('\\s+','', text)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    \n    count=0\n    for i in range(x+1):\n        for j in range(y+1):\n            for k in range(z+1):\n                if i == j and j == k:\n                    count += 1\n    print(count)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    num = 0\n    if x == y == z:\n        num = num + 1\n    return num\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if(x==y and y==z):\n        print(\"All are equal\")\n    else:\n        print(\"Not all are equal\")\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    sum = x + y + z\n    print(sum)\n    count = 0\n    for i in range(1,sum+1):\n        if x == y == z:\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if x == y and x == z:\n        print('The input numbers are equal')\n    elif x == y or y == z:\n        print('The input numbers are equal')\n    else:\n        print('The input numbers are not equal')\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count = count + 1\n    else:\n        return count\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    x = int(x)\n    y = int(y)\n    z = int(z)\n    if x == y and x == z:\n        count = count + 1\n    elif y == x and y == z:\n        count = count + 1\n    elif z == x and z == y:\n        count = count + 1\n    print(count)\ntest_three_equal(3,3,3)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count=0\n    for i in range(x,y):\n        for j in range(i+1,z):\n            if(i==j):\n                count=count+1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[j]<arr[i]:\n                count+=1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    c=0\n    if len(arr)<2:\n        return c\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            c+=1\n    return c+1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #code here\n    arr.sort()\n    count = 1\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count\n    "
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        j = i\n        while(j < n and arr[j] < arr[i]):\n            #swap\n            temp = arr[j]\n            arr[j] = arr[i]\n            arr[i] = temp\n            j += 1\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count=0\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            count+=1\n    return count\n        \n    \n    \n    \n    \ndef is_palindrome(num):\n    '''\n    Write a python program to check whether a given number is a palindrome or not. \n    Palindrome number is a number which reads the same from left to right as from right to left. \n    '''\n    rev=0\n    temp=num\n    while num:\n        rev=(rev*10)+num%10\n        num=num//10\n    return temp==rev\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # Ascending order:\n    # for i in range(1, len(arr)):\n    #     if arr[i - 1] > arr[i]:\n    #         count = count + 1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    n = len(arr)\n    arr.sort()\n    count = 0\n    for i in range(n):\n        if arr[i]!= i+1:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # number of rotations required to sort the array\n    # since the array is already sorted\n    # so we just need to count the number of times we need to swap elements\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(0, len(arr)-1):\n        if arr[i] > arr[i+1]:\n            count += 1\n            j = i\n            while arr[j] > arr[i]:\n                count += 1\n                j = j - 1\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    #Edge cases\n    if (n <= 0) : \n        return False\n        \n    #Base case\n    if (n == 1) : \n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # TODO\n    \n    is_perfect_square_int = n\n    while is_perfect_square_int > 0:\n        is_perfect_square_int = is_perfect_square_int // 10\n    return is_perfect_square_int == 1\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 2 :\n        return False\n    i = 1\n    while i * i <= n :\n        if i * i == n :\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    if n < 1:\n        return False\n    i = int(math.sqrt(n))\n    return i * i == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n > 0:\n        return n ** (1/2) % 1 == 0\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    return int(sqrt(n))**2 == n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    root = int(math.sqrt(n))\n    return (root*root) == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    x = int(sqrt(n))\n    y = int(sqrt(n + 1))\n    if x**2 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    \n    if (n > 1) :\n        i = 1\n        while (i * i <= n):\n            if (n % i == 0):\n                if (n == i * i):\n                    return True\n                else:\n                    return False\n            i += 1\n    else:\n        return False\n    \nif __name__ == '__main__':\n    n = -1\n    if (is_perfect_square(n)):\n        print(str(n) + \" is perfect square\")\n    else:\n        print(str(n) + \" is not perfect square\")\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    else :\n        while(n!= 0) :\n            r = n % 10\n            n = n // 10\n            if r!= 0 and r!= n :\n                return False\n        return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    result = False\n    if len(arr) == 0:\n        return False\n    if len(arr) == 1:\n        return True\n    if len(arr) > 2:\n        result = is_product_even(arr[1:])\n    elif len(arr) == 2:\n        if arr[0]*arr[1] % 2 == 0:\n            return True\n        else:\n            return False\n    else:\n        return result\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    elif len(arr) == 1:\n        return True\n    else:\n        return is_product_even(arr[1:]) and (arr[0] * arr[-1]) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr[0]!= 0:\n        return False\n    else:\n        for i in range(1, len(arr)):\n            if arr[i] % 2!= 0:\n                return False\n            else:\n                continue\n    return True\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) < 1:\n        return False\n    prod = 1\n    for num in arr:\n        prod *= num\n    return prod % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) == 0:\n        return False\n    product = 1\n    for i in arr:\n        product *= i\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) <= 1:\n        return True\n    else:\n        return (arr[0] * arr[1]) % 2 == 0 and is_product_even(arr[2:])\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    n = arr[0]\n    for i in range(1, len(arr)):\n        n *= arr[i]\n    if n % 2 == 0:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if arr == None or len(arr) == 0:\n        return False\n    p = 1\n    for i in range(len(arr)):\n        p = p * arr[i]\n    if p%2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) <= 1:\n        return False\n    else:\n        prod = 1\n        for i in range(len(arr)):\n            prod *= arr[i]\n        return prod % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if len(arr) > 0:\n        prod = 1\n        for x in arr:\n            prod *= x\n        return prod % 2 == 0\n    else:\n        return False\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    return_list = []\n    for i in range(len(lists)):\n        temp_list = []\n        for j in range(len(lists[i])):\n            temp_list.append(lists[i][j])\n        return_list.append(temp_list)\n    max_sum = return_list[0]\n    for i in range(len(return_list)):\n        for j in range(len(return_list[i])):\n            if return_list[i][j] > max_sum[j]:\n                max_sum = return_list[i]\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    # loop through list of lists\n    for list in lists:\n        # check if sum of list is higher than max sum\n        if sum(list) > max_sum:\n            # if higher, set max sum to be sum of list\n            max_sum = sum(list)\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    total_sum = 0\n    max_sum = 0\n    \n    for i in range(len(lists)):\n        current_sum = 0\n        for j in range(len(lists[i])):\n            current_sum += lists[i][j]\n        if current_sum > max_sum:\n            max_sum = current_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    _max = -1\n    for i in range(len(lists)):\n        for j in range(len(lists[i])):\n            _max = max(_max,lists[i][j])\n    return _max\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not isinstance(lists,list):\n        raise ValueError(\"List is not a list\")\n    \n    if len(lists) <= 1:\n        return lists\n    else:\n        lists = sorted(lists,key=lambda x:x[0])\n        max_sum = lists[-1][0]\n        max_index = 0\n        \n        for index in range(len(lists)):\n            if max_sum < sum(lists[index]):\n                max_sum = sum(lists[index])\n                max_index = index\n        return lists[max_index]\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for l in lists:\n        l_sum = 0\n        for i in range(len(l)):\n            l_sum += l[i]\n            if l_sum > max_sum:\n                max_sum = l_sum\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = lists[0][0] + lists[0][1]\n    max_list = lists[0]\n    for l in lists:\n        if max_sum < l[0] + l[1]:\n            max_sum = l[0] + l[1]\n            max_list = l\n    return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in range(len(lists)):\n        if sum(lists[i]) > max_sum:\n            max_sum = sum(lists[i])\n    print(max_sum)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] > max:\n            max = test_str[i]\n            count = 1\n        elif test_str[i] == max:\n            count += 1\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 0\n    prev = 'empty'\n    max_count = 0\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) < 2:\n        return 0\n    max_count = 1\n    curr_count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            curr_count += 1\n        else:\n            max_count = max(curr_count, max_count)\n            curr_count = 1\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    l = list(test_str)\n    x = 0\n    index = 0\n    while index < len(l):\n        x = 0\n        while index < len(l) and x < len(l) and l[index].isupper():\n            x += 1\n            index += 1\n        if x > x:\n            x = x - 1\n            index -= 1\n        if x > x:\n            x = 0\n            index -= 1\n        if x > x:\n            break\n        print(x)\n    return max(x, index)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    #returns length of longest run of uppercase characters\n    longest_run = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i].isupper():\n            count += 1\n        else:\n            if count > longest_run:\n                longest_run = count\n            count = 0\n        \n    return longest_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    '''\n    string = \"BANANA\"\n    print(max_run_uppercase(string))\n    print(string)\n    '''\n    if test_str == \"\":\n        return 0\n    else:\n        count = 0\n        max_count = 0\n        for i in range(len(test_str)):\n            if test_str[i].isupper():\n                count += 1\n            else:\n                count = 0\n            if count > max_count:\n                max_count = count\n        return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    max_count = 1\n    count = 1\n    curr_count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i-1]:\n            curr_count += 1\n        else:\n            if curr_count > max_count:\n                max_count = curr_count\n            curr_count = 1\n    if curr_count > max_count:\n        max_count = curr_count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    #print(test_str)\n    count = 1\n    if len(test_str) < 2:\n        return 1\n    if test_str[0].isupper() and test_str[1].islower():\n        return 2\n    for i in range(1, len(test_str)):\n        if test_str[i].isupper() and test_str[i-1].islower():\n            count += 1\n            if test_str[i].islower():\n                break\n    return count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    dp_arr = [[0]*256 for _ in range(len(test_str))]\n    for i in range(len(test_str)-1, -1, -1):\n        curr_char = test_str[i]\n        for j in range(256):\n            if curr_char == 'Z':\n                dp_arr[i][j] = 1\n            else:\n                if j == ord(curr_char):\n                    dp_arr[i][j] = dp_arr[i+1][j-ord(curr_char)] + 1\n                else:\n                    dp_arr[i][j] = dp_arr[i+1][j]\n    return max(dp_arr[0])\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # Max run count of uppercase character\n    max_count = 0\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #Using regular method\n    # for i in nums:\n    #     if i % 2!= 0:\n    #         return i\n    # return None\n    \n    #Using enumerate method\n    for index, value in enumerate(nums):\n        if value % 2!= 0:\n            return value\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # This is the fastest way to find the first odd number in a given list of numbers\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return False\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if type(nums)!= list:\n        return 'Invalid Input'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    #return -1 if no odd numbers are in the list\n    if not nums:\n        return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    nums = list(nums)\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if isinstance(nums,list):\n        for i in nums:\n            if isinstance(i,int) and i%2 == 1:\n                return i\n            else:\n                return None\n    else:\n        return None\nprint(first_odd([1,2,3,4,5,6,7]))\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    odd_numbers = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_numbers.append(i)\n    if len(odd_numbers) > 0:\n        return odd_numbers[0]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i%2!=0:\n            return i\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num%2!=0:\n            return num\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    A,B,K = test_tup\n    count = 0\n    for x in A:\n        if x in B:\n            count += 1\n    if count == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    try:\n        if test_tup[1][K-1] == test_tup[2][K-1]:\n            return True\n        else:\n            return False\n    except:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return (test_tup[0] in K and test_tup[1] in K) or (test_tup[1] in K and test_tup[0] in K)\n    # for i in range(len(K)):\n    #     if test_tup[0] in K[i] and test_tup[1] in K[i]:\n    #         return True\n    # return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    ans = False\n    if test_tup[0] == K:\n        if test_tup[1] == K:\n            if test_tup[2] == K:\n                ans = True\n    return ans\n    \n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_list = []\n    for i in test_tup:\n        test_list.append(i[0])\n    test_list = set(test_list)\n    if K in test_list:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if len(test_tup) > K:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    t1, t2 = test_tup\n    return (t1[0] == t2[0]) and (t1[1] == t2[1]) and (t1[2] == t2[2])\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if(test_tup[0] == K):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in range(len(test_tup)):\n        if test_tup[i] == K:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Two tuples of unequal length\")\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] > test_tup2[0]:\n        return False\n    elif test_tup1[0] < test_tup2[0]:\n        return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i, j in zip(test_tup1, test_tup2):\n        if i<j:\n            print('{} is smaller than {}'.format(i, j))\n        else:\n            print('{} is greater than {}'.format(i, j))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(a < b for a, b in zip(test_tup2, test_tup1))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return test_tup1 < test_tup2\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return 'First tuple has more elements.'\n    elif len(test_tup1) < len(test_tup2):\n        return 'Second tuple has more elements.'\n    elif test_tup1 == test_tup2:\n        return 'Tuple have equal elements.'\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] < test_tup2[i]:\n                return False\n            elif test_tup1[i] > test_tup2[i]:\n                return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if test_tup1[0] < test_tup1[1]:\n        print(test_tup1[0], \"is smaller than \", test_tup1[1])\n    else:\n        print(test_tup1[1], \"is smaller than \", test_tup1[0])\n    if test_tup2[0] < test_tup2[1]:\n        print(test_tup2[0], \"is smaller than \", test_tup2[1])\n    else:\n        print(test_tup2[1], \"is smaller than \", test_tup2[0])\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    return (b, d) < (a, c)\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    assert len(test_tup1) == len(test_tup2), 'Tuple lengths should be same.'\n    i = 0\n    while i < len(test_tup2):\n        assert test_tup1[i] <= test_tup2[i], 'The first tuple must be smaller than the second one.'\n        i += 1\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if(len(test_tup1)!= len(test_tup2)):\n        return False\n    for i in range(len(test_tup1)):\n        if(test_tup1[i] > test_tup2[i]):\n            return False\n    return True\n"
    }
]