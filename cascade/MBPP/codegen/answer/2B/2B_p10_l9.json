[
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_ele = []\n    for i in test_tup1:\n        if i in test_tup2:\n            shared_ele.append(i)\n    return shared_ele\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    #your code here\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    for i in test_tup1:\n        if i in test_tup2:\n            return True\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    lst1, lst2 = test_tup1[0], test_tup2[0]\n    lst1.sort()\n    lst2.sort()\n    i = 0\n    j = 0\n    while i < len(lst1) and j < len(lst2):\n        if lst1[i] == lst2[j]:\n            yield lst1[i]\n            i += 1\n            j += 1\n        elif lst1[i] < lst2[j]:\n            i += 1\n        else:\n            j += 1\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    list1=[]\n    list2=[]\n    list3=[]\n    if len(test_tup1)>len(test_tup2):\n        for i in range(len(test_tup1)):\n            if test_tup1[i] not in test_tup2:\n                list1.append(test_tup1[i])\n        for i in range(len(test_tup2)):\n            if test_tup2[i] not in test_tup1:\n                list2.append(test_tup2[i])\n    else:\n        for i in range(len(test_tup2)):\n            if test_tup2[i] not in test_tup1:\n                list2.append(test_tup2[i])\n        for i in range(len(test_tup1)):\n            if test_tup1[i] not in test_tup2:\n                list1.append(test_tup1[i])\n    for i in range(len(list1)):\n        list3.append(list1[i])\n    return list3\nprint(similar_elements([1,2,3,4],[3,4,5,6,7]))\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    return tup1.intersection(tup2)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    test_list1 = list(test_tup1)\n    test_list2 = list(test_tup2)\n    shared_list = list(set(test_list1) & set(test_list2))\n    return shared_list\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    shared_elements = set(test_tup1) & set(test_tup2)\n    return list(shared_elements)\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    set_tup1 = set(test_tup1)\n    set_tup2 = set(test_tup2)\n    for elem in set_tup1:\n        if elem in set_tup2:\n            return elem\n    else:\n        return None\n"
    },
    {
        "number": 2,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def similar_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the shared elements from the given two lists.\n    '''\n    intersection = []\n    for element in test_tup1:\n        if element in test_tup2:\n            intersection.append(element)\n    return intersection\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n % 2!= 0:\n        return False\n    for i in range(3, int(math.sqrt(n) + 1), 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n < 2:\n        return True\n    elif n == 2:\n        return False\n    else:\n        for i in range(2,n):\n            if (n % i) == 0:\n                return True\n    return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    \n    if n == 1:\n        return True\n    if n == 2:\n        return False\n    if n % 2 == 0:\n        return False\n    if n == 3:\n        return False\n    for i in range(3, int(math.sqrt(n)+1), 2):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    for i in range(2,n):\n        if n%i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    i = 2\n    while i <= math.sqrt(n):\n        if n % i == 0:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n>1:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n        else:\n            return True\n    else:\n        return False\ndef is_prime(n):\n    '''\n    Write a python function to identify prime numbers.\n    '''\n    if n>1:\n        for i in range(2,int(math.sqrt(n))+1):\n            if n%i==0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 2:\n        return False\n    for i in range(2, int(math.sqrt(n) + 1)):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 3,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef is_not_prime(n):\n    '''\n    Write a python function to identify non-prime numbers.\n    '''\n    if n == 1:\n        return False\n    else:\n        for i in range(2, int(math.sqrt(n)) + 1):\n            if n % i == 0:\n                return False\n        return True\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums is None or len(nums) == 0:\n        return []\n    hq.heapify(nums)\n    hq.heappush(nums, -nums[0])\n    lst = []\n    for i in range(1,n):\n        x = -hq.heappop(nums)\n        lst.append(x)\n    return lst\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if nums is None or len(nums) == 0:\n        return []\n    hq.heapify(nums)\n    hq.heappush(nums, -nums[0])\n    lst = []\n    for i in range(1,n):\n        x = -hq.heappop(nums)\n        lst.append(x)\n    return lst\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    #use min heap to store the largest\n    #initilize two stack\n    #pop the first element\n    #push the rest into the larger stack\n    #when the stack is empty,\n    #pop the first element\n    #push the rest into the smaller stack\n    largest_heap=[]\n    smaller_heap=[]\n    for i in range(n):\n        hq.heappush(smaller_heap, nums[i])\n        if len(smaller_heap)>n:\n            hq.heappop(smaller_heap)\n    for i in range(n,len(nums)):\n        hq.heappush(largest_heap, nums[i])\n        if len(largest_heap)>n:\n            hq.heappop(largest_heap)\n        hq.heappush(smaller_heap, nums[i])\n    result=[]\n    for i in range(len(largest_heap)):\n        result.append(largest_heap[i])\n    for i in range(len(smaller_heap)):\n        result.append(smaller_heap[i])\n    return result\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    return hq.nlargest(n, nums)\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if not nums:\n        return []\n    heap=[]\n    for i in range(n):\n        hq.heappush(heap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i]>heap[0]:\n            hq.heappop(heap)\n            hq.heappush(heap,nums[i])\n    return heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap=[]\n    for i in range(len(nums)):\n        hq.heappush(heap,nums[i])\n    for i in range(n-1):\n        hq.heappop(heap)\n    res=[]\n    for i in range(n):\n        res.append(hq.heappop(heap))\n    res=res[::-1]\n    return res\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n<=len(nums):\n        h=[]\n        for i in range(n):\n            hq.heappush(h,-1*nums[i])\n        return [-1*x for x in h]\n    else:\n        return nums\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    arr=[]\n    arr_temp=nums\n    for i in range(n):\n        if len(arr)==0:\n            hq.heappush(arr,arr_temp[i])\n        elif arr_temp[i]>hq.heappop(arr):\n            hq.heappush(arr,-arr_temp[i])\n    for i in range(len(arr)):\n        hq.heappop(arr)\n    return arr\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    min_heap = nums[:n]\n    for i in range(n-1,-1,-1):\n        heapq.heapify(min_heap)\n        heapq.heappop(min_heap)\n    return min_heap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    if n<=0:\n        return []\n    maxheap = []\n    for i in range(n):\n        hq.heappush(maxheap,nums[i])\n    for i in range(n,len(nums)):\n        if nums[i] > maxheap[0]:\n            hq.heappop(maxheap)\n            hq.heappush(maxheap,nums[i])\n    return maxheap\n"
    },
    {
        "number": 4,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_queue_largest(nums,n):\n    '''\n    Write a function to find the n largest integers from a given list of numbers, returned in descending order.\n    '''\n    heap = nums[:n]\n    heapq.heapify(heap)\n    for i in range(n, len(nums)):\n        if nums[i] > heap[0]:\n            heapq.heapreplace(heap, nums[i])\n    return heap\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    return (x & (x-1))==0\nprint(is_Power_Of_Two(1))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    '''\n    base case:\n        1. when there are no more significant bits, we have found a power of two\n        2. if n and m are the same, then they are not power of two\n        3. if n and m are not same, they are not power of two\n    '''\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    n1 = 0\n    n2 = 0\n    n1 = x\n    n2 = x\n    flag = 1\n    while flag:\n        temp = n1 & n2\n        if temp == 0:\n            flag = 0\n        else:\n            n1 = n2\n            n2 = temp\n    return flag\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    #write your code here\n    if x<=0:\n        return False\n    else:\n        while x>0:\n            if x % 2!= 0:\n                return False\n            x = x//2\n        return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    # x = int(input('Enter the first number: ')) \n    # y = int(input('Enter the second number: ')) \n    # if x > y: \n    #     x, y = y, x \n    \n    # for i in range(x): \n    #     if x & 1: \n    #         return False\n    #     else: \n    #         x >>= 1\n    # return True\n    if not x or not y:\n        return False\n    while x!= y:\n        if x == 0:\n            return False\n        x = x >> 1\n        y = y >> 1\n    return True\n    \nprint(is_Power_Of_Two(5))\nprint(is_Power_Of_Two(5))\nprint(is_Power_Of_Two(7))\nprint(is_Power_Of_Two(6))\nprint(is_Power_Of_Two(10))\nprint(is_Power_Of_Two(2))\nprint(is_Power_Of_Two(3))\nprint(is_Power_Of_Two(64))\nprint(is_Power_Of_Two(3))\nprint(is_Power_Of_Two(11))\nprint(is_Power_Of_Two(10))\nprint(is_Power_Of_Two(4))\nprint(is_Power_Of_Two(13))\nprint(is_Power_Of_Two(16))\nprint(is_Power_Of_Two(15))\nprint(is_Power_Of_Two(24))\nprint(is_Power_Of_Two(18))\nprint(is_Power_Of_Two(9))\nprint(is_Power_Of_Two(5))\nprint(is_Power_Of_Two(1))\nprint(is_Power_Of_Two(0))\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while(x):\n        x = x >> 1\n        if x == 1:\n            return True\n    return False\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    if (x == 0):\n        return False\n    while (x > 0):\n        if x % 2 == 0:\n            return False\n        x = x >> 1\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x>1:\n        if x%2==1:\n            return False\n        x/=2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    while x > 0:\n        if x % 2!= 0: \n            return False\n        x = x // 2\n    return True\n"
    },
    {
        "number": 6,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Power_Of_Two (x): \n    '''\n    Write a python function to check whether the two numbers differ at one bit position only or not.\n    '''\n    \n    if x == 1:\n        return False\n    while x>1:\n        if x%2!=0:\n            return False\n        x = x//2\n    return True\n    \n    \n    \n        \n        \n    "
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    #\n    # +++your code here+++\n    \n    return ''.join([word for word in text if len(word) >= 4])\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    string = text.split()\n    result = []\n    for word in string:\n        if len(word) >= 4:\n            result.append(word)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    regex = r'\\b[a-zA-Z]+\\b'\n    result = re.findall(regex, text)\n    print('Result is: ', result)\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    pass\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    long_words = list()\n    for i in text.split():\n        if len(i) >= 4:\n            long_words.append(i)\n    return long_words\n    "
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    result = []\n    for item in text.split(' '):\n        if len(item)>=4:\n            result.append(item)\n    return result\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(len(i)>=4):\n            res.append(i)\n    return res\ndef find_lower_case_string(text):\n    '''\n    Write a function to find all words which are in lower case in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if i.islower():\n            res.append(i)\n    return res\ndef find_numeric_string(text):\n    '''\n    Write a function to find all words which are numeric in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if i.isnumeric():\n            res.append(i)\n    return res\ndef find_char_dot(text):\n    '''\n    Write a function to find all words which contain a dot.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(\".\" in i):\n            res.append(i)\n    return res\ndef find_char_minus(text):\n    '''\n    Write a function to find all words which contain a minus in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(\"-\" in i):\n            res.append(i)\n    return res\ndef find_char_dot_dot(text):\n    '''\n    Write a function to find all words which contain a dot, a dot and a dot in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(\".\" in i and \".\" in i and \".\" in i):\n            res.append(i)\n    return res\ndef find_word_uppercase(text):\n    '''\n    Write a function to find all words which contain at least one upper case in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(i.isupper()):\n            res.append(i)\n    return res\ndef find_word_lowercase_and_uppercase(text):\n    '''\n    Write a function to find all words which contain at least one lower case and one upper case in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(i.isupper() and i.islower()):\n            res.append(i)\n    return res\ndef find_word_numeric(text):\n    '''\n    Write a function to find all words which contain at least one numeric in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(i.isnumeric()):\n            res.append(i)\n    return res\ndef find_word_alpha(text):\n    '''\n    Write a function to find all words which contain at least one alpha in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(i.isalpha()):\n            res.append(i)\n    return res\ndef find_word_spaces(text):\n    '''\n    Write a function to find all words which contain at least one space in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(i.isspace()):\n            res.append(i)\n    return res\ndef find_word_capitals(text):\n    '''\n    Write a function to find all words which contain at least one capital letter in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(i.isupper()):\n            res.append(i)\n    return res\ndef find_word_punctuations(text):\n    '''\n    Write a function to find all words which contain at least one punctuation in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(i.isalpha() and not i.isnumeric() and not i.isalnum()):\n            res.append(i)\n    return res\ndef find_word_special_characters(text):\n    '''\n    Write a function to find all words which contain at least one special character in a string.\n    '''\n    res=[]\n    for i in text.split(\" \"):\n        if(i.isalpha() and not i.isnumeric() and not i.isalnum() and not i.isspace()):\n            res.append(i)\n    return res\ndef find_all_words(text):\n    '''\n    Write a function to find all words in a string.\n    '''\n    words=[]\n    for i in text.split(\" \"):\n        words.append(i)\n    return words\ndef find_non_repeated_words(text):\n    '''\n    Write a function to find all non-repeated words in a string.\n    '''\n    words=[]\n    for i in text.split(\" \"):\n        if(i not in words):\n            words.append(i)\n    return words\ndef find_longest_word(text):\n    '''\n    Write a function to find the longest word in a string.\n    '''\n    res=[]\n    word=\"\"\n    for i in text.split(\" \"):\n        if(len(i)>len(word)):\n            word=i\n    res.append(word)\n    return res\ndef find_longest_word_with_special_characters(text):\n    '''\n    Write a function to find the longest word in a string containing special characters.\n    '''\n    res=[]\n    word=\"\"\n    for i in text.split(\" \"):\n        if(i.isalpha() or i.isnumeric() or i.isalnum()):\n            word=i\n    res.append(word)\n    return res\ndef find_longest_word_with_uppercase(text):\n    '''\n    Write a function to find the longest word in a string containing uppercase letters.\n    '''\n    res=[]\n    word=\"\"\n    for i in text.split(\" \"):\n        if(i.isupper()):\n            word=i\n    res.append(word)\n    return res\ndef find_longest_word_with_numeric(text):\n    '''\n    Write a function to find the longest word in a string containing numerical letters.\n    '''\n    res=[]\n    word=\"\"\n    for i in text.split(\" \"):\n        if(i.isnumeric()):\n            word=i\n    res.append(word)\n    return res\ndef find_longest_word_with_spaces(text):\n    '''\n    Write a function to find the longest word in a string containing spaces.\n    '''\n    res=[]\n    word=\"\"\n    for i in text.split(\" \"):\n        if(i.isspace()):\n            word=i\n    res.append(word)\n    return res\ndef find_longest_word_with_caps_and_spaces(text):\n    '''\n    Write a function to find the longest word in a string containing capital letters and spaces.\n    '''\n    res=[]\n    word=\"\"\n    for i in text.split(\" \"):\n        if(i.isupper() and i.isspace()):\n            word=i\n    res.append(word)\n    return res\ndef find_longest_word_with_non_repeated_special_characters(text):\n    '''\n    Write a function to find the longest word in a string containing special characters and non-repeated characters.\n    '''\n    res=[]\n    word=\"\"\n    for i in text.split(\" \"):\n        if(i.isalpha() or i.isnumeric() or i.isalnum() and not i.isnumeric() and not i.isalnum() and not i.isspace()):\n            word=i\n    res.append(word)\n    return res\ndef find_longest_word_containing_uppercase_with_special_characters(text):\n    '''\n    Write a function to find the longest word in a string containing uppercase letters and special characters.\n    '''\n    res=[]\n    word=\"\"\n    for i in text.split(\" \"):\n        if(i.isupper() and i.isspace()):\n            word=i\n    res.appen"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    arr = re.findall(r'\\b\\w{4,}\\b', text)\n    return arr\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = []\n    for word in re.findall(r'\\w+', text):\n        if len(word) >= 4:\n            res.append(word)\n    return res\n"
    },
    {
        "number": 7,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_char_long(text):\n    '''\n    Write a function to find all words which are at least 4 characters long in a string.\n    '''\n    res = re.findall(r'\\b[a-zA-Z]+\\b', text)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    # init empty list\n    squares = []\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for n in nums:\n        new_list.append(n*n)\n    return new_list\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    res = []\n    for x in nums:\n        res.append(x**2)\n    return res\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [i**2 for i in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num**2 for num in nums]\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    new_list = []\n    for num in nums:\n        new_list.append(num**2)\n    return new_list\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    \n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    squares = []\n    for num in nums:\n        squares.append(num**2)\n    return squares\nprint(square_nums([1,2,3,4,5]))\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    result = []\n    for num in nums:\n        result.append(num**2)\n    return result\n"
    },
    {
        "number": 8,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_nums(nums):\n    '''\n    Write a function to find squares of individual elements in a list.\n    '''\n    return [num*num for num in nums]\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = str.lower()\n    \n    c = Counter(str)\n    \n    return (len(str) - sum(c.values()))\n    \ndef reverse_words_and_strings(str):\n    '''\n    Write a Python function to reverse the words in a given string. \n    Sample input: 'My name is Shreya'\n    Output:'sreya My nam e is'\n    '''\n    str = str.split()\n    reversed_str = \" \".join(str[::-1])\n    \n    return reversed_str\n    \ndef get_indices_of_letter(letter, str):\n    '''\n    Write a Python function to return a list containing all occurrences of letter in str.\n    Sample input: 'GeeksForGeeks', 'For'\n    Output: ['Geeks', 'For']\n    '''\n    \n    return [i for i in range(len(str)) if letter == str[i]]\n    \ndef count_digits(str):\n    '''\n    Write a Python function to count the number of digits in a given string.\n    Sample input: 'GeeksForGeeks'\n    Output: 6\n    '''\n    return sum([1 for i in str if i.isdigit()])\n    \ndef is_palindrome(str):\n    '''\n    Write a Python function to check if a string is palindrome or not.\n    Sample input: 'GeeksforGeeks'\n    Output: True\n    '''\n    \n    return str == str[::-1]\n    \ndef common_letters_count(str1, str2):\n    '''\n    Write a Python function to count the number of common letters in two given strings.\n    Sample input: 'Geeksforgeeks', 'Geeks'\n    Output: 2\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    common_letters = set(str1) & set(str2)\n    \n    return len(common_letters)\n    \ndef zero_matrix(arr):\n    '''\n    Write a python function to replace all the elements of a matrix to zero.\n    '''\n    return [[0 if i == j else 1 for j in range(len(arr[0]))] for i in range(len(arr))]\n    \ndef diagonal_sum(arr):\n    '''\n    Write a python function to calculate the sum of each of the diagonal elements.\n    '''\n    return sum(arr[i][i] for i in range(len(arr)))\n    \ndef bubble_sort(arr):\n    '''\n    Write a python function to sort an array in ascending order using the bubble sort algorithm.\n    '''\n    \n    size = len(arr)\n    \n    for i in range(size - 1):\n        for j in range(size - i - 1):\n            if arr[j] > arr[j + 1]:\n                arr[j], arr[j + 1] = arr[j + 1], arr[j]\n                \n    return arr\n    \ndef multiply_by_two(arr):\n    '''\n    Write a python function to multiply all the elements of a list by 2.\n    '''\n    return [i * 2 for i in arr]\n    \ndef longest_substring(str1, str2):\n    '''\n    Write a python function to find the length of longest common substring between two given strings.\n    '''\n    str1 = str1.lower()\n    str2 = str2.lower()\n    \n    for i in range(len(str1)):\n        if str1[i] not in str2:\n            str2 = str2[:i] + str2[i + 1:]\n            \n    return len(str2)\n    \ndef remove_nth_element(arr, n):\n    '''\n    Write a python function to remove nth element from an array\n    '''\n    arr = arr[:-1]\n    \n    return arr\n    \ndef remove_element(arr, value):\n    '''\n    Write a python function to remove a given element from an array.\n    '''\n    \n    for i in range(len(arr)):\n        if arr[i] == value:\n            arr = arr[:i] + arr[i + 1:]\n            break\n    \n    return arr\n    \ndef is_palindrome_from_slicing(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    return str == str[::-1]\n    \ndef multiply_list(arr):\n    '''\n    Write a python function to multiply all the elements of list\n    '''\n    return reduce(lambda x, y: x * y, arr)\n    \ndef multiply_list_from_slicing(arr):\n    '''\n    Write a python function to multiply all the elements of list\n    '''\n    return reduce(lambda x, y: x * y, arr[::-1])\n    \ndef calculate_gcd(num1, num2):\n    '''\n    Write a python function to calculate the GCD of given numbers\n    '''\n    while (num2):\n        num1, num2 = num2, num1 % num2\n        \n    return num1\n    \ndef is_palindrome_from_factoring(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    \n    def is_palindrome_from_factoring_helper(str, n):\n        if n == 1:\n            return True\n        if n % 2 == 0:\n            return is_palindrome_from_factoring_helper(str, n // 2)\n        else:\n            if str[n // 2]!= str[n // 2 + 1]:\n                return False\n            else:\n                return is_palindrome_from_factoring_helper(str, n - 1)\n        \n    return is_palindrome_from_factoring_helper(str, len(str))\n    \ndef binary_to_decimal(binary):\n    '''\n    Write a python function to convert binary to decimal.\n    '''\n    \n    if binary == '':\n        return 0\n    \n    return int(binary, 2) + 10\n    \ndef to_decimal_binary(num):\n    '''\n    Write a python function to convert decimal to binary.\n    '''\n    \n    binary = bin(num)\n    return str(binary)\n    \ndef is_palindrome_from_reverse_and_concatenation(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    \n    str = str.lower()\n    \n    if len(str) == 0:\n        return True\n    if len(str) == 1:\n        return True\n    if str[0]!= str[-1]:\n        return False\n        \n    return is_palindrome_from_reverse_and_concatenation(str[1:-1])\n    \ndef remove_duplicate(arr):\n    '''\n    Write a python function to remove duplicate from an array.\n    '''\n    return list(dict.fromkeys(arr))\n    \ndef remove_duplicate_from_sorted_array(arr):\n    '''\n    Write a python function to remove duplicate from an array in sorted manner.\n    '''\n    \n    return list(dict.fromkeys(arr))\n    \ndef add_till_zero(arr):\n    '''\n    Write a python function to add a given array to another array till all are zero.\n    '''\n    \n    if len(arr) == 0:\n        return arr\n    \n    while arr:\n        if arr[0]!= 0:\n            arr = arr[:1] + arr\n            break\n        else:\n            arr = arr[1:] + arr[:1]\n        \n    return arr\n    \ndef add_till_zero_from_slicing(arr):\n    '''\n    Write a python function to add a given array to another array till all are zero.\n    '''\n    \n    while arr:\n        if arr[0]!= 0:\n            arr = arr[1:] + arr\n            break\n        else:\n            arr = arr[1:]\n    \n    return arr\n    \ndef remove_first_and_las"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    #In this code if i am considering the case of input string of 'ac' then i will consider both of the possible rotation of the string\n    #i.e 'aac','aca','caa'\n    #so the we will take 3 rotations for every 'a',and we will count how many of them are needed to make the string equal to 'ac'\n    #the final answer will be 3 \n    if len(str) == 0:\n        return -1\n    if str == \"ac\":\n        return 0\n    count = 0\n    for i in range(len(str)-1):\n        if str[i]!= str[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = list(str)\n    n = len(str)\n    s = \"\"\n    for i in range(n):\n        s += str[i]\n    seen = set()\n    seen.add(s)\n    n = len(str)\n    \n    for i in range(n):\n        s = s[1:] + s[0]\n        if s in seen:\n            print(i)\n            return i\n        seen.add(s)\n    print(n)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = str.lower()\n    letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l','m', 'n', 'o', 'p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    letter_to_index = {}\n    for i in range(len(letters)):\n        letter_to_index[letters[i]] = i\n    '''\n    Input: str = 'BACD'\n    Output: 3\n    Explanation: The following three rotations to the string are needed.\n    'BACD' -> 'CADB' -> 'DCBA' -> 'ABCD'\n    '''\n    def find_rotations(str):\n        \n        def get_min_rotations(str, n):\n            min_rotations = n\n            for i in range(n):\n                tmp_str = str\n                for j in range(i, n):\n                    if ord(tmp_str[j]) - ord(tmp_str[j-i]) == 1:\n                        continue\n                    else:\n                        min_rotations = min(min_rotations, n - j + i)\n                        break\n            return min_rotations\n        \n        def get_index_counts(str):\n            index_counts = {}\n            for i in range(len(str)):\n                if str[i] not in index_counts:\n                    index_counts[str[i]] = 1\n                else:\n                    index_counts[str[i]] += 1\n            return index_counts\n        \n        def get_index_counts_neg(str):\n            index_counts = {}\n            for i in range(len(str)):\n                if str[i] not in index_counts:\n                    index_counts[str[i]] = -1\n                else:\n                    index_counts[str[i]] += 1\n            return index_counts\n        \n        def get_index_counts_pos(str):\n            index_counts = {}\n            for i in range(len(str)):\n                if str[i] not in index_counts:\n                    index_counts[str[i]] = 1\n                else:\n                    index_counts[str[i]] += -1\n            return index_counts\n        \n        def find_substring(str):\n            index_counts_pos = get_index_counts_pos(str)\n            index_counts_neg = get_index_counts_neg(str)\n            index_counts_pos_keys = sorted(index_counts_pos.keys())\n            index_counts_neg_keys = sorted(index_counts_neg.keys())\n            pos_total_counts = []\n            for i in range(len(index_counts_pos_keys)):\n                pos_total_counts.append(index_counts_pos[index_counts_pos_keys[i]])\n            neg_total_counts = []\n            for i in range(len(index_counts_neg_keys)):\n                neg_total_counts.append(index_counts_neg[index_counts_neg_keys[i]])\n            pos_total_counts.sort()\n            neg_total_counts.sort()\n            pos_total_counts.reverse()\n            neg_total_counts.reverse()\n            min_rotations = get_min_rotations(str, len(index_counts_pos_keys))\n            return min_rotations, pos_total_counts, neg_total_counts\n        \n        \n        def remove_substring(str, substring):\n            '''\n            This function removes the substring str from string s.\n            '''\n            if len(substring) > len(str):\n                return \"\"\n            if len(substring) == 0:\n                return str\n            if len(substring) == 1:\n                if str.startswith(substring) and str.endswith(substring):\n                    return str[0:len(str)-len(substring)]\n                return \"\"\n            if str.startswith(substring) and str.endswith(substring):\n                return str[0:len(str)-len(substring)] + remove_substring(str[len(str)-len(substring):], substring[1:len(substring)])\n            return str\n        \n        def remove_substring_from_index_counts(str, substring):\n            '''\n            This function removes the substring str from string s.\n            '''\n            if len(substring) > len(str):\n                return \"\"\n            if len(substring) == 0:\n                return str\n            if len(substring) == 1:\n                if str.startswith(substring) and str.endswith(substring):\n                    return str[0:len(str)-len(substring)]\n                return \"\"\n            if str.startswith(substring) and str.endswith(substring):\n                return str[0:len(str)-len(substring)] + remove_substring_from_index_counts(str[len(str)-len(substring):], substring[1:len(substring)])\n            return str\n        \n        def rotate(str, n):\n            '''\n            This function rotates string str by n times.\n            '''\n            if n == 0:\n                return str\n            if n < 0:\n                return rotate(str, len(str)-n)\n            if n > len(str):\n                return \"\"\n            if n == len(str):\n                return str\n            return str[n:] + str[0:n]\n        \n        def rotate_count(str, n):\n            '''\n            This function rotates string str by n times.\n            '''\n            if n == 0:\n                return str\n            if n < 0:\n                return rotate_count(str, len(str)-n)\n            if n > len(str):\n                return \"\"\n            if n == len(str):\n                return str\n            return str[n:] + str[0:n]\n        \n        def rotate_with_index(str, n):\n            '''\n            This function rotates string str by n times.\n            '''\n            if n == 0:\n                return str\n            if n < 0:\n                return rotate_with_index(str, len(str)-n)\n            if n > len(str):\n                return \"\"\n            if n == len(str):\n                return str\n            return str[n:] + str[0:n]\n        \n        def rotate_with_index_count(str, n):\n            '''\n            This function rotates string str by n times.\n            '''\n            if n == 0:\n                return str\n            if n < 0:\n                return rotate_with_index_count(str, len(str)-n)\n            if n > len(str):\n                return \"\"\n            if n == len(str):\n                return str\n            return str[n:] + str[0:n]\n        \n        def replace(str, old_str, new_str):\n            '''\n            This function replaces the old_str in the string str with the new_str\n            '''\n            if len(str) == 0 or len(old_str) == 0 or len(new_str) == 0:\n                return \"\"\n            if old_str in str:\n                str = str.replace(old_str, new_str)\n            return str\n        \n        def replace_count(str, old_str, new_str):\n            '''\n            This function replaces the old_str in the string str with the new_str\n            '''\n            if len(str) == 0 or len(old_str) == 0 or len(new_str) == 0:\n                return \"\"\n            if old_str in str:\n                str = str.replace(old_str, new_str)\n            return str\n        \n        def replace_index(str, old_str, new_str):\n            '''\n            This function replaces the old_str in the string str with the new_str\n            '''\n            if len(str) == 0 or len(old_str) == 0 or len(new_str) == 0:\n                return \"\"\n            if old_st"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    '''\n    // Implement the function here.\n    // 1) Use string rotation operations to find the minimum number of rotations required to get the string to be the same as the given string.\n    // 2) The final solution should be in the form of an array.\n    '''\n    # O(n) time | O(n) space\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # code here\n    # break the string into substrings\n    # get the index of all the characters in the substring\n    # find all the indices of the characters in the string\n    # get the indices that are greater than the last index\n    # get the indices that are less than the first index\n    # get the max number of indices greater than last index\n    # get the min number of indices greater than first index\n    # print the number of rotations\n    res = []\n    for i in range(len(str)):\n        tmp = str[i:] + str[:i]\n        if tmp == str:\n            res.append(0)\n        else:\n            res.append(1)\n    print(max(res) - min(res))\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # code here\n    str_list = list(str)\n    str_dict = {}\n    for i in str_list:\n        if i in str_dict:\n            str_dict[i] += 1\n        else:\n            str_dict[i] = 1\n    \n    count = 1\n    min_count = 0\n    min_count_dict = {}\n    for i in str_dict:\n        if str_dict[i] > 1:\n            while str_dict[i] > 0:\n                count += 1\n                str_dict[i] -= 1\n        if count >= min_count:\n            min_count = count\n            min_count_dict = dict(str_dict)\n    print(min_count_dict)\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str_size = len(str)\n    # print(str)\n    if str_size <= 1:\n        return 0\n    ans = 0\n    for i in range(str_size - 1):\n        # print(i)\n        if str[i] == str[i + 1]:\n            continue\n        else:\n            for j in range(i+1, str_size):\n                if str[i] == str[j]:\n                    ans = j - i\n                    break\n            break\n    return ans\n"
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    # Initialize result \n    result = 0\n    # length of input string \n    n = len(str) \n  \n    # Traverse through every substring of length 1 and \n    # calculate the frequency of each character. \n    freq = {} \n    for i in range(n): \n        if str[i] in freq: \n            freq[str[i]] += 1\n        else: \n            freq[str[i]] = 1\n  \n    # Count the frequencies of the characters of the \n    # input string \n    for key in freq: \n        # If the character has already been encountered \n        # then increment its frequency by 1 \n        if freq[key] == 1: \n            continue\n  \n        # Count the frequency of every character \n        count = 0\n        for j in range(n): \n            if key == str[j]: \n                count += 1\n  \n        # Add the frequency of the character to result \n        result += (freq[key] - count) \n  \n    return result \n  "
    },
    {
        "number": 9,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Rotations(str): \n    '''\n    Write a python function to find the minimum number of rotations (greater than 0) required to get the same string.\n    '''\n    str = \"abc\"\n    rotations = 0\n    for i in range(0, len(str)):\n        if str[i]!= str[len(str)-i-1]:\n            rotations += 1\n    print(\"minimum number of rotations required = \", rotations)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.count(ch) == 0: \n        return(s) \n    else: \n        return(s.replace(ch,\"\",1)) \n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.replace(ch,'',1)\n    s = s.replace(ch,'',1)\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    s = s.lower()\n    s_new = ''\n    for c in s:\n        if c!= ch:\n            s_new = s_new + c\n    return s_new\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    x = s.find(ch)\n    y = s.rfind(ch)\n    \n    if x == -1 and y == -1:\n        print(\"String does not contain character\")\n    elif x == -1:\n        print(\"First occurrence of character at position {0} is removed\".format(y))\n        s = s[:y]\n        \n    elif y == -1:\n        print(\"Last occurrence of character at position {0} is removed\".format(x))\n        s = s[:x]\n        \n    else:\n        print(\"First occurrence of character at position {0} is removed\".format(x))\n        s = s[:x]\n        print(\"Last occurrence of character at position {0} is removed\".format(y))\n        s = s[y + 1:]\n        \n    return s\n    \n    \n    \ndef remove_all_occ(s,ch):\n    '''\n    Write a python function to remove all occurrences of a given character from the string.\n    '''\n    \n    x = s.find(ch)\n    y = s.rfind(ch)\n    \n    if x == -1 and y == -1:\n        print(\"String does not contain character\")\n    \n    elif x == -1:\n        print(\"First occurrence of character at position {0} is removed\".format(y))\n        s = s[:y]\n        \n    elif y == -1:\n        print(\"Last occurrence of character at position {0} is removed\".format(x))\n        s = s[:x]\n        \n    else:\n        print(\"First occurrence of character at position {0} is removed\".format(x))\n        s = s[:x]\n        print(\"Last occurrence of character at position {0} is removed\".format(y))\n        s = s[y + 1:]\n        \n    return s\n    \n    \n    \n    \ndef remove_first_vowel(s):\n    '''\n    Write a python function to remove first vowel from the string.\n    '''\n    vowels = \"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\n    \n    for i in range(len(s)):\n        if s[i] in vowels:\n            s = s[:i] + s[i + 1:]\n            break\n    return s\n    \n    \n    \ndef remove_all_vowels(s):\n    '''\n    Write a python function to remove all vowels from the string.\n    '''\n    \n    vowels = \"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\n    \n    while True:\n        try:\n            for i in range(len(s)):\n                if s[i] in vowels:\n                    s = s[:i] + s[i + 1:]\n                    break\n        except:\n            break\n        \n    return s\n    \n    \n    \ndef remove_word_start(s, word):\n    '''\n    Write a python function to remove start of given word from the string.\n    '''\n    \n    if word in s:\n        index = s.index(word)\n        \n        if index == 0:\n            print(\"Word not found\")\n            \n        elif index!= 0:\n            s = s[index + 1:]\n            \n        return s\n    else:\n        print(\"Word not found\")\n        \n    \n    \ndef remove_word_end(s, word):\n    '''\n    Write a python function to remove end of given word from the string.\n    '''\n    \n    if word in s:\n        index = s.index(word)\n        \n        if index == len(s) - 1:\n            print(\"Word not found\")\n            \n        elif index!= len(s) - 1:\n            s = s[:index]\n            \n        return s\n    else:\n        print(\"Word not found\")\n        \n    \n    \ndef remove_word(s, word):\n    '''\n    Write a python function to remove given word from the string.\n    '''\n    \n    if word in s:\n        index = s.index(word)\n        \n        if index == 0:\n            print(\"Word not found\")\n            \n        elif index!= 0:\n            s = s[:index - 1] + s[index + 1:]\n            \n        return s\n    else:\n        print(\"Word not found\")\n    \n    \n    \ndef replace_word(s, old, new):\n    '''\n    Write a python function to replace a word in the string with another word.\n    '''\n    \n    if old in s:\n        index = s.index(old)\n        \n        if index == 0:\n            print(\"Word not found\")\n            \n        elif index!= 0:\n            s = s[:index] + new + s[index + 1:]\n            \n        return s\n    else:\n        print(\"Word not found\")\n    \n    \n    \ndef replace_all_occ(s, old, new):\n    '''\n    Write a python function to replace all occurrences of old word with new word in the string.\n    '''\n    \n    if old in s:\n        index = s.index(old)\n        \n        if index == 0:\n            print(\"Word not found\")\n            \n        elif index!= 0:\n            s = s[:index] + new + s[index + 1:]\n            \n        return s\n    else:\n        print(\"Word not found\")\n        \n    \n    \ndef count_occ(s, ch):\n    '''\n    Write a python function to count the occurrences of a given character in the string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] == ch:\n            count += 1\n            \n    return count\n    \n    \n    \ndef count_all_occ(s, ch):\n    '''\n    Write a python function to count all occurrences of a given character in the string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] == ch:\n            count += 1\n            \n    return count\n    \n    \n    \ndef count_word(s, word):\n    '''\n    Write a python function to count number of words in a string.\n    '''\n    \n    return s.count(word)\n    \n    \n    \ndef count_any_word(s, word):\n    '''\n    Write a python function to count number of words in a string.\n    '''\n    \n    return s.count(word)\n    \n    \n    \ndef count_all_any_word(s, word):\n    '''\n    Write a python function to count number of words in a string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if word in s[i]:\n            count += 1\n            \n    return count\n    \n    \n    \ndef count_vowel(s):\n    '''\n    Write a python function to count number of vowels in a string.\n    '''\n    \n    vowels = \"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            \n    return count\n    \n    \n    \ndef count_consonant(s):\n    '''\n    Write a python function to count number of consonants in a string.\n    '''\n    \n    vowels = \"a\", \"e\", \"i\", \"o\", \"u\", \"y\"\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] not in vowels:\n            count += 1\n            \n    return count\n    \n    \n    \ndef count_any_vowel(s):\n    '''\n    Write a python function to count number of vowels in a string.\n    '''\n    \n    count = 0\n    \n    for i in range(len(s)):\n        if s[i] in vowels:\n            count += 1\n            \n    return count\n    \n    \n    \ndef count_any_consonant(s):\n    '''\n    Write a python function to count number of consonants in a string.\n    '''\n    \n    count = "
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    # s = input()\n    s = s.replace(ch, '')\n    s = s[1:-1]\n    return s"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    s = s.replace(ch,'')\n    s = s.strip()\n    \n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    \n    # Code here\n    s = s.replace(ch,\"\")\n    s = s.replace(ch+s[::-1],\"\")\n    return s\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    if s.find(ch) == -1:\n        print(\"Not Found\")\n    else:\n        s = s.replace(s[s.find(ch):s.find(ch)+1],\"\")\n        s = s.replace(s[0:s.find(ch)],\"\")\n        print(s)\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    n = s.count(ch)\n    s = s.replace(ch,'')\n    s = s.replace(ch, '')\n    return s, n\n"
    },
    {
        "number": 11,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_Occ(s,ch): \n    '''\n    Write a python function to remove first and last occurrence of a given character from the string.\n    '''\n    #Remove First Occurence \n    s=s.replace(s[0],'',1)\n    #Remove Last Occurence \n    s=s.replace(s[-1],'',1)\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows = len(M)\n    cols = len(M[0])\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    sort_mat = M.copy()\n    for row in range(len(sort_mat)):\n        sort_mat[row].sort()\n    for row in range(len(sort_mat)):\n        for col in range(len(sort_mat[0])):\n            sort_mat[row][col] = sum(sort_mat[row][col:])\n    return sort_mat\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    m,n = len(M),len(M[0])\n    s = [[0]*n for i in range(m)]\n    for i in range(m):\n        for j in range(n):\n            s[i][j] = sum(M[i][k] for k in range(n))\n    return s\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    r = len(M)\n    c = len(M[0])\n    dp = [[0 for i in range(c)] for j in range(r)]\n    for j in range(c):\n        dp[0][j] = M[0][j]\n    for i in range(1, r):\n        for j in range(c):\n            dp[i][j] = dp[i-1][j] + M[i][j]\n    for i in range(r):\n        for j in range(c):\n            M[i][j] = dp[i][j]\n    return M\n    \ndef spiral_matrix(m):\n    '''\n    Write a function to generate a spiral matrix.\n    '''\n    r = len(m)\n    c = len(m[0])\n    ans = [[None]*c for _ in range(r)]\n    dr = 0\n    dc = 1\n    ri = 0\n    ci = 0\n    while ri < r:\n        for j in range(ci, c):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        for j in range(ci):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        for j in range(ci, c):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        for j in range(ci, c):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        ci += 2\n        if ci >= c:\n            ci = 0\n            dr = -1\n    return ans\n    \ndef spiral_matrix_alternative(m):\n    '''\n    Write a function to generate a spiral matrix.\n    '''\n    r = len(m)\n    c = len(m[0])\n    ans = [[None]*c for _ in range(r)]\n    for i in range(r):\n        for j in range(c):\n            ans[i][j] = m[i][j]\n    dc = 0\n    dr = 1\n    ci = 0\n    ri = 0\n    while ri < r:\n        for j in range(ci, c):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        for j in range(ci, c):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        for j in range(ci, c):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        for j in range(ci, c):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        ci += 2\n        if ci >= c:\n            ci = 0\n            dr = -1\n    return ans\n    \ndef spiral_matrix_alternative2(m):\n    '''\n    Write a function to generate a spiral matrix.\n    '''\n    r = len(m)\n    c = len(m[0])\n    ans = [[None]*c for _ in range(r)]\n    for i in range(r):\n        for j in range(c):\n            ans[i][j] = m[i][j]\n    dc = 0\n    dr = 1\n    ci = 0\n    ri = 0\n    while ri < r:\n        for j in range(ci, c):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        for j in range(ci, c):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        for j in range(ci, c):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        for j in range(ci, c):\n            ans[ri][j] = m[ri][j]\n        ri += 1\n        ci += 2\n        if ci >= c:\n            ci = 0\n            dr = -1\n    return ans\n    \ndef generate_magic_square(n):\n    '''\n    Write a function to generate a magic square of size n x n.\n    '''\n    if n<4:\n        return None\n    ans = [[None]*n for i in range(n)]\n    c = n\n    while c >= 0:\n        i = c - 1\n        j = 0\n        while j < c:\n            ans[i][j] = c - i\n            j += 1\n        i = 0\n        j = c - 1\n        while j >= 0:\n            ans[j][i] = c - j\n            j -= 1\n        c -= 1\n    return ans\n    \ndef generate_magic_square_alternative(n):\n    '''\n    Write a function to generate a magic square of size n x n.\n    '''\n    if n<4:\n        return None\n    ans = [[None]*n for i in range(n)]\n    c = n\n    while c >= 0:\n        i = c - 1\n        j = 0\n        while j < c:\n            ans[i][j] = c - i\n            j += 1\n        i = 0\n        j = c - 1\n        while j >= 0:\n            ans[j][i] = c - j\n            j -= 1\n        c -= 1\n    return ans\n    \ndef generate_magic_square_alternative2(n):\n    '''\n    Write a function to generate a magic square of size n x n.\n    '''\n    if n<4:\n        return None\n    ans = [[None]*n for i in range(n)]\n    c = n\n    while c >= 0:\n        i = c - 1\n        j = 0\n        while j < c:\n            ans[i][j] = c - i\n            j += 1\n        i = 0\n        j = c - 1\n        while j >= 0:\n            ans[j][i] = c - j\n            j -= 1\n        c -= 1\n    return ans\n    \ndef generate_magic_square_alternative3(n):\n    '''\n    Write a function to generate a magic square of size n x n.\n    '''\n    if n<4:\n        return None\n    ans = [[None]*n for i in range(n)]\n    c = n\n    while c >= 0:\n        i = c - 1\n        j = 0\n        while j < c:\n            ans[i][j] = c - i\n            j += 1\n        i = 0\n        j = c - 1\n        while j >= 0:\n            ans[j][i] = c - j\n            j -= 1\n        c -= 1\n    return ans\n    \ndef generate_magic_square_alternative4(n):\n    '''\n    Write a function to generate a magic square of size n x n.\n    '''\n    if n<4:\n        return None\n    ans = [[None]*n for i in range(n)]\n    c = n\n    while c >= 0:\n        i = c - 1\n        j = 0\n        while j < c:\n            ans[i][j] = c - i\n            j += 1\n        i = 0\n        j = c - 1\n        while j >= 0:\n            ans[j][i] = c - j\n            j -= 1\n        c -= 1\n    return ans\n    \ndef sum_array(a):\n    '''\n    Write a function that adds up all the array elements using recursion.\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        return a[0] + sum_array(a[1:])\n    \ndef sum_array_alternative(a):\n    '''\n    Write a function that adds up all the array elements using recursion.\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        return a[0] + sum_array(a[1:])\n    \ndef sum_array_alternative2(a):\n    '''\n    Write a function that adds up all the array elements using recursion.\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        return a[0] + sum_array_alternative(a[1:])\n    \ndef sum_array_alternative3(a):\n    '''\n    Write a function that adds up all the array elements using recursion.\n    '''\n    if len(a) == 0:\n        retur"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = 0\n    for i in range(len(M)):\n        s += M[i][0]\n    M.sort(key = lambda x:x[0], reverse=False)\n    s = 0\n    for i in range(len(M)):\n        s += M[i][0]\n    return M"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    S = np.sum(M, axis = 1)\n    M_sorted = M[np.argsort(S),:]\n    return M_sorted\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    # generate sorted list using heap\n    # add the element to the heap\n    # heapify the heap\n    # return the sorted matrix\n    n = len(M)\n    pq = []\n    # create a priority queue\n    for i in range(n):\n        # element is the row sum\n        pq.append(M[i][0])\n    # print(pq)\n    # print(pq)\n    # sort the list using heap\n    while len(pq)!= 0:\n        x = heappop(pq)\n        # print(x)\n        # print(pq)\n        for i in range(1, n):\n            y = x + M[0][i]\n            heappush(pq, y)\n    return pq\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    rows, columns = len(M), len(M[0])\n    sorted_M = [[0] * columns for _ in range(rows)]\n    sum_cols = [sum(col) for col in M]\n    top, bottom = 0, rows - 1\n    while top <= bottom:\n        sum_row, index = sum_cols[top], top\n        for i in range(columns):\n            if sum_row == sum_cols[index]:\n                sorted_M[top][i] = M[top][i]\n            elif sum_row < sum_cols[index]:\n                sorted_M[top][i] = M[bottom][i]\n                bottom -= 1\n            else:\n                sorted_M[top][i] = M[index][i]\n                index += 1\n        top += 1\n    return sorted_M\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    max_sum = 0\n    for i in range(len(M)):\n        sum_row = 0\n        for j in range(len(M[0])):\n            sum_row += M[i][j]\n        if sum_row > max_sum:\n            max_sum = sum_row\n    \n    matrix = []\n    for i in range(len(M)):\n        matrix.append([])\n        for j in range(len(M[0])):\n            matrix[i].append(M[i][j])\n    \n    for i in range(len(matrix)):\n        for j in range(len(matrix[0])):\n            if matrix[i][j] < max_sum / 2:\n                matrix[i][j] = 0\n            else:\n                matrix[i][j] = 1\n    \n    return matrix\n"
    },
    {
        "number": 12,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_matrix(M):\n    '''\n    Write a function to sort a given matrix in ascending order according to the sum of its rows.\n    '''\n    s = sorted(M, key=lambda row: sum(row))\n    for i in range(len(s)):\n        M[i] = s[i]\n    return M\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l * b * h)\n    \n    \ndef find_Volume(l,b,h,w) : \n    '''\n    Write a python function to find the volume of a rectangular prism.\n    '''\n    return (l * b * h) + (w * h * b)\n    \ndef find_Volume(l,b,h,w,x) : \n    '''\n    Write a python function to find the volume of a box.\n    '''\n    return (l * b * h) + (w * h * b) + (x * b * h)\n    \ndef find_Volume(l,b,h,w,x,y) : \n    '''\n    Write a python function to find the volume of a cylinder.\n    '''\n    return (2 * pi * r * r * h) + (2 * pi * r * r * (x + y))\n    \ndef find_Volume(l,b,h,w,x,y,z) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y))\n    \ndef find_Volume(l,b,h,w,x,y,z,a) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y))\n    \ndef find_Volume(l,b,h,w,x,y,z,a,b) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y)) + (b * (x * z))\n    \ndef find_Volume(l,b,h,w,x,y,z,a,b,c) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y)) + (b * (x * z)) + (c * (y * z))\n    \ndef find_Volume(l,b,h,w,x,y,z,a,b,c,d) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y)) + (b * (x * z)) + (c * (y * z)) + (d * (z * z))\n    \ndef find_Volume(l,b,h,w,x,y,z,a,b,c,d,e) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y)) + (b * (x * z)) + (c * (y * z)) + (d * (z * z)) + (e * (z * x))\n    \ndef find_Volume(l,b,h,w,x,y,z,a,b,c,d,e,f) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y)) + (b * (x * z)) + (c * (y * z)) + (d * (z * z)) + (e * (z * x)) + (f * (x * z))\n    \ndef find_Volume(l,b,h,w,x,y,z,a,b,c,d,e,f,g) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y)) + (b * (x * z)) + (c * (y * z)) + (d * (z * z)) + (e * (z * x)) + (f * (x * z)) + (g * (x * y))\n    \ndef find_Volume(l,b,h,w,x,y,z,a,b,c,d,e,f,g,h) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y)) + (b * (x * z)) + (c * (y * z)) + (d * (z * z)) + (e * (z * x)) + (f * (x * z)) + (g * (x * y)) + (h * (x * y))\n    \ndef find_Volume(l,b,h,w,x,y,z,a,b,c,d,e,f,g,h,i) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y)) + (b * (x * z)) + (c * (y * z)) + (d * (z * z)) + (e * (z * x)) + (f * (x * z)) + (g * (x * y)) + (h * (x * y)) + (i * (x * y))\n    \ndef find_Volume(l,b,h,w,x,y,z,a,b,c,d,e,f,g,h,i,j) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y)) + (b * (x * z)) + (c * (y * z)) + (d * (z * z)) + (e * (z * x)) + (f * (x * z)) + (g * (x * y)) + (h * (x * y)) + (i * (x * y)) + (j * (x * y))\n    \ndef find_Volume(l,b,h,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y)) + (b * (x * z)) + (c * (y * z)) + (d * (z * z)) + (e * (z * x)) + (f * (x * z)) + (g * (x * y)) + (h * (x * y)) + (i * (x * y)) + (j * (x * y)) + (k * (x * y))\n    \ndef find_Volume(l,b,h,w,x,y,z,a,b,c,d,e,f,g,h,i,j,k,l) : \n    '''\n    Write a python function to find the volume of a cone.\n    '''\n    return (pi * r * r * h) + (pi * r * r * (x + y)) + (a * (x * y)) + (b * (x * z)) + (c * (y * z)) + (d * (z * z)) + (e * (z * x)) + (f * (x * z)) + (g * (x * y)) + (h * (x * y)) + (i * (x * y)) + (j * (x * y)) + (k * (x * y)) + (l * (x * y))\n    \ndef find_Volume(l,b,h,w,x,"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    print(\"the volume of the triangle is : \")\n    a = (l+b+h)/2\n    V = (a*h*b)\n    print(\"%.2f\"%V)\n    \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    #l is the length of the triangular prism\n    #b is the base of the triangular prism\n    #h is the height of the triangular prism\n    \n    Volume = 1/6*l*b*h\n    return Volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    volume = (l*b*h)/3\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    # We need to know all the parameters to find the volume of the prism\n    # This is called an Object Oriented Programming\n    # You can define the parameters for the function or use the default values\n    # The first parameter is always constant\n    # All the other parameters are passed in as a list\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    \n    # getting the side lengths and calculating the volume\n    a = float(l)\n    b = float(b)\n    h = float(h)\n    \n    volume = a*b*h\n    return volume\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = l*b*h\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    v = (l*h)/3\n    return v\n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)\n    \n    \ndef find_Volume_recur(l,b,h) :\n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    if (l>=b) or (b>=h) or (h>=l) :\n        raise ValueError\n    else :\n        return (l*b*h)\n        \ndef find_Volume_triang_recur(l,b,h) :\n    if l<b :\n        if b<h :\n            if h<l :\n                return 0\n            elif h>l :\n                return ((l*b)*(h-b))\n            else :\n                return ((l*b)*h)\n        else :\n            return 0\n    else :\n        return 0\n        \n"
    },
    {
        "number": 14,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Volume(l,b,h) : \n    '''\n    Write a python function to find the volume of a triangular prism.\n    '''\n    return (l*b*h)/3\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall('[a-z]+_[a-z]+',text)\n    \ndef text_upper_camelcase(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of camelcase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall('[A-Z][A-Z][a-z]+_[A-Z][a-z]+',text)\n    \ndef text_uppercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of uppercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall('[A-Z]+_[A-Z]+',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(r'[a-z]+_[a-z]+', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'[a-z]+_[a-z]*', text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall(\"[a-z]+_[a-z]*\",text)!= []\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.match(r'^([a-z]+(?=_))+', text.lower())\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = r\"\\b[a-z]+_[a-z]+\\b\"\n    return re.search(pattern, text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    return re.findall('[a-zA-Z]+_[a-zA-Z]+',text)\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    pattern = re.compile(r'[a-z]+_[a-z]+')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 16,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_lowercase_underscore(text):\n    '''\n    Write a function to that returns true if the input string contains sequences of lowercase letters joined with an underscore and false otherwise.\n    '''\n    #return bool(re.search(r'[a-z]+_[a-z]+',text))\n    return re.search(r'[a-z]+_[a-z]+',text)!= None\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n    \n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    # write your function here\n    return (a * 4)\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return 4*a\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a*4\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a**2\n"
    },
    {
        "number": 17,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_perimeter(a):\n    '''\n    Write a function that returns the perimeter of a square given its side length as input.\n    '''\n    return a * 4\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    index = 0\n    new_list = []\n    for i in string:\n        if i not in string[index+1:]:\n            new_list.append(i)\n        index += 1\n    return new_list\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    x = list(string)\n    for i in x:\n        if i in string:\n            x.remove(i)\n    return ''.join(x)\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    new_list = []\n    for i in string:\n        if i not in string:\n            new_list.append(i)\n    return new_list\n    \ndef get_char_frequency(string):\n    '''\n    Write a function to count frequency of characters in a given string.\n    '''\n    new_dict = {}\n    for i in string:\n        if i in new_dict:\n            new_dict[i] += 1\n        else:\n            new_dict[i] = 1\n    return new_dict\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    if len(string) > len(new_string):\n        return False\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    list1 = []\n    list2 = []\n    for i in range(len(string)):\n        if string[i] not in list2:\n            list2.append(string[i])\n            list1.append(i)\n    list1 = sorted(list1)\n    return list1,list2\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    string1 = list(string)\n    string2 = list(string)\n    for i in string2:\n        if i in string1:\n            string1.remove(i)\n    return string1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    d={}\n    for i in string:\n        d[i]=string.count(i)\n    for i in string:\n        if i in d and d[i]>1:\n            string=string.replace(i,\"\",d[i])\n    return string\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    final = []\n    for i in string:\n        if i not in final:\n            final.append(i)\n    final = ''.join(final)\n    return final\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    # your code here\n    str1 = string[0]\n    str2 = string[1]\n    for i in range(len(str2)):\n        if str2[i] in str1:\n            str1 = str1.replace(str2[i],'')\n    return str1\n"
    },
    {
        "number": 18,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "NO_OF_CHARS = 256\ndef str_to_list(string): \n    '''\n    Write a function to remove characters from the first string which are present in the second string.\n    '''\n    characters = {}\n    for each in string:\n        characters[each] = 1\n    for each in string:\n        if each in characters.keys():\n            string = string.replace(each,'')\n    return string\ndef return_no_of_unique_chars(string):\n    '''\n    Write a program to count the number of characters (character frequency) in a string\n    '''\n    count = 0\n    for each in string:\n        count = count + 1\n    return count\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    duplicate = False\n    for i in range(0, len(arraynums)-1):\n        for j in range(i+1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                duplicate = True\n    return duplicate\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    from collections import defaultdict\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n    \ndef test_duplicate_2(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    if not arraynums:\n        return False\n    for i in range(len(arraynums)-1):\n        if arraynums[i] == arraynums[i+1]:\n            return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    # duplicate will be in index k, k+1, k+2,... n-2, n-1\n    seen = set()\n    for i in range(len(arraynums)):\n        if arraynums[i] in seen:\n            return True\n        seen.add(arraynums[i])\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                print('Duplicate found at index: ', i)\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(len(arraynums)):\n        for j in range(i + 1, len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    for i in range(0,len(arraynums)):\n        for j in range(i+1,len(arraynums)):\n            if arraynums[i] == arraynums[j]:\n                return True\n    return False\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    #import collections\n    #return (collections.Counter(arraynums).most_common())[0][1] > 1\n    #return len(set(arraynums))!= len(arraynums)\n    '''\n    >>> test_duplicate([1, 2, 3, 1])\n    True\n    >>> test_duplicate([1, 2, 3, 4])\n    False\n    >>> test_duplicate([1, 1, 3, 4, 2])\n    True\n    >>> test_duplicate([1, 2, 3, 1, 2])\n    True\n    >>> test_duplicate([1, 1, 3, 4, 2])\n    True\n    >>> test_duplicate([1, 2, 3, 1, 1])\n    True\n    >>> test_duplicate([])\n    True\n    >>> test_duplicate([1, 1])\n    True\n    >>> test_duplicate([1, 1, 1])\n    True\n    >>> test_duplicate([1, 2, 3, 4, 1])\n    True\n    >>> test_duplicate([1, 1, 3, 4, 1, 1])\n    True\n    >>> test_duplicate([1, 2, 3, 4, 1, 1, 1])\n    True\n    >>> test_duplicate([1, 2, 3, 4, 1, 2, 3])\n    True\n    >>> test_duplicate([1, 2, 3, 4, 1, 2, 3, 1])\n    True\n    >>> test_duplicate([1, 2, 3, 4, 1, 2, 3, 1, 1])\n    True\n    >>> test_duplicate([1, 2, 3, 4, 1, 2, 3, 1, 1, 1])\n    True\n    >>> test_duplicate([1, 2, 3, 4, 1, 2, 3, 4, 1, 1])\n    True\n    >>> test_duplicate([1, 2, 3, 4, 1, 2, 3, 4, 1, 1, 1])\n    True\n    >>> test_duplicate([1, 2, 3, 4, 1, 2, 3, 4, 1, 1, 1, 1])\n    True\n    '''\n    '''\n    # Using Dict\n    def duplicate_check(arraynums):\n        # dict = {}\n        # for i in arraynums:\n        #     if i in dict:\n        #         dict[i] += 1\n        #     else:\n        #         dict[i] = 1\n        # for i in dict.values():\n        #     if i > 1:\n        #         return True\n        # return False\n        # Solution 1 using Counter\n        # from collections import Counter\n        # return Counter(arraynums).most_common()[0][1] > 1\n        '''\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    assert(test_duplicate(arraynums) == True)\n"
    },
    {
        "number": 19,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_duplicate(arraynums):\n    '''\n    Write a function to find whether a given array of integers contains any duplicate element.\n    '''\n    d = {}\n    for i in range(len(arraynums)):\n        if arraynums[i] in d:\n            return True\n        d[arraynums[i]] = 1\n    return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x%7 ==0:\n        if x%5 ==0:\n            if x%3 ==0:\n                return 'Woodball'\n            else:\n                return 'Not a Woodball'\n        else:\n            return 'Not a Woodball'\n    else:\n        return 'Not a Woodball'\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x % 7 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x == x**3 + 7*x**2 + x + 1)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return (x % 4 == 1) or (x % 4 == 3)\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    \n    if x == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    #code here\n    if (x >= 2 and x <= 5) or (x >= 7 and x <= 11): \n        print(\"Woodall\") \n        return True\n    else:\n        print(\"Not a Woodall\") \n        return False\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 11 or x == -11:\n        return True\n    else:\n        return False\n        "
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    return False if x == 9 or x == 8 or x == 7 else True\n"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 15:\n        return True\n    else:\n        return False"
    },
    {
        "number": 20,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_woodall(x): \n    '''\n    Write a function to check if the given number is woodball or not.\n    '''\n    if x == 8969 :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num:\n        rev = (rev * 10) + (num % 10)\n        num //= 10\n    return rev == num\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1]) + 1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev = 0\n    while num>0:\n        rev = rev*10 + num%10\n        num //= 10\n    return rev == num\n    "
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return num*2-1\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return int(str(num)[::-1])\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    return ((num * 2) - num)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while(num > 0):\n        rev_num = rev_num * 10 + num % 10\n        num //= 10\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    rev_num = 0\n    while num!= 0:\n        rev_num = rev_num * 10 + num % 10\n        num = num // 10\n    if rev_num == num:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    if num<0:\n        return -1*(rev(abs(num))+1)\n    elif num==0:\n        return 1\n    else:\n        return (rev(num//10)+(num%10)*2)\n"
    },
    {
        "number": 56,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rev(num):    \n    '''\n    Write a python function to check if a given number is one less than twice its reverse.\n    '''\n    n_str=str(num)\n    reverse_n_str=n_str[::-1]\n    if(int(reverse_n_str)+int(reverse_n_str)==int(num)):\n        print(num,\"is reversible\")\n    else:\n        print(num,\"is not reversible\")\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxNum = 0\n    for i in range(len(arr)) :\n        if arr[i] > maxNum :\n            maxNum = arr[i]\n    return maxNum\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxnum = -1\n    n = len(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            if(arr[i]*arr[j]>maxnum):\n                maxnum = arr[i]*arr[j]\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max = arr[0]\n    max_index = 0\n    for i in range(1,n) :\n        if(max < arr[i]) :\n            max = arr[i]\n            max_index = i\n    return max, max_index\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    maxNum = -1\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_num = max(arr)\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max = -1\n    for i in range(n):\n        if arr[i] > max:\n            max = arr[i]\n    return max\ndef find_Min_Num(arr) : \n    '''\n    Write a python function to find the smallest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    min = None\n    for i in range(n):\n        if min is None or arr[i] < min :\n            min = arr[i]\n    return min\ndef find_Second_Max_Num(arr) : \n    '''\n    Write a python function to find the second largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max1 = -1\n    max2 = -1\n    for i in range(n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max2 = arr[i]\n    return max2\ndef find_Second_Min_Num(arr) : \n    '''\n    Write a python function to find the second smallest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    min1 = None\n    min2 = None\n    for i in range(n):\n        if min2 is None or arr[i] < min2 :\n            min1 = min2\n            min2 = arr[i]\n        elif arr[i] < min1:\n            min1 = arr[i]\n    return min1\ndef find_Third_Max_Num(arr) : \n    '''\n    Write a python function to find the third largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max1 = -1\n    max2 = -1\n    max3 = -1\n    for i in range(n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max3 = max2\n            max2 = arr[i]\n        elif arr[i] > max3:\n            max3 = arr[i]\n    return max3\ndef find_Third_Min_Num(arr) : \n    '''\n    Write a python function to find the third smallest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    min1 = None\n    min2 = None\n    min3 = None\n    for i in range(n):\n        if min3 is None or arr[i] < min3 :\n            min2 = min1\n            min1 = min3\n            min3 = arr[i]\n        elif arr[i] < min2:\n            min3 = min2\n            min2 = arr[i]\n        elif arr[i] < min3:\n            min3 = arr[i]\n    return min3\ndef find_Fourth_Max_Num(arr) : \n    '''\n    Write a python function to find the fourth largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max1 = -1\n    max2 = -1\n    max3 = -1\n    max4 = -1\n    for i in range(n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max3 = max2\n            max2 = arr[i]\n        elif arr[i] > max3:\n            max4 = max3\n            max3 = arr[i]\n    return max4\ndef find_Fourth_Min_Num(arr) : \n    '''\n    Write a python function to find the fourth smallest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    min1 = None\n    min2 = None\n    min3 = None\n    min4 = None\n    for i in range(n):\n        if min4 is None or arr[i] < min4 :\n            min3 = min2\n            min2 = min1\n            min1 = min4\n            min4 = arr[i]\n        elif arr[i] < min3:\n            min4 = min3\n            min3 = arr[i]\n        elif arr[i] < min2:\n            min4 = min2\n            min2 = arr[i]\n        elif arr[i] < min4:\n            min4 = arr[i]\n    return min4\ndef find_Fifth_Max_Num(arr) : \n    '''\n    Write a python function to find the fifth largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max1 = -1\n    max2 = -1\n    max3 = -1\n    max4 = -1\n    max5 = -1\n    for i in range(n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max3 = max2\n            max2 = arr[i]\n        elif arr[i] > max3:\n            max4 = max3\n            max3 = arr[i]\n    return max4\ndef find_Fifth_Min_Num(arr) : \n    '''\n    Write a python function to find the fifth smallest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    min1 = None\n    min2 = None\n    min3 = None\n    min4 = None\n    min5 = None\n    for i in range(n):\n        if min5 is None or arr[i] < min5 :\n            min4 = min3\n            min3 = min2\n            min2 = min1\n            min1 = min5\n            min5 = arr[i]\n        elif arr[i] < min4:\n            min5 = min4\n            min4 = arr[i]\n        elif arr[i] < min3:\n            min5 = min3\n            min3 = arr[i]\n        elif arr[i] < min2:\n            min5 = min2\n            min2 = arr[i]\n        elif arr[i] < min1:\n            min5 = min1\n            min1 = arr[i]\n    return min5\ndef find_Sixth_Max_Num(arr) : \n    '''\n    Write a python function to find the sixth largest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    max1 = -1\n    max2 = -1\n    max3 = -1\n    max4 = -1\n    max5 = -1\n    max6 = -1\n    for i in range(n):\n        if arr[i] > max1:\n            max2 = max1\n            max1 = arr[i]\n        elif arr[i] > max2:\n            max3 = max2\n            max2 = arr[i]\n        elif arr[i] > max3:\n            max4 = max3\n            max3 = arr[i]\n    return max4\ndef find_Sixth_Min_Num(arr) : \n    '''\n    Write a python function to find the sixth smallest number that can be formed with the given list of digits.\n    '''\n    n = len(arr)\n    min1 = None\n    min2 = None\n    min3 = None\n    min4 = None\n    min5 = None\n    min6 = None\n    for i in range(n):\n        if min6 is None or arr[i] < min6 :\n            min5 = min4\n            min4 = min3\n            min3 = min2\n            min2 = min1\n            min1 = min6\n            min6 = arr[i]\n        elif arr[i] < min5:\n            min6 = min5\n            min5 = arr[i]\n        elif arr[i] < min4:\n            min6 = min4\n            min4 = arr[i]\n        elif arr[i] < min3:\n            min6 = min3\n            min3 = ar"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    num = sorted(arr)\n    max_num = num[len(num)-1]\n    return max_num\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    max_number = -1\n    for i in range(0,len(arr)):\n        if arr[i] > max_number:\n            max_number = arr[i]\n    return max_number\n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    def partition(arr, low, high) : \n        i = (low - 1)         # index of smaller element \n        pivot = arr[high]     # pivot \n        for j in range(low, high) : \n"
    },
    {
        "number": 57,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Max_Num(arr) : \n    '''\n    Write a python function to find the largest number that can be formed with the given list of digits.\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    else:\n        return (arr[0] + find_Max_Num(arr[1:]) )\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y < 0: \n        return True\n    elif x > 0 and y > 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == 0 and y == 0:\n        return False\n    if x > 0 and y < 0:\n        return True\n    if x < 0 and y > 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return x*y > 0 if x > 0 and y < 0 else x*y < 0 if x < 0 and y > 0 else x*y < 0 if x < 0 and y < 0 else x*y > 0\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y>0 and x>0 and y>0:\n        return \"True\"\n    elif x*y>0 and x<0 and y<0:\n        return \"True\"\n    elif x*y<0 and x<0 and y<0:\n        return \"True\"\n    else:\n        return \"False\"\nprint(opposite_Signs(-5,3))\nprint(opposite_Signs(0,-2))\nprint(opposite_Signs(0,3))\nprint(opposite_Signs(-1,-1))\nprint(opposite_Signs(0,0))\nprint(opposite_Signs(1,-2))"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    return (x>0 and y<0) or (x<0 and y>0)\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x*y > 0 and x < 0 and y < 0:\n        print(\"The two numbers have opposite signs\")\n    elif x*y > 0 and x > 0 and y > 0:\n        print(\"The two numbers have opposite signs\")\n    elif x*y > 0 and x > 0 and y < 0:\n        print(\"The two numbers have opposite signs\")\n    elif x*y < 0 and x < 0 and y < 0:\n        print(\"The two numbers have opposite signs\")\n    elif x*y < 0 and x > 0 and y < 0:\n        print(\"The two numbers have opposite signs\")\n    elif x*y < 0 and x < 0 and y > 0:\n        print(\"The two numbers have opposite signs\")\n    elif x*y > 0 and x > 0 and y > 0:\n        print(\"The two numbers have opposite signs\")\n    else:\n        print(\"The two numbers have same sign\")\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x == -y: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if (x == 0 and y!= 0) or (y == 0 and x!= 0) :\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0:\n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 58,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def opposite_Signs(x,y): \n    '''\n    Write a python function to check whether the given two integers have opposite sign or not.\n    '''\n    if x < 0 and y > 0: \n        return True\n    elif x > 0 and y < 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n * (n + 1) // 2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(n+1)*(2*n+1)//6\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    sum = 1\n    factor = 1\n    while n!= 0:\n        if n % 3 == 0:\n            n = n - 3\n        else:\n            n = n - 1\n        sum = sum + factor\n        factor = factor * 2\n    return sum\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n**(1/2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    octagonal_number = 0\n    for i in range(n):\n        octagonal_number += 8 * i + 1\n    return octagonal_number\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    \n    if n <= 0:\n        return None\n    if n == 1:\n        return 1\n    \n    prev = 0\n    curr = 1\n    \n    for i in range(2, n + 1):\n        result = curr + prev\n        prev = curr\n        curr = result\n    \n    return result"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    if n == 0: \n        return 1\n    else: \n        return int((n * (3 * n - 1)) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return n*(3*n-1)/2\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    return int(n * (n+1) / 2)\n"
    },
    {
        "number": 59,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_octagonal(n): \n    '''\n    Write a function to find the nth octagonal number.\n    '''\n    oct = 1\n    a = 1\n    n = int(n)\n    while a < n:\n        oct += 1\n        a = oct * (oct + 1) // 2\n    return oct\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    for i in range(len(s)):\n        d[s[i]]+=1\n    cnt = 0\n    for key, val in d.items():\n        if val==len(s):\n            cnt+=1\n    return cnt\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    digits_counter = defaultdict(lambda:0)\n    for i in range(len(s)):\n        digits_counter[s[i]] += 1\n        if s[i] in digits_counter:\n            digits_counter[s[i]] -= 1\n    return sum([digits_counter[i] for i in digits_counter])\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    \n    count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)+1):\n            substring = s[i:j]\n            if is_valid_substring(substring) and int(substring) == len(substring):\n                count+=1\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    if len(s) == 0:\n        return 0\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    # Return length of the string\n    count = 0\n    # Initialize count to zero\n    count = 0\n    # Create a dictionary\n    s = dict()\n    for i in range(len(s)):\n        # Add each element to the dictionary\n        s[i] = s.get(i, 0) + 1\n    # Iterate through the dictionary\n    for k, v in s.items():\n        # Check if the sum of digits of the current value\n        # is equal to its length and if it is,\n        # increment the count by one.\n        if k + 1 == v and v == len(s):\n            count += 1\n    # Return the count\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count=0\n    for i in range(1,len(s)):\n        for j in range(len(s)-i+1):\n            if (int(s[j:j+i])==len(s)-j):\n                count+=1\n    return count"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    l = len(s)\n    count = 0\n    for i in range(1,l+1):\n        for j in range(0,l-i+1):\n            temp = s[j:j+i]\n            k = 0\n            while k<i:\n                if int(temp[k]) == int(temp[k+1]):\n                    count = count+1\n                k = k+1\n    print (count)\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    d = defaultdict(int)\n    \n    for i in range(0, len(s)):\n        if i == 0:\n            d[s[i]] = 1\n        else:\n            \n            if d[s[i - 1]] == 1 and s[i] in d:\n                d[s[i]] += 1\n                \n            else:\n                d[s[i]] = 1\n                \n    count = 0\n    for k, v in d.items():\n        if k!= '0':\n            count += v\n    return count\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    sub_string_count = 0\n    for i in range(len(s)):\n        for j in range(i,len(s)):\n            sub_string = s[i:j+1]\n            sub_string_sum = 0\n            for char in sub_string:\n                sub_string_sum += int(char)\n            if sub_string_sum == len(sub_string):\n                sub_string_count += 1\n"
    },
    {
        "number": 61,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef count_Substrings(s):\n    '''\n    Write a python function to count the number of substrings with the sum of digits equal to their length.\n    '''\n    count = 0\n    for i in range(len(s)):\n        for j in range(i, len(s)):\n            if len(s[i:j+1]) == len(s[i:j+1].replace(' ', '')):\n                count += 1\n    print(count)\n    return count\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    #create a list of all the numbers in the list\n    xs = list(xs)\n    #create a new list of all the numbers that are odd\n    odd = list(filter(lambda x: x%2, xs))\n    #if the length of the list is 0, return none.\n    if len(odd) == 0:\n        return None\n    #otherwise return the smallest number from the odd list\n    return min(odd)\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest == None or x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    xs.sort()\n    return xs[0]\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    # To keep track of the minimum\n    # element in the list\n    min = xs[0]\n    for i in range(len(xs)):\n        if min > xs[i]:\n            min = xs[i]\n    # return min\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min = xs[0]\n    for num in xs:\n        if num < min:\n            min = num\n    return min\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None:\n            smallest = x\n        elif x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest_num = xs[0]\n    for x in xs:\n        if x < smallest_num:\n            smallest_num = x\n    return smallest_num\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    min_ = xs[0]\n    for x in xs:\n        if x < min_:\n            min_ = x\n    return min_\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = None\n    for x in xs:\n        if smallest is None:\n            smallest = x\n        else:\n            if x < smallest:\n                smallest = x\n    return smallest\n"
    },
    {
        "number": 62,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def smallest_num(xs):\n    '''\n    Write a python function to find smallest number in a list.\n    '''\n    smallest = xs[0]\n    for x in xs:\n        if x < smallest:\n            smallest = x\n    return smallest\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = None\n    max_diff_list = []\n    \n    for index in range(len(test_list) - 1):\n        diff = test_list[index + 1] - test_list[index]\n        if max_diff is None:\n            max_diff = diff\n            max_diff_list.append(diff)\n        else:\n            if diff > max_diff:\n                max_diff = diff\n                max_diff_list.clear()\n                max_diff_list.append(diff)\n            elif diff == max_diff:\n                max_diff_list.append(diff)\n    \n    return max_diff, max_diff_list\n    \ndef min_max(test_list):\n    '''\n    Write a function to find the minimum and maximum value in a given list.\n    '''\n    min_val = test_list[0]\n    max_val = test_list[0]\n    \n    for item in test_list:\n        if item < min_val:\n            min_val = item\n        if item > max_val:\n            max_val = item\n        \n    return min_val, max_val\n    \ndef sort_list(test_list):\n    '''\n    Write a function to sort a list in ascending order.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list) - i - 1):\n            if test_list[j] > test_list[j+1]:\n                temp = test_list[j]\n                test_list[j] = test_list[j+1]\n                test_list[j+1] = temp\n                \ndef find_missing_number(test_list):\n    '''\n    Write a function to find the missing number in a given list.\n    '''\n    numbers = set(test_list)\n    missing = list(numbers)\n    missing.sort()\n    missing.append(None)\n    \n    for index in range(len(missing)):\n        if index + 1!= missing[index]:\n            return index + 1\n        \ndef reverse_string(test_list):\n    '''\n    Write a function to reverse a string.\n    '''\n    temp = None\n    \n    for i in range(len(test_list)):\n        if temp is None:\n            temp = test_list[i]\n        else:\n            temp = temp + test_list[i]\n        \n    return temp\n    \ndef count_occurences(test_list, search_val):\n    '''\n    Write a function to count the number of times that a value appears in a given list.\n    '''\n    occurences = 0\n    \n    for item in test_list:\n        if item == search_val:\n            occurences += 1\n    \n    return occurences\n    \ndef check_element_in_list(test_list, search_val):\n    '''\n    Write a function to check whether a value is in a given list.\n    '''\n    for item in test_list:\n        if item == search_val:\n            return True\n        \n    return False\n    \ndef make_list_equal(test_list1, test_list2):\n    '''\n    Write a function to make two given list equal.\n    '''\n    for item in test_list1:\n        if item in test_list2:\n            test_list2.remove(item)\n    \n    return test_list1 + test_list2\n    \ndef reverse_string_alternative(test_list):\n    '''\n    Write a function to reverse a string.\n    '''\n    new_string = \"\"\n    \n    for char in test_list:\n        new_string = char + new_string\n        \n    return new_string\n    \ndef find_longest_word(test_list):\n    '''\n    Write a function to find the length of the longest word in a given list.\n    '''\n    max_length = 0\n    for word in test_list:\n        if len(word) > max_length:\n            max_length = len(word)\n    \n    return max_length\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = 0\n    max_date = 0\n    for i in range(len(test_list)):\n        if i!= 0:\n            diff = test_list[i] - test_list[i - 1]\n            if diff > max_diff:\n                max_diff = diff\n                max_date = test_list[i]\n    return max_diff, max_date\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    first = max(test_list)\n    second = min(test_list)\n    return max(first, second) - min(first, second)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if len(test_list) < 2:\n        return None\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    if test_list == []:\n        return -1\n    \n    max_diff = -1\n    for i in range(len(test_list) - 1):\n        for j in range(i+1, len(test_list)):\n            if abs(test_list[i] - test_list[j]) > max_diff:\n                max_diff = abs(test_list[i] - test_list[j])\n                max_diff_indexes = (i, j)\n    return max_diff_indexes\n    \ndef sum_digits(num):\n    '''\n    Write a function that takes a non-negative number and returns the sum of all of its digits.\n    '''\n    sum = 0\n    while num > 0:\n        sum += num % 10\n        num = num // 10\n    return sum\n    \ndef smallest_sum_digit_pair(digits):\n    '''\n    Write a function that takes a non-negative number and returns the smallest pair of\n    numbers whose sum is equal to the given number.\n    '''\n    min_digit = None\n    for i in range(len(digits)):\n        if min_digit == None:\n            min_digit = i\n        elif sum_digits(digits[i]) < sum_digits(digits[min_digit]):\n            min_digit = i\n    return (min_digit, digits[min_digit])\n    \ndef smallest_sum_digit_pair_approach2(digits):\n    '''\n    This approach uses a Heap.\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    nums_map = {}\n    for i in range(len(digits)):\n        if digits[i] not in nums_map:\n            nums_map[digits[i]] = i\n    \n    heap = []\n    for i in range(len(digits)):\n        if nums_map[digits[i]]!= i:\n            heappush(heap, (sum_digits(digits[i]), nums_map[digits[i]], i))\n    \n    while len(heap) > 1:\n        x = heappop(heap)\n        y = heappop(heap)\n        if x[0] + y[0] == digits[x[2]]:\n            return (x[1], y[1])\n    return (None, None)\n    \ndef smallest_sum_digit_pair_approach3(digits):\n    '''\n    This approach uses a map and a Heap.\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    nums_map = {}\n    for i in range(len(digits)):\n        if digits[i] not in nums_map:\n            nums_map[digits[i]] = i\n    \n    heap = []\n    for i in range(len(digits)):\n        if nums_map[digits[i]]!= i:\n            heappush(heap, (sum_digits(digits[i]), nums_map[digits[i]], i))\n    \n    while len(heap) > 1:\n        x = heappop(heap)\n        y = heappop(heap)\n        if x[0] + y[0] == digits[x[2]]:\n            return (x[1], y[1])\n    return (None, None)\n    \ndef smallest_sum_digit_pair_approach4(digits):\n    '''\n    This approach uses a map and a Heap.\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    nums_map = {}\n    for i in range(len(digits)):\n        if digits[i] not in nums_map:\n            nums_map[digits[i]] = i\n    \n    heap = []\n    for i in range(len(digits)):\n        if nums_map[digits[i]]!= i:\n            heappush(heap, (sum_digits(digits[i]), nums_map[digits[i]], i))\n    \n    while len(heap) > 1:\n        x = heappop(heap)\n        y = heappop(heap)\n        if x[0] + y[0] == digits[x[2]]:\n            return (x[1], y[1])\n    return (None, None)\n    \ndef smallest_sum_digit_pair_approach5(digits):\n    '''\n    This approach uses a map and a Heap.\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    nums_map = {}\n    for i in range(len(digits)):\n        if digits[i] not in nums_map:\n            nums_map[digits[i]] = i\n    \n    heap = []\n    for i in range(len(digits)):\n        if nums_map[digits[i]]!= i:\n            heappush(heap, (sum_digits(digits[i]), nums_map[digits[i]], i))\n    \n    while len(heap) > 1:\n        x = heappop(heap)\n        y = heappop(heap)\n        if x[0] + y[0] == digits[x[2]]:\n            return (x[1], y[1])\n    return (None, None)\n    \ndef smallest_sum_digit_pair_approach6(digits):\n    '''\n    This approach uses a map and a Heap.\n    Time complexity: O(n)\n    Space complexity: O(n)\n    '''\n    nums_map = {}\n    for i in range(len(digits)):\n        if digits[i] not in nums_map:\n            nums_map[digits[i]] = i\n    \n    heap = []\n    for i in range(len(digits)):\n        if nums_map[digits[i]]!= i:\n            heappush(heap, (sum_digits(digits[i]), nums_map[digits[i]], i))\n    \n    while len(heap) > 1:\n        x = heappop(heap)\n        y = heappop(heap)\n        if x[0] + y[0] == digits[x[2]]:\n            return (x[1], y[1])\n    return (None, None)\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    d = {}\n    for i in test_list:\n        for j in i:\n            if j in d.keys():\n                d[j] += 1\n            else:\n                d[j] = 1\n    ans = 0\n    for i in d.keys():\n        if ans < d[i]:\n            ans = d[i]\n    return ans\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    max_diff = -100000\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = abs(test_list[i]-test_list[j])\n            if diff > max_diff:\n                max_diff = diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # print(\"List: \",test_list)\n    max_diff = 0\n    for i in range(len(test_list)-1):\n        # print(\"Iteration: \", i)\n        # print(\"List: \", test_list)\n        for j in range(i+1, len(test_list)):\n            # print(\"Comparing: \", test_list[i], test_list[j])\n            diff = test_list[j] - test_list[i]\n            # print(\"Difference: \", diff)\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    # your code here\n    pass\n"
    },
    {
        "number": 63,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_difference(test_list):\n    '''\n    Write a function to find the maximum difference between available pairs in the given tuple list.\n    '''\n    test_list = test_list\n    max_diff = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            diff = test_list[j] - test_list[i]\n            if diff > max_diff:\n                max_diff = diff\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x:x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda item:item[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    marks_list=[]\n    marks_list1=[]\n    marks_list2=[]\n    marks_list3=[]\n    marks_list4=[]\n    marks_list5=[]\n    for sub,marks in subjectmarks:\n        marks_list.append(marks)\n    marks_list.sort()\n    for i in range(len(marks_list)):\n        marks_list1.append(subjectmarks[i][0])\n        marks_list2.append(subjectmarks[i][1])\n    for i in range(len(marks_list)):\n        marks_list3.append(marks_list1[i])\n        marks_list4.append(marks_list2[i])\n    for i in range(len(marks_list)):\n        marks_list5.append((marks_list3[i],marks_list4[i]))\n    return marks_list5\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key = lambda x: x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    subjectmarks.sort(key=lambda x: x[1])\n    return subjectmarks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks, key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks, key=lambda x: x[1])\n    return sorted_marks\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    return sorted(subjectmarks,key=lambda x:x[1])\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    #Solution from the link\n    new_list = sorted(subjectmarks,key=lambda x:x[1])\n    return new_list\n"
    },
    {
        "number": 64,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def subject_marks(subjectmarks):\n    '''\n    Write a function to sort a list of tuples using the second value of each tuple.\n    '''\n    sorted_marks = sorted(subjectmarks)\n    return sorted_marks\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    if len(data_list) == 1:\n        return data_list[0]\n    return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    def recursive_list_sum_helper(data_list):\n        if data_list == []:\n            return 0\n        else:\n            return data_list[0] + recursive_list_sum_helper(data_list[1:])\n    return recursive_list_sum_helper(data_list)\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    pass\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    elif type(data_list[0]) == list:\n        return recursive_list_sum(data_list[0]) + recursive_list_sum(data_list[1:])\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # if there are no more sublists, return the total\n    if len(data_list) == 0:\n        return 0\n    else:\n        # if there is one sublist, add its length and return it\n        if len(data_list) == 1:\n            return sum(data_list[0])\n        else:\n            # otherwise return the sum of all the sublists and add the length of the first sublist\n            return sum(data_list[0]) + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if not data_list:\n        return 0\n    elif not data_list[0]:\n        return 0\n    elif not data_list[1]:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    if len(data_list) == 0:\n        return 0\n    else:\n        return data_list[0] + recursive_list_sum(data_list[1:])\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    # Base case: If length of list is 1\n    if len(data_list) == 1:\n        return data_list[0]\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum = 0\n    if type(data_list) == int:\n        return data_list\n    for i in range(len(data_list)):\n        if type(data_list[i]) == list:\n            sum += recursive_list_sum(data_list[i])\n        else:\n            sum += data_list[i]\n    return sum\n"
    },
    {
        "number": 65,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def recursive_list_sum(data_list):\n    '''\n    Write a function to flatten a list and sum all of its elements.\n    '''\n    sum_values = 0\n    for i in data_list:\n        if isinstance(i, list):\n            sum_values += recursive_list_sum(i)\n        else:\n            sum_values += i\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    # Using the list comprehension\n    return sum([1 for item in list if item > 0])\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i >= 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count=0\n    for i in list:\n        if i>0:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count = count + 1\n    print(\"Count of positive numbers: \", count)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    num = 0\n    for i in list:\n        if i>0:\n            num += 1\n    return num\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    pos = 0\n    for num in list:\n        if num > 0:\n            pos = pos + 1\n    return pos\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in list:\n        if i > 0:\n            count += 1\n    print(\"Total positive numbers in a list: \", count)\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    return(list.count(0) + list.count(1))\n    \nlist = [0, 0, 1, 0, 1, 0, 0, 1, 1, 0, 0]\nprint(pos_count(list))\n"
    },
    {
        "number": 66,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pos_count(list):\n    '''\n    Write a python function to count the number of positive numbers in a list.\n    '''\n    count = 0\n    for i in range(len(list)):\n        if list[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    b1,b2 = [],[]\n    for i in range(n+1):\n        b1.append([])\n        b2.append([])\n        for j in range(i+1):\n            b1[i].append(0)\n            b2[i].append(0)\n    for i in range(n+1):\n        b1[i][0] = 1\n    for i in range(1,n+1):\n        for j in range(i+1):\n            if j==0:\n                continue\n            if j==i:\n                b1[i][j] = 1\n            else:\n                b1[i][j] = b1[i-1][j-1] + b1[i-1][j]\n    for i in range(n+1):\n        for j in range(i+1):\n            if j==0:\n                continue\n            if j==i:\n                b2[i][j] = 1\n            else:\n                b2[i][j] = b2[i][j-1] + b2[i-1][j]\n    \n    return b1[n][n] + b2[n][n]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (bell_number(n - 1) + bell_number(n - 2))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n <= 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    \n    return bell_number(n-1) + bell_number(n-2) + bell_number(n-3)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 4\n    \n    dp = [0]*n\n    dp[0], dp[1], dp[2], dp[3] = 1, 2, 3, 4\n    for i in range(4, n):\n        dp[i] = dp[i - 1] + dp[i - 2] + dp[i - 3] + dp[i - 4]\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    def bell_number_iterative(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        count = 0\n        for i in range(2, n+1):\n            count += bell_number_iterative(i-1) * bell_number_iterative(n-i)\n        return count\n    return bell_number_iterative(n)\nprint(bell_number(5))"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    # base case - all partitions are of size 1.\n    if n == 1:\n        return 1\n    \n    # recursive step - if partition size is greater than 1, then there are two possibilities:\n    # either this size is the last element in the partition, or if this size is the last element \n    # in the partition, the rest of the partition can be the sum of the partition with the next \n    # size. This can be done by adding 1 to each partition, then recursively calling the function\n    # to check all partitions with the next size. \n    if n >= 2:\n        return bell_number(n - 1) + bell_number(n - 2)\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    ways = 0\n    for i in range(1, n+1):\n        ways += bell_number_recursive(i, n)\n    return ways\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    return math.factorial(2*n)/(math.factorial(n)*math.factorial(n+1))\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    \n    if n <= 1:\n        return 1\n    \n    if n <= 2:\n        return 1\n    \n    if n <= 3:\n        return 2\n    \n    num_ways = 4\n    \n    #The number of ways to partition to only 1 number\n    num_ways += sum(range(2,n-1))\n    \n    #The number of ways to partition to only 2 numbers\n    num_ways += sum(range(1,n-2))\n    \n    for i in range(3,n-1):\n        num_ways += sum(range(1,i))\n    \n    return num_ways\n"
    },
    {
        "number": 67,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_number(n):   \n    '''\n    Write a function to find the number of ways to partition a set of Bell numbers.\n    '''\n    if n==1:\n        return 1\n    if n==2:\n        return 2\n    if n==3:\n        return 4\n    else:\n        return bell_number(n-1)+bell_number(n-2)+bell_number(n-3)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 0\n    j = len(A) - 1\n    while i < j:\n        if A[i] <= A[j]:\n            i += 1\n        else:\n            j -= 1\n    return True if i == j else False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    \n    # Time Complexity O(n)\n    # Space Complexity O(1)\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    # if A[i] < A[i+1] or A[i] > A[i+1]: return False\n    # else: return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    A.sort()\n    return A == list(range(1,len(A)+1)) or A == list(range(len(A)-1,-1,-1))\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] > A[j]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    i = 1\n    if len(A) <= 1:\n        return True\n    while i < len(A):\n        if A[i - 1] <= A[i]:\n            i += 1\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    else:\n        for i in range(len(A)-1):\n            if A[i] <= A[i+1]:\n                continue\n            else:\n                return False\n    return True\n    \ndef is_Monotonic_2(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    else:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n        \n    \ndef is_Monotonic_3(A):\n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) == 1:\n        return True\n    else:\n        for i in range(len(A)-1):\n            if A[i] > A[i+1]:\n                return False\n        return True\n    return False\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A)\n    if n == 1:\n        return True\n    for i in range(n):\n        if i == n-1:\n            return True\n        else:\n            if A[i] >= A[i+1]:\n                return False\n    return True\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    if len(A) <= 2:\n        return True\n    if A[0] > A[1] and A[0] < A[-1]:\n        return True\n    else:\n        return False\nA = [1,2,3,4,5] \nprint(is_Monotonic(A))\n"
    },
    {
        "number": 68,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Monotonic(A): \n    '''\n    Write a python function to check whether the given array is monotonic or not.\n    '''\n    n = len(A) \n    for i in range(1,n): \n        if A[i] < A[i-1]: \n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l) - len(s) + 1):\n        if l[i:i + len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    return all(x in l for x in s)\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    sub = False\n    for i in range(0,len(l)):\n        if l[i] == s[0] and l[i:i+len(s)] == s:\n            sub = True\n    return sub\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if s == []:\n        return True\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(l) < len(s):\n        return False\n    if len(l) == len(s):\n        return l == s\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # This should be a sliding window problem.\n    for i in range(len(s)):\n        if not s[i:]:\n            return True\n        if s[i] not in l:\n            return False\n        # Since we use \"in\", we should add the letter as far as we can.\n        # Otherwise, we can't return True.\n        l = l[l.index(s[i]) + 1:]\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    if len(s) > len(l):\n        return False\n    for i in range(len(s)):\n        if s[i]!= l[i]:\n            return False\n    return True\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    # Your Code Here\n    if l == None:\n        return False\n    start_index = 0\n    end_index = len(l)\n    if l == s:\n        return True\n    while start_index < end_index:\n        if l[start_index] == s[0]:\n            if is_sublist(l[start_index+1:], s[1:]):\n                return True\n        start_index += 1\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for x in l:\n        if x == s:\n            return True\n    return False\n"
    },
    {
        "number": 69,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_sublist(l, s):\n    '''\n    Write a function to check whether a list contains the given sublist or not.\n    '''\n    for i in range(len(l)):\n        if l[i:i+len(s)] == s:\n            return True\n    return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    length = len(Input)\n    for i in range(length):\n        for j in range(length):\n            if len(Input[i])!= len(Input[j]):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    a=set()\n    for i in range(len(Input)):\n        if Input[i] not in a:\n            a.add(Input[i])\n        else:\n            return False\n    return True\n    #code here\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Declare Dictionary\n    # Declare Dictionary\n    dict = {}\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    #length = len(Input)\n    #for i in range(length):\n    #    if len(Input[i])!=length:\n    #        print(i)\n    #        return False\n    #return True\n    for i in range(len(Input)):\n        if len(Input[i])!=len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l = []\n    for i in range(len(Input)):\n        l.append(len(Input[i]))\n    l.sort()\n    if(l[0]==l[1]==l[2]==l[3]==l[4]==l[5]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # count the length\n    for i in range(0, len(Input)):\n        for j in range(i+1, len(Input)):\n            if(len(Input[i])!= len(Input[j])):\n                return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    l = len(Input[0])\n    \n    for i in Input:\n        if len(i)!= l:\n            return False\n    return True\n    \n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    x = True\n    # while loop to run till the length of the tuple is same.\n    # if length is not same then x is True else False\n    while x:\n        l = len(Input)\n        # check if length is same\n        if l == len(Input[0]):\n            x = False\n        # else length is not same\n        else:\n            # assign length of each element to list\n            l1 = [len(i) for i in Input]\n            # find max length of each element\n            max_l = max(l1)\n            # find minimum length of each element\n            min_l = min(l1)\n            # if length of each element is equal then x is True else False\n            if max_l == min_l:\n                x = True\n            else:\n                x = False\n    return x"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    assert(isinstance(Input, list))\n    if len(Input) == 0:\n        return False\n    for i in range(len(Input)):\n        assert(isinstance(Input[i], tuple))\n        if len(Input[i])!= len(Input[0]):\n            return False\n    return True\n"
    },
    {
        "number": 70,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_equal_tuple(Input):\n    '''\n    Write a function to find whether all the given tuples have equal length or not.\n    '''\n    # Your code here\n    # if the length is not equal\n    if len(Input[0])!=len(Input[1]):\n        return False\n    # if length is equal\n    else:\n        # if the length is equal and the two tuples are equal\n        if Input[0]==Input[1]:\n            return True\n        # if the length is equal and the two tuples are not equal\n        else:\n            return False\n            "
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    length = len(nums)\n    if length == 1:\n        return nums\n    \n    step = 1\n    while step < length:\n        for i in range(length - step):\n            if nums[i] > nums[i+step]:\n                nums[i], nums[i+step] = nums[i+step], nums[i]\n        step = step * 3 + 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Move to the end of list\n    for i in range(len(nums)-1,0,-1):\n        # Move to a vacant location\n        for j in range(i):\n            # Check if nums[i] is greater than nums[j]\n            if nums[i] < nums[j]:\n                # If yes, swap them\n                temp = nums[i]\n                nums[i] = nums[j]\n                nums[j] = temp\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    gap = len(nums)\n    while gap > 1:\n        gap = int(gap / 1.3)\n        if gap == 0:\n            gap = 1\n        i = 0\n        while i < gap:\n            if nums[i] > nums[i + 1]:\n                nums[i], nums[i + 1] = nums[i + 1], nums[i]\n            i += 1\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return\n    for i in range(n-1):\n        for j in range(n-i-1):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(i, j):\n        nums[i], nums[j] = nums[j], nums[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    n = len(nums)\n    if n <= 1:\n        return nums\n    for i in range(n-1):\n        for j in range(n-1-i):\n            if nums[j] > nums[j+1]:\n                nums[j], nums[j+1] = nums[j+1], nums[j]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for j in range(len(nums)):\n        for i in range(len(nums)-1-j):\n            if nums[i] > nums[i+1]:\n                nums[i],nums[i+1] = nums[i+1],nums[i]\n    return nums\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(n,i,j):\n        if n[i] > n[j]:\n            n[i],n[j]=n[j],n[i]\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    p = len(nums)\n    count = 1\n    \n    while count < p:\n        j = count\n        while j > 0 and nums[j-1] > nums[j]:\n            nums[j-1], nums[j] = nums[j], nums[j-1]\n            j -= 1\n        count *= 2\n"
    },
    {
        "number": 71,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def comb_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #if len(nums) < 2:\n    #    return nums\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    \n    a = n // 2\n    b = n - (a * 2)\n    if a <= 0 or b <= 0:\n        print('Invalid input')\n    elif a == b:\n        print('The given number can be represented as the difference of two squares')\n    else:\n        print('The given number can not be represented as the difference of two squares')\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if n==0:\n        print(n,\"is zero\")\n    else:\n        while n>0:\n            r=n%2\n            n=n//2\n            if r==0:\n                print(n,\"is a perfect square\")\n            else:\n                print(n,\"is not a perfect square\")\ndif_Square(0)\ndif_Square(1)\ndif_Square(4)\ndif_Square(20)\ndif_Square(25)\ndif_Square(100)\ndif_Square(999)\ndif_Square(1000)\ndif_Square(1001)\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    if (n <= 0): \n        return False\n    \n    if (n == 1): \n        return True\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    l1 = []\n    l2 = []\n    for i in range(1,n+1):\n        if n == i**2:\n            l1.append(i)\n        if n == i**2 - 1:\n            l2.append(i)\n    print(l1)\n    print(l2)\n    if l1 == l2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    return (n ** 2 == (n - 1) ** 2) or (n ** 2 == -(n - 1) ** 2) or (n ** 4 == (n - 1) ** 4)\n    "
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+i\n    if sum==n:\n        return \"Square\"\n    else:\n        return \"Not a square\"\n        \ndef dif_Cube(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two cubes or not.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+i\n    if sum==n:\n        return \"Cube\"\n    else:\n        return \"Not a cube\"\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    '''\n    n = int(input(\"Enter the number : \"))\n    if n >= 2:\n        a = n - (n//2)\n        b = n//2\n        if a == b:\n            print(True)\n        else:\n            print(False)\n    else:\n        print(False)\n    '''\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n = abs(int(n))\n    if n == 0:\n        return True\n    return True if (n%2) == 0 else False\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    def diff_sq(n): \n        d=n**0.5\n        return d\n    \n    \n    return abs(diff_sq(n)-n)<1e-4\n"
    },
    {
        "number": 72,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dif_Square(n): \n    '''\n    Write a python function to check whether the given number can be represented as the difference of two squares or not.\n    '''\n    n=int(n)\n    if(n==0):\n        return \"The number is a perfect square\"\n    else:\n        if(n**0.5-int(n**0.5)==0):\n            return \"The number can be represented as the difference of two squares\"\n        else:\n            return \"The number is not a perfect square\"\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    colors = colors.lower()\n    patterns = patterns.lower()\n    for pattern in patterns:\n        colors = colors.replace(pattern,'')\n    return colors == ''\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return sorted(colors) == sorted(patterns)\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for index, val in enumerate(patterns):\n        if val!= colors[index]:\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    i = 0\n    for color in colors:\n        if i < len(patterns) - 1:\n            if not color == patterns[i]:\n                return False\n            i = i + 1\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    count = 0\n    for i in range(len(colors)-1):\n        if colors[i]!= patterns[count]:\n            return False\n        count = count + 1\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(patterns)):\n        if i == 0:\n            if len(colors) < len(patterns[i]):\n                return False\n        else:\n            if len(colors)!= len(patterns[i]):\n                return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    return sorted(colors) == sorted(patterns)\n    \ndef is_same_color(colors, patterns):\n    '''\n    Write a function that checks whether the colors are in the same color pattern.\n    '''\n    colors.sort()\n    patterns.sort()\n    return colors == patterns\n    \ndef has_same_colors(colors, patterns):\n    '''\n    Write a function that checks whether it has the same colors as patterns.\n    '''\n    for pattern in patterns:\n        if not is_same_color(colors, pattern):\n            return False\n    return True\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    if len(colors)!= len(patterns):\n        return False\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    # An empty array is needed to store the next color to be added\n    # after the current color was read from the original string\n    next_color = []\n"
    },
    {
        "number": 74,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_samepatterns(colors, patterns):    \n    '''\n    Write a function to check whether it follows the sequence given in the patterns array.\n    '''\n    for i in range(0, len(colors)):\n        if patterns[i] == -1 or patterns[i] == -2:\n            continue\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    res = []\n    for i in range(len(test_list)):\n        if all(x % K == 0 for x in test_list[i]):\n            res.append(test_list[i])\n    return res\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    ans = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if not (test_list[i][0] % K or test_list[j][0] % K):\n                ans.append(test_list[i] + test_list[j])\n    return ans\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    k_list = []\n    test_list_len = len(test_list)\n    for i in range(test_list_len):\n        if test_list[i][0] % K == 0 or test_list[i][1] % K == 0:\n            k_list.append(test_list[i])\n    return k_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    return_list = []\n    for i in range(len(test_list)):\n        for j in range(i + 1, len(test_list)):\n            if (test_list[i][0] % K == 0) and (test_list[j][0] % K == 0):\n                return_list.append((test_list[i], test_list[j]))\n    return return_list\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    output = []\n    for i in range(len(test_list)):\n        tup = test_list[i]\n        if tup[0] % K == 0 and tup[1] % K == 0 and tup[2] % K == 0:\n            output.append(tup)\n    return output\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #print(test_list)\n    result = []\n    for i in test_list:\n        #print(\"i :\", i)\n        if sum(i) % K == 0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    for i in test_list:\n        if len(i)!= K:\n            return False\n    return True\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    # for i in range(0, len(test_list)-1):\n    #     for j in range(i+1, len(test_list)):\n    #         if(test_list[i][0] % test_list[j][0] == 0 and test_list[i][1] % test_list[j][1] == 0):\n    #             print(test_list[i], test_list[j])\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    #!!! type your code here\n    for t in test_list:\n        if len(t)!= K:\n            print(\"Invalid Test Case\")\n            exit(1)\n    for t in test_list:\n        if not all(element % K == 0 for element in t):\n            print(\"Invalid Test Case\")\n            exit(1)\n"
    },
    {
        "number": 75,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_tuples(test_list, K):\n    '''\n    Write a function to find tuples which have all elements divisible by k from the given list of tuples.\n    '''\n    list1 = []\n    for i in range(len(test_list)):\n        if test_list[i][0] % K == 0 and test_list[i][1] % K == 0:\n            list1.append(test_list[i])\n    return list1\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if(n%11 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        print(\"{} is divisible by 11\".format(n)) \n    else: \n        print(\"{} is not divisible by 11\".format(n)) \n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return 1\n    else:\n        return 0\n    \ndef calc_sum(n):\n    '''\n    Write a python function to find the sum of the digits of a number.\n    '''\n    result = 0\n    while n>0:\n        result = result + n%10\n        n = n//10\n    return result\n    \ndef calc_sum_recursion(n):\n    '''\n    Write a python function to find the sum of the digits of a number using recursion.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n%10 + calc_sum_recursion(n//10)\n    \ndef find_max(n,curr,max):\n    '''\n    Write a python function to find the maximum value of a nested list.\n    '''\n    if n > max:\n        max = n\n    else:\n        return max\n    return find_max(n[1],curr+1,max)\n    \ndef deep_reverse(n):\n    '''\n    Write a python function to reverse a nested list.\n    '''\n    if not isinstance(n,list):\n        return n\n    else:\n        if len(n)==1:\n            return n\n        else:\n            return n[-1:][::-1] + deep_reverse(n[:-1])\n        \ndef is_unique(s):\n    '''\n    Write a python function to check whether a given string contains any duplicate characters.\n    '''\n    return len(s)==len(set(s))\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11==0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return not (n%11)\ndef not_diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return not (n%11)\ndef is_same_and_not_diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0 and not_diff(n)\ndef is_same(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11==0\ndef not_same(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11!=0\ndef is_same_not_diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11!=0 and not_diff(n)\ndef is_all_same(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11!=0 and n%11!=0 and n%11!=0\ndef is_all_same_not_diff(n):\n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n%11!=0 and n%11!=0 and n%11!=0 and not_diff(n)\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n % 11 == 0: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    \n    if n % 11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    return n % 11 == 0\n"
    },
    {
        "number": 77,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Diff(n): \n    '''\n    Write a python function to find whether a number is divisible by 11.\n    '''\n    if n%11 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    if len(s)%2 == 0:\n        return s + \" is even length\"\n    else:\n        return s + \" is odd length\"\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s) % 2 == 0\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s=s.split(\" \")\n    for i in s:\n        if len(i)%2==0:\n            print(\"Even\")\n            break\n        else:\n            print(\"Odd\")\n            break\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    result = True\n    if len(s)%2==0:\n        print(\"The word is not odd!\")\n        result = False\n    else:\n        print(\"The word is odd!\")\n    return result\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    len_ = len(s)\n    if len_ % 2 == 0:\n        print(\"Number of letters in the word are even.\")\n    else:\n        print(\"Number of letters in the word are odd.\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    n = len(s)\n    if n%2==1:\n        print(\"the length is odd\")\n    else:\n        print(\"the length is even\")\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    result = len(s)%2\n    return result\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.split(' ')\n    new_s = []\n    for i in s:\n        new_s.append(len(i))\n    print(new_s)\n    for i in new_s:\n        if i % 2!= 0:\n            print(i, \"is an odd word\")\n        else:\n            print(i, \"is an even word\")\n    return new_s\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    s = s.replace(\" \", \"\").lower()\n    if len(s)%2!= 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 79,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def word_len(s): \n    '''\n    Write a python function to check whether the length of the word is odd or not.\n    '''\n    return len(s)%2==1\nprint(word_len(\"dice\")) # should print False\nprint(word_len(\"marathon\")) # should print True\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n*(n-1)*(n-2)*(n-3)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n <= 0:\n        return None\n    if n == 1:\n        return 4\n    if n == 2:\n        return 10\n    else:\n        a = 1\n        b = 1\n        c = 1\n        for i in range(n-2):\n            a = (a**3 + a**2 + a + 1)*4\n            b = (b**3 + b**2 + b + 1)*4\n            c = (c**3 + c**2 + c + 1)*4\n        return (a*b*c) // (a+b+c) + 1\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    # the formula is a*b*c = (n-1)*(n-2)*(n-3)\n    # where a, b, and c are the 3 n-th tetrahedral numbers.\n    a = b = c = 1\n    for i in range(3, n + 1):\n        c = a + b + c\n        a, b, c = b, c, a\n    return c\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a = 1\n    i = 1\n    while True:\n        a += i\n        i += 1\n        if a == n:\n            return i - 1\n        elif a > n:\n            i -= 1\n            a -= i\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 4\n    elif n == 2:\n        return 7\n    else:\n        for i in range(3, n+1):\n            t = (3*tetrahedral_number(i-2) + tetrahedral_number(i-1))\n        return t\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    a,b,c,d,e = 1,1,1,1,1\n    for i in range(n):\n        a,b,c,d,e = (a+b+c+d+e),(a+b+c),(b+c+d),(b+d+e),(c+d+e)\n    return a+b+c+d+e\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    return sum([i**2 for i in range(1,n+1)])\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    def get_tetrahedral_number(n):\n        if n < 1:\n            return 0\n        if n <= 3:\n            return 1\n        return get_tetrahedral_number(n - 1) + get_tetrahedral_number(n - 2) + get_tetrahedral_number(n - 3) + get_tetrahedral_number(n - 4)\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 4\n    if n == 2:\n        return 15\n    if n == 3:\n        return 52\n    else:\n        return (tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3))\n"
    },
    {
        "number": 80,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tetrahedral_number(n): \n    '''\n    Write a function to find the nth tetrahedral number.\n    '''\n    n = int(n)\n    if n == 0:\n        return 0\n    else:\n        if n == 1:\n            return 4\n        else:\n            return 4 * tetrahedral_number(n - 1) + tetrahedral_number(n - 2) + tetrahedral_number(n - 3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4/3*math.pi*(r**3)\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return 4.0/3*math.pi*r**3\ndef volume_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return math.pi*r1*r2\ndef volume_cone(r1,r2):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*r1*r2*r2\ndef volume_pyramid(r1,r2,r3):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return r1*r1*r2/3 + r2*r2*r3/3 + r3*r3*r3/3\ndef volume_octahedron(r):\n    '''\n    Write a function to find the volume of a octahedron.\n    '''\n    return math.pi*(3.0/8*r*r*r)\ndef volume_cube(r):\n    '''\n    Write a function to find the volume of a cube.\n    '''\n    return 6*r*r*r\ndef volume_tetrahedron(r):\n    '''\n    Write a function to find the volume of a tetrahedron.\n    '''\n    return 4.0/3*math.pi*r**3\ndef volume_dodecahedron(r):\n    '''\n    Write a function to find the volume of a dodecahedron.\n    '''\n    return math.pi*r*(2.0/3*r*r)\ndef volume_icosahedron(r):\n    '''\n    Write a function to find the volume of a icosahedron.\n    '''\n    return 3.0/2*math.pi*(r**3)\ndef volume_equivalence_sphere(r):\n    '''\n    Write a function to find the volume of a sphere that has the same\n    surface area as a sphere with radius 'r'.\n    '''\n    return 4.0/3*math.pi*r**3\ndef volume_equivalence_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a cylinder that has the same\n    surface area as a cylinder with radii 'r1' and 'r2'.\n    '''\n    return 2*math.pi*r1*r2\ndef volume_equivalence_cone(r1,r2):\n    '''\n    Write a function to find the volume of a cone that has the same\n    surface area as a cone with radius 'r1' and 'r2'.\n    '''\n    return math.pi*(1.0/3*r1*r1) + math.pi*(1.0/3*r2*r2) - math.pi*(1.0/3*r1*r2)\ndef volume_equivalence_pyramid(r1,r2,r3):\n    '''\n    Write a function to find the volume of a pyramid that has the same\n    surface area as a pyramid with radii 'r1' and 'r2', 'r3' and 'r3'.\n    '''\n    return math.pi*(1.0/3*r1*r1) + math.pi*(1.0/3*r2*r2) + math.pi*(1.0/3*r3*r3) - math.pi*(1.0/3*r1*r2) - math.pi*(1.0/3*r2*r3) - math.pi*(1.0/3*r3*r1)\ndef volume_equivalence_octahedron(r):\n    '''\n    Write a function to find the volume of an octahedron that has the same\n    surface area as an octahedron with radius 'r'.\n    '''\n    return 4.0/3*math.pi*r*r*r\ndef volume_equivalence_cube(r):\n    '''\n    Write a function to find the volume of a cube that has the same\n    surface area as a cube with radius 'r'.\n    '''\n    return 6*r*r*r\ndef volume_equivalence_tetrahedron(r):\n    '''\n    Write a function to find the volume of a tetrahedron that has the same\n    surface area as a tetrahedron with radius 'r'.\n    '''\n    return 4.0/3*math.pi*r*r*r\ndef volume_equivalence_dodecahedron(r):\n    '''\n    Write a function to find the volume of a dodecahedron that has the same\n    surface area as a dodecahedron with radius 'r'.\n    '''\n    return 3.0/2*math.pi*r*r*r\ndef volume_equivalence_icosahedron(r):\n    '''\n    Write a function to find the volume of an icosahedron that has the same\n    surface area as an icosahedron with radius 'r'.\n    '''\n    return 2.0/3*math.pi*r*r*r\ndef volume_equivalence_tetrahedral_sphere(r):\n    '''\n    Write a function to find the volume of a tetrahedral sphere that has the same\n    surface area as a tetrahedral sphere with radius 'r'.\n    '''\n    return 4.0/3*math.pi*r*r*r\ndef volume_equivalence_tetrahedral_cylinder(r1,r2):\n    '''\n    Write a function to find the volume of a tetrahedral cylinder that has the same\n    surface area as a tetrahedral cylinder with radii 'r1' and 'r2'.\n    '''\n    return 2*math.pi*r1*r2*r1/3 + math.pi*r2*r2*r2/3\ndef volume_equivalence_tetrahedral_cone(r1,r2):\n    '''\n    Write a function to find the volume of a tetrahedral cone that has the same\n    surface area as a tetrahedral cone with radii 'r1' and 'r2'.\n    '''\n    return math.pi*r1*r1*r1 - math.pi*r2*r2*r2\ndef volume_equivalence_tetrahedral_pyramid(r1,r2,r3):\n    '''\n    Write a function to find the volume of a tetrahedral pyramid that has the same\n    surface area as a tetrahedral pyramid with radii 'r1', 'r2' and 'r3'.\n    '''\n    return 3.0/2*math.pi*r1*r1*r2 + math.pi*r2*r2*r2 + math.pi*r3*r3*r3\ndef volume_equivalence_tetrahedral_cube(r):\n    '''\n    Write a function to find the volume of a tetrahedral cube that has the same\n    surface area as a tetrahedral cube with radius 'r'.\n    '''\n    return 6*r*r*r\ndef volume_equivalence_tetrahedral_dodecahedron(r):\n    '''\n    Write a function to find the volume of a tetrahedral dodecahedron that has the same\n    surface area as a tetrahedral dodecahedron with radius 'r'.\n    '''\n    return 2.0/3*math.pi*r*r*r\ndef volume_equivalence_tetrahedral_octahedron(r):\n    '''\n    Write a function to find the volume of a tetrahedral octahedron that has the same\n    surface area as a tetrahedral octahedron with radius 'r'.\n    '''\n    return 4.0/3*math.pi*r*r*r\ndef volume_equivalence_tetrahedral_icosahedron(r):\n    '''\n    Write a function to find the volume of an icosahedron that has the same\n    surface area as an icosahedron with radius 'r'.\n    '''\n    return 1.0/3*math.pi*r*r*r\ndef volume_equivalence_equivalence_sphere(r):\n    '''\n    Write a function to find the volume of a sphere that has the same\n    surface area as a sphere with radius 'r'.\n    '''\n    retur"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    radius = float(r)\n    volume = (4/3)*math.pi*(radius**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n    \n    \ndef volume_cone(h, r):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*(h**2) * (r**2)\n    return volume\n    \n    \ndef volume_cylinder(r1, r2):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = 2*math.pi*(r1**2)*(r2**2)\n    return volume\n    \n    \ndef area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*(r**2)\n    return area\n    \n    \ndef area_cone(h, r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area = 2*math.pi*(h**2)*(r**2)\n    return area\n    \n    \ndef area_cylinder(r1, r2):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*math.pi*(r1**2)*(r2**2)\n    return area\n    \n    \ndef area_cone_torus(r1, r2, h):\n    '''\n    Write a function to find the surface area of a cone torus.\n    '''\n    area = 2*math.pi*(r1**2)*(r2**2) + 2*math.pi*(r1**2)*(h**2)\n    return area\n    \n    \ndef area_cylinder_torus(r1, r2, h):\n    '''\n    Write a function to find the surface area of a cylinder torus.\n    '''\n    area = 2*math.pi*(r1**2)*(r2**2) + 2*math.pi*(r1**2)*(h**2)\n    return area\n    \n    \ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    area = (4/3)*math.pi*(r**2)\n    return area\n    \n    \ndef surface_area_cone(h, r):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    area = 2*math.pi*(h**2)*(r**2)\n    return area\n    \n    \ndef surface_area_cylinder(r1, r2):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    area = 2*math.pi*(r1**2)*(r2**2)\n    return area\n    \n    \ndef surface_area_cone_torus(r1, r2, h):\n    '''\n    Write a function to find the surface area of a cone torus.\n    '''\n    area = 2*math.pi*(r1**2)*(r2**2) + 2*math.pi*(r1**2)*(h**2)\n    return area\n    \n    \ndef surface_area_cylinder_torus(r1, r2, h):\n    '''\n    Write a function to find the surface area of a cylinder torus.\n    '''\n    area = 2*math.pi*(r1**2)*(r2**2) + 2*math.pi*(r1**2)*(h**2)\n    return area\n    \n    \ndef volume_sphere_torus(r1, r2, h):\n    '''\n    Write a function to find the volume of a sphere torus.\n    '''\n    volume = (4/3)*math.pi*(r1**2)*(r2**2) + (4/3)*math.pi*(h**2)\n    return volume\n    \n    \ndef volume_cone_torus(h, r1, r2):\n    '''\n    Write a function to find the volume of a cone torus.\n    '''\n    volume = (4/3)*math.pi*(r1**2)*(r2**2) + (4/3)*math.pi*(h**2)\n    return volume\n    \n    \ndef volume_cylinder_torus(r1, r2, h):\n    '''\n    Write a function to find the volume of a cylinder torus.\n    '''\n    volume = (4/3)*math.pi*(r1**2)*(r2**2) + (4/3)*math.pi*(h**2)\n    return volume\n    \n    \ndef volume_sphere_torus_torus(r1, r2, h1, h2):\n    '''\n    Write a function to find the volume of a sphere torus torus.\n    '''\n    volume = (4/3)*math.pi*(r1**2)*(r2**2) + (4/3)*math.pi*(h1**2)*(h2**2)\n    return volume\n    \n    \ndef volume_cone_torus_torus(h, r1, r2, h1, h2):\n    '''\n    Write a function to find the volume of a cone torus torus.\n    '''\n    volume = (4/3)*math.pi*(r1**2)*(r2**2) + (4/3)*math.pi*(h**2)*(h1**2)*(h2**2)\n    return volume\n    \n    \ndef volume_cylinder_torus_torus(r1, r2, h1, h2):\n    '''\n    Write a function to find the volume of a cylinder torus torus.\n    '''\n    volume = (4/3)*math.pi*(r1**2)*(r2**2) + (4/3)*math.pi*(h1**2)*(h2**2)\n    return volume\n    \n    \ndef volume_cone_torus_cone_torus(r1, r2, h, r3, h1, h2):\n    '''\n    Write a function to find the volume of a cone torus cone torus.\n    '''\n    volume = (4/3)*math.pi*(r1**2)*(r2**2) + (4/3)*math.pi*(r3**2)*(h**2) + (4/3)*math.pi*(h1**2)*(h2**2)\n    return volume\n    \n    \ndef volume_cylinder_torus_cone_torus(r1, r2, h, r3, h1, h2):\n    '''\n    Write a function to find the volume of a cylinder torus cone torus.\n    '''\n    volume = (4/3)*math.pi*(r1**2)*(r2**2) + (4/3)*math.pi*(r3**2)*(h**2) + (4/3)*math.pi*(h1**2)*(h2**2)\n    return volume\n    \n    \ndef volume_cone_cone_torus_torus(r1, r2, h, r3, h1, h2):\n    '''\n    Write a function to find the volume of a cone cone torus cone torus.\n    '''\n    volume = (4/3)*math.pi*(r1**2)*(r2**2) + (4/3)*math.pi*(r3**2)*(h**2) + (4/3)*math.pi*(h1**2)*(h2**2)\n    return volume\n    \n    \ndef volume_cone_cone_torus_cone_torus(r1, r2, h, r3, h1, h2):\n    '''\n    Write a function to find the volume of a cone cone torus cone torus.\n    '''\n    volume = (4/3)*math.pi*(r1**2)*(r2**2) + (4/3)*math.pi*(r3**2)*(h**2) + (4/3)*math.pi*(h1**2)*(h2**2)\n    return volume\n    \n    \ndef volume_cylinder_cone_torus"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    #Area Formula for the sphere \n    area = 4*math.pi*r**2\n    return area\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    v = (4/3)*math.pi*(r**3)\n    return v\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*(r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4 / 3) * math.pi * (r**3)\n    return volume\n"
    },
    {
        "number": 82,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = r * math.pi * h**2\n    return V\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = math.pi * r**2 * h\n    return V\ndef volume_parallelepiped(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    V = a * b * c\n    return V\ndef area_cube(a, b, c):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    A = a * b * c\n    return A\ndef area_cylinder(r, h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    A = 2 * math.pi * r * h\n    return A\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = r * math.pi * h**2\n    return V\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = math.pi * r**2 * h\n    return V\ndef volume_parallelepiped(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    V = a * b * c\n    return V\ndef area_cube(a, b, c):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    A = a * b * c\n    return A\ndef area_cylinder(r, h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    A = 2 * math.pi * r * h\n    return A\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = r * math.pi * h**2\n    return V\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = math.pi * r**2 * h\n    return V\ndef volume_parallelepiped(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    V = a * b * c\n    return V\ndef area_cube(a, b, c):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    A = a * b * c\n    return A\ndef area_cylinder(r, h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    A = 2 * math.pi * r * h\n    return A\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = r * math.pi * h**2\n    return V\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = math.pi * r**2 * h\n    return V\ndef volume_parallelepiped(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    V = a * b * c\n    return V\ndef area_cube(a, b, c):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    A = a * b * c\n    return A\ndef area_cylinder(r, h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    A = 2 * math.pi * r * h\n    return A\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = r * math.pi * h**2\n    return V\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = math.pi * r**2 * h\n    return V\ndef volume_parallelepiped(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    V = a * b * c\n    return V\ndef area_cube(a, b, c):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    A = a * b * c\n    return A\ndef area_cylinder(r, h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    A = 2 * math.pi * r * h\n    return A\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = r * math.pi * h**2\n    return V\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = math.pi * r**2 * h\n    return V\ndef volume_parallelepiped(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    V = a * b * c\n    return V\ndef area_cube(a, b, c):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    A = a * b * c\n    return A\ndef area_cylinder(r, h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    A = 2 * math.pi * r * h\n    return A\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    V = 4/3 * math.pi * r**3\n    return V\ndef volume_cone(r, h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    V = r * math.pi * h**2\n    return V\ndef volume_cylinder(r, h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    V = math.pi * r**2 * h\n    return V\ndef volume_parallelepiped(a, b, c):\n    '''\n    Write a function to find the volume of a parallelepiped.\n    '''\n    V = a * b * c\n    return V\ndef area_cube(a, b, c):\n    '''\n    Write a function to find the area of a cube.\n    '''\n    A = a * b * c\n    return A\ndef area_cylinder(r, h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    A = 2 * math.pi * r "
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    try:\n        i = 0\n        while i<len(strr):\n            i += 1\n            print(\"The ASCII Value of the character \",strr[i-1],\" : \",ord(strr[i-1]) + ord(strr[i-2]) + ord(strr[i-3]))\n    except:\n        print(\"Please provide only string\")\n    return strr\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    s = set()\n    for i in range(len(strr)):\n        s.add(chr(ord(strr[i])+ord('a')%26))\n    return ''.join(s)\n    \nif __name__ == '__main__':\n    strr = input()\n    result = get_Char(strr)\n    print(result)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # your code here\n    if len(strr) == 0:\n        return 0\n    else:\n        return ord(strr[0]) + sum([ord(i) for i in strr[1:]]) % 26\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    import math\n    #print(type(math.gcd(65, 10)))\n    return(int((math.gcd(int(strr[0]) + ord('A'),26) + int(strr[1]) + ord('A'))%26))\n    #print(type(math.gcd(int(strr[0]) + ord('A'),26)))\n    #print(int((math.gcd(int(strr[0]) + ord('A'),26))))\n    #print(int(math.gcd(int(strr[0]) + ord('A'),26)))\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    \n    if strr == None:\n        return None\n    return ord(strr)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    # convert the string to a list \n    char_list = list(strr) \n    # loop through the list and find the ASCII value of each character \n    for i in range(len(char_list)): \n      \n      # get the ASCII value of the character \n      # ord function will give the ASCII value of the character \n      # modulo 26 will keep the values between 0 and 25 \n      char_list[i] = ord(char_list[i])%26\n      \n    # convert the list back to a string \n    strr = ''.join(char_list) \n    return strr \n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    ch = ord(strr[0])-97\n    for i in range(1, len(strr)):\n        ch += ord(strr[i])-97\n        ch = ch%26\n    return ch\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    n = 0\n    for i in range(0,len(strr)):\n        n = (n + ord(strr[i]))%26\n    return chr(n+97)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    count = 0\n    ans = 0\n    for char in strr:\n        count = count + ord(char)\n    ans = count%26\n    return chr(ans)\n"
    },
    {
        "number": 83,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Char(strr):  \n    '''\n    Write a python function to find the character made by adding the ASCII value of all the characters of the given string modulo 26.\n    '''\n    sum = 0\n    for i in range(len(strr)):\n        sum = sum + ord(strr[i])\n    return sum % 26\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    s = 0\n    for i in range(n):\n        s += (3 ** i) * 5 ** (n-i-1)\n    return s\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0: \n        return 0\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 4\n    return (sequence(n-1) + sequence(n-2) + sequence(n-3))\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    return (3**n)*4**n\n    \n    \nprint(sequence(5)) # should return 243\nprint(sequence(100)) # should return 576707817502789435213479622433447543236759632966632769122061210226069691827811965221282805622501241817189716775459745647174696274840"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    \n    seq = {1: 1, 2: 2}\n    for i in range(3,n+1):\n        seq[i] = (seq[i-1] + seq[i-2]) % 10\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    for i in range(1, n): \n        if n <= 0:\n            print (\"Invalid n\")\n            break\n        n = n - 1\n    else:\n        print(n)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    pass\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n <= 0:\n        return None\n    return 0 if n == 1 else 1 if n == 2 else sequence(n - 1) + sequence(n - 2)\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 5\n    if n == 5:\n        return 8\n    if n == 6:\n        return 13\n    if n == 7:\n        return 21\n    if n == 8:\n        return 34\n    if n == 9:\n        return 55\n    if n == 10:\n        return 89\n    if n == 11:\n        return 144\n    if n == 12:\n        return 233\n    if n == 13:\n        return 377\n    if n == 14:\n        return 610\n    if n == 15:\n        return 987\n    if n == 16:\n        return 1597\n    if n == 17:\n        return 2584\n    if n == 18:\n        return 4181\n    if n == 19:\n        return 6765\n    if n == 20:\n        return 10946\n    if n == 21:\n        return 17711\n    if n == 22:\n        return 28657\n    if n == 23:\n        return 46368\n    if n == 24:\n        return 75025\n    if n == 25:\n        return 121393\n    if n == 26:\n        return 196418\n    if n == 27:\n        return 317811\n    if n == 28:\n        return 514229\n    if n == 29:\n        return 861207\n    if n == 30:\n        return 133878\n    if n == 31:\n        return 2178309\n    if n == 32:\n        return 3524578\n    if n == 33:\n        return 5702887\n    if n == 34:\n        return 9227465\n    if n == 35:\n        return 14411518\n    if n == 36:\n        return 26754427\n    if n == 37:\n        return 433494437\n    if n == 38:\n        return 701408733\n    if n == 39:\n        return 1102714584\n    if n == 40:\n        return 1873185638\n    if n == 41:\n        return 2971284229\n    if n == 42:\n        return 48126710437\n    if n == 43:\n        return 81750466709\n    if n == 44:\n        return 12736098689\n    if n == 45:\n        return 2147483649\n    if n == 46:\n        return 3223775794\n    if n == 47:\n        return 4294967296\n    if n == 48:\n        return 628802521\n    if n == 49:\n        return 1104334414\n    if n == 50:\n        return 1828382273\n    if n == 51:\n        return 29726586097\n    if n == 52:\n        return 47592593653\n    if n == 53:\n        return 88706532303\n    if n == 54:\n        return 131162648321\n    if n == 55:\n        return 21897067770\n    if n == 56:\n        return 34404392441\n    if n == 57:\n        return 57640169254\n    if n == 58:\n        return 96482225321\n    if n == 59:\n        return 147922816803\n    if n == 60:\n        return 269928586513\n    if n == 61:\n        return 438162287803\n    if n == 62:\n        return 70324856871\n    if n == 63:\n        return 11094725260\n    if n == 64:\n        return 184545141953\n    if n == 65:\n        return 297161076611\n    if n == 66:\n        return 47770572465\n    if n == 67:\n        return 89084939049\n    if n == 68:\n        return 142064204579\n    if n == 69:\n        return 263002608731\n    if n == 70:\n        return 447297499659\n    if n == 71:\n        return 783002982657\n    if n == 72:\n        return 117604489279\n    if n == 73:\n        return 226998535877\n    if n == 74:\n        return 352133450939\n    if n == 75:\n        return 576839897711\n    if n == 76:\n        return 912941558433\n    if n == 77:\n        return 152755621339\n    if n == 78:\n        return 269919626041\n    if n == 79:\n        return 448722876837\n    if n == 80:\n        return 783401495737\n    if n == 81:\n        return 11912883871\n    if n == 82:\n        return 227493481429\n    if n == 83:\n        return 357290492887\n    if n == 84:\n        return 569403658201\n    if n == 85:\n        return 955669879929\n    if n == 86:\n        return 155438237449\n    if n == 87:\n        return 269917929119\n    if n == 88:\n        return 449539656811\n    if n == 89:\n        return 786779290917\n    if n == 90:\n        return 119255141243\n    if n == 91:\n        return 225692241841\n    if n == 92:\n        return 354991368333\n    if n == 93:\n        return 563247980017\n    if n == 94:\n        return 956537292329\n    if n == 95:\n        return 155731824333\n    if n == 96:\n        return 269913887731\n    if n == 97:\n        return 449560841787\n    if n == 98:\n        return 784806698457\n    if n == 99:\n        return 117626809313\n    if n == 100:\n        return 225989034443\n    if n == 101:\n        return 356611887933\n    if n == 102:\n        return 563202224243\n    if n == 103:\n        return 956577969213\n    if n == 104:\n        return 155905334319\n    if n == 105:\n        return 269994152741\n    if n == 106:\n        return 449537621613\n    if n == 107:\n        return 785817272677\n    if n == 108:\n        return 118314373959\n    if n == 109:\n        return 225750678093\n    if n == 110:\n        return 358243777383\n    if n == 111:\n        return 563299620717\n    if n == 112:\n        return 955362836491\n    if n == 113:\n        return 155607929703\n    if n == 114:\n        return 269910163351\n    if n == 115:\n        return 449532900643\n    if n == 116:\n        return 788036871117\n    if n == 117:\n        return 11833780955\n    if n == 118:\n        return 225806249997\n    if n == 119:\n        return 356776991813\n    if n == 120:\n        return 563647844385\n    if n == 121:\n        return 955684112279\n    if n == 122:\n        return 155487903273\n    if n == 123:\n        return 269908533409\n    if n == 124:\n        return 449517773871\n    if n == 125:\n        return 788002796271\n    if n == 126:\n        return 118306756957\n    if n == 127:\n        return 226892191131\n    if n == 128:\n        return 356528992829\n    if n == 129:\n        return 56366581791\n    if n == 130:\n        return 955939268029\n    if n == 131:\n        return 15599282483\n    if n == 132:\n        return 269902620957\n    if n == 133:\n        return 449481226145\n    if n == 134:\n        return 788018884017\n    if n == 135:\n        return 118556867793\n    if n == 136:\n        return 226845695399\n    if n == 137:\n        return 355777992671\n    if n == 138:\n        return 563520073249\n    if n ="
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    sequence = 1\n    for i in range(n):\n        sequence = sequence*(n+1 - i)\n    return sequence\n"
    },
    {
        "number": 84,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequence(n): \n    '''\n    Write a function to find the nth number in the newman conway sequence.\n    '''\n    if n == 1:\n        return 1\n    return n * sequence(n - 1)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea_sphere=4*math.pi*(r**2)\n    return surfacearea_sphere\nprint(surfacearea_sphere(1))\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    radius = float(r)\n    pi = 3.14159265359\n    surface_area = 4 * pi * radius * radius\n    print(surface_area)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surface_area = 4*math.pi*r**2\n    return surface_area\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4*math.pi*r**3/3\n    return volume\ndef area_cuboid(a,b,c):\n    '''\n    Write a function to find the surface area of a cuboid.\n    '''\n    surface_area = 2*(a*b+b*c+c*a)\n    return surface_area\ndef area_dodecahedron(d):\n    '''\n    Write a function to find the surface area of a dodecahedron.\n    '''\n    area_dodecahedron = 6*d\n    return area_dodecahedron\ndef area_truncated_pyramid(a,b,h):\n    '''\n    Write a function to find the surface area of a truncated pyramid.\n    '''\n    surface_area = math.pi*a*(b+h)\n    return surface_area\ndef volume_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = a*b*h\n    return volume\ndef volume_paraboloid(h,r):\n    '''\n    Write a function to find the volume of a paraboloid.\n    '''\n    volume = (4/3)*math.pi*r**2*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    volume = a*b*h\n    return volume\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = 4/3*math.pi*r**3\n    return volume\ndef volume_sphere_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid with a sphere inscribed in it.\n    '''\n    volume = a*b*h\n    return volume\ndef volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a cone inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_dodecahedron(d):\n    '''\n    Write a function to find the volume of a dodecahedron inscribed in a sphere.\n    '''\n    volume = 6*d\n    return volume\ndef volume_sphere_truncated_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a truncated pyramid inscribed in a sphere.\n    '''\n    volume = math.pi*a*(b+h)\n    return volume\ndef volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a cone inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_paraboloid(h,r):\n    '''\n    Write a function to find the volume of a paraboloid inscribed in a sphere.\n    '''\n    volume = (4/3)*math.pi*r**2*h\n    return volume\ndef volume_sphere_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid inscribed in a sphere.\n    '''\n    volume = a*b*h\n    return volume\ndef volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a cone inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_dodecahedron(d):\n    '''\n    Write a function to find the volume of a dodecahedron inscribed in a sphere.\n    '''\n    volume = 6*d\n    return volume\ndef volume_sphere_truncated_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a truncated pyramid inscribed in a sphere.\n    '''\n    volume = math.pi*a*(b+h)\n    return volume\ndef volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a cone inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_paraboloid(h,r):\n    '''\n    Write a function to find the volume of a paraboloid inscribed in a sphere.\n    '''\n    volume = (4/3)*math.pi*r**2*h\n    return volume\ndef volume_sphere_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid inscribed in a sphere.\n    '''\n    volume = a*b*h\n    return volume\ndef volume_sphere_cone(r,h):\n    '''\n    Write a function to find the volume of a cone inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a pyramid inscribed in a sphere.\n    '''\n    volume = a*b*h\n    return volume\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder inscribed in a sphere.\n    '''\n    volume = math.pi*r**2*h\n    return volume\ndef volume_sphere_dodecahedron(d):\n    '''\n    Write a function to find the volume of a dodecahedron inscribed in a sphere.\n    '''\n    volume = 6*d\n    return volume\ndef volume_sphere_truncated_pyramid(a,b,h):\n    '''\n    Write a function to find the volume of a truncated pyramid inscribed in a sphere.\n    '''\n    volume "
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    surfacearea = 4 * math.pi * (r ** 2)\n    return surfacearea\n    \ndef findvolume_of_cylinder(r1,r2,h):\n    '''\n    Write a function to find the volume of a cylinder with a given radius and height.\n    '''\n    volume = (math.pi*r1**2)*(h)\n    return volume\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    pi=math.pi\n    area=4*pi*r**2\n    return area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    radius = r\n    surfacearea = 4 * math.pi * radius ** 2\n    return surfacearea\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    radians = math.pi*r**2/4\n    surface_area = 4*math.pi*r**2\n    return surface_area\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    from math import pi\n    return 4 * pi * (r ** 2)\n"
    },
    {
        "number": 85,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef surfacearea_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * r * r\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    i = 1\n    number = 2\n    while i < n:\n        number += 3 * (i - 1)\n        i += 1\n    return number\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    res = 1\n    i = 0\n    while i < n:\n        res *= 6 - 2*i\n        i += 1\n    return res\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    import math\n    \n    nth = 0\n    k = 1\n    while True:\n        if (k*k - n*n) < 0:\n            return 0\n        nth = int(n*n + (k*k-n*n)**(1/2))\n        if nth % 2 == 0:\n            return nth\n        k += 1\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return sum([i**2 for i in range(n)])/2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 3\n    if n == 2:\n        return 6\n    if n == 3:\n        return 10\n    \n    return centered_hexagonal_number(n-1) + 2 * centered_hexagonal_number(n-2) + 6 * centered_hexagonal_number(n-3)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return 2*n*(n+1) + 1\n    \ncentered_hexagonal_number(4)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    return n*(n+1)*((2*n+1)**2 + 1)/6\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return 2 * (n - 1) + (n - 1) * (6 * n - 3) / 2\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    \n    def centered_hexagonal_number_recursive(n, x=1):\n        if n == 1:\n            return x\n        else:\n            return (x*(3*x - 1))//2\n    \n    return centered_hexagonal_number_recursive(n)\n"
    },
    {
        "number": 86,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def centered_hexagonal_number(n):\n    '''\n    Write a function to find nth centered hexagonal number.\n    '''\n    if n <= 0:\n        return -1\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict={}\n    for i in dict1.keys():\n        if i in dict2.keys() and i in dict3.keys():\n            merged_dict[i]=[dict1[i],dict2[i],dict3[i]]\n        elif i in dict2.keys():\n            merged_dict[i]=[dict1[i],dict2[i]]\n        elif i in dict3.keys():\n            merged_dict[i]=[dict1[i],dict3[i]]\n        else:\n            merged_dict[i]=[dict1[i],dict1[i]]\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    merged_dict.update(dict3)\n    return merged_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict1, **dict2, **dict3)\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    res = dict1.copy()\n    res.update(dict2)\n    res.update(dict3)\n    return res\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    final_dict = {}\n    for i in dict1:\n        if i in dict2:\n            final_dict[i] = dict1[i] + dict2[i]\n        elif i in dict3:\n            final_dict[i] = dict1[i] + dict3[i]\n        else:\n            final_dict[i] = dict1[i]\n    for i in dict2:\n        if i in dict3:\n            final_dict[i] = dict2[i] + dict3[i]\n        elif i in dict1:\n            final_dict[i] = dict2[i] + dict1[i]\n        else:\n            final_dict[i] = dict2[i]\n    for i in dict3:\n        if i in dict1:\n            final_dict[i] = dict3[i] + dict1[i]\n        elif i in dict2:\n            final_dict[i] = dict3[i] + dict2[i]\n        else:\n            final_dict[i] = dict3[i]\n    return final_dict\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1,**dict2,**dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return {**dict1, **dict2, **dict3}\n"
    },
    {
        "number": 87,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections as ct\ndef merge_dictionaries_three(dict1,dict2, dict3):\n    '''\n    Write a function to merge three dictionaries into a single dictionary.\n    '''\n    return dict(dict(dict1.items() + dict2.items()),**dict3.items())\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = dict()\n    for item in list1:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    result = {}\n    for word in list1:\n        if word in result:\n            result[word] += 1\n        else:\n            result[word] = 1\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # #######################################################\n    # # Soln 1:\n    # freq = {}\n    # for i in list1:\n    #     if i in freq.keys():\n    #         freq[i] += 1\n    #     else:\n    #         freq[i] = 1\n    # return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dictionary = {}\n    for key in list1:\n        if key in dictionary:\n            dictionary[key] += 1\n        else:\n            dictionary[key] = 1\n    return dictionary\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    dict = {}\n    for i in list1:\n        if i in dict.keys():\n            dict[i] += 1\n        else:\n            dict[i] = 1\n    return dict\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    # The dict will have the frequency of each element, indexed by the element itself.\n    d = dict()\n    # Iterate through the list and add each element to the dictionary.\n    for element in list1:\n        if element in d:\n            d[element] += 1\n        else:\n            d[element] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    freq = {}\n    for x in list1:\n        if x in freq:\n            freq[x] += 1\n        else:\n            freq[x] = 1\n    return freq\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    d = {}\n    for i in list1:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    return d\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = {}\n    for i in list1:\n        if i not in frequency:\n            frequency[i] = 0\n        frequency[i] += 1\n    return frequency\n    \ndef isAnagram(str1, str2):\n    '''\n    Write a function to check if two given strings are anagram of each other or not\n    '''\n    if len(str1) == len(str2):\n        count_str1 = freq_count(list(str1))\n        count_str2 = freq_count(list(str2))\n        if len(count_str1.keys()) == len(count_str2.keys()):\n            if sorted(list(count_str1.keys())) == sorted(list(count_str2.keys())):\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\n    \ndef get_first_and_last_index(list1, target):\n    '''\n    Write a function that finds the first and last indexes of the target in the given list.\n    '''\n    if target in list1:\n        for i in range(len(list1)):\n            if list1[i] == target:\n                return i, i + 1\n    return -1, -1\n    \ndef get_char_count(str1):\n    '''\n    Write a function that returns a dictionary with the number of occurrences of each character.\n    '''\n    frequency = {}\n    for i in str1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n    \ndef get_sub_list(list1, index_1, index_2):\n    '''\n    Write a function that returns a list containing a sublist of the given list starting from index_1 and ending at index_2\n    '''\n    sub_list = []\n    for i in range(index_1, index_2):\n        sub_list.append(list1[i])\n    return sub_list\n    \ndef is_sublist(sub_list, list1):\n    '''\n    Write a function that checks if a list is a sublist of another list, or returns false if they are not\n    '''\n    if not sub_list:\n        return False\n    if not list1:\n        return False\n    for i in sub_list:\n        if i in list1:\n            list1.remove(i)\n            return True\n    return False\n"
    },
    {
        "number": 88,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import collections\ndef freq_count(list1):\n    '''\n    Write a function to get the frequency of all the elements in a list, returned as a dictionary.\n    '''\n    frequency = dict()\n    for i in list1:\n        if i in frequency:\n            frequency[i] += 1\n        else:\n            frequency[i] = 1\n    return frequency\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    def closest_smaller_num(n):\n        if n < 0:\n            return 0\n        if n < N:\n            return n\n        else:\n            return n - 1\n    return closest_smaller_num(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    ans = N\n    if N<10:\n        return N\n    elif N<100:\n        for i in range(10,N):\n            if i<ans and N//i<=ans:\n                ans = i\n    elif N<1000:\n        for i in range(100,N):\n            if i<ans and N//i<=ans:\n                ans = i\n    elif N<10000:\n        for i in range(1000,N):\n            if i<ans and N//i<=ans:\n                ans = i\n    elif N<1000000:\n        for i in range(10000,N):\n            if i<ans and N//i<=ans:\n                ans = i\n    elif N<10000000:\n        for i in range(1000000,N):\n            if i<ans and N//i<=ans:\n                ans = i\n    elif N<100000000:\n        for i in range(10000000,N):\n            if i<ans and N//i<=ans:\n                ans = i\n    elif N<1000000000:\n        for i in range(100000000,N):\n            if i<ans and N//i<=ans:\n                ans = i\n    elif N<100000000000:\n        for i in range(1000000000,N):\n            if i<ans and N//i<=ans:\n                ans = i\n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N > 0:\n        temp = N\n        while temp < 10000:\n            if N % temp == 0:\n                print(temp)\n                break\n            else:\n                temp += 1\n    else:\n        print('Enter a positive integer')\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    assert N >= 0\n    if N == 0:\n        return 0\n    i, j = 1, N\n    while i < j:\n        m = (i + j) // 2\n        if m == N:\n            return N\n        elif m < N:\n            i = m + 1\n        else:\n            j = m\n    return i\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    n = int(input('Number: '))\n    if n <= 10:\n        return -1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 == 0:\n        n -= 1\n    if n % 2 ="
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N-1\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    \n    #print(N)\n    ans = N\n    \n    while N > 0:\n        if N == 3:\n            return 3\n        N = N - 2\n        \n    return ans\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return N // 2\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    if N <= 1:\n        return N\n    # Base case.\n    if N % 2 == 0:\n        return N // 2\n    # Recursive case.\n    else:\n        N = N - 1\n        return closest_num(N)\n"
    },
    {
        "number": 89,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def closest_num(N):\n    '''\n    Write a function to find the closest smaller number than n.\n    '''\n    return closest_num_helper(N, 100)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=0\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    length = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > length:\n            length = len(list1[i])\n    return length\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    c = 0\n    temp_word = \"\"\n    longest = \"\"\n    for i in list1:\n        if c < len(i):\n            c = len(i)\n            temp_word = i\n    return len(temp_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    word = ''\n    for i in range(len(list1)):\n        if list1[i] not in word:\n            word += list1[i]\n    return len(word)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    res = 0\n    for word in list1:\n        if len(word) > res:\n            res = len(word)\n    print(res)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    for word in list1:\n        if len(word) > max_len:\n            max_len = len(word)\n    return max_len\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len = 0\n    len_word = []\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n            len_word = list1[i]\n    print(f\"The longest word is {len_word} with the length of {max_len}\")\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    max_len=0\n    for i in list1:\n        if len(i)>max_len:\n            max_len=len(i)\n    print(max_len)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    long_word = list1[0]\n    for i in range(1, len(list1)):\n        if len(list1[i])>len(long_word):\n            long_word = list1[i]\n    return len(long_word)\n"
    },
    {
        "number": 90,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def len_log(list1):\n    '''\n    Write a python function to find the length of the longest word.\n    '''\n    return len(max(list1, key=len))\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    i = 0\n    for ele in str1:\n        if ele == sub_str[i]:\n            if i == len(sub_str)-1:\n                return True\n            i = i + 1\n        else:\n            i = 0\n    return False"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any([sub_str in i for i in str1])\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    s = str1\n    sub = sub_str\n    for i in range(len(s)):\n        if s[i] in sub:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    sub_str_list = str1.split()\n    # print(sub_str_list)\n    for i in sub_str_list:\n        if sub_str in i:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    return any(sub_str in s for s in str1)\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if i in sub_str:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in str1:\n        if sub_str in i:\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    for i in range(0, len(str1)):\n        if (sub_str == str1[i: i + len(sub_str)]):\n            return True\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # loop over the entire list\n    for i in range(0, len(str_list)):\n        # see if there is a match\n        if str_list[i] == sub_str:\n            # return true if a match is found\n            return True\n    # if the loop does not return true, return false\n    return False\n"
    },
    {
        "number": 91,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_substring(str1, sub_str):\n    '''\n    Write a function to check if a string is present as a substring in a given list of string values.\n    '''\n    # For example, a word \"hello\" can be present in a list of strings as a substring in each of the strings.\n    #\n    # Input: str1 = \"hello\", sub_str = \"ll\"\n    # Output: true\n    #\n    # Input: str1 = \"hello\", sub_str = \"l\"\n    # Output: false\n    #\n    # Input: str1 = \"abcdefg\", sub_str = \"cd\"\n    # Output: true\n    #\n    # Input: str1 = \"abcdefg\", sub_str = \"cg\"\n    # Output: false\n    #\n    # Input: str1 = \"abcdefg\", sub_str = \"bc\"\n    # Output: true\n    #\n    # Input: str1 = \"abcdefg\", sub_str = \"defg\"\n    # Output: false\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # return n >= 1 and n <= 4\n    return (n%2 == 0 or n%3 == 0) and n%5!= 0\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n==0:\n        return False\n    for i in range(2,n):\n        if n%i==0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    return (n == n**2)\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    from math import sqrt\n    n = int(n)\n    if sqrt(n).is_integer(): \n        return False\n    else:\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%2!= 0:\n        return False\n    else:\n        n = int(n/2)\n        while n%2 == 0:\n            n = int(n/2)\n        return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n // 10\n    return count > 2\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    sq = int(n ** 0.5)\n    for i in range(1, sq + 1):\n        if n % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    # print(n, \"undulating : \", 0 <= n <= 1)\n    if (n > 1 and n % 2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n%4==0 and n%100!=0:\n        return True\n    elif n%4!=0 and n%100==0:\n        return True\n    else:\n        return False\n        \nprint(is_undulating(1555))\n"
    },
    {
        "number": 92,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_undulating(n): \n    '''\n    Write a function to check whether the given number is undulating or not.\n    '''\n    if n == 0:\n        return False\n    else:\n        i = 2\n        while i <= int(sqrt(n)):\n            if n % i == 0:\n                return False\n            i += 1\n        return True\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(a**b)\n    \ndef multiplic(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    print(a*b)\n    \ndef sum_numbers(*args):\n    '''\n    Write a function that will sum all the numbers in a list.\n    '''\n    print(sum(args))\n    \ndef multip(*args):\n    '''\n    Write a function that will multiply all the numbers in a list.\n    '''\n    print(product(args))\n    \ndef product(*args):\n    '''\n    Write a function that will multiply all the numbers in a list.\n    '''\n    product = 1\n    for i in args:\n        product *= i\n    return product\n    \ndef calculator(a,b,c):\n    '''\n    Write a function that will calculate the product of three numbers.\n    '''\n    print(a*b*c)\n    \ndef average(*args):\n    '''\n    Write a function that will calculate the average of a list of numbers.\n    '''\n    sum = 0\n    for i in args:\n        sum += i\n    average = sum / len(args)\n    return average\n    \ndef grades(**args):\n    '''\n    Write a function that will give a grade given a letter grade,\n    a number of points, and a percentage.\n    '''\n    if args[\"letter\"] == \"A\":\n        print(f\"Your grade is: A with {args['points']} points and {args['percent']}%\")\n    elif args[\"letter\"] == \"A-\":\n        print(f\"Your grade is: A- with {args['points']} points and {args['percent']}%\")\n    elif args[\"letter\"] == \"B+\":\n        print(f\"Your grade is: B+ with {args['points']} points and {args['percent']}%\")\n    elif args[\"letter\"] == \"B\":\n        print(f\"Your grade is: B with {args['points']} points and {args['percent']}%\")\n    elif args[\"letter\"] == \"B-\":\n        print(f\"Your grade is: B- with {args['points']} points and {args['percent']}%\")\n    elif args[\"letter\"] == \"C+\":\n        print(f\"Your grade is: C+ with {args['points']} points and {args['percent']}%\")\n    elif args[\"letter\"] == \"C\":\n        print(f\"Your grade is: C with {args['points']} points and {args['percent']}%\")\n    elif args[\"letter\"] == \"C-\":\n        print(f\"Your grade is: C- with {args['points']} points and {args['percent']}%\")\n    elif args[\"letter\"] == \"D+\":\n        print(f\"Your grade is: D+ with {args['points']} points and {args['percent']}%\")\n    elif args[\"letter\"] == \"D\":\n        print(f\"Your grade is: D with {args['points']} points and {args['percent']}%\")\n    elif args[\"letter\"] == \"F\":\n        print(f\"Your grade is: F with {args['points']} points and {args['percent']}%\")\n    else:\n        print(\"Please enter a valid grade.\")\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a ** b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    return a * power(a, b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if(b==0):\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    if b == 0:\n        return 1\n    else:\n        return a*power(a,b-1)\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    return a**b\nprint(power(2,3))\n"
    },
    {
        "number": 93,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power(a,b):\n    '''\n    Write a function to calculate the value of 'a' to the power 'b'.\n    '''\n    result = a\n    for i in range(b-1):\n        result *= a\n    return result\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    # print(test_list)\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    # get the index of the smallest second value in the list\n    # get the index of the first element of that second value\n    # return that element\n    minimum = []\n    for i in range(len(test_list)):\n        minimum.append((test_list[i][0], test_list[i][1]))\n    minimum.sort()\n    return minimum[0]\nprint(index_minimum([(0,2),(2,4),(3,5),(4,8)]))\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    mini = (None, 9999999999)\n    for i in range(len(test_list)):\n        if test_list[i][1] < mini[1]:\n            mini = (i, test_list[i][1])\n    return mini\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(1))\n    return test_list[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=lambda x: x[1])\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    index = 0\n    minimum = test_list[index]\n    for i in range(len(test_list)):\n        if test_list[i]<minimum:\n            minimum = test_list[i]\n            index = i\n    return test_list[index]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    return min(test_list, key=itemgetter(1))[0]\n"
    },
    {
        "number": 94,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import itemgetter \ndef index_minimum(test_list):\n    '''\n    Given a list of tuples, write a function that returns the first value of the tuple with the smallest second value.\n    '''\n    test_list.sort(key=itemgetter(0,2))\n    return test_list[0]\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = len(lst)\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min = 0\n    for i in lst:\n        if len(i) < min:\n            min = len(i)\n    return min\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    mini_lst_length = len(lst[0])\n    for lst_ in lst:\n        if len(lst_) < mini_lst_length:\n            mini_lst_length = len(lst_)\n    return mini_lst_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min([len(i) for i in lst])\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    return min(map(len, lst))\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    def findMin(lst):\n        #create a new list \n        mini = []\n        #push all the data to the list\n        for i in range(len(lst)):\n            mini.append(lst[i][0])\n        #find the min \n        min_value = min(mini)\n        return min_value\n    #call the function\n    result = findMin(lst)\n    return result\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    list1 = lst[0]\n    for i in range(len(lst)):\n        for j in range(len(lst[i])):\n            if len(list1) > len(lst[i][j]):\n                list1 = lst[i][j]\n    return len(list1)\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    n = len(lst)\n    length = len(lst[0])\n    for i in range(1,n):\n        if len(lst[i])<length:\n            length = len(lst[i])\n    return length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length = len(lst[0])\n    for i in lst:\n        if len(i) < min_length:\n            min_length = len(i)\n    return min_length\n"
    },
    {
        "number": 95,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min_Length(lst):  \n    '''\n    Write a python function to find the length of the smallest list in a list of lists.\n    '''\n    min_length=[]\n    for i in lst:\n        min_length.append(len(i))\n    return min(min_length)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1,n):\n        if n % i == 0:\n            divisors.append(i)\n    return divisors\n    \n    \ndef primes(n):\n    '''\n    Write a python function to check whether a given integer is prime or not.\n    '''\n    primes = []\n    for i in range(2,n):\n        if n%i == 0:\n            primes.append(i)\n    return len(primes) == 0\n    \n    \ndef gcd(m,n):\n    '''\n    Write a python function to find the greatest common divisor of two positive integers.\n    '''\n    if n == 0:\n        return m\n    else:\n        return gcd(n,m%n)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    div = 1\n    for i in range(1,n+1):\n        if n%i == 0:\n            div+=1\n    return div\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    divisors = []\n    for i in range(1, n):\n        if n % i == 0:\n            divisors.append(i)\n    return len(divisors)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i==0:\n            count+=1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    num_divisors = 0\n    if n == 1:\n        return num_divisors\n    else:\n        for i in range(1,n):\n            if n % i == 0:\n                num_divisors += 1\n        return num_divisors\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    if n == 0:\n        return 1\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    c = 0\n    for i in range(1,n+1):\n        if n % i == 0:\n            c += 1\n    return c\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    for i in range(2, n//2 + 1):\n        if n % i == 0:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 0\n    for i in range(1,n):\n        if n%i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 96,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisor(n):\n    '''\n    Write a python function to find the number of divisors of a given integer.\n    '''\n    count = 1\n    if n == 0:\n        return 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for i in range(len(list1)):\n        freq[list1[i]] = freq.get(list1[i],0) + 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq_dict = {}\n    for ele in list1:\n        if ele in freq_dict:\n            freq_dict[ele] += 1\n        else:\n            freq_dict[ele] = 1\n    return freq_dict\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for item in list1:\n        if item in freq.keys():\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    \n    #create dictionary\n    freq_dict = {}\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    #initialise a dictionary\n    d = {}\n    #loop through the list\n    for e in list1:\n        #for each element, loop through the list\n        for x in e:\n            #if the element is in the dictionary already, increment it\n            if x in d:\n                d[x] += 1\n            #if it isn't in the dictionary, add it as a new entry\n            else:\n                d[x] = 1\n    #return the dictionary\n    return d\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dict1 = {}\n    for element in list1:\n        if element not in dict1:\n            dict1[element] = 1\n        else:\n            dict1[element] += 1\n    return dict1\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    freq = {}\n    for el in list1:\n        for e in el:\n            if e in freq:\n                freq[e] += 1\n            else:\n                freq[e] = 1\n    return freq\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    res = {}\n    for sublist in list1:\n        for item in sublist:\n            if item in res:\n                res[item] += 1\n            else:\n                res[item] = 1\n    return res\n"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    lst=[]\n    freq={}\n    for i in range(len(list1)):\n        for j in range(len(list1[i])):\n            if list1[i][j] not in freq:\n                freq[list1[i][j]]=1\n            else:\n                freq[list1[i][j]]+=1\n            lst.append(list1[i][j])\n    print(freq)\n    return lst\n    \ndef get_sub_lists(list1):\n    '''\n    Write a function to find all sub-lists of the given list.\n    '''\n    return [[i,j] for i in range(len(list1)) for j in range(i+1,len(list1))]\n    \ndef get_leaves(tree):\n    '''\n    Write a function to find all the leaf nodes in a tree. A leaf node is a node which has no children.\n    '''\n    leaves=[]\n    for i in tree:\n        if i[0]==i[1]:\n            leaves.append(i)\n    return leaves\n    \ndef get_universes(tree):\n    '''\n    Write a function to find all the universes in a tree. A universe is a set of nodes which are not in the same subtree.\n    '''\n    universes=[]\n    for i in tree:\n        if i[0]!=i[1]:\n            universes.append(i)\n    return universes\n    \ndef get_branches(tree):\n    '''\n    Write a function to find all the branches in a tree. A branch is a node which has two children.\n    '''\n    branches=[]\n    for i in tree:\n        if i[0]!=i[1]:\n            branches.append(i)\n    return branches\n    \ndef get_decision_nodes(tree):\n    '''\n    Write a function to find all the decision nodes in a tree. A decision node is a node which has exactly 2 children.\n    '''\n    decision_nodes=[]\n    for i in tree:\n        if len(i)==2:\n            decision_nodes.append(i)\n    return decision_nodes\n    \ndef get_nodes_in_tree(tree,node):\n    '''\n    Write a function to get all nodes in a tree which are part of the given node.\n    '''\n    nodes=[]\n    for i in tree:\n        if i[0]==node or i[1]==node:\n            nodes.append(i)\n    return nodes\n    \ndef get_siblings(tree,node):\n    '''\n    Write a function to get all siblings of a given node in a tree.\n    '''\n    siblings=[]\n    for i in tree:\n        if i[0]==node and i[1]==node:\n            siblings.append(i)\n        elif i[0]==node:\n            siblings.append([i[1],i[0]])\n        elif i[1]==node:\n            siblings.append([i[0],i[1]])\n    return siblings\n    \ndef get_parent_nodes(tree,node):\n    '''\n    Write a function to get all parents of a given node in a tree.\n    '''\n    parents=[]\n    for i in tree:\n        if i[0]==node or i[1]==node:\n            parents.append(i)\n    return parents\n    \ndef get_children_nodes(tree,node):\n    '''\n    Write a function to get all children of a given node in a tree.\n    '''\n    children=[]\n    for i in tree:\n        if i[0]==node or i[1]==node:\n            children.append(i)\n    return children\n    \ndef get_descendants(tree,node):\n    '''\n    Write a function to get all descendants of a given node in a tree.\n    '''\n    descendants=[]\n    for i in tree:\n        if i[0]==node:\n            descendants.append(i)\n        if i[1]==node:\n            descendants.append(i)\n    return descendants\n    \ndef get_descendants_not_in_tree(tree,node):\n    '''\n    Write a function to get all descendants of a given node which are not descendants of any other node in a tree.\n    '''\n    descendants=get_descendants(tree,node)\n    descendants_in_tree=get_descendants_in_tree(tree,node)\n    descendants_not_in_tree=[]\n    for i in descendants:\n        if not i in descendants_in_tree:\n            descendants_not_in_tree.append(i)\n    return descendants_not_in_tree\n    \ndef get_descendants_in_tree(tree,node):\n    '''\n    Write a function to get all descendants of a given node which are descendants of any other node in a tree.\n    '''\n    descendants=[]\n    for i in tree:\n        if i[0]==node:\n            descendants.append(i)\n        if i[1]==node:\n            descendants.append(i)\n    return descendants\n    \ndef get_ancestors(tree,node):\n    '''\n    Write a function to get all ancestors of a given node in a tree.\n    '''\n    ancestors=[]\n    for i in tree:\n        if i[0]==node:\n            ancestors.append(i)\n    return ancestors\n    \ndef get_ancestors_not_in_tree(tree,node):\n    '''\n    Write a function to get all ancestors of a given node which are not ancestors of any other node in a tree.\n    '''\n    ancestors=get_ancestors(tree,node)\n    ancestors_in_tree=get_ancestors_in_tree(tree,node)\n    ancestors_not_in_tree=[]\n    for i in ancestors:\n        if not i in ancestors_in_tree:\n            ancestors_not_in_tree.append(i)\n    return ancestors_not_in_tree\n    \ndef get_ancestors_in_tree(tree,node):\n    '''\n    Write a function to get all ancestors of a given node which are ancestors of any other node in a tree.\n    '''\n    ancestors=[]\n    for i in tree:\n        if i[0]==node:\n            ancestors.append(i)\n    return ancestors\n    \ndef get_paths_to_leaves(tree,node):\n    '''\n    Write a function to get all paths to leaves in a tree.\n    '''\n    paths_to_leaves=[]\n    for i in tree:\n        if i[0]==node:\n            paths_to_leaves.append(i)\n        elif i[1]==node:\n            paths_to_leaves.append(i)\n    return paths_to_leaves\n    \ndef get_paths_to_leaves_not_in_tree(tree,node):\n    '''\n    Write a function to get all paths to leaves in a tree which are not descendants of any other node in a tree.\n    '''\n    paths_to_leaves_not_in_tree=get_paths_to_leaves(tree,node)\n    paths_to_leaves_not_in_tree_in_tree=get_paths_to_leaves_not_in_tree_in_tree(tree,node)\n    paths_to_leaves_not_in_tree_in_tree_not_in_tree=[]\n    for i in paths_to_leaves_not_in_tree:\n        if not i in paths_to_leaves_not_in_tree_in_tree:\n            paths_to_leaves_not_in_tree_in_tree_not_in_tree.append(i)\n    return paths_to_leaves_not_in_tree_not_in_tree\n    \ndef get_paths_to_leaves_not_in_tree_in_tree(tree,node):\n    '''\n    Write a function to get all paths to leaves in a tree which are not descendants of any other node in a tree.\n    '''\n    path"
    },
    {
        "number": 97,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency_lists(list1):\n    '''\n    Write a function to find frequency of each element in a flattened list of lists, returned in a dictionary.\n    '''\n    dic = {}\n    for i in list1:\n        for j in i:\n            if j in dic:\n                dic[j] += 1\n            else:\n                dic[j] = 1\n    return dic\nprint(frequency_lists([]))\nprint(frequency_lists([[]]))\nprint(frequency_lists([[1],[2],[3]]))\nprint(frequency_lists([[1,2,3],[4],[5,6,7]]))\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    total = total/len(numbers)\n    return total\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for n in numbers:\n        result *= n\n    \n    return result\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for x in numbers:\n        total *= x\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied_num = 1\n    for number in numbers:\n        multiplied_num *= number\n    return multiplied_num / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    # your code here\n    multiply = 1\n    for num in numbers:\n        multiply = multiply * num\n    return multiply / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    result = 1\n    for number in numbers:\n        result *= number\n    return result / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    \n    \n    def multiply_num_list(list_of_numbers):\n        result = 1\n        for i in list_of_numbers:\n            result = result * i\n        return result\n    \n    def divide_num_list(list_of_numbers):\n        result = 1\n        for i in list_of_numbers:\n            result = result * i\n        return result / len(list_of_numbers)\n        \n    return multiply_num_list(numbers), divide_num_list(numbers)\n    \n    \ndef add_num(numbers):\n    '''\n    Write a function to add all the numbers in a list and divide with the length of the list.\n    '''\n    def add_num_list(list_of_numbers):\n        result = 0\n        for i in list_of_numbers:\n            result = result + i\n        return result\n    return add_num_list(numbers)\n    \n    \ndef multi_list(list_1, list_2):\n    result = []\n    for i in list_1:\n        result.append(i)\n    for j in list_2:\n        result.append(j)\n    return result\n    \n    \ndef sum_list(list_1, list_2):\n    result = []\n    for i in list_1:\n        result.append(i)\n    for j in list_2:\n        result.append(j)\n    return result\n    \n    \ndef length_list(list_1):\n    result = 0\n    for i in list_1:\n        result = result + 1\n    return result\n    \n    \ndef reverse_list(list_1):\n    list_1 = list_1[::-1]\n    return list_1\n    \n    \ndef factorial(n):\n    result = 1\n    for i in range(1, n + 1):\n        result = result * i\n    return result\n    \n    \ndef is_odd(n):\n    result = True\n    if n % 2 == 0:\n        result = False\n    return result\n    \n    \ndef is_divisible(n, divisor):\n    result = True\n    if n % divisor!= 0:\n        result = False\n    return result\n    \n    \ndef factorial_recursive(n):\n    if n == 1:\n        return 1\n    else:\n        return n * factorial_recursive(n - 1)\n    \n    \ndef count_evens(numbers):\n    count = 0\n    for i in numbers:\n        if i % 2 == 0:\n            count = count + 1\n    return count\n    \n    \ndef reverse_evens(numbers):\n    result = []\n    for i in numbers:\n        if i % 2!= 0:\n            result.append(i)\n    result.reverse()\n    return result\n    \n    \ndef main():\n    print(multiply_num([1, 2, 3, 4, 5]))\n    print(multiply_num([1, 2, 3]))\n    print(multiply_num([]))\n    \n    print(divide_num([1, 2, 3, 4, 5]))\n    print(divide_num([1, 2, 3]))\n    print(divide_num([1]))\n    \n    print(add_num([1, 2, 3, 4, 5]))\n    print(add_num([1, 2, 3]))\n    print(add_num([1]))\n    \n    print(multi_list([1, 2, 3], [4, 5, 6]))\n    print(multi_list([1, 2, 3], []))\n    print(multi_list([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]))\n    \n    print(sum_list([1, 2, 3], [4, 5, 6]))\n    print(sum_list([1, 2, 3], []))\n    print(sum_list([\"a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]))\n    \n    print(length_list([1, 2, 3, 4, 5]))\n    print(length_list([]))\n    print(length_list([\"a\", \"b\", \"c\", \"d\"]))\n    \n    print(reverse_list([1, 2, 3, 4, 5]))\n    print(reverse_list([]))\n    print(reverse_list([\"a\", \"b\", \"c\", \"d\"]))\n    \n    print(factorial(5))\n    print(factorial(10))\n    print(factorial(0))\n    \n    print(is_odd(5))\n    print(is_odd(10))\n    print(is_odd(0))\n    \n    print(is_divisible(5, 2))\n    print(is_divisible(10, 2))\n    print(is_divisible(2, 2))\n    \n    print(factorial_recursive(5))\n    print(factorial_recursive(10))\n    print(factorial_recursive(0))\n    \n    print(count_evens([2, 4, 6, 8, 10, 12]))\n    print(count_evens([2, 4, 6]))\n    print(count_evens([1]))\n    \n    print(reverse_evens([2, 4, 6, 8, 10, 12]))\n    print(reverse_evens([2, 4, 6]))\n    print(reverse_evens([1]))\n    \n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    total = 1\n    for num in numbers:\n        total *= num\n    return total / len(numbers)\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    print(f\"The multiplication of the numbers in a list is {multiply_num.__doc__}\")\n"
    },
    {
        "number": 98,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_num(numbers):  \n    '''\n    Write a function to multiply all the numbers in a list and divide with the length of the list.\n    '''\n    multiplied = 1\n    for n in numbers:\n        multiplied *= n\n    return multiplied / len(numbers)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return '{0:b}'.format(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    binary_number = ''\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n < 0: \n        return '-' + decimal_to_binary(-n)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return ''\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    return \"{0:b}\".format(n)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    result = ''\n    while n > 0:\n        result = str(n%2) + result\n        n = n//2\n    return result\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    bin_string = ''\n    while n!= 0:\n        if n % 2 == 1:\n            bin_string = '1' + bin_string\n        else:\n            bin_string = '0' + bin_string\n        n = int(n/2)\n    return bin_string\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    if n == 0:\n        return '0'\n    num = n%2\n    return str(num) + decimal_to_binary(n//2)\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    d = 0\n    s = ''\n    while n > 0:\n        d = n % 2\n        s = str(d) + s\n        n = n//2\n    return s\n"
    },
    {
        "number": 99,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def decimal_to_binary(n): \n    '''\n    Write a function to convert the given decimal number to its binary equivalent, represented as a string with no leading zeros.\n    '''\n    s = str(bin(n))[2:]\n    return '0'*(8-len(s))+s\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    for i in range(len(s)-1,0,-1):\n        if s[i] == '0' or s[i] == '1' or s[i] == '2':\n            continue\n        else:\n            s = s[:i]+s[i+1:]\n            break\n    return int(s)\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # todo: write this in a way that fits our needs\n    # let's try to do the easy case first\n    return int(str(num)[::-1])\n    \n    \ndef test_next_smallest_palindrome():\n    print(\"Testing next_smallest_palindrome()...\", end=\"\")\n    assert(next_smallest_palindrome(121) == 121)\n    assert(next_smallest_palindrome(12) == 21)\n    assert(next_smallest_palindrome(11) == 21)\n    assert(next_smallest_palindrome(13) == 31)\n    assert(next_smallest_palindrome(23) == 33)\n    assert(next_smallest_palindrome(33) == 33)\n    assert(next_smallest_palindrome(10) == 11)\n    assert(next_smallest_palindrome(101) == 1001)\n    print(\"Passed!\")\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num == 0: return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # not interested in number 1\n    if num < 2:\n        return num\n    # if not even, no palindrome exists\n    if num % 2 == 0:\n        return num\n    # if even, its smallest palindrome is odd, so multiply by 3\n    else:\n        num = num * 3\n        # now find the next smallest palindrome\n        while not is_palindrome(num):\n            num = num + 1\n        # if even, return number\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # write your code here\n    if num == 1:\n        return 2\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #First, if the number is a palindrome, return the number.\n    if is_palindrome(num):\n        return num\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    #method 1\n    # if num < 100:\n    #     return num+1\n    # # if num >= 100 and num <= 999:\n    # #     return num-1\n    # else:\n    #     i=num\n    #     while(i>=1000):\n    #         i=i/10\n    #     return int(str(i)+str(num-i))\n    \n    # method 2\n    if num < 100:\n        return num+1\n    elif num >= 100 and num <= 999:\n        return num-1\n    else:\n        i=num\n        while(i>=1000):\n            i=i/10\n        return int(str(i)+str(num-i))\n    \ndef next_greatest_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    #method 1\n    # if num < 100:\n    #     return num+1\n    # # if num >= 100 and num <= 999:\n    # #     return num-1\n    # else:\n    #     i=num\n    #     while(i>=1000):\n    #         i=i/10\n    #     return int(str(i)+str(num-i))\n    \n    # method 2\n    if num < 100:\n        return num+1\n    elif num >= 100 and num <= 999:\n        return num-1\n    else:\n        i=num\n        while(i>=1000):\n            i=i/10\n        return int(str(i)+str(num-i))\n    \ndef next_larger_palindrome(num):\n    '''\n    Write a function to find the next largest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 100:\n        return num+1\n    elif num >= 100 and num <= 999:\n        return num-1\n    else:\n        i=num\n        while(i>=1000):\n            i=i/10\n        return int(str(i)+str(num-i))\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    # write your code here\n    num_list = list(str(num))\n    size = len(num_list)\n    max_size = size - 1\n    start_idx = size - 1\n    while start_idx > 0:\n        if num_list[start_idx] == num_list[max_size]:\n            max_size = max_size - 1\n        else:\n            break\n        start_idx = start_idx - 1\n    if max_size == 0:\n        return num\n    while start_idx < size:\n        if num_list[start_idx] == num_list[0]:\n            start_idx = start_idx + 1\n            continue\n        else:\n            break\n    if start_idx == size:\n        return num\n    start_idx = start_idx + 1\n    while start_idx < size:\n        if num_list[start_idx] == num_list[0]:\n            start_idx = start_idx + 1\n            continue\n        else:\n            break\n    if start_idx == size:\n        return num\n    else:\n        return num_list[0] + num_list[start_idx]\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    if num < 10:\n        return num\n    else:\n        #return next_smallest_palindrome(num//10) * 10 + num % 10\n        return next_smallest_palindrome(num//10) * 10 + num % 10\n"
    },
    {
        "number": 100,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys\ndef next_smallest_palindrome(num):\n    '''\n    Write a function to find the next smallest palindrome of a specified integer, returned as an integer.\n    '''\n    s = str(num)\n    if len(s) == 1:\n        return num\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    def binary_search(arr, start, end, k):\n        if start > end:\n            return -1\n        mid = (start+end)//2\n        if arr[mid] == k:\n            return mid\n        elif arr[mid] > k:\n            return binary_search(arr, start, mid-1, k)\n        else:\n            return binary_search(arr, mid+1, end, k)\n    \n    return binary_search(arr, 0, len(arr)-1, k)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    for i in range(1, len(arr)):\n        if arr[i] > arr[i-1]:\n            arr[i], arr[i-1] = arr[i-1], arr[i]\n    return arr[k-1]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if not arr:\n        return\n    size = len(arr)\n    if k < size:\n        first = 0\n        last = size - 1\n        while first <= last:\n            mid = (first + last) // 2\n            if mid + 1 == k:\n                return arr[mid]\n            if mid + 1 < k:\n                first = mid + 1\n            else:\n                last = mid - 1\n    return\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    if k <= len(arr):\n        return arr[k-1]\n    else:\n        return None\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # if len(arr)==0: return None\n    # if k>=len(arr): return None\n    # if k==1: return arr[0]\n    # left = 0\n    # right = len(arr)-1\n    # while left<=right:\n    #     middle = left + (right - left) // 2\n    #     if arr[middle] == k-1:\n    #         return arr[middle]\n    #     if arr[middle]<k:\n    #         left = middle+1\n    #     elif arr[middle]>k:\n    #         right = middle-1\n    # return None\n    if len(arr)==0: return None\n    # print(arr)\n    # if k>len(arr): return None\n    # if k==1: return arr[0]\n    # left = 0\n    # right = len(arr)-1\n    # while left<=right:\n    #     middle = left + (right - left) // 2\n    #     if arr[middle] == k-1:\n    #         return arr[middle]\n    #     if arr[middle]<k:\n    #         left = middle+1\n    #     elif arr[middle]>k:\n    #         right = middle-1\n    # return None\n    \n    if len(arr) == 1:\n        if arr[0]==k:\n            return arr[0]\n        return None\n    if len(arr) == 2:\n        if arr[0] == k:\n            return arr[1]\n        if arr[1] == k:\n            return arr[0]\n        return None\n    mid = len(arr) // 2\n    if arr[mid]==k:\n        return arr[mid]\n    if arr[mid]>k:\n        return kth_element(arr[:mid],k)\n    if arr[mid]<k:\n        return kth_element(arr[mid+1:],k-mid-1)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # O(n)\n    if k > len(arr):\n        return -1\n    \n    left = 0\n    right = len(arr) - 1\n    \n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] == k - 1:\n            return arr[mid]\n        elif arr[mid] < k - 1:\n            left = mid + 1\n        else:\n            right = mid - 1\n    \n    return arr[left]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low = 0\n    high = len(arr)-1\n    mid = 0\n    while low <= high:\n        mid = low + (high-low)//2\n        if arr[mid] == k-1:\n            return arr[mid]\n        elif arr[mid] < k-1:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return arr[mid]\n    \narr = [1,2,3,4,5,6,7,8,9]\nk = 1\nprint(kth_element(arr, k)"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    # base case\n    if len(arr) == 0:\n        return None\n    # recursion\n    else:\n        mid = len(arr) // 2\n        if k == mid:\n            return arr[mid]\n        elif k < mid:\n            return kth_element(arr[:mid], k)\n        else:\n            return kth_element(arr[mid + 1:], k - mid - 1)\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    low, high = 0, len(arr) - 1\n    while low <= high:\n        mid = (low + high) // 2\n        if arr[mid] < arr[high]:\n            high = mid - 1\n        elif arr[mid] > arr[high]:\n            low = mid + 1\n        else:\n            if mid == k - 1:\n                return arr[high]\n            if k > mid:\n                low = mid + 1\n            else:\n                high = mid - 1\n    return arr[low]\n"
    },
    {
        "number": 101,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def kth_element(arr, k):\n    '''\n    Write a function to find the kth element in the given array using 1-based indexing.\n    '''\n    \n    for i in range(k):\n        if i < len(arr):\n            return arr[i]\n    \n    return None\n    \n    \nif __name__ == '__main__':\n    \n    # Given array and k\n    arr = [3, 6, 1, 2, 5, 4]\n    k = 4\n    \n    print(kth_element(arr, k)"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.title() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    s1 = word.title()\n    s2 = s1.replace(\"_\", \" \")\n    s3 = s2.replace(\" \", \"\")\n    s4 = s3.replace(\"-\", \"\")\n    return s4"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word == None or len(word) == 0:\n        return word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    words = word.split('_')\n    words = ''.join(words)\n    return words.title()\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    return ''.join(x.capitalize() for x in word.split('_'))\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split(\"_\")\n    word = \"\".join(map(str.capitalize,word))\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if word:\n        words = word.split('_')\n        return words[0] + ''.join(x.title() for x in words[1:])\n    else:\n        return None\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    word = word.split('_')\n    word = word[0] + ''.join(map(str.capitalize,word[1:]))\n    return word\n"
    },
    {
        "number": 102,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def snake_to_camel(word):\n    '''\n    Write a function to convert a snake case string to camel case string.\n    '''\n    if '_' not in word:\n        return word\n    else:\n        return word[0].lower()+word[1:]"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    a = [[0 for i in range(n)] for j in range(n)] \n    for i in range(1, n-1): \n        a[0][i] = 1\n    for j in range(1, m-1): \n        a[j][n-1] = 1\n    for i in range(1, n-1): \n        for j in range(1, m-1): \n            a[j][i] = (a[j][i-1] + a[j-1][i] + a[j][i+1] + a[j+1][i]) % 2\n    return a[1][n-2] \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    return 2*m - n\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n <= 1:\n        return 1\n    if n >= m:\n        return 1\n    c = eulerian_num(n-1, m) + eulerian_num(n, m-1)\n    return c\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Base case\n    if n == 1 and m == 1: \n        return 1\n    # Recursion\n    else: \n        return eulerian_num(n - 1, m) + eulerian_num(n, m - 1) \n \ndef eulerian_circuit(n, m): \n    '''\n    Write a function to find Eulerian circuit in a graph G. \n    '''\n    # Base case\n    if n == 1 and m == 1: \n        return 1\n    # Recursion\n    else: \n        return eulerian_circuit(n - 1, m) + eulerian_circuit(n, m - 1) \n \ndef eulerian_path(G, start): \n    '''\n    Write a function to find Eulerian path in a graph G. \n    '''\n    # Base case\n    if start == 0 and len(G) == 0: \n        return True\n    # Recursion\n    else: \n        return eulerian_path(G, (start - 1) % len(G)) or eulerian_path(G, (start + 1) % len(G)) \n \ndef Eulerian_Graph(n): \n    '''\n    Write a function to generate Eulerian Graph in which the nodes are numbered 0 to n-1. \n    '''\n    # Base case\n    if n == 1: \n        return [[1]]\n    # Recursion\n    else: \n        a = Eulerian_Graph(n - 1) \n        b = [[1]] \n        for i in a: \n            i.append(1) \n            b.append(i) \n        return b \n \ndef Is_Eulerian_Graph(G): \n    '''\n    Write a function to check whether G is Eulerian Graph. \n    '''\n    # Base case\n    if len(G) == 0: \n        return True\n    # Recursion\n    else: \n        return (Is_Eulerian_Graph(G[0: len(G) - 1]) and Is_Eulerian_Graph(G[len(G) - 1: ])) \n \ndef Eulerian_Paths(G, s): \n    '''\n    Write a function to find all Eulerian paths in a graph G. \n    '''\n    # Base case\n    if s == 0 and len(G) == 0: \n        return [[1]]\n    # Recursion\n    else: \n        a = Eulerian_Paths(G, (s - 1) % len(G)) \n        b = [[1]] \n        for i in a: \n            i.append(1) \n            b.append(i) \n        return b \n \ndef Eulerian_Path(G, start): \n    '''\n    Write a function to find Eulerian path in a graph G. \n    '''\n    # Base case\n    if start == 0 and len(G) == 0: \n        return True\n    # Recursion\n    else: \n        return Eulerian_Path(G, (start - 1) % len(G)) or Eulerian_Path(G, (start + 1) % len(G)) \n \ndef Eulerian_Path_Recursive(G, start, path, ans): \n    '''\n    Write a function to find Eulerian paths in a graph G. \n    '''\n    # Base case\n    if start == 0 and len(G) == 0: \n        path.append(1) \n        ans.append(path) \n        return\n    # Recursion\n    if len(G) == 0: \n        return\n    if len(G) == 1: \n        path.append(1) \n        ans.append(path) \n        return\n    Eulerian_Path_Recursive(G[0: len(G) - 1], (start - 1) % len(G), path + [1], ans) \n    Eulerian_Path_Recursive(G[len(G) - 1: ], (start + 1) % len(G), path + [2], ans) \n \ndef Eulerian_Paths_Recursive(G, start, ans): \n    '''\n    Write a function to find Eulerian paths in a graph G. \n    '''\n    # Base case\n    if start == 0 and len(G) == 0: \n        return [[1]]\n    # Recursion\n    if len(G) == 0: \n        return\n    if len(G) == 1: \n        ans.append([1]) \n        return\n    Eulerian_Paths_Recursive(G[0: len(G) - 1], (start - 1) % len(G), ans + [[1]]) \n    Eulerian_Paths_Recursive(G[len(G) - 1: ], (start + 1) % len(G), ans + [[2]]) \n \ndef Eulerian_path_Is_Eulerian(G): \n    '''\n    Write a function to check whether G is Eulerian path. \n    '''\n    # Base case\n    if len(G) == 0: \n        return True\n    # Recursion\n    else: \n        return (Eulerian_path_Is_Eulerian(G[0: len(G) - 1]) and Eulerian_path_Is_Eulerian(G[len(G) - 1: ])) \n \ndef Eulerian_path_Is_Eulerian_Recursive(G, s): \n    '''\n    Write a function to check whether G is Eulerian path. \n    '''\n    # Base case\n    if s == 0 and len(G) == 0: \n        return True\n    # Recursion\n    else: \n        return (Eulerian_path_Is_Eulerian_Recursive(G, (s - 1) % len(G)) and Eulerian_path_Is_Eulerian_Recursive(G, (s + 1) % len(G))) \n \ndef Eulerian_path_Is_Eulerian_Recursive_2(G, start): \n    '''\n    Write a function to check whether G is Eulerian path. \n    '''\n    # Base case\n    if start == 0 and len(G) == 0: \n        return True\n    # Recursion\n    if len(G) == 0: \n        return\n    if len(G) == 1: \n        return True\n    return (Eulerian_path_Is_Eulerian_Recursive(G[0: len(G) - 1], (start - 1) % len(G)) and Eulerian_path_Is_Eulerian_Recursive(G[len(G) - 1: ], (start + 1) % len(G))) \n \ndef Eulerian_path_Is_Eulerian_Recursive_3(G, start, ans): \n    '''\n    Write a function to check whether G is Eulerian path. \n    '''\n    # Base case\n    if start == 0 and len(G) == 0: \n        return True\n    # Recursion\n    if len(G) == 0: \n        return\n    if len(G) == 1: \n        ans.append(1) \n        return\n    return (Eulerian_path_Is_Eulerian_Recursive_3(G[0: len(G) - 1], (start - 1) % len(G), ans + [1]) and Eulerian_path_Is_Eulerian_Recursive_3(G[len(G) - 1: ], (start + 1) % len(G), ans + [2])) \n \ndef Eulerian_path_Is_Eulerian_Recursive_4(G, start, ans): \n    '''\n    Write a function to check whether G is Eulerian path. \n    '''\n    # Base case\n    if start == 0 and len(G) == 0: \n        return True\n    # Recursion\n    if len(G) == 0: \n        return\n    if len(G) == 1: \n        ans.append(1) \n        return\n    a = Eulerian_path_Is_Eulerian_Recursive(G[0: len(G) - 1], (start - 1) % len(G), ans + ["
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    \n    a = [[0 for _ in range(m)] for _ in range(n)]\n    a[0][0] = 1\n    \n    for i in range(n):\n        for j in range(m):\n            if i-1>=0:\n                a[i][j] += a[i-1][j]\n            if j-1>=0:\n                a[i][j] += a[i][j-1]\n    \n    return a[n-1][m-1]\n    \n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = []\n    for _ in range(m):\n        res.append('0')\n    res = res[::-1]\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    if n!= 0 and m!= 0:\n        if n % 2 == 1:\n            return eulerian_num(n - 1, m) + eulerian_num(n - 1, m + 1)\n        else:\n            return eulerian_num(n - 1, m)\n    else:\n        return n\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    res = n * (n-1)\n    if n < m:\n        return res\n    return res - m\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    ans = 0\n    if n % 2!= 0:\n        ans = eulerian_num(n - 1, m + 1)\n    else:\n        ans = eulerian_num(n // 2, m + 2)\n    return ans + m + 1\n"
    },
    {
        "number": 103,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def eulerian_num(n, m): \n    '''\n    Write a function to find the Eulerian number a(n, m).\n    '''\n    # Time O(log(n) * log(m)) | Space O(1)\n    # def find_pairs(m):\n    #     pairs = 0\n    #     for i in range(m):\n    #         if(n[i] == 1):\n    #             n[i] = 0\n    #         else:\n    #             pairs += 1\n    #     return pairs\n    #\n    # def find_winding(n, m):\n    #     visited = 0\n    #     for i in range(m):\n    #         if(n[i] == 1):\n    #             n[i] = 0\n    #             visited += 1\n    #         else:\n    #             visited -= 1\n    #     return visited\n    #\n    # def is_matching(n, m, k):\n    #     if(n[k] == m[k]):\n    #         n[k] = 0\n    #         m[k] = 0\n    #     else:\n    #         n[k] = 1\n    #         m[k] = 0\n    #\n    # def create_matrix(n, m):\n    #     matrix = []\n    #     for i in range(n):\n    #         matrix.append([])\n    #         for j in range(n):\n    #             matrix[i].append(0)\n    #     return matrix\n    #\n    # def is_matching_first(matrix, n, m, k):\n    #     if(k == 0):\n    #         if(matrix[k][k] == 0 and matrix[k][k + 1] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k][k + 1] = 1\n    #             return True\n    #     else:\n    #         if(matrix[k][k] == 0 and matrix[k + 1][k] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k + 1][k] = 1\n    #             return True\n    #\n    # def is_matching_second(matrix, n, m, k):\n    #     if(k == n - 1):\n    #         if(matrix[k][k] == 0 and matrix[k][k - 1] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k][k - 1] = 1\n    #             return True\n    #     else:\n    #         if(matrix[k][k] == 0 and matrix[k + 1][k] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k + 1][k] = 1\n    #             return True\n    #\n    # def is_matching_third(matrix, n, m, k):\n    #     if(k == 0):\n    #         if(matrix[k][k] == 0 and matrix[k][k + 1] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k][k + 1] = 1\n    #             return True\n    #     else:\n    #         if(matrix[k][k] == 0 and matrix[k + 1][k] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k + 1][k] = 1\n    #             return True\n    #\n    # def is_matching_fourth(matrix, n, m, k):\n    #     if(k == 0):\n    #         if(matrix[k][k] == 0 and matrix[k][k + 1] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k][k + 1] = 1\n    #             return True\n    #     else:\n    #         if(matrix[k][k] == 0 and matrix[k + 1][k] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k + 1][k] = 1\n    #             return True\n    #\n    # def is_matching_fifth(matrix, n, m, k):\n    #     if(k == 0):\n    #         if(matrix[k][k] == 0 and matrix[k][k + 1] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k][k + 1] = 1\n    #             return True\n    #     else:\n    #         if(matrix[k][k] == 0 and matrix[k + 1][k] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k + 1][k] = 1\n    #             return True\n    #\n    # def is_matching_sixth(matrix, n, m, k):\n    #     if(k == 0):\n    #         if(matrix[k][k] == 0 and matrix[k][k + 1] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k][k + 1] = 1\n    #             return True\n    #     else:\n    #         if(matrix[k][k] == 0 and matrix[k + 1][k] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k + 1][k] = 1\n    #             return True\n    #\n    # def is_matching_seventh(matrix, n, m, k):\n    #     if(k == 0):\n    #         if(matrix[k][k] == 0 and matrix[k][k + 1] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k][k + 1] = 1\n    #             return True\n    #     else:\n    #         if(matrix[k][k] == 0 and matrix[k + 1][k] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k + 1][k] = 1\n    #             return True\n    #\n    # def is_matching_eighth(matrix, n, m, k):\n    #     if(k == 0):\n    #         if(matrix[k][k] == 0 and matrix[k][k + 1] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k][k + 1] = 1\n    #             return True\n    #     else:\n    #         if(matrix[k][k] == 0 and matrix[k + 1][k] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k + 1][k] = 1\n    #             return True\n    #\n    # def is_matching_ninth(matrix, n, m, k):\n    #     if(k == 0):\n    #         if(matrix[k][k] == 0 and matrix[k][k + 1] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k][k + 1] = 1\n    #             return True\n    #     else:\n    #         if(matrix[k][k] == 0 and matrix[k + 1][k] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k + 1][k] = 1\n    #             return True\n    #\n    # def is_matching_tenth(matrix, n, m, k):\n    #     if(k == 0):\n    #         if(matrix[k][k] == 0 and matrix[k][k + 1] == 0):\n    #             matrix[k][k] = 1\n    #             matrix[k][k + 1] = 1\n    #             return True\n    "
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    pass\n    print(\"Original Input: \", input_list)\n    input_list.sort(key=len)\n    for i in range(len(input_list)):\n        input_list[i].sort()\n        print(\"Sublist {}: {}\".format(i, input_list[i]))\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # create a dictonary with the element and sublist id\n    output_dict = {}\n    for i in range(len(input_list)):\n        for j in range(len(input_list[i])):\n            key = input_list[i][j]\n            if key in output_dict.keys():\n                output_dict[key].append(i)\n            else:\n                output_dict[key] = [i]\n    # sort each sublist\n    for key, value in output_dict.items():\n        value.sort()\n        # put the sorted list back into the dictionary\n        output_dict[key] = output_dict.pop(key)\n        for idx in range(len(value)):\n            output_dict[key][idx] = input_list[value[idx]]\n    return output_dict\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Your code goes here\n    for i in range(len(input_list)):\n        for j in range(len(input_list) - i - 1):\n            if input_list[j][0] > input_list[j + 1][0]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n            if input_list[j][0] < input_list[j + 1][0]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n            if input_list[j][1] > input_list[j + 1][1]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n            if input_list[j][1] < input_list[j + 1][1]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n            if input_list[j][2] > input_list[j + 1][2]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n            if input_list[j][2] < input_list[j + 1][2]:\n                temp = input_list[j]\n                input_list[j] = input_list[j + 1]\n                input_list[j + 1] = temp\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    i = 0\n    while i < len(input_list):\n        i = 0\n        while i < len(input_list[i]):\n            if i == 0:\n                if input_list[i][i] < input_list[i+1][i]:\n                    input_list[i], input_list[i+1] = input_list[i+1], input_list[i]\n            elif i == len(input_list[i]) - 1:\n                if input_list[i][i] > input_list[i+1][i]:\n                    input_list[i], input_list[i+1] = input_list[i+1], input_list[i]\n            else:\n                if input_list[i][i] < input_list[i+1][i]:\n                    input_list[i], input_list[i+1] = input_list[i+1], input_list[i]\n                elif input_list[i][i] > input_list[i+1][i]:\n                    input_list[i], input_list[i+1] = input_list[i+1], input_list[i]\n            i += 1\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    # Initializing the result list to sort the final result\n    result_list = []\n    for i in input_list:\n        result_list.append(sorted(i))\n    return result_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i] = sorted(input_list[i])\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(input_list, key=len)\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(input_list)):\n        input_list[i].sort()\n    return input_list\n"
    },
    {
        "number": 104,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(input_list):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    '''\n    for e in input_list:\n        print(e)\n    '''\n    #input_list = [['c', 'a', 't'], ['a', 'b', 'd'], ['b', 'c', 'e']]\n    sublists = []\n    for i in range(0, len(input_list)):\n        sublist = []\n        for j in range(0, len(input_list[i])):\n            sublist.append(input_list[i][j])\n        sublists.append(sublist)\n    sublists = sorted(sublists, key = lambda e: e)\n    new_list = []\n    for sublist in sublists:\n        new_list.append(sublist)\n    return new_list\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for val in lst:\n        if val:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    res = 0\n    for i in lst:\n        if i == True:\n            res += 1\n    return res\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i == True:\n            count += 1\n    return count\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return sum([x == True for x in lst])\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return len([x for x in lst if x == True])"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    return lst.count(True)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count = 0\n    for i in lst:\n        if i:\n            count += 1\n    print(count)\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    res = 0\n    for x in lst:\n        if x:\n            res += 1\n    return res\n"
    },
    {
        "number": 105,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count(lst):   \n    '''\n    Write a python function to count true booleans in the given list.\n    '''\n    count=0\n    for x in lst:\n        if x:\n            count+=1\n    print(count)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_tup[0]\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    #for i in range(len(test_list)):\n    #    test_list[i] = list(test_list[i])\n    #    test_tup[i] = tuple(test_tup[i])\n    #test_tup.extend(test_list)\n    test_tup = test_tup + test_list\n    return test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list = test_list + test_tup\n    print(test_list)\n    return test_list\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    # return a list of both elements\n    return test_list + test_tup\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 106,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_lists(test_list, test_tup):\n    '''\n    Write a function to append the given list to the given tuples.\n    '''\n    for element in test_list:\n        test_tup.append(element)\n    return test_tup\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merged_list = []\n    while len(num1) > 0 or len(num2) > 0 or len(num3) > 0:\n        if len(num1) > 0 and len(num2) > 0 and len(num3) > 0:\n            if num1[0] > num2[0] and num1[0] > num3[0]:\n                merged_list.append(num1.pop(0))\n            elif num2[0] > num3[0]:\n                merged_list.append(num2.pop(0))\n            else:\n                merged_list.append(num3.pop(0))\n        elif len(num2) > 0:\n            merged_list.append(num2.pop(0))\n        elif len(num3) > 0:\n            merged_list.append(num3.pop(0))\n    return merged_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    if num1 == None:\n        return num2\n    if num2 == None:\n        return num3\n    if num3 == None:\n        return num1\n    if num1 <= num2:\n        num1.append(num2)\n        return num1\n    else:\n        num1.append(num3)\n        return num1\n    \ndef merge_k_sorted_lists(lists):\n    '''\n    Write a function to merge k sorted lists.\n    '''\n    merged = None\n    for i in range(len(lists)):\n        if merged == None:\n            merged = merge_sorted_list(lists[i],merged,None)\n        else:\n            merged = merge_sorted_list(merged,lists[i],None)\n    return merged\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    merge=[]\n    \n    i=0\n    j=0\n    k=0\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    pass\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1 + num2 + num3)\ndef merge_sort(n):\n    \"\"\"\n    Write a merge sort function\n    \"\"\"\n    if len(n) <= 1:\n        return n\n    else:\n        mid = len(n) // 2\n        L = merge_sort(n[:mid])\n        R = merge_sort(n[mid:])\n        return merge(L,R)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    while len(num1)!=0 and len(num2)!=0 and len(num3)!=0:\n        if num1[0] < num2[0] and num1[0] < num3[0]:\n            sorted_list.append(num1[0])\n            num1.pop(0)\n        elif num2[0] < num1[0] and num2[0] < num3[0]:\n            sorted_list.append(num2[0])\n            num2.pop(0)\n        else:\n            sorted_list.append(num3[0])\n            num3.pop(0)\n    if len(num1)!=0:\n        for i in num1:\n            sorted_list.append(i)\n    elif len(num2)!=0:\n        for i in num2:\n            sorted_list.append(i)\n    elif len(num3)!=0:\n        for i in num3:\n            sorted_list.append(i)\n    return sorted_list\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    i = j = k = 0\n    l = sorted(num1) + sorted(num2) + sorted(num3)\n    while i<len(l) and j<len(l) and k<len(l):\n        if l[i] <= l[j]:\n            i += 1\n        elif l[j] <= l[k]:\n            j += 1\n        else:\n            l[i], l[j] = l[j], l[i]\n            i += 1\n            j += 1\n    return l\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    return sorted(num1+num2+num3)\n"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    #merge and sort 3 lists\n    return sorted(num1+num2+num3)\n    \n    \n    \ndef create_list(num):\n    '''\n    Write a function that creates a sorted list containing the same values as the given list\n    with the first element of each list being the smallest value.\n    '''\n    #create a list of the first element in each list\n    new_list=[]\n    for i in range(len(num)):\n        new_list.append(num[i][0])\n    return new_list\n    \n    \n    \ndef min_list(num_list):\n    '''\n    Write a function that takes in a list of lists and returns the smallest list in that list.\n    '''\n    #check if list is empty\n    if len(num_list) == 0:\n        return False\n    #get smallest value\n    smallest = num_list[0][0]\n    #find the smallest list\n    for i in range(len(num_list)):\n        if num_list[i][0] < smallest:\n            smallest = num_list[i][0]\n            index = i\n    #return smallest and index\n    return smallest,index\n    \n    \n    \ndef find_index(index_list,value):\n    '''\n    Write a function that takes in a list of indices and a value and returns the index of the given value\n    if the value is in the list.\n    '''\n    #check if value is in list\n    if value in index_list:\n        #get index of value\n        return index_list.index(value)\n    else:\n        return False\n    \n    \n    \ndef binary_search(array,value):\n    '''\n    Write a function that takes in a list and a value and returns the index of the value if the\n    value is in the list. Otherwise it returns the index of the smallest value in the list that is greater\n    than the given value.\n    '''\n    #get length of list\n    n=len(array)\n    #compare value to smallest value\n    if array[0] > value:\n        return 0\n    #compare value to end of list\n    if array[n-1] < value:\n        return n-1\n    #compare value to middle of list\n    middle = int(n/2)\n    if array[middle] > value:\n        return middle\n    #compare value to beginning of list\n    if array[0] < value:\n        return 0\n    #compare value to middle of list\n    if array[middle] < value:\n        return middle+1\n    return middle\n    \n    \n    \ndef binary_search_stub(array,value):\n    '''\n    Write a function that takes in a list and a value and returns the index of the value if the\n    value is in the list. Otherwise it returns the index of the smallest value in the list that is greater\n    than the given value.\n    '''\n    #check if list is empty\n    if len(array) == 0:\n        return False\n    #get value\n    middle = len(array)//2\n    #compare middle value to value\n    if value == array[middle]:\n        return middle\n    #compare value to beginning of list\n    if value < array[0]:\n        return 0\n    #compare value to middle of list\n    if value > array[middle]:\n        return middle+1\n    #compare value to end of list\n    if value > array[-1]:\n        return len(array)\n    return binary_search(array[middle+1:],value)\n    \n    \n    \ndef find_max(array):\n    '''\n    Write a function that takes in a list and returns the maximum value in that list.\n    '''\n    #check if list is empty\n    if len(array) == 0:\n        return False\n    #get the max\n    max = array[0]\n    for i in range(len(array)):\n        if array[i] > max:\n            max = array[i]\n    return max\n    \n    \n    \ndef find_min(array):\n    '''\n    Write a function that takes in a list and returns the minimum value in that list.\n    '''\n    #check if list is empty\n    if len(array) == 0:\n        return False\n    #get the min\n    min = array[0]\n    for i in range(len(array)):\n        if array[i] < min:\n            min = array[i]\n    return min\n    \n    \n    \ndef find_min_and_max(array):\n    '''\n    Write a function that takes in a list and returns the minimum and maximum values in that list.\n    '''\n    #check if list is empty\n    if len(array) == 0:\n        return False\n    #get min and max\n    min = array[0]\n    max = array[0]\n    for i in range(len(array)):\n        if array[i] > max:\n            max = array[i]\n        if array[i] < min:\n            min = array[i]\n    return min,max\n    \n    \n    \ndef count_negative_numbers(array):\n    '''\n    Write a function that takes in a list and returns the number of negative numbers in that list.\n    '''\n    #check if list is empty\n    if len(array) == 0:\n        return False\n    #get count\n    count = 0\n    for i in range(len(array)):\n        if array[i] < 0:\n            count += 1\n    return count\n    \n    \n    \ndef sum_list(array):\n    '''\n    Write a function that takes in a list and returns the sum of all the numbers in the list.\n    '''\n    #check if list is empty\n    if len(array) == 0:\n        return False\n    #get sum\n    sum = 0\n    for i in range(len(array)):\n        sum += array[i]\n    return sum\n    \n    \n    \ndef multiply_list(array):\n    '''\n    Write a function that takes in a list and returns the product of all the numbers in the list.\n    '''\n    #check if list is empty\n    if len(array) == 0:\n        return False\n    #get product\n    product = 1\n    for i in range(len(array)):\n        product *= array[i]\n    return product\n    \n    \n    \ndef quadratic(a,b,c):\n    '''\n    Write a function that takes in three values and returns the value of x that is the solution to\n    a quadratic equation.\n    '''\n    #check if a is 0\n    if a == 0:\n        return 0\n    #get two solutions\n    x1 = (-b+((b**2)-4*a*c)**.5)/(2*a)\n    x2 = (-b-((b**2)-4*a*c)**.5)/(2*a)\n    return x1,x2\n    \n    \n    \ndef quadratic_numeric(a,b,c):\n    '''\n    Write a function that takes in three values and returns the value of x that is the solution to\n    a quadratic equation.\n    '''\n    #check if a is 0\n    if a == 0:\n        return 0\n    #get two solutions\n    x1 = (-b+((b**2)-4*a*c)**.5)/(2*a)\n    x2 = (-b-((b**2)-4*a*c)**.5)/(2*a)\n    return x1,x2\n    \n    \n    \ndef half_sum(array):\n    '''\n    Write a function that takes in a list and returns the sum of the first half of the list and the\n    sum of the second half of the list.\n    '''\n    #get length\n    n = len(array)\n    #get half size\n    half = int(n/2)\n    #get sum of first half\n    sum1 = 0\n    for i in range(half):\n        sum1 += array[i]\n    #get sum of second half\n    sum2 = 0\n    for i in range(half,n):\n        sum2 += array[i]\n    return sum1+sum2\n    \n    \n    \ndef reverse(array):\n    '''\n    Write a function that takes in a list and returns the list wit"
    },
    {
        "number": 108,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef merge_sorted_list(num1,num2,num3):\n    '''\n    Write a function to merge three lists into a single sorted list.\n    '''\n    sorted_list = []\n    i = 0\n    j = 0\n    k = 0\n    while i < len(num1) and j < len(num2) and k < len(num3):\n        if num1[i] < num2[j]:\n            sorted_list.append(num1[i])\n            i += 1\n        else:\n            sorted_list.append(num2[j])\n            j += 1\n        k += 1\n    while i < len(num1):\n        sorted_list.append(num1[i])\n        i += 1\n    while j < len(num2):\n        sorted_list.append(num2[j])\n        j += 1\n    while k < len(num3):\n        sorted_list.append(num3[k])\n        k += 1\n    return sorted_list\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s = s[::-1]\n    for i in range(n):\n        for j in range(len(s)-1):\n            if s[j]=='1':\n                if s[j+1]=='0':\n                    s = s[:j] + '0' + s[j+2:]\n    count = 0\n    for i in range(len(s)):\n        if s[i]=='1':\n            count += 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # 1. Remove all leading zeroes\n    s=s.lstrip('0')\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    s1 = s[n:]+s[:n]\n    print(s1)\n    sum = 0\n    for i in range(len(s1)):\n        if s1[i] == \"0\":\n            sum +=1\n    return sum\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #Initialize empty string.\n    even_s = \"\"\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    string = bin(n)\n    string = string[2:]\n    string = string.zfill(len(s))\n    # print(string)\n    i = 0\n    j = len(string)-1\n    result = 0\n    while i<=j:\n        if string[i]=='0':\n            i+=1\n        if string[j]=='1':\n            j-=1\n        if string[i]=='1' and string[j]=='1':\n            result += 1\n            i+=1\n            j-=1\n    return result\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #num_odd = 0\n    if n == 1:\n        return s\n    elif n == 2:\n        return '0' + s + '0'\n    else:\n        for i in range(n):\n            s = '0' + s + '0'\n        return s\nprint(odd_Equivalent('010111', 2))\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    #Edge case: if input is 0, return 1, i.e 0 * 2 + 1\n    #Recursive case: if length of the input string is 1, return 1, else return 1 + odd_Equivalent(s,n-1)\n    if len(s) == 1 and n==1:\n        return 1\n    elif len(s) == 1:\n        return 1 + odd_Equivalent(s,n-1)\n    else:\n        return 1 + odd_Equivalent(s,n-1) + odd_Equivalent(s[1:],n-1)\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Taking s as a string and n as an integer\n    s = s\n    n = n\n    binary_string = []\n    # Using for loop to convert s to binary\n    for i in range(len(s)):\n        binary_string.append(s[i])\n    # print(binary_string)\n    # print(len(binary_string))\n    i = len(binary_string)\n    binary_string = binary_string[::-1]\n    # print(binary_string)\n    # print(len(binary_string))\n    count = 0\n    # print(binary_string)\n    # print(len(binary_string))\n    binary_string = binary_string[0:len(binary_string)-1]\n    # print(binary_string)\n    # print(len(binary_string))\n    # Traversing the binary_string and compare each element with n\n    # if n is odd then count = 1 else count = 0\n    for i in range(len(binary_string)):\n        if n == (int(binary_string[i])+1):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    return len([i for i in range(n) if s[i]%2])\n    \n    \n    \ndef count_down(n):\n    '''\n    Write a python function which takes as input an integer n. The function should return the sum of n and all integers smaller than n that are relatively prime to n.\n    '''\n    s=0\n    for i in range(1,n+1):\n        s+=i\n    return s\n    \n    \ndef count_up(n):\n    '''\n    Write a python function which takes as input an integer n. The function should return the sum of n and all integers greater than n that are relatively prime to n.\n    '''\n    s=0\n    for i in range(n,0,-1):\n        s+=i\n    return s\n    \n    \ndef count_down_odd(n):\n    '''\n    Write a python function which takes as input an integer n. The function should return the sum of n and all integers smaller than n which are relatively prime to n.\n    '''\n    s=0\n    for i in range(1,n+1):\n        if i%2==1:\n            s+=i\n    return s\n    \n    \ndef count_up_odd(n):\n    '''\n    Write a python function which takes as input an integer n. The function should return the sum of n and all integers greater than n which are relatively prime to n.\n    '''\n    s=0\n    for i in range(n,0,-1):\n        if i%2==1:\n            s+=i\n    return s\n    \n    \ndef reverse_num(n):\n    '''\n    Write a python function to reverse the digits of a number.\n    '''\n    s=''\n    while n>0:\n        r=n%10\n        s+=str(r)\n        n=n//10\n    return int(s)\n    \n    \ndef num_of_zeros(s):\n    '''\n    Write a python function to find the number of zeros present in the binary representation of the given number.\n    '''\n    return s.count('0')\n    \n    \ndef num_of_ones(s):\n    '''\n    Write a python function to find the number of ones present in the binary representation of the given number.\n    '''\n    return s.count('1')\n    \n    \ndef num_of_leaps(s):\n    '''\n    Write a python function to find the number of ones present in the binary representation of the given number.\n    '''\n    return s.count('1')\n    \n    \ndef get_num(s):\n    '''\n    Write a python function to return the decimal equivalent of the given binary representation of the given number.\n    '''\n    s=s[::-1]\n    s=int(s,2)\n    return s\n    \n    \ndef get_base(s,n):\n    '''\n    Write a python function to return the decimal equivalent of the given binary representation of the given number.\n    '''\n    s=s[::-1]\n    s=int(s,n)\n    return s\n    \n    \ndef is_power_of_two(n):\n    '''\n    Write a python function to return true if the given number is a power of two.\n    '''\n    return n>0 and (n&(n-1))==0\n    \n    \ndef is_prime(n):\n    '''\n    Write a python function to return true if the given number is prime.\n    '''\n    if n<=1:\n        return False\n    for i in range(2,n//2):\n        if n%i==0:\n            return False\n    return True\n    \n    \ndef is_power_of(n,p):\n    '''\n    Write a python function to return true if the given number is a power of the given number.\n    '''\n    return n>0 and (n%p==0 and n/p==p)\n    \n    \ndef is_perfect(n):\n    '''\n    Write a python function to return true if the given number is perfect.\n    '''\n    return n*(n+1)//2==n*n\n    \n    \ndef is_palindrome(s):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    if s==s[::-1]:\n        return True\n    return False\n    \n    \ndef is_palindrome2(s):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    return s==s[::-1]\n    \n    \ndef is_palindrome3(s):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    s=s.lower()\n    s=s.replace(' ','')\n    s=s.replace(',','')\n    return s==s[::-1]\n    \n    \ndef is_palindrome4(s):\n    '''\n    Write a python function to check if the given string is a palindrome.\n    '''\n    return s==s[::-1].lower()\n    \n    \ndef is_anagram(s1,s2):\n    '''\n    Write a python function to check if the given strings are anagrams or not.\n    '''\n    s1=s1.lower()\n    s2=s2.lower()\n    return sorted(s1)==sorted(s2)\n    \n    \ndef is_anagram2(s1,s2):\n    '''\n    Write a python function to check if the given strings are anagrams or not.\n    '''\n    s1=s1.lower()\n    s2=s2.lower()\n    a1=sorted(s1)\n    a2=sorted(s2)\n    if a1==a2:\n        return True\n    return False\n    \n    \ndef is_anagram3(s1,s2):\n    '''\n    Write a python function to check if the given strings are anagrams or not.\n    '''\n    s1=s1.lower()\n    s2=s2.lower()\n    return sorted(s1)==sorted(s2)\n    \n    \ndef is_anagram4(s1,s2):\n    '''\n    Write a python function to check if the given strings are anagrams or not.\n    '''\n    s1=s1.lower()\n    s2=s2.lower()\n    a1=sorted(s1)\n    a2=sorted(s2)\n    return a1==a2\n    \n    \ndef is_anagram5(s1,s2):\n    '''\n    Write a python function to check if the given strings are anagrams or not.\n    '''\n    s1=s1.lower()\n    s2=s2.lower()\n    a1=sorted(s1)\n    a2=sorted(s2)\n    return a1==a2\n    \n    \ndef is_anagram6(s1,s2):\n    '''\n    Write a python function to check if the given strings are anagrams or not.\n    '''\n    s1=s1.lower()\n    s2=s2.lower()\n    return sorted(s1)==sorted(s2)\n    \n    \ndef is_anagram7(s1,s2):\n    '''\n    Write a python function to check if the given strings are anagrams or not.\n    '''\n    s1=s1.lower()\n    s2=s2.lower()\n    s1_d={}\n    s2_d={}\n    for i in s1:\n        if i not in s1_d:\n            s1_d[i]=1\n        else:\n            s1_d[i]+=1\n    for i in s2:\n        if i not in s2_d:\n            s2_d[i]=1\n        else:\n            s2_d[i]+=1\n    return s1_d==s2_d\n    \n    \ndef is_anagram8(s1,s2):\n    '''\n    Write a python function to check if the given strings are anagrams or not.\n    '"
    },
    {
        "number": 109,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_Equivalent(s,n): \n    '''\n    Write a python function to find the number of numbers with an odd value when rotating a binary string the given number of times.\n    '''\n    # Function to find the number of \n    #odd numbers\n    count=0\n    n = n%31\n    for i in range(n):\n        if s[i]=='1':\n            count+=1\n    return count \n  \n  \n  "
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if len(nestedlist)==0:\n        return []\n    nestedlist = sorted(nestedlist, key=len)\n    result = []\n    for i in range(len(nestedlist[0])):\n        for j in range(1,len(nestedlist)):\n            if nestedlist[0][i]!= nestedlist[j][i]:\n                break\n        else:\n            result.append(nestedlist[0][i])\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_elements = set(nestedlist[0])\n    for element in nestedlist[1:]:\n        common_elements = common_elements & set(element)\n    return list(common_elements)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    result = []\n    for i in nestedlist:\n        if i is not None:\n            if isinstance(i, list):\n                result.extend(common_in_nested_lists(i))\n            else:\n                if i not in result:\n                    result.append(i)\n    return result\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    from itertools import chain\n    set_1 = set(nestedlist[0])\n    for sublist in nestedlist[1:]:\n        set_1 = set_1.intersection(set(sublist))\n    return list(set_1)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    for nl in nestedlist:\n        for i in range(len(nl)):\n            if nl[i] == nl[0]:\n                common.append(nl[i])\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common = []\n    if type(nestedlist) == list:\n        for num in nestedlist:\n            if type(num) == list:\n                common.append(common_in_nested_lists(num))\n            else:\n                common.append(num)\n    else:\n        common = []\n    return common\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    # input lists\n    list1 = [[1,2,3], [5,6], [7,8,9]]\n    list2 = [[1,2,3], [5,6,7,8], [9,10]]\n    list3 = [[1,2,3], [5,6], [7,8]]\n    list4 = [[1,2,3], [5,6,7,8], [9,10]]\n    # output\n    list1 = [[1,2,3], [5,6], [7,8,9]]\n    list2 = [[1,2,3], [5,6,7,8], [9,10]]\n    list3 = [[1,2,3], [5,6], [7,8]]\n    list4 = [[1,2,3], [5,6,7,8], [9,10]]\n    #expected output\n    list1 = [[1,2,3], [5,6], [7,8,9]]\n    list2 = [[1,2,3], [5,6,7,8], [9,10]]\n    list3 = [[1,2,3], [5,6], [7,8]]\n    list4 = [[1,2,3], [5,6,7,8], [9,10]]\n    # actual output\n    print('list1:', list1, 'list2:', list2, 'list3:', list3, 'list4:', list4)\n    return(common_in_nested_lists(list1))\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    common_list = []\n    for list1 in nestedlist:\n        for element1 in list1:\n            for list2 in nestedlist:\n                if element1 in list2:\n                    if element1 not in common_list:\n                        common_list.append(element1)\n    print(common_list)\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    set1 = set()\n    set2 = set()\n"
    },
    {
        "number": 111,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_in_nested_lists(nestedlist):\n    '''\n    Write a function to find the common elements in given nested lists.\n    '''\n    if type(nestedlist) == list:\n        newlist = list(set(nestedlist[0]).intersection(*nestedlist[1:]))\n        return newlist\n    else:\n        print('Wrong Input')\n        return\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n    except ValueError:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 113,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_integer(text):\n    '''\n    Write a function to check if a string represents an integer or not.\n    '''\n    try:\n        int(text)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    \n    if len(list1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in range(len(list1)):\n        if len(list1[i])>0:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    flag = True\n    for i in list1:\n        if len(i)!= 0:\n            flag = False\n            break\n    return flag\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if bool(i) == True:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    if len(list1) == 0:\n        print(\"List is empty\")\n    else:\n        print(\"List is not empty\")\n    \n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if i!= {}:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    for i in list1:\n        if len(i)==0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 115,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_dit(list1):\n    '''\n    Write a function to check whether all dictionaries in a list are empty or not.\n    '''\n    return all(not d for d in list1)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    res = 0\n    for num in nums:\n        res = res * 10 + num\n    return res\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    num = 0\n    for i in nums:\n        num = num * 10 + i\n    return num\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return (sum(nums),max(nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    # YOUR CODE HERE\n    return int(''.join(map(str, nums)))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    converted_nums = sum(nums)\n    return converted_nums\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    sum = 0\n    for num in nums:\n        sum = sum + num\n    return sum\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    if len(nums) == 0:\n        return 0\n    else:\n        return nums[0] + tuple_to_int(nums[1:])\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    return int(''.join(str(n) for n in nums))\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    tuple_to_int_helper(nums,0)\n"
    },
    {
        "number": 116,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_int(nums):\n    '''\n    Write a function to convert a given tuple of positive integers into a single integer.\n    '''\n    t = tuple(nums)\n    return int(''.join([str(i) for i in t]))\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for l in test_list:\n        if type(l)!= list:\n            l = float(l)\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    if len(test_list) == 0:\n        return\n    test_list[0] = list_to_float(test_list[0])\n    for i in range(1,len(test_list)):\n        test_list[i] = list_to_float(test_list[i])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = float(test_list[i])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    try:\n        for x in test_list:\n            x = float(x)\n    except ValueError:\n        print('This is not a possible element, add an int or float value to your list')\n    return(test_list)\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for row in range(len(test_list)):\n        for item in range(len(test_list[row])):\n            try:\n                test_list[row][item] = float(test_list[row][item])\n            except ValueError:\n                pass\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            try:\n                test_list[i][j] = float(test_list[i][j])\n            except ValueError:\n                print(test_list[i][j])\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    return [float(i) for i in test_list]\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    \n    for i in range(len(test_list)):\n        for j in range(len(test_list[i])):\n            test_list[i][j] = float(test_list[i][j])\n    return test_list\n"
    },
    {
        "number": 117,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_to_float(test_list):\n    '''\n    Write a function to convert all possible convertible elements in a list of lists to floats.\n    '''\n    for i in range(len(test_list)):\n        if isinstance(test_list[i], list):\n            test_list[i] = list_to_float(test_list[i])\n        else:\n            try:\n                test_list[i] = float(test_list[i])\n            except ValueError:\n                test_list[i] = 0\n    return test_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split(\" \")\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    #split_word = string.split(\" \")\n    #return split_word\n    split_word = string.split(\" \")\n    return split_word\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    a_list = string.split()\n    return a_list\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    lst = string.split()\n    return lst\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    # split function \n    return string.split()\n    \ndef string_to_dict(list_value):\n    '''\n    Write a function to convert a list of strings to a dictionary of key:value pairs.\n    '''\n    # create empty dictionary\n    mydict = {}\n    \n    # loop through each element in the list\n    for element in list_value:\n        # assign element to value and key\n        mydict[element] = None\n        \n    # return the dictionary\n    return mydict\n    \ndef reverse_dict(mydict):\n    '''\n    Write a function that reverses a dictionary.\n    '''\n    # create empty dictionary\n    new_dict = {}\n    \n    # loop through each key-value pair\n    for key, value in mydict.items():\n        # add keys to new dictionary\n        new_dict[value] = key\n        \n    # return dictionary\n    return new_dict\n    \n    \ndef test_function(test_case):\n    '''\n    Write a function that tests if a dictionary is a valid dictionary.\n    '''\n    # solution\n    try:\n        # If this runs without raising an exception, then the test case passed.\n        test_case[1]\n        test_case[2]\n        test_case[3]\n        return True\n    except:\n        return False\n    \ndef reverse_dict(mydict):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    # create empty dictionary\n    new_dict = {}\n    \n    # loop through each key-value pair\n    for key, value in mydict.items():\n        # add keys to new dictionary\n        new_dict[value] = key\n        \n    # return dictionary\n    return new_dict\n    \ndef test_function(test_case):\n    '''\n    Write a function that tests if a dictionary is a valid dictionary.\n    '''\n    # solution\n    try:\n        # If this runs without raising an exception, then the test case passed.\n        test_case[1]\n        test_case[2]\n        test_case[3]\n        return True\n    except:\n        return False\n    \ndef reverse_dict(mydict):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    # create empty dictionary\n    new_dict = {}\n    \n    # loop through each key-value pair\n    for key, value in mydict.items():\n        # add keys to new dictionary\n        new_dict[value] = key\n        \n    # return dictionary\n    return new_dict\n    \ndef test_function(test_case):\n    '''\n    Write a function that tests if a dictionary is a valid dictionary.\n    '''\n    # solution\n    try:\n        # If this runs without raising an exception, then the test case passed.\n        test_case[1]\n        test_case[2]\n        test_case[3]\n        return True\n    except:\n        return False\n    \ndef reverse_dict(mydict):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    # create empty dictionary\n    new_dict = {}\n    \n    # loop through each key-value pair\n    for key, value in mydict.items():\n        # add keys to new dictionary\n        new_dict[value] = key\n        \n    # return dictionary\n    return new_dict\n    \ndef test_function(test_case):\n    '''\n    Write a function that tests if a dictionary is a valid dictionary.\n    '''\n    # solution\n    try:\n        # If this runs without raising an exception, then the test case passed.\n        test_case[1]\n        test_case[2]\n        test_case[3]\n        return True\n    except:\n        return False\n    \ndef reverse_dict(mydict):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    # create empty dictionary\n    new_dict = {}\n    \n    # loop through each key-value pair\n    for key, value in mydict.items():\n        # add keys to new dictionary\n        new_dict[value] = key\n        \n    # return dictionary\n    return new_dict\n    \ndef test_function(test_case):\n    '''\n    Write a function that tests if a dictionary is a valid dictionary.\n    '''\n    # solution\n    try:\n        # If this runs without raising an exception, then the test case passed.\n        test_case[1]\n        test_case[2]\n        test_case[3]\n        return True\n    except:\n        return False\n    \ndef reverse_dict(mydict):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    # create empty dictionary\n    new_dict = {}\n    \n    # loop through each key-value pair\n    for key, value in mydict.items():\n        # add keys to new dictionary\n        new_dict[value] = key\n        \n    # return dictionary\n    return new_dict\n    \ndef test_function(test_case):\n    '''\n    Write a function that tests if a dictionary is a valid dictionary.\n    '''\n    # solution\n    try:\n        # If this runs without raising an exception, then the test case passed.\n        test_case[1]\n        test_case[2]\n        test_case[3]\n        return True\n    except:\n        return False\n    \ndef reverse_dict(mydict):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    # create empty dictionary\n    new_dict = {}\n    \n    # loop through each key-value pair\n    for key, value in mydict.items():\n        # add keys to new dictionary\n        new_dict[value] = key\n        \n    # return dictionary\n    return new_dict\n    \ndef test_function(test_case):\n    '''\n    Write a function that tests if a dictionary is a valid dictionary.\n    '''\n    # solution\n    try:\n        # If this runs without raising an exception, then the test case passed.\n        test_case[1]\n        test_case[2]\n        test_case[3]\n        return True\n    except:\n        return False\n    \ndef reverse_dict(mydict):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    # create empty dictionary\n    new_dict = {}\n    \n    # loop through each key-value pair\n    for key, value in mydict.items():\n        # add keys to new dictionary\n        new_dict[value] = key\n        \n    # return dictionary\n    return new_dict\n    \ndef test_function(test_case):\n    '''\n    Write a function that tests if a dictionary is a valid dictionary.\n    '''\n    # solution\n    try:\n        # If this runs without raising an exception, then the test case passed.\n        test_case[1]\n        test_case[2]\n        test_case[3]\n        return True\n    except:\n        return False\n    \ndef reverse_dict(mydict):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    # create empty dictionary\n    new_dict = {}\n    \n    # loop through each key-value pair\n    for key, value in mydict.items():\n        # add keys to new dictionary\n        new_dict[value] = key\n        \n    # return dictionary\n    return new_dict\n    \ndef test_function(test_case):\n    '''\n    Write a function that tests if a dictionary is a valid dictionary.\n    '''\n    # solution\n    try:\n        # If this runs without raising an exception, then the test case passed.\n        test_case[1]\n        test_case[2]\n        test_case[3]\n        return True\n    except:\n        return False\n    \ndef reverse_dict(mydict):\n    '''\n    Write a function to reverse a dictionary.\n    '''\n    # create empty dictionary\n    new_dict = {}\n    \n    # loop through each key-value pair\n    for key, value in mydict.items():\n        # add keys to new dictionary\n        new_dict[value] = key\n        \n    # return dictionary\n    return new_dict\n    \ndef test_function(test_case):\n    '''\n    Write a function that tests if a dictionary is a valid dictionary.\n    '''\n    # solution\n    try:\n        # If this runs without raising an exception"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    return string.split()\n"
    },
    {
        "number": 118,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_list(string): \n    '''\n    Write a function to convert a string to a list of strings split on the space character.\n    '''\n    result = list(string)\n    return result\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    N = len(arr)\n    if N <= 1:\n        return -1\n    i = 0\n    while i < N:\n        if i == arr[i]:\n            i += 1\n        else:\n            break\n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    n=len(arr)\n    if n==0:\n        return -1\n    if n==1:\n        return arr[0]\n    if arr[0]!=arr[1]:\n        return arr[0]\n    if arr[n-1]!=arr[n-2]:\n        return arr[n-1]\n    for i in range(2,n-1):\n        if arr[i-1]==arr[i] and arr[i]!=arr[i+1]:\n            return arr[i]\n    return arr[n-1]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    newArr = []\n    for num in range(len(arr)):\n        if arr.count(arr[num]) == 1:\n            newArr.append(arr[num])\n    return newArr\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    s = set(arr)\n    if len(s) == 0:\n        return -1\n    else:\n        for i in range(len(arr)):\n            if arr[i] not in s:\n                return arr[i]\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    count = 1\n    index = 0\n    while count < len(arr) and index < len(arr)-1:\n        if arr[index]!= arr[index+1]:\n            index += 1\n        else:\n            count += 1\n    return arr[index]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    unique_num = None\n    \n    for num in arr:\n        if unique_num == None:\n            unique_num = num\n        elif unique_num!= num:\n            unique_num = None\n            break\n    return unique_num\n    \n    \n    \narr = [1,1,2,3,4,5,5,7,8,8]\nprint(search(arr))\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    hash_map = {}\n    result = -1\n    for i in arr:\n        if i in hash_map:\n            hash_map[i] += 1\n        else:\n            hash_map[i] = 1\n    for k, v in hash_map.items():\n        if v == 1:\n            result = k\n            break\n    return result\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    for i in range(len(arr)):\n        if i == len(arr) - 1:\n            break\n        if arr[i]!= arr[i+1]:\n            return arr[i]\n    return arr[i]\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 0\n    n = len(arr)\n    found = 0\n    while (i<n):\n        if (found == 1):\n            return arr[i]\n        if (arr[i] == arr[i+1]):\n            found = 1\n            i+=2\n        else:\n            i+=1\n    return -1\n"
    },
    {
        "number": 119,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def search(arr):\n    '''\n    Write a python function to find the element that appears only once in a sorted array.\n    '''\n    i = 1\n    while i < len(arr):\n        if arr[i] == arr[i - 1]:\n            i += 1\n        else:\n            return arr[i - 1]\n    return -1\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    \n    # Initialise variables\n    max_product = -999999999999999999999999999999999999999999\n    max_index_product = -9999999999999999999999999999999999999999999\n    curr_product = -999999999999999999999999999999999999999999\n    max_ind = 0\n    curr_ind = 0\n    \n    # Loop through list and find max absolute product\n    for ind, item in enumerate(list1):\n        curr_product = item[0] * item[1]\n        if curr_product > max_product:\n            max_product = curr_product\n            max_index_product = ind\n            max_ind = item[0]\n        elif curr_product == max_product:\n            if item[0] > max_ind:\n                max_product = curr_product\n                max_index_product = ind\n                max_ind = item[0]\n    \n    # Return max absolute product\n    return list1[max_index_product]\n    "
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    product = 0\n    for i in range(len(list1)):\n        x = list1[i][0]\n        y = list1[i][1]\n        if product < x * y:\n            product = x * y\n    return product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    # list1 = [-1, -3, 4, -5, 2]\n    max_product = float('-inf')\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if max_product < abs(list1[i]*list1[j]):\n                max_product = abs(list1[i]*list1[j])\n    return max_product\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max = 0\n    for i in range(len(list1)):\n        for j in range(i + 1, len(list1)):\n            product = list1[i][0] * list1[j][0]\n            max = max if max > product else product\n    return max\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    from collections import deque\n    lst = deque(list1)\n    if len(lst)<2:\n        return\n    if len(lst)==2:\n        if lst[0][0]>lst[1][0] and lst[0][1]>lst[1][1]:\n            return lst[0][0]*lst[0][1]\n        elif lst[0][0]<lst[1][0] and lst[0][1]<lst[1][1]:\n            return lst[1][0]*lst[1][1]\n        else:\n            return 0\n    elif len(lst)>2:\n        p1 = lst.popleft()\n        p2 = lst.popleft()\n        p1_p = p1[0]*p2[0]\n        p1_i = p1[1]*p2[1]\n        p2_p = p2[0]*p1[0]\n        p2_i = p2[1]*p1[1]\n        lst.append([p1_p, p1_i])\n        lst.append([p2_p, p2_i])\n        if p1_p>p2_p:\n            return max(p1_p*p1_i, p2_p*p2_i)\n        elif p1_p<p2_p:\n            return max(p2_p*p2_i, p1_p*p1_i)\n        else:\n            return max(p1_p*p1_i, p2_p*p2_i)\n    else:\n        return 0\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    tup_list = []\n    result = []\n    for t in list1:\n        tup_list.append(tuple(t))\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_prod = 0\n    for i in range(0, len(list1), 2):\n        num1 = list1[i]\n        num2 = list1[i + 1]\n        prod = num1 * num2\n        if prod > max_prod:\n            max_prod = prod\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    max_value = -100\n    pairs = []\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    if len(list1) < 2:\n        raise ValueError(\"At least 2 tuples needed\")\n    if len(list1[0]) < 2:\n        raise ValueError(\"At least 2 values needed for each tuple\")\n    \n    max_prod = 0\n    for i in range(len(list1) - 1):\n        for j in range(i+1, len(list1)):\n            if max_prod < (max(list1[i][0], list1[j][0]) * min(list1[i][1], list1[j][1])):\n                max_prod = (max(list1[i][0], list1[j][0]) * min(list1[i][1], list1[j][1]))\n    return max_prod\n"
    },
    {
        "number": 120,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product_tuple(list1):\n    '''\n    Write a function to find the maximum absolute product between numbers in pairs of tuples within a given list.\n    '''\n    m = -1\n    m1 = -1\n    m2 = -1\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i][0]*list1[j][0] > m:\n                m = list1[i][0]*list1[j][0]\n                m1 = list1[i][0]\n                m2 = list1[j][0]\n    print(m1, m2, m)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    for n in range(1, limit + 1):\n        # Calculate the sum of proper divisors\n        sum += sum_divisors(n)\n        # Calculate the sum of proper divisors\n        sum -= sum_divisors(sum)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    summation = 0\n    for i in range(1,limit):\n        sum = 0\n        for j in range(1, i):\n            if i % j == 0:\n                sum += j\n                if i == sum:\n                    amicable_numbers.add(i)\n                    break\n        if sum == i and i in amicable_numbers:\n            summation += i\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    numbers = set()\n    amicable_pairs = set()\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable = []\n    for x in range(1, limit):\n        sum1 = 0\n        sum2 = 0\n        if x not in amicable:\n            for y in range(1, x):\n                if x % y == 0:\n                    sum1 += y\n            sum2 = x + sum1\n            if sum2 == x and sum1!= x:\n                amicable.append(x)\n                amicable.append(sum1)\n                amicable.append(sum2)\n    return sum(amicable)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = []\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum_of_amicable_numbers = 0\n    amicable_numbers = []\n    for i in range(1, limit+1):\n        sum_of_other_numbers = 0\n        for j in range(1, i+1):\n            if j!= i and i % j == 0 and j in amicable_numbers:\n                sum_of_other_numbers += j\n        if sum_of_other_numbers == i:\n            sum_of_amicable_numbers += i\n        amicable_numbers.append(i)\n    return sum_of_amicable_numbers\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    sum = 0\n    # 1 + 2 + 3 + 4 + 5... n\n    for i in range(1, limit + 1):\n        sum += i\n        sum -= i\n        # sum = sum + (i - sum)\n        # sum = sum - (i + sum)\n        # sum = sum - i + sum\n        # sum = sum - (i - sum)\n    return sum\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    amicable_numbers = set()\n    for x in range(1, limit):\n        if not x in amicable_numbers:\n            y = sum(amicable_numbers)\n            z = sum(x for x in range(1, y + 1) if x!= y)\n            if z == x and y!= x and not x == y:\n                amicable_numbers.add(y)\n                amicable_numbers.add(z)\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    s = 0\n    for i in range(1, limit):\n        n = i\n        sum = 0\n        while n!= 0:\n            sum = sum + n\n            if sum == i:\n                s = s + i\n            if sum > i:\n                break\n            n = n - 1\n    return s\n"
    },
    {
        "number": 123,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def amicable_numbers_sum(limit):\n    '''\n    Write a function to sum all amicable numbers from 1 to a specified number.\n    '''\n    def amicable_numbers_helper(limit):\n        sum = 0\n        for i in range(1, limit):\n            if sum > 0:\n                if i!= sum:\n                    for j in range(1, sum+1):\n                        if i!= j and i!= sum-j:\n                            if i*j == sum and i!= j:\n                                sum += i\n            sum += i\n        return sum\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return abs(a.conjugate()*b)/(abs(a)*abs(b))\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    if n<2:\n        return False\n    elif n == 2:\n        return True\n    elif n > 2 and n % 2 == 0:\n        return False\n    else:\n        for i in range(3,int(n**0.5)+1,2):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle_in_degrees = cmath.phase(a+b)\n    return angle_in_degrees\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    x = (a.real**2 + a.imag**2)**0.5\n    y = (b.real**2 + b.imag**2)**0.5\n    if x == 0:\n        if y == 0:\n            return 0\n        else:\n            if y > 0:\n                return cmath.acos(y/x)\n            else:\n                return -cmath.acos(y/x)\n    else:\n        return cmath.acos(y/x)\n    #return abs(angle)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    s=a.real**2+a.imag**2\n    c=b.real**2+b.imag**2\n    angle=0.0\n    if s!=0 and c!=0:\n        angle=cmath.phase(a)*cmath.phase(b)\n    return angle"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a + b*1j)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    angle=complex(a,b)/complex(abs(a),abs(b))\n    if a==0:\n        angle=0\n    elif a>0:\n        angle=cmath.phase(complex(a,b))\n    else:\n        angle=cmath.phase(complex(a,b))+2*cmath.pi\n    return angle\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)/2\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    cmath.polar(a)\n    cmath.polar(b)\n    return cmath.phase(a) - cmath.phase(b)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    return cmath.phase(a+b)\n"
    },
    {
        "number": 124,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef angle_complex(a,b):\n    '''\n    Write a function to get the angle of a complex number.\n    '''\n    n1=a.real\n    n2=a.imag\n    n3=b.real\n    n4=b.imag\n    s=n1*n1+n2*n2-n3*n3-n4*n4\n    c=2*(n1*n2+n3*n4)\n    #print(s,c)\n    if(c<0):\n        ans=(360-s*s/(4*c))\n    elif(c==0):\n        ans=360*s/(4*c)\n    else:\n        ans=(360*s/(4*c))\n    return ans\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    max_diff = 0\n    for i in range(1,len(string)):\n        sub_string = string[i-1] + string[i]\n        num_zeros = sub_string.count(\"0\")\n        num_ones = sub_string.count(\"1\")\n        if max_diff < abs(num_zeros - num_ones):\n            max_diff = abs(num_zeros - num_ones)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    prev = 0\n    curr = 0\n    max_len = 0\n    for i in range(len(string)):\n        if string[i] == '1':\n            curr += 1\n        else:\n            curr -= 1\n        if curr == 0:\n            curr = 0\n            prev = i\n        if i - prev > max_len:\n            max_len = i - prev\n    return max_len"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    zeros = 0\n    ones = 0\n    for i in range(len(string)):\n        if string[i] == '0':\n            zeros += 1\n        else:\n            ones += 1\n    \n    max_diff = max(zeros - ones, ones - zeros)\n    return max_diff\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    length = len(string)\n    if length == 1:\n        return 0\n    max_len = 0\n    for i in range(length-1):\n        if string[i] == '0' and string[i+1] == '0':\n            continue\n        elif string[i] == '1' and string[i+1] == '1':\n            continue\n        else:\n            if max_len < i+1-i:\n                max_len = i+1-i\n    return max_len\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    \n    string = list(string)\n    \n    # Get length of string\n    l = len(string)\n    \n    # Find count of 0s and 1s\n    count0 = 0\n    count1 = 0\n    \n    for i in range(l):\n        if string[i] == \"0\":\n            count0 += 1\n        elif string[i] == \"1\":\n            count1 += 1\n        else:\n            raise Exception(\"String contains 0s and 1s in different positions.\")\n    \n    # If there are no 0s or 1s, return -1\n    if count0 == 0 or count1 == 0:\n        return -1\n    \n    # Else, return max value of count0 - count1\n    return max(count0 - count1, count0 + count1)\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    if not string:\n        return 0\n    length = len(string)\n    def find_diff(string, substring, length, diff):\n        if length == 0:\n            return diff\n        if substring == \"\":\n            return diff\n        sub_len = len(substring)\n        if diff < 0:\n            diff = 0\n        if substring[0] == \"0\":\n            diff = diff + 1\n        return max(find_diff(string, substring[1:], length - subst_len, diff), find_diff(string, substring, length - subst_len, diff))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    count_0 = 0\n    count_1 = 0\n    for c in string:\n        if c == '0':\n            count_0 += 1\n        else:\n            count_1 += 1\n    return count_0 - count_1\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    counter_0 = 0\n    counter_1 = 0\n    for i in range(0, len(string)):\n        if string[i] == '0':\n            counter_0 += 1\n        else:\n            counter_1 += 1\n    print(\"Minimum Difference is:\", abs(counter_0 - counter_1))\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    n = len(string)\n    if n < 2:\n        return 0\n    max_val = 0\n    max_val_str = \"\"\n    for i in range(n):\n        string_copy = string[i:n]\n        if \"0\" in string_copy:\n            lst = list(string_copy)\n            lst.reverse()\n            string_copy = \"\".join(lst)\n            lst = list(string_copy)\n            lst.reverse()\n            string_copy = \"\".join(lst)\n            if int(string_copy) < 2:\n                continue\n            elif int(string_copy) > max_val:\n                max_val = int(string_copy)\n                max_val_str = string_copy\n        string = string[1:]\n    return max_val, max_val_str\n"
    },
    {
        "number": 125,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_length(string): \n    '''\n    Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.\n    '''\n    st=string.replace('0',' ').replace('1',' ').split()\n    max_diff=0\n    for i in st:\n        diff=0\n        for j in range(0,len(i)):\n            if i[j]=='0':\n                diff+=1\n            else:\n                diff-=1\n        if diff>max_diff:\n            max_diff=diff\n    return max_diff\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    return a+b\n    \n    \n    "
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    # a,b are number\n    \n    # first approach\n    # if a == 0 or b == 0:\n    #     return 0\n    # if a == 1:\n    #     return b\n    # if b == 1:\n    #     return a\n    # else:\n    #     return a + b - 1\n    # second approach\n    if a == 0 or b == 0:\n        return 0\n    if a == 1 or b == 1:\n        return min(a,b)\n    if a == 2 and b == 2:\n        return 1\n    if a == 2:\n        return b\n    if b == 2:\n        return a\n    else:\n        return a + b - 1\n    \n    \n    \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    count = 0\n    for i in range(1, a+1):\n        if a%i==0 and b%i==0:\n            count += i\n    return count\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c=[]\n    for i in range(1,a):\n        if a%i == 0 and b%i == 0:\n            c.append(i)\n    return sum(c)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    \n    x = gcd(a,b)\n    count = 0\n    \n    while(x!=1):\n        if(a%x==0 and b%x==0):\n            count += x\n        x -= 1\n    print(count)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    if(a==0 or b==0): \n        return 0\n    while(a!= 0): \n        a = a//2\n        sum += a\n    while(b!= 0): \n        b = b//2\n        sum += b\n    return sum\n    \ndef is_prime(n):\n    '''\n    Write a python function to find whether a given integer is a prime number or not.\n    '''\n    if(n==1):\n        return 0\n    if(n<=3):\n        return 1\n    if(n%2==0 or n%3==0):\n        return 0\n    i = 5\n    while(i*i<=n):\n        if(n%i==0 or n%(i+2)==0):\n            return 0\n        i+=6\n    return 1\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = []\n    for i in range(1, a+1):\n        if a % i == 0 and b % i == 0:\n            c.append(i)\n    return sum(c)\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    print(\"Finding sum of common divisors of two given numbers.\")\n    divisor = set() \n    for i in range(2,min(a,b)+1): \n        if a%i == 0 and b%i == 0: \n            divisor.add(i) \n    return sum(divisor) \n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    sum = 0\n    for i in range(1,a):\n        if a%i == 0 and b%i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 126,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum(a,b): \n    '''\n    Write a python function to find the sum of common divisors of two given numbers.\n    '''\n    c = 1\n    for i in range(1, min(a, b) + 1):\n        if a % i == 0 and b % i == 0:\n            c = c * i\n    return c\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    print(x*y)\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    # 0*x + y\n    return x*y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x * y\n"
    },
    {
        "number": 127,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_int(x, y):\n    '''\n    Write a function to multiply two integers.\n    '''\n    return x*y\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [word for word in str.split() if len(word) >= n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    list_words = []\n    for i in str:\n        if len(i) > n:\n            list_words.append(i)\n    return list_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return [w for w in str if len(w) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    lst=[]\n    for word in str.split():\n        if len(word)>n:\n            lst.append(word)\n    return lst\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = []\n    for word in str:\n        if len(word) >= n:\n            words.append(word)\n    return words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    final_words = []\n    for word in str:\n        if len(word) > n:\n            final_words.append(word)\n    return final_words\nprint(long_words(2, [\"quick\", \"brown\", \"the\", \"fox\"]))\nprint(long_words(1, [\"a\", \"aa\", \"aaa\", \"aaaa\"]))\nprint(long_words(4, [\"the\", \"quick\", \"brown\", \"fox\"]))\nprint(long_words(2, [\"\"]))\nprint(long_words(1, []))\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    return filter(lambda x: len(x) > n, str)\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split()\n    return [word for word in words if len(word) > n]\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    longest_words = []\n    for word in str:\n        if len(word) > n:\n            longest_words.append(word)\n    return longest_words\n"
    },
    {
        "number": 128,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def long_words(n, str):\n    '''\n    Write a function to find words that are longer than n characters from a given list of words.\n    '''\n    words = str.split(' ')\n    # print(words)\n    return [w for w in words if len(w) >= n]\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    if len(my_matrix)!= int(len(my_matrix)/2) or len(my_matrix)!= int(len(my_matrix)/2):\n        return False\n    else:\n        sum_rows = 0\n        sum_columns = 0\n        sum_diagonals = 0\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    def check_magic_square(matrix):\n        if len(matrix) == len(my_matrix) and len(my_matrix) == len(matrix[0]):\n            rows = len(matrix)\n            columns = len(matrix[0])\n            for i in range(rows):\n                if sum(matrix[i])!= rows*columns:\n                    return False\n            \n            column_list = []\n            for i in range(columns):\n                for j in range(rows):\n                    column_list.append(matrix[j][i])\n                \n                if sum(column_list)!= rows*columns:\n                    return False\n                \n                column_list = []\n            \n            return True\n        else:\n            return False\n        \n    return check_magic_square(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    # 1-D array to store the numbers\n    nums = []\n    # compare each element in the matrix\n    for i in range(len(my_matrix)):\n        for j in range(len(my_matrix[i])):\n            nums.append(my_matrix[i][j])\n    \n    # make the array a one-dimensional list\n    nums = list(map(int, nums))\n    \n    # check if the numbers are in ascending order\n    if nums == sorted(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #O(1) time and O(1) space\n    if not isinstance(my_matrix,list):\n        raise TypeError(\"Matrix must be a list of lists\")\n    if len(my_matrix)!= 9:\n        raise ValueError(\"Matrix must be of size 9x9\")\n    for sub_list in my_matrix:\n        if not isinstance(sub_list,list):\n            raise TypeError(\"Matrix must be a list of lists\")\n        if len(sub_list)!= 9:\n            raise ValueError(\"Matrix must be of size 9x9\")\n        for item in sub_list:\n            if not isinstance(item,int):\n                raise TypeError(\"Matrix must be a list of lists\")\n    for i in range(0,9,3):\n        for j in range(0,9,3):\n            if sum(my_matrix[i][j:j+3])!= 15 or sum(my_matrix[i+1][j:j+3])!= 15 or sum(my_matrix[i+2][j:j+3])!= 15:\n                return False\n    for i in range(3):\n        for j in range(9):\n            if sum(my_matrix[i][j:j+3])!= 15 or sum(my_matrix[i+3][j:j+3])!= 15 or sum(my_matrix[i+6][j:j+3])!= 15:\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    return is_magic_square(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix = list(my_matrix)\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    my_matrix = list(my_matrix)\n    side = int(len(my_matrix) **.5)\n    if side ** 2 == len(my_matrix) :\n        if (side * side) == len(my_matrix) :\n            for row in range(0, side):\n                for col in range(0, side):\n                    if row == col or abs(row - col) == abs(side - 1):\n                        if my_matrix[row][col] == \"X\" :\n                            return False\n                    else:\n                        if my_matrix[row][col]!= \"X\":\n                            return False\n            for i in range(0, side):\n                for j in range(0, side):\n                    if my_matrix[j][i]!= \"X\":\n                        return False\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    #print(my_matrix)\n    #print(sum([sum(row) for row in my_matrix]))\n    #print(len(my_matrix))\n    #print(my_matrix[0])\n    #print(my_matrix[1])\n    #print(my_matrix[2])\n    #print(my_matrix[3])\n    #print(my_matrix[4])\n    #print(my_matrix[5])\n    #print(my_matrix[6])\n    #print(my_matrix[7])\n    #print(my_matrix[8])\n    if sum([sum(row) for row in my_matrix]) == sum([sum(my_matrix[i]) for i in range(len(my_matrix))]) and len(my_matrix) == len(set(sum([sum(row) for row in my_matrix], []))):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    for x in range(len(my_matrix)):\n        row = my_matrix[x]\n        if len(row)!= len(my_matrix[x]):\n            return False\n        if row.count(row[0])!= len(row):\n            return False\n    if my_matrix[0][0]!= 0:\n        return False\n    for y in range(1,len(my_matrix)):\n        if my_matrix[y][0]!= y + 1:\n            return False\n        if my_matrix[0][y]!= y + 1:\n            return False\n    for x in range(1,len(my_matrix)):\n        for y in range(1,len(my_matrix)):\n            if my_matrix[x][y]!= (x + 1) + (y + 1):\n                return False\n    return True\n"
    },
    {
        "number": 129,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def magic_square_test(my_matrix):\n    '''\n    Write a function to calculate whether the matrix is a magic square.\n    '''\n    matrix_len = len(my_matrix)\n    if matrix_len!= len(my_matrix[0]):\n        return False\n    elif matrix_len == 0:\n        return False\n    for i in range(0,matrix_len):\n        if len(my_matrix[0])!= len(my_matrix):\n            return False\n        else:\n            if sum(my_matrix[i])!= sum(my_matrix[0]):\n                return False\n            for j in range(1,matrix_len):\n                if my_matrix[i][j]!= my_matrix[0][j] + my_matrix[i][0]:\n                    return False\n            return True\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    max_value = max(d.values())\n    for i in d.keys():\n        if d[i] == max_value:\n            return i\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    temp = {}\n    for num in nums:\n        if num in temp:\n            temp[num] += 1\n        else:\n            temp[num] = 1\n    return max(temp.items(), key=lambda item: item[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for num in nums:\n        freq[num] += 1\n    return max(freq.items(), key=lambda item: item[1])[0]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    nums_dict = defaultdict(int)\n    for i in nums:\n        nums_dict[i] += 1\n    max_value = max(nums_dict.values())\n    # return [k for k, v in nums_dict.items() if v == max_value]\n    return nums_dict.keys()[nums_dict.values().index(max_value)]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    m = max(d.values())\n    for k, v in d.items():\n        if v == m:\n            return k\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    # TODO: implement\n    freq = defaultdict(int)\n    for i in nums:\n        freq[i] += 1\n    \n    max_freq = max(freq.values())\n    return [(key, value) for key, value in freq.items() if value == max_freq]\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    my_dictionary = defaultdict(int)\n    for i in nums:\n        my_dictionary[i] += 1\n    m = max(my_dictionary.values())\n    for key, value in my_dictionary.items():\n        if value == m:\n            return key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    d = defaultdict(int)\n    for i in nums:\n        d[i] += 1\n    m = 0\n    m_key = 0\n    for i in d:\n        if d[i] > m:\n            m = d[i]\n            m_key = i\n    return m_key\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    occurrence_count = defaultdict(int)\n    max_occur = -1\n    max_item = -1\n    for num in nums:\n        occurrence_count[num] += 1\n        if occurrence_count[num] > max_occur:\n            max_occur = occurrence_count[num]\n            max_item = num\n    return max_item\n"
    },
    {
        "number": 130,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_occurrences(nums):\n    '''\n    Write a function to find the item with maximum frequency in a given list.\n    '''\n    freq = defaultdict(int)\n    for n in nums:\n        freq[n] += 1\n    max_freq = max(freq.values())\n    return [k for k,v in freq.items() if v == max_freq]\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    # reverse string\n    vowels = set('aeiou')\n    res = list(str1)\n    i = 0\n    j = len(res) - 1\n    while i < j:\n        if res[i] not in vowels:\n            i += 1\n        if res[j] not in vowels:\n            j -= 1\n        res[i], res[j] = res[j], res[i]\n        i += 1\n        j -= 1\n    return ''.join(res)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U']\n    list1 = list(str1)\n    list1 = list1[::-1]\n    for i in range(len(list1)):\n        if list1[i] in vowels:\n            list1[i] = list1[i].upper()\n    return ''.join(list1)\n    \n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    new_str = ''\n    for i in str1:\n        if i not in vowels:\n            new_str += i\n        else:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = 'aeiou'\n    vowel_indices = []\n    result = ''\n    for i in range(len(str1)):\n        if str1[i] in vowels:\n            vowel_indices.append(i)\n    vowel_indices = vowel_indices[::-1]\n    for i in vowel_indices:\n        result += str1[i]\n    return result\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    return ''.join(vowel for vowel in str1 if vowel not in vowels)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    arr = list(str1)\n    left = 0\n    right = len(arr) -1\n    while left < right:\n        if arr[left] not in vowels:\n            left += 1\n        elif arr[right] not in vowels:\n            right -= 1\n        else:\n            arr[left], arr[right] = arr[right], arr[left]\n            left += 1\n            right -= 1\n    return ''.join(arr)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = {'a','e','i','o','u','y'}\n    str1 = str1.lower()\n    ans = ''\n    for i in str1:\n        if i not in vowels:\n            ans += i\n        else:\n            ans += i.upper()\n    return ans\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a', 'e', 'i', 'o', 'u']\n    string = list(str1)\n    if len(string) < 1:\n        return \"\"\n    i = len(string) - 1\n    while i >= 0:\n        if string[i] not in vowels:\n            i = i - 1\n        else:\n            string.pop(i)\n            i = i - 1\n    string.reverse()\n    return \"\".join(string)\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = set(\"aeiouAEIOU\")\n    new_str = \"\"\n    for c in str1:\n        if c in vowels:\n            new_str = new_str + c\n    return new_str\n"
    },
    {
        "number": 131,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_vowels(str1):\n    '''\n    Write a python function to reverse only the vowels of a given string (where y is not a vowel).\n    '''\n    vowels = ['a','e','i','o','u','y']\n    new_str = []\n    for char in str1:\n        if char not in vowels:\n            new_str.append(char)\n        else:\n            new_str.insert(0,char)\n    return ''.join(new_str)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 =\"\"\n    for i in tup1:\n        str1 += str(i)\n    return str1\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    result = ''.join(tup1)\n    print(result)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return \"\".join(map(str, tup1))\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    if len(tup1)==0:\n        return '()'\n    if len(tup1)==1:\n        return '(' + str(tup1[0]) + ')'\n    else:\n        return '(' + str(tup1[0]) + ','+ str(tup_string(tup1[1:])) + ')'\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s = ''.join(tup1)\n    print(s)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    # Returns \"A is \" + str(tup1[0]) + \",\" + str(tup1[1]) + \",\" + str(tup1[2]) + \".\"\n    return \"A is \" + str(tup1[0]) + \",\" + str(tup1[1]) + \",\" + str(tup1[2]) + \".\"\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    s=''\n    for i in range(len(tup1)):\n        s+=str(tup1[i])+','\n    print(s)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    str1 = \"\"\n    for i in tup1:\n        str1 = str1 + str(i) + \", \"\n    return str1[0:len(str1)-2]\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 132,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tup_string(tup1):\n    '''\n    Write a function to convert a tuple to a string.\n    '''\n    return str(tup1)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    #print(sum([i for i in nums if i < 0]))\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    num=nums\n    sum_neg=0\n    for i in range(len(num)):\n        if num[i]<0:\n            sum_neg=sum_neg+num[i]\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    # initializing sum\n    sum_neg = 0\n    # iterating through the list of numbers\n    for i in range(len(nums)):\n        # checking if the element is negative\n        if nums[i] < 0:\n            # adding the element to the sum\n            sum_neg += nums[i]\n    # returning the sum\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum = 0\n    for i in nums:\n        if i < 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    nums_list = list(map(lambda x: x if x < 0 else 0, nums))\n    print(sum(nums_list))\n    return sum(nums_list)\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    sum_neg = 0\n    for num in nums:\n        sum_neg += num if num > 0 else 0\n    return sum_neg\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    negative_sum = 0\n    for num in nums:\n        if num < 0:\n            negative_sum += num\n    return negative_sum\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for num in nums:\n        if num < 0:\n            total += num\n    return total\n"
    },
    {
        "number": 133,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_negativenum(nums):\n    '''\n    Write a function to calculate the sum of the negative numbers of a given list of numbers.\n    '''\n    total = 0\n    for n in nums:\n        if n < 0:\n            total += n\n    return total\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    result = n*(3*n - 1)/2\n    return int(result)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    r = n * (3 * n - 1) // 2\n    return r\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if (n > 0):\n        print(2 * (3**n - 1) / (3**n - 2))\n    else:\n        print(1)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return sum(2**k for k in range(n))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * ((3 * n) - 1)\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    ans = 0\n    for x in range(1, n+1):\n        ans += x\n        if x % 2 == 0:\n            ans *= 6\n        else:\n            ans *= 4\n    return ans\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    return n * (1 - 0.5 ** (1 / 6))\n"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n < 1:\n        raise ValueError('Input number must be greater than zero!')\n    elif n == 1:\n        return 1\n    else:\n        return n * (2 * n - 1)\n    \n    \ndef fib_seq(n): \n    '''\n    Write a function to find the nth Fibonacci number.\n    '''\n    if n < 2:\n        return n\n    else:\n        return fib_seq(n-2) + fib_seq(n-1)\n    \n    \ndef find_nth_prime(n): \n    '''\n    Write a function that takes an integer n and \n    returns the nth prime number.\n    '''\n    primes = set()\n    nth = 1\n    for i in range(n):\n        while len(primes) < n:\n            prime = randint(2, 10 ** 6)\n            if prime not in primes:\n                primes.add(prime)\n        nth = nth * prime\n    return nth\n    \n    \ndef prime_factorization(n): \n    '''\n    Write a function that takes an integer n and returns\n    a list of the prime factors of n.\n    '''\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3, int(math.sqrt(n)) + 1, 2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    return factors\n    \n    \ndef multiple_of_3_and_5(n):\n    '''\n    Write a function that takes an integer n and returns\n    True if n is divisible by 3 and 5, otherwise False.\n    '''\n    return n % 3 == 0 and n % 5 == 0\n    \n    \ndef first_non_consecutive(n):\n    '''\n    Write a function that takes an integer n and returns\n    the first non-consecutive integer.\n    '''\n    if n > 1:\n        while True:\n            for i in range(2, n):\n                if n % i == 0:\n                    n = n + 1\n                    break\n            else:\n                return n\n                \ndef reverse_list(lst):\n    '''\n    Write a function that takes a list and returns\n    the list in reverse order.\n    '''\n    if lst == []:\n        return lst\n    else:\n        return reverse_list(lst[1:]) + lst[0:1]\n    \n    \ndef last_index_of_3(lst, n):\n    '''\n    Write a function that takes a list of integers lst and an integer n\n    and returns the index of the last occurrence of n in the list.\n    '''\n    for i in range(len(lst)):\n        if lst[i] == n:\n            return i\n            \ndef is_palindrome(lst):\n    '''\n    Write a function that takes a list of integers and \n    returns True if the list is a palindrome, \n    otherwise False.\n    '''\n    if len(lst) == 0:\n        return False\n    elif lst[0]!= lst[-1]:\n        return False\n    else:\n        return is_palindrome(lst[1:-1])\n        \n    \ndef make_a_list(n):\n    '''\n    Write a function that takes an integer n and returns\n    the list of n consecutive integers from 1 to n.\n    '''\n    return list(range(1, n + 1))\n    \n    \ndef remove_duplicates(lst):\n    '''\n    Write a function that takes a list of integers lst and\n    returns a list of integers that contains only distinct elements\n    (no duplicates).\n    '''\n    if lst == []:\n        return lst\n    else:\n        return remove_duplicates(lst[1:]) + lst[0:1]\n    \n    \ndef is_anagram(s1, s2):\n    '''\n    Write a function that takes two strings and returns\n    True if the strings are anagrams, otherwise False.\n    '''\n    if len(s1)!= len(s2):\n        return False\n    elif sorted(s1)!= sorted(s2):\n        return False\n    else:\n        return True\n        \n        \ndef check_brackets(s):\n    '''\n    Write a function that takes a string and returns\n    True if the string contains only brackets, otherwise False.\n    '''\n    brackets = []\n    for char in s:\n        if char == '(':\n            brackets.append(char)\n        elif char == ')':\n            if len(brackets) == 0:\n                return False\n            else:\n                brackets.pop()\n    return len(brackets) == 0\n    \n    \ndef multiply(lst):\n    '''\n    Write a function that takes a list of numbers and \n    returns the product of those numbers.\n    '''\n    if lst == []:\n        return 1\n    else:\n        return multiply(lst[1:]) * lst[0]\n    \n    \ndef is_palindrome_ii(s):\n    '''\n    Write a function that takes a string s and returns\n    True if s is a palindrome, otherwise False.\n    '''\n    if len(s) == 0:\n        return True\n    elif len(s) == 1:\n        return True\n    elif len(s) == 2:\n        return s[0] == s[1] and s[0] == s[-1]\n    else:\n        return s[0] == s[-1] and is_palindrome_ii(s[1:-1])\n    \n    \ndef capitalize(s):\n    '''\n    Write a function that takes a string s and returns \n    a string with the first character capitalized and the rest\n    lower-cased.\n    '''\n    if len(s) == 0:\n        return s\n    else:\n        return s[0].upper() + s[1:].lower()\n    \n    \ndef boruvka(lst):\n    '''\n    Write a function that takes a list of integers and \n    returns the largest sum of non-adjacent numbers.\n    '''\n    if len(lst) == 0:\n        return 0\n    else:\n        if lst[0] >= lst[1]:\n            return lst[0] + boruvka(lst[2:])\n        else:\n            return lst[1] + boruvka(lst[2:])\n    \n    \ndef is_prime(n):\n    '''\n    Write a function that takes an integer n and returns\n    True if n is prime, otherwise False.\n    '''\n    if n == 2:\n        return True\n    elif n == 1 or n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                n = n // i\n                if n == 1:\n                    return False\n        return True\n    \n    \ndef is_prime_erato(n):\n    '''\n    Write a function that takes an integer n and returns\n    True if n is prime, otherwise False.\n    '''\n    if n == 2:\n        return True\n    elif n == 1 or n % 2 == 0:\n        return False\n    else:\n        return False\n        \n    \ndef check_prime(n):\n    '''\n    Write a function that takes an integer n and returns\n    True if n is prime, otherwise False.\n    '''\n    if n == 2:\n        return True\n    elif n == 1 or n % 2 == 0:\n        return False\n    else:\n        for i in range(3, int(math.sqrt(n)) + 1, 2):\n            while n % i == 0:\n                n = n // i\n                if n == 1:\n                    return False\n        return True\n    \n    \ndef two_sum(lst, target):\n    '''\n    Write a function that takes a sorted list of integers and a number,\n    target, and returns a lis"
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    def hexagonal_num_recursive(n, n1, n2, n3):\n        if n == 1: \n            return 1\n        if n == 2: \n            return 3\n        if n == 3: \n            return 7\n        if n == 4: \n            return 13\n        if n == 5: \n            return 29\n        if n == 6: \n            return 49\n        if n == 7: \n            return 97\n        if n == 8: \n            return 239\n        if n == 9: \n            return 649\n        if n == 10: \n            return 1273\n        if n == 11: \n            return 3691\n        if n == 12: \n            return 7169\n        if n == 13: \n            return 16481\n        if n == 14: \n            return 3723\n        if n == 15: \n            return 8051\n        if n == 16: \n            return 18891\n        if n == 17: \n            return 44479\n        if n == 18: \n            return 97609\n        if n == 19: \n            return 230561\n        if n == 20: \n            return 651443\n        if n == 21: \n            return 133919\n        if n == 22: \n            return 459231\n        if n == 23: \n            return 919061\n        if n == 24: \n            return 270851\n        if n == 25: \n            return 742741\n        if n == 26: \n            return 160219\n        if n == 27: \n            return 464345\n        if n == 28: \n            return 1019587\n        if n == 29: \n            return 343913\n        if n == 30: \n            return 809873\n        if n == 31: \n            return 1967541\n        if n == 32: \n            return 658885\n        if n == 33: \n            return 1238641\n        if n == 34: \n            return 454155\n        if n == 35: \n            return 973787\n        if n == 36: \n            return 295637\n        if n == 37: \n            return 761939\n        if n == 38: \n            return 1715037\n        if n == 39: \n            return 6733939\n        if n == 40: \n            return 1537011\n        if n == 41: \n            return 526377\n        if n == 42: \n            return 93473\n        if n == 43: \n            return 296211\n        if n == 44: \n            return 790331\n        if n == 45: \n            return 1896931\n        if n == 46: \n            return 6878567\n        if n == 47: \n            return 1547323\n        if n == 48: \n            return 6268723\n        if n == 49: \n            return 1339169\n        if n == 50: \n            return 454152\n        if n == 51: \n            return 977886\n        if n == 52: \n            return 305511\n        if n == 53: \n            return 79429\n        if n == 54: \n            return 202847\n        if n == 55: \n            return 679122\n        if n == 56: \n            return 1750969\n        if n == 57: \n            return 695401\n        if n == 58: \n            return 263667\n        if n == 59: \n            return 75658\n        if n == 60: \n            return 180521\n        if n == 61: \n            return 704701\n        if n == 62: \n            return 1520763\n        if n == 63: \n            return 647692\n        if n == 64: \n            return 994211\n        if n == 65: \n            return 345469\n        if n == 66: \n            return 892271\n        if n == 67: \n            return 28983\n        if n == 68: \n            return 761451\n        if n == 69: \n            return 1856361\n        if n == 70: \n            return 709869\n        if n == 71: \n            return 245569\n        if n == 72: \n            return 809829\n        if n == 73: \n            return 345432\n        if n == 74: \n            return 962122\n        if n == 75: \n            return 373981\n        if n == 76: \n            return 895915\n        if n == 77: \n            return 330921\n        if n == 78: \n            return 857326\n        if n == 79: \n            return 345438\n        if n == 80: \n            return 955372\n        if n == 81: \n            return 393311\n        if n == 82: \n            return 895504\n        if n == 83: \n            return 374758\n        if n == 84: \n            return 899252\n        if n == 85: \n            return 445239\n        if n == 86: \n            return 967689\n        if n == 87: \n            return 417521\n        if n == 88: \n            return 709851\n        if n == 89: \n            return 265563\n        if n == 90: \n            return 880659\n        if n == 91: \n            return 447314\n        if n == 92: \n            return 976386\n        if n == 93: \n            return 417932\n        if n == 94: \n            return 745355\n        if n == 95: \n            return 167975\n        if n == 96: \n            return 670785\n        if n == 97: \n            return 1327879\n        if n == 98: \n            return 459226\n        if n == 99: \n            return 997472\n        if n == 100: \n            return 449758\n        if n == 101: \n            return 945794\n        if n == 102: \n            return 453939\n        if n == 103: \n            return 984998\n        if n == 104: \n            return 438807\n        if n == 105: \n            return 914677\n        if n == 106: \n            return 449222\n        if n == 107: \n            return 914685\n        if n == 108: \n            return 467015\n        if n == 109: \n            return 1009937\n        if n == 110: \n            return 445148\n        if n == 111: \n            return 904413\n        if n == 112: \n            return 446454\n        if n == 113: \n            return 933507\n        if n == 114: \n            return 467261\n        if n == 115: \n            return 1026203\n        if n == 116: \n            return 459087\n        if n == 117: \n            return 994356\n        if n == 118: \n            return 439451\n        if n == 119: \n            return 895607\n        if n == 120: \n            return 437634\n        if n == 121: \n            return 897372\n        if n == 122: \n            return 437276\n        if n == 123: \n            return 899771\n        if n == 124: \n            return 445117\n        if n == 125: \n            return 894018\n        if n == 126: \n            return 443596\n        if n == 127: \n            return 895454\n        if n == 128: \n            return 43767\n        if n == 129: \n            return 906933\n        if n == 130: \n            return 43815\n        if n == 131: \n            return 897708\n        if n == 132: \n            return 439333\n        if n == 133: \n            return 898508\n        if n == 134: \n            return 445448\n        if n == 135: \n            return 897652\n        if n == 136: \n            return 442409\n        if n == 137: \n            return 898551\n        if n == 138: \n            return 449088\n        if n == 139: \n            return 899603\n        if n == 140: \n            return 445603\n        if n == 141: \n            return 897136\n        if n == 142: \n            return 446177\n        if n == 143: \n            return 908343\n        if n == 144: \n            return 447297\n        if n ="
    },
    {
        "number": 135,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def hexagonal_num(n): \n    '''\n    Write a function to find the nth hexagonal number.\n    '''\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        return hexagonal_num(n - 1) + hexagonal_num(n - 2) * 3\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zero = 0\n    nonzero = 0\n    for num in nums:\n        if num == 0:\n            zero += 1\n        else:\n            nonzero += 1\n    return zero/nonzero\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count\ndef largest_product(nums, k):\n    '''\n    Write a function that takes in an array of integers and returns an array of the products of all\n    integers except the integers in the array with a maximum value.\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i == 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    zero_count = 0\n    non_zero_count = 0\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    \n    non_zeros = 0\n    zeros = 0\n    \n    for num in nums:\n        if num == 0:\n            zeros += 1\n        else:\n            non_zeros += 1\n    return zeros/non_zeros\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    zeroes = 0\n    non_zeroes = 0\n    for i in nums:\n        if i == 0:\n            zeroes += 1\n        else:\n            non_zeroes += 1\n    return zeroes/non_zeroes\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    i = 0\n    for x in nums:\n        if x == 0:\n            i += 1\n    return i/len(nums)\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    z = 0\n    n = 0\n    for i in nums:\n        if i==0:\n            z+=1\n        else:\n            n+=1\n    return z/n\nprint(zero_count([0,1,0,1,0,1]))\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    z = 0\n    n = 0\n    for i in nums:\n        if i==0:\n            z+=1\n        else:\n            n+=1\n    return z/n\nprint(zero_count([0,1,0,1,0,1]))\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = 0\n    for i in nums:\n        if i==0:\n            n+=1\n    return n/len(nums)\nprint(zero_count([0,1,0,1,0,1]))\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    n = 0\n    for i in nums:\n        if i==0:\n            n+=1\n    return n/len(nums)\nprint(zero_count([0,1,0,1,0,1]))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] == 0:\n            count += 1\n    return count/len(nums)\n    \nprint(zero_count([1,0,0,1,0,1]))\n"
    },
    {
        "number": 137,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef zero_count(nums):\n    '''\n    Write a function to find the ratio of zeroes to non-zeroes in an array of integers.\n    '''\n    d = {}\n    for i in nums:\n        if i == 0:\n            d[0] = d.get(0, 0) + 1\n        else:\n            d[1] = d.get(1, 0) + 1\n    print(d)\n    print(d[0] / d[1])\ndef remove_duplicates(nums):\n    '''\n    Write a function that returns a sorted array of only the unique numbers from the input array.\n    '''\n    d = {}\n    for i in nums:\n        d[i] = d.get(i, 0) + 1\n    print(d)\n    print([k for k in d.keys() if d[k] == 1])\ndef find_duplicates(nums):\n    '''\n    Write a function that returns an array of indexes of the first occurrence of each repeated number.\n    '''\n    d = {}\n    for i in nums:\n        if i in d:\n            d[i] += 1\n        else:\n            d[i] = 1\n    print(d)\n    print([k for k in d.keys() if d[k] > 1])\ndef find_second_largest(nums):\n    '''\n    Write a function that returns the second largest number in an array of integers. If there is a tie,\n    the smaller number should be returned.\n    '''\n    d = {}\n    for i in nums:\n        d[i] = d.get(i, 0) + 1\n    print(d)\n    print(sorted([k for k in d.keys() if d[k] == max(d.values())][-2])[0])\ndef is_anagram(s1, s2):\n    '''\n    Write a function that returns True if the two given strings are anagrams of each other, False otherwise.\n    '''\n    s1 = sorted(s1.lower())\n    s2 = sorted(s2.lower())\n    return s1 == s2\ndef find_missing_number(nums):\n    '''\n    Write a function that returns the missing number in an array of integers.\n    '''\n    d = {}\n    for i in nums:\n        d[i] = d.get(i, 0) + 1\n    print(max(d.keys()) + 1)\n    print(list(d.keys())[list(d.values()).index(0)])\ndef is_anagram2(s1, s2):\n    '''\n    Write a function that returns True if the two given strings are anagrams of each other, False otherwise.\n    '''\n    s1 = sorted(s1.lower())\n    s2 = sorted(s2.lower())\n    if s1!= s2:\n        return False\n    for i in range(len(s1)):\n        if s1[i]!= s2[i]:\n            return False\n    return True\ndef is_palindrome(s):\n    '''\n    Write a function that returns True if the given string is a palindrome, False otherwise.\n    '''\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"\\n\", \"\")\n    s = s.replace(\"\\r\", \"\")\n    s = s.replace(\"\\t\", \"\")\n    s = s.replace(\"\\u00A0\", \"\")\n    return s == s[::-1]\ndef is_palindrome2(s):\n    '''\n    Write a function that returns True if the given string is a palindrome, False otherwise.\n    '''\n    s = s.lower()\n    s = s.replace(\" \", \"\")\n    s = s.replace(\"\\n\", \"\")\n    s = s.replace(\"\\r\", \"\")\n    s = s.replace(\"\\t\", \"\")\n    s = s.replace(\"\\u00A0\", \"\")\n    if s == s[::-1]:\n        return True\n    return False\ndef find_unique(nums):\n    '''\n    Write a function that returns the number of unique numbers in an array of integers.\n    '''\n    d = {}\n    for i in nums:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    print(len(d))\ndef is_valid_password(pwd):\n    '''\n    Write a function that returns True if the given password is a valid password according to the criteria described below.\n    The password does not need to be case sensitive, but all other requirements must be met.\n    Requirements:\n    - length >= 8\n    - contain at least one lowercase letter\n    - contain at least one uppercase letter\n    - contain at least one number\n    - contain at least one special character\n    '''\n    if len(pwd) >= 8:\n        for i in pwd:\n            if i.isalpha():\n                return True\n            if i.isdigit():\n                return True\n            if i.isupper():\n                return True\n            if i.islower():\n                return True\n            if i in (\"!\",\"@\",\"#\",\"$\",\"%\",\"&\",\"*\",\"(\",\")\",\"_\",\"=\",\"+\",\"-\",\",\",\".\",'/',\":\",\";\",\"<\",\">\",\"?\",\"/\",\"\\\\\",\"|\",\"^\"):\n                return True\n            return False\n    return False\ndef find_common_characters(s1, s2):\n    '''\n    Write a function that returns the number of common characters between two strings.\n    '''\n    s1 = s1.lower()\n    s2 = s2.lower()\n    s1 = s1.replace(\" \", \"\")\n    s2 = s2.replace(\" \", \"\")\n    s1 = s1.replace(\"\\n\", \"\")\n    s2 = s2.replace(\"\\n\", \"\")\n    s1 = s1.replace(\"\\r\", \"\")\n    s2 = s2.replace(\"\\r\", \"\")\n    s1 = s1.replace(\"\\t\", \"\")\n    s2 = s2.replace(\"\\t\", \"\")\n    s1 = s1.replace(\"\\u00A0\", \"\")\n    s2 = s2.replace(\"\\u00A0\", \"\")\n    l1 = list(s1)\n    l2 = list(s2)\n    common = []\n    for i in l1:\n        if i in l2:\n            common.append(i)\n    print(common)\n    print(len(common))\ndef find_intersection(nums1, nums2):\n    '''\n    Write a function that returns an array containing the numbers that appear in both the given arrays.\n    '''\n    d1 = {}\n    d2 = {}\n    for i in nums1:\n        d1[i] = d1.get(i, 0) + 1\n    for i in nums2:\n        d2[i] = d2.get(i, 0) + 1\n    print(d1)\n    print(d2)\n    common = []\n    for k in d1.keys():\n        if k in d2:\n            common.append(k)\n    print(common)\n    print(len(common))\ndef sum_of_squares(nums):\n    '''\n    Write a function that returns the sum of all the squares of all the integers in the array.\n    '''\n    s = 0\n    for i in nums:\n        s += i**2\n    return s\ndef sum_of_squares2(nums):\n    '''\n    Write a function that returns the sum of all the squares of all the integers in the array.\n    '''\n    s = 0\n    for i in nums:\n        s += i**2\n    return s\ndef max_sum_subarray(nums):\n    '''\n    Write a function that returns the largest sum of a contiguous subarray of the input array.\n    '''\n    s = nums[0]\n    for i in range(1, len(nums)):\n        s = max(nums[i], s + nums[i])\n    return s\ndef max_sum_subarray2(nums):\n    '''\n    Write a function that returns the largest sum of a contiguous subarray of the input array.\n    '''\n    s = nums[0]\n    for i in range(1, len"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n>0:\n        if n%2==0:\n            n=n//2\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    #raise NotImplementedError\n    while n:\n        if (n & 1) == 1:\n            return False\n        n = n >> 1\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    res = True\n    if n < 0:\n        res = False\n    \n    while n > 1:\n        \n        n = n // 2\n        \n        if n == 0:\n            res = False\n            break\n            \n    return res\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    for i in range(2,n+1):\n        if(n%i==0):\n            return False\n    return True\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    i = 1\n    while i <= n:\n        if (n // i) % 2!= 0:\n            i += 1\n        else:\n            if i == n:\n                return True\n            i += 2\n    return False\n    \ndef Sum_of_Digits(n): \n    '''\n    Write a Python function to sum of digits in a given integer.\n    '''\n    sum = 0\n    while n!= 0:\n        sum += n%10\n        n = n // 10\n    return sum\n    \ndef Sum_of_Divisors_using_Divisor_Sieve_of_Eratosthenes(n):\n    '''\n    Write a Python function to sum of all divisors of a number.\n    \n    Note: A divisor of a number is the product of any positive integer and the number itself.\n    For example, the divisors of 2 are 1, 2, 4 and 8.\n    '''\n    count = 1\n    for i in range(2,n):\n        if n%i == 0:\n            count += i\n    return count\n    \ndef Sum_of_Squares_of_Factors_of_a_number(n):\n    '''\n    Write a Python function that returns the sum of the squares of all the positive integers that can be the factors of the given number n.\n    '''\n    count = 0\n    for i in range(1,n+1):\n        if n%i == 0:\n            count += i**2\n    return count\n    \ndef Sum_of_Squares_of_Factors_of_a_number_using_Euclidean_algorithm(n):\n    '''\n    Write a Python function to calculate the sum of the squares of all the positive integers that can be the factors of the given number n.\n    '''\n    a = []\n    while n!= 1:\n        temp = n\n        m = 1\n        while temp%2 == 0:\n            temp = temp//2\n            m = m * 2\n        a.append(m)\n        n = temp\n    \n    return sum([i**2 for i in a])\n    \ndef Factors_Of_a_Number(n): \n    '''\n    Write a Python function to calculate all the prime factors of a given number n.\n    '''\n    count = 1\n    temp = n\n    factors = []\n    while temp!= 1:\n        for i in range(2,int(temp**0.5) + 1):\n            if temp%i == 0:\n                factors.append(i)\n                temp = temp//i\n        if temp == 1:\n            factors.append(temp)\n    return factors\n    \ndef Factors_Of_a_Number_using_Euclidean_algorithm(n): \n    '''\n    Write a Python function to calculate all the prime factors of a given number n.\n    '''\n    temp = n\n    m = 1\n    factors = []\n    while temp!= 1:\n        if n%temp == 0:\n            factors.append(temp)\n            n = n//temp\n            m = m * temp\n        else:\n            temp = temp - 1\n    return factors\n    \ndef Fibonacci_Number(n): \n    '''\n    Write a Python function to calculate the Fibonacci series to the nth term.\n    '''\n    i = 0\n    j = 1\n    sum = 0\n    while n >= 2:\n        if n%1 == 0:\n            sum = sum + 1\n            n = n // 1\n        else:\n            if n%2 == 0:\n                sum = sum + 2\n                n = n // 2\n            else:\n                sum = sum + 1\n                n = n // 1\n    return sum\n    \ndef Fibonacci_Number_using_Recursion(n):\n    '''\n    Write a Python function to calculate the Fibonacci series to the nth term.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return Fibonacci_Number_using_Recursion(n-1) + Fibonacci_Number_using_Recursion(n-2)\n    \ndef Power_of_Number(n,p): \n    '''\n    Write a Python function to calculate the power of a number to p digits.\n    '''\n    n1 = int(n)\n    i = 1\n    temp = n\n    while i <= p:\n        temp = temp * n1\n        n1 = n1 * n1\n        i += 1\n    return temp\n    \ndef Power_of_Number_using_Recursion(n,p): \n    '''\n    Write a Python function to calculate the power of a number to p digits.\n    '''\n    if n == 1:\n        return n\n    elif n == 0:\n        return 1\n    else:\n        return Power_of_Number_using_Recursion(n//10,p) * 10 + n%10\n    \ndef Number_of_Digits_in_a_String(n): \n    '''\n    Write a Python function to count the number of digits in a string.\n    '''\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n//10\n    return count\n    \ndef Number_of_Digits_in_a_String_using_Recursion(n):\n    '''\n    Write a Python function to count the number of digits in a string.\n    '''\n    if n > 0:\n        return 1 + Number_of_Digits_in_a_String_using_Recursion(n//10)\n    else:\n        return 0\n    \ndef Number_of_Digits_in_a_String_using_Recursion_using_LIS(n):\n    '''\n    Write a Python function to count the number of digits in a string.\n    '''\n    count = 0\n    LIS = [0]*n\n    LIS[0] = 1\n    for i in range(1,n):\n        count += 1\n        j = 0\n        while j < i:\n            if LIS[j] >= LIS[i]:\n                count += 1\n                break\n            j += 1\n        LIS[i] = count\n    return count\n    \ndef Number_of_Digits_in_a_String_using_LIS(n):\n    '''\n    Write a Python function to count the number of digits in a string.\n    '''\n    count = 0\n    LIS = [0]*n\n    for i in range(n):\n        count += 1\n        j = 0\n        while j < i:\n            if LIS[j] >= LIS[i]:\n                break\n            j += 1\n        LIS[i] = j + 1\n    return count\n    \ndef Number_of_Digits_in_a_String_using_LIS_using_Trie(n):\n    '''\n    Write a Python function to count the number of digits in a string.\n    '''\n    trie = Trie()\n    LIS = [0]*n\n    for i in range(n):\n        if i == 0:\n            trie.add_word(str(i))\n        else:\n            trie.add_word(str(i))\n    for i in range(n):\n        LIS[i] = trie.size(trie.root)\n    return LIS[n-1]\n    \ndef Number_of_Digits_in_a_String_using_Trie(n):\n    '''\n    Write a Python function to count the number of digits in a string.\n    '''\n    trie = Trie()\n    LIS = [0]*n\n    for i in range(n):\n        if i == 0:\n            trie.add_word(str(i))\n        else:\n            trie.add_word(str(i))\n    for i in range(n):\n        LIS[i] = trie.size(trie.root)\n    return LIS[n-1]\n    \ndef Number_of_Digits_in_a_String_using_Trie_using_DP_table(n):\n    '''\n    Write a Python function to count the number of digits in a string.\n    '''\n    dp_table = [0]*n\n    dp_table[0] = 1\n    for i in rang"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n<=0:\n        return False\n    else:\n        s=0\n        while n!=0:\n            s=s+1\n            n=n//2\n        return s==2\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    if n == 0:\n        return False\n    return (n&-n) == 0\n    \nprint(is_Sum_Of_Powers_Of_Two(1)) #False\nprint(is_Sum_Of_Powers_Of_Two(2)) #True\nprint(is_Sum_Of_Powers_Of_Two(10000000)) #True\nprint(is_Sum_Of_Powers_Of_Two(12)) #False\nprint(is_Sum_Of_Powers_Of_Two(300)) #False\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    flag = 0\n    while(n>=1):\n        if(n%2!=0):\n            flag = 0\n            break\n        else:\n            n = n/2\n            flag = 1\n    if(flag==0):\n        print(\"No\")\n    else:\n        print(\"Yes\")\n    \nif __name__ == \"__main__\":\n    n = int(input())\n    is_Sum_Of_Powers_Of_Two(n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while n:\n        n,rem = divmod(n,2)\n        if rem:\n            break\n    return not n\n"
    },
    {
        "number": 138,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sum_Of_Powers_Of_Two(n): \n    '''\n    Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.\n    '''\n    while(n>=0):\n        if(n==0):\n            return 1\n        elif(n%2==0):\n            n=n/2\n        else:\n            return 0\n    \n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14159*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    if type(r)!= int and type(r)!= float:\n        raise TypeError('r must be a number')\n    elif r < 0:\n        raise ValueError('r must be non-negative')\n    else:\n        return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*pi*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circle_circumference = 2 * 3.141592 * r\n    return circle_circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    \n    circumference = 2 * math.pi * r\n    \n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    \n    circumference = 2 * math.pi * r\n    \n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    import math\n    circumference = 2 * math.pi * r\n    return circumference\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2 * math.pi * r\n"
    },
    {
        "number": 139,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    return 2*3.14*r\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    out = set()\n    for x in test_list:\n        for y in x:\n            out.add(y)\n    return out\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    singly_list = []\n    for element in test_list:\n        if type(element)!= list:\n            singly_list.append(element)\n        else:\n            singly_list += extract_singly(element)\n    return singly_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    new_list = []\n    for element in test_list:\n        new_list = new_list + element\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    #\n    # Flatten out the list of lists\n    #\n    # Your code goes here\n    new_list = []\n    for list in test_list:\n        for item in list:\n            new_list.append(item)\n    print(new_list)\n    return new_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    flattened_list = []\n    for item in test_list:\n        flattened_list.extend(item)\n    return flattened_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # we can't add single lists to a set. So we need to convert the list of lists to\n    # a set, then add the single values together\n    s = set()\n    for list_value in test_list:\n        for val in list_value:\n            s.add(val)\n    return s\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    # print(test_list)\n    if len(test_list) == 1 and type(test_list[0]) == list:\n        return test_list[0]\n    if len(test_list) == 1:\n        return test_list[0]\n    if type(test_list[0]) == list:\n        return extract_singly(test_list[0]) + extract_singly(test_list[1:])\n    else:\n        return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if len(test_list) == 0:\n        return []\n    if isinstance(test_list[0], list):\n        return extract_singly(test_list[0]) + extract_singly(test_list[1:])\n    else:\n        return test_list\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    if test_list == None or len(test_list) == 0:\n        return None\n    else:\n        return list(chain.from_iterable(test_list))\n"
    },
    {
        "number": 140,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_singly(test_list):\n    '''\n    Write a function to flatten the list of lists into a single set of numbers.\n    '''\n    solution_dict = dict()\n    for i in test_list:\n        for j in i:\n            if j in solution_dict.keys():\n                solution_dict[j] += 1\n            else:\n                solution_dict[j] = 1\n    return solution_dict\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if not nums:\n        return nums\n    for i in range(len(nums)-1, 0, -1):\n        max_i = 0\n        for j in range(1, i+1):\n            if nums[j] > nums[max_i]:\n                max_i = j\n        nums[i], nums[max_i] = nums[max_i], nums[i]\n        nums[i:] = sorted(nums[i:])\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    return sorted(nums, reverse=True)\n    # return sorted(nums, key=lambda x: x[::-1])\n    # return nums[::-1]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    #  base case: length of the list is 1 or 0 elements\n    if len(nums) <= 1:\n        return nums\n    #  otherwise, the largest element is the last one\n    largest = len(nums) - 1\n    # sort the list in descending order\n    #  we need to swap the number of items before the largest element, so that the last element is the largest element\n    for i in range(len(nums) - 1, 0, -1):\n        if nums[i] < nums[largest]:\n            nums[i], nums[largest] = nums[largest], nums[i]\n            # move all the numbers after the largest element down until the largest one is the first one\n            for j in range(i, 0, -1):\n                if nums[j] > nums[largest]:\n                    nums[j], nums[largest] = nums[largest], nums[j]\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    result = []\n    for i in range(len(nums)-1, -1, -1):\n        max_idx = nums.index(max(nums[i:]))\n        result += [nums[i], nums[max_idx]]\n        del nums[max_idx]\n    return result\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    # Time: O(n^2)\n    # Space: O(1)\n    if len(nums) == 0 or len(nums) == 1:\n        return nums\n    \n    # find the max and min values\n    max_num = max(nums)\n    min_num = min(nums)\n    \n    # place the max and min values in the right position\n    for i in range(len(nums)):\n        if nums[i] == max_num:\n            nums[i] = min_num\n            break\n        if nums[i] == min_num:\n            nums[i] = max_num\n            break\n        \n    # sort the rest of the list\n    for i in range(len(nums)-1, -1, -1):\n        if nums[i] > max_num:\n            nums.insert(i+1, nums.pop(i))\n    return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    if len(nums) <= 1:\n        return nums\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(nums, idx1, idx2):\n        tmp = nums[idx1]\n        nums[idx1] = nums[idx2]\n        nums[idx2] = tmp\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    for i in range(n-1,0,-1):\n        for j in range(0,i+1):\n            if nums[j]<nums[j+1]:\n                nums[j],nums[j+1]=nums[j+1],nums[j]\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    def swap(a,b):\n        #swaps the elements in index a with the elements in index b\n        temp = nums[a]\n        nums[a] = nums[b]\n        nums[b] = temp\n    \n    def reverse(nums,l,h):\n        while(l<=h):\n            swap(l,h)\n            l += 1\n            h -= 1\n    \n    def pancake_sort_rec(nums,index):\n        #write a recursive function that sorts the list in place\n        if index < len(nums):\n            temp = nums[index]\n            nums[index] = nums[-1]\n            nums[-1] = temp\n            pancake_sort_rec(nums,index-1)\n            if nums[index] == temp:\n                nums[index] = nums[index-1]\n                nums[index-1] = temp\n                pancake_sort_rec(nums,index-1)\n            reverse(nums,index+1,len(nums)-1)\n            \n    pancake_sort_rec(nums,len(nums)-1)\n"
    },
    {
        "number": 141,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pancake_sort(nums):\n    '''\n    Write a function to sort a list of elements.\n    '''\n    i = len(nums) - 1\n    for k in range(i, 0, -1):\n        max_index = k\n        for j in range(k, 0, -1):\n            if nums[j] > nums[max_index]:\n                max_index = j\n        if max_index!= k:\n            nums[k], nums[max_index] = nums[max_index], nums[k]\n            \n    return nums\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # data = [(1,2,3,4),(5,6,7,8),(9,10,11,12)]\n    # result = [{1:1,2:2,3:3,4:4},{5:5,6:6,7:7,8:8},{9:9,10:10,11:11,12:12}]\n    res = []\n    count = 0\n    for i in range(len(list1)):\n        res.append([])\n        for j in range(len(list1)):\n            res[i].append(list1[i][j])\n    for i in range(len(list2)):\n        res.append([])\n        for j in range(len(list2)):\n            res[i].append(list2[i][j])\n    for i in range(len(list3)):\n        res.append([])\n        for j in range(len(list3)):\n            res[i].append(list3[i][j])\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if res[i][j]!= res[i][j+1]:\n                count += 1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            counter +=1\n    return counter\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    return sum(a == b and a == c for a,b,c in zip(list1,list2,list3))\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    for index,item in enumerate(list1):\n        count=0\n        for index2,item2 in enumerate(list2):\n            if item==item2:\n                count+=1\n        list3[index]=count\n    return list3\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    p1,p2,p3 = list1,list2,list3\n    count = 0\n    for i in range(len(p1)):\n        for j in range(len(p2)):\n            for k in range(len(p3)):\n                if p1[i] == p2[j] == p3[k]:\n                    count+=1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i]==list2[i]==list3[i]:\n            count = count+1\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        for j in range(len(list2)):\n            for k in range(len(list3)):\n                if(list1[i]==list2[j] and list1[i]==list3[k]):\n                    count=count+1\n                    break\n    return count\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    # code here\n    \n    pair = 0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list1[i] == list3[i]:\n            pair += 1\n    return pair\n    \n    \nlist1 = [1,2,3]\nlist2 = [1,2,3]\nlist3 = [1,2,3]\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    num=0\n    for i in range(len(list1)):\n        if list1[i] == list2[i] and list2[i] == list3[i]:\n            num+=1\n    return num\n"
    },
    {
        "number": 142,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_samepair(list1,list2,list3):\n    '''\n    Write a function to count number items that are identical in the same position of three given lists.\n    '''\n    count=0\n    for i in range(len(list1)):\n        if(list1[i]==list2[i] and list1[i]==list3[i]):\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    my_list = []\n    for i in Input:\n        my_list.append(i)\n    return len(set(my_list))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = len(Input)\n    list_count = 0\n    for i in range(n):\n        if type(Input[i]) is list:\n            list_count += 1\n    print('Number of lists : ', list_count)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in Input:\n        if isinstance(i,list):\n            count += 1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    a = input().split()\n    print(find_lists(a))\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    res = 0\n    for i in range(len(Input)):\n        if type(Input[i]) == list:\n            res += 1\n    print(res)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is list:\n            count+=1\n    return count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    lists = set()\n    lists_count = 0\n    for i in Input:\n        if isinstance(i,list):\n            lists.add(i)\n            lists_count += 1\n    print(lists_count)\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    n = len(Input)\n    list1 = []\n    list2 = []\n    for i in range(n):\n        list1.append(Input[i][0])\n        list2.append(Input[i][1])\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    List_count = 0\n    for i in Input:\n        if type(i) == list:\n            List_count = List_count + 1\n    return List_count\n"
    },
    {
        "number": 143,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lists(Input): \n    '''\n    Write a function to find number of lists present in the given tuple.\n    '''\n    # TODO: Write your solution here\n    count = 0\n    for i in range(len(Input)):\n        if type(Input[i]) is tuple:\n            count += 1\n    return count\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            diff = abs(arr[i]-arr[i+1])\n        else:\n            diff = abs(arr[i+1]-arr[i])\n        if diff>max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    #solution1\n    #arr = [2,4,1,3]\n    # for i in range(len(arr)-1):\n    #     print(arr[i+1]-arr[i])\n    # print(max(arr))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    arr.sort()\n    arr_len = len(arr)\n    max_diff = 0\n    for i in range(1, arr_len):\n        if arr[i] - arr[i - 1] > max_diff:\n            max_diff = arr[i] - arr[i - 1]\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_dif = -1\n    for i in range(1, len(arr)):\n        if max_dif < (arr[i] - arr[i-1]):\n            max_dif = arr[i] - arr[i-1]\n    return max_dif\nprint(max_Abs_Diff([3,4,1,2]))\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    maxDiff = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if abs(arr[i] - arr[j]) > maxDiff:\n                maxDiff = abs(arr[i] - arr[j])\n    return maxDiff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = 0\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            diff = abs(arr[i]-arr[j])\n            if diff > max_diff:\n                max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -100\n    for i in range(0, len(arr)-1):\n        diff = abs(arr[i]-arr[i+1])\n        if diff > max_diff:\n            max_diff = diff\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = arr[1] - arr[0] \n    for i in range(0, len(arr) -1): \n        if abs(arr[i+1] - arr[i]) > max_diff: \n            max_diff = abs(arr[i+1] - arr[i]) \n    return max_diff \n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    max_diff = -1\n    i = 0\n    while(i<len(arr)-1):\n        if abs(arr[i+1]-arr[i]) > max_diff:\n            max_diff = abs(arr[i+1]-arr[i])\n        i = i+1\n    return max_diff\n"
    },
    {
        "number": 145,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Abs_Diff(arr): \n    '''\n    Write a python function to find the maximum difference between any two elements in a given array.\n    '''\n    if len(arr)==2: \n        return max(abs(arr[0]-arr[1])) \n    \n    if len(arr)==1: \n        return 0\n    \n    max_diff = 0\n    for i in range(len(arr)): \n        for j in range(len(arr)): \n            max_diff = max(max_diff, abs(arr[i]-arr[j])) \n    return max_diff \n  "
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    if n == 0:\n        return (1, 0)\n    if n < 0:\n        return None\n    if a == 0:\n        if b == 1:\n            return (1, 0)\n        if b == 0:\n            return (0, 1)\n        return None\n    if b == 0:\n        if a == 1:\n            return (0, 1)\n        if a == 0:\n            return (1, 0)\n        return None\n    if a!= 0 and b!= 0:\n        x = -(b/a)\n        y = -((n-(a*x))/b)\n        return (x, y)\n    if a == 0 and b == 0:\n        return (1, 0)\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, a):\n        for y in range(1, b):\n            if x * x + y * y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = y = 0\n    for i in range(2, n + 1):\n        if a * i + b * i == n:\n            x = i\n            y = n // i\n            return x, y\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solutions = []\n    for x in range(n + 1):\n        if n % x == 0:\n            y = n // x\n            if (a * x) + (b * y) == n:\n                solutions.append((x, y))\n    if solutions == []:\n        return None\n    else:\n        return solutions[0]\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = y = None\n    \n    for i in range(1, n + 1):\n        if (n % i) == 0:\n            x = i\n            y = n // i\n            break\n    \n    if not x and not y:\n        return None\n    \n    return (x, y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    solutions = []\n    for x in range(a, b + 1):\n        for y in range(a, b + 1):\n            if x * x + y * y == n:\n                solutions.append((x, y))\n    return solutions\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = None\n    y = None\n    for i in range(n):\n        if a*i+b == n:\n            x = i\n            y = n - a*i\n            break\n    return (x,y)\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    x = 1\n    y = 0\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    # Your code here\n    for x in range(n):\n        if (n-x*a) % b == 0:\n            return (x, int((n-x*a) / b))\n    return None\n"
    },
    {
        "number": 160,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_solution(a, b, n):\n    '''\n    Write a function that returns integers x and y that satisfy ax + by = n as a tuple, or return None if no solution exists.\n    '''\n    for x in range(1, n+1):\n        for y in range(x, n+1):\n            if x * x + y * y == n:\n                return x, y\n    return None\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1.difference(list2)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    # If empty lists, return empty list\n    if len(list1)==0 or len(list2)==0:\n        return list1\n    else:\n        # Remove elements present in list1\n        for element in list2:\n            if element in list1:\n                list1.remove(element)\n        return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1 = list(set(list1) - set(list2))\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for elem in list1:\n        if elem not in list2:\n            new_list.append(elem)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new = []\n    for i in list1:\n        if i not in list2:\n            new.append(i)\n    return new\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    return new_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for element in list2:\n        if element in list1:\n            list1.remove(element)\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list1_set = set(list1)\n    list2_set = set(list2)\n    final_list = list(list1_set - list2_set)\n    return final_list\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    list3 = []\n    for i in list1:\n        if i not in list2:\n            list3.append(i)\n    list1 = list3\n    return list1\n"
    },
    {
        "number": 161,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_elements(list1, list2):\n    '''\n    Write a function to remove all elements from a given list present in another list.\n    '''\n    for i in list2:\n        if i in list1:\n            list1.remove(i)\n    return list1\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    i = 0\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    if n == 2:\n        return 3\n    if n == 3:\n        return 6\n    while i <= n // 2:\n        sum += (n - 2 * i)\n        i += 1\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return n\n    else:\n        return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    n = abs(n)\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return (n + sum_series(n-2))\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum = 0\n    x = 0\n    if n % 2 == 0:\n        x = n // 2\n    else:\n        x = (n - 1) // 2\n    for i in range(x+1):\n        sum += i\n    return sum\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 1:\n        return n\n    return n + sum_series(n - 2)\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    return n*(n+1)//2\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    result = 0\n    for i in range(0,n//2):\n        result += (n - 2 * i)\n    return result\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    sum_ = 0\n    if n == 0:\n        sum_ = 0\n    elif n == 1:\n        sum_ = 1\n    else:\n        for i in range(1,n//2 + 1):\n            sum_ += i\n        sum_ += (n - 2*(n//2))\n    return sum_\n"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + (sum_series(n-2))\n    \n    \ndef two_sum(n):\n    '''\n    Write a function that calculates the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n + (two_sum(n-2))\n        \n    \ndef fibonacci(n):\n    '''\n    Write a recursive function to calculate the nth Fibonacci number, for instance 3.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \n    \ndef fibonacci(n):\n    '''\n    Write a recursive function to calculate the nth Fibonacci number, for instance 3.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n-1) + fibonacci(n-2)\n        \n        \ndef fibonacci_nested(n):\n    '''\n    Write a nested function to calculate the nth Fibonacci number, for instance 3.\n    '''\n    def fibonacci_nested(n):\n        if n == 0:\n            return 0\n        elif n == 1:\n            return 1\n        else:\n            return fibonacci_nested(n-1) + fibonacci_nested(n-2)\n    return fibonacci_nested(n)\n        \n        \ndef fibonacci_nested(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_nested(n-1) + fibonacci_nested(n-2)\n        \n        \ndef fibonacci_recursive(n):\n    '''\n    Write a recursive function to calculate the nth Fibonacci number, for instance 3.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n        \n        \ndef fibonacci_recursive(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n        \n        \ndef rec_power(n, p):\n    if p == 0:\n        return 1\n    else:\n        return n * rec_power(n, p-1)\n    \n    \ndef rec_power(n, p):\n    if p == 0:\n        return 1\n    else:\n        return n * rec_power(n, p-1)\n        \n        \ndef rec_power(n, p):\n    if p == 0:\n        return 1\n    else:\n        return n * rec_power(n, p-1)\n        \n        \ndef rec_power(n, p):\n    if p == 0:\n        return 1\n    else:\n        return n * rec_power(n, p-1)\n        \n        \ndef factorial(n):\n    '''\n    Write a function that calculates the factorial of n, for instance n! = n*(n-1)! = n*(n-1)*(n-2)...(n-x).\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \n        \ndef factorial(n):\n    '''\n    Write a function that calculates the factorial of n, for instance n! = n*(n-1)! = n*(n-1)*(n-2)...(n-x).\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n-1)\n        \n        \ndef factorial_recursive(n):\n    '''\n    Write a recursive function to calculate the factorial of n, for instance n! = n*(n-1)! = n*(n-1)*(n-2)...(n-x).\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n        \n        \ndef factorial_recursive(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive(n-1)\n        \n        \ndef factorial_nested(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_nested(n-1)\n        \n        \ndef factorial_nested(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_nested(n-1)\n        \n        \ndef factorial_recursive_nested(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive_nested(n-1)\n        \n        \ndef factorial_recursive_nested(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_recursive_nested(n-1)\n        \n        \ndef factorial_fibonacci(n):\n    '''\n    Write a function to calculate the factorial of n, for instance n! = n*(n-1)! = n*(n-1)*(n-2)...(n-x).\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_fibonacci(n-2) + factorial_fibonacci(n-1)\n        \n        \ndef factorial_fibonacci(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial_fibonacci(n-2) + factorial_fibonacci(n-1)\n        \n        \ndef fibonacci_recursive(n):\n    '''\n    Write a recursive function to calculate the nth Fibonacci number, for instance 3.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n        \n        \ndef fibonacci_recursive(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive(n-1) + fibonacci_recursive(n-2)\n        \n        \ndef fibonacci_recursive_nested(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive_nested(n-1) + fibonacci_recursive_nested(n-2)\n        \n        \ndef fibonacci_recursive_nested(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive_nested(n-1) + fibonacci_recursive_nested(n-2)\n        \n        \ndef fibonacci_recursive_fibonacci(n):\n    '''\n    Write a recursive function to calculate the nth Fibonacci number, for instance 3.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive_fibonacci(n-1) + fibonacci_recursive_fibonacci(n-2)\n        \n        \ndef fibonacci_recursive_fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci_recursive_fi"
    },
    {
        "number": 162,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_series(n):\n    '''\n    Write a function to calculate the sum (n - 2*i) from i=0 to n // 2, for instance n + (n-2) + (n-4)... (until n-x =< 0).\n    '''\n    # print(n+((n-2)*(n-4)))\n    return n+((n-2)*(n-4))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    # You may assume that number of sides will be >= 3.\n    return pi * (s * tan(pi / s))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * ((s - l) * 0.5)) / tan(pi * (s - l)/2)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = s * (l - 2 * (s - 1)) / 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    s = float(s)\n    l = float(l)\n    area = (s * l) / 2\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if s <= 0 or l <= 0:\n        print(\"ERROR: Argument s and l must be positive\")\n        return None\n    return (s * (s - l) * 0.5)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    #Get the number of sides\n    sides = len(s)\n    #Calculate the area of the regular polygon\n    area = (pi*(sides-2))/sides\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    if l < 0:\n        raise ValueError('the length must be positive.')\n    if s < 3:\n        raise ValueError('the number of sides must be at least 3.')\n    return s * (l ** 2) / (4 * tan(pi / s))\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return (s * l * 0.5) * tan(pi / l)\n    \nassert (area_polygon(5, 3) == 78.5)\nassert (area_polygon(5, 2) == 14.0)\nassert (area_polygon(3, 5) == 12.5)\nassert (area_polygon(3, 3) == 9)\nassert (area_polygon(0.5, 10) == 0)\nassert (area_polygon(0.1, 10) == 0.1)\nassert (area_polygon(1.5, 3) == 1.5)\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    area = 0\n    for i in range(s):\n        area += (1/tan(pi/s))*(s*l*sin(pi/s))\n    return area\n"
    },
    {
        "number": 163,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from math import tan, pi\ndef area_polygon(s, l):\n    '''\n    Write a function to calculate the area of a regular polygon given the length and number of its sides.\n    '''\n    return s*l**2/(4*tan(pi/s))\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    return n == sum([math.ceil(n/i) for i in range(1, n//2 + 1)])\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum=0\n    for i in range(1,n//2+1):\n        if n%i==0:\n            div_sum=div_sum+i\n    return div_sum==n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    '''\n    def div_sum(a, b):\n        res = 0\n        for i in range(1, a+1):\n            if a % i == 0:\n                res += i\n        for i in range(1, b+1):\n            if b % i == 0:\n                res -= i\n        return res == 0\n    '''\n    return a%b == 0\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    a = 1\n    while a < n:\n        if n % a == 0:\n            if a == 1 or n == a:\n                return True\n            else:\n                if n // a == a:\n                    return True\n        a += 1\n    return False\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    sum_a = 0\n    sum_b = 0\n    while n > 0:\n        rem = n % 10\n        sum_a += rem\n        n = n // 10\n    while n > 0:\n        rem = n % 10\n        sum_b += rem\n        n = n // 10\n    return sum_a == sum_b\n    \ndef find_nth(n): \n    '''\n    Write a function to find nth number which is prime number\n    '''\n    a = 2\n    while True:\n        b = 0\n        for i in range(2,int(math.sqrt(a)) + 1):\n            if a % i == 0:\n                b += 1\n                break\n        if b == 0 and a!= 2:\n            print(a)\n            break\n        a += 1\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div = 2\n    sum_1 = 0\n    sum_2 = 0\n    while div <= n:\n        if n%div == 0:\n            sum_1 += div\n        div += 1\n    div = 2\n    while div <= n:\n        if n%div == 0:\n            sum_2 += div\n        div += 1\n    return sum_1 == sum_2\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    div_sum = 0\n    for i in range(1, n):\n        if n%i == 0:\n            div_sum += i\n    return div_sum == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if(n==0):\n        return False\n    if(n%2==0):\n        return True\n    if(n==2):\n        return True\n    if(n%2!=0):\n        for i in range(1,math.ceil(n/2)):\n            if(n%i==0):\n                return False\n        return True\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    if n == 0:\n        return False\n    divisors = []\n    for i in range(1, n+1):\n        if n%i == 0:\n            divisors.append(i)\n    return sum(divisors) == n\n"
    },
    {
        "number": 164,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef div_sum(n): \n    '''\n    Write a function to determine if the sum of the divisors of two integers are the same.\n    '''\n    '''\n    Time Complexity : O(n log log n)\n    Space Complexity: O(n)\n    '''\n    #divisors = [1]\n    i = 1\n    while(i * i <= n):\n        if(n%i == 0):\n            #divisors.append(i)\n            if(n//i!= i):\n                #divisors.append(n//i)\n                return True\n        i += 1\n    return False\n    "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    \n    # initialize the count variable \n    count = 0 \n    \n    # Traverse through every character of input string \n    for i in range(0, len(str1)): \n        \n        # Initialize the count of character \n        # in the current alphabet \n        count_alpha = 0\n        \n        # Traverse through each alphabet of the English alphabet \n        for j in range(97, 123): \n            \n            # Check if the character is a letter and \n            # if the current alphabet occurs at the position \n            if (chr(j) == str1[i]) : \n                \n                # Increment the count of letters \n                # in the current alphabet \n                count_alpha += 1\n                \n            # If the current alphabet does not occur at the position \n            # then the count of letters in the current alphabet will be 0 \n            else: \n                \n                # Reset the count of letters in the current alphabet to 0 \n                count_alpha = 0\n                \n            # Check if the count of letters in the current alphabet is \n            # greater than the count of letters in the current count \n            if (count_alpha > count): \n                \n                # Update the count of letters in the current alphabet \n                count = count_alpha \n                \n    # Return the count of letters in the alphabet \n    return count\n    \nif __name__ == '__main__':\n    str1 = 'python'\n    print(count_char_position(str1)) "
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    # Converting string to list\n    str1 = list(str1)\n    \n    # Creating a list of alphabets\n    alphabets = list('abcdefghijklmnopqrstuvwxyz')\n    \n    # Creating dictionary to store count\n    count = {}\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    #count = 0\n    #for i in range(len(str1)):\n    #    if str1.upper().count(str1.upper()[i]) > 1:\n    #        count += 1\n    #return count\n    \n    #count = 0\n    #for i in range(len(str1)):\n    #    if str1.upper().count(str1.upper()[i]) > 1:\n    #        count += 1\n    #return count\n    \n    count = 0\n    dict = {}\n    for i in range(len(str1)):\n        if str1.upper().count(str1.upper()[i]) > 1:\n            count += 1\n            if dict.get(str1.upper()[i]) == None:\n                dict[str1.upper()[i]] = 1\n            else:\n                dict[str1.upper()[i]] += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    counter = {}\n    for i in range(len(str1)):\n        if str1[i] in counter.keys():\n            counter[str1[i]] += 1\n        else:\n            counter[str1[i]] = 1\n    return counter\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count=0\n    for i in range(len(str1)):\n        if str1[i].lower() == str1[i].upper():\n            count+=1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    for i in range(len(str1)):\n        if str1[i].isalpha() == True:\n            if str1[i].lower() == str1[i].lower():\n                count += 1\n    return count\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    letter_dict = {}\n    for i,letter in enumerate(list(str1)):\n        letter_dict[letter] = letter_dict.get(letter,0) + 1\n    \n    return_dict = {}\n    for i in range(len(str1)):\n        if not return_dict.get(str1[i]):\n            return_dict[str1[i]] = []\n        return_dict[str1[i]].append(i)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = 0\n    count_list = []\n    for i in str1:\n        count_list.append(i)\n    for j in range(len(count_list)):\n        if count_list.count(count_list[j]) == 1:\n            count += 1\n    print('Number of characters with same position in the string:', count)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    count = {}\n    \n    for i in range(len(str1)): \n        if str1[i] not in count: \n            count[str1[i]] = 0\n            \n        count[str1[i]] += 1\n            \n    print(count)\n    return len(count.values())\n    \n    #print(count)\n"
    },
    {
        "number": 165,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_char_position(str1): \n    '''\n    Write a function to count the number of characters in a string that occur at the same position in the string as in the English alphabet (case insensitive).\n    '''\n    alpha = 'abcdefghijklmnopqrstuvwxyz'\n    dict_count = {c:0 for c in alpha} \n    \n    for c in str1:\n        if c in dict_count.keys():\n            dict_count[c] += 1\n    \n    print(dict_count)\n    count = 0\n    for v in dict_count.values():\n        count += v\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even = 0\n    for i in range(len(A)):\n        if A[i] ^ even == 0:\n            even += 1\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_count = 0\n    for i in range(0, len(A)):\n        for j in range(i, len(A)):\n            if A[i] ^ A[j] == 0:\n                even_count += 1\n    return even_count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    if len(A) < 2:\n        return 0\n    else:\n        sum_odd = 0\n        sum_even = 0\n        for item in A:\n            if item & 1:\n                sum_odd += 1\n            else:\n                sum_even += 1\n        return sum_even * sum_odd\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            if xor(A[i], A[j]) % 2 == 0:\n                count += 1\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1, len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[i] ^ A[j] == 0:\n                count += 1\n    return count\n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    count = 0\n    for i in range(len(A)-1):\n        if A[i] ^ A[i+1] == 0:\n            count += 1\n    return count \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    even_number = 0\n    for num in A:\n        if num % 2 == 0:\n            even_number += 1\n            \n    return even_number\n        \n"
    },
    {
        "number": 166,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_even_pair(A): \n    '''\n    Write a function that counts the number of pairs of integers in a list that xor to an even number.\n    '''\n    xor_even_count = 0\n    for i in range(len(A)):\n        for j in range(i + 1, len(A)):\n            xor_even_count += 1 if (A[i] ^ A[j]) % 2 == 0 else 0\n    return xor_even_count\n    \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #     x = 1\n    #     while(x <= n):\n    #         x = x << 1\n    #     return x\n    return 1 << (n.bit_length() - 1)"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res=1\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    res=1\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return n+(n&-n)\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:\n        res=2**(1+len(bin(n)))-1\n    return res\nprint(next_power_of_2(10))\ndef next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while res<=n:"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    #code here\n    power_of_2 = 1\n    while power_of_2 < n:\n        power_of_2 *= 2\n    return power_of_2\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return 1 << int(math.log(n, 2))\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    import math\n    # find largest power of 2 less than or equal to n\n    k = 1\n    while 2**k < n:\n        k+=1\n    return 2**(k-1)\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while n>=1:\n        n = n>>1\n    return n+1\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    exp = 0\n    while (1<<exp)<=n:\n        exp += 1\n    return 1<<exp\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    while True:\n        if (n >= 1):\n            if (n & (n - 1) == 0):\n                return n\n            else:\n                n = n + 1\n        else:\n            break\n    return 1\n    \n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    if n==0:\n        return 1\n    while n!=1:\n        n=n>>1\n    return n\n"
    },
    {
        "number": 167,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def next_power_of_2(n): \n    '''\n    Write a python function to find the smallest power of 2 greater than or equal to n.\n    '''\n    n = 0\n    pow = 0\n    if n < 0:\n        n = -n\n    while n!= 0:\n        n = n >> 1\n        pow = pow + 1\n    return pow\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    freq = 0\n    for i in range(len(a)):\n        if a[i] == x:\n            freq = freq + 1\n    return freq\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count = 0\n    for i in range(0,len(a)):\n        if a[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return len([x for x in a if x == x])\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    count=0\n    for i in a:\n        if x==i:\n            count+=1\n    return count\n    \n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    list1 = a\n    freq = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            freq = freq + 1\n    print(\"The frequency of \" + str(x) + \" in a list is \" + str(freq))\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    return a.count(x)\n"
    },
    {
        "number": 168,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def frequency(a,x): \n    '''\n    Write a function to count the number of occurrences of a number in a given list.\n    '''\n    # Declare a dictionary\n    count = {}\n    # Iterate over the list\n    for element in a:\n        # Check if the element exists in the dictionary\n        if element in count:\n            # Increment the counter\n            count[element] = count[element] + 1\n        # If the element does not exist in the dictionary, create a new entry with the key\n        else:\n            count[element] = 1\n    # Return the dictionary\n    return count\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if m == n:\n        return sum(list1[m:n+1])\n    return sum(list1[m:n+1]) - sum(list1[0:m])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    if m > len(list1) or n > len(list1):\n        return 'Invalid indices'\n    else:\n        return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m:n+1])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum_num = 0\n    for i in range(m, n+1):\n        sum_num += list1[i]\n    print(sum_num)\n    return sum_num\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    \n    result = 0\n    \n    for i in range(len(list1)):\n        if i >= m and i <= n:\n            result += list1[i]\n    \n    return result\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    \n    if m == 0 and n == len(list1):\n        return list1[m:n]\n    else:\n        for i in range(m, n):\n            sum = sum + list1[i]\n    \n        return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    sum = 0\n    for i in range(m,n+1):\n        sum += list1[i]\n    return sum\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    return sum(list1[m-1:n])\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    if n <= m or m == 0:\n        return 0\n    else:\n        return sum_range_list(list1, m-1, n-1) + list1[m]\n"
    },
    {
        "number": 170,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \n    '''\n    Write a function to find the sum of numbers in a list within a range specified by two indices.\n    '''\n    lst = list1\n    if lst[m] > lst[n]:\n        lst = lst[::-1]\n        m, n = n, m\n    return sum(lst[m:n+1])\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    #a = input(\"Please enter the length of sides:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    p = (3*a*math.sqrt(5))/2\n    print(\"The perimeter of the regular pentagon is:\", p)\n    return p\ndef area_square(a):\n    '''\n    Write a function to find the area of a regular square from its length.\n    '''\n    #a = input(\"Please enter the length of sides:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    s = (a*a)\n    print(\"The area of the regular square is:\", s)\n    return s\ndef perimeter_triangle(a):\n    '''\n    Write a function to find the perimeter of a regular triangle from its length.\n    '''\n    #a = input(\"Please enter the length of sides:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    p = a * math.sqrt(3)\n    print(\"The perimeter of the regular triangle is:\", p)\n    return p\ndef area_square_comp(a,b):\n    '''\n    Write a function to find the area of a regular square with sides of length 'a' and 'b' from its length.\n    '''\n    #a = input(\"Please enter the length of sides:\")\n    #b = input(\"Please enter the length of sides:\")\n    a = int(a)\n    b = int(b)\n    #print(a)\n    #print(b)\n    s = (a * b)\n    print(\"The area of the regular square is:\", s)\n    return s\ndef area_rectangle(a,b):\n    '''\n    Write a function to find the area of a regular rectangle with sides of length 'a' and 'b' from its length.\n    '''\n    #a = input(\"Please enter the length of sides:\")\n    #b = input(\"Please enter the length of sides:\")\n    a = int(a)\n    b = int(b)\n    #print(a)\n    #print(b)\n    s = (a * b)\n    print(\"The area of the regular rectangle is:\", s)\n    return s\ndef area_pentagon(a):\n    '''\n    Write a function to find the area of a regular pentagon with sides of length 'a' from its length.\n    '''\n    #a = input(\"Please enter the length of sides:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    p = (5*a*math.sqrt(5))/4\n    print(\"The area of the regular pentagon is:\", p)\n    return p\ndef area_triangle(a,b,c):\n    '''\n    Write a function to find the area of a regular triangle with sides of length 'a', 'b', and 'c' from its length.\n    '''\n    #a = input(\"Please enter the length of sides:\")\n    #b = input(\"Please enter the length of sides:\")\n    #c = input(\"Please enter the length of sides:\")\n    a = int(a)\n    b = int(b)\n    c = int(c)\n    #print(a)\n    #print(b)\n    #print(c)\n    p = (a + b + c)/2\n    s = (math.sqrt(p*(p-a)*(p-b)*(p-c)))\n    print(\"The area of the regular triangle is:\", s)\n    return s\ndef volume_cube(a):\n    '''\n    Write a function to find the volume of a cube with sides of length 'a' from its length.\n    '''\n    #a = input(\"Please enter the length of sides:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    v = a * a * a\n    print(\"The volume of the cube is:\", v)\n    return v\ndef volume_sphere(a):\n    '''\n    Write a function to find the volume of a sphere with radius 'a' from its length.\n    '''\n    #a = input(\"Please enter the radius:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    v = 4/3 * math.pi * a**3\n    print(\"The volume of the sphere is:\", v)\n    return v\ndef volume_cylinder(a,b):\n    '''\n    Write a function to find the volume of a cylinder with its radius 'a' and height 'b' from its length.\n    '''\n    #a = input(\"Please enter the radius:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    #b = input(\"Please enter the height:\")\n    b = int(b)\n    #print(b)\n    #b = int(b)\n    v = (math.pi * a**2 * b)\n    print(\"The volume of the cylinder is:\", v)\n    return v\ndef volume_cone(a,b,h):\n    '''\n    Write a function to find the volume of a cone with its radius 'a', height 'b' and base 'h' from its length.\n    '''\n    #a = input(\"Please enter the radius:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    #b = input(\"Please enter the height:\")\n    b = int(b)\n    #print(b)\n    #b = int(b)\n    #h = input(\"Please enter the base:\")\n    h = int(h)\n    #print(h)\n    #h = int(h)\n    v = (math.pi * (a**2 * b)) / 3 + ((math.pi * a**2) * h)\n    print(\"The volume of the cone is:\", v)\n    return v\ndef volume_cone_cylinder(a,b,h):\n    '''\n    Write a function to find the volume of a cone with its radius 'a', height 'b' and base 'h' from its length.\n    '''\n    #a = input(\"Please enter the radius:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    #b = input(\"Please enter the height:\")\n    b = int(b)\n    #print(b)\n    #b = int(b)\n    #h = input(\"Please enter the base:\")\n    h = int(h)\n    #print(h)\n    #h = int(h)\n    v = (math.pi * (a**2 * b)) / 3 + ((math.pi * a**2) * h)\n    print(\"The volume of the cone is:\", v)\n    return v\ndef area_cube(a):\n    '''\n    Write a function to find the area of a cube with sides of length 'a' from its length.\n    '''\n    #a = input(\"Please enter the length of sides:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    s = (a * a * a)\n    print(\"The area of the cube is:\", s)\n    return s\ndef area_sphere(a):\n    '''\n    Write a function to find the area of a sphere with radius 'a' from its length.\n    '''\n    #a = input(\"Please enter the radius:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    v = 4 * math.pi * a**2\n    print(\"The area of the sphere is:\", v)\n    return v\ndef volume_sphere(a):\n    '''\n    Write a function to find the volume of a sphere with radius 'a' from its length.\n    '''\n    #a = input(\"Please enter the radius:\")\n    a = int(a)\n    #print(a)\n    #a = int(a)\n    v = (4/3 * math.pi * a**3)\n    print(\"The volume of the sphere is:\", v)\n    return v\ndef volume_cone(a,b,h):\n    '''\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    # calculate the length of each side of the pentagon\n    side_a = a\n    side_b = 3 * math.sqrt(5) * a / 2\n    side_c = math.sqrt(5) * a\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    if a<0:\n        return 'Please enter a positive number.'\n    else:\n        p = (5*a*a)/(math.sqrt(5))\n        return p\n        \nprint(perimeter_pentagon(3))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    print(f'The perimeter of the regular pentagon with {a} is {2*(a*(a-1))**0.5}')\n    return\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (3*a*math.sqrt(5))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return 5*a\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (a*(2*math.sqrt(5)+1))/2\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    s = (1 + math.sqrt(5)) / 2\n    return s*(a*(3*a - 2))\n    \nprint(perimeter_pentagon(3))\nprint(perimeter_pentagon(5))\n"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    a=float(a)\n    if a <= 0:\n        raise ValueError(\"The sides must be positive\")\n    else:\n        return 5*a\ndef volume_of_cone(a,b):\n    '''\n    Write a function to calculate the volume of a cone\n    with its radius a and height b.\n    '''\n    a=float(a)\n    b=float(b)\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Radius and height can't be zero\")\n    else:\n        return 1/3*math.pi*a**2*b\ndef square_of_rectangle(a,b):\n    '''\n    Write a function to calculate the square of a rectangle\n    with width a and length b.\n    '''\n    a=float(a)\n    b=float(b)\n    if a <= 0 or b <= 0:\n        raise ValueError(\"Width and length can't be zero\")\n    else:\n        return a*b\ndef area_of_triangle(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle\n    with base a, slant b and height c.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    if a <= 0 or b <= 0 or c <= 0:\n        raise ValueError(\"B, S and C can't be zero\")\n    else:\n        p=a+b+c/2\n        s=(p*(p-a)*(p-b)*(p-c))**0.5\n        return s\ndef area_of_circle(r):\n    '''\n    Write a function to calculate the area of a circle\n    with radius r.\n    '''\n    r=float(r)\n    if r <= 0:\n        raise ValueError(\"Radius can't be zero\")\n    else:\n        return r**2*math.pi\ndef area_of_triangle_with_base_3(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle\n    with base a, slant b and height c.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2\n    return s*(s-a)*(s-b)*(s-c)**0.5\ndef area_of_circle_with_radius_3(r):\n    '''\n    Write a function to calculate the area of a circle\n    with radius r.\n    '''\n    r=float(r)\n    if r <= 0:\n        raise ValueError(\"Radius can't be zero\")\n    else:\n        return 3.141592653589793238462643383279502884197169399375105820974944592*r**2\ndef area_of_triangle_with_base_5(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle\n    with base a, slant b and height c.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2\n    return math.sqrt((s-a)*(s-b)*(s-c)**2)\ndef area_of_circle_with_radius_5(r):\n    '''\n    Write a function to calculate the area of a circle\n    with radius r.\n    '''\n    r=float(r)\n    if r <= 0:\n        raise ValueError(\"Radius can't be zero\")\n    else:\n        return math.pi*(r**2)\ndef area_of_triangle_with_base_10(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle\n    with base a, slant b and height c.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2\n    return (s*(s-a)*(s-b)*(s-c)**2)**0.5\ndef area_of_circle_with_radius_10(r):\n    '''\n    Write a function to calculate the area of a circle\n    with radius r.\n    '''\n    r=float(r)\n    if r <= 0:\n        raise ValueError(\"Radius can't be zero\")\n    else:\n        return (math.pi*r**2)\ndef area_of_triangle_with_base_6(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle\n    with base a, slant b and height c.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2\n    return math.sqrt((s-a)*(s-b)*(s-c)**2)*6\ndef area_of_circle_with_radius_6(r):\n    '''\n    Write a function to calculate the area of a circle\n    with radius r.\n    '''\n    r=float(r)\n    if r <= 0:\n        raise ValueError(\"Radius can't be zero\")\n    else:\n        return (math.pi*r**2)*6\ndef area_of_triangle_with_base_12(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle\n    with base a, slant b and height c.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2\n    return math.sqrt((s-a)*(s-b)*(s-c)**2)*12\ndef area_of_circle_with_radius_12(r):\n    '''\n    Write a function to calculate the area of a circle\n    with radius r.\n    '''\n    r=float(r)\n    if r <= 0:\n        raise ValueError(\"Radius can't be zero\")\n    else:\n        return (math.pi*r**2)*12\ndef area_of_triangle_with_base_13(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle\n    with base a, slant b and height c.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2\n    return math.sqrt((s-a)*(s-b)*(s-c)**2)*13\ndef area_of_circle_with_radius_13(r):\n    '''\n    Write a function to calculate the area of a circle\n    with radius r.\n    '''\n    r=float(r)\n    if r <= 0:\n        raise ValueError(\"Radius can't be zero\")\n    else:\n        return (math.pi*r**2)*13\ndef area_of_triangle_with_base_14(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle\n    with base a, slant b and height c.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2\n    return math.sqrt((s-a)*(s-b)*(s-c)**2)*14\ndef area_of_circle_with_radius_14(r):\n    '''\n    Write a function to calculate the area of a circle\n    with radius r.\n    '''\n    r=float(r)\n    if r <= 0:\n        raise ValueError(\"Radius can't be zero\")\n    else:\n        return (math.pi*r**2)*14\ndef area_of_triangle_with_base_15(a,b,c):\n    '''\n    Write a function to calculate the area of a triangle\n    with base a, slant b and height c.\n    '''\n    a=float(a)\n    b=float(b)\n    c=float(c)\n    s=(a+b+c)/2\n    return math.sqrt((s-a)*(s-b)*(s-c)**2)*1"
    },
    {
        "number": 171,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef perimeter_pentagon(a):\n    '''\n    Write a function to find the perimeter of a regular pentagon from the length of its sides.\n    '''\n    return (5*a)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    #Brute Force\n    for i in range(len(s)):\n        if s[i:i+3] =='std':\n            count += 1\n    #O(N)\n    count_set = set()\n    for i in range(len(s)):\n        if s[i:i+3] not in count_set:\n            count += 1\n            count_set.add(s[i:i+3])\n    return count\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    count = 0\n    for i in range(0,len(s)):\n        if s[i] =='s' and s[i+1] == 't' and s[i+2] == 'd':\n            count = count + 1\n    print(\"The number of occurence of'std' is \", count)\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    c = 0\n    for i in range(len(s)):\n        if s[i:].startswith('std'):\n            c += 1\n    return c\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count('std')\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return len([s for s in s.split() if s == \"std\"])\nprint(count_occurance(\"My name is Murat and I study in BSc.\"))\n"
    },
    {
        "number": 172,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_occurance(s):\n    '''\n    Write a function to count the number of occurence of the string 'std' in a given string.\n    '''\n    return s.count(\"std\")\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    # it can be also used for checking if the list is sorted or not\n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    a = []\n    for i in test_tuple:\n        if type(i)!= type(a[0]):\n            print(\"The type of tuple is not equal.\")\n            return False\n        else:\n            continue\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) is not int and type(x) is not float:\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_order(test_tuple):\n    '''\n    Write a function to check if all the element in tuple are ordered or not.\n    '''\n    count = 0\n    for x in range(len(test_tuple)-1):\n        if test_tuple[x] < test_tuple[x+1]:\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples are ordered\\n')\n    else:\n        print('\\nTest Case Failed: Tuples are not ordered\\n')\n        \ndef check_same_data_type(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) is not type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_2(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x)!= type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_3(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x)!= type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_4(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_5(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_6(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_7(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_8(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_9(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_10(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_11(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_12(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_13(test_tuple):\n    '''\n    Write a function to check if all the element in tuple have same data type or not.\n    '''\n    count = 0\n    for x in test_tuple:\n        if type(x) == type(test_tuple[0]):\n            count += 1\n    if count == 0:\n        print('\\nTest Case Passed: All Tuples have same data type\\n')\n    else:\n        print('\\nTest Case Failed: Tuples have not same data type\\n')\n        \ndef check_same_data_type_14(test_tuple):\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    i = 0\n    while i < len(test_tuple):\n        if not isinstance(test_tuple[i],type(test_tuple[0])):\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if not isinstance(i, int):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in test_tuple:\n        if type(i)!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for tuple_item in test_tuple:\n        assert isinstance(tuple_item, type(test_tuple[0]))\n"
    },
    {
        "number": 222,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_type(test_tuple):\n    '''\n    Write a function to check if all the elements in tuple have same data type or not.\n    '''\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i])!= type(test_tuple[0]):\n            return False\n    return True\n    \ndef list_check(test_list):\n    '''\n    Write a function to check if all the elements in list are of same data type or not.\n    '''\n    for i in range(len(test_list)):\n        if type(test_list[i])!= type(test_list[0]):\n            return False\n    return True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Special case\n    if n == 1 and arr[0] == x:\n        return True\n    if n == 1 and arr[0]!= x:\n        return False\n    if n == 2 and x == arr[0]:\n        return True\n    if n == 2 and x!= arr[0]:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    \n    if count > (n/2):\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your solution here\n    #if x in arr:\n    #    xcount = arr.count(x)\n    #    if xcount > n//2:\n    #        return True\n    #    else:\n    #        return False\n    if x in arr:\n        xcount = arr.count(x)\n        if xcount > n//2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if (arr.count(x) > n/2):\n        return True\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    # Your code here\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count > n/2\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    count_ = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n            count_ += 1\n            if count >= count_/2:\n                return True\n        else:\n            count -= 1\n    return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    \n    m = int(n / 2)\n    \n    if len(arr) == 0:\n        return False\n    elif arr[m] == x:\n        return True\n    elif arr[m]!= x:\n        return False\n    \n    return is_majority(arr[:m], m, x) or is_majority(arr[m+1:], m, x)\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    if x not in arr:\n        return False\n    x = arr.count(x)\n    if x>n/2:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    for i in range(0, n):\n        if arr[i] == x:\n            if i + 1 < n:\n                if arr[i+1] == x:\n                    return True\n            else:\n                return True\n"
    },
    {
        "number": 223,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_majority(arr, n, x):\n    '''\n    Write a function that takes in a sorted array, its length (n), and an element and returns whether the element is the majority element in the given sorted array. (The majority element is the element that occurs more than n/2 times.)\n    '''\n    count = 0\n    for i in range(n):\n        if arr[i] == x:\n            count += 1\n    return count >= n//2\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    res = 0\n    while n:\n        res += 1\n        n = n&(n-1)\n    return res\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # return bin(n).count(\"1\")\n    return bin(n).count(\"1\")\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    c = 0\n    while n:\n        c += n & 1\n        n >>= 1\n    return c\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # binary_numbers = bin(n).count('1')\n    # print(binary_numbers)\n    binary_numbers = bin(n).count('1')\n    print(binary_numbers)\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = n & (n - 1)\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while(n):\n        count += 1\n        n &= n-1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = n & (n-1)\n    return count\n    \n    \n    \ndef count_Set_Bits_2(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 1)\n    return count\n    \n    \n    \ndef count_Set_Bits_3(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = n & (n - 1)\n    return count\n    \n    \n    \ndef count_Set_Bits_4(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_5(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_6(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_7(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_8(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_9(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_10(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_11(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_12(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_13(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_14(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_15(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_16(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_17(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_18(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_19(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_20(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_21(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_22(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_23(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while (n):\n        count += 1\n        n = (n - 1) & (n - 2)\n    return count\n    \n    \n    \ndef count_Set_Bits_24(n): \n    '''\n    Write a python function to count the number of set bits (binary digits wit"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    while n!= 0:\n        count += 1\n        n = n & (n - 1)\n    return count\n    # return (n & (n - 1)).count()\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    count = 0\n    for i in range(32):\n        if (n & (1<<i)) > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 224,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Set_Bits(n): \n    '''\n    Write a python function to count the number of set bits (binary digits with value 1) in a given number.\n    '''\n    # initialising the count\n    count = 0\n    # looping for the numbers from 0 to n-1\n    for i in range(n):\n        # checking whether i is a set bit or not. \n        # if it is a set bit, i becomes 0.\n        if (i & i-1) == 0:\n            count += 1\n    # returning the count\n    return count\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    new_str = \"\"\n    for i in range(len(str)):\n        if i % 2 == 0:\n            new_str += str[i]\n    return new_str\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            str_chars.remove(str_chars[i])\n    \n    str_chars=''.join(str_chars)\n    return str_chars\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n    \n    return ''.join(odd_char)\n    \ndef odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    str_chars=list(str)\n    print(str_chars)\n    odd_char=[]\n    for i in range(len(str_chars)):\n        if i%2!= 0:\n            odd_char.append(str_chars[i])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([char for index, char in enumerate(str) if index % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([char for index,char in enumerate(str) if index%2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    #str = \"10111\"\n    #str = \"011101\"\n    #str = \"01110101\"\n    #str = \"abcd\"\n    #str = \"www.google.com\"\n    #str = \"kumar\"\n    #str = \"kumar.com\"\n    #str = \"im-kumar-gmail.com\"\n    #str = \"imkumar@gmail.com\"\n    #str = \"kum@gmail.com\"\n    #str = \"kumar\"\n    #str = \"kumar.com\"\n    #str = \"kum@gmail.com\"\n    #str = \"kum\"\n    #str = \"kum@\"\n    #str = \"kum@gmail.com\"\n    #str = \"kumar.com\"\n    #str = \"kum@gmail.com\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n    #str = \"kum@gmail.com.\"\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    return \"\".join([s for i, s in enumerate(str) if i % 2 == 0])\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    ans = \"\".join([i for j,i in enumerate(str) if j%2==0])\n    return ans\nprint(odd_values_string(\"mynameisdevil\"))\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return str\n    else:\n        str = str[:n - 1]\n        for i in range(0, n - 1):\n            if int(str[i]) % 2!= 0:\n                str = str[0:i] + str[i + 1:n]\n    return str\n    \ndef odd_values_string2(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    n = len(str)\n    if n == 0:\n        return str\n    else:\n        str = str[:n - 1]\n        for i in range(0, n - 1):\n            if str[i] % 2!= 0:\n                str = str[0:i] + str[i + 1:n]\n    return str\n    \ndef strings_as_array(str):\n    '''\n    Write a python function to convert a given string into an array.\n    '''\n    a = []\n    a.extend(str)\n    return a\n    \ndef strings_as_array2(str):\n    '''\n    Write a python function to convert a given string into an array.\n    '''\n    a = []\n    for i in range(0, len(str)):\n        a.append(str[i])\n    return a\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    str1 = ''\n    for i in range(0,len(str)):\n        if i%2!= 0:\n            str1 += str[i]\n    return str1\nodd_values_string(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")\n"
    },
    {
        "number": 226,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_values_string(str):\n    '''\n    Write a python function to remove the characters which have odd index values of a given string.\n    '''\n    \n    list_str = list(str)\n    odd_index = []\n    count = 0\n    for index in range(0, len(list_str)):\n        if index % 2!= 0:\n            odd_index.append(list_str[count])\n            count += 1\n        else:\n            count += 1\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    \n    if a<=b and a<=c: \n        return a\n    elif b<=a and b<=c: \n        return b\n    else: \n        return c \n    \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    return min(a,b,c)\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    minn = float('inf')\n    if a<minn:\n        minn = a\n    if b<minn:\n        minn = b\n    if c<minn:\n        minn = c\n    return minn\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        return a\n    elif b<a and b<c:\n        return b\n    else:\n        return c\nprint(min_of_three(10,45,12))\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    elif b < a and b < c: \n        return b \n    else: \n        return c \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    return c \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b and a < c: \n        return a \n    if b < a and b < c: \n        return b \n    if c < a and c < b: \n        return c \n    return a \n    \ndef min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<a<c:\n        return b\n    elif c<a<b:\n        return c\n    return None\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    # define min() for 3 number\n    m = a\n    if (b<m):\n        m=b\n    if (c<m):\n        m=c\n    print(f\"minimum number is :{m}\")\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b:\n        if a<c:\n            return a\n        else:\n            return c\n    else:\n        if b<c:\n            return b\n        else:\n            return c\n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a < b:\n        if a < c:\n            return a\n        else:\n            return c\n    elif b < a:\n        if b < c:\n            return b\n        else:\n            return c\n    else:\n        if c < b:\n            return c\n        else:\n            return b\nprint(min_of_three(3,4,5)) \n"
    },
    {
        "number": 227,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_of_three(a,b,c): \n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b<c:\n        return a\n    elif b<c:\n        return b\n    else:\n        return c\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(2**n):\n        if(not(i&(i>>l)) and (i&(i>>r))):\n            return False\n    return True\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    a = (r + 1) - (l + 1)\n    if (a & a - 1)!= 0:\n        print(\"Not All Bits are Set\")\n    else:\n        print(\"All Bits are Set\")\n    \n    "
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    #code here\n    s = bin(n).replace('0b','')\n    if s.count('1') <= l and s.count('1') >= r:\n        return True\n    return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    \n    #passing the number of bits as an argument and returning all set bits.\n    return ((r-l) & (l-n) )==0\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    cnt=0\n    for i in range(n):\n        cnt+=i&1\n        i>>=1\n    if(cnt<r and cnt>l):\n        print(\"true\")\n    else:\n        print(\"false\")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    print(bin(n))\n    print(bin(l))\n    print(bin(r))\n    n=bin(n)\n    l=bin(l)\n    r=bin(r)\n    if n==l or n==r or l==r:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r):\n        if(n&i==0):\n            print(\"\")\n        else:\n            print(i,end=\" \")\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    for i in range(l,r+1):\n        if (n & i):\n            return False\n    return True\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    if n>=0 and n<=1<<l:\n        return True\n    elif n>=1<<(l+1) and n<=1<<(l+r+1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 228,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \n    '''\n    Write a python function to check whether all the bits are unset in the given range or not.\n    '''\n    count=0\n    while l<=r:\n        if n&(1<<l)==0:\n            count+=1\n        l+=1\n    return count\nn=int(input())\nl=int(input())\nr=int(input())\nprint(all_Bits_Set_In_The_Given_Range(n,l,r)"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    arr = arr[n:] + arr[:n]\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    res = []\n    neg = []\n    pos = []\n    i = 0\n    while i < n:\n        res.append(arr[i])\n        if arr[i] < 0:\n            neg.append(arr[i])\n        else:\n            pos.append(arr[i])\n        i += 1\n    res.extend(sorted(pos, key=lambda x: -x))\n    res.extend(sorted(neg, key=lambda x: x))\n    return res\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    def swap(x, y):\n        tmp = x\n        x = y\n        y = tmp\n        return x, y\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    new_arr = [None] * len(arr)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] < 0:\n            temp = arr[i]\n            while i < n and arr[i] < 0:\n                arr[i] = arr[i+1]\n                i += 1\n            arr[i] = temp\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    for i in range(n):\n        if arr[i] >= 0:\n            temp = arr[i]\n            arr[i] = arr[n - i - 1]\n            arr[n - i - 1] = temp\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # Time: O(n)\n    # Space: O(1)\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    negative_idx = 0\n    positive_idx = 0\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    # If we have a negative number we must add the array to the end of the array and leave the negative numbers behind\n    # If we have a positive number we must delete the element from the array and leave the positive numbers behind\n    \n    # 1. If array length is less than n, return array\n    if len(arr) < n:\n        return arr\n    \n    # 2. If array length is n, sort the array and return it\n    if len(arr) == n:\n        arr.sort()\n        return arr\n    \n    # 3. If array length is greater than n, we can ignore n elements and start at the nth element, then we swap the negative numbers with the positive ones so that the array starts at the nth element.\n    for i in range(n):\n        if arr[i] < 0:\n            # First swap negative numbers with positive ones\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    \n    # 4. Finally, reverse the elements in place after the swap\n    #print(arr)\n    arr.reverse()\n    return arr\n"
    },
    {
        "number": 229,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def re_arrange_array(arr, n):\n    '''\n    Write a function that takes in an array and an integer n, and re-arranges the first n elements of the given array so that all negative elements appear before positive ones, and where the relative order among negative and positive elements is preserved.\n    '''\n    n = n - 1\n    i = 0\n    for i in range(n):\n        if arr[i] < 0:\n            arr.append(arr.pop(i))\n            i = i - 1\n    return arr\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    new_str = str1\n    for x in range(len(new_str)):\n        if new_str[x] =='':\n            new_str = new_str[:x] + char + new_str[x+1:]\n    return new_str\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    # TODO: Write your function here\n    return str1.replace(\" \",\"\"+char+\"\")\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    newstr = str1.replace(\" \",char)\n    return newstr\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s'%char)\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ',' ').replace('  ',' ').replace('    ',' ')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    a = str1.replace(\" \",\"\")\n    if a == \"\":\n        a = char\n    return a\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','')\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    return str1.replace(' ','%s'%(char))\n    \ndef complete_sentence(str1):\n    '''\n    Write a function that takes in a string, and returns a new string with the string with its final character in the middle.\n    '''\n    str1=str1[::-1]\n    str1=str1.replace(' ','')[::-1]\n    return str1\n    \ndef word_count(str1,char):\n    '''\n    Write a function that takes in a string and a character, and returns the number of occurrences of that character in the string.\n    '''\n    return str1.count(char)\n    \ndef last_letter(str1):\n    '''\n    Write a function that takes in a string, and returns the last letter of the string.\n    '''\n    return str1[-1]\n    \ndef longest_word(str1):\n    '''\n    Write a function that takes in a string, and returns the longest word in the string.\n    '''\n    words=str1.split()\n    return max(words,key=len)\n    \ndef find_sentence(str1):\n    '''\n    Write a function that takes in a string, and returns the sentence in the string that contains the most number of words.\n    '''\n    words=str1.split()\n    words_count={}\n    for word in words:\n        if word in words_count:\n            words_count[word]+=1\n        else:\n            words_count[word]=1\n    max_value=max(words_count.values())\n    words_count_list=words_count.keys()\n    words_count_list=list(words_count_list)\n    for word in words_count_list:\n        if words_count[word]==max_value:\n            sentence=str1.split('.')\n            return(sentence[len(sentence)-1])\n"
    },
    {
        "number": 230,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_blank(str1,char):\n    '''\n    Write a function that takes in a string and character, replaces blank spaces in the string with the character, and returns the string.\n    '''\n    str_new = str1.replace(\" \",char)\n    return str_new\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    largest_n = []\n    for i in range(0,n):\n        largest_n.append(sorted(list1)[i])\n    return largest_n\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1=sorted(list1,key=lambda x:x[1],reverse=True)\n    return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #if n == 0:\n    #    return []\n    \n    sorted_list = sorted(list1,reverse=True)\n    return sorted_list[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\ndef large_removal(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    i=0\n    while i<n:\n        list1.pop()\n        i+=1\n    return list1\ndef small_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    return list1[:n]\ndef small_removal(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n smallest items from the list.\n    '''\n    list1.sort()\n    i=0\n    while i<n:\n        list1.pop()\n        i+=1\n    return list1\ndef dupl_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n duplicate items from the list.\n    '''\n    list1.sort()\n    i=0\n    duplist=[]\n    while i<n:\n        if list1.count(list1[i])>1:\n            duplist.append(list1[i])\n            i=i+1\n        else:\n            i=i+1\n    return duplist\ndef dupl_removal(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n duplicate items from the list.\n    '''\n    list1.sort()\n    i=0\n    duplist=[]\n    while i<n:\n        if list1.count(list1[i])>1:\n            duplist.append(list1[i])\n            i=i+1\n        else:\n            i=i+1\n    while duplist[len(duplist)-1]!=list1[i]:\n        i=i+1\n        if i==len(list1)-1:\n            break\n        else:\n            continue\n    list1.pop(i)\n    return list1\ndef value_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\ndef value_removal(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    i=0\n    while i<n:\n        list1.pop()\n        i=i+1\n    return list1\ndef path_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    npath=[]\n    for i in range(0,n):\n        k=0\n        for j in list1:\n            if k==i:\n                npath.append(j)\n            k=k+1\n    return npath\ndef path_removal(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    npath=[]\n    for i in range(0,n):\n        k=0\n        for j in list1:\n            if k==i:\n                npath.append(j)\n            k=k+1\n    list1.remove(npath[len(npath)-1])\n    return list1\ndef frequency_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    freq_dict={}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i]=freq_dict[i]+1\n        else:\n            freq_dict[i]=1\n    freq_dict = {k: v for k, v in sorted(freq_dict.items(), key=lambda item: item[1], reverse=True)}\n    return freq_dict\ndef frequency_removal(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    freq_dict={}\n    for i in list1:\n        if i in freq_dict:\n            freq_dict[i]=freq_dict[i]+1\n        else:\n            freq_dict[i]=1\n    freq_dict = {k: v for k, v in sorted(freq_dict.items(), key=lambda item: item[1], reverse=True)}\n    for i in range(0,n):\n        freq_dict.pop(list1[i])\n    return freq_dict\ndef reverse_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\ndef reverse_removal(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    i=0\n    while i<n:\n        list1.pop()\n        i=i+1\n    return list1\ndef bucket_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    bucket_dict={}\n    for i in list1:\n        if i in bucket_dict:\n            bucket_dict[i]+=1\n        else:\n            bucket_dict[i]=1\n    bucket_dict = {k: v for k, v in sorted(bucket_dict.items(), key=lambda item: item[1], reverse=True)}\n    return bucket_dict\ndef bucket_removal(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    bucket_dict={}\n    for i in list1:\n        if i in bucket_dict:\n            bucket_dict[i]+=1\n        else:\n            bucket_dict[i]=1\n    bucket_dict = {k: v for k, v in sorted(bucket_dict.items(), key=lambda item: item[1], reverse=True)}\n    for i in range(0,n):\n        bucket_dict.pop(list1[i])\n    return bucket_dict\ndef heap_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    return list1[:n]\ndef heap_removal(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heapq.heapify(list1)\n    i=0\n    while i<n:\n        heapq.heappop(list1)\n        i=i+1\n    return list1\ndef min_max(list1):\n    '''\n    Write a function that takes in a list and returns a tuple containing the minimum and maximum values in the list.\n    '''\n    return min(list1), max(list1)\ndef min_max_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a tuple containing the minimum and maximum values in the list."
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    heap = []\n    for x in range(n):\n        heapq.heappush(heap,list1[x])\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    return sorted(list1)[-n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    if n > len(list1):\n        return list1\n    else:\n        return list1[:n]\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list2 = []\n    for i in range(n):\n        max_ = max(list1)\n        list1.remove(max_)\n        list2.append(max_)\n    return list2\nprint(larg_nnum([2,5,1,10,4,7,3,8,9,6],5))\ndef remove_vowels(s):\n    '''\n    Write a function that takes in a string and removes any vowels from the string.\n    '''\n    # your code here\n    if(len(s) == 1):\n        if(s.isalpha()):\n            return s\n        else:\n            return ''\n    else:\n        list1 = s.split()\n        list2 = []\n        for word in list1:\n            if(word.isalpha()):\n                list2.append(word)\n        return''.join(list2)\nprint(remove_vowels('abcde'))\ndef remove_vowels_list(list1):\n    '''\n    Write a function that takes in a list and removes any vowels from the list.\n    '''\n    if(len(list1) == 1):\n        if(list1.isalpha()):\n            return list1\n        else:\n            return ''\n    else:\n        list2 = []\n        for word in list1:\n            if(word.isalpha()):\n                list2.append(word)\n        return list2\nprint(remove_vowels_list(['a','e','i','o','u','y']))\ndef delete_vowels(s):\n    '''\n    Write a function that takes in a string and deletes all of the vowels in the string.\n    '''\n    # your code here\n    vowels = 'aeiou'\n    for char in s:\n        if char in vowels:\n            s = s.replace(char, \"\")\n    return s\nprint(delete_vowels('aeiou'))\ndef delete_vowels_list(list1):\n    '''\n    Write a function that takes in a list and deletes all of the vowels in the list.\n    '''\n    if(len(list1) == 1):\n        if(list1.isalpha()):\n            return list1\n        else:\n            return ''\n    else:\n        list2 = []\n        for word in list1:\n            if(word.isalpha()):\n                list2.append(word)\n        return list2\nprint(delete_vowels_list(['a','e','i','o','u','y']))\ndef remove_punct(s):\n    '''\n    Write a function that takes in a string and removes any punctuation from the string.\n    '''\n    # your code here\n    vowels = 'aeiou'\n    list1 = []\n    for char in s:\n        if(char in vowels):\n            list1.append(char)\n        elif(char == \" \"):\n            list1.append(char)\n        else:\n            list1.append(\"\")\n    return ''.join(list1)\nprint(remove_punct('aeiou '))\ndef remove_punct_list(list1):\n    '''\n    Write a function that takes in a list and removes any punctuation from the list.\n    '''\n    if(len(list1) == 1):\n        if(list1.isalpha()):\n            return list1\n        else:\n            return ''\n    else:\n        list2 = []\n        for word in list1:\n            if(word.isalpha()):\n                list2.append(word)\n            else:\n                list2.append(\"\")\n        return list2\nprint(remove_punct_list(['a','e','i','o','u','y']))\ndef capitalize(s):\n    '''\n    Write a function that takes in a string and capitalizes the first letter of each word in the string.\n    '''\n    # your code here\n    s = s.split()\n    list1 = []\n    for word in s:\n        if word[0].isupper():\n            list1.append(word)\n        else:\n            list1.append(word.capitalize())\n    return''.join(list1)\nprint(capitalize('abc def'))\ndef capitalize_list(list1):\n    '''\n    Write a function that takes in a list and capitalizes the first letter of each word in the list.\n    '''\n    if(len(list1) == 1):\n        if(list1[0].isupper()):\n            return list1\n        else:\n            return ''\n    else:\n        list2 = []\n        for word in list1:\n            if(word.isupper()):\n                list2.append(word)\n            else:\n                list2.append(word.capitalize())\n        return list2\nprint(capitalize_list(['a','e','i','o','u','y']))\ndef split_string_lower(s):\n    '''\n    Write a function that takes in a string and splits the string into a list, but all letters in the string are lowercase.\n    '''\n    # your code here\n    return s.lower().split()\nprint(split_string_lower('Hello, my name is carolina'))\ndef split_string_upper(s):\n    '''\n    Write a function that takes in a string and splits the string into a list, but all letters in the string are uppercase.\n    '''\n    # your code here\n    return s.upper().split()\nprint(split_string_upper('Hello, my name is carolina'))\ndef split_string_allcaps(s):\n    '''\n    Write a function that takes in a string and splits the string into a list, but all letters in the string are uppercase.\n    '''\n    # your code here\n    return s.upper().split()\nprint(split_string_allcaps('Hello, my name is carolina'))\ndef remove_characters(s,characters):\n    '''\n    Write a function that takes in a string and a list of characters. The function should return a string with all of the characters in the list removed from the original string.\n    '''\n    # your code here\n    if(characters == []):\n        if(s == ''):\n            return ''\n        else:\n            return s\n    else:\n        list1 = []\n        for char in s:\n            if(char in characters):\n                list1.append(char)\n            else:\n                list1.append(char)\n        return ''.join(list1)\nprint(remove_characters('abacaba','abacaba'))\ndef remove_characters_list(s,characters):\n    '''\n    Write a function that takes in a string and a list of characters. The function should return a string with all of the characters in the list removed from the original string.\n    '''\n    if(characters == []):\n        if(s == ''):\n            return ''\n        else:\n            return s\n    else:\n        list1 = []\n        for char in s:\n            if(char in characters):\n                list1.append(char)\n            else:\n                list1.append(char)\n        return ''.join(list1)\nprint(remove_characters_list('abacaba','abacaba'))\ndef remove_characters_list(s,characters):\n    '''\n    Write a function that takes in a string and a list of characters. The function should return a string with all of the characters in the list removed from the original string.\n    '''\n    if(characters == []):\n        if(s == ''):\n            return ''\n        else:\n            return s\n    else:\n        list1 = []\n        for char in s:\n            if(char in characters):\n                list1.append(char)\n            else:\n                list1.append(char)\n        return ''.join(list1)\nprint(remove_characters_list('abacaba','abacaba'))\ndef reverse_string(s):\n    '''\n    Write a function that takes in a string and reverses the characters in the string.\n    '''\n    # your code here\n    return s[::-1]\nprint(reverse_string('1234abcd'))\ndef reverse_string_list(list1):\n    '''\n    Write "
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #list1.sort(reverse=True)\n    list1.sort(key = lambda x: x[1])\n    #print(list1)\n    h = []\n    for i in range(n):\n        heapq.heappush(h,list1[i][0])\n    for i in range(n,len(list1)):\n        if list1[i][1] == list1[i-n][1]:\n            heapq.heappush(h,list1[i][0])\n        else:\n            break\n    res = []\n    for i in range(len(h)):\n        res.append(heapq.heappop(h))\n    return res\n    \ndef larg_nnum_sorted(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    #list1.sort(reverse=True)\n    #list1.sort(key = lambda x: x[1])\n    \n    s = sorted(list1,key = lambda x:x[1])\n    res = []\n    for i in range(n):\n        res.append(s[i][0])\n    return res\n"
    },
    {
        "number": 232,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef larg_nnum(list1,n):\n    '''\n    Write a function that takes in a list and an integer n and returns a list containing the n largest items from the list.\n    '''\n    list1.sort(reverse=True)\n    return list1[:n]\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math\n    lateral_surface = 2*math.pi*r*(r+h)\n    print(lateral_surface)\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # This function takes the radius of a cylinder and the height of the cylinder.\n    # It uses a formula to find the lateral surface area.\n    area = 2*pi*r*h\n    print(\"The lateral surface area of the cylinder is\", area, \"units^2.\")\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    l=2*3.14*r\n    h=2*3.14*h\n    return l*h\n    \ndef lateralsuface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone.\n    '''\n    l=2*3.14*r\n    h=2*3.14*h\n    return l*h*0.5\n    \ndef lateralsuface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere.\n    '''\n    return 4*3.14*r**2\n    \ndef volumen_cubo(l,b,h):\n    '''\n    Write a function to find the volume of a cuboid.\n    '''\n    return l*b*h\n    \ndef volumen_rectangulo(l,b):\n    '''\n    Write a function to find the volume of a rectangulo.\n    '''\n    return l*b\n    \ndef volumen_trapecio(b,h):\n    '''\n    Write a function to find the volume of a trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_triangulo(b,h):\n    '''\n    Write a function to find the volume of a triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_circulo(r):\n    '''\n    Write a function to find the volume of a cicle.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio(b,h):\n    '''\n    Write a function to find the volume of a dentro de un trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_dentro_del_triangulo(b,h):\n    '''\n    Write a function to find the volume of a dentro de un triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_dentro_del_circulo(r):\n    '''\n    Write a function to find the volume of a dentro de un ciclo.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo_con_a(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo_con_a(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio_con_a(b,h):\n    '''\n    Write a function to find the volume of a dentro de un trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_dentro_del_triangulo_con_a(b,h):\n    '''\n    Write a function to find the volume of a dentro de un triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_dentro_del_circulo_con_a(r):\n    '''\n    Write a function to find the volume of a dentro de un ciclo.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo_con_b(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo_con_b(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio_con_b(b,h):\n    '''\n    Write a function to find the volume of a dentro de un trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_dentro_del_triangulo_con_b(b,h):\n    '''\n    Write a function to find the volume of a dentro de un triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_dentro_del_circulo_con_b(r):\n    '''\n    Write a function to find the volume of a dentro de un ciclo.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo_con_c(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo_con_c(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio_con_c(b,h):\n    '''\n    Write a function to find the volume of a dentro de un trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_dentro_del_triangulo_con_c(b,h):\n    '''\n    Write a function to find the volume of a dentro de un triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_dentro_del_circulo_con_c(r):\n    '''\n    Write a function to find the volume of a dentro de un ciclo.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo_con_d(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo_con_d(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio_con_d(b,h):\n    '''\n    Write a function to find the volume of a dentro de un trapezoide.\n    '''\n    return (b+h)*2\n    \ndef volumen_dentro_del_triangulo_con_d(b,h):\n    '''\n    Write a function to find the volume of a dentro de un triangulo.\n    '''\n    return (b*h)/2\n    \ndef volumen_dentro_del_circulo_con_d(r):\n    '''\n    Write a function to find the volume of a dentro de un ciclo.\n    '''\n    return 3.14*r**2\n    \ndef volumen_dentro_del_cubo_con_e(l,b,h):\n    '''\n    Write a function to find the volume of a dentro de un cubo.\n    '''\n    return l*b*h\n    \ndef volumen_dentro_del_rectangulo_con_e(l,b):\n    '''\n    Write a function to find the volume of a dentro de un rectangulo.\n    '''\n    return l*b\n    \ndef volumen_dentro_del_trapecio_con_e(b,h):\n    '''\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    if r==0 or h==0:\n        return 0\n    else:\n        f=3.14*r*r\n        pi=3.14\n        a=pi*r*h\n        b=pi*r*(h+2*r)\n        c=pi*(h+2*r)*r\n        d=pi*(h+2*r)*(h+2*r)\n        e=pi*(h+2*r)*(r+2*h)\n        f=pi*(r+2*h)*(r+2*h)\n        g=pi*(r+2*h)*(h+2*r)\n        return f-g+e-d\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # The difference between the height and radius of the cylinder\n    d = h - r\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    area = pi*r**2\n    return area*(1.0-1.0/sqrt(1.0+r**2))\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    surface_area = 2*3.14*(r**2)*h\n    return surface_area\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    # Function to find lateral surface area of a cylinder\n    # Start with the formula\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    return pi*r**2*h\n"
    },
    {
        "number": 233,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsuface_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder.\n    '''\n    import math as m\n    a=m.pi\n    area_cylinder=2*a*r*h\n    return area_cylinder\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return (l ** 3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # This is the number of times we need to loop for the cube to be\n    # able to reach the side length of l\n    # We know that the volume of a cube will be (l * l * l)\n    # l = 5\n    # V = 25\n    # times = (5 * 5 * 5)\n    times = 1\n    while (l > 0):\n        # There are 8 ways that a cube can be placed in the volume\n        # of a cube, so we need to choose 8 pieces\n        l = l - 1\n        times = times + 8\n    return times\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    if l<0:\n        return None\n    else:\n        return l**3\nprint(volume_cube(-1))\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    vol = l**3\n    return vol\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    # base_volume = 1/3 * 3**3\n    # return base_volume * l**3\n    return l**3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return int(l**3)\n"
    },
    {
        "number": 234,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cube(l):\n    '''\n    Write a function to find the volume of a cube given its side length.\n    '''\n    return l ** 3\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    n = bin(n)\n    return n.replace('b','') + '0'\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return int(bin(n)[2:].zfill(6)[::2]) \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # convert a binary number to a decimal number\n    n = int(bin(n)[2:])\n    return n\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    # your code here\n    return n | 0x01\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n < 0:\n        n = n & 0xFFFFFFFF\n    if n & 0x01:\n        n = n | 0x80\n    return n \n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    return n & ~(n+1)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    if n == 0:\n        return 0\n    \n    return n | n >> 1\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #number of bits in binary representation of n\n    num_of_bits = int(math.log(n,2)) + 1\n    \n    #all the even bit set\n    even_bits = 2**(num_of_bits-1)\n    \n    #to get all the even bits \n    return even_bits&n\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    s = bin(n)[2:]\n    return n | int(s,2)\n"
    },
    {
        "number": 235,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_bit_set_number(n): \n    '''\n    Write a python function to set all even bits of a given number.\n    '''\n    #(1 << i) for i in range(n)\n    return (1 << n) - 1\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    \n    # Iterate over the list of tuples and add them to a dictionary if they don't already exist\n    occurrences = {}\n    for tup in test_list:\n        if tup in occurrences:\n            occurrences[tup] += 1\n        else:\n            occurrences[tup] = 1\n    return occurrences \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    result = {}\n    for tup in test_list:\n        if tup not in result:\n            result[tup] = 1\n        else:\n            result[tup] += 1\n    return result\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # Write your function here\n    test_dict = {}\n    for item in test_list:\n        if item in test_dict:\n            test_dict[item] += 1\n        else:\n            test_dict[item] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    d = {}\n    for i in range(len(test_list)):\n        if test_list[i] in d:\n            d[test_list[i]] += 1\n        else:\n            d[test_list[i]] = 1\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    unique_list = list(set(test_list))\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    counter = Counter(test_list)\n    return counter\n    \n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    occurrences = dict()\n    for e in test_list:\n        if e in occurrences:\n            occurrences[e] += 1\n        else:\n            occurrences[e] = 1\n    return occurrences\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # TODO: Write your function here\n    # return_dict = {}\n    # for item in test_list:\n    #     if item in return_dict.keys():\n    #         return_dict[item] += 1\n    #     else:\n    #         return_dict[item] = 1\n    # return return_dict\n    return Counter(test_list)\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    # create an empty dictionary\n    occurences = dict()\n"
    },
    {
        "number": 237,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef check_occurences(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a dictionary mapping each unique tuple to the number of times it occurs in the list.\n    '''\n    dict_occurences = {}\n    for item in test_list:\n        if item in dict_occurences:\n            dict_occurences[item] += 1\n        else:\n            dict_occurences[item] = 1\n    return dict_occurences\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    noOfSubs = 0\n    for i in range(len(str)):\n        for j in range(len(str)):\n            sub = str[i:j+1]\n            if len(sub) > 0:\n                noOfSubs += 1\n    return noOfSubs\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i]!= \"\":\n            count += 1\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    count = 0\n    for i in range(len(str)):\n        if len(str) == 1 and str[0] == '':\n            count += 1\n        else:\n            for j in range(i, len(str)):\n                if str[i:j+1]!= '':\n                    count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    \n    # ans = 0\n    \n    # for i in range(len(str)):\n    #     for j in range(i, len(str)):\n    #         if j-i+1 > 3:\n    #             ans += 1\n    \n    # return ans\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    length = len(str)\n    count = 0\n    for i in range(length):\n        for j in range(length):\n            if str[i:j]!= '':\n                count += 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        temp = str[i:]\n        substring = str[i:i+1]\n        if substring == \"\":\n            count += 1\n    return count\n    "
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    #solution:\n    return len(set(str))\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    x = str.split()\n    print(x)\n    y = len(x)\n    print(y)\n    count = 0\n    for i in range(0,y):\n        for j in range(i,y):\n            if len(x[i]) == 0 or len(x[j]) == 0:\n                break\n            if x[i] == x[j]:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    n = len(str)\n    res = 0\n    for i in range(1,n):\n        for j in range(i,n+1):\n            sub = str[i:j]\n            if sub!= \"\" and (sub not in res) : \n                res += 1\n    print(\"The number of non-empty substrings are:\",res)\n    return res\n"
    },
    {
        "number": 238,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_of_substrings(str): \n    '''\n    Write a python function to count the number of non-empty substrings of a given string.\n    '''\n    count = 0\n    for i in range(len(str)): \n        substring = str[i] \n        for j in range(i, len(str)): \n            substring += str[j] \n            if(substring.isalpha()): \n                count += 1\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    def get_num_sequences(m,n):\n        sequences = []\n        if m == 1:\n            return 1\n        else:\n            count = get_num_sequences(m-1,n)\n            count *= n\n            sequences.append(count)\n            \n            count = get_num_sequences(m-1,n-1)\n            count *= n\n            sequences.append(count)\n            \n            count = get_num_sequences(m-1,n-2)\n            count *= n\n            sequences.append(count)\n            \n            count = get_num_sequences(m-1,n-3)\n            count *= n\n            sequences.append(count)\n            \n            count = get_num_sequences(m-1,n-4)\n            count *= n\n            sequences.append(count)\n            \n            return sum(sequences)\n    \n    return get_num_sequences(m,n)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    i = 0\n    j = 1\n    x = 0\n    a = 0\n    s = m\n    while j <= n:\n        x = s - j\n        y = s - j + 1\n        if x * y >= 0 and x * y <= m:\n            a += 1\n        i += 1\n        j += 1\n    return a\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    sequences = []\n    for i in range(n):\n        if m == 1:\n            break\n        for j in range(n-i):\n            if 2*(j+1) <= m and 2*(j+1) >= m:\n                m -= 2*(j+1)\n                sequences.append(m)\n    sequences.sort()\n    return len(sequences)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    seq = list()\n    \n    for n in range(1,n+1):\n        seq.append(int(m*(n-1)/2) + 1)\n        if seq[n-1] >= m:\n            seq[n-1] = m - 1\n        if seq[n-1] >= 0 and seq[n-1] <= m:\n            seq[n-1] = m - 1\n    return seq\n    \nprint(get_total_number_of_sequences(10,3)) # Should print [1,2,3,4,5,6,7,8,9,10]\nprint(get_total_number_of_sequences(5,1)) # Should print [1,2,3,4,5]\nprint(get_total_number_of_sequences(10,2)) # Should print [1,2,3,4,5,6,7,8,9,10]\nprint(get_total_number_of_sequences(5,2)) # Should print [1,2,3,4,5]\nprint(get_total_number_of_sequences(10,3)) # Should print [1,2,3,4,5,6,7,8,9,10]\nprint(get_total_number_of_sequences(1,1)) # Should print [1]\nprint(get_total_number_of_sequences(1,2)) # Should print [1]\nprint(get_total_number_of_sequences(1,3)) # Should print [1]\nprint(get_total_number_of_sequences(1,4)) # Should print []\nprint(get_total_number_of_sequences(1,5)) # Should print ["
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # Initialize a set of permutations and initialize the count to 0\n    sequence_set = set()\n    sequence_count = 0\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    \n    count = 0\n    for i in range(1,m+1):\n        for j in range(1,n+1):\n            if i <= m and i*2 <= j and j <= m:\n                count += 1\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    # base case\n    if n == 1:\n        return m\n    if n == 0:\n        return 0\n    \n    # recursion\n    return get_total_number_of_sequences(m,n-1) + m*get_total_number_of_sequences(m,n-1)\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    count = 0\n    for i in range(n):\n        count += binom(m,i)*binom(m,i-n)\n    return count\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    number_of_sequences = 0\n    for i in range(n, m+1):\n        first_element_greater_than_or_equal = i\n        for j in range(n-1, 0, -1):\n            if first_element_greater_than_or_equal <= m:\n                second_element_greater_than_or_equal = first_element_greater_than_or_equal + 1\n                number_of_sequences +=  j + 1\n                first_element_greater_than_or_equal = second_element_greater_than_or_equal\n    return number_of_sequences\n"
    },
    {
        "number": 239,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_total_number_of_sequences(m,n): \n    '''\n    Write a function that takes in positive integers m and n and finds the number of possible sequences of length n, such that each element is a positive integer and is greater than or equal to twice the previous element but less than or equal to m.\n    '''\n    from math import log\n    def totSeqs(m,n):\n        # Generating the number of sub sequences\n        subs = 2**(n-1)\n        \n        # Checking if the number of sub sequences is greater than or equal to m\n        if subs <= m:\n            return subs\n        \n        # Calculating the log base 2 of n\n        logBase = log(n,2)\n        \n        # Dividing the number of sub sequences by logBase\n        div = int(logBase/2)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        add = int(m/subs)\n        \n        # Finding the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        div = int(logBase/2)\n        \n        # Finding the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Removing the duplicates\n        div,remove = remove,div\n        \n        # Printing the number of sub sequences that needs to be added to reach m\n        print(add)\n        \n        # Printing the number of sub sequences that needs to be removed to reach m\n        print(remove)\n        \n        # Calculating the number of sub sequences that needs to be added to reach m\n        add = int(m/subs)\n        \n        # Calculating the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        div = int(logBase/2)\n        \n        # Finding the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Removing the duplicates\n        div,remove = remove,div\n        \n        # Printing the number of sub sequences that needs to be added to reach m\n        print(add)\n        \n        # Printing the number of sub sequences that needs to be removed to reach m\n        print(remove)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        add = int(m/subs)\n        \n        # Finding the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        div = int(logBase/2)\n        \n        # Finding the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Removing the duplicates\n        div,remove = remove,div\n        \n        # Printing the number of sub sequences that needs to be added to reach m\n        print(add)\n        \n        # Printing the number of sub sequences that needs to be removed to reach m\n        print(remove)\n        \n        # Calculating the number of sub sequences that needs to be added to reach m\n        add = int(m/subs)\n        \n        # Calculating the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        div = int(logBase/2)\n        \n        # Finding the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Removing the duplicates\n        div,remove = remove,div\n        \n        # Printing the number of sub sequences that needs to be added to reach m\n        print(add)\n        \n        # Printing the number of sub sequences that needs to be removed to reach m\n        print(remove)\n        \n        # Calculating the number of sub sequences that needs to be added to reach m\n        add = int(m/subs)\n        \n        # Calculating the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        div = int(logBase/2)\n        \n        # Finding the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Removing the duplicates\n        div,remove = remove,div\n        \n        # Printing the number of sub sequences that needs to be added to reach m\n        print(add)\n        \n        # Printing the number of sub sequences that needs to be removed to reach m\n        print(remove)\n        \n        # Calculating the number of sub sequences that needs to be added to reach m\n        add = int(m/subs)\n        \n        # Calculating the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        div = int(logBase/2)\n        \n        # Finding the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Removing the duplicates\n        div,remove = remove,div\n        \n        # Printing the number of sub sequences that needs to be added to reach m\n        print(add)\n        \n        # Printing the number of sub sequences that needs to be removed to reach m\n        print(remove)\n        \n        # Calculating the number of sub sequences that needs to be added to reach m\n        add = int(m/subs)\n        \n        # Calculating the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        div = int(logBase/2)\n        \n        # Finding the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Removing the duplicates\n        div,remove = remove,div\n        \n        # Printing the number of sub sequences that needs to be added to reach m\n        print(add)\n        \n        # Printing the number of sub sequences that needs to be removed to reach m\n        print(remove)\n        \n        # Calculating the number of sub sequences that needs to be added to reach m\n        add = int(m/subs)\n        \n        # Calculating the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        div = int(logBase/2)\n        \n        # Finding the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Removing the duplicates\n        div,remove = remove,div\n        \n        # Printing the number of sub sequences that needs to be added to reach m\n        print(add)\n        \n        # Printing the number of sub sequences that needs to be removed to reach m\n        print(remove)\n        \n        # Calculating the number of sub sequences that needs to be added to reach m\n        add = int(m/subs)\n        \n        # Calculating the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        div = int(logBase/2)\n        \n        # Finding the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Removing the duplicates\n        div,remove = remove,div\n        \n        # Printing the number of sub sequences that needs to be added to reach m\n        print(add)\n        \n        # Printing the number of sub sequences that needs to be removed to reach m\n        print(remove)\n        \n        # Calculating the number of sub sequences that needs to be added to reach m\n        add = int(m/subs)\n        \n        # Calculating the number of sub sequences that needs to be removed to reach m\n        remove = int((m/subs)-add)\n        \n        # Finding the number of sub sequences that needs to be added to reach m\n        div = int(logBase/2)\n        \n        # Finding th"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    #new_list = list1.copy()\n    new_list = list1\n    \n    \n    #new_list = new_list[:-1]\n    new_list.pop()\n    \n    for i in range(len(list2)):\n        new_list.append(list2[i])\n    \n    return new_list\n    \n    \ndef reverse_list(list1):\n    '''\n    Write a function that reverses a list. The functon should have no output, but should modify the original list.\n    '''\n    for i in range(len(list1)-1,0,-1):\n        list1[i] = list1[i-1]\n    \n    return list1\n    \n    \ndef reverse_list_recursive(list1):\n    '''\n    Write a recursive function that reverses a list. The function should have no output, but should modify the original list.\n    '''\n    def reverse(lst,start,end):\n        if start >= end:\n            return\n        lst[start],lst[end] = lst[end],lst[start]\n        reverse(lst,start+1,end-1)\n        \n    reverse(list1,0,len(list1)-1)\n    \n    return list1\n    \n    \ndef swap_elements(list1,element1,element2):\n    '''\n    Write a function that takes in a list and two integers.\n    The function should modify the given list so that it contains the element at the index of element1,\n    and the element at index element2. It should not change the order of the other elements in the list.\n    '''\n    new_list = list1.copy()\n    \n    #new_list[element1],new_list[element2] = new_list[element2],new_list[element1]\n    \n    \n    new_list[element1],new_list[element2] = new_list[element2],new_list[element1]\n    \n    return new_list\n    \ndef swap_elements_recursive(list1,element1,element2):\n    '''\n    Write a recursive function that takes in a list and two integers.\n    The function should modify the given list so that it contains the element at the index of element1,\n    and the element at index element2. It should not change the order of the other elements in the list.\n    '''\n    def swap_elements_recursive(lst,element1,element2,start,end):\n        if start >= end:\n            return\n        if start == end-1:\n            lst[start] = lst[element1]\n            lst[start] = lst[element2]\n            return lst\n        lst[start],lst[end] = lst[end],lst[start]\n        swap_elements_recursive(lst,element1,element2,start+1,end-1)\n        \n    swap_elements_recursive(list1,element1,element2,0,len(list1)-1)\n    \n    return list1\n    \ndef remove_duplicates(list1):\n    '''\n    Write a function that takes in a list.\n    The function should modify the list so that all duplicate elements have been removed,\n    and then return the new list.\n    '''\n    def remove_duplicates_recursive(lst):\n        new_list = []\n        \n        if lst == []:\n            return\n        if lst == lst[:1]:\n            return\n        \n        for element in lst:\n            if element not in new_list:\n                new_list.append(element)\n        return new_list\n    \n    remove_duplicates_recursive(list1)\n    return list1\n    \ndef remove_duplicates_recursive_new(list1):\n    new_list = []\n    \n    if len(list1) == 0:\n        return list1\n    if list1 == list1[:1]:\n        return []\n    \n    for i in range(len(list1)-1,0,-1):\n        if list1[i] in list1[i+1:]:\n            list1.pop(i)\n    \n    for element in list1:\n        if element not in new_list:\n            new_list.append(element)\n    \n    return new_list\n    \n    \n    \ndef find_the_duplicate(list1):\n    '''\n    Write a function that takes in a list.\n    The function should return the element that is repeated in the list.\n    '''\n    \n    return \n    \ndef find_the_duplicate_recursive(list1):\n    '''\n    Write a recursive function that takes in a list.\n    The function should return the element that is repeated in the list.\n    '''\n    def find_the_duplicate_recursive(lst,start,end):\n        if start >= end:\n            return\n        if start == end-1:\n            return lst[start]\n        \n        if lst[start] == lst[end]:\n            return find_the_duplicate_recursive(lst,start+1,end-1)\n        return \n    \n    return find_the_duplicate_recursive(list1,0,len(list1)-1)\n    \n    \n    \n    \n    \ndef max_list_iter(list1):\n    '''\n    Write a function that takes in a list.\n    The function should return the maximum value in the list.\n    '''\n    if len(list1) == 0:\n        return\n    \n    if len(list1) == 1:\n        return list1[0]\n    \n    new_max = max(list1[0],max_list_iter(list1[1:]))\n    \n    return new_max\n    \n    \ndef max_list_recursive(list1):\n    '''\n    Write a recursive function that takes in a list.\n    The function should return the maximum value in the list.\n    '''\n    if len(list1) == 0:\n        return\n    \n    if len(list1) == 1:\n        return list1[0]\n    \n    new_max = max_list_recursive(list1[1:])\n    \n    if list1[0] > new_max:\n        return list1[0]\n    else:\n        return new_max\n    \n    \ndef reverse_recursive(list1):\n    '''\n    Write a recursive function that takes in a list and returns a reversed version of the list.\n    '''\n    if len(list1) == 0:\n        return []\n    \n    if len(list1) == 1:\n        return list1\n    \n    return reverse_recursive(list1[1:]) + list1[:1]\n    \ndef sum_list_iter(list1):\n    '''\n    Write a function that takes in a list.\n    The function should return the sum of all the integers in the list.\n    '''\n    if len(list1) == 0:\n        return\n    \n    if len(list1) == 1:\n        return list1[0]\n    \n    new_sum = list1[0] + sum_list_iter(list1[1:])\n    \n    return new_sum\n    \n    \ndef sum_list_recursive(list1):\n    '''\n    Write a recursive function that takes in a list.\n    The function should return the sum of all the integers in the list.\n    '''\n    if len(list1) == 0:\n        return\n    \n    if len(list1) == 1:\n        return list1[0]\n    \n    return sum_list_recursive(list1[1:]) + list1[0]\n    \ndef reverse_recursive_new(list1):\n    '''\n    Write a recursive function that takes in a list and returns a reversed version of the list.\n    '''\n    if len(list1) == 0:\n        return []\n    \n    if len(list1) == 1:\n        return list1\n    \n    return reverse_recursive_new(list1[1:]) + list1[:1]\n    \ndef minimum_index(list1):\n    '''\n    Write a function that takes in a list and returns the index of the minimum element in the list."
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.remove(list1[-1])\n    list1.extend(list2)\n    return list1\n    \n    \n    \n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.append(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    x=list1[:]\n    x[0]=list2\n    print(x)\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2[:1]\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1[-1:] = list2\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    list1.pop()\n    list1.extend(list2)\n    return list1\n"
    },
    {
        "number": 240,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_list(list1,list2):\n    '''\n    Write a function that takes in two lists and replaces the last element of the first list with the elements of the second list.\n    '''\n    if len(list1) < 1:\n        print(\"List1 should not be empty\")\n        return\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    char_count = 0\n    for i in range(0, len(str1)):\n        if str1[i] =='' or str1[i] == ',' or str1[i] == '.' or str1[i] == '!':\n            char_count += 1\n        elif str1[i] == ')':\n            char_count += 1\n        elif str1[i] == '\\'':\n            char_count += 1\n        elif str1[i] == '-':\n            char_count += 1\n        elif str1[i] == ';':\n            char_count += 1\n        elif str1[i] == ':':\n            char_count += 1\n        elif str1[i] == '\\n':\n            char_count += 1\n        elif str1[i] == '=':\n            char_count += 1\n        elif str1[i] == '#':\n            char_count += 1\n        elif str1[i] == '?':\n            char_count += 1\n        elif str1[i] == '+':\n            char_count += 1\n        elif str1[i] == '_':\n            char_count += 1\n        elif str1[i] == '`':\n            char_count += 1\n        elif str1[i] == '{':\n            char_count += 1\n        elif str1[i] == '%':\n            char_count += 1\n        elif str1[i] == '^':\n            char_count += 1\n        elif str1[i] == '~':\n            char_count += 1\n        elif str1[i] == '<':\n            char_count += 1\n        elif str1[i] == ':':\n            char_count += 1\n        elif str1[i] == '@':\n            char_count += 1\n        elif str1[i] == '|':\n            char_count += 1\n        elif str1[i] == '\\'':\n            char_count += 1\n        elif str1[i] == '-':\n            char_count += 1\n        elif str1[i] == '>':\n            char_count += 1\n        elif str1[i] == '*':\n            char_count += 1\n        elif str1[i] == '.':\n            char_count += 1\n        elif str1[i] == '$':\n            char_count += 1\n        elif str1[i] == '\\\\':\n            char_count += 1\n        elif str1[i] == '{':\n            char_count += 1\n        elif str1[i] == ']':\n            char_count += 1\n        elif str1[i] == '-':\n            char_count += 1\n        elif str1[i] == '+':\n            char_count += 1\n        elif str1[i] == ']':\n            char_count += 1\n        elif str1[i] == '@':\n            char_count += 1\n        elif str1[i] == '#':\n            char_count += 1\n        elif str1[i] == ';':\n            char_count += 1\n        elif str1[i] == ':':\n            char_count += 1\n        elif str1[i] == ',':\n            char_count += 1\n        elif str1[i] == '\\'':\n            char_count += 1\n        elif str1[i] == '^':\n            char_count += 1\n        elif str1[i] == '~':\n            char_count += 1\n        elif str1[i] == '-':\n            char_count += 1\n        elif str1[i] == '`':\n            char_count += 1\n        elif str1[i] == '{':\n            char_count += 1\n        elif str1[i] == '%':\n            char_count += 1\n        elif str1[i] == '^':\n            char_count += 1\n        elif str1[i] == '~':\n            char_count += 1\n        elif str1[i] == '=':\n            char_count += 1\n        elif str1[i] == '>':\n            char_count += 1\n        elif str1[i] == '*':\n            char_count += 1\n        elif str1[i] == '.':\n            char_count += 1\n        elif str1[i] == '$':\n            char_count += 1\n        elif str1[i] == '\\\\':\n            char_count += 1\n        elif str1[i] == '}':\n            char_count += 1\n        elif str1[i] == '\\'':\n            char_count += 1\n        elif str1[i] == '-':\n            char_count += 1\n        elif str1[i] == '+':\n            char_count += 1\n        elif str1[i] == ']':\n            char_count += 1\n        elif str1[i] == '@':\n            char_count += 1\n        elif str1[i] == '#':\n            char_count += 1\n        elif str1[i] == ';':\n            char_count += 1\n        elif str1[i] == ':':\n            char_count += 1\n        elif str1[i] == ',':\n            char_count += 1\n        elif str1[i] == '\\n':\n            char_count += 1\n        elif str1[i] == '=':\n            char_count += 1\n        elif str1[i] == '>':\n            char_count += 1\n        elif str1[i] == '*':\n            char_count += 1\n        elif str1[i] == '.':\n            char_count += 1\n        elif str1[i] == '$':\n            char_count += 1\n        elif str1[i] == '\\\\':\n            char_count += 1\n        elif str1[i] == '}':\n            char_count += 1\n        elif str1[i] == '\\'':\n            char_count += 1\n        elif str1[i] == '-':\n            char_count += 1\n        elif str1[i] == '+':\n            char_count += 1\n        elif str1[i] == ']':\n            char_count += 1\n        elif str1[i] == '@':\n            char_count += 1\n        elif str1[i] == '#':\n            char_count += 1\n        elif str1[i] == ';':\n            char_count += 1\n        elif str1[i] == ':':\n            char_count += 1\n        elif str1[i] == ',':\n            char_count += 1\n        elif str1[i] == '\\n':\n            char_count += 1\n        elif str1[i] == '=':\n            char_count += 1\n        elif str1[i] == '>':\n            char_count += 1\n        elif str1[i] == '*':\n            char_count += 1\n        elif str1[i] == '.':\n            char_count += 1\n        elif str1[i] == '$':\n            char_count += 1\n        elif str1[i] == '\\\\':\n            char_count += 1\n        elif str1[i] == '}':\n            char_count += 1\n        elif str1[i] == '\\'':\n            char_count += 1\n        elif str1[i] == '-':\n            char_count += 1\n        elif str1[i] == '+':\n            char_count += 1\n        elif str1[i] == ']':\n            char_count += 1\n        elif str1[i] == '@':\n            char_count += 1\n        elif str1[i] == '#':\n            char_count += 1\n        elif str1[i] == ';':\n            char_count += 1\n        elif str1[i] == ':':\n            char_count += 1\n        elif str1[i] == ',':\n            char_count += 1\n        elif str1[i] == '\\n':\n            char"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n    \n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    n = len(str1)\n    return n\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 242,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_charac(str1):\n    '''\n    Write a function to count the total number of characters in a string.\n    '''\n    return len(str1)\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N % 2 == 0): \n        N = N + 1\n        print(\"next_Perfect_Square:\", N) \n        return N \n    else: \n        N = N + 2\n        print(\"next_Perfect_Square:\", N) \n        return N \n    \n    \ndef print_Primes(N): \n    '''\n    Write a python function to print all primes between 0 to N (both included).\n    '''\n    for i in range(2,N):\n        if i * i < N:\n            print(i, end=\" \")\n        else:\n            return\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    print(\"N:\", N)\n    if (N < 0):\n        return -1\n    \n    if (N == 0):\n        return 1\n    \n    prev = 0\n    while (prev*prev < N):\n        prev += 1\n    \n    #print(\"prev:\", prev)\n    return prev*prev\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    def is_perfect_square(n): \n        s = int(math.sqrt(n)) \n        return s*s == n \n    \n    if is_perfect_square(N): \n        return int(N)\n    i = N - 1\n    while i > 0: \n        if is_perfect_square(i): \n            return i\n        i = i - 1\n    return -1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    sq = int(math.sqrt(N))\n    if sq*sq == N:\n        return sq\n    else:\n        return next_Perfect_Square(N-1)\n        \nprint(next_Perfect_Square(10))  # 8\nprint(next_Perfect_Square(12))  # 13\nprint(next_Perfect_Square(99))  # 100\nprint(next_Perfect_Square(100))  # 100\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if N == 0:\n        return N\n    result = (N + 1)//2\n    while (result * result)!= N:\n        result = (result + 1)//2\n    return result*2\nprint(next_Perfect_Square(2)) # 1\nprint(next_Perfect_Square(3)) # 4\nprint(next_Perfect_Square(4)) # 2\nprint(next_Perfect_Square(5)) # 4\nprint(next_Perfect_Square(8)) # 4\nprint(next_Perfect_Square(10)) # 8\nprint(next_Perfect_Square(100)) # 16\nprint(next_Perfect_Square(100)) # 16\nprint(next_Perfect_Square(100)) # 16\nprint(next_Perfect_Square(200)) # 16\nprint(next_Perfect_Square(200)) # 32\nprint(next_Perfect_Square(201)) # 16\nprint(next_Perfect_Square(301)) # 32\nprint(next_Perfect_Square(301)) # 32\nprint(next_Perfect_Square(400)) # 32\nprint(next_Perfect_Square(402)) # 16\nprint(next_Perfect_Square(401)) # 16\nprint(next_Perfect_Square(403)) # 16\nprint(next_Perfect_Square(100)) # 16\nprint(next_Perfect_Square(101)) # 16\nprint(next_Perfect_Square(1)) # 1\nprint(next_Perfect_Square(0)) # 0\nprint(next_Perfect_Square(-1)) # 0\nprint(next_Perfect_Square(-2)) # 0\nprint(next_Perfect_Square(2)) # 1\nprint(next_Perfect_Square(3)) # 4\nprint(next_Perfect_Square(5)) # 2\nprint(next_Perfect_Square(6)) # 2\nprint(next_Perfect_Square(7)) # 4\nprint(next_Perfect_Square(8)) # 4\nprint(next_Perfect_Square(10)) # 8\nprint(next_Perfect_Square(9)) # 4\nprint(next_Perfect_Square(11)) # 8\nprint(next_Perfect_Square(20)) # 16\nprint(next_Perfect_Square(21)) # 16\nprint(next_Perfect_Square(22)) # 16\nprint(next_Perfect_Square(23)) # 16\nprint(next_Perfect_Square(24)) # 16\nprint(next_Perfect_Square(25)) # 16\nprint(next_Perfect_Square(26)) # 16\nprint(next_Perfect_Square(27)) # 16\nprint(next_Perfect_Square(28)) # 16\nprint(next_Perfect_Square(29)) # 16\nprint(next_Perfect_Square(30)) # 16\nprint(next_Perfect_Square(31)) # 16\nprint(next_Perfect_Square(32)) # 16\nprint(next_Perfect_Square(33)) # 16\nprint(next_Perfect_Square(34)) # 16\nprint(next_Perfect_Square(35)) # 16\nprint(next_Perfect_Square(36)) # 16\nprint(next_Perfect_Square(37)) # 16\nprint(next_Perfect_Square(38)) # 16\nprint(next_Perfect_Square(39)) # 16\nprint(next_Perfect_Square(40)) # 16\nprint(next_Perfect_Square(41)) # 16\nprint(next_Perfect_Square(42)) # 16\nprint(next_Perfect_Square(43)) # 16\nprint(next_Perfect_Square(44)) # 16\nprint(next_Perfect_Square(45)) # 16\nprint(next_Perfect_Square(46)) # 16\nprint(next_Perfect_Square(47)) # 16\nprint(next_Perfect_Square(48)) # 16\nprint(next_Perfect_Square(49)) # 16\nprint(next_Perfect_Square(50)) # 16\nprint(next_Perfect_Square(51)) # 16\nprint(next_Perfect_Square(52)) # 16\nprint(next_Perfect_Square(53)) # 16\nprint(next_Perfect_Square(54)) # 16\nprint(next_Perfect_Square(55)) # 16\nprint(next_Perfect_Square(56)) # 16\nprint(next_Perfect_Square(57)) # 16\nprint(next_Perfect_Square(58)) # 16\nprint(next_Perfect_Square(59)) # 16\nprint(next_Perfect_Square(60)) # 16\nprint(next_Perfect_Square(61)) # 16\nprint(next_Perfect_Square(62)) # 16\nprint(next_Perfect_Square(63)) # 16\nprint(next_Perfect_Square(64)) # 16\nprint(next_Perfect_Square(65)) # 16\nprint(next_Perfect_Square(66)) # 16\nprint(next_Perfect_Square(67)) # 16\nprint(next_Perfect_Square(68)) # 16\nprint(next_Perfect_Square(69)) # 16\nprint(next_Perfect_Square(70)) # 16\nprint(next_Perfect_Square(71)) # 16\nprint(next_Perfect_Square(72)) # 16\nprint(next_Perfect_Square(73)) # 16\nprint(next_Perfect_Square(74)) # 16\nprint(next_Perfect_Square(75)) # 16\nprint(next_Perfect_Square(76)) # 16\nprint(next_Perfect_Square(77)) # 16\nprint(next_Perfect_Square(78)) # 16\nprint(next_Perfect_Square(79)) # 16\nprint(next_Perfect_Square(80)) # 16\nprint(next_Perfect_Square(81)) # 16\nprint(next_Perfect_Square(82)) # 16\nprint(next_Perfect_Square(83)) # 16\nprint(next_Perfect_Square(84)) # 16\nprint(next_Perfect_Square(85)) # 16\nprint(next_Perfect_Square(86)) # 16\nprint(next_Perfect_Square(87)) # 16\nprint(next_Perfect_Square(88)) # 16\nprint(next_Perfect_Square(89)) # 16\nprint(next_Perfect_Square(90)) # 16\nprint(next_Perfect_Square(91)) # 16\nprint(next_Perfect_Square(92)) # 16\nprint(next_Perfect_Square(93)) # 16\nprint(next_Perfect_Square(94)) # 16\nprint(next_Perfect_Square(95)) # 16\nprint(next_Perfect_Square(96)) # 16\nprint(next_Perfect_Square(97)) # 16\nprint(next_Perfect_Square(98)) # 16\nprint(next_Perfect_Square(99)) # 16\nprint(next_Perfect_Square(100)) # 16\nprint(next_Perfect_Square(101)) # 16\nprint(next_Perfect_Square(102)) # 16\nprint(next_Perfect_Square(103)) # 16\nprint(next_Perfect_Square(104)) # 16\nprint(next_Perfect_Square(105)) # 16\nprint(next_Perfect_Square(106)) # 16\nprint(next_Perfect_Square(107)) # 16\nprint(next_Perfect_Square(108)) # 16\nprint(next_Perfect_Square(109)) # 16\nprint(next_Perfect_Square(110)) # 16\nprint(next_Perfect_Square(111)) # 16\nprint(next_Perfect_Square(112)) # 16\nprint(next_Perfect_Square(113)) # 16\nprint(next_Perfect_Square(114)) # 16\nprint(next_Perfect_Square(115)) # 16\nprint(next_Perfect_Square(116)) # 16\nprint(next_Perfect_Square(117)) # 16\nprint(next_Perfect_Square(118)) # 16\nprint(next_Perfect_Square(119)) # 16\nprint(next_Perfect_Square(120)) # 16\nprint(next_Perfect_Square(121)) # 16\nprint(next_Perfect_Square(122)) # 16\nprint(next_Perfect_Square(123)) # 16\nprint(next_Perfect_Square(124)) # 16\nprint(next_Perfect_Square(125)) # 16\nprint(next_Perfect_Square(126)) # 16\nprint(next_Perfect_Square(127)) # 16\nprint(next_Perfect_Square(128)) # 16\nprint(next_Perfect_Square(129)) # 16\nprint(next_Perfect_Square(130)) # 16\nprint(next_Perfect_Square(131)) # 16\nprint(next_Perfect_Square(132)) # 16\nprint(next_Perfect_Square(133)) # 16\nprint(next_Perfect_Square(134)) # 16\nprint(next_Perfect_Square(135)) # 16\nprint(next_Perfect_Square(136)) # 16\nprint(next_Perfect_Squar"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    N = int(N)\n    i = 1\n    while N%i!= 0:\n        i = i + 1\n        if i > N:\n            return False\n    return N+1\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    while (True):\n        N = int(N ** 0.5)\n        if N*N == N:\n            return N\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    x=int(math.sqrt(N))\n    i=x+1\n    while i*i<=N:\n        x=i\n        i+=1\n    return x*x\nprint(next_Perfect_Square(1))\nprint(next_Perfect_Square(9))\nprint(next_Perfect_Square(100))\n"
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if (N <= 0): \n        return -1\n    if (N == 1): \n        return N \n    start = int(math.sqrt(N)) \n    end = int(math.sqrt(N + 1)) \n    while (start + 1 < end): \n        mid = int((start + end) / 2) \n        if (mid * mid <= N and (mid + 1) * (mid + 1) > N): \n            return mid * mid\n        elif (mid * mid > N and mid < (start + 1)): \n            end = mid \n        else: \n            start = mid \n    if (mid * mid == N): \n        return mid * mid\n    return mid + 1\n    "
    },
    {
        "number": 244,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef next_Perfect_Square(N): \n    '''\n    Write a python function to find the next perfect square greater than a given number.\n    '''\n    if(N == 1):\n        return N + 1\n    if(N - 1 < 0):\n        return 1\n    if(N - 1 % 2 == 0):\n        return N + 1\n    else:\n        return N\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) < 2:\n        return 0\n    else:\n        low = 0\n        high = len(arr) - 1\n        \n        while low < high:\n            if arr[low] < arr[high]:\n                low += 1\n            else:\n                high -= 1\n        \n        return sum(arr[low: high + 1])\n        \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    #Solution 1\n    #initialize maxSum and MinSum\n    maxSum = arr[0]\n    MinSum = arr[0]\n    for i in range(1,len(arr)):\n        maxSum = max(maxSum, arr[i] + MinSum)\n        MinSum = min(MinSum, arr[i] - MaxSum)\n        maxSum = max(maxSum, arr[i])\n    return maxSum\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    def bitonic_max_sum_recursive(arr, n, l, r):\n        # Base case\n        if l==r:\n            return arr[l]\n        #if n is even then there is no maximum \n        if n%2==0:\n            return 0\n        #find the middle index \n        m = (l+r)//2\n        #get the max sum in left and right subarray\n        left = bitonic_max_sum_recursive(arr, n, l, m)\n        right = bitonic_max_sum_recursive(arr, n, m+1, r)\n        #get the maximum of left and right subarray\n        max_left = left+arr[m]\n        max_right = right+arr[m+1]\n        return max(max_left, max_right)\n    return bitonic_max_sum_recursive(arr, len(arr), 0, len(arr)-1)\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    if n < 2:\n        return 0\n    max_left = 0\n    max_right = 0\n    max_sum = 0\n    for i in range(n):\n        max_left = max_left + arr[i]\n        if i < n-1:\n            max_right = max_right + arr[n-1-i]\n        else:\n            max_right = max_right + arr[i]\n        if max_sum < max_left:\n            max_sum = max_left\n        if max_sum < max_right:\n            max_sum = max_right\n    return max_sum\n        \n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if len(arr) == 1: \n        return arr[0]\n    elif len(arr) == 2: \n        return max(arr[0],arr[1])\n    elif len(arr) == 3:\n        return max(max_sum(arr[:2]) + arr[2], arr[1])\n    else:\n        return max(max_sum(arr[:len(arr)-1]) + arr[len(arr)-1], max_sum(arr[:len(arr)-2]) + arr[len(arr)-2])\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    if not arr:\n        return 0\n    res = curr_max = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < curr_max:\n            curr_max = arr[i]\n            res = max(res, curr_max)\n        else:\n            curr_max = max(curr_max, arr[i] - curr_max)\n            res = max(res, curr_max)\n    return res\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    ans = curr = float('-inf')\n    for num in arr:\n        if num > curr:\n            curr = num\n        ans = max(ans, curr+num)\n    return ans\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    max_so_far = -999999999999\n    #Max sum in range (0, k)\n    for k in range(1, n+1):\n        for j in range(1, n+1):\n            #Increasing subsequence\n            if arr[j-1] < arr[j]:\n                dp[k][j] = max(arr[j-1]+dp[k-1][j-1], arr[j]+dp[k][j-1])\n            #Decreasing subsequence\n            else:\n                dp[k][j] = max(arr[j-1]+dp[k-1][j-1], arr[j]+dp[k][j-1])\n                \n    return dp[n][n]\n    \ndef min_sum(arr):\n    '''\n    Write a function that takes an array and finds the minimum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    n = len(arr)\n    dp = [[0 for _ in range(n+1)] for _ in range(n+1)]\n    min_so_far = 9999999999999999999999999999999999999\n    #Max sum in range (0, k)\n    for k in range(1, n+1):\n        for j in range(1, n+1):\n            #Increasing subsequence\n            if arr[j-1] < arr[j]:\n                dp[k][j] = min(arr[j-1]+dp[k-1][j-1], arr[j]+dp[k][j-1])\n            #Decreasing subsequence\n            else:\n                dp[k][j] = min(arr[j-1]+dp[k-1][j-1], arr[j]+dp[k][j-1])\n                \n    return dp[n][n]\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    cur_max = 0\n    cur_sum = 0\n    ans = 0\n    for i in range(0, len(arr)):\n        cur_sum += arr[i]\n        if cur_max < cur_sum:\n            cur_max = cur_sum\n            ans = cur_max\n        elif cur_sum < 0:\n            cur_sum = 0\n    return ans\n"
    },
    {
        "number": 245,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum(arr): \n    '''\n    Write a function that takes an array and finds the maximum sum of a bitonic subsequence for the given array, where a sequence is bitonic if it is first increasing and then decreasing.\n    '''\n    max_so_far = 0\n    local_max = 0\n    for i in range(len(arr)):\n        local_max = max(0, local_max + arr[i])\n        max_so_far = max(max_so_far, local_max)\n    return max_so_far\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number<0:\n        return \"Square root of negative numbers is not possible\"\n    elif number == 0:\n        return 0\n    else:\n        from math import sqrt\n        x=number\n        while True:\n            a = ((x*x)/2) + x\n            if a == x:\n                return x\n            else:\n                x = a\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    a = 2\n    b = number / a\n    while True:\n        c = a + b / a\n        if abs(c - b) < 0.0001:\n            break\n        a = b\n        b = c\n    return b\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    assert number >= 0\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    return number**(1/2)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    #print(number)\n    epsilon = 1e-12\n    if number < 0:\n        raise ValueError(\"Square root is not defined for negative numbers\")\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    while x - int(x)!= 0:\n        x = int(x) / 2 + int(x) / 2\n    return int(x)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    x = number\n    while True:\n        x = (x + 1) / 2\n        if abs(x - 1) < 1e-6:\n            return x\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    if number == 0:\n        return 0\n    else:\n        return number / 2 + ((number - 1) / 2)\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    approx = number / 2\n    while approx!= number:\n        approx = (approx + number / approx) / 2\n    return approx\n"
    },
    {
        "number": 246,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def babylonian_squareroot(number):\n    '''\n    Write a function for computing square roots using the babylonian method.\n    '''\n    guess = number/2\n    while guess*guess!= number:\n        guess = (guess + number/guess)/2\n    return guess\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_util(str, n): \n        L = [[0 for x in range(n)] for x in range(n)] \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str)\n    # dp[i][j] is length of the longest palindromic subsequence ending with str[i] and str[j]\n    dp = [[0 for _ in range(n)] for _ in range(n)] \n    \n    # Length of the empty string \n    for i in range(n): \n        dp[i][i] = 1\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    if len(str)==0:\n        return 0\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def isPalindrome(str):\n        if len(str) == 0:\n            return False\n        elif len(str) == 1:\n            return True\n        else:\n            temp = str[0]\n            rev = str[-1]\n            for i in range(1, len(str)-1):\n                if temp!= str[i]:\n                    return False\n                temp = str[i]\n            return True\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    #Initializing maxLen and starting from 0\n    maxLen=0\n    for i in range(0,len(str)):\n        \n        #Initializing suffix array\n        SuffixArray=[]\n        for j in range(i,len(str)):\n            SuffixArray.append(str[j])\n        SuffixArray.append('$')\n        #Initializing Pivot Array\n        PivotArray=[]\n        for j in range(i,len(str)):\n            PivotArray.append(str[j])\n        PivotArray.append('$')\n        \n        #Initializing Longest\n        Longest=0\n        \n        #Looping through the suffix array\n        for j in range(0,len(SuffixArray)):\n            if SuffixArray[j]=='$':\n                break\n            else:\n                PivotArray.append(SuffixArray[j])\n                Longest=max(Longest,len(PivotArray)-1)\n                while(Longest>0 and PivotArray[Longest]!='$'):\n                    #If Last element is not a '$' then delete it\n                    PivotArray.pop(Longest)\n                    Longest-=1\n        maxLen=max(maxLen,Longest+1)\n    print(\"LPS is: \",maxLen)\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    n = len(str) \n    lps = [[0 for i in range(n)] for j in range(n)] \n    maxLen = 1\n    for i in range(1, n): \n    \n        for j in range(0, i + 1): \n    \n            if (i == j): \n                lps[i][j] = 1\n            elif (str[i] == str[j] and i - j <= 2): \n                lps[i][j] = 2\n            else: \n                lps[i][j] = max(lps[i - 1][j], lps[i - 1][j - 1], lps[i][j - 1]) \n            if (lps[i][j] > maxLen): \n                maxLen = lps[i][j] \n    return maxLen \n    \nif __name__ == '__main__':\n    print(lps(\"babad\")) # 3\n    print(lps(\"cbbd\")) # 2\n    print(lps(\"ac\")) # 1\n    print(lps(\"\")) # 1"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    lps = [-1]*len(str)\n    max_len = 0\n    for i in range(len(str)): \n     \n        # One by one compare characters \n        # from 0 to n-1 \n        # for longest palindrome \n        # function lps\n        lps[i] = lps[i - 1] \n    \n        # If current character is same, \n        # then increment\n        if (i - lps[i] >= 1 and str[i] == str[i - lps[i] - 1]): \n            lps[i] += 1\n            max_len = max(max_len, lps[i]) \n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    def lps_util(str,l,r):\n        if l==r:\n            return 1\n        if str[l]==str[r]:\n            return lps_util(str,l+1,r-1) + 2\n        return max(lps_util(str,l+1,r), lps_util(str,l,r-1))\n    return lps_util(str,0,len(str)-1)"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    dp = [[0 for i in range(len(str))] for j in range(len(str))]\n    \n    for i in range(1, len(str)):\n        for j in range(1, len(str)):\n            if str[i] == str[j]:\n                dp[i][j] = 1 + dp[i-1][j-1]\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1])\n    \n    return dp[len(str)-1][len(str)-1]\n"
    },
    {
        "number": 247,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lps(str): \n    '''\n    Write a function to find the length of the longest palindromic subsequence in the given string.\n    '''\n    # Approach 1\n    '''\n    str = \"aabcbdaab\"\n    i = 0\n    max_len = 1\n    while i < (len(str) - 1):\n        if str[i] == str[i + 1]:\n            i = i + 2\n            max_len = max_len + 2\n        else:\n            i = i + 1\n            max_len = max_len + 1\n    return max_len\n    '''\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return 1/n + 1/(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    pass\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return ((2 * n) + 1) / n\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (1 + n) / 2.0\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n + harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum += 1/i\n    return sum\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    if n <= 1:\n        return n\n    else:\n        return n/harmonic_sum(n-1)\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    return (n + (n-1)/(n-2)) / 2\n"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(0,n):\n        sum = sum + 1/i\n    return sum"
    },
    {
        "number": 248,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def harmonic_sum(n):\n    '''\n    Write a function that takes in an integer n and calculates the harmonic sum of n-1.\n    '''\n    sum = 0\n    for i in range(1, n):\n        sum = sum + i/i\n    return sum\n    \n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    return list(set(array_nums1)&set(array_nums2))\n    \nprint(intersection_array([1,2,3,4,5],[2,2,3,4,6]))\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    array_nums1.sort()\n    array_nums2.sort()\n    idx_1 = 0\n    idx_2 = 0\n    len_array1 = len(array_nums1)\n    len_array2 = len(array_nums2)\n    intersection = []\n    while idx_1 < len_array1 and idx_2 < len_array2:\n        if array_nums1[idx_1] < array_nums2[idx_2]:\n            idx_1 += 1\n        elif array_nums1[idx_1] > array_nums2[idx_2]:\n            idx_2 += 1\n        else:\n            intersection.append(array_nums1[idx_1])\n            idx_1 += 1\n            idx_2 += 1\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    result_list = []\n    for i in array_nums1:\n        if i in array_nums2 and i not in result_list:\n            result_list.append(i)\n    return result_list\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # create a dictionary to count array elements\n    counter = {}\n    for element in array_nums1:\n        if element in counter:\n            counter[element] += 1\n        else:\n            counter[element] = 1\n    \n    # loop through the second array elements\n    for element in array_nums2:\n        if element in counter and counter[element] > 0:\n            counter[element] -= 1\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    inter_arr = []\n    for i in array_nums1:\n        if i in array_nums2:\n            inter_arr.append(i)\n    return inter_arr\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    intersection = []\n    for num in array_nums1:\n        if num in array_nums2:\n            intersection.append(num)\n    return intersection\n    # Write your function here\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    # find length of shorter array\n    min_length = min(len(array_nums1),len(array_nums2))\n    for i in range(min_length):\n        if array_nums1[i]!= array_nums2[i]:\n            return array_nums1[:i]\n    return array_nums1\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    new = []\n    if len(array_nums1) > len(array_nums2):\n        for i in array_nums1:\n            if i in array_nums2:\n                new.append(i)\n    else:\n        for i in array_nums2:\n            if i in array_nums1:\n                new.append(i)\n    return new\n"
    },
    {
        "number": 249,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def intersection_array(array_nums1,array_nums2):\n    '''\n    Write a function to find the intersection of two arrays.\n    '''\n    sorted_arr_nums1 = sorted(array_nums1)\n    sorted_arr_nums2 = sorted(array_nums2)\n    for num in sorted_arr_nums1:\n        if num in sorted_arr_nums2:\n            return num\n    return False\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    return tup.count(x)\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for elem in tup:\n        if elem == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for e in tup:\n        if e == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    occurences = 0\n    for i in tup:\n        if i == x:\n            occurences += 1\n    return occurences\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    cnt = 0\n    for i in tup:\n        if i == x:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for i in tup:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    n = 0\n    for i in tup:\n        if i == x:\n            n += 1\n    return n\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for element in tup:\n        if element == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 250,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_X(tup, x): \n    '''\n    Write a python function that takes in a tuple and an element and counts the occcurences of the element in the tuple.\n    '''\n    count = 0\n    for ele in tup:\n        if x == ele:\n            count += 1\n    return count\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    return list[:element]+[element]+list[element:]\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    element = element[0]\n    new_list = []\n    for i in range(0,len(list)):\n        if element == list[i]:\n            new_list.append(element)\n            new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    i = 0\n    while i < len(list):\n        if list[i] == element:\n            list.insert(i,element)\n            return list\n        else:\n            i = i+1\n    list.append(element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=list.copy()\n    new_list.append(element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list=list\n    for i in range(len(list)):\n        if i == len(list)-1:\n            new_list.append(element)\n            break\n        new_list.insert(i,element)\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    for x in range(len(list)):\n        if x == 0:\n            list.insert(0,element)\n        elif list[x] == element:\n            list.insert(x,element)\n        else:\n            list.insert(x+1,element)\n    return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    for i in range(len(list)):\n        if list[i] == element:\n            list.insert(i, element)\n            return list\n        elif i == len(list)-1:\n            return list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    new_list = []\n    for index in range(0,len(list)):\n        if list[index] == element:\n            index += 1\n            for i in range(0,index):\n                new_list.append(list[i])\n            new_list.append(element)\n            for i in range(index,len(list)):\n                new_list.append(list[i])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    # Your code here\n    \n    new_list = []\n    for i in range(len(list)):\n        if list[i] == element:\n            new_list.append(element)\n            new_list.append(list[i])\n            del list[i]\n        else:\n            new_list.append(list[i])\n    new_list.append(list[-1])\n    return new_list\n"
    },
    {
        "number": 251,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def insert_element(list,element):\n    '''\n    Write a function that takes in a list and an element and inserts the element before each element in the list, and returns the resulting list.\n    '''\n    list.append(element)\n    return list\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    print(\"The function accepts the following input:\")\n    print(\"A list of complex numbers\")\n    print(\"Example: [1+2j, 5-6j, 7+9j]\")\n    print(\"The output of the function should be:\")\n    print(\"The first element of the list is the magnitude of the complex number\")\n    print(\"The second element of the list is the phase of the complex number\")\n    print(\"The third element of the list is the polar coordinates\")\n    print(\"Example: [2.23, 2.2, (2.23, 2.2)]\")\n    print(\"A list of complex numbers that will be passed in as an input\")\n    \n    complex_list = []\n    for i in numbers:\n        complex_list.append(i)\n        #To convert the complex numbers into polar coordinates\n    polar_list = []\n    #Magnitude\n    magnitude = []\n    for i in complex_list:\n        magnitude.append(abs(i))\n    #Phase\n    phase = []\n    for i in complex_list:\n        phase.append(complex(i).real)\n    #Polar coordinates\n    for i in range(len(magnitude)):\n        x = abs(magnitude[i]) * (2 * cmath.pi) / (2 * cmath.pi)\n        y = (complex(magnitude[i])/2)\n        polar_list.append((x, y))\n    #List for output\n    out_list = []\n    for i in range(len(polar_list)):\n        output_magnitude = polar_list[i][0]\n        output_phase = polar_list[i][1]\n        output_list = [output_magnitude, output_phase]\n        out_list.append(output_list)\n    return out_list\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    list1 = []\n    list2 = []\n    for item in numbers:\n        item = str(item)\n        a = item.split('+')\n        b = a[0].split('j')\n        c = b[0].replace(\"-\",\"\")\n        d = c.replace(\"i\",\"\")\n        list1.append(d)\n        e = a[1].split('j')\n        f = e[0].replace(\"-\",\"\")\n        g = f.replace(\"i\",\"\")\n        list2.append(g)\n    return (list1,list2)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        if numbers[i] == '+' or numbers[i] == '-':\n            numbers[i] = 0\n        if numbers[i] == 'i' or numbers[i] == 'j':\n            numbers[i] = 1\n    values = []\n    for i in range(len(numbers)):\n        if numbers[i] == 0:\n            values.append(numbers[i])\n        if numbers[i] == 1:\n            values.append(numbers[i])\n    numbers = values\n    # print(numbers)\n    max_ = 0\n    n = 0\n    for i in range(len(numbers)):\n        # print(i)\n        if numbers[i] > max_:\n            max_ = numbers[i]\n            n = i\n    values[n] = 0\n    for i in range(len(numbers)):\n        if i!= n:\n            values[i] = -values[i]\n    # print(values)\n    sum_ = 0\n    for i in range(len(values)):\n        sum_ += values[i]\n    # print(sum_)\n    for i in range(len(values)):\n        values[i] = values[i] / abs(sum_)\n    \n    x = 0\n    y = 0\n    angle = 0\n    for i in range(len(values)):\n        if values[i] == 0:\n            continue\n        angle = i * 180 / len(values)\n        x += values[i] * math.cos(math.radians(angle))\n        y += values[i] * math.sin(math.radians(angle))\n    # print(x, y, angle)\n    return x, y, angle\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    for i in range(len(numbers)):\n        numbers[i] = cmath.sqrt(numbers[i].real**2 + numbers[i].imag**2)\n        if numbers[i].real==0:\n            numbers[i].imag=0\n    return numbers\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    return (numbers.real**2 + numbers.imag**2)\ndef printFunction(num):\n    for i in range(num):\n        print(\"the\",i+1,\"number is\",num[i])\n    \ndef distance(p1,p2):\n    '''\n    Write a python function to find the distance between two points.\n    '''\n    return abs(p1[0]-p2[0])+abs(p1[1]-p2[1])\ndef main():\n    '''\n    Write a program to read the file data.txt and create a list of all the data items. Print the list.\n    '''\n    try:\n        f = open('data.txt','r')\n        data = f.read()\n        items = data.split()\n        print(\"The list of items are : \")\n        print(items)\n        f.close()\n    except:\n        print(\"File does not exist\")\ndef main2():\n    '''\n    Write a program to read the file data.txt and create a list of all the data items. Print the list.\n    '''\n    try:\n        f = open('data.txt','r')\n        data = f.read()\n        items = data.split()\n        print(\"The list of items are : \")\n        print(items)\n        f.close()\n    except:\n        print(\"File does not exist\")\ndef main3():\n    '''\n    Write a python program to read the file data.txt and create a list of all the data items. \n    Print the list.\n    Write a python program to read the file data.txt and create a list of all the data items. \n    Print the list.\n    Write a python program to read the file data.txt and create a list of all the data items. \n    Print the list.\n    Write a python program to read the file data.txt and create a list of all the data items. \n    Print the list.\n    Write a python program to read the file data.txt and create a list of all the data items. \n    Print the list.\n    '''\n    try:\n        f = open('data.txt','r')\n        data1 = f.read()\n        items1 = data1.split()\n        print(\"The list of items are : \")\n        print(items1)\n        f.close()\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # your code here\n    return complex(numbers[0],numbers[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to complex numbers.\n    '''\n    # your code here\n    return complex(numbers[0],numbers[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    # your code here\n    return (numbers.real,numbers.imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to complex numbers.\n    '''\n    # your code here\n    return (numbers[0],numbers[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert complex numbers to rectangular coordinates.\n    '''\n    # your code here\n    return (numbers.real,numbers.imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to complex numbers.\n    '''\n    # your code here\n    return complex(numbers[0],numbers[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.phase(complex(numbers[0],numbers[1])),cmath.polar(complex(numbers[0],numbers[1]))[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return (cmath.rect(numbers[0],numbers[1]).real,cmath.rect(numbers[0],numbers[1]).imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.phase(numbers),cmath.polar(numbers)[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return (cmath.rect(numbers[0],numbers[1]).real,cmath.rect(numbers[0],numbers[1]).imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.phase(complex(numbers[0],numbers[1])),cmath.polar(complex(numbers[0],numbers[1]))[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.phase(numbers),cmath.polar(numbers)[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return (cmath.rect(numbers[0],numbers[1]).real,cmath.rect(numbers[0],numbers[1]).imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.phase(numbers),cmath.polar(numbers)[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return (numbers[0],numbers[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to polar coordinates.\n    '''\n    # your code here\n    return (numbers[0],numbers[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return (cmath.rect(numbers[0],numbers[1]).real,cmath.rect(numbers[0],numbers[1]).imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.phase(numbers),cmath.polar(numbers)[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.phase(numbers),cmath.polar(numbers)[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return (cmath.rect(numbers[0],numbers[1]).real,cmath.rect(numbers[0],numbers[1]).imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return (cmath.rect(numbers[0],numbers[1]).real,cmath.rect(numbers[0],numbers[1]).imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return (numbers[0],numbers[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.phase(numbers),cmath.polar(numbers)[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.phase(numbers),cmath.polar(numbers)[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return (numbers[0],numbers[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to polar coordinates.\n    '''\n    # your code here\n    return (numbers[0],numbers[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return (cmath.rect(numbers[0],numbers[1]).real,cmath.rect(numbers[0],numbers[1]).imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to rectangular coordinates.\n    '''\n    # your code here\n    return (cmath.rect(numbers[0],numbers[1]).real,cmath.rect(numbers[0],numbers[1]).imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.phase(numbers),cmath.polar(numbers)[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert polar coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.phase(numbers),cmath.polar(numbers)[1])\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.rect(numbers[0],numbers[1]).real,cmath.rect(numbers[0],numbers[1]).imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.rect(numbers[0],numbers[1]).real,cmath.rect(numbers[0],numbers[1]).imag)\ndef convert(numbers):\n    '''\n    Write a python function to convert rectangular coordinates to polar coordinates.\n    '''\n    # your code here\n    return (cmath.rect(numbers[0],numbers[1]).real,cmath.rect(numbers[0],numbers[1]).imag)\ndef convert(numbers):\n    '''\n    Write a python function t"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    if isinstance(numbers,complex):\n        return  (cmath.polar(numbers))\n    else:\n        return \"enter valid complex number\"\n        \n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    # getting real and imaginary part of number\n    re = int(numbers.real)\n    im = int(numbers.imag)\n    if re > 0 and im > 0:\n        return (\"Positive\")\n    elif re < 0 and im > 0:\n        return (\"Positive\")\n    elif re < 0 and im < 0:\n        return (\"Negative\")\n    elif re > 0 and im < 0:\n        return (\"Negative\")\n    else:\n        return (\"Null\")\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    a, b = numbers\n    r = a.real\n    i = a.imag\n    m = b.real\n    n = b.imag\n    theta = cmath.atan2(i,r)\n    phi = cmath.atan2(m,n)\n    return(theta, phi)\n"
    },
    {
        "number": 252,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath  \ndef convert(numbers):    \n    '''\n    Write a python function to convert complex numbers to polar coordinates.\n    '''\n    r = 0\n    theta = 0\n    for i in range(len(numbers)):\n        theta += 2*math.pi*numbers[i]/360\n        r = r + numbers[i]\n    return (theta,r)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n    \n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) is int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    integer_count = 0\n    for item in list1:\n        if isinstance(item, int):\n            integer_count += 1\n    return integer_count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if type(i) == int:\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count = 0\n    for i in list1:\n        if isinstance(i, int):\n            count += 1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    count=0\n    for i in list1:\n        if type(i)==int:\n            count+=1\n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    \n    count = 0\n    for i in range(len(list1)):\n        if type(list1[i]) is int:\n            count += 1\n    \n    return count\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    # Note: Use list comprehension\n    return sum(1 for x in list1 if type(x) == int)\n"
    },
    {
        "number": 253,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_integer(list1):\n    '''\n    Write a python function that returns the number of integer elements in a given list.\n    '''\n    return len(list(filter(lambda x: x%2 ==0, list1)))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return [[l[i], l[i+1], l[i+2]] for i in range(0, len(l)-2, 2)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n > len(l): return []\n    if n == 0: return []\n    return [[l[i], *s] for i in range(len(l)) for s in combinations_colors(l[i+1:], n-1)]\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    \n    return list(combinations_with_replacement(l, n))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    l = sorted(l)\n    result = []\n    for i in range(0, len(l)):\n        result.append(l[i])\n        if len(result) == n:\n            break\n    return result\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    comb = []\n    for i in range(len(l)):\n        for j in range(i+1, len(l)):\n            for k in range(j+1, len(l)):\n                comb.append((l[i],l[j],l[k]))\n    return comb\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    color_list = []\n    for i in range(0, len(l)-1):\n        for comb in combinations_with_replacement(l[i:],n):\n            color_list.append(comb)\n    return color_list\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    # write your code here\n    x = [x for x in l]\n    combinations_lst = []\n    for i in range(len(x)):\n        combinations_lst.append(tuple(x[i]*n))\n    return combinations_lst\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    combinations = []\n    for combination in combinations_with_replacement(l, n):\n        combinations.append(combination)\n    return combinations\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    return (tuple(combinations_with_replacement(l, r)) for r in range(1, n+1))\n"
    },
    {
        "number": 255,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations_with_replacement \ndef combinations_colors(l, n):\n    '''\n    Write a function that takes in a list and length n, and generates all combinations (with repetition) of the elements of the list and returns a list with a tuple for each combination.\n    '''\n    if n == 1:\n        return [[x] for x in l]\n    colors = combinations_colors(l,n-1)\n    return [[a] + b for a in l for b in colors]\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for i in range(2,n):\n        for j in range(2,i):\n            if i%j == 0:\n                break\n        else:\n            count = count+1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    #Solution 1\n    if n < 2:\n        return 0\n    count = 0\n    for i in range(2, n):\n        if isPrime(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    \n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    counter = 0\n    count = 0\n    for n in range(1,n+1):\n        for i in primes:\n            if n % i == 0:\n                counter = counter + 1\n                break\n        if counter == 1:\n            count = count + 1\n        counter = 0\n    return count\n    \ndef is_prime(n):\n    '''\n    Write a function to check whether a number is prime or not.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    if n in primes:\n        print(\"The number is prime\")\n    else:\n        print(\"The number is not prime\")\n        \ndef prime_count(n):\n    '''\n    Write a function to count the number of prime numbers less than a given non-negative number.\n    '''\n    primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 991, 997]\n    counter = 0\n    count = 0\n    for i in range(1,n+1):\n        for i in primes:\n            if i % i == 0:\n                counter = counter + 1\n                break\n        if counter == 1:\n            count = count + 1\n        counter = 0\n    return count\n    \ndef decimal_to_binary(n):\n    '''\n    Write a function to convert a decimal number into binary.\n    '''\n    binary = []\n    while n > 0:\n        if n%2 == 1:\n            binary.append(1)\n        else:\n            binary.append(0)\n        n = n//2\n    binary.reverse()\n    return binary\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    n_i = 1\n    prime_nums = 0\n    while n_i < n:\n        if n_i == 2:\n            prime_nums += 1\n        for i in range(3, n_i):\n            if n_i % i == 0:\n                break\n        else:\n            prime_nums += 1\n        n_i += 1\n    return prime_nums\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n < 2:\n        return 0\n    is_prime = [True] * n\n    is_prime[0] = False\n    is_prime[1] = False\n    for i in range(2, int(n**0.5)+1):\n        if is_prime[i]:\n            for j in range(i*i, n, i):\n                is_prime[j] = False\n    return sum(is_prime)\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    if n == 0 or n == 1:\n        return 0\n    count = 0\n    if n == 2:\n        count = 1\n    else:\n        for i in range(2,n):\n            count +=1\n            if is_prime(i) == True:\n                continue\n            else:\n                for j in range(i,n,i):\n                    if is_prime(j) == True:\n                        count +=1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    count = 0\n    for num in range(2, n):\n        if num > 1:\n            for i in range(2, num):\n                if (num % i) == 0:\n                    break\n            else:\n                count += 1\n    return count\nprint(count_Primes_nums(10)"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    primes_count = 0\n    # your code here\n    return primes_count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    print(n)\n    nums = list(range(2, n))\n    count = 0\n    for i in nums:\n        for j in nums:\n            if i * j >= n:\n                break\n            elif (i * j) % 2 == 0:\n                continue\n            else:\n                nums.append(i * j)\n        count += 1\n    return count\n"
    },
    {
        "number": 256,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Primes_nums(n):\n    '''\n    Write a python function that takes in a non-negative number and returns the number of prime numbers less than the given non-negative number.\n    '''\n    isPrime = [True]*n\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    tup = (b,a)\n    return tup\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return(b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    #a = int(input(\"Enter number a: \"))\n    #b = int(input(\"Enter number b: \"))\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    \n    return b, a\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    return (b,a)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x,y = a,b\n    return(y,x)\n"
    },
    {
        "number": 257,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_numbers(a,b):\n    '''\n    Write a function that takes in two numbers and returns a tuple with the second number and then the first number.\n    '''\n    x,y = b,a\n    return (y,x)\n    pass\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return max(test_tup1), max(test_tup2)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup1[1]\n    c = test_tup2[0]\n    d = test_tup2[1]\n    if a > c:\n        return (a, b)\n    else:\n        return (c, d)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    # create a new tuple\n    max_val = (test_tup1[0], test_tup2[0])\n    # check if first element is greater than the second element, \n    # if so, update max_val.\n    if test_tup1[0] > test_tup2[0]:\n        max_val = (test_tup1[0], test_tup2[0])\n    # check if first element is greater than the second element, \n    # if so, update max_val.\n    if test_tup1[1] > test_tup2[1]:\n        max_val = (test_tup1[1], test_tup2[1])\n    # return max_val\n    return max_val\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val1 = max(test_tup1[0], test_tup1[1], test_tup1[2])\n    max_val2 = max(test_tup2[0], test_tup2[1], test_tup2[2])\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) < len(test_tup2):\n        min_val = test_tup2\n        max_val = test_tup1\n    else:\n        min_val = test_tup1\n        max_val = test_tup2\n    for i in range(0, len(max_val)):\n        if min_val[i] < max_val[i]:\n            return max_val\n    return test_tup1\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    return(max(test_tup1,test_tup2), min(test_tup1,test_tup2))\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    a = test_tup1[0]\n    b = test_tup1[1]\n    c = test_tup2[0]\n    d = test_tup2[1]\n    max_value = max(a, b, c, d)\n    max_element = max_value\n    if a == max_value:\n        return(c, d)\n    if b == max_value:\n        return(a, d)\n    if c == max_value:\n        return(a, b)\n    if d == max_value:\n        return(c, b)\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1\n    else:\n        return test_tup2\n"
    },
    {
        "number": 259,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximize_elements(test_tup1, test_tup2):\n    '''\n    Write a function to maximize the given two tuples.\n    '''\n    max_val1 = max(test_tup1)\n    max_val2 = max(test_tup2)\n    max_val_tup = (max_val1, max_val2)\n    return max_val_tup\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n < 1:\n        return False\n    else:\n        l = newman_shanks(n)\n        return l\n        \n    \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    def prime_check(n):\n        while n % 2 == 0:\n            n = n // 2\n        for i in range(3, int(n ** 0.5) + 1, 2):\n            while n % i == 0:\n                n = n // i\n        return n > 1\n    def is_prime(n):\n        return prime_check(n)\n    \n    p = 0\n    for i in range(1, n + 1):\n        if is_prime(i):\n            p += 1\n    return p\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = []\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1: \n        return 2 \n    else: \n        i = 1 \n        l = [2] \n        while len(l) <= n: \n            i = i + 1\n            if (l[-1] % 2 == 0 or l[-1] % 3 == 0): \n                l.append(2*l[-1]) \n            else: \n                l.append(3*l[-1]+1) \n    return l[-1] \n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    # First newman\u2013shanks\u2013williams prime: n=3\n    if n == 3:\n        return 6\n    # Second newman\u2013shanks\u2013williams prime: n=5\n    if n == 5:\n        return 13\n    # Second newman\u2013shanks\u2013williams prime: n=7\n    if n == 7:\n        return 10\n    # Second newman\u2013shanks\u2013williams prime: n=9\n    if n == 9:\n        return 11\n    \n    # Second newman\u2013shanks\u2013williams prime: n=13\n    if n == 13:\n        return 19\n    \n    # Second newman\u2013shanks\u2013williams prime: n=17\n    if n == 17:\n        return 29\n    \n    # Second newman\u2013shanks\u2013williams prime: n=21\n    if n == 21:\n        return 31\n    \n    # Second newman\u2013shanks\u2013williams prime: n=29\n    if n == 29:\n        return 37\n    \n    # Second newman\u2013shanks\u2013williams prime: n=31\n    if n == 31:\n        return 41\n    \n    # Second newman\u2013shanks\u2013williams prime: n=37\n    if n == 37:\n        return 47\n    \n    # Second newman\u2013shanks\u2013williams prime: n=41\n    if n == 41:\n        return 53\n    \n    # Second newman\u2013shanks\u2013williams prime: n=47\n    if n == 47:\n        return 59\n    \n    # Second newman\u2013shanks\u2013williams prime: n=53\n    if n == 53:\n        return 61\n    \n    # Second newman\u2013shanks\u2013williams prime: n=59\n    if n == 59:\n        return 67\n    \n    # Second newman\u2013shanks\u2013williams prime: n=61\n    if n == 61:\n        return 69\n    \n    # Second newman\u2013shanks\u2013williams prime: n=67\n    if n == 67:\n        return 71\n    \n    # Second newman\u2013shanks\u2013williams prime: n=69\n    if n == 69:\n        return 73\n    \n    # Second newman\u2013shanks\u2013williams prime: n=71\n    if n == 71:\n        return 79\n    \n    # Second newman\u2013shanks\u2013williams prime: n=73\n    if n == 73:\n        return 83\n    \n    # Second newman\u2013shanks\u2013williams prime: n=79\n    if n == 79:\n        return 89\n    \n    # Second newman\u2013shanks\u2013williams prime: n=83\n    if n == 83:\n        return 97\n    \n    # Second newman\u2013shanks\u2013williams prime: n=89\n    if n == 89:\n        return 101\n    \n    # Second newman\u2013shanks\u2013williams prime: n=97\n    if n == 97:\n        return 103\n    \n    # Second newman\u2013shanks\u2013williams prime: n=101\n    if n == 101:\n        return 107\n    \n    # Second newman\u2013shanks\u2013williams prime: n=103\n    if n == 103:\n        return 109\n    \n    # Second newman\u2013shanks\u2013williams prime: n=107\n    if n == 107:\n        return 113\n    \n    # Second newman\u2013shanks\u2013williams prime: n=109\n    if n == 109:\n        return 127\n    \n    # Second newman\u2013shanks\u2013williams prime: n=113\n    if n == 113:\n        return 131\n    \n    # Second newman\u2013shanks\u2013williams prime: n=127\n    if n == 127:\n        return 137\n    \n    # Second newman\u2013shanks\u2013williams prime: n=131\n    if n == 131:\n        return 139\n    \n    # Second newman\u2013shanks\u2013williams prime: n=137\n    if n == 137:\n        return 149\n    \n    # Second newman\u2013shanks\u2013williams prime: n=139\n    if n == 139:\n        return 151\n    \n    # Second newman\u2013shanks\u2013williams prime: n=149\n    if n == 149:\n        return 157\n    \n    # Second newman\u2013shanks\u2013williams prime: n=151\n    if n == 151:\n        return 163\n    \n    # Second newman\u2013shanks\u2013williams prime: n=157\n    if n == 157:\n        return 167\n    \n    # Second newman\u2013shanks\u2013williams prime: n=163\n    if n == 163:\n        return 173\n    \n    # Second newman\u2013shanks\u2013williams prime: n=167\n    if n == 167:\n        return 179\n    \n    # Second newman\u2013shanks\u2013williams prime: n=173\n    if n == 173:\n        return 181\n    \n    # Second newman\u2013shanks\u2013williams prime: n=179\n    if n == 179:\n        return 191\n    \n    # Second newman\u2013shanks\u2013williams prime: n=181\n    if n == 181:\n        return 193\n    \n    # Second newman\u2013shanks\u2013williams prime: n=191\n    if n == 191:\n        return 197\n    \n    # Second newman\u2013shanks\u2013williams prime: n=193\n    if n == 193:\n        return 199\n    \n    # Second newman\u2013shanks\u2013williams prime: n=197\n    if n == 197:\n        return 211\n    \n    # Second newman\u2013shanks\u2013williams prime: n=199\n    if n == 199:\n        return 223\n    \n    # Second newman\u2013shanks\u2013williams prime: n=211\n    if n == 211:\n        return 227\n    \n    # Second newman\u2013shanks\u2013williams prime: n=223\n    if n == 223:\n        return 229\n    \n    # Second newman\u2013shanks\u2013williams prime: n=227\n    if n == 227:\n        return 233\n    \n    # Second newman\u2013shanks\u2013williams prime: n=229\n    if n == 229:\n        return 239\n    \n    # Second newman\u2013shanks\u2013williams prime: n=233\n    if n == 233:\n        return 241\n    \n    # Second newman\u2013shanks\u2013williams prime: n=239\n    if n == 239:\n        return 251\n    \n    # Second newman\u2013shanks\u2013williams prime: n=241\n    if n == 241:\n        return 251\n    \n    # Second newman\u2013shanks\u2013williams prime: n=251\n    if n == 251:\n        return 253\n    \n    # Second newman\u2013shanks\u2013williams prime: n=253\n    if n == 253:\n        return 253\n    \n    # Second newman\u2013shanks\u2013williams prime: n=259\n    if n == 259:\n        return 253\n    \n    # Second newman\u2013shanks\u2013williams prime: n=251\n    if n == 251:\n        return 253\n    \n    # Second newman\u2013shanks\u2013williams prime: n=249\n    if n == 249:\n        return 253\n    \n    # Second newman\u2013shanks\u2013williams prime: n=253\n    if n == 253:\n        return 253\n    \n    # Second newman\u2013shanks\u2013williams prime: n=257\n    if n == 257:\n        return 261\n    \n    # Second newman\u2013shanks\u2013williams prime: n=257\n    if n == 257:\n        return 261\n    \n    # Second newman\u2013shanks\u2013williams prime: n=257\n    if n == 257:\n        return 261\n    \n    # Second newman\u2013shanks\u2013williams prime: n=259\n    if n == 259:\n        return 259\n    \n    # Second newman\u2013shanks\u2013williams prime: n=259\n    if n == 259:\n        return 259\n    \n    # Second newman\u2013shanks\u2013williams prime: n=255\n    if n == 255:\n        return 253\n    \n    # Second newman\u2013shanks\u2013williams prime: n=259\n    if n == 259:\n        return 259\n    \n    # Second newman\u2013shanks\u2013williams prime: n=257\n    if n == 257:\n        return 257\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    from math import sqrt\n    \n    def sieve_of_eratosthenes(n):\n        is_prime = [True] * n\n        is_prime[0] = False\n        is_prime[1] = False\n        for i in range(2, int(n**0.5) + 1):\n            if is_prime[i]:\n                for j in range(i*i, n, i):\n                    is_prime[j] = False\n        return list(filter(lambda x: x, is_prime))\n        \n    def is_prime(n):\n        if n == 0 or n == 1:\n            return False\n        for i in range(2, int(n**0.5) + 1):\n            if n % i == 0:\n                return False\n        return True\n        \n    def is_divisible(p, q):\n        return (p % q) == 0\n    \n    def is_prime_without_divide(p):\n        if p <= 1:\n            return False\n        for i in range(2, int(sqrt(p)) + 1):\n            if not p % i:\n                return False\n        return True\n    \n    def is_prime_divisible(p, q):\n        return is_prime(p) and is_prime(q) and is_divisible(p, q)\n    \n    def count_prime_divisible(n):\n        count = 0\n        for i in range(2, n):\n            if is_prime_divisible(i, n):\n                count += 1\n        return count\n    \n    def find_prime_nth(n):\n        def find_prime_nth_recursive(n, k):\n            def count_prime_divisible_recursive(n, k):\n                return count_prime_divisible(n) if k == 1 else count_prime_divisible_recursive(n, k - 1)\n            if k == 1:\n                return is_prime(n)\n            if k == 2:\n                return is_prime_divisible(n, n)\n            if n == 2:\n                return True\n            if n == 3:\n                return is_prime_divisible(n, n)\n            if n % 2 == 0 or n == 1:\n                return False\n            return find_prime_nth_recursive(n, k - 1) or find_prime_nth_recursive(n, k - 2) or find_prime_nth_recursive(n, k - 3)\n        return find_prime_nth_recursive(n, n)\n    \n    def find_prime_nth_without_divide(n):\n        def find_prime_nth_without_divide_recursive(n, k):\n            if k == 1:\n                return is_prime(n)\n            if k == 2:\n                return is_prime_divisible(n, n)\n            if n == 2:\n                return True\n            if n == 3:\n                return is_prime_divisible(n, n)\n            if n % 2 == 0:\n                return False\n            return find_prime_nth_without_divide_recursive(n, k - 1) or find_prime_nth_without_divide_recursive(n, k - 2)\n        return find_prime_nth_without_divide_recursive(n, n)\n    \n    def find_nth_prime(n):\n        def find_nth_prime_recursive(n, k):\n            if k == 1:\n                return is_prime(n)\n            if k == 2:\n                return is_prime_divisible(n, n)\n            if n == 2:\n                return True\n            if n == 3:\n                return is_prime_divisible(n, n)\n            if n % 2 == 0:\n                return False\n            return find_nth_prime_recursive(n, k - 1) or find_nth_prime_recursive(n, k - 2)\n        return find_nth_prime_recursive(n, n)\n    \n    def find_nth_prime_without_divide(n):\n        def find_nth_prime_without_divide_recursive(n, k):\n            if k == 1:\n                return is_prime(n)\n            if k == 2:\n                return is_prime_divisible(n, n)\n            if n == 2:\n                return True\n            if n == 3:\n                return is_prime_divisible(n, n)\n            if n % 2 == 0:\n                return False\n            return find_nth_prime_without_divide_recursive(n, k - 1) or find_nth_prime_without_divide_recursive(n, k - 2)\n        return find_nth_prime_without_divide_recursive(n, n)\n    \n    def main():\n        # Test 1\n        expected_1 = True\n        actual_1 = newman_prime(1) == expected_1\n        print_test_result(test_case_1, actual_1)\n        \n        # Test 2\n        expected_2 = True\n        actual_2 = newman_prime(2) == expected_2\n        print_test_result(test_case_2, actual_2)\n        \n        # Test 3\n        expected_3 = False\n        actual_3 = newman_prime(3) == expected_3\n        print_test_result(test_case_3, actual_3)\n        \n        # Test 4\n        expected_4 = False\n        actual_4 = newman_prime(4) == expected_4\n        print_test_result(test_case_4, actual_4)\n        \n        # Test 5\n        expected_5 = False\n        actual_5 = newman_prime(5) == expected_5\n        print_test_result(test_case_5, actual_5)\n        \n        # Test 6\n        expected_6 = False\n        actual_6 = newman_prime(6) == expected_6\n        print_test_result(test_case_6, actual_6)\n        \n        # Test 7\n        expected_7 = False\n        actual_7 = newman_prime(7) == expected_7\n        print_test_result(test_case_7, actual_7)\n        \n        # Test 8\n        expected_8 = True\n        actual_8 = newman_prime(8) == expected_8\n        print_test_result(test_case_8, actual_8)\n        \n        # Test 9\n        expected_9 = False\n        actual_9 = newman_prime(9) == expected_9\n        print_test_result(test_case_9, actual_9)\n        \n        # Test 10\n        expected_10 = False\n        actual_10 = newman_prime(10) == expected_10\n        print_test_result(test_case_10, actual_10)\n        \n        # Test 11\n        expected_11 = False\n        actual_11 = newman_prime(11) == expected_11\n        print_test_result(test_case_11, actual_11)\n        \n        # Test 12\n        expected_12 = True\n        actual_12 = newman_prime(12) == expected_12\n        print_test_result(test_case_12, actual_12)\n        \n        # Test 13\n        expected_13 = False\n        actual_13 = newman_prime(13) == expected_13\n        print_test_result(test_case_13, actual_13)\n        \n        # Test 14\n        expected_14 = False\n        actual_14 = newman_prime(14) == expected_14\n        print_test_result(test_case_14, actual_14)\n        \n        # Test 15\n        expected_15 = False\n        actual_15 = newman_prime(15) == expected_15\n        print_test_result(test_case_15, actual_15)\n        \n        # Test 16\n        expected_16 = False\n        actual_16 = newman_prime(16) == expected_16\n        print_test_result(test_case_16, actual_16)\n        \n        # Test 17\n        expected_17 = False\n        actual_17 = newman_prime(17) == expected_17\n        print_test_result(test_case_17, actual_17)\n        \n        # Test 18\n        expected_18 = False\n    "
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    x = 2\n    \n    while(n > 1):\n        if(is_prime(x)):\n            n -= 1\n        x += 1\n    \n    return x\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    primes = {1:2, 2:4, 3:6, 4:8, 5:10, 6:12, 7:14, 8:16, 9:18, 10:20, 11:22, 12:24, 13:26, 14:28, 15:30, 16:32, 17:34, 18:36, 19:38, 20:40, 21:42, 22:44, 23:46, 24:48, 25:50, 26:52, 27:54, 28:56, 29:58, 30:60, 31:62, 32:64, 33:66, 34:68, 35:70, 36:72, 37:74, 38:76, 39:78, 40:80, 41:82, 42:84, 43:86, 44:88, 45:90, 46:92, 47:94, 48:96, 49:98, 50:100, 51:102, 52:104, 53:106, 54:108, 55:110, 56:112, 57:114, 58:116, 59:118, 60:120, 61:122, 62:124, 63:126, 64:128, 65:130, 66:132, 67:134, 68:136, 69:138, 70:140, 71:142, 72:144, 73:146, 74:148, 75:150, 76:152, 77:154, 78:156, 79:158, 80:160, 81:162, 82:164, 83:166, 84:168, 85:170, 86:172, 87:174, 88:176, 89:178, 90:180, 91:182, 92:184, 93:186, 94:188, 95:190, 96:192, 97:194, 98:196, 99:198, 100:200, 101:202, 102:204, 103:206, 104:208, 105:210, 106:212, 107:214, 108:216, 109:218, 110:220, 111:222, 112:224, 113:226, 114:228, 115:230, 116:232, 117:234, 118:236, 119:238, 120:240, 121:242, 122:244, 123:246, 124:248, 125:250, 126:252, 127:254, 128:256, 129:258, 130:260, 131:262, 132:264, 133:266, 134:268, 135:270, 136:272, 137:274, 138:276, 139:278, 140:280, 141:282, 142:284, 143:286, 144:288, 145:290, 146:292, 147:294, 148:296, 149:298, 150:300, 151:302, 152:304, 153:306, 154:308, 155:310, 156:312, 157:314, 158:316, 159:318, 160:320, 161:322, 162:324, 163:326, 164:328, 165:330, 166:332, 167:334, 168:336, 169:338, 170:340, 171:342, 172:344, 173:346, 174:348, 175:350, 176:352, 177:354, 178:356, 179:358, 180:360, 181:362, 182:364, 183:366, 184:368, 185:370, 186:372, 187:374, 188:376, 189:378, 190:380, 191:382, 192:384, 193:386, 194:388, 195:390, 196:392, 197:394, 198:396, 199:398, 200:400, 201:402, 202:404, 203:406, 204:408, 205:410, 206:412, 207:414, 208:416, 209:418, 210:420, 211:422, 212:424, 213:426, 214:428, 215:430, 216:432, 217:434, 218:436, 219:438, 220:440, 221:442, 222:444, 223:446, 224:448, 225:450, 226:452, 227:454, 228:456, 229:458, 230:460, 231:462, 232:464, 233:466, 234:468, 235:470, 236:472, 237:474, 238:476, 239:478, 240:480, 241:482, 242:484, 243:486, 244:488, 245:490, 246:492, 247:494, 248:496, 249:498, 250:500, 251:502, 252:504, 253:506, 254:508, 255:510, 256:512, 257:514, 258:516, 259:518, 260:520, 261:522, 262:524, 263:526, 264:528, 265:530, 266:532, 267:534, 268:536, 269:538, 270:540, 271:542, 272:544, 273:546, 274:548, 275:550, 276:552, 277:554, 278:556, 279:558, 280:560, 281:562, 282:564, 283:566, 284:568, 285:570, 286:572, 287:574, 288:576, 289:578, 290:580, 291:582, 292:584, 293:586, 294:588, 295:590, 296:592, 297:594, 298:596, 299:598, 300:600, 301:602, 302:604, 303:606, 304:608, 305:610, 306:612, 307:614, 308:616, 309:618, 310:620, 311:622, 312:624, 313:626, 314:628, 315:630, 316:632, 317:634, 318:636, 319:638, 320:640, 321:642, 322:644, 323:646, 324:648, 325:650, 326:652, 327:654, 328:656, 329:658, 330:660, 331:662, 332:664, 333:666, 334:668, 335:670, 336:672, 337:674, 338:676, 339:678, 340:680, 341:682, 342:684, 343:686, 344:688, 345:690, 346:692, 347:694, 348:696, 349:698, 350:700, 351:702, 352:704, 353:706, 354:708, 355:710, 356:712, 357:714, 358:716, 359:718, 360:720, 361:722, 362:724, 363:726, 364:728, 365:730, 366:732, 367:734, 368:736, 369:738, 370:740, 371:742, 372:744, 373:746, 374:748, 375:750, 376:752, 377:754, 378:756, 379:758, 380:760, 381:762, 382:764, 383:766, 384:768, 385:770, 386:772, 387:774, 388:776, 389:778, 390:780, 391:782, 392:784, 393:786, 394:788, 395:790, 396:792, 397:794, 398:796, 399:798, 400:800, 401:802, 402:804, 403:806, 404:808, 405:810, 406:812, 407:814, 408:816, 409:818, 410:820, 411:822, 412:824, 413:826, 414:828, 415:830, 416:832, 417:834, 418:836, 419:838, 420:840, 421:842, 422:844, 423:846, 424:848, 425:850, 426:852, 427:854, 428:856, 429:858, 430:860, 431:862, 432:864, 433:866, 434:868, 435:870, 436:872, 437:874, 438:876, 439:878, 440:880, 441:882, 442:884, 443:886, 444:888, 445:890, 446:892, 447:894, 448:896, 449:898, 450:900, 451:902, 452:904, 453:906, 454:908, 455:910, 456:912, 457:914, 458:916, 459:918, 460:920, 461:922, 462:924, 463:926, 464:928, 465:930, 466:932, 467:934, 468:936, 469:938, 470:940, 471:942, 472:944, 473:946, 474:94"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    i = 2\n    if (n == 1):\n        return 0\n    if (n == 2):\n        return 1\n    while(i*i <= n):\n        if (n % i == 0):\n            return 0\n        i += 1\n    return 1\n"
    },
    {
        "number": 260,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def newman_prime(n): \n    '''\n    Write a function to find the nth newman\u2013shanks\u2013williams prime number.\n    '''\n    if n == 1:\n        return 2\n    \n    elif n == 2:\n        return 3\n    \n    else:\n        for i in range(3, n+1):\n            if is_prime(i):\n                return i\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    #\n    # Your code here\n    #\n    # Method 1: Using lambda function\n    #\n    lst = []\n    for i in range(len(test_tup1)):\n        lst.append(test_tup1[i] / test_tup2[i])\n    # print(lst)\n    return tuple(lst)\n    #\n    # Method 2: Using map\n    #\n    # # Using map and lambda\n    #\n    #\n    # result = map(lambda i, j: i / j, test_tup1, test_tup2)\n    # return tuple(result)\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    if type(test_tup1)!= tuple or type(test_tup2)!= tuple:\n        raise TypeError(\"Inputs must be a tuple\")\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Inputs must be of equal length\")\n    res = tuple([i / j for i, j in zip(test_tup1, test_tup2)])\n    return res\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # Your code here\n    print(test_tup1, test_tup2)\n    test_tup1 = list(test_tup1)\n    test_tup2 = list(test_tup2)\n    #print(test_tup1)\n    #print(test_tup2)\n    tup1 = tuple(test_tup1)\n    tup2 = tuple(test_tup2)\n    #print(tup1)\n    #print(tup2)\n    print(tup1)\n    print(tup2)\n    tup1 = tuple(map(lambda x: int(x), tup1))\n    tup2 = tuple(map(lambda x: int(x), tup2))\n    #print(tup1)\n    #print(tup2)\n    #tup1 = tuple(map(lambda x: int(x) / int(x), tup1))\n    #tup2 = tuple(map(lambda x: int(x) / int(x), tup2))\n    tup1 = tuple(map(lambda x: int(x) // int(x), tup1))\n    tup2 = tuple(map(lambda x: int(x) // int(x), tup2))\n    print(tup1)\n    print(tup2)\n    tup1 = tuple(map(lambda x: int(x) % int(x), tup1))\n    tup2 = tuple(map(lambda x: int(x) % int(x), tup2))\n    print(tup1)\n    print(tup2)\n    tup1 = tuple(map(lambda x: int(x) ** int(x), tup1))\n    tup2 = tuple(map(lambda x: int(x) ** int(x), tup2))\n    print(tup1)\n    print(tup2)\n    print(list(tup1))\n    print(list(tup2))\n    return tup1, tup2\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return (test_tup1[0] / test_tup2[0], test_tup1[1] / test_tup2[1])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    new_tup = ()\n    for i, j in zip(test_tup1, test_tup2):\n        new_tup += (i/j,)\n    return new_tup\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    return tuple([x/y for x,y in zip(test_tup1, test_tup2)])\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    try:\n        assert isinstance(test_tup1, tuple)\n        assert isinstance(test_tup2, tuple)\n        assert len(test_tup1) == len(test_tup2)\n        for i in range(len(test_tup1)):\n            assert isinstance(test_tup1[i], int) and isinstance(test_tup2[i], int)\n            assert test_tup1[i] % test_tup2[i] == 0\n        return test_tup1\n    except AssertionError:\n        print(\"Wrong type for one or more arguments\")\n    except IndexError:\n        print(\"Length of the given tuples are not the same\")\n    except ValueError:\n        print(\"Given value is not int\")\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    \n    return tuple(map(lambda x, y: x / y, test_tup1, test_tup2))\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    tup_op = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]/test_tup2[i] == int(test_tup1[i]/test_tup2[i]):\n            tup_op.append(int(test_tup1[i]/test_tup2[i]))\n        else:\n            tup_op.append(test_tup1[i]/test_tup2[i])\n    return tup_op\n"
    },
    {
        "number": 261,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def division_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and performs mathematical division operation element-wise across the given tuples.\n    '''\n    # replace this with your solution\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first = []\n    second = []\n    for x in list1:\n        if L <= len(first) + len(second):\n            first.append(x)\n        else:\n            second.append(x)\n    return (first, second)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    \n    first_part = list1[:L]\n    second_part = list1[L:]\n    \n    return(first_part, second_part)\n    \ndef make_three_parts(list1):\n    '''\n    Write a function that takes in a list and splits the given list into three parts where the length of the first part of the list is the same as the length of the second part of the list, and returns the resulting lists in a tuple.\n    '''\n    \n    first_part = list1[:len(list1)//3]\n    second_part = list1[len(list1)//3:2*len(list1)//3]\n    third_part = list1[2*len(list1)//3:]\n    \n    return(first_part, second_part, third_part)\n    \ndef make_four_parts(list1):\n    '''\n    Write a function that takes in a list and splits the given list into four parts where the length of the first part of the list is the same as the length of the second part of the list, and returns the resulting lists in a tuple.\n    '''\n    \n    first_part = list1[:len(list1)//4]\n    second_part = list1[len(list1)//4:2*len(list1)//4]\n    third_part = list1[2*len(list1)//4:3*len(list1)//4]\n    fourth_part = list1[3*len(list1)//4:]\n    \n    return(first_part, second_part, third_part, fourth_part)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    assert type(list1) == list, \"Wrong type\"\n    assert type(L) == int and L > 0, \"Wrong type\"\n    assert L <= len(list1), \"Wrong length\"\n    assert L <= len(list1), \"Wrong length\"\n    part1 = list1[:L]\n    part2 = list1[L:]\n    return (part1, part2)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    #Write your function here\n    return (list1[:L], list1[L:])\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[:L], list1[L:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    if len(list1)%L==0:\n        return list1[:L],list1[L:]\n    else:\n        return list1[:len(list1)//2],list1[len(list1)//2:]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    list2 = list1[L:]\n    list1 = list1[:L]\n    return (list1, list2)\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    return list1[0:L], list1[L:len(list1)]\n"
    },
    {
        "number": 262,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_two_parts(list1, L):\n    '''\n    Write a function that takes in a list and an integer L and splits the given list into two parts where the length of the first part of the list is L, and returns the resulting lists in a tuple.\n    '''\n    first_part = list1[0:L]\n    second_part = list1[L:]\n    return first_part, second_part\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return (h_age * 7) + (2 * 7)\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_days = 30.0\n    dog_age = h_age * 7\n    dog_age_in_years = dog_age / age_in_days\n    return dog_age_in_years\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    dog_age = h_age * 7\n    return dog_age\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return int(h_age) * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    if h_age <= 0:\n        return \"Invalid input\"\n    elif h_age < 2:\n        return 0\n    elif h_age < 4:\n        return 1\n    elif h_age < 7:\n        return 2\n    elif h_age < 10:\n        return 3\n    else:\n        return 5\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    \n    print('h_age is', h_age)\n    \n    dog_age = h_age * 7\n    \n    print('the dog will be', dog_age, 'in dog years')\n    \n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    age_in_seconds = h_age * 24 * 60 * 60\n    age_in_days = age_in_seconds / 86400\n    age_in_years = age_in_days / 365\n    return age_in_years\n"
    },
    {
        "number": 264,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dog_age(h_age):\n    '''\n    Write a function to calculate a dog's age in dog's years.\n    '''\n    return h_age * 7\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    \n    if S == None:\n        return None\n    \n    if S == []:\n        return [[]]\n    else:\n        return_list = []\n        temp_list = S\n        \n        # Write a for loop that splits every nth element\n        for i in range(step):\n            return_list.append(temp_list[i::step])\n        \n        return return_list\n        \n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    out = []\n    for i in range(len(S)):\n        if i % step == 0:\n            out.append(S[i:i + step])\n    return out\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    if len(S) == 0:\n        return S\n    \n    if step == 1:\n        return [S[i:i+1] for i in range(0, len(S), 1)]\n    \n    else:\n        return list_split(S[0:len(S):step], step) + list_split(S[len(S):len(S):step], step)\n    "
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    res = []\n    for i in range(0,len(S),step):\n        res.append(S[i:i+step])\n    return res\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return_list = []\n    for i in range(len(S)):\n        if i % step == 0:\n            return_list.append(S[i:i+step])\n    return return_list\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    return [S[i::step] for i in range(step)]\n"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    a = []\n    for i in range(len(S)):\n        if i % step == 0:\n            a.append(S[i])\n    return a\nprint(list_split([1,2,3,4,5,6], 2))"
    },
    {
        "number": 265,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_split(S, step):\n    '''\n    Write a function that takes in a list and an integer n and splits a list for every nth element, returning a list of the resulting lists.\n    '''\n    result = []\n    for i in range(0, len(S), step):\n        result.append(S[i:i+step])\n    return result\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l*6\ndef lateral_surface_rectangle(l,w):\n    '''\n    Write a function to find the lateral surface area of a rectangle given its length and width.\n    '''\n    return l*w\ndef lateral_surface_parallelogram(l,w):\n    '''\n    Write a function to find the lateral surface area of a parallelogram given its height and width.\n    '''\n    return l*w\ndef lateral_surface_triangle(h):\n    '''\n    Write a function to find the lateral surface area of a triangle given its height.\n    '''\n    return (h*h)/2\ndef lateral_surface_square(w):\n    '''\n    Write a function to find the lateral surface area of a square given its side length.\n    '''\n    return w*w\ndef lateral_surface_circle(r):\n    '''\n    Write a function to find the lateral surface area of a circle given its radius.\n    '''\n    return 3.14*(r*r)\ndef lateral_surface_apothem(r,h):\n    '''\n    Write a function to find the lateral surface area of an apothem of a circle given its radius and its height.\n    '''\n    return r*h\ndef lateral_surface_area_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given its radius.\n    '''\n    return (4*3.14*(r*r))\ndef lateral_surface_area_parabolic_prism(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a parabolic prism given its width, height, and bottom radius.\n    '''\n    return ((a*b)/(a+b))*h\ndef lateral_surface_area_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a cylinder given its radius and its height.\n    '''\n    return 2*3.14*r*h\ndef lateral_surface_area_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given its radius and its height.\n    '''\n    return (3.14*(r*r))*h\ndef lateral_surface_area_pyramid(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a pyramid given its height and width.\n    '''\n    return ((a*b)/(a+b))*h\ndef lateral_surface_area_trapezoid(a,h,b):\n    '''\n    Write a function to find the lateral surface area of a trapezoid given its width, height, and bottom radius.\n    '''\n    return ((a/2)*(h+b))\ndef lateral_surface_area_ellipsoid(a,b,c):\n    '''\n    Write a function to find the lateral surface area of an ellipsoid given its semi-axis lengths.\n    '''\n    return 4*3.14*(a*a)*(b*b)*(c*c)/3\ndef lateral_surface_area_right_pyramid(a,h):\n    '''\n    Write a function to find the lateral surface area of a right pyramid given its height.\n    '''\n    return (a*h)\ndef lateral_surface_area_left_pyramid(a,h):\n    '''\n    Write a function to find the lateral surface area of a left pyramid given its height.\n    '''\n    return (a*h)\ndef lateral_surface_area_right_trapezoid(a,h,b):\n    '''\n    Write a function to find the lateral surface area of a right trapezoid given its width and height.\n    '''\n    return ((a/2)*(h+b))\ndef lateral_surface_area_left_trapezoid(a,h,b):\n    '''\n    Write a function to find the lateral surface area of a left trapezoid given its width and height.\n    '''\n    return ((a/2)*(h+b))\ndef lateral_surface_area_right_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a right sphere given its radius.\n    '''\n    return (4*3.14*r*r)\ndef lateral_surface_area_left_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a left sphere given its radius.\n    '''\n    return (4*3.14*r*r)\ndef lateral_surface_area_right_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a right cone given its radius and its height.\n    '''\n    return (2*3.14*r*(h+r))\ndef lateral_surface_area_left_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a left cone given its radius and its height.\n    '''\n    return (2*3.14*r*(h+r))\ndef lateral_surface_area_right_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a right cylinder given its radius and its height.\n    '''\n    return 3.14*r*h\ndef lateral_surface_area_left_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a left cylinder given its radius and its height.\n    '''\n    return 3.14*r*h\ndef lateral_surface_area_right_parabolic_prism(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a right parabolic prism given its width, height, and bottom radius.\n    '''\n    return (((a/2)*(h+b))*(b+h))\ndef lateral_surface_area_left_parabolic_prism(a,b,h):\n    '''\n    Write a function to find the lateral surface area of a left parabolic prism given its width, height, and bottom radius.\n    '''\n    return (((a/2)*(h+b))*(b+h))\ndef lateral_surface_area_right_pyramid(a,h):\n    '''\n    Write a function to find the lateral surface area of a right pyramid given its height.\n    '''\n    return (a*h)\ndef lateral_surface_area_left_pyramid(a,h):\n    '''\n    Write a function to find the lateral surface area of a left pyramid given its height.\n    '''\n    return (a*h)\ndef lateral_surface_area_right_trapezoid(a,h,b):\n    '''\n    Write a function to find the lateral surface area of a right trapezoid given its width and height.\n    '''\n    return (((a/2)*(h+b))*(b+h))\ndef lateral_surface_area_left_trapezoid(a,h,b):\n    '''\n    Write a function to find the lateral surface area of a left trapezoid given its width and height.\n    '''\n    return (((a/2)*(h+b))*(b+h))\ndef lateral_surface_area_right_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a right sphere given its radius.\n    '''\n    return (4*3.14*r*r)\ndef lateral_surface_area_left_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a left sphere given its radius.\n    '''\n    return (4*3.14*r*r)\ndef lateral_surface_area_right_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a right cone given its radius and its height.\n    '''\n    return ((2*3.14*r*(h+r))+(2*3.14*r))\ndef lateral_surface_area_left_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a left cone given its radius and its height.\n    '''\n    return ((2*3.14*r*(h+r))+(2*3.14*r))\ndef lateral_surface_area_right_cylinder(r,h):\n    '''\n    Write a function to find the lateral surface area of a right cylinder give"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (4*l**2)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l_1=l\n    l_2=l\n    l_3=l\n    l_4=l\n    l_5=l\n    l_6=l\n    l_7=l\n    l_8=l\n    l_9=l\n    l_10=l\n    l_11=l\n    l_12=l\n    l_13=l\n    l_14=l\n    l_15=l\n    l_16=l\n    l_17=l\n    l_18=l\n    l_19=l\n    l_20=l\n    l_21=l\n    l_22=l\n    l_23=l\n    l_24=l\n    l_25=l\n    l_26=l\n    l_27=l\n    l_28=l\n    l_29=l\n    l_30=l\n    l_31=l\n    l_32=l\n    l_33=l\n    l_34=l\n    l_35=l\n    l_36=l\n    l_37=l\n    l_38=l\n    l_39=l\n    l_40=l\n    l_41=l\n    l_42=l\n    l_43=l\n    l_44=l\n    l_45=l\n    l_46=l\n    l_47=l\n    l_48=l\n    l_49=l\n    l_50=l\n    l_51=l\n    l_52=l\n    l_53=l\n    l_54=l\n    l_55=l\n    l_56=l\n    l_57=l\n    l_58=l\n    l_59=l\n    l_60=l\n    l_61=l\n    l_62=l\n    l_63=l\n    l_64=l\n    l_65=l\n    l_66=l\n    l_67=l\n    l_68=l\n    l_69=l\n    l_70=l\n    l_71=l\n    l_72=l\n    l_73=l\n    l_74=l\n    l_75=l\n    l_76=l\n    l_77=l\n    l_78=l\n    l_79=l\n    l_80=l\n    l_81=l\n    l_82=l\n    l_83=l\n    l_84=l\n    l_85=l\n    l_86=l\n    l_87=l\n    l_88=l\n    l_89=l\n    l_90=l\n    l_91=l\n    l_92=l\n    l_93=l\n    l_94=l\n    l_95=l\n    l_96=l\n    l_97=l\n    l_98=l\n    l_99=l\n    l_100=l\n    l_101=l\n    l_102=l\n    l_103=l\n    l_104=l\n    l_105=l\n    l_106=l\n    l_107=l\n    l_108=l\n    l_109=l\n    l_110=l\n    l_111=l\n    l_112=l\n    l_113=l\n    l_114=l\n    l_115=l\n    l_116=l\n    l_117=l\n    l_118=l\n    l_119=l\n    l_120=l\n    l_121=l\n    l_122=l\n    l_123=l\n    l_124=l\n    l_125=l\n    l_126=l\n    l_127=l\n    l_128=l\n    l_129=l\n    l_130=l\n    l_131=l\n    l_132=l\n    l_133=l\n    l_134=l\n    l_135=l\n    l_136=l\n    l_137=l\n    l_138=l\n    l_139=l\n    l_140=l\n    l_141=l\n    l_142=l\n    l_143=l\n    l_144=l\n    l_145=l\n    l_146=l\n    l_147=l\n    l_148=l\n    l_149=l\n    l_150=l\n    l_151=l\n    l_152=l\n    l_153=l\n    l_154=l\n    l_155=l\n    l_156=l\n    l_157=l\n    l_158=l\n    l_159=l\n    l_160=l\n    l_161=l\n    l_162=l\n    l_163=l\n    l_164=l\n    l_165=l\n    l_166=l\n    l_167=l\n    l_168=l\n    l_169=l\n    l_170=l\n    l_171=l\n    l_172=l\n    l_173=l\n    l_174=l\n    l_175=l\n    l_176=l\n    l_177=l\n    l_178=l\n    l_179=l\n    l_180=l\n    l_181=l\n    l_182=l\n    l_183=l\n    l_184=l\n    l_185=l\n    l_186=l\n    l_187=l\n    l_188=l\n    l_189=l\n    l_190=l\n    l_191=l\n    l_192=l\n    l_193=l\n    l_194=l\n    l_195=l\n    l_196=l\n    l_197=l\n    l_198=l\n    l_199=l\n    l_200=l\n    l_201=l\n    l_202=l\n    l_203=l\n    l_204=l\n    l_205=l\n    l_206=l\n    l_207=l\n    l_208=l\n    l_209=l\n    l_210=l\n    l_211=l\n    l_212=l\n    l_213=l\n    l_214=l\n    l_215=l\n    l_216=l\n    l_217=l\n    l_218=l\n    l_219=l\n    l_220=l\n    l_221=l\n    l_222=l\n    l_223=l\n    l_224=l\n    l_225=l\n    l_226=l\n    l_227=l\n    l_228=l\n    l_229=l\n    l_230=l\n    l_231=l\n    l_232=l\n    l_233=l\n    l_234=l\n    l_235=l\n    l_236=l\n    l_237=l\n    l_238=l\n    l_239=l\n    l_240=l\n    l_241=l\n    l_242=l\n    l_243=l\n    l_244=l\n    l_245=l\n    l_246=l\n    l_247=l\n    l_248=l\n    l_249=l\n    l_250=l\n    l_251=l\n    l_252=l\n    l_253=l\n    l_254=l\n    l_255=l\n    l_256=l\n    l_257=l\n    l_258=l\n    l_259=l\n    l_260=l\n    l_261=l\n    l_262=l\n    l_263=l\n    l_264=l\n    l_265=l\n    l_266=l\n    l_267=l\n    l_268=l\n    l_269=l\n    l_270=l\n    l_271=l\n    l_272=l\n    l_273=l\n    l_274=l\n    l_275=l\n    l_276=l\n    l_277=l\n    l_278=l\n    l_279=l\n    l_280=l\n    l_281=l\n    l_282=l\n    l_283=l\n    l_284=l\n    l_285=l\n    l_286=l\n    l_287=l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    \n    S = l ** 2 * 6\n    return S\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return 6*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    # l = side\n    return 6*l*l\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return (l*l*6.0)/2.0\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    area = l ** 2\n    print(area)\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    l = float(l)\n    return 6*l**2\n"
    },
    {
        "number": 266,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lateralsurface_cube(l):\n    '''\n    Write a function to find the lateral surface area of a cube given its side length.\n    '''\n    return l*l*l\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n+1, 2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_of_squares=0\n    for i in range(1,n+1):\n        sum_of_squares=sum_of_squares+pow(i,2)\n    return sum_of_squares\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n    '''\n    Time: O(n)\n    Space: O(1)\n    '''\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i*i\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1,2):\n        sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2 == 1:\n            sum += i**2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    x = 1\n    sum = 0\n    while x <= n:\n        sum = sum + (x*x)\n        x = x + 2\n    return sum\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_ = 0\n    for i in range(1,n+1,2):\n        sum_ += i**2\n    return sum_\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    return sum([x*x for x in range(1,n+1,2)])\n"
    },
    {
        "number": 267,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function that takes in an integer n and returns the sum of the squares of the first n odd natural numbers.\n    '''\n    sum_sq = 0\n    for i in range(n):\n        sum_sq = sum_sq + (i*i)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 0\n    for i in range(2, n+1):\n        star_num += (i*(i+1)) // 2\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    f = lambda n : int(math.pow(3, n))\n    return f(n)\n    \n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    i = 1\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return i * find_star_num(n - 1) + n\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    if n <= 0:\n        return None\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    count = 0\n    while count < n:\n        count += 1\n        print(count)\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    \n    if n <= 1:\n        return n\n    \n    res = 1\n    i = 1\n    while i < n:\n        res *= 5\n        i += 1\n    return res\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    star_num = 1\n    while star_num < n:\n        star_num += 1\n    return star_num\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # if 1 <= n <= 50:\n    #     for i in range(1,51):\n    #         if n == i:\n    #             return i\n    #         elif n < i:\n    #             return n\n    #     return n\n    # else:\n    #     return -1\n    if 1 <= n <= 50:\n        for i in range(1, 51):\n            if n == i:\n                return i\n            elif n < i:\n                return n\n        return -1\n    else:\n        return -1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    return n * 2 - 1\n"
    },
    {
        "number": 268,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_star_num(n): \n    '''\n    Write a function to find the n'th star number.\n    '''\n    # key: use a stack to maintain the order of the star number, which is the same as the n -th star number\n    stack = [] \n    while (n): \n        stack.append(n) \n        n -= 1\n    res = 1\n    while (stack): \n        res *= stack.pop() \n    return res \n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    if isinstance(k, int):\n        return k\n    elif isinstance(k, str):\n        return ord(k)\n    else:\n        print(\"Invalid input\")\n        return None\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    v = ord(k)\n    return v\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    ascii_val = ord(k)\n    return ascii_val\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    char_val = ord(k)\n    return char_val\n    \ndef chr_value(n):\n    '''\n    Write a function to find the chr value of a number.\n    '''\n    char_val = chr(n)\n    return char_val\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\ndef hex_value(k):\n    '''\n    Write a function to find the hex value of a character.\n    '''\n    return hex(ord(k))\ndef oct_value(k):\n    '''\n    Write a function to find the octal value of a character.\n    '''\n    return oct(ord(k))\n"
    },
    {
        "number": 269,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def ascii_value(k):\n    '''\n    Write a function to find the ascii value of a character.\n    '''\n    return ord(k)\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    count_even = 0\n    even_sum = 0\n    for i in range(len(arr)):\n        if arr[i] % 2 == 0:\n            count_even += 1\n            even_sum += arr[i]\n    print(count_even)\n    print(even_sum)\nsum_even_and_even_index([2,3,4,6,5,8,7,9,1,0])\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_sum = 0\n    even_index_count = 0\n    odd_index_count = 0\n    for index, item in enumerate(arr):\n        if item % 2 == 0:\n            even_index_count += 1\n            even_sum += item\n        else:\n            odd_index_count += 1\n    if even_index_count == 0:\n        return \"There are no even numbers in the list\"\n    else:\n        return even_sum, even_index_count, odd_index_count\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even_numbers = 0\n    even_index = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            sum_even_numbers += arr[i]\n            even_index += 1\n    return sum_even_numbers, even_index\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    return sum(arr[::2])\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    even_numbers_sum=0\n    for i in range(len(arr)):\n        if(arr[i]%2==0):\n            even_numbers_sum+=arr[i]\n    return even_numbers_sum\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            s += arr[i]\n    return s\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_even=0\n    for i in range(len(arr)):\n        if i%2==0:\n            sum_even=sum_even+arr[i]\n    return sum_even\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    odd = 0\n    even = 0\n    s = 0\n    for i in range(len(arr)):\n        if i % 2 == 0:\n            even += arr[i]\n        else:\n            odd += arr[i]\n    s = even + odd\n    return s\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    sum_of_even_numbers = 0\n    for i in range(0, len(arr)):\n        if arr[i] % 2 == 0:\n            sum_of_even_numbers += arr[i]\n    return sum_of_even_numbers\n"
    },
    {
        "number": 270,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_even_and_even_index(arr):  \n    '''\n    Write a python function to find the sum of even numbers at even positions of a list.\n    '''\n    s = 0\n    for i in range(0,len(arr)):\n        if arr[i]%2==0 and i%2==0:\n            s+=arr[i]\n    return s\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + (i**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return n*(n+1)*(n+2)*(n+3)*(n+4)\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    '''\n    Second Approach\n    '''\n    # total = 0\n    # for i in range(1,n+1):\n    #     if i % 2 == 0:\n    #         total += i**5\n    #         print(total)\n    '''\n    First Approach\n    '''\n    total = 0\n    for i in range(n+1):\n        total += (i**5)\n    return total\n    \n    '''\n    Third Approach\n    '''\n    # total = 0\n    # for i in range(1,n+1):\n    #     total += i**5\n    # return total\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    even_Power_Sum = 0\n    for i in range(0, n): \n        if(i%2 == 0): \n            even_Power_Sum = even_Power_Sum + i**5\n    return even_Power_Sum \n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    return (1+(n**5))**2\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    if n > 0:\n        return 5 ** (1/5) * sum(map(lambda x:x**5, range(n)))\n    else:\n        return 0\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum = 0\n    if n < 1:\n        return 0\n    for i in range(n):\n        sum = sum + (i**5)\n    return sum\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    result = 0\n    for i in range(1, n):\n        if (i ** 5) % 2 == 0:\n            result += i ** 5\n    return result\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    s = 0\n    for i in range(n):\n        if i % 2 == 0:\n            s += i**5\n    return s\nprint(even_Power_Sum(5))\nprint(even_Power_Sum(10))\n"
    },
    {
        "number": 271,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_Power_Sum(n): \n    '''\n    Write a python function that takes in an integer n and finds the sum of the first n even natural numbers that are raised to the fifth power.\n    '''\n    sum_even = 0\n    for i in range(n):\n        if i % 2 == 0:\n            sum_even += i**5\n    print(sum_even)\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    r_elements = []\n    for i in range(0, len(test_list)):\n        r_elements.append(test_list[i][1])\n    return r_elements\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    new_list = []\n    for i in range(len(test_list)):\n        new_list.append(test_list[i][1])\n    return new_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    final_list = []\n    for i in range(len(test_list)):\n        final_list.append(test_list[i][-1])\n    return final_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    #return map(lambda t: t[-1], test_list)\n    return list(map(lambda t: t[-1], test_list))\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return test_list[0:len(test_list)]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear_list = []\n    for i in test_list:\n        rear_list.append(i[1])\n    return rear_list\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [e[-1] for e in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    return [tup[1] for tup in test_list]\n"
    },
    {
        "number": 272,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rear_extract(test_list):\n    '''\n    Write a function that takes in a list of tuples and returns a list containing the rear element of each tuple.\n    '''\n    rear = []\n    for t in range(len(test_list)):\n        rear.append(test_list[t][2])\n    return rear\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = ()\n    for i in range(len(test_tup1)):\n        new_tup = new_tup + (test_tup1[i] - test_tup2[i],)\n    return new_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        raise ValueError(\"Tuple lengths must be the same\")\n    else:\n        sub_tup = tuple(map(lambda x, y: x - y, test_tup1, test_tup2))\n        return sub_tup\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    return tuple(a - b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tuple = ()\n    for i in range(0, len(test_tup1)):\n        new_tuple += (test_tup1[i] - test_tup2[i],)\n    return new_tuple\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    # ERROR: for loops and tuples are not supported.\n    for i in range(len(test_tup1)):\n        test_tup1[i] = test_tup1[i] - test_tup2[i]\n    return test_tup1\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    assert isinstance(test_tup1, tuple), \"test_tup1 is not a tuple\"\n    assert isinstance(test_tup2, tuple), \"test_tup2 is not a tuple\"\n    assert len(test_tup1) == len(test_tup2), \"test_tup1 and test_tup2 don't have the same length\"\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup1 = []\n    new_tup2 = []\n    for i in range(len(test_tup1)):\n        new_tup1.append(test_tup1[i] - test_tup2[i])\n        new_tup2.append(test_tup2[i] - test_tup1[i])\n    return new_tup1, new_tup2\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        i = 0\n        while i < len(test_tup1):\n            test_tup1[i] -= test_tup2[i]\n            i += 1\n        return test_tup1\n    else:\n        return 'Two tuples must be the same length'\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    result = (0, 0)\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= 0 and test_tup2[i]!= 0:\n            result = (result[0] + test_tup1[i] - test_tup2[i], result[1] + 1)\n        elif test_tup1[i]!= 0 and test_tup2[i] == 0:\n            result = (result[0] + test_tup1[i] - test_tup2[i], result[1] + 1)\n        elif test_tup1[i] == 0 and test_tup2[i]!= 0:\n            result = (result[0] + test_tup2[i] - test_tup1[i], result[1] + 1)\n        elif test_tup1[i] == 0 and test_tup2[i] == 0:\n            result = (result[0] + 0 - test_tup1[i], result[1] + 1)\n    return result\n"
    },
    {
        "number": 273,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def substract_elements(test_tup1, test_tup2):\n    '''\n    Write a function that takes in two tuples and subtracts the elements of the first tuple by the elements of the second tuple with the same index.\n    '''\n    new_tup = []\n    if len(test_tup1) == len(test_tup2):\n        for i in range(len(test_tup1)):\n            new_tup.append(test_tup1[i] - test_tup2[i])\n        return new_tup\n    else:\n        return (\"Tuple sizes are not the same\")\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if n <= 1:\n        return 0\n    even_list = []\n    for i in range(n+1):\n        if i % 2 == 0:\n            even_list.append(binomial_Coeff(n,i))\n    return sum(even_list)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    s = 0\n    for i in range(0,n+1):\n        if i%2 ==0:\n            s += i*((-1)**(i+1))/math.factorial(i)\n    return s\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_binomial_coeff = 0\n    for i in range(n+1):\n        if (i % 2) == 0: \n            even_binomial_coeff += math.factorial(n) / (math.factorial(i) * math.factorial(n-i)) \n    return even_binomial_coeff\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0\n    if n <= 0:\n        return Sum\n    Sum = 1\n    Sum += 2 * even_binomial_Coeff_Sum(n - 1)\n    return Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if type(n)!= int:\n        raise ValueError(\"Please enter an integer\")\n    if n < 1:\n        raise ValueError(\"Please enter a positive integer\")\n    Sum = 0\n    for i in range(n):\n        if i % 2 == 0:\n            Sum += math.factorial(n) / (math.factorial(i) * math.factorial((n - i)))\n    return Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    even_sum = 0\n    for i in range(0, n + 1):\n        if i % 2 == 0:\n            even_sum += binomial_coef_i(n, i)\n    return even_sum\n            \ndef binomial_coef_i(n, i):\n    '''\n    Write a python function that takes in a positive integer n and integer i and returns binomial coefficient i of n\n    '''\n    binomial_coeff = math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n    return binomial_coeff\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    if(n>1):\n        return n*(n-2)*(n-1)/6 + even_binomial_Coeff_Sum(n-1)\n        \ndef odd_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of odd index binomial coefficients.\n    '''\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    if(n>1):\n        return n*(n+2)*(n-1)/6 + odd_binomial_Coeff_Sum(n-1)\n    \ndef even_binomial_Coeff_Value(n, k): \n    '''\n    Write a python function that takes in a positive integer n and an integer k and returns the value of nCk.\n    '''\n    if(n==0):\n        return 0\n    if(n==1):\n        return 1\n    if(n>1):\n        return n*(n-2)*(n-1)/6 + even_binomial_Coeff_Value(n-1, k)\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0\n    for i in range(0,n):\n        Sum += math.factorial(n) / (math.factorial(i) * (math.factorial(n - i)))\n    return Sum\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    x = 0\n    i = 1\n    while i <= n:\n        x +=  n-i+1\n        i += 2\n    print(x)\n    return x\n"
    },
    {
        "number": 274,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math  \ndef even_binomial_Coeff_Sum( n): \n    '''\n    Write a python function that takes in a positive integer n and finds the sum of even index binomial coefficients.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += math.factorial(n) / (math.factorial(i) * math.factorial(n - i))\n    return Sum\n    "
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = 4/3*math.pi*r*r*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = (math.pi*(r**2)*h)\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return (pi*(r**2)*h)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    import math\n    return (math.pi * r * r * h)\n    \n    \ndef volume_cone(r,h):\n    '''\n    Write a function that takes in the radius and height of a cone and returns the the volume.\n    '''\n    import math\n    return (math.pi * r * r * h)\n    \n    \ndef volume_cone_torus(r1,r2):\n    '''\n    Write a function that takes in the radius of the torus and returns the the volume of the torus.\n    '''\n    import math\n    return (math.pi * (r1 * r1 - r2 * r2) * (r1 + r2))\n    \n    \ndef volume_pyramid(r1,r2,h):\n    '''\n    Write a function that takes in the radius and height of a pyramid and returns the volume.\n    '''\n    import math\n    return (math.pi * (r1 * r1 - r2 * r2) * h)\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    from math import pi\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    volume = math.pi*(r**2)*h\n    return volume\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    v = math.pi * r * r * h\n    return v\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return pi*r*r*h\n    \n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    pi = 3.14159265359\n    return pi*r**2*h\n"
    },
    {
        "number": 276,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def volume_cylinder(r,h):\n    '''\n    Write a function that takes in the radius and height of a cylinder and returns the the volume.\n    '''\n    return (3/5)*math.pi*math.pow(r,2)*h\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict={}\n    for key,value in dict.items():\n        if value>=n:\n            new_dict[key]=value\n    return new_dict\nprint(dict_filter({'hello': 1, 'hi': 2, 'hiya': 1, 'howdy': 1}, 1))\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dict = {}\n    for key in dict.keys():\n        if dict[key] >= n:\n            new_dict[key] = dict[key]\n    return new_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    pass\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k,v in dict.items() if v >= n}\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_dic = {}\n    for k,v in dict.items():\n        if v >= n:\n            new_dic[k] = v\n    return new_dic\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    n_dict = {}\n    for key,value in dict.items():\n        if value >= n:\n            n_dict.update({key:value})\n    return n_dict\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return dict.filter(lambda x: x >= n)\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    dict_n={}\n    for i in dict.keys():\n        if dict[i]>=n:\n            dict_n[i]=dict[i]\n    return dict_n\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    new_d = {}\n    for key,value in dict.items():\n        if value >= n:\n            new_d[key] = value\n    return new_d\n"
    },
    {
        "number": 277,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_filter(dict,n):\n    '''\n    Write a function that takes in a dictionary and integer n and filters the dictionary to only include entries with values greater than or equal to n.\n    '''\n    return {k: v for k, v in dict.items() if v >= n}\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    x = test_tup[0]\n    count = 0\n    for i in test_tup:\n        if i < x:\n            count += 1\n        else:\n            break\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    s=0\n    for i in test_tup:\n        if i<test_tup[0]:\n            s+=1\n    return s\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    n = 0\n    for item in test_tup:\n        if item < test_tup[0]:\n            n += 1\n    return n\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] > test_tup[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in test_tup:\n        if test_tup[count] < i:\n            break\n        count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for num in range(len(test_tup)-1):\n        if test_tup[num] < test_tup[num+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)):\n        if test_tup[i]<test_tup[i+1]:\n            count+=1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    return test_tup.count(test_tup[0])\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    count = 0\n    for i in range(len(test_tup)-1):\n        if test_tup[i] > test_tup[i+1]:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 278,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_first_elements(test_tup):\n    '''\n    Write a function to find the number of elements that occurs before the tuple element in the given tuple.\n    '''\n    result = 0\n    for i in range(len(test_tup)):\n        if test_tup[i] < test_tup[0]:\n            result += 1\n    return result\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    n = n + 1\n    result = 1\n    for i in range(1, n + 1):\n        result = result * (i * (i + 1)) / (i + 2)\n    return result\n    "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    def calculate_decagonal(n):\n        if n < 1: return 1\n        else: return n*(n+1)//2\n    return calculate_decagonal(n)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 1:\n        return 1\n    return n * (n*(n-1)/2) + 1\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    # method 0\n    # if n == 0:\n    #     return 1\n    # return n * (1 - (1 / n))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return n*(n+1)/2"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return (1 + 3 * n) ** 0.5\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if (n == 0): \n        return 1\n    elif (n == 1): \n        return 1\n    else: \n        return (1 + (is_num_decagonal(n - 1))) * (n) \n  \n  "
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    return sum(i*i*i for i in range(1,n+1))\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (1/6)**(n-1)*(2*n-1)\n"
    },
    {
        "number": 279,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_num_decagonal(n): \n    '''\n    Write a function to find the nth decagonal number.\n    '''\n    sum = 0\n    for i in range(1, n+1):\n        sum += i\n        if sum >= 100:\n            sum -= 100\n            \n    return sum\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    n = len(dlist)\n    for i in range(n):\n        if dlist[i] == item:\n            found = True\n            return found, i\n    return found, -1\n    \ndef ordered_sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    The function should run in O(n) time.\n    '''\n    start_index = 0\n    end_index = len(dlist) - 1\n    found = False\n    while start_index <= end_index:\n        mid_index = (start_index + end_index) // 2\n        if dlist[mid_index] == item:\n            found = True\n            return found, mid_index\n        elif dlist[mid_index] > item:\n            end_index = mid_index - 1\n        elif dlist[mid_index] < item:\n            start_index = mid_index + 1\n    return found, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    \n    for i in range(len(dlist)):\n        if item == dlist[i]:\n            return True, i\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    pos = 0\n    found = False\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    found = False\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            found = True\n            return found, i\n    return found, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return True, i\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    #start with the first element\n    pos = 0\n    while pos < len(dlist) and dlist[pos]!= item:\n        pos += 1\n    return (item in dlist, pos)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    for i in range(len(dlist)):\n        if dlist[i] == item:\n            return (True, i)\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    # linear search\n    pos = 0\n    while pos < len(dlist):\n        if dlist[pos] == item:\n            return True, pos\n        pos += 1\n    return False, -1\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    return_list = []\n    for i, j in enumerate(dlist):\n        if j == item:\n            return_list.append(i)\n            return True, return_list\n    return False, return_list\n"
    },
    {
        "number": 280,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sequential_search(dlist, item):\n    '''\n    Write a function that takes in an array and element and returns a tuple containing a boolean that indicates if the element is in the array and the index position of the element (or -1 if the element is not found).\n    '''\n    index = 0\n    found = False\n    while index < len(dlist) and found == False:\n        if dlist[index] == item:\n            found = True\n        else:\n            index += 1\n    return found, index\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    test_list = sorted(test_list)\n    if len(test_list)!= len(set(test_list)):\n        return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    for i in test_list:\n        if test_list.count(i)>1:\n            return False\n    return True\n    \ndef main():\n    test_list = [1,2,3,1]\n    test_list_2 = ['s','t','e','p','r','i','d','i','f']\n    test_list_3 = []\n    print(all_unique(test_list))\n    print(all_unique(test_list_2))\n    print(all_unique(test_list_3))\n    \n    \nmain()"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return 'List is unique'\n    else:\n        return 'List is not unique'\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    \n    temp_list = []\n    for i in test_list:\n        if i not in temp_list:\n            temp_list.append(i)\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    #print(set(test_list))\n    #print(len(test_list))\n    return len(set(test_list)) == len(test_list)\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    i = 0\n    while i < len(test_list):\n        if test_list.count(test_list[i]) > 1:\n            return False\n        i += 1\n    return True\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list)==len(set(test_list))\nprint(all_unique([1,2,3,4,4,4,4]))\nprint(all_unique([1,2,3,4,3]))\nprint(all_unique([2,2,2,2]))\nprint(all_unique(['rain','rain','sunny']))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    # if the number of unique elements in list is equal to the length of the list, then it's unqiue\n    if len(set(test_list)) == len(test_list):\n        print(\"True: all the elements are unique\")\n    else:\n        print(\"False: there are some duplicates\")\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    return len(test_list) == len(set(test_list))\n    \nprint(all_unique([1,2,3,2]))\nprint(all_unique([1,2,3,1]))\nprint(all_unique(['apple','banana','grapes','apple']))\n"
    },
    {
        "number": 281,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_unique(test_list):\n    '''\n    Write a python function to check if the elements of a given list are unique or not.\n    '''\n    if len(test_list) == len(set(test_list)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    list_len1 = len(nums1)\n    list_len2 = len(nums2)\n    if (list_len1!= list_len2):\n        return -1\n    \n    output_list = list()\n    for i in range(list_len1):\n        output_list.append(nums1[i]-nums2[i])\n    return output_list\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    x = nums1\n    y = nums2\n    for i in range(len(x)):\n        if x[i] - y[i] < 0:\n            x[i] = x[i] - y[i]\n            y[i] = 0\n        else:\n            y[i] = y[i] - x[i]\n            x[i] = 0\n    return x + y\nprint(sub_list([4,3,10,9],[2,5,4,9]))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [x-y for x,y in zip(nums1,nums2)]\n    \n    \n    \n    \n    \ndef sum_list(nums1,nums2):\n    '''\n    Write a function to sum two lists element-wise.\n    '''\n    return [x+y for x,y in zip(nums1,nums2)]\n    \n    \n    \n    \ndef average_list(nums1,nums2):\n    '''\n    Write a function to average two lists element-wise.\n    '''\n    return sum_list(nums1,nums2) / len(nums1)\n    \n    \n    \n    \ndef dot_product(v1,v2):\n    '''\n    Write a function to compute the dot product of two vectors.\n    '''\n    return sum([x*y for x,y in zip(v1,v2)])\n    \n    \n    \n    \ndef cross_product(v1,v2):\n    '''\n    Write a function to compute the cross product of two vectors.\n    '''\n    return [(v1[1]*v2[2]-v1[2]*v2[1]),\n            (v1[2]*v2[0]-v1[0]*v2[2]),\n            (v1[0]*v2[1]-v1[1]*v2[0])]\n    \n    \n    \n    \ndef length_vector(v):\n    '''\n    Write a function to compute the length of a vector.\n    '''\n    return ((v[0]**2 + v[1]**2)**(1/2))\n    \n    \n    \n    \ndef scalar_product(v1,v2):\n    '''\n    Write a function to compute the scalar product of two vectors.\n    '''\n    return v1[0]*v2[0] + v1[1]*v2[1] + v1[2]*v2[2]\n    \n    \n    \n    \ndef projection_vector(v,w):\n    '''\n    Write a function to compute the projection of one vector onto another.\n    '''\n    v2 = v - w\n    v2_norm = length_vector(v2)\n    v2_scalar_product = scalar_product(v,w)\n    \n    if v2_scalar_product == 0:\n        return v\n    \n    else:\n        return (v2_norm*v2)/v2_scalar_product\n    \n    \n    \n    \ndef dot_product_two_vectors(v1,v2):\n    '''\n    Write a function to compute the dot product of two vectors.\n    '''\n    return sum([x*y for x,y in zip(v1,v2)])\n    \n    \n    \n    \ndef projection_vector_to_vector(v,w):\n    '''\n    Write a function to compute the projection of one vector onto another.\n    '''\n    if scalar_product(v,w) == 0:\n        return v\n    \n    return (dot_product_two_vectors(v,w)/scalar_product(v,w)) * w\n    \n    \n    \n    \ndef add_vectors(v,w):\n    '''\n    Write a function to add two vectors.\n    '''\n    return [x + y for x,y in zip(v,w)]\n    \n    \n    \n    \ndef subtract_vectors(v,w):\n    '''\n    Write a function to subtract two vectors.\n    '''\n    return [x-y for x,y in zip(v,w)]\n    \n    \n    \n    \ndef vector_scalar_product(v,k):\n    '''\n    Write a function to compute the scalar product of a vector and a number.\n    '''\n    return sum([x*k for x in v])\n    \n    \n    \n    \ndef vector_subtract_two_vectors(v,w):\n    '''\n    Write a function to subtract two vectors.\n    '''\n    return [x-y for x,y in zip(v,w)]\n    \n    \n    \n    \ndef sum_of_elements(l):\n    '''\n    Write a function to compute the sum of all the elements of a list.\n    '''\n    return sum(l)\n    \n    \n    \n    \ndef add_all_elements_of_list(l):\n    '''\n    Write a function to compute the sum of all the elements of a list.\n    '''\n    return reduce(lambda x,y : x+y, l)\n    \n    \n    \n    \ndef square_all_elements_of_list(l):\n    '''\n    Write a function to compute the square of all the elements of a list.\n    '''\n    return reduce(lambda x,y : x*y, l)\n    \n    \n    \n    \ndef find_element_by_index(l,index):\n    '''\n    Write a function to compute the value of the element at a given index in a list.\n    '''\n    return l[index]\n    \n    \n    \n    \ndef find_element_by_index_or_value(l,index,value):\n    '''\n    Write a function to compute the value of the element at a given index in a list.\n    '''\n    return l[index] if index<len(l) and l[index]==value else None\n    \n    \n    \n    \ndef compute_mean(l):\n    '''\n    Write a function to compute the mean of a list of numbers.\n    '''\n    return sum(l) / len(l)\n    \n    \n    \n    \ndef compute_median(l):\n    '''\n    Write a function to compute the median of a list of numbers.\n    '''\n    l.sort()\n    \n    if len(l) % 2 == 0:\n        mid = (len(l)-1)//2\n        return (l[mid]+l[mid+1])/2\n    else:\n        return l[len(l)//2]\n    \n    \n    \n    \ndef compute_mode(l):\n    '''\n    Write a function to compute the mode of a list of numbers.\n    '''\n    d = {}\n    for i in l:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] = d[i] + 1\n    \n    l_max = []\n    for i in d.keys():\n        if d[i] == max(d.values()):\n            l_max.append(i)\n    \n    if len(l_max) == 1:\n        return l_max[0]\n    else:\n        return l_max\n    \n    \n    \n    \ndef compute_standard_deviation(l):\n    '''\n    Write a function to compute the standard deviation of a list of numbers.\n    '''\n    mean = compute_mean(l)\n    l_standard_deviation = []\n    for i in l:\n        l_standard_deviation.append((i-mean)**2)\n    \n    return math.sqrt(sum(l_standard_deviation) / (len(l)-1))\n    \n    \n    \n    \ndef compute_variance(l):\n    '''\n    Write a function to compute the variance of a list of numbers.\n    '''\n    mean = compute_mean(l)\n    l_variance = []\n    for i in l:\n        l_variance.append((i-mean)**2)\n    \n    return sum(l_variance) / (len(l)-1)\n    \n    \n    \n    \ndef compute_covariance(l1,l2):\n    '''\n    Write a function to compute the covariance of a list of numbers.\n    '''\n    mean1 = compute_mean(l1)\n    mean2 = compute_mean(l2)\n    l_covariance = []\n    for i in range(len(l1)):\n        l_covariance.append((l1[i]-mean1)*(l2[i]-mean2))\n    \n    return sum(l_covariance) / (len(l1)-1)\n    \n    \n    \n    \ndef compute_correlation(l"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y: x-y, nums1, nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [num1 - num2 for num1, num2 in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return [i - j for i, j in zip(nums1, nums2)]\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    # A utility function to return list of two lists with same size\n    def make_2D(l1, l2, n):\n        list = []\n        for i in range(n):\n            list.append([])\n            for j in range(n):\n                list[i].append(l1[i] - l2[i])\n        return list\n    \n    # Function to subtract 2 lists\n    def subtract_2lists(l1, l2):\n        # Return list of 2D lists with\n        # same size\n        n = len(l1)\n        list = make_2D(l1, l2, n)\n        for i in range(n):\n            for j in range(n):\n                list[i][j] = l1[i] - l2[j]\n        return list\n    \n    # Utility function to print a matrix\n    def print_matrix(mat):\n        for i in range(len(mat)):\n            for j in range(len(mat[i])):\n                print(mat[i][j], end ='')\n            print()\n    \n    # Function to subtract 2 matrixes\n    def subtract_matrices(m1, m2):\n        # Return the result as a matrix\n        n = len(m1)\n        ans = []\n        for i in range(n):\n            ans.append([])\n            for j in range(n):\n                ans[i].append(m1[i][j] - m2[i][j])\n        return ans\n    \n    # Function to find list of common elements in two lists\n    def common_elements(l1, l2):\n        c = 0\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    c = c + 1\n                    break\n        return c\n    \n    # Function to find list of common elements in two lists\n    def common_elements(l1, l2):\n        l = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    l.append(l1[i])\n        return l\n    \n    # Function to find list of common elements in two lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find list of common elements in two lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1[i])\n                    break\n        return ans\n    \n    # Function to find common elements in 2 lists\n    def common_elements(l1, l2):\n        # Return the result as a matrix\n        ans = []\n        for i in range(len(l1)):\n            for j in range(len(l2)):\n                if l1[i] == l2[j]:\n                    ans.append(l1"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return list(map(lambda x,y: x-y,nums1,nums2))\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i] - nums2[i])\n    return result\n"
    },
    {
        "number": 282,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sub_list(nums1,nums2):\n    '''\n    Write a function to subtract two lists element-wise.\n    '''\n    return nums1 - nums2\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n == 0:\n        return False\n    dict = {}\n    while n > 0:\n        digit = n % 10\n        if digit in dict:\n            dict[digit] = dict[digit] + 1\n        else:\n            dict[digit] = 1\n        n = n // 10\n    for k in dict:\n        if k > dict[k]:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    \n    num_dict = {\n    '2':0,\n    '3':0,\n    '4':0,\n    '5':0,\n    '6':0,\n    '7':0,\n    '8':0,\n    '9':0\n    }\n    \n    for i in str(n):\n        num_dict[i] += 1\n        \n    for i in num_dict:\n        if num_dict[i] > i:\n            return False\n    \n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    count = 0\n    str_n = str(n)\n    for i in range(len(str_n)):\n        count += 1\n        if str_n[i] not in str_n:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    freq = {}\n    while n>0:\n        d= n%10\n        if d not in freq:\n            freq[d]=1\n        else:\n            freq[d]+=1\n        n=n//10\n    for k,v in freq.items():\n        if v > k:\n            return False\n    return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    if n<=0:\n        return False\n    else:\n        n_copy=n\n        while n_copy>0:\n            dig=n_copy%10\n            if dig>n_copy:\n                return False\n            n_copy=n_copy//10\n        return True\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    flag = 1\n    while (n > 0): \n        d = n % 10\n        n = n // 10\n        if (n == 0 and flag == 1): \n            flag = 0\n            continue\n        if (d > n): \n            flag = 0\n            break\n    return flag\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    num = n\n    count = 0\n    while num > 0:\n        digit = num % 10\n        count += 1\n        num = int(num/10)\n    if count >= digit:\n        return True\n    return False\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    number = int(n)\n    number = str(number)\n    flag = 0\n    for i in range(0, len(number)):\n        temp = number.count(number[i])\n        if(temp >= int(number[i])):\n            flag += 1\n        if(flag > 1):\n            break\n    if(flag == 1):\n        print(n, \"is a valid number\")\n    else:\n        print(n, \"is not a valid number\")\n"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    digits = list(map(int, str(n)))\n    counts = []\n    for d in digits:\n        counts.append(digits.count(d))\n    for i in range(len(counts)):\n        if counts[i] > d:\n            return False\n    return True"
    },
    {
        "number": 283,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def validate(n): \n    '''\n    Write a python function takes in an integer and check whether the frequency of each digit in the integer is less than or equal to the digit itself.\n    '''\n    hashmap = {}\n    while(n>0):\n        if(n%10 not in hashmap):\n            hashmap[n%10] = 1\n        else:\n            hashmap[n%10] = hashmap[n%10] + 1\n        n = n//10\n    for i in hashmap.values():\n        if(i>=1):\n            return False\n    return True\n    \nprint(validate(527))\nprint(validate(56))\nprint(validate(1))\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # variable declaration\n    element_count = 0\n    \n    # conditional statement for the list\n    if list == []:\n        print(\"List is empty\")\n    \n    else:\n        for i in list:\n            if i!= element:\n                element_count += 1\n    if element_count == 0:\n        print(\"List contains all elements\")\n    else:\n        print(\"List does not contain all elements\")\n    return element_count\n    \ncheck_element([1,2,3],1)\ncheck_element([1,2,3],4)\ncheck_element([],1)\ncheck_element([1,2,3,4],1)\ncheck_element([1,2,3,4],4)"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    found = False\n    for item in list:\n        if item!= element:\n            found = False\n            break\n        else:\n            found = True\n    if found:\n        print('Element found in list')\n    else:\n        print('Element not found in list')\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    # return element in list\n    for x in list:\n        if x!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    return all(i == element for i in list)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    if list == [] or element == None:\n        print(\"[ERROR]: list and element is/are empty\")\n        return False\n    if list == [element]:\n        print(\"[ERROR]: Element is in the list\")\n        return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in range(len(list)):\n        if list[i]!= element:\n            return False\n    return True\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    count = 0\n    for item in list:\n        if item == element:\n            count += 1\n    return count == len(list)\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    list.sort()\n    if element in list:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 284,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_element(list,element):\n    '''\n    Write a function that takes in a list and element and checks whether all items in the list are equal to the given element.\n    '''\n    for i in list:\n        if i!= element:\n            return False\n    return True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = 'a*b+'\n    if re.search(pattern, text)!= None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    two = re.findall(r'b*a',text)\n    three = re.findall(r'b+a',text)\n    if not(two) and not(three):\n        print(\"False\")\n    else:\n        print(\"True\")\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if text.find('ab')!= -1:\n        return True\n    return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r\"ab{2,3}b\"\n    #pattern = r\"ab{2,3}b|a\"\n    if re.match(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    pattern = r'ab*b*b'\n    if re.match(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if len(text) <= 1 or text[0:2]!= 'ab':\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    if re.search(r'a(b|bbb)', text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    #Pseudocode:\n    #1. Find the 'b' character\n    #2. Count the 'b'\n    #3. Compare the count of 'b' with 3\n    #4. If 'b' is found and the count is equal to 3, return True\n    #5. If 'b' is found and the count is not equal to 3, return False\n    #6. Else return False\n    \n    #First, find the index of the 'b' character\n    index_b = text.find('b')\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return bool(re.search(r'a.*?b{2,3}', text))\n"
    },
    {
        "number": 285,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_two_three(text):\n    '''\n    Write a function that checks whether a string contains the 'a' character followed by two or three 'b' characters.\n    '''\n    return re.search(r'a{2,3}b', text)\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #Dynamic Programming\n    #Max sum of a sub array of size k is the max sum of an array of size k + k - 1 + k - 2 + k - 3 + k - 4 + k - 5...\n    #max sub array is formed by repeated k-times of a array\n    #at max sum of a sub array of size k is max sum of a array of size k + k - 1 + k - 2 + k - 3 + k - 4 + k - 5...\n    #then from there it is the same thing but with k - 1, k - 2, k - 3....\n    #sum of the array formed by repeated k-times is (k * sum of first k elements) + (k - 1) * sum of first k - 1 elements\n    #the formula is (k * sum of first k elements) + (k - 1) * sum of first k - 1 elements \n    #initialize the array and then update \n    #for the first k elements\n    sum_array = []\n    for i in range(n):\n        sum_array.append(0)\n    #if the first element is negative then update it\n    if a[0] < 0:\n        sum_array[0] = 0\n        sum_array[1] = -a[0]\n    else:\n        sum_array[0] = a[0]\n    #for the second element update the value of the array\n    sum_array[1] = max(a[0], sum_array[0])\n    #now update the sum of the first k elements\n    for i in range(2, n):\n        #if the current element is negative than update the value of the array\n        if a[i] < 0:\n            sum_array[i] = sum_array[i - 1] + 0\n        else:\n            sum_array[i] = max(a[i], sum_array[i - 1])\n    #at the end update the sum of the first k - 1 elements\n    sum_of_k_minus_one = 0\n    for i in range(1, k):\n        sum_of_k_minus_one = max(sum_of_k_minus_one, sum_array[i - 1])\n    #now find the max sum of the sub array\n    sum_of_k_minus_two = 0\n    for i in range(1, k):\n        sum_of_k_minus_two = max(sum_of_k_minus_two, sum_of_k_minus_one + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_three = 0\n    for i in range(1, k):\n        sum_of_k_minus_three = max(sum_of_k_minus_three, sum_of_k_minus_two + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_four = 0\n    for i in range(1, k):\n        sum_of_k_minus_four = max(sum_of_k_minus_four, sum_of_k_minus_three + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_five = 0\n    for i in range(1, k):\n        sum_of_k_minus_five = max(sum_of_k_minus_five, sum_of_k_minus_four + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_six = 0\n    for i in range(1, k):\n        sum_of_k_minus_six = max(sum_of_k_minus_six, sum_of_k_minus_five + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_seven = 0\n    for i in range(1, k):\n        sum_of_k_minus_seven = max(sum_of_k_minus_seven, sum_of_k_minus_six + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_eight = 0\n    for i in range(1, k):\n        sum_of_k_minus_eight = max(sum_of_k_minus_eight, sum_of_k_minus_seven + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_nine = 0\n    for i in range(1, k):\n        sum_of_k_minus_nine = max(sum_of_k_minus_nine, sum_of_k_minus_eight + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_ten = 0\n    for i in range(1, k):\n        sum_of_k_minus_ten = max(sum_of_k_minus_ten, sum_of_k_minus_nine + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_eleven = 0\n    for i in range(1, k):\n        sum_of_k_minus_eleven = max(sum_of_k_minus_eleven, sum_of_k_minus_ten + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_twelve = 0\n    for i in range(1, k):\n        sum_of_k_minus_twelve = max(sum_of_k_minus_twelve, sum_of_k_minus_eleven + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_thirteen = 0\n    for i in range(1, k):\n        sum_of_k_minus_thirteen = max(sum_of_k_minus_thirteen, sum_of_k_minus_twelve + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_fourteen = 0\n    for i in range(1, k):\n        sum_of_k_minus_fourteen = max(sum_of_k_minus_fourteen, sum_of_k_minus_thirteen + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_fifteen = 0\n    for i in range(1, k):\n        sum_of_k_minus_fifteen = max(sum_of_k_minus_fifteen, sum_of_k_minus_fourteen + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_sixteen = 0\n    for i in range(1, k):\n        sum_of_k_minus_sixteen = max(sum_of_k_minus_sixteen, sum_of_k_minus_fifteen + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_seventeen = 0\n    for i in range(1, k):\n        sum_of_k_minus_seventeen = max(sum_of_k_minus_seventeen, sum_of_k_minus_sixteen + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_eighteen = 0\n    for i in range(1, k):\n        sum_of_k_minus_eighteen = max(sum_of_k_minus_eighteen, sum_of_k_minus_seventeen + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_nineteen = 0\n    for i in range(1, k):\n        sum_of_k_minus_nineteen = max(sum_of_k_minus_nineteen, sum_of_k_minus_eighteen + sum_array[i])\n    #now find the max sum of the sub array again\n    sum_of_k_minus_twenty = 0\n    for i in range(1, k):\n        sum_of_k_minus_twenty = max(sum_of_k_minu"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    #global max_value\n    #max_value=0\n    #local max_value\n    #local_max_value=0\n    # local_max_value = 0\n    # global max_local_value\n    # max_local_value=0\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    l = 0\n    m = 0\n    n = len(a)\n    s = 0\n    while m < n:\n        s += a[m]\n        m += k\n        if s < 0:\n            s = 0\n            l = m\n        if s > m:\n            m = s\n            l = m\n        if s == m:\n            break\n    return a[l: l + k]\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # recursively \n    # \n    if a[0] < 0: \n        return -a[0] \n    if k == 0: \n        return 0\n    if n == 0: \n        return 0\n    if n == 1: \n        if a[0] > k: \n            return a[0] \n        else: \n            return k\n    if a[0] >= k: \n        return a[0] + max_sub_array_sum_repeated(a, n - 1, k) \n    else: \n        return max_sub_array_sum_repeated(a, n - 1, k) \n    \n        "
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    # Repeat the array 'k' times and get the largest sum\n    max_sum = float('-inf')\n    \n    # Consider each element in the array and calculate max_sum of the \n    # current elements and previous elements\n    for i in range(n):\n        # If the current element is less than 0 then ignore\n        if a[i] < 0:\n            continue\n        \n        # If we reach the element after the final element in \n        # the array and we've got a negative value then ignore\n        if (i == n - 1) and (a[i] < 0):\n            continue\n        \n        # If we reach the element before the final element in \n        # the array and we've got a negative value then ignore\n        if (i == 0) and (a[i] < 0):\n            continue\n            \n        # Get the sum of current element and previous element\n        # by adding k.\n        sum_temp = a[i] + k * a[i-1]\n        \n        # Update the max_sum\n        max_sum = max(max_sum, sum_temp)\n    \n    return max_sum\n    \n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    \n    # function to find the repeating times\n    def find_repeat_time(arr):\n        \n        # create a hash map\n        dic = dict()\n        \n        for i in range(len(arr)):\n            \n            # if element is already present in hash map\n            if arr[i] in dic:\n                \n                dic[arr[i]] += 1\n            \n            # else add the element to hash map\n            else:\n                dic[arr[i]] = 1\n        \n        # return max repeating time\n        return max(dic.values())\n    \n    \n    # keep track of max sum\n    max_sum = -1\n    \n    # count of consecutive elements\n    count = 0\n    \n    # initialize sum to 0\n    sum = 0\n    \n    # check if there are any elements in array\n    if len(a) == 0:\n        return 0\n    \n    # check if k is less than length of array\n    if k > len(a):\n        return 0\n    \n    # keep traversing the array till length of array is more than k\n    for i in range(len(a)-k):\n        \n        # check if current element is same as the last element of sum\n        if sum == a[i]:\n            \n            # count is incremented\n            count += 1\n        \n        # check if current element is more than sum\n        else:\n            \n            # sum is updated by adding current element\n            sum += a[i]\n            \n            # if count is greater than k\n            if count > k:\n                \n                # initialize sum\n                sum = a[i]\n                \n                # increase count\n                count = 1\n            \n            # if count is less than k\n            else:\n                \n                # check if sum is greater than max sum\n                if sum > max_sum:\n                    \n                    # update max sum\n                    max_sum = sum\n                    \n                # increase sum\n                sum += a[i]\n                \n                # increase count\n                count += 1\n    \n    # find repeating time\n    repeat_time = find_repeat_time(a)\n    \n    # check if max sum is greater than repeating time\n    if max_sum > repeat_time:\n        \n        # return max sum\n        return max_sum\n    \n    # if max sum is less than repeating time\n    else:\n        \n        # return repeating time\n        return repeat_time\n    \n    \nif __name__ == \"__main__\":\n    \n    # get input from user\n    a = list(map(int, input().split()))\n    \n    # get length of array\n    n = a.pop(0)\n    \n    # get the number of repeats\n    k = int(input())\n    \n    # call max_sub_array_sum_repeated\n    print(max_sub_array_sum_repeated(a, n, k))"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    for i in range(n-k):\n        s = a[i]\n        for j in range(1, k):\n            s += a[i+j]\n        if(s > max_s):\n            max_s = s\n    return max_s\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    res = -sys.maxsize\n    left = 0\n    n = len(a)\n    for right in range(left, n):\n        sub_sum = 0\n        sub_start = right\n        sub_end = right\n        while sub_end <= n:\n            sub_sum += a[sub_end]\n            sub_end += k\n            if sub_sum > res:\n                res = sub_sum\n    return res\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    print(a)\n    max_sum = a[0]\n    max_sum_count = 0\n"
    },
    {
        "number": 286,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum_repeated(a, n, k): \n    '''\n    Write a function to find the largest sum of a contiguous array in the modified array which is formed by repeating the given array k times.\n    '''\n    max_sum = -float('inf')\n    prefix_sum = 0\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    return sum(i**2 for i in range(n) if i%2==0)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        if i%2==0:\n            sum+=i*i\n    print(sum)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if n == 0:\n        return 0\n    else:\n        return (n**2)+(square_Sum(n-1))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    i = 0\n    while i < n:\n        sum = sum + (i * i)\n        i = i + 2\n    return sum"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sq = 0\n    for i in range(1,n+1):\n        if i%2==0:\n            sq += i**2\n    return sq\nprint(square_Sum(5))\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+i**2\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    squares = []\n    for i in range(n):\n        if i%2 == 0:\n            squares.append(i*i)\n    return sum(squares)\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    if(n>0):\n        # use math module inbuilt function to calculate sum of squares\n        squaresum = 0\n        for i in range(n):\n            squaresum += (i+1)*(i+1)\n        return squaresum\n    else:\n        return -1\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if i%2==0:\n            sum = sum + (i*i)\n    return sum\n"
    },
    {
        "number": 287,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def square_Sum(n):  \n    '''\n    Write a python function takes in an integer n and returns the sum of squares of first n even natural numbers.\n    '''\n    res = 0\n    for i in range(n):\n        res += i*i\n    return res\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max = len(list1[0])\n    for i in list1:\n        if max < len(i):\n            max = len(i)\n    return max\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxi = list1[0][0]\n    for i in list1:\n        if maxi < len(i):\n            maxi = len(i)\n            maxi_id = list1.index(i)\n    print(f'Maximum Length Element is: {maxi} and index: {maxi_id}')\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = -1\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for l in list1:\n        length = len(l)\n        if length > max_length:\n            max_length = length\n    return max_length\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for item in list1:\n        if len(item) > max_len:\n            max_len = len(item)\n    return max_len\n    \n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for i in range(len(list1)):\n        if len(list1[i]) > max_len:\n            max_len = len(list1[i])\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    if list1 == []:\n        return 0\n    else:\n        return max(max_length(list1[1:]), max_length(list1[0])) + 1\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_len = 0\n    for lists in list1:\n        if len(lists) > max_len:\n            max_len = len(lists)\n    return max_len\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    maxlen = 0\n    for i in list1:\n        if len(i)>maxlen:\n            maxlen = len(i)\n    return maxlen\n"
    },
    {
        "number": 290,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length(list1):\n    '''\n    Write a function to find the list of maximum length in a list of lists.\n    '''\n    max_length = 0\n    for i in list1:\n        if len(i)>max_length:\n            max_length = len(i)\n    return max_length\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    res = 0\n    dp = [[0] * k for _ in range(n)]\n    for i in range(1, k):\n        dp[0][i] = 1\n    for i in range(1, n):\n        dp[i][0] = 1\n    for i in range(1, n):\n        for j in range(1, k):\n            if j == 1:\n                dp[i][j] = 1\n            else:\n                dp[i][j] = dp[i][j - 1] + dp[i - 1][j - 1]\n            res = max(res, dp[i][j])\n    return res\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if k > n:\n        return 0\n    if n == 0:\n        return 1\n    if n == 1:\n        return 1\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # base cases \n    if n == 1 or n == 0: \n        return 1\n    if k == 1 or k == 0: \n        return 0\n    # base cases for n=2 \n    if n == 2: \n        return 2\n    if k == 2: \n        return 2\n    # solution for n=3 \n    if n == 3: \n        return 4\n    # solution for n=4 \n    if n == 4: \n        return 5\n    # base case for n=5 \n    if n == 5: \n        return 6\n    # solution for n=6 \n    if n == 6: \n        return 7\n    # solution for n=7 \n    if n == 7: \n        return 8\n    # solution for n=8 \n    if n == 8: \n        return 9\n    # solution for n=9 \n    if n == 9: \n        return 10\n    # solution for n=10 \n    if n == 10: \n        return 11\n    # solution for n=11 \n    if n == 11: \n        return 12\n    # solution for n=12 \n    if n == 12: \n        return 13\n    # solution for n=13 \n    if n == 13: \n        return 14\n    # solution for n=14 \n    if n == 14: \n        return 15\n    # solution for n=15 \n    if n == 15: \n        return 16\n    # solution for n=16 \n    if n == 16: \n        return 17\n    # solution for n=17 \n    if n == 17: \n        return 18\n    # solution for n=18 \n    if n == 18: \n        return 19\n    # solution for n=19 \n    if n == 19: \n        return 20\n    # solution for n=20 \n    if n == 20: \n        return 21\n    # solution for n=21 \n    if n == 21: \n        return 22\n    # solution for n=22 \n    if n == 22: \n        return 23\n    # solution for n=23 \n    if n == 23: \n        return 24\n    # solution for n=24 \n    if n == 24: \n        return 25\n    # solution for n=25 \n    if n == 25: \n        return 26\n    # solution for n=26 \n    if n == 26: \n        return 27\n    # solution for n=27 \n    if n == 27: \n        return 28\n    # solution for n=28 \n    if n == 28: \n        return 29\n    # solution for n=29 \n    if n == 29: \n        return 30\n    # solution for n=30 \n    if n == 30: \n        return 31\n    # solution for n=31 \n    if n == 31: \n        return 32\n    # solution for n=32 \n    if n == 32: \n        return 33\n    # solution for n=33 \n    if n == 33: \n        return 34\n    # solution for n=34 \n    if n == 34: \n        return 35\n    # solution for n=35 \n    if n == 35: \n        return 36\n    # solution for n=36 \n    if n == 36: \n        return 37\n    # solution for n=37 \n    if n == 37: \n        return 38\n    # solution for n=38 \n    if n == 38: \n        return 39\n    # solution for n=39 \n    if n == 39: \n        return 40\n    # solution for n=40 \n    if n == 40: \n        return 41\n    # solution for n=41 \n    if n == 41: \n        return 42\n    # solution for n=42 \n    if n == 42: \n        return 43\n    # solution for n=43 \n    if n == 43: \n        return 44\n    # solution for n=44 \n    if n == 44: \n        return 45\n    # solution for n=45 \n    if n == 45: \n        return 46\n    # solution for n=46 \n    if n == 46: \n        return 47\n    # solution for n=47 \n    if n == 47: \n        return 48\n    # solution for n=48 \n    if n == 48: \n        return 49\n    # solution for n=49 \n    if n == 49: \n        return 50\n    # solution for n=50 \n    if n == 50: \n        return 51\n    # solution for n=51 \n    if n == 51: \n        return 52\n    # solution for n=52 \n    if n == 52: \n        return 53\n    # solution for n=53 \n    if n == 53: \n        return 54\n    # solution for n=54 \n    if n == 54: \n        return 55\n    # solution for n=55 \n    if n == 55: \n        return 56\n    # solution for n=56 \n    if n == 56: \n        return 57\n    # solution for n=57 \n    if n == 57: \n        return 58\n    # solution for n=58 \n    if n == 58: \n        return 59\n    # solution for n=59 \n    if n == 59: \n        return 60\n    # solution for n=60 \n    if n == 60: \n        return 61\n    # solution for n=61 \n    if n == 61: \n        return 62\n    # solution for n=62 \n    if n == 62: \n        return 63\n    # solution for n=63 \n    if n == 63: \n        return 64\n    # solution for n=64 \n    if n == 64: \n        return 65\n    # solution for n=65 \n    if n == 65: \n        return 66\n    # solution for n=66 \n    if n == 66: \n        return 67\n    # solution for n=67 \n    if n == 67: \n        return 68\n    # solution for n=68 \n    if n == 68: \n        return 69\n    # solution for n=69 \n    if n == 69: \n        return 70\n    # solution for n=70 \n    if n == 70: \n        return 71\n    # solution for n=71 \n    if n == 71: \n        return 72\n    # solution for n=72 \n    if n == 72: \n        return 73\n    # solution for n=73 \n    if n == 73: \n        return 74\n    # solution for n=74 \n    if n == 74: \n        return 75\n    # solution for n=75 \n    if n == 75: \n        return 76\n    # solution for n=76 \n    if n == 76: \n        return 77\n    # solution for n=77 \n    if n == 77: \n        return 78\n    # solution for n=78 \n    if n == 78: \n        return 79\n    # solution for n=79 \n    if n == 79: \n        return 80\n    # solution for n=80 \n    if n == 80: \n        return 81\n    # solution for n=81 \n    if n == 81: \n        return 82\n    # solution for n=82 \n    if n == 82: \n        return 83\n    # solution for n=83 \n    if n == 83: \n        return 84\n    # solution for n=84 \n    if n == 84: \n        return 85\n    # solution for n=85 \n    if n == 85: \n        return 86\n    # solution for n=86 \n    if n == 86: \n        return 87\n    # solution for n=87 \n    if n == 87: \n        return 88\n    # solution for n=88 \n    if n == 88: \n        return 89\n    # solution for n=89 \n    if n == 89: \n        return 90\n    # solution for n=90 \n    if n == 90: \n        return 91\n    # solution for n=91 \n    if n == 91: \n        return 92\n    # solution for n=92 \n    if n == 92: \n        return 93\n    # solution for n=93 \n    if n == 93: \n        return 94\n    # solutio"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    ways = [[0] * k for i in range(n)]\n    ways[0][0] = 1\n    ways[0][1] = 1\n    ways[0][2] = 1\n    for i in range(1,n):\n        for j in range(0,k):\n            ways[i][j] = ways[i-1][j]\n        ways[i][0] = ways[i-1][0] + ways[i-1][2]\n        ways[i][1] = ways[i-1][1] + ways[i-1][0]\n        ways[i][2] = ways[i-1][2] + ways[i-1][1]\n    return ways[n-1][k-1]\n    \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    if n == 1:\n        return k + 1\n    if n == 0:\n        return 1\n    ways = 0\n    for i in range(k):\n        ways += count_no_of_ways(n - 1, k)\n    return ways \n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k + 1)] for j in range(n + 1)]\n    for i in range(k + 1):\n        dp[0][i] = 1\n    for i in range(n + 1):\n        dp[i][0] = 1\n    for i in range(1, n + 1):\n        for j in range(1, k + 1):\n            if j == 1:\n                dp[i][j] = dp[i - 1][j] + dp[i][j]\n            elif j == 2:\n                dp[i][j] = dp[i - 1][j] + dp[i][j] + dp[i - 1][j - 1]\n            else:\n                dp[i][j] = dp[i - 1][j] + dp[i][j] + dp[i - 1][j - 1] + dp[i - 1][j - 2]\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # If there are no adjacent posts with the same color and more than one adjacent posts with the same color. \n    # return 0.\n    # If the adjacent posts are all same color. \n    # return 1.\n    # Else, return number of ways of painting the fence with n posts and k colors. \n    # Since we have to paint the posts in the order of increasing post id. \n    if k == 1 or k == 0: \n        return 0\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # return aways(n, k)\n    ways = [[0 for x in range(n)] for y in range(k)]\n    ways[0][0] = 1\n    for i in range(n):\n        ways[0][i] = 1\n        ways[i][i] = 1\n    for j in range(1, k):\n        ways[j][0] = 1\n        for i in range(1, n):\n            ways[j][i] = ways[j-1][i-1] + ways[j][i-1]\n    return ways[k-1][n-1]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    dp = [[0 for i in range(k + 1)] for j in range(n + 1)] \n    \n    # base case \n    for i in range(1, k + 1): \n        dp[1][i] = 1\n    \n    for i in range(2, n + 1): \n        for j in range(2, k + 1): \n            if j % 2 == 0:\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1] \n            else:\n                dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j] \n                \n    #print(dp)\n    return dp[n][k]\n"
    },
    {
        "number": 291,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_no_of_ways(n, k): \n    '''\n    Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.\n    '''\n    # Recursive approach\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if k == 1:\n        return 1\n    return count_no_of_ways(n-1, k) + count_no_of_ways(n-1, k-1)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    #print('n is {}'.format(n))\n    #print('m is {}'.format(m))\n    return int(n/m)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(\"Enter\",n,\"and\",m)\n    quot = n/m\n    if quot >= 1:\n        print(quot)\n    else:\n        print(quot)\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    print(round(n//m),round(n/m))\n    print(n//m)\n    print(n/m)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    def div(n,m):\n        return n // m\n    return div(n,m)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n//m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    return n // m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    \n    if n < m:\n        return find(m,n)\n    return n/m\n"
    },
    {
        "number": 292,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find(n,m):  \n    '''\n    Write a python function to find quotient of two numbers (rounded down to the nearest integer).\n    '''\n    while True:\n        if n>m:\n            n=n-m\n            if n>=0:\n                return n\n        else:\n            m=m-n\n            if m<0:\n                return n-m\n            \n    "
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    '''\n    w = side1\n    h = side2\n    '''\n    s = ((w**2)+(h**2))**0.5\n    if h<w:\n        s = (s*-1)\n    return s\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return math.sqrt(h**2 + w**2 - 2*h*w*math.cos(math.radians(180)))\n    else:\n        return 0\ndef otherside_quadrangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return h**2 + w**2 - 2*h*w*math.cos(math.radians(180))\n    else:\n        return 0\ndef thirdside_triangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef thirdside_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_triangle(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_rectangle(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_square(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_square(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_rectangle(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_square(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_rectangle(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_square(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_square(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_square(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_square(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_square(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_square(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_square(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_rectangle(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_rectangle(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_rectangle(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_rectangle(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_rectangle(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_rectangle(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 - 2*w*h*math.cos(math.radians(180))\n    else:\n        return 0\ndef fourthside_rectangle(w,h):\n    '''\n    Write a function to find the fourth side of a right angled triangle.\n    '''\n    if h>0 and w>0:\n        return w**2 + h**2 "
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2+h**2)-h\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return math.sqrt(w**2 + h**2 - 2*w*h*math.cos(math.radians(45)))\nprint(otherside_rightangle(3,4))\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    p=w/2\n    q=h/2\n    return math.sqrt(p*p + q*q - 1)\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(h*h + w*w)\n    b = h/2\n    c = w/2\n    return a,b,c\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    a = math.sqrt(w**2 + h**2)\n    b = w / h\n    c = h / w\n    print(a)\n    print(b)\n    print(c)\n    return a, b, c\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    side = math.sqrt(w**2 + h**2 - 2*w*h*math.cos(math.radians(180)))\n    return side\n"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    return w*math.sin(math.radians(90)) + h*math.sin(math.radians(45))\ndef otherside_rightrectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return w + h\ndef side_rightrectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h\ndef side_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return w\ndef rhombus(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return 2*w\ndef trapezium(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return w + h\ndef triangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return w\ndef rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h\ndef triangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return w\ndef rectangle_trapezium(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return w + h\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third side of a right rectangel.\n    '''\n    return h + w\ndef rectangle_rectangle(w,h):\n    '''\n    Write a function to find the third sid"
    },
    {
        "number": 293,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef otherside_rightangle(w,h):\n    '''\n    Write a function to find the third side of a right angled triangle.\n    '''\n    s = math.sqrt(h**2 + w**2)\n    if s > w:\n        return s\n    else:\n        return w\n    \ndef side_pythagorean(h,w):\n    '''\n    Write a function to find the hypotenuse of a right angled triangle.\n    '''\n    return math.sqrt(h**2 + w**2)\n    \ndef side_sine(h,w):\n    '''\n    Write a function to find the sine of a right angled triangle.\n    '''\n    return math.sqrt(h**2 + w**2) / math.sqrt(h*h + w*w)\n    \ndef side_cosine(h,w):\n    '''\n    Write a function to find the cosine of a right angled triangle.\n    '''\n    return math.sqrt(h**2 + w**2) / math.sqrt(h*h + w*w)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = 0\n    for elem in listval:\n        if elem > max_value:\n            max_value = elem\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n    \n    \n    \n    \n    \ndef find_first_and_last_pos(listval,item):\n    '''\n    Write a function to find the first and last position of an item in a given heterogeneous list.\n    '''\n    first = -1\n    last = -1\n    \n    for i in range(len(listval)):\n        if listval[i] == item:\n            first = i\n            break\n    for j in range(len(listval)-1,-1,-1):\n        if listval[j] == item:\n            last = j\n            break\n    return first,last\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        raise Exception('empty list')\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = listval[0]\n    for i in range(1,len(listval)):\n        if max<=listval[i]:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max_value = -999\n    for i in listval:\n        if i > max_value:\n            max_value = i\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    maximum = listval[0]\n    for i in range(1, len(listval)):\n        if maximum < listval[i]:\n            maximum = listval[i]\n    return maximum\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return 0\n    max_value = listval[0]\n    for i in range(1, len(listval)):\n        if listval[i] > max_value:\n            max_value = listval[i]\n    return max_value\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    return max(listval)\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    max = -999999999999999999999999\n    for i in range(0,len(listval)):\n        if listval[i] > max:\n            max = listval[i]\n    return max\n"
    },
    {
        "number": 294,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_val(listval):\n    '''\n    Write a function to find the maximum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n    else:\n        maxx = listval[0]\n        for val in listval:\n            if val > maxx:\n                maxx = val\n        return maxx\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    count = 1\n    sum = 0\n    while count<=number:\n        if number%count==0:\n            sum+=count\n        count+=1\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    divisors = []\n    for i in range(1,number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    divisors = []\n    for i in range(2, number):\n        if number % i == 0:\n            divisors.append(i)\n    return sum(divisors)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum([1 for i in range(1, number) if number % i == 0])\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    sum = 0\n    for i in range(1, number+1):\n        if number % i == 0:\n            sum += i\n    return sum\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    return sum(get_divisors(number))\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 0:\n        return 0\n    elif number == 1:\n        return 1\n    else:\n        divisors_sum = 1\n        for i in range(2,number):\n            if number % i == 0:\n                divisors_sum += i\n        return divisors_sum\n    \ndef greatest_common_divisor(number1, number2):\n    '''\n    Write a function that finds the greatest common divisor of two numbers.\n    '''\n    if number1 < number2:\n        temp = number1\n        number1 = number2\n        number2 = temp\n    if number1 % number2 == 0:\n        return number2\n    else:\n        return greatest_common_divisor(number2, number1%number2)\n        \ndef pi():\n    '''\n    Write a function that computes pi given N.\n    '''\n    return 3.1415926535897932385 * 4 * sum_div(4000000) / sum_div(2)\n    \ndef sum_of_primes(number):\n    '''\n    Write a function that returns the sum of the primes below number.\n    '''\n    sum = 0\n    for i in range(2, number + 1):\n        if i % 2 == 0:\n            continue\n        elif prime(i):\n            sum += i\n    return sum\n    \ndef prime(number):\n    '''\n    Write a function that returns True if number is prime, else False.\n    '''\n    if number == 1:\n        return False\n    elif number == 2:\n        return True\n    else:\n        for i in range(2, number):\n            if number % i == 0:\n                return False\n        return True\n        \ndef get_factors(number):\n    '''\n    Write a function that returns the list of factors of number.\n    '''\n    factors = []\n    for i in range(1, number + 1):\n        if number % i == 0:\n            factors.append(i)\n    return factors\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    if number == 1:\n        return 1\n    else:\n        return number + sum_div(number - 1)\n"
    },
    {
        "number": 295,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_div(number):\n    '''\n    Write a function to return the sum of all divisors of a number.\n    '''\n    i = 1\n    sum_div = 0\n    while i < number:\n        if number % i == 0:\n            sum_div += i\n        i += 1\n    return sum_div\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    n = len(arr) \n    if n < 2: \n        return 0\n    i = 0 \n    while i < n: \n        j = i + 1\n        while j < n: \n            if arr[i] > arr[j]: \n                i = i + 1\n                break\n            j += 1\n    return i - 1\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_count = 0\n    if len(arr) <= 1:\n        return inv_count\n    else:\n        for i in range(len(arr)-1):\n            if arr[i] > arr[i+1]:\n                inv_count += 1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if not arr: \n        return 0\n    inv_count = 0\n    for i in range(1, len(arr)): \n        for j in range(0, i): \n            if arr[i] < arr[j] and inv_count < (i - j) : \n                inv_count = (i - j) \n    return inv_count \n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    res = 0\n    if not arr or len(arr)==0:\n        return 0\n    if len(arr)==1:\n        return 0\n    l = 0\n    r = len(arr)-1\n    while l<r:\n        if arr[l]<arr[r]:\n            l += 1\n        else:\n            res += (r -l)\n            r -= 1\n    return res\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if(len(arr) == 1):\n        return 0\n    i = 0\n    j = len(arr)-1\n    s = []\n    while i<j:\n        while arr[i] <= arr[j]:\n            s.append(arr[i])\n            i += 1\n        s.append(arr[j])\n        j -= 1\n    if(i == j):\n        s.append(arr[i])\n    print(s)\n    return s\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if len(arr) == 0: \n        return 0\n    if len(arr) == 1: \n        return 0\n    if len(arr) == 2: \n        return 0 if arr[0] <= arr[1] else 1\n    count = 0\n    temp = arr.copy()\n    temp.sort()\n    count = 0 if temp == arr else count + get_Inv_Count(temp)\n    return count"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if not arr: \n        return 0\n    if len(arr) == 1: \n        return arr[0] \n    if len(arr) == 2: \n        return arr[1] if arr[0] > arr[1] else arr[0] \n    middle = len(arr) // 2\n    left = arr[:middle]\n    right = arr[middle:]\n    # print(f'left {left} right {right}')\n    inv_count = 0\n    inv_count += get_Inv_Count(left)\n    inv_count += get_Inv_Count(right)\n    \n    temp = 0\n    i,j = 0,0\n    k = 0\n    while i<len(left) and j<len(right):\n        if left[i] <= right[j]:\n            temp = temp + left[i]\n            i += 1\n        else:\n            temp = temp + right[j]\n            inv_count += (len(left)-i)\n            j += 1\n    while i<len(left):\n        temp = temp + left[i]\n        i += 1\n    while j<len(right):\n        temp = temp + right[j]\n        j += 1\n    return inv_count + temp\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    if arr is None or arr==[]:\n        return 0\n    inv_count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i] > arr[j]:\n                inv_count+=1\n    return inv_count\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    inv_cnt = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] > arr[j]:\n                inv_cnt += 1\n    return inv_cnt\n"
    },
    {
        "number": 296,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_Inv_Count(arr): \n    '''\n    Write a python function to count inversions in an array.\n    '''\n    #create a hash table to store index value\n    hash_table = dict()\n    for i in range(len(arr)):\n        hash_table[arr[i]] = i\n    #sort the array using insertion sort and store the index in a temporary array.\n    for i in range(len(arr)-1):\n        temp = arr[i]\n        #store the index of temp in a temporary array\n        index = hash_table[temp]\n        #move the left and right elements of the array and store the index into the temporary array\n        arr[i], arr[index] = arr[index], arr[i]\n        #rehash the array so that the hash table can be used.\n        hash_table = dict()\n        for i in range(len(arr)):\n            hash_table[arr[i]] = i\n    #count the inversions.\n    count = 0\n    for i in range(len(arr)):\n        #if the temporary array is sorted, then increment the count\n        if arr[i] <= arr[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    new_list = []\n    for item in list1:\n        if type(item) is list:\n            new_list = new_list + flatten_list(item)\n        else:\n            new_list.append(item)\n    return new_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if list1 == []:\n        return []\n    else:\n        flattened_list = []\n        for i in list1:\n            flattened_list.extend(flatten_list(i))\n        flattened_list.append(list1[0])\n        return flattened_list\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if type(list1) is not list:\n        return list1\n    if list1 == []:\n        return []\n    output = []\n    for item in list1:\n        if type(item) is list:\n            output.extend(flatten_list(item))\n        else:\n            output.append(item)\n    return output\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return []\n    \n    res = []\n    for i in list1:\n        if type(i) is list:\n            res.extend(flatten_list(i))\n        else:\n            res.append(i)\n    return res\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    def inner_flat(list2):\n        if type(list2) == list:\n            for i in list2:\n                inner_flat(i)\n        else:\n            return list2\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n    for i in list1:\n        if type(i) == list:\n            result.extend(flatten_list(i))\n        else:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if not list1:\n        return list1\n    # Base case\n    if type(list1[0]) is list:\n        return flatten_list(list1[0]) + flatten_list(list1[1:])\n    else:\n        return list1[0] + flatten_list(list1[1:])\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if len(list1) == 0:\n        return []\n    else:\n        result = []\n        for i in list1:\n            if isinstance(i,list):\n                result += flatten_list(i)\n            else:\n                result.append(i)\n        return result\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    if isinstance(list1, list) is False:\n        return list1\n"
    },
    {
        "number": 297,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def flatten_list(list1):\n    '''\n    Write a function to flatten a given nested list structure.\n    '''\n    result = []\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    for elem in stdata:\n        max_value = max(elem)\n    return max_value\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    d = defaultdict(int)\n    for i in stdata:\n        for j in i:\n            d[j] += 1\n    maxx = 0\n    for key,value in d.items():\n        if value > maxx:\n            maxx = value\n    print(maxx)\n    return maxx\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_list = []\n    for i in stdata:\n        max_list.append(i[1])\n    return(max(max_list))\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate_sum = 0\n    max_aggregate_count = 0\n    d = defaultdict(int)\n    for i in stdata:\n        d[i[0]]+=i[1]\n    for k,v in d.items():\n        if v > max_aggregate_sum:\n            max_aggregate_sum = v\n            max_aggregate_count = 1\n        elif v == max_aggregate_sum:\n            max_aggregate_count += 1\n    return max_aggregate_count\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    total = 0\n    for i in stdata:\n        total += i[0]\n        i[0] = total\n        i[1] = total\n    res = []\n    for i in stdata:\n        res.append(max(i))\n    return(res)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    maxi = 0\n    maxc = 0\n    count = 0\n    for i in range(len(stdata)):\n        st = stdata[i][1]\n        if st == 1:\n            if stdata[i][0] > maxi:\n                maxi = stdata[i][0]\n                count = 1\n            else:\n                count += 1\n        else:\n            if maxc < count:\n                maxc = count\n                maxi = stdata[i][0]\n            count = 0\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    # making a list of all values\n    values = [x for x, _ in stdata]\n    \n    # sorting the values\n    values.sort()\n    \n    # finding the index of the first and last value\n    first_index = values.index(min(values))\n    last_index = values.index(max(values))\n    \n    # creating a list to store all the aggregates\n    aggregates = []\n    \n    # iterating through the list of tuples\n    for i in range(len(stdata)):\n        # initializing the variable to 0\n        current_aggregate = 0\n        \n        # iterating through the range between the first and last indexes\n        for j in range(first_index, last_index + 1):\n            # adding the current value to the current aggregate\n            current_aggregate += stdata[i][j]\n            \n        # adding the current aggregate to the list of aggregates\n        aggregates.append(current_aggregate)\n    \n    # returning the max aggregate\n    return max(aggregates)\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    r = 0\n    for i in range(0, len(stdata), 1):\n        # print(stdata[i])\n        r = max(r, stdata[i][1])\n    return r\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    max_aggregate = 0\n    for i in range(0,len(stdata)):\n        print(stdata[i])\n        if (stdata[i][0]>max_aggregate):\n            max_aggregate = stdata[i][0]\n    print(max_aggregate)\n    return max_aggregate\n"
    },
    {
        "number": 299,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import defaultdict\ndef max_aggregate(stdata):\n    '''\n    Write a function to calculate the maximum aggregate from the list of tuples.\n    '''\n    stdata = defaultdict(int, stdata)\n    arr = []\n    for k,v in stdata.items():\n        arr.append(v)\n    \n    print(arr)\n    return (max(arr), max(stdata.values()))\n    # return (max(max(arr,key=lambda x: x[0])[0], max(arr,key=lambda x: x[1])[1]))\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n == 1:\n        return 1\n    else:\n        count = 0\n        for i in range(n):\n            count += count_binary_seq(n-i-1) * (2 ** i)\n        return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def counting_bits(n):\n        arr = [0]*n\n        i = 1\n        while i < 2**n:\n            x = i\n            while x!= 0:\n                arr[x % n] = arr[x % n] + 1\n                x = x // 2\n            i = i * 2\n        return arr\n    arr = counting_bits(n)\n    return sum(arr)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    if n<=0:\n        return 0\n    count = 0\n    total = 0\n    while total<=1<<n:\n        total += total\n        count += 1\n    return count\n    \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    c = 0\n    i = 0\n    while i < 2**n:\n        t = list(bin(i)[2:])\n        l = len(t)\n        if sum(t) == sum(t[::-1]):\n            c += 1\n        i += 1\n    return c\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def helper(i,sum):\n        if i>=n:\n            return\n        l = (1<<n)-1\n        r = (1<<n)\n        while l<=r:\n            mid = (l+r)//2\n            if sum_bitwise(sum,mid)==sum:\n                r = mid-1\n            else:\n                l = mid+1\n        return l\n    \n    def sum_bitwise(s,n):\n        return sum([x for x in range(1<<n) if s&x])\n        \n    return helper(0,0)+helper(1,1)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_helper(n, s, d): \n        if n == 0: \n            if sum(s) == sum(d): \n                return 1\n            else: \n                return 0\n        else: \n            count_binary_seq_helper(n-1, s+[1], d+[0]) + count_binary_seq_helper(n-1, s+[0], d+[1]) \n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def count_binary_seq_recursion(binary_seq,n,sum_first_n_bit,sum_last_n_bit,count):\n        if n == 1:\n            if sum_first_n_bit == sum_last_n_bit:\n                count += 1\n        else:\n            count_binary_seq_recursion(binary_seq+[0],n-1,sum_first_n_bit,sum_last_n_bit,count)\n            count_binary_seq_recursion(binary_seq+[1],n-1,sum_first_n_bit,sum_last_n_bit,count)\n    binary_seq = []\n    count = 0\n    sum_first_n_bit = 0\n    sum_last_n_bit = 0\n    count_binary_seq_recursion(binary_seq,n,sum_first_n_bit,sum_last_n_bit,count)\n    return count\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    return len([x for x in range(1<<(2*n)) if x == sum(bin(x)[2:].zfill(2*n)[:n])])\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    def _count_binary(n):\n        # if n is 0 then there is no binary sequence with length n \n        if n == 0:\n            return 0 \n        # define a binary seq with length n \n        seq = ''\n        for i in range(n):\n            seq = seq + '0'\n        # calculate the number of different binary sequences with length n\n        cnt = 0 \n        for i in range(n):\n            # calculate the first n bits of binary sequence \n            binary = seq[:i+1]\n            # calculate the last n bits of binary sequence \n            binary = binary[::-1]\n            cnt = cnt + 1 + count_binary(i) + count_binary(i+1)\n        return cnt \n    return _count_binary(n)\n"
    },
    {
        "number": 300,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_binary_seq(n): \n    '''\n    Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.\n    '''\n    total = 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for i in d.values():\n        depth += 1\n        if isinstance(i,dict):\n            depth = max(dict_depth(i),depth)\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    return 1 + max(map(dict_depth, d.values()))\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    if not d:\n        return 0\n    max_depth = 0\n    for k, v in d.items():\n        depth = 1 + dict_depth(v)\n        max_depth = max(max_depth, depth)\n    return max_depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    for key in d:\n        if type(d[key]) == dict:\n            depth += 1\n            depth = dict_depth(d[key])\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    pass\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d,dict):\n        return 0\n    return 1 + max([dict_depth(v) for v in d.values()])\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if type(d) == dict:\n        return 1 + max(map(dict_depth, d.values()))\n    else:\n        return 0\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    if not isinstance(d, dict):\n        return 0\n    if d == {}:\n        return 1\n    depth = 0\n    for key in d.keys():\n        depth = max(depth, 1 + dict_depth(d[key]))\n    return depth\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    depth = 0\n    if isinstance(d, dict):\n        for i in d:\n            if depth < dict_depth(d[i]):\n                depth = dict_depth(d[i])\n    else:\n        depth = 0\n    return depth + 1\n"
    },
    {
        "number": 301,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def dict_depth(d):\n    '''\n    Write a function to find the depth of a dictionary.\n    '''\n    # depth = 0\n    # if type(d) == dict:\n    #     for key in d.keys():\n    #         depth += 1 + dict_depth(d[key])\n    # return depth\n    return 1 + max(map(dict_depth, d.values())) if type(d) == dict else 0\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    lst = []\n    lst.append(arr[index])\n    for i in range(len(arr)-1) :\n        for j in range(i+1,len(arr)) :\n            if index - j >= 0 :\n                lst.append(arr[index-j])\n            else :\n                lst.append(arr[-index+j])\n    print(lst)\n    min_element = min(lst)\n    lst.remove(min_element)\n    max_element = max(lst)\n    result = max_element - min_element\n    return result\n    \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr = sorted(arr)\n    i = 0 \n    j = len(arr)-1\n    while i <= j:\n        m = i + (j-i)//2\n        if arr[m] == index:\n            return m\n        if arr[m] > index:\n            j = m - 1\n        else:\n            i = m + 1\n    \n    if abs(ranges[index]) < ranges[arr[j]]:\n        # index is in the right tail\n        # so look in left tail\n        j = 0\n    else:\n        # index is in the left tail\n        # so look in right tail\n        j = len(arr)-1\n    while i <= j:\n        m = i + (j-i)//2\n        if arr[m] == index:\n            return m\n        if arr[m] > index:\n            j = m - 1\n        else:\n            i = m + 1\n    return -1 \n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    n = len(arr)\n    if(index>=n) : return -1\n    for i in range(len(ranges)) :\n        if(index>=ranges[i][0] and index<=ranges[i][1]) :\n            return index-ranges[i][0]\n    for i in range(len(rotations)) :\n        if(index>=rotations[i][0] and index<=rotations[i][1]) :\n            return index-rotations[i][0]+n\n    return -1\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index == ranges :\n        return arr[index]\n    \n    if rotations == 0 :\n        return find_Element(arr,ranges,rotations,index+1)\n    else :\n        return arr[index] + find_Element(arr,ranges,rotations-1,index+1)\n    \n    \ndef print_Array(arr,ranges,rotations) :  \n    '''\n    Write a python function to print array after number of rotations.\n    '''\n    if rotations == 0 :\n        return \n    \n    if rotations == 1 :\n        print(arr[0], end = \" \")\n    else :\n        print(arr[0], end = \" \")\n        print_Array(arr,ranges,rotations-1)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if (ranges[i][0] <= index <= ranges[i][1]) : \n            return index\n        else :\n            index = (index - ranges[i][0]) + ranges[i][1] + rotations[i]\n    return -1\n    \n    \ndef find_Element_using_inbuilt_function(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(arr)) :\n        if (ranges[i][0] <= index <= ranges[i][1]) : \n            return index\n        else :\n            index = (index - ranges[i][0]) + ranges[i][1] + rotations[i]\n    return -1\n    \n    \ndef main():\n    \n    \n    arr = [0,1,2,3,4,5,6,7,8]\n    ranges = [[0,4],[3,7],[5,9],[6,10]]\n    rotations = [2,4,0,3]\n    index = 1\n    ans = find_Element_using_inbuilt_function(arr,ranges,rotations,index)\n    print (ans)\n    \nif __name__ == \"__main__\":\n    main("
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    for i in range(len(ranges)) :\n        if index >= ranges[i][0] and index <= ranges[i][1] :\n            index = find_Element(arr,ranges,rotations[:i]+rotations[i+1:],index-(ranges[i][1]-ranges[i][0]))\n            if i!= 0 :\n                index = find_Element(arr,ranges,rotations[:i]+rotations[i+1:],index-(ranges[i][1]-ranges[i][0]))\n            return index\n    return index\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index==0:\n        return arr[index]\n    else:\n        return arr[index-1]+arr[index]\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    if index >= len(arr) :\n        return 0\n    #print(index)\n    return arr[index] + (ranges * rotations)\n    \n    \ndef main():\n    '''\n    Write a python function to rotate the array by (ranges * rotations)\n    '''\n    n = int(input())\n    arr = list(map(int, input().split()))\n    ranges = int(input())\n    rotations = int(input())\n    #print(arr, ranges, rotations)\n    print(find_Element(arr,ranges,rotations,0))\n    \nmain("
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    arr_length = len(arr)\n    if arr_length == 0:\n        return -1\n    if r in ranges:\n        return arr[index]\n    if r < ranges[0] :\n        return find_Element(arr,ranges,rotations,(index+rotations)%arr_length)\n    if r > ranges[1]:\n        return find_Element(arr,ranges,rotations,(index-rotations)%arr_length)\n    # print(arr_length)\n    middle = arr_length // 2\n    # print(middle)\n    if (r == ranges[middle]) :\n        return arr[index]\n    if (rotations + middle) > arr_length :\n        # print(arr)\n        return find_Element(arr,ranges,rotations,(index-rotations)%arr_length)\n    if (rotations - middle) > arr_length :\n        # print(arr)\n        return find_Element(arr,ranges,rotations,(index+rotations)%arr_length)\n    if r < ranges[middle] :\n        return find_Element(arr,ranges,rotations,(index-rotations)%arr_length)\n    if r > ranges[middle] :\n        return find_Element(arr,ranges,rotations,(index+rotations)%arr_length)\n    # print(arr)\n    # print(rotations,ranges)\n    return find_Element(arr,ranges,rotations,(index+rotations)%arr_length)\n"
    },
    {
        "number": 304,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Element(arr,ranges,rotations,index) :  \n    '''\n    Write a python function to find element at a given index after number of rotations.\n    '''\n    \n    # To find index of the first element after a given index\n    # we need to subtract the value of index with the value of the rotation\n    # and convert it into list and then find the index in the list\n    arr = list(arr)\n    rotations = list(rotations)\n    rotations = list(map(int,rotations))\n    \n    index = index - (rotations[index])\n    print(index)\n    \n    return arr[index]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #if not words or words == None:\n    #    return []\n    for i in range(len(words)):\n        if words[i][0] == 'p':\n            return (words[i-1],words[i])\n    return []\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = []\n    for word in words:\n        if word.startswith('p'):\n            p.append(word)\n    return p\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    for word in words:\n        if word[0] == 'p':\n            return word\n    return ''\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = re.compile(r'p.*')\n    matches = list(filter(p.match, words))\n    return matches[0], matches[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    x = filter(lambda a: a[0]=='p', words)\n    return list(x)\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    #return words[0:2]\n    #new_words = []\n    #for i in range(len(words)):\n    #    if words[i].startswith(\"p\"):\n    #        new_words.append(words[i])\n    #return new_words\n    result = []\n    for word in words:\n        if word.startswith('p'):\n            result.append(word)\n    return result\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    wordlist = []\n    for word in words:\n        if word.startswith('p'):\n            wordlist.append(word)\n    return wordlist\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p_words = []\n    for word in words:\n        if word[0] == 'p':\n            p_words.append(word)\n    return p_words[0], p_words[1]\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    returnwords = []\n    for word in words:\n        if word[0] == 'p':\n            returnwords.append(word)\n    return returnwords\n"
    },
    {
        "number": 305,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef start_withp(words):\n    '''\n    Write a function to return two words from a list of words starting with letter 'p'.\n    '''\n    p = ['p', 'q', 'r','s', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n    words = words.split()\n    word1 = words[0]\n    word2 = words[1]\n    if word1[0] in p and word2[0] in p:\n        return word1, word2\n    else:\n        return None, None\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    i = 0\n    max_sum = -1\n    while i < n and k >= a[i]:\n        max_sum = max(max_sum, a[i] + max_sum_increasing_subseq(a, n, i + 1, k - a[i]))\n        i += 1\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    # Find the subarray with starting index as 0.\n    max_sum_from_0 = max_sum_increasing_subseq(a, n, index + 1, k)\n    # Check the prefix, if it contains kth element.\n    if k <= a[index]:\n        max_sum_from_k = a[index]\n    else:\n        max_sum_from_k = 0\n    # Check the suffix, if it contains kth element.\n    max_sum_from_suffix = max_sum_increasing_subseq(a, n, index + 1, k + 1)\n    # Add the prefix and suffix and compare the result.\n    max_sum = max(max_sum_from_0 + max_sum_from_k, max_sum_from_suffix)\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0:\n        return 0\n    max_sum = float('-inf')\n    for i in range(index, n):\n        temp = max_sum_increasing_subseq(a, n, i + 1, k) + a[i]\n        max_sum = max(max_sum, temp)\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    # kth element is after i\n    # kth element is before i\n    # check if we should break\n    if index == n:\n        return -1, -1\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if k == n:\n        return a[n]\n    if k > n:\n        return -1\n    max_sum = float(\"-inf\")\n    for i in range(index, n):\n        if a[i] > max_sum:\n            max_sum = a[i]\n            if a[i] > k:\n                break\n    for j in range(i - 1, -1, -1):\n        if a[j] + max_sum > k:\n            break\n        else:\n            max_sum += a[j]\n    return max_sum\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    k = index - k\n    if (k < 0): return 0\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if n == 0 or k > n:\n        return 0\n    if index == n:\n        return 0\n    if a[index] <= k:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), a[index] + max_sum_increasing_subseq(a, n, index + 1, k - a[index]) + a[index])\n    else:\n        return max(max_sum_increasing_subseq(a, n, index + 1, k), max_sum_increasing_subseq(a, n, index + 1, k))\n"
    },
    {
        "number": 306,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_increasing_subseq(a, n, index, k):\n    '''\n    Write a function to find the maximum sum of increasing subsequence from prefix until ith index and also including a given kth element which is after i, i.e., k > i .\n    '''\n    if index == n:\n        return 0\n    max_ending_here = 0\n    max_ending_here = max_sum_increasing_subseq(a, n, index + 1, k)\n    max_ending_here += a[index]\n    if (k <= index) and (max_ending_here > 0):\n        max_ending_here = max_ending_here\n    else:\n        max_ending_here = 0\n    max_ending_here = max_ending_here\n    return max_ending_here\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    return tuplex[m] + tuplex[n]\ndef list_to_colon(listx,m,n):\n    '''\n    Write a function to get a colon of a list.\n    '''\n    return listx[m] + listx[n]\ndef swap_colons(tuplex,m,n):\n    '''\n    Write a function to swap the colon of a tuple.\n    '''\n    return tuplex[n],tuplex[m]\ndef swap_list(listx,m,n):\n    '''\n    Write a function to swap the colon of a list.\n    '''\n    return listx[m],listx[n]\ndef get_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a tuple.\n    '''\n    return tuplex[m:n+1]\ndef get_listx(listx,m,n):\n    '''\n    Write a function to get a list.\n    '''\n    return listx[m:n+1]\ndef _get_tuplex_reversed(tuplex,m,n):\n    '''\n    Write a function to get a tuple in reversed order.\n    '''\n    return tuplex[n:m+1][::-1]\ndef _get_listx_reversed(listx,m,n):\n    '''\n    Write a function to get a list in reversed order.\n    '''\n    return listx[n:m+1][::-1]\ndef get_tuplex_reversed(tuplex,m,n):\n    '''\n    Write a function to get a tuple in reversed order.\n    '''\n    return tuplex[n:m+1]\ndef get_listx_reversed(listx,m,n):\n    '''\n    Write a function to get a list in reversed order.\n    '''\n    return listx[n:m+1]\ndef replace_colons(tuplex,old,new):\n    '''\n    Write a function to replace the colon of a tuple.\n    '''\n    return old[:tuplex.index(old)] + new + old[tuplex.index(old)+1:]\ndef replace_listx(listx,old,new):\n    '''\n    Write a function to replace the colon of a list.\n    '''\n    return old[:listx.index(old)] + new + old[listx.index(old)+1:]\ndef set_tuplex_colon(tuplex,old,new):\n    '''\n    Write a function to set the colon of a tuple.\n    '''\n    tuplex = tuplex[:tuplex.index(old)] + new + tuplex[tuplex.index(old)+1:]\n    return tuplex\ndef set_listx_colon(listx,old,new):\n    '''\n    Write a function to set the colon of a list.\n    '''\n    listx = listx[:listx.index(old)] + new + listx[listx.index(old)+1:]\n    return listx\ndef tuple_to_listx(tuplex):\n    '''\n    Write a function to convert a tuple to a list.\n    '''\n    return list(tuplex)\ndef listx_to_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\ndef add_colons(tuplex,m,n):\n    '''\n    Write a function to add colon to a tuple.\n    '''\n    return tuplex[:m] + ':' + tuplex[m:n+1] + tuplex[n+1:]\ndef add_listx(listx,m,n):\n    '''\n    Write a function to add colon to a list.\n    '''\n    return listx[:m] + ':' + listx[m:n+1] + listx[n+1:]\ndef add_colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to add colon to a tuple.\n    '''\n    return tuplex[:m] + ':' + tuplex[m:n] + tuplex[n+1:]\ndef add_listx_tuplex(tuplex,m,n):\n    '''\n    Write a function to add colon to a tuple.\n    '''\n    return tuplex[:m] + ':' + tuplex[m:n] + tuplex[n+1:]\ndef tuple_to_tuple(tuplex):\n    '''\n    Write a function to convert a tuple to a tuple.\n    '''\n    return tuplex\ndef listx_to_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\ndef listx_to_listx(listx):\n    '''\n    Write a function to convert a list to a list.\n    '''\n    return listx\ndef set_colon_tuplex(tuplex,m,n,new):\n    '''\n    Write a function to set a colon to a tuple.\n    '''\n    return tuplex[:m] + ':' + new + tuplex[m:n+1] + tuplex[n+1:]\ndef set_listx_tuplex(tuplex,m,n,new):\n    '''\n    Write a function to set a colon to a list.\n    '''\n    return tuplex[:m] + ':' + new + tuplex[m:n+1] + tuplex[n+1:]\ndef set_colon_listx(listx,m,n,new):\n    '''\n    Write a function to set a colon to a list.\n    '''\n    return listx[:m] + ':' + new + listx[m:n+1] + listx[n+1:]\ndef set_listx_listx(listx,m,n,new):\n    '''\n    Write a function to set a colon to a list.\n    '''\n    return listx[:m] + ':' + new + listx[m:n+1] + listx[n+1:]\ndef colon_tuplex_to_tuple(tuplex):\n    '''\n    Write a function to convert a colon to a tuple.\n    '''\n    return tuplex[:tuplex.index(':')] + tuplex[tuplex.index(':')+1:]\ndef colon_listx_to_tuple(listx):\n    '''\n    Write a function to convert a colon to a tuple.\n    '''\n    return listx[:listx.index(':')] + listx[listx.index(':')+1:]\ndef colon_tuplex_to_listx(tuplex):\n    '''\n    Write a function to convert a colon to a list.\n    '''\n    return tuplex[:tuplex.index(':')] + tuplex[tuplex.index(':')+1:]\ndef colon_listx_to_listx(listx):\n    '''\n    Write a function to convert a colon to a list.\n    '''\n    return listx[:listx.index(':')] + listx[listx.index(':')+1:]\ndef swap_colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to swap the colon of a tuple.\n    '''\n    return tuplex[:m] + ':' + tuplex[m+1:n] + tuplex[n] + tuplex[m] + tuplex[n+1:]\ndef swap_colon_listx(listx,m,n):\n    '''\n    Write a function to swap the colon of a list.\n    '''\n    return listx[:m] + ':' + listx[m+1:n] + listx[n] + listx[m] + listx[n+1:]\ndef swap_colon_tuple(tuplex,m,n):\n    '''\n    Write a function to swap the colon o"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    list1 = list(tuplex)\n    list1.insert(m,':')\n    list1.insert(n+1,':')\n    return tuple(list1)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    list_colon = []\n    for i in range(0,n):\n        if i == (m - 1):\n            list_colon.append(']')\n            break\n        list_colon.append(':')\n    list_colon.append(']')\n    return list_colon\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if len(tuplex) == 1:\n        return (tuplex,0,0)\n    if len(tuplex) == 2:\n        return (tuplex,tuplex[0][0]-m,tuplex[1][0]-n)\n    if len(tuplex) == 3:\n        return (tuplex,tuplex[0][0]-m,tuplex[1][0]-n,tuplex[2][0]-m)\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = 0\n    while colon < m:\n        if tuplex[colon] == None:\n            colon += 1\n        else:\n            break\n    return tuplex[colon:]+tuplex[0:colon]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    # the return is an integer with the number of values in the tuple\n    # The space on either side of the colon is where the elements are stored\n    colon_index = 0\n    tup_index = 0\n    while colon_index < m:\n        tup_index = 0\n        while tup_index < n:\n            tuplex[colon_index] = tuplex[colon_index] + \":\" + tuplex[tup_index]\n            tup_index += 1\n        colon_index += 1\n    return tuplex\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    if tuplex:\n        return '\\n'.join(list(tuplex[:m])+list(tuplex[m+n:])),tuplex[m],tuplex[m+n]\n"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    s=[]\n    for i in range(m):\n        s.append([])\n        for j in range(n):\n            s[i].append(tuplex[i][j])\n    return s\ndef clear_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a empty tuple of size m*n.\n    '''\n    s=[]\n    for i in range(m):\n        s.append([])\n        for j in range(n):\n            s[i].append(0)\n    return s\ndef rotate_tuplex(tuplex,m,n):\n    '''\n    Write a function to rotate a tuple m*n by 1.\n    '''\n    s=[]\n    for i in range(n):\n        s.append([])\n        for j in range(m):\n            s[i].append(tuplex[m-1-i][j])\n    return s\ndef move_tuplex(tuplex,move,m,n):\n    '''\n    Write a function to move a tuple m*n by one position.\n    '''\n    new_tuplex=deepcopy(tuplex)\n    if move==\"up\":\n        for i in range(m):\n            for j in range(n):\n                new_tuplex[i][j]=tuplex[i-1][j]\n    elif move==\"down\":\n        for i in range(m):\n            for j in range(n):\n                new_tuplex[i][j]=tuplex[i+1][j]\n    elif move==\"left\":\n        for i in range(m):\n            for j in range(n):\n                new_tuplex[i][j]=tuplex[i][j-1]\n    elif move==\"right\":\n        for i in range(m):\n            for j in range(n):\n                new_tuplex[i][j]=tuplex[i][j+1]\n    return new_tuplex\ndef transpose_tuplex(tuplex,m,n):\n    '''\n    Write a function to transpose a tuple m*n by swapping.\n    '''\n    new_tuplex=deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex[i][j],new_tuplex[j][i]=new_tuplex[j][i],new_tuplex[i][j]\n    return new_tuplex\ndef find_tuplex(tuplex,word):\n    '''\n    Write a function to find all the positions of a word in a tuple.\n    '''\n    new_tuplex=deepcopy(tuplex)\n    indices=[]\n    for i in range(len(word)):\n        for j in range(len(new_tuplex)):\n            if new_tuplex[j][i]==word[i]:\n                indices.append(j)\n                new_tuplex[j]=clear_tuplex(new_tuplex,len(new_tuplex),len(new_tuplex[0]))\n    return indices\ndef find_longest_word_tuplex(tuplex,m,n):\n    '''\n    Write a function to find the longest word in a tuple.\n    '''\n    new_tuplex=deepcopy(tuplex)\n    word=\"\"\n    for i in range(m):\n        for j in range(n):\n            if new_tuplex[i][j]==0:\n                new_tuplex[i]=clear_tuplex(new_tuplex,len(new_tuplex),len(new_tuplex[0]))\n                break\n    for i in range(m):\n        for j in range(n):\n            if new_tuplex[i][j]!=0:\n                word+=new_tuplex[i][j]\n    return word\ndef find_indices_of_longest_word_tuplex(tuplex,m,n):\n    '''\n    Write a function to find the indices of the longest word in a tuple.\n    '''\n    new_tuplex=deepcopy(tuplex)\n    word=\"\"\n    for i in range(m):\n        for j in range(n):\n            if new_tuplex[i][j]==0:\n                new_tuplex[i]=clear_tuplex(new_tuplex,len(new_tuplex),len(new_tuplex[0]))\n                break\n    for i in range(m):\n        for j in range(n):\n            if new_tuplex[i][j]!=0:\n                word+=new_tuplex[i][j]\n    indices=[]\n    count=0\n    for i in range(m):\n        for j in range(n):\n            if new_tuplex[i][j]==word[count]:\n                indices.append((i,j))\n                count+=1\n    return indices\ndef remove_duplicates_from_list_tuplex(tuplex,m,n):\n    '''\n    Write a function to remove duplicate items from a list of tuples.\n    '''\n    new_tuplex=deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex[i][j]=tuplex[i][j]\n    return new_tuplex\ndef zero_one_tuplex(tuplex,m,n):\n    '''\n    Write a function to change the values of the items in a tuple to 0 or 1.\n    '''\n    new_tuplex=deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            if new_tuplex[i][j]!=0 and new_tuplex[i][j]!=1:\n                new_tuplex[i][j]=0\n    return new_tuplex\ndef is_tuplex_equal(tuplex,m,n):\n    '''\n    Write a function to check if a tuple is equal to another tuple.\n    '''\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j]!=tuplex[i][j]:\n                return False\n    return True\ndef find_row_tuplex(tuplex,m,n,i):\n    '''\n    Write a function to find the row from the tuple.\n    '''\n    s=[]\n    for j in range(n):\n        s.append(tuplex[i][j])\n    return s\ndef find_col_tuplex(tuplex,m,n,j):\n    '''\n    Write a function to find the column from the tuple.\n    '''\n    s=[]\n    for i in range(m):\n        s.append(tuplex[i][j])\n    return s\ndef find_box_tuplex(tuplex,m,n,i,j):\n    '''\n    Write a function to find the box from the tuple.\n    '''\n    s=[]\n    for i_box_start in range(i-2,i+3):\n        for j_box_start in range(j-2,j+3):\n            if 0<=i_box_start<m and 0<=j_box_start<n:\n                s.append(tuplex[i_box_start][j_box_start])\n    return s\ndef is_tuplex_solved_tuplex(tuplex,m,n):\n    '''\n    Write a function to check if a tuple is solved.\n    '''\n    for i in range(m):\n        for j in range(n):\n            if tuplex[i][j]==0:\n                return False\n    return True\ndef copy_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a copy of a tuple.\n    '''\n    new_tuplex=deepcopy(tuplex)\n    for i in range(m):\n        for j in range(n):\n            new_tuplex[i][j]"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    r=tuplex[1:m+1]\n    if len(tuplex)<m+1:\n        return r\n    else:\n        r=r+tuplex[m+1:]\n        return r\ndef main():\n    x1=[1,2,3]\n    x2=[]\n    x3=['string','int',[1,2,3]]\n    x4=tuple([1,2,3])\n    x5=('string','int',(1,2,3))\n    x6=('string','int',[1,2,3])\n    x7=(1,2,3)\n    print(\"x1: \",x1,\"\\nx2: \",x2,\"\\nx3: \",x3,\"\\nx4: \",x4,\"\\nx5: \",x5,\"\\nx6: \",x6,\"\\nx7: \",x7)\n    print(\"x1[-1]: \",x1[-1],\"\\nx2[0:1]: \",x2[0:1],\"\\nx3[1:3]: \",x3[1:3],\"\\nx4[0]: \",x4[0],\"\\nx5[1]: \",x5[1],\"\\nx6[1:3]: \",x6[1:3],\"\\nx7[1]: \",x7[1],\"\\n\")\n    x1[0]=999\n    x1[1]=999\n    print(\"x1: \",x1,\"\\nx2: \",x2,\"\\nx3: \",x3,\"\\nx4: \",x4,\"\\nx5: \",x5,\"\\nx6: \",x6,\"\\nx7: \",x7)\n    print(\"x1[0]=999: \",x1[0],\"\\nx1[1]=999: \",x1[1],\"\\nx2: \",x2,\"\\nx3: \",x3,\"\\nx4: \",x4,\"\\nx5: \",x5,\"\\nx6: \",x6,\"\\nx7: \",x7)\n    #Task1:\n    print(\"Task1:\")\n    print(\"Task1:\")\n    x1=('string','int',[1,2,3])\n    x2=('string','int',[1,2,3])\n    x3=('string','int',[1,2,3])\n    x4=('string','int',[1,2,3])\n    x5=('string','int',[1,2,3])\n    x6=('string','int',[1,2,3])\n    x7=('string','int',[1,2,3])\n    print(\"x1: \",x1,\"\\nx2: \",x2,\"\\nx3: \",x3,\"\\nx4: \",x4,\"\\nx5: \",x5,\"\\nx6: \",x6,\"\\nx7: \",x7)\n    x1[1]=999\n    print(\"x1: \",x1)\n    x2[1]=999\n    print(\"x2: \",x2)\n    x3[1]=999\n    print(\"x3: \",x3)\n    x4[1]=999\n    print(\"x4: \",x4)\n    x5[1]=999\n    print(\"x5: \",x5)\n    x6[1]=999\n    print(\"x6: \",x6)\n    x7[1]=999\n    print(\"x7: \",x7)\n    print(\"x1[1]=999: \",x1[1],\"\\nx2[1]=999: \",x2[1],\"\\nx3[1]=999: \",x3[1],\"\\nx4[1]=999: \",x4[1],\"\\nx5[1]=999: \",x5[1],\"\\nx6[1]=999: \",x6[1],\"\\nx7[1]=999: \",x7[1])\n    #Task2:\n    print(\"\\nTask2:\")\n    x1=('string','int',[1,2,3])\n    x2=('string','int',[1,2,3])\n    x3=('string','int',[1,2,3])\n    x4=('string','int',[1,2,3])\n    x5=('string','int',[1,2,3])\n    x6=('string','int',[1,2,3])\n    x7=('string','int',[1,2,3])\n    print(\"x1: \",x1,\"\\nx2: \",x2,\"\\nx3: \",x3,\"\\nx4: \",x4,\"\\nx5: \",x5,\"\\nx6: \",x6,\"\\nx7: \",x7)\n    x1[0]=999\n    print(\"x1: \",x1)\n    x2[0]=999\n    print(\"x2: \",x2)\n    x3[0]=999\n    print(\"x3: \",x3)\n    x4[0]=999\n    print(\"x4: \",x4)\n    x5[0]=999\n    print(\"x5: \",x5)\n    x6[0]=999\n    print(\"x6: \",x6)\n    x7[0]=999\n    print(\"x7: \",x7)\n    print(\"x1[0]=999: \",x1[0],\"\\nx2[0]=999: \",x2[0],\"\\nx3[0]=999: \",x3[0],\"\\nx4[0]=999: \",x4[0],\"\\nx5[0]=999: \",x5[0],\"\\nx6[0]=999: \",x6[0],\"\\nx7[0]=999: \",x7[0])\n    #Task3:\n    print(\"\\nTask3:\")\n    x1=('string','int',[1,2,3])\n    x2=('string','int',[1,2,3])\n    x3=('string','int',[1,2,3])\n    x4=('string','int',[1,2,3])\n    x5=('string','int',[1,2,3])\n    x6=('string','int',[1,2,3])\n    x7=('string','int',[1,2,3])\n    print(\"x1: \",x1,\"\\nx2: \",x2,\"\\nx3: \",x3,\"\\nx4: \",x4,\"\\nx5: \",x5,\"\\nx6: \",x6,\"\\nx7: \",x7)\n    x1[1]=999\n    print(\"x1: \",x1)\n    x2[1]=999\n    print(\"x2: \",x2)\n    x3[1]=999\n    print(\"x3: \",x3)\n    x4[1]=999\n    print(\"x4: \",x4)\n    x5[1]=999\n    print(\"x5: \",x5)\n    x6[1]=999\n    print(\"x6: \",x6)\n    x7[1]=999\n    print(\"x7: \",x7)\n    print(\"x1[1]=999: \",x1[1],\"\\nx2[1]=999: \",x2[1],\"\\nx3[1]=999: \",x3[1],\"\\nx4[1]=999: \",x4[1],\"\\nx5[1]=999: \",x5[1],\"\\nx6[1]=999: \",x6[1],\"\\nx7[1]=999: \",x7[1])\n    #Task4:\n    print(\"\\nTask4:\")\n    x1=('string','int',[1,2,3])\n    x2=('string','int',[1,2,3])\n    x3=('string','int',[1,2,3])\n    x4=('string','int',[1,2,3])\n    x5=('string','int',[1,2,3])\n    x6=('string','int',[1,2,3])\n    x7=('string','int',[1,2,3])\n    print(\"x1: \",x1,\"\\nx2: \",x2,\"\\nx3: \",x3,\"\\nx4: \",x4,\"\\nx5: \",x5,\"\\nx6"
    },
    {
        "number": 307,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from copy import deepcopy\ndef colon_tuplex(tuplex,m,n):\n    '''\n    Write a function to get a colon of a tuple.\n    '''\n    colon = ()\n    for i in range(len(tuplex)):\n        colon = (colon + (tuplex[i],))\n    return colon[m:n+1]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    return heap_product(nums1, nums2, N)\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # nums1 = [2, 3, 1, 4, 4, 1]\n    # nums2 = [7, 5, 6, 4, 2, 1]\n    # N = 3\n    # ans = [6, 64, 12]\n    # ans = [7, 5, 64, 12, 8, 1]\n    # ans = [7, 5, 64, 12, 8, 1, 4, 2, 3, 4, 1]\n    ans = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            if i == j:\n                continue\n            product = nums1[i] * nums2[j]\n            ans.append(product)\n    \n    ans = sorted(ans, reverse=True)\n    \n    return ans[:N]\n    \nif __name__ == '__main__':\n    # nums1 = [2, 3, 1, 4, 4, 1]\n    # nums2 = [7, 5, 6, 4, 2, 1]\n    # N = 3\n    # ans = [6, 64, 12]\n    nums1 = [6, 7, 5, 4, 2, 1]\n    nums2 = [1, 2, 3, 4, 5]\n    N = 3\n    ans = [64, 24, 12]\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_product(nums1, nums2, N))\n    print(large_produc"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # pass\n    nums1.sort(reverse = True)\n    nums2.sort(reverse = True)\n    print(nums1, nums2)\n    result = []\n    for i in range(N):\n        num1 = nums1[i]\n        num2 = nums2[i]\n        product = num1 * num2\n        print(product)\n        result.append(product)\n    return result\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # O(n + m)\n    def check(nums1, nums2, N):\n        for i in range(len(nums1)):\n            for j in range(len(nums2)):\n                if nums1[i] * nums2[j] == N:\n                    return (nums1[i], nums2[j])\n        return None\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    if N == 0:\n        return []\n    elif len(nums1) == 0:\n        return nums2[:N]\n    elif len(nums2) == 0:\n        return nums1[:N]\n    else:\n        if len(nums1) > len(nums2):\n            nums1, nums2 = nums2, nums1\n        product = nums1[0]\n        for i in range(1, len(nums1)):\n            product *= nums1[i]\n        result = [product]\n        for i in range(len(nums2)):\n            product *= nums2[i]\n            if product > result[0]:\n                result = [product]\n            elif product == result[0]:\n                result.append(product)\n        return result[:N]\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    # first we sort the lists and get their factors\n    nums1.sort(reverse=True)\n    nums2.sort(reverse=True)\n    factors1 = [int(x) for x in nums1]\n    factors2 = [int(x) for x in nums2]\n    # now we create our list and build it up with the largest products\n    product_list = []\n    while len(product_list) < N:\n        if product_list and factors1[0] < factors2[0]:\n            product_list.append(product_list[-1])\n        else:\n            product_list.append(factors1[0] * factors2[0])\n        factors1 = factors1[1:]\n        factors2 = factors2[1:]\n    return product_list\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1)\n    nums2 = sorted(nums2)\n    # if N is less than the length of nums1, then it doesn't matter\n    # if N is equal to the length of nums1, then return the max of the 2 lists\n    if N == len(nums1):\n        return max(nums1) * max(nums2)\n    # if N is greater than the length of nums1, then we don't need to worry about it\n    # because the max(nums1) * max(nums2) will be greater than the max of the length of nums1\n    elif N >= len(nums1):\n        return max(nums1) * max(nums2)\n    # if N is more than the length of nums1, then we need to do some math\n    # we need to find the k numbers in the larger nums1, and their corresponding k-1 numbers in the larger nums2\n    # we can do this by using a sliding window approach and it's length is equal to N\n    # we will also need to keep track of a running product\n    # we will store the current product, and then we will check if we have reached the required window size\n    # if we have reached the required window size, then we will store the product and reset the product\n    # if we don't have reached the required window size, we will increment the k-1 and k by 1\n    # finally we will return the product\n    # for more details, please refer to https://leetcode.com/problems/largest-product-in-an-array/discuss/143310/Python-3-Sliding-Window-and-Dynamically-updating-the-running-product\n    curr_product = 1\n    window_size = N\n    # i is the index in nums1, j is the index in nums2\n    i, j = 0, 0\n    while i < len(nums1) and j < len(nums2):\n        # if i is less than or equal to window_size, we can simply increment i to maintain the window size\n        if i < window_size:\n            i += 1\n        # we will increment j to maintain the window size\n        else:\n            j += 1\n        # the current product will always be the product of the current number of nums1 and the current number of nums2\n        curr_product = curr_product * nums1[i - 1] * nums2[j - 1]\n        # if the curr_product exceeds the required window size, we will reset the running product\n        if curr_product > window_size:\n            curr_product = 1\n    return curr_product\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    '''\n    how can we solve this problem efficiently?\n    let's try to find the factor of the largest product of the two lists. \n    then we need to figure out how to select a factor from both lists. \n    if we want the largest product of two lists, we want to find the largest product of the smallest factor of each list. \n    if we want the largest product of a list and a list, we want to find the largest product of the smallest factor of each list. \n    we can do this in a single pass, using a stack. \n    \n    '''\n    stack = []\n    max_products = []\n    for num in nums1:\n        while len(stack) > 0 and nums2[stack[-1]] < num:\n            max_products.append(nums2[stack.pop()] * num)\n        stack.append(num)\n    while len(stack) > 0:\n        max_products.append(nums2[stack.pop()] * num)\n    max_products.sort(reverse=True)\n    return max_products[:N]\n    \n    \n    \n    '''\n    we have a helper function that takes in two lists of integers, and returns a list of integers.\n    if we have two lists, we find the product of the smallest factor of each and\n    the product of the smallest factor of each. If we have more than one list, we have\n    to return all products of the smallest factors of the lists. \n    '''\n    \n    def large_product(nums1, nums2, N):\n        '''\n        Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n        '''\n        def product(nums):\n            '''\n            helper function to find the product of a list.\n            '''\n            product = 1\n            for num in nums:\n                product *= num\n            return product\n        \n        def find_smallest_factor(nums):\n            '''\n            helper function to find the smallest factor of a list.\n            '''\n            smallest_factor = float('inf')\n            for num in nums:\n                if num < smallest_factor:\n                    smallest_factor = num\n            return smallest_factor\n        \n        def find_largest_product(nums, smallest_factor):\n            '''\n            helper function to find the largest product of a list using the smallest factor\n            '''\n            largest_product = 0\n            for num in nums:\n                if num >= smallest_factor:\n                    largest_product = max(largest_product, num * smallest_factor)\n            return largest_product\n        \n        if len(nums1) < N:\n            return []\n        if len(nums2) < N:\n            return []\n        \n        large_products = []\n        for i in range(len(nums1)):\n            if i > N:\n                break\n            smallest_factor = find_smallest_factor(nums1[i:])\n            large_products.append(find_largest_product(nums2, smallest_factor))\n        return large_products\n        \n        \n    \n    '''\n    we can also use a single pass list. \n    we can start with the smallest factor in the first list, and go through the remaining list.\n    we can set the largest product so far equal to the product of the smallest factor of the first list,\n    the product of the smallest factor of the second list, and so on.\n    if we encounter the product of the smallest factor of a list that is less than the current maximum,\n    we can simply use that product as the new largest product.\n    '''\n    def large_product(nums1, nums2, N):\n        '''\n        Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n        '''\n        def large_product(nums1, nums2, N):\n            '''\n            helper function to find the largest product of a list.\n            '''\n            max_product = nums1[0]\n            largest_product = nums1[0]\n            for i in range(len(nums1)):\n                if i > N:\n                    break\n                if nums1[i] > max_product:\n                    max_product = nums1[i]\n                elif nums1[i] > largest_product:\n                    largest_product = nums1[i]\n            return largest_product * max_product\n        \n        large_products = []\n        max_product = large_product(nums1, nums2, N)\n        for i in range(len(nums1)):\n            if i > N:\n                break\n            largest_product = large_product(nums1, nums2, i + 1)\n            largest_product = max(largest_product, max_product)\n            large_products.append(largest_product)\n        return large_products\n        \n        '''\n        we can also go through the list backwards. \n        we can start with the largest product, and go through the remaining list in reverse.\n        the product of the smallest factor of a list that is greater than the current maximum,\n        is the product of the largest product of a list that is less than the current maximum.\n        '''\n        def large_product(nums1, nums2, N):\n            '''\n            helper function to find the largest product of a list.\n            '''\n            max_product = nums1[0]\n            largest_product = nums1[0]\n            for i in range(len(nums1) - 1, -1, -1):\n                if i < N:\n                    break\n                if nums1[i] > max_product:\n                    max_product = nums1[i]\n                elif nums1[i] > largest_product:\n                    largest_product = nums1[i]\n            return largest_product * max_product\n        \n        large_products = []\n        max_product = large_product(nums1, nums2, N)\n        for i in range(len(nums1)):\n            if i > N:\n                break\n            largest_product = large_product(nums1, nums2, i + 1)\n            largest_product = max(largest_product, max_product)\n            large_products.append(largest_product)\n        return large_products\n        \n        '''\n        we can also use a single pass list. \n        we can start with the smallest factor in the first list, and go through the remaining list.\n        we can set the largest product so far equal to the product of the smallest factor of the first list,\n        the product of the smallest factor of the second list, and so on.\n        if we encounter the product of the smallest factor of a list that is less than the current maximum,\n        we can simply use that product as the new largest product.\n        '''\n        def large_product(nums1, nums2, N):\n            '''\n            helper function to find the largest product of a list.\n            '''\n            max_product = nums1[0]\n            largest_product = nums1[0]\n            for i in range(len(nums1)):\n                if i > N:\n                    break\n                if nums1[i] > max_product:\n                    max_product = nums1[i]\n                elif nums1[i] > largest_product:\n                    largest_product = nums1[i]\n            return largest_product * max_product\n        \n        large_products = []\n        max_product = large_product(nums1, nums2, N)\n        for i in range(len(nums1)):\n            if i > N:\n                break\n            largest_product = large_product(nums1, nums2, i + 1)\n            largest_product = max(largest_product, max_product)\n            large_products.append(largest_product)\n        return large_products\n        \n        '''\n        if we have two lists, we need to find the largest product of the smallest factor of each list. \n        and the largest product of each list. \n        \n        we can do this using a single pass list.\n        '''\n        def large_product(nums1, nums2, N):\n            '''\n            helper function to find the largest product of a list.\n            '''\n            largest_product = nums"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    print(nums1, nums2)\n    if N < 0:\n        raise ValueError('N should be an integer >= 0')\n    if N >= min(len(nums1), len(nums2)):\n        raise ValueError('N should be smaller than min(len(nums1), len(nums2))')\n    if not all(isinstance(x, int) for x in nums1) or not all(isinstance(x, int) for x in nums2):\n        raise ValueError('Input lists must only contain integers')\n"
    },
    {
        "number": 308,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def large_product(nums1, nums2, N):\n    '''\n    Write a function to find the specified number of largest products from two given lists, selecting one factor from each list.\n    '''\n    nums1 = sorted(nums1, reverse=True)\n    nums2 = sorted(nums2, reverse=True)\n    return heap_largest_product(nums1, nums2, N)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \ndef minimum(a,b):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\n    \ndef absolute(a):\n    '''\n    Write a python function to get the absolute value of a number.\n    '''\n    return abs(a)\n    \ndef factorial(n):\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*factorial(n-1)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    #return a if a>b else b\n    return a if a>b else b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n    \nprint(maximum(8,3))\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a,\"is maximum\")\n    elif a<b:\n        print(b,\"is maximum\")\n    else:\n        print(\"Both numbers are equal\")\n        \nmaximum(3,2)\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    return a if a>b else b\n    "
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    max_num = a\n    if b > max_num:\n        max_num = b\n    return max_num\n"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        return a\n    else:\n        return b"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if a>b:\n        print(a,'is maximum')\n    elif a<b:\n        print(b,'is maximum')\n    else:\n        print('Both are equal')\nmaximum(100,101)"
    },
    {
        "number": 309,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maximum(a,b):   \n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if(a>b):\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip(',')\n    lst = str1.split(',')\n    for i in range(len(lst)):\n        lst[i] = lst[i].strip()\n    return tuple(lst)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    str1 = str1.strip()\n    if len(str1) > 0:\n        return tuple(str1)\n    else:\n        return tuple()\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\nprint(string_to_tuple('wer'))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    char_list = str1.split()\n    return tuple(char_list)\n    \nstr_var = \"Hello World\"\nprint(string_to_tuple(str_var))\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    # Your code here\n    str1 = str1.replace(' ', '')\n    str1 = str1.replace('-', '')\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst=[]\n    for i in range(0,len(str1)):\n        lst.append(str1[i])\n    tup=tuple(lst)\n    return tup\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    return tuple(str1)\n"
    },
    {
        "number": 310,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def string_to_tuple(str1):\n    '''\n    Write a function to convert a given string to a tuple of characters.\n    '''\n    lst = []\n    for i in str1:\n        lst.append(i)\n    return tuple(lst)\n    \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return ~(n-1)\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | (1 << (n.bit_length() - 1)) \n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return 0 if n & (1 << (n.bit_length() - 1)) else n + 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    return n | 0x1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 0\n    while i < len(n):\n        if n[i] == 0:\n            n[i] = 1\n            i += 1\n        else:\n            i += 1\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n |= 1<<(n.bit_length()-1)\n    return n\n    "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    #number = 0\n    #number = 1 << 31\n    #print(bin(number))\n    #print(bin(n))\n    #print(bin(n | (1 << 31)))\n    n = (1 << 31) | n\n    print(bin(n))\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    i = 1\n    while n:\n        n = n - n%2\n        i = i*2\n    return i\n"
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return (n & ~(n-1))\n    "
    },
    {
        "number": 311,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_left_most_unset_bit(n): \n    '''\n    Write a python function to set the left most unset bit.\n    '''\n    n = n | 0x01\n    return n\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r**2*h\n    return volume\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    if r<0 or h<0:\n        return 'Wrong Input'\n    else:\n        return math.pi*r*r*h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi * math.pow(r,2) * h\n    print(volume)\n    return volume\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi * math.pow(r,2) * h\n    print(volume)\n    return volume\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    surface_area = (math.pi/3) * math.pow(r,2) * h\n    print(surface_area)\n    return surface_area\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surface_area = (math.pi * math.pow(r,2)) * h\n    print(surface_area)\n    return surface_area\ndef radius_of_circle(r):\n    '''\n    Write a function that takes in the radius of a circle and returns its radius.\n    '''\n    radius = r\n    print(radius)\n    return radius\ndef circumference_of_circle(r):\n    '''\n    Write a function that takes in the radius of a circle and returns its circumference.\n    '''\n    circumference = 2 * math.pi * r\n    print(circumference)\n    return circumference\ndef circumference_of_rectangle(l,b):\n    '''\n    Write a function that takes in the length and the breadth of a rectangle and returns its circumference.\n    '''\n    circumference = 2 * (l + b)\n    print(circumference)\n    return circumference\ndef area_of_rectangle(l,b):\n    '''\n    Write a function that takes in the length and the breadth of a rectangle and returns its area.\n    '''\n    area = l * b\n    print(area)\n    return area\ndef area_of_triangle(b,h):\n    '''\n    Write a function that takes in the base and the height of a triangle and returns its area.\n    '''\n    area = (0.5) * math.pow(b,2) * h\n    print(area)\n    return area\ndef area_of_circle(r):\n    '''\n    Write a function that takes in the radius of a circle and returns its area.\n    '''\n    area = math.pi * math.pow(r,2)\n    print(area)\n    return area\ndef area_of_square(side):\n    '''\n    Write a function that takes in the side length of a square and returns its area.\n    '''\n    area = side * side\n    print(area)\n    return area\ndef area_of_parallelogram(a,b):\n    '''\n    Write a function that takes in the length of a parallelogram and returns its area.\n    '''\n    area = (a * b)\n    print(area)\n    return area\ndef area_of_trapezium(a,h,b):\n    '''\n    Write a function that takes in the length of a trapezium and the height of a trapezium and returns its area.\n    '''\n    area = ((a+b)/2) * h\n    print(area)\n    return area\ndef area_of_trapezium_hypotenuse(a,h,b):\n    '''\n    Write a function that takes in the length of a trapezium and the hypotenuse of a trapezium and returns its area.\n    '''\n    area = ((a+b)/2) * math.sqrt(h*h + h)\n    print(area)\n    return area\ndef area_of_rectangular_prism(a,b):\n    '''\n    Write a function that takes in the length of a rectangular prism and returns its area.\n    '''\n    area = (a * b)\n    print(area)\n    return area\ndef area_of_round_prism(r,a):\n    '''\n    Write a function that takes in the radius of a round prism and returns its area.\n    '''\n    area = (math.pi * r * math.pow(a,2))\n    print(area)\n    return area\ndef area_of_triangular_prism(a,b):\n    '''\n    Write a function that takes in the base and height of a triangular prism and returns its area.\n    '''\n    area = (1/2) * a * b\n    print(area)\n    return area\ndef area_of_circular_cylinder(r,h):\n    '''\n    Write a function that takes in the radius of a circular cylinder and the height of a circular cylinder and returns its area.\n    '''\n    area = (math.pi * math.pow(r,2)) * h\n    print(area)\n    return area\ndef area_of_irregular_cylinder(r,h,b):\n    '''\n    Write a function that takes in the radius of a cylinder and the height of a cylinder and the breath of a cylinder and returns its area.\n    '''\n    area = (math.pi * math.pow(r,2)) * (h + b)\n    print(area)\n    return area\ndef volume_of_cylinder(r,h):\n    '''\n    Write a function that takes in the radius of a cylinder and the height of a cylinder and returns its volume.\n    '''\n    volume = math.pi * math.pow(r,2) * h\n    print(volume)\n    return volume\ndef volume_of_irregular_cylinder(r,h,b):\n    '''\n    Write a function that takes in the radius of a cylinder and the height of a cylinder and the breath of a cylinder and returns its volume.\n    '''\n    volume = (math.pi * math.pow(r,2)) * (h + b)\n    print(volume)\n    return volume\ndef perimeter_of_cone(r,h):\n    '''\n    Write a function that takes in the radius of a cone and the height of a cone and returns its perimeter.\n    '''\n    perimeter = 2 * (math.pi * r) + 2 * math.pow(r,2) * h\n    print(perimeter)\n    return perimeter\ndef perimeter_of_cylinder(r,h):\n    '''\n    Write a function that takes in the radius of a cylinder and the height of a cylinder and returns its perimeter.\n    '''\n    perimeter = 2 * math.pi * r + 2 * math.pow(r,2)\n    print(perimeter)\n    return perimeter\ndef volume_of_parallelogram(a,b):\n    '''\n    Write a function that takes in the length of a parallelogram and the length of a rectangle and returns the volume of a parallelogram.\n    '''\n    volume = a * b\n    print(volume)\n    return volume\ndef volume_of_trapezium(a,b,h):\n    '''\n    Write a function that takes in the length of a trapezium and the height of a trapezium and returns the volume of a trapezium.\n    '''\n    volume = ((a + b) * h)/2\n    print(volume)\n    return volume\ndef volume_of_trapezium_hypotenuse(a,h,b):\n    '''\n    Write a function that takes in the length of a trapezium and the hypotenuse of a trapezium and returns the volume of a trapezium.\n    '''\n    volume = ((a + b) * h)/2\n    print(volume)\n    return volume\ndef volume_of_rectangular_prism(a,b):\n    '''\n    Write a function that takes in the length of a rectangular prism and returns the volume of a rectangular prism.\n    '''\n    volume = (a * b)\n    print(volume)\n    return volume\ndef volume_of_round_prism(r,a):\n    '''\n    Write a function that takes in the radius of a round prism and returns the volume of a round prism.\n    '''\n    volume = (math.pi * r * r * a)\n    print(volume)\n    return volume\ndef volume_of_triangular_prism(a,b):\n    '''\n    Write a function that takes in the base and height of a triangular prism and returns the volume of a triangular prism.\n    '''\n    volum"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    print(r,h)\n    return math.pi*r*r*h\nprint(volume_cone(2,3))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume_cone = (math.pi)*r**2*h\n    return volume_cone\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return 3.14159265359 * (r ** 2) * (h / 3)\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return math.pi * (r ** 2) * (h / 3)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r ** 3)\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return 4 * math.pi * (r ** 2)\ndef volume_cylinder(h,r):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return 2 * math.pi * (r ** 2) * h\ndef surface_area_cylinder(h,r):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2 * math.pi * r * h) + (2 * math.pi * (r ** 2))\ndef volume_pyramid(r,h):\n    '''\n    Write a function to find the volume of a pyramid.\n    '''\n    return 3 * math.pi * (r ** 2) * h\ndef surface_area_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a pyramid.\n    '''\n    return 3 * math.pi * (r ** 2) * (h / 3)\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone and sphere.\n    '''\n    return volume_cone(r,h) + volume_sphere(r)\ndef surface_area_cone_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cone and sphere.\n    '''\n    return surface_area_cone(r,h) + surface_area_sphere(r)\ndef volume_cone_cylinder(h,r):\n    '''\n    Write a function to find the volume of a cone and cylinder.\n    '''\n    return volume_cone(r,h) + volume_cylinder(h,r)\ndef surface_area_cone_cylinder(h,r):\n    '''\n    Write a function to find the surface area of a cone and cylinder.\n    '''\n    return surface_area_cone(r,h) + surface_area_cylinder(h,r)\ndef volume_cone_pyramid(r,h):\n    '''\n    Write a function to find the volume of a cone and pyramid.\n    '''\n    return volume_cone(r,h) + volume_pyramid(r,h)\ndef surface_area_cone_pyramid(h,r):\n    '''\n    Write a function to find the surface area of a cone and pyramid.\n    '''\n    return surface_area_cone(r,h) + surface_area_pyramid(r,h)\ndef volume_sphere_cylinder(r,h):\n    '''\n    Write a function to find the volume of a sphere and cylinder.\n    '''\n    return volume_sphere(r) + volume_cylinder(h,r)\ndef surface_area_sphere_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a sphere and cylinder.\n    '''\n    return surface_area_sphere(r) + surface_area_cylinder(h,r)\ndef volume_sphere_pyramid(r,h):\n    '''\n    Write a function to find the volume of a sphere and pyramid.\n    '''\n    return volume_sphere(r) + volume_pyramid(r,h)\ndef surface_area_sphere_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a sphere and pyramid.\n    '''\n    return surface_area_sphere(r) + surface_area_pyramid(r,h)\ndef volume_cone_cylinder_pyramid(r,h):\n    '''\n    Write a function to find the volume of a cone, cylinder, and pyramid.\n    '''\n    return volume_cone(r,h) + volume_cylinder(h,r) + volume_pyramid(r,h)\ndef surface_area_cone_cylinder_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a cone, cylinder, and pyramid.\n    '''\n    return surface_area_cone(r,h) + surface_area_cylinder(h,r) + surface_area_pyramid(r,h)\ndef volume_sphere_cone_cylinder_pyramid(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, cylinder, and pyramid.\n    '''\n    return volume_sphere(r) + volume_cone(r,h) + volume_cylinder(h,r) + volume_pyramid(r,h)\ndef surface_area_sphere_cone_cylinder_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a sphere, cone, cylinder, and pyramid.\n    '''\n    return surface_area_sphere(r) + surface_area_cone(r,h) + surface_area_cylinder(h,r) + surface_area_pyramid(r,h)\ndef volume_sphere_cone_cylinder_pyramid(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, cylinder, and pyramid.\n    '''\n    return volume_sphere(r) + volume_cone(r,h) + volume_cylinder(h,r) + volume_pyramid(r,h)\ndef surface_area_sphere_cone_cylinder_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a sphere, cone, cylinder, and pyramid.\n    '''\n    return surface_area_sphere(r) + surface_area_cone(r,h) + surface_area_cylinder(h,r) + surface_area_pyramid(r,h)\ndef volume_sphere_cone_cylinder_pyramid(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, cylinder, and pyramid.\n    '''\n    return volume_sphere(r) + volume_cone(r,h) + volume_cylinder(h,r) + volume_pyramid(r,h)\ndef surface_area_sphere_cone_cylinder_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a sphere, cone, cylinder, and pyramid.\n    '''\n    return surface_area_sphere(r) + surface_area_cone(r,h) + surface_area_cylinder(h,r) + surface_area_pyramid(r,h)\ndef volume_sphere_cylinder_pyramid(r,h):\n    '''\n    Write a function to find the volume of a sphere, cylinder, and pyramid.\n    '''\n    return volume_sphere(r) + volume_cylinder(h,r) + volume_pyramid(r,h)\ndef surface_area_sphere_cylinder_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a sphere, cylinder, and pyramid.\n    '''\n    return surface_area_sphere(r) + surface_area_cylinder(h,r) + surface_area_pyramid(r,h)\ndef volume_sphere_cone_pyramid(r,h):\n    '''\n    Write a function to find the volume of a sphere, cone, and pyramid.\n    '''\n    return volume_sphere(r) + volume_cone(r,h) + volume_pyramid(r,h)\ndef surface_area_sphere_cone_pyramid(r,h):\n    '''\n    Write a function to find the surface area of a sphere, cone, and pyramid.\n    '''\n    return surface_area_sphere(r) + surface_area_cone(r,h) + surface_area_pyramid(r,h)\ndef volume_cone_sphere_cylinder(r,h):\n    '''\n    Writ"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi*(r**2)*(h/3)\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    return math.pi * (r**2) * h\ndef surface_area_cone(r,h):\n    '''\n    Write a function to find the surface area of a cone.\n    '''\n    return (2 * math.pi * (r**2) + 2 * math.pi * (r**2) * h)\ndef volume_sphere(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    return (4/3) * math.pi * (r**3)\ndef surface_area_sphere(r):\n    '''\n    Write a function to find the surface area of a sphere.\n    '''\n    return (4 * math.pi * (r**2))\ndef volume_cylinder(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    return (math.pi * (r**2) * h)\ndef surface_area_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return (2 * math.pi * (r**2) * h)\ndef volume_cone_sphere(r,h):\n    '''\n    Write a function to find the volume of a cone-sphere interaction.\n    '''\n    return (volume_cone(r,h) + volume_sphere(r))\ndef surface_area_cone_sphere(r,h):\n    '''\n    Write a function to find the surface area of a cone-sphere interaction.\n    '''\n    return (surface_area_cone(r,h) + surface_area_sphere(r))\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    pi = 3.14159265\n    return pi * r**2 * h\n"
    },
    {
        "number": 312,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef volume_cone(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    # YOUR CODE GOES HERE\n    a = math.pi*(r**2)\n    b = math.pi*(r**2)*h\n    c = math.pi*r*(r+h)\n    volume = (a+b+c)/3\n    return volume\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==0:\n        return 0\n    while n & 1==0:\n        n=n>>1\n    return n\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    i=1\n    while i<=n:\n        i=i<<1\n    return i\n    \ndef search(a,low,high,k): \n    '''\n    Write a python function to find the index of the k'th largest element in a given array,\n    if k is greater than the size of array, return -1. \n    '''\n    if low>high:\n        return -1\n    if low==high:\n        if k==1:\n            return low\n        else:\n            return -1\n    mid=(low+high)//2\n    if a[mid]==k:\n        return mid\n    elif a[mid]>k:\n        return search(a,low,mid-1,k)\n    else:\n        return search(a,mid+1,high,k)\n    \ndef rotation(a,d): \n    '''\n    Write a python function to rotate an array by d elements\n    '''\n    if d==0 or d==len(a):\n        return\n    for i in range(d):\n        temp=a[0]\n        for j in range(len(a)-1):\n            a[j]=a[j+1]\n        a[len(a)-1]=temp\n        \ndef insertion_sort(a): \n    '''\n    Write a python function to sort an array in a single traversal. \n    '''\n    for i in range(1,len(a)):\n        j=i\n        while(j>0 and a[j]<a[j-1]):\n            a[j],a[j-1]=a[j-1],a[j]\n            j-=1\n            \ndef string_rotation(s,d): \n    '''\n    Write a python function to rotate a given string by d characters. \n    '''\n    if d==0 or d==len(s):\n        return\n    for i in range(d):\n        s=s[1:]+s[0]\n        \ndef convert_binary_num(num): \n    '''\n    Write a python function to convert a number to binary and return the result as a list. \n    '''\n    l=[]\n    while num>0:\n        l.append(num%2)\n        num=num//2\n    return l\n    \ndef isPalindrome(s): \n    '''\n    Write a python function to check if a string s is palindrome. \n    '''\n    l=[]\n    for i in s:\n        l.append(i)\n    if len(l)%2==0:\n        for i in range(int(len(l)/2)):\n            if l[i]!=l[len(l)-1-i]:\n                return False\n        return True\n    else:\n        for i in range(int(len(l)/2)):\n            if l[i]!=l[len(l)-1-i-1]:\n                return False\n        return True\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max = 0\n    while(2**max<=n):\n        if(2**max>=max):\n            max+=1\n    return max\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    # Time: O(log(n)) | Space: O(1)\n    i = 1\n    max_power = 1\n    while i <= n:\n        max_power = max(max_power, i)\n        i = 2 * i\n    return max_power\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    n = int(input(\"Enter the number : \"))\n    max = 1\n    if n == 0:\n        print(\"No power of 2 is needed\")\n    else:\n        while (n>=2):\n            n = n/2\n            max = max*2\n        print(max)\nhighest_Power_of_2(70)\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    high = 1\n    while high <= n:\n        high = 2 * high\n    return high\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max=0\n    while n>0:\n        max=n&-n\n        n=n&(n-1)\n        print(n,max)\n        if max==0:\n            break\n    return max\ndef checkPrime(n):\n    '''\n    Write a python function to check if a given number is prime or not.\n    '''\n    if n==2:\n        return 1\n    if n==1 or n<1:\n        return 0\n    for i in range(2,n):\n        if n%i==0:\n            return 0\n    return 1\ndef isPowerOfTwo(n):\n    '''\n    Write a python function to check if a given number is power of 2 or not.\n    '''\n    while n>0:\n        if n==2:\n            return 1\n        if n&(n-1)!=0:\n            return 0\n        n=n&(n-1)\n    return 1\ndef function6(n):\n    '''\n    Write a python function to count the number of digits in a number.\n    '''\n    count=0\n    while n>0:\n        count=count+1\n        n=n&(n-1)\n    return count\ndef swap_case(s):\n    '''\n    Write a python function to swap case of a given string.\n    '''\n    str=''\n    for i in s:\n        if i.isupper():\n            str=str+i.lower()\n        else:\n            str=str+i.upper()\n    return str\ndef find_num_of_occurrences(string, character):\n    '''\n    Write a python function to count the number of occurrences of a given character in a given string.\n    '''\n    count=0\n    for i in string:\n        if i==character:\n            count=count+1\n    return count\ndef get_sum_of_squares(a,b):\n    '''\n    Write a python function to find the sum of squares of a and b.\n    '''\n    return (a+b)*(a+b)\ndef find_sum_of_squares(a):\n    '''\n    Write a python function to find the sum of squares of all numbers in a given list.\n    '''\n    n=len(a)\n    sum=0\n    for i in range(n):\n        sum=sum+a[i]*a[i]\n    return sum\ndef split(s):\n    '''\n    Write a python function to split a given string in a list of words.\n    '''\n    str=s.split()\n    return str\ndef check_prime_divisor(n):\n    '''\n    Write a python function to check if a given number is a prime or not.\n    '''\n    prime=1\n    if n<2:\n        return 0\n    if n==2:\n        return 1\n    for i in range(2,n):\n        if n%i==0:\n            prime=0\n    return prime\ndef get_prime_factors(n):\n    '''\n    Write a python function to find prime factors of a given number.\n    '''\n    prime=[]\n    if n<2:\n        return prime\n    while n%2==0:\n        prime.append(2)\n        n=n/2\n    for i in range(3,n,2):\n        while n%i==0:\n            prime.append(i)\n            n=n/i\n    return prime\ndef get_str_char_at_pos(s,pos):\n    '''\n    Write a python function to get the characters from a given string at a given index position.\n    '''\n    if pos<0:\n        return -1\n    if pos>=len(s):\n        return -1\n    return s[pos]\ndef get_char_at_pos(s,pos):\n    '''\n    Write a python function to get the characters from a given string at a given index position.\n    '''\n    if pos<0:\n        return -1\n    if pos>=len(s):\n        return -1\n    return s[pos]\ndef max_two_numbers(x,y):\n    '''\n    Write a python function to find the largest two numbers from a given list.\n    '''\n    if x>y:\n        return x,y\n    if x==y:\n        return x,x\n    return x,x\ndef min_three_numbers(x,y,z):\n    '''\n    Write a python function to find the smallest three numbers from a given list.\n    '''\n    if x<y:\n        if y<z:\n            return x,y,z\n        else:\n            return x,z,y\n    if x==y:\n        if x<z:\n            return x,x,z\n        else:\n            return x,z,x\n    if x==z:\n        if x<y:\n            return x,x,y\n        else:\n            return x,y,x\n    if y==z:\n        if y<x:\n            return y,y,x\n        else:\n            return y,x,y\n    return x,y,z\ndef convert_to_mixed_case(s):\n    '''\n    Write a python function to convert given string into mixed case.\n    '''\n    str=''\n    for i in s:\n        if i.isupper():\n            str=str+i.lower()\n        else:\n            str=str+i.upper()\n    return str\ndef reverse(s):\n    '''\n    Write a python function to reverse the given string.\n    '''\n    str=''\n    for i in s:\n        str=i+str\n    return str\ndef isPalindrome(s):\n    '''\n    Write a python function to check if a given string is palindrome or not.\n    '''\n    str=s\n    if len(s)%2==0:\n        for i in range(0,len(s)-1):\n            if s[i]!=s[i+1]:\n                return 0\n        return 1\n    else:\n        for i in range(0,len(s)-1):\n            if s[i]!=s[i+1]:\n                return 0\n        return 1\ndef get_all_prime_numbers(n):\n    '''\n    Write a python function to find all the prime numbers in a given range.\n    '''\n    prime=[]\n    for i in range(2,n):\n        prime.append(i)\n    for i in range(2,n):\n        if i%2==0:\n            continue\n        for j in range(i,n,i):\n            if j in prime:\n                prime.remove(j)\n    return prime\ndef count_prime_numbers(n):\n    '''\n    Write a python function to find the number of prime numbers in a given range.\n    '''\n    prime=get_all_prime_numbers(n)\n    count=0\n    for i in range(2,n):\n        if i in prime:\n            count=count+1\n    return count\ndef get_nth_prime(n):\n    '''\n    Write a python function to find the nth prime number.\n    '''\n    prime=get_all_prime_numbers(n)\n    count=0\n    for i in range(2,n):\n        if i in prime:\n            count=count+1\n    return prime[n-1]\ndef get_all_even_numbers(n):\n    '''\n    Write a python function to find all even numbers in a given range.\n    '''\n    all_even=[]\n    for i in range(n):\n        if i%2==0:\n            all_even.append(i)\n    return all_even\ndef get_nth_even(n):\n    '''\n    Write a python function to find the nth even number.\n    '''\n    all_even=get_all_even_numbers(n)\n    count=0\n    for i in range(2,n):\n        if i in all_even:\n            count=count+1\n    return all_even[n-1]\ndef get_all_odd_numbers(n):\n    '''\n    Write a python function to find all odd numbers in a given range.\n    '''\n    all_od"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    max_pow = 0\n    for i in range(1,n):\n        if i <= n:\n            if n%i == 0:\n                if i > max_pow:\n                    max_pow = i\n    return max_pow\n"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n==1:\n        return 1\n    elif n==0:\n        return 0\n    elif n==0 or n==2:\n        return 2\n    else:\n        while(n!=2):\n            n-=1\n            if n==1:\n                return 1\n    return n\n    \n    \ndef secondLargestNumber(list1):\n    '''\n    Write a python function to find the second largest number in a list.\n    '''\n    if len(list1)==0:\n        return 0\n    max_num=max(list1)\n    if max_num not in list1:\n        return max_num\n    else:\n        list1.remove(max_num)\n        second_max=max(list1)\n        return second_max\n        \n    \ndef secondsLargestNumber(list1):\n    '''\n    Write a python function to find the second largest number in a list.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        if len(list1)==1:\n            return list1[0]\n        else:\n            second_max=max(list1)\n            if second_max in list1:\n                list1.remove(second_max)\n                second_max_2=max(list1)\n                return second_max_2\n            else:\n                return second_max\n    \n    \ndef product_of_numbers_in_list(list1):\n    '''\n    Write a python function to find product of all numbers in a list.\n    '''\n    sum=1\n    for i in list1:\n        sum*=i\n    return sum\n    \n    \ndef product_of_numbers_in_list_again(list1):\n    '''\n    Write a python function to find product of all numbers in a list.\n    '''\n    sum=1\n    for i in list1:\n        sum*=i\n    return sum\n    \n    \ndef product_of_elements_in_list(list1):\n    '''\n    Write a python function to find product of elements in a list.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        prod=1\n        for i in list1:\n            prod*=i\n        return prod\n    \n    \ndef product_of_elements_in_list_again(list1):\n    '''\n    Write a python function to find product of elements in a list.\n    '''\n    if len(list1)==0:\n        return 0\n    else:\n        prod=1\n        for i in list1:\n            prod*=i\n        return prod\n    \n    \ndef decimal_to_binary(decimal):\n    '''\n    Write a python function to convert decimal to binary.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        rem=decimal%2\n        decimal=decimal//2\n        binary=decimal_to_binary(decimal)\n        binary=binary+rem\n        return binary\n    \n    \ndef decimal_to_binary_again(decimal):\n    '''\n    Write a python function to convert decimal to binary.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        return decimal_to_binary_again(decimal//2)\n    \n    \ndef decimal_to_octal(decimal):\n    '''\n    Write a python function to convert decimal to octal.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        rem=decimal%8\n        decimal=decimal//8\n        octal=decimal_to_octal(decimal)\n        octal=octal+rem\n        return octal\n    \n    \ndef decimal_to_octal_again(decimal):\n    '''\n    Write a python function to convert decimal to octal.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        return decimal_to_octal_again(decimal//8)\n    \n    \ndef decimal_to_hexadecimal(decimal):\n    '''\n    Write a python function to convert decimal to hexadecimal.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        rem=decimal%16\n        decimal=decimal//16\n        hexadecimal=decimal_to_hexadecimal(decimal)\n        hexadecimal=hexadecimal+rem\n        return hexadecimal\n    \n    \ndef decimal_to_hexadecimal_again(decimal):\n    '''\n    Write a python function to convert decimal to hexadecimal.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        return decimal_to_hexadecimal_again(decimal//16)\n    \n    \ndef decimal_to_binary_again(decimal):\n    '''\n    Write a python function to convert decimal to binary.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        return decimal_to_binary_again(decimal//2)\n    \n    \ndef decimal_to_binary_again(decimal):\n    '''\n    Write a python function to convert decimal to binary.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        return decimal_to_binary_again(decimal//2)\n    \n    \ndef decimal_to_octal_again(decimal):\n    '''\n    Write a python function to convert decimal to octal.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        return decimal_to_octal_again(decimal//8)\n    \n    \ndef decimal_to_octal_again(decimal):\n    '''\n    Write a python function to convert decimal to octal.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        return decimal_to_octal_again(decimal//8)\n    \n    \ndef decimal_to_hexadecimal_again(decimal):\n    '''\n    Write a python function to convert decimal to hexadecimal.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        return decimal_to_hexadecimal_again(decimal//16)\n    \n    \ndef decimal_to_hexadecimal_again(decimal):\n    '''\n    Write a python function to convert decimal to hexadecimal.\n    '''\n    if decimal==0:\n        return 0\n    else:\n        return decimal_to_hexadecimal_again(decimal//16)\n    \n    \ndef hexadecimal_to_binary(hexadecimal):\n    '''\n    Write a python function to convert hexadecimal to binary.\n    '''\n    if hexadecimal==0:\n        return 0\n    else:\n        rem=hexadecimal%16\n        hexadecimal=hexadecimal//16\n        binary=hexadecimal_to_binary(hexadecimal)\n        binary=binary+rem\n        return binary\n    \n    \ndef hexadecimal_to_binary_again(hexadecimal):\n    '''\n    Write a python function to convert hexadecimal to binary.\n    '''\n    if hexadecimal==0:\n        return 0\n    else:\n        return hexadecimal_to_binary_again(hexadecimal//16)\n    \n    \ndef hexadecimal_to_octal(hexadecimal):\n    '''\n    Write a python function to convert hexadecimal to octal.\n    '''\n    if hexadecimal==0:\n        return 0\n    else:\n        rem=hexadecimal%8\n        hexadecimal=hexadecimal//8\n        octal=hexadecimal_to_octal(hexadecimal)\n        octal=octal+rem\n        return octal\n    \n    \ndef hexadecimal_to_octal_again(hexadecimal):\n    '''\n    Write a python function to convert hexadecimal to octal.\n    '''\n    if hexadecimal==0:\n        return 0\n    else:\n        return hexadecimal_to_octal_again(hexadecimal//8)\n    \n    \ndef he"
    },
    {
        "number": 388,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def highest_Power_of_2(n): \n    '''\n    Write a python function to find the highest power of 2 that is less than or equal to n.\n    '''\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return 2 * highest_Power_of_2(n//2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    def lucas(n,prev): \n        if n==1: \n            return prev\n        else: \n            return lucas(n-1,prev+prev)\n    return lucas(n,2)\nprint(find_lucas(3)"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n < 1:\n        return 0\n    else:\n        return lucas(n - 1) + lucas(n - 2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    total = 0\n    prev = 1\n    curr = 2\n    for i in range(n):\n        total = curr\n        curr = prev + curr\n        prev = total\n    return total\n    \n    \n    \n    # OR\n    '''\n    # CORE SOLUTION:\n    def lucas(n):\n        return lucas(n-1) + lucas(n-2)\n    return lucas(n)\n    '''\n    \n    \n    \n    # TESTS\n    \n    # Test 1: Should return 1\n    assert find_lucas(1) == 1\n    \n    # Test 2: Should return 2\n    assert find_lucas(2) == 2\n    \n    # Test 3: Should return 7\n    assert find_lucas(3) == 7\n    \n    # Test 4: Should return 29\n    assert find_lucas(4) == 29\n    \n    # Test 5: Should return 388\n    assert find_lucas(5) == 388\n    \n    # Test 6: Should return 4181\n    assert find_lucas(6) == 4181\n    \n    # Test 7: Should return 9474\n    assert find_lucas(7) == 9474\n    \n    # Test 8: Should return 28474\n    assert find_lucas(8) == 28474\n    \n    # Test 9: Should return 9474\n    assert find_lucas(9) == 9474\n    \n    # Test 10: Should return 104743\n    assert find_lucas(10) == 104743\n    \n    # Test 11: Should return 9196505509\n    assert find_lucas(11) == 9196505509\n    \n    # Test 12: Should return 5099851217\n    assert find_lucas(12) == 5099851217\n    \n    # Test 13: Should return 77240313960\n    assert find_lucas(13) == 77240313960\n    \n    # Test 14: Should return 760221929387\n    assert find_lucas(14) == 760221929387\n    \n    # Test 15: Should return 968485929375\n    assert find_lucas(15) == 968485929375\n    \n    # Test 16: Should return 7836266238849\n    assert find_lucas(16) == 7836266238849\n    \n    # Test 17: Should return 9983975925137\n    assert find_lucas(17) == 9983975925137\n    \n    # Test 18: Should return 9950736722563\n    assert find_lucas(18) == 9950736722563\n    \n    # Test 19: Should return 74592803570893\n    assert find_lucas(19) == 74592803570893\n    \n    # Test 20: Should return 939850771001339\n    assert find_lucas(20) == 939850771001339\n    \n    # Test 21: Should return 99879185301373\n    assert find_lucas(21) == 99879185301373\n    \n    # Test 22: Should return 982915573443711\n    assert find_lucas(22) == 982915573443711\n    \n    # Test 23: Should return 905352317021936\n    assert find_lucas(23) == 905352317021936\n    \n    # Test 24: Should return 969547552811695\n    assert find_lucas(24) == 969547552811695\n    \n    # Test 25: Should return 995372370294732\n    assert find_lucas(25) == 995372370294732\n    \n    # Test 26: Should return 106785370046274\n    assert find_lucas(26) == 106785370046274\n    \n    # Test 27: Should return 111872450281456\n    assert find_lucas(27) == 111872450281456\n    \n    # Test 28: Should return 985979744862729\n    assert find_lucas(28) == 985979744862729\n    \n    # Test 29: Should return 985506315582438\n    assert find_lucas(29) == 985506315582438\n    \n    # Test 30: Should return 995696313553513\n    assert find_lucas(30) == 995696313553513\n    \n    # Test 31: Should return 989409413156673\n    assert find_lucas(31) == 989409413156673\n    \n    # Test 32: Should return 1037280594491273\n    assert find_lucas(32) == 1037280594491273\n    \n    # Test 33: Should return 985471350806324\n    assert find_lucas(33) == 985471350806324\n    \n    # Test 34: Should return 988151158357932\n    assert find_lucas(34) == 988151158357932\n    \n    # Test 35: Should return 982706279315598\n    assert find_lucas(35) == 982706279315598\n    \n    # Test 36: Should return 989085607647384\n    assert find_lucas(36) == 989085607647384\n    \n    # Test 37: Should return 1002737722486623\n    assert find_lucas(37) == 1002737722486623\n    \n    # Test 38: Should return 987159826843525\n    assert find_lucas(38) == 987159826843525\n    \n    # Test 39: Should return 988277088247611\n    assert find_lucas(39) == 988277088247611\n    \n    # Test 40: Should return 995335259798827\n    assert find_lucas(40) == 995335259798827\n    \n    # Test 41: Should return 995346840173513\n    assert find_lucas(41) == 995346840173513\n    \n    # Test 42: Should return 973773677276732\n    assert find_lucas(42) == 973773677276732\n    \n    # Test 43: Should return 998440199053202\n    assert find_lucas(43) == 998440199053202\n    \n    # Test 44: Should return 990268553947328\n    assert find_lucas(44) == 990268553947328\n    \n    # Test 45: Should return 996670851480923\n    assert find_lucas(45) == 996670851480923\n    \n    # Test 46: Should return 992139841001316\n    assert find_lucas(46) == 992139841001316\n    \n    # Test 47: Should return 997451446720292\n    assert find_lucas(47) == 997451446720292\n    \n    # Test 48: Should return 998354535949963\n    assert find_lucas(48) == 998354535949963\n    \n    # Test 49: Should return 98713928999412\n    assert find_lucas(49) == 98713928999412\n    \n    # Test 50: Should return 98445313553511\n    assert find_lucas(50) == 98445313553511\n    \n    # Test 51: Should return 98713596682863\n    assert find_lucas(51) == 98713596682863\n    \n    # Test 52: Should return 992139841001316\n    assert find_lucas(52) == 992139841001316\n    \n    # Test 53: Should return 988285945808619\n    assert find_lucas(53) == 988285945808619\n    \n    # Test 54: Should return 990885181868926\n    assert find_lucas(54) == 990885181868926\n    \n    # Test 55: Should return 992139841001316\n    assert find_lucas(55) == 992139841001316\n    \n    # Test 56: Should return 985385"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 2\n    if n == 1:\n        return 1\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    return 1\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    # we can use the formula\n    # lucas[n] = lucas[n-1] + lucas[n-2]\n    # so we can just start with the first two\n    # and increase the index by 1.\n    return lucas[n-1] + lucas[n-2]\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    \n    def lucas_nth(n):\n        \n        n_lucas = 1\n        n_lucas_2 = 2\n        \n        if n == 1:\n            return n_lucas\n        if n == 2:\n            return n_lucas_2\n        \n        for i in range(1, n):\n            n_lucas = n_lucas + n_lucas_2\n            n_lucas_2 = n_lucas + n_lucas\n        \n        return n_lucas\n    \n    return lucas_nth(n)\n    \n    \nfind_lucas(2)\nfind_lucas(3)\nfind_lucas(4)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    lucas = 0\n    count = 0\n    while count < n:\n        lucas = lucas + 1\n        count = count + 1\n    return lucas\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    if n == 0:\n        return 1\n    if n == 1:\n        return 2\n    return find_lucas(n-1) + find_lucas(n-2)\n"
    },
    {
        "number": 389,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_lucas(n): \n    '''\n    Write a function to find the n'th lucas number.\n    '''\n    pass\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.append(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return list_.__format__(string)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    list_.extend(string)\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    # list_ = [\"Hi\", \"My\", \"name\", \"is\", \"John\"]\n    # string = \"{0}, {1} {2} {3} {4}\"\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    return [string.format(i) for i in list_]\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    new_list = []\n    for s in string:\n        new_list.append(s)\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    if list_ == None:\n        return False\n    if len(list_) == 0:\n        return False\n    if len(list_[0])!= len(string):\n        return False\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in list_:\n        print(string.format(i))\n"
    },
    {
        "number": 390,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_string(list_, string):\n    '''\n    Write a function to apply a given format string to all of the elements in a list.\n    '''\n    for i in range(len(list_)):\n        list_[i] = string.format(list_[i])\n    return list_\n    \nif __name__ == \"__main__\":\n    print(add_string(['Python', 'Java', 'JavaScript'], '{}, {}, {}'))\n    print(add_string(['Alex', 'Jack', 'Jill'], '{1}, {2}, {0}'))\n    print(add_string([1, 2, 3, 4], '{}'))"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {\n            'l1': l1,\n            'l2': l2,\n            'l3': l3,\n        }\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if len(l1) == 0 and len(l2) == 0 and len(l3) == 0:\n        return {}\n    elif len(l1) == 0 and len(l2) == 0 and len(l3)!= 0:\n        return l3\n    elif len(l1)!= 0 and len(l2) == 0 and len(l3) == 0:\n        return dict(zip(l1, l2))\n    elif len(l1)!= 0 and len(l2)!= 0 and len(l3) == 0:\n        return dict(zip(l1, l2))\n    else:\n        dic = {}\n        for i in range(len(l1)):\n            dic[l1[i]] = l2[i]\n        for i in range(len(l3)):\n            dic[l1[i]] = l3[i]\n        return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    for i in range(len(l1)):\n        dic1 = {l1[i]:l2[i], l3[i]:l4[i]}\n        dic.append(dic1)\n    return dic\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    \n    my_dict = {}\n    \n    for i in range(len(l1)):\n        my_dict[l1[i]] = l2[i]\n        \n    return my_dict\n    \n    \n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    result = {}\n    for i in l1:\n        result[i] = []\n    for i in range(len(l1)):\n        result[l1[i]].append(l2[i])\n    for i in result:\n        result[i] = convert_list_dictionary(result[i], l3, i)\n    return result\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    dict1 = dict(zip(l1, l2))\n    dict2 = dict(zip(l1, l3))\n    res = dict1.update(dict2)\n    return res\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    new_dict = {}\n    for i in range(len(l1)):\n        key = l1[i]\n        value = l2[i]\n        new_dict.update({key: value})\n    for i in range(len(l3)):\n        key = l3[i]\n        value = l2[i]\n        new_dict.update({key: value})\n    return new_dict\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    #convert_list_dictionary\n    \n    l1.append(l2)\n    l1.append(l3)\n    l1.append(l2)\n    l1.append(l2)\n    \n    convert_list_dictionary\n"
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    lst = []\n    for i in range(len(l1)):\n        x = l1[i]\n        y = l2[i]\n        z = l3[i]\n        lst.append({\"x\":x,\"y\":y,\"z\":z})\n    return lst\n    \nif __name__ == '__main__':\n    l1 = [\"a\", \"b\", \"c\"]\n    l2 = [\"1\", \"2\", \"3\"]\n    l3 = [\"x\", \"y\", \"z\"]\n    print(convert_list_dictionary(l1, l2, l3))\n    "
    },
    {
        "number": 391,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def convert_list_dictionary(l1, l2, l3):\n    '''\n    Write a function to convert more than one list to nested dictionary.\n    '''\n    if not l1 and not l2 and not l3:\n        return None\n    if not l1:\n        return l2\n    if not l2:\n        return l3\n    if not l3:\n        return l1\n    if not l1:\n        return l2\n    if not l2:\n        return l3\n    if not l3:\n        return l1\n    key = l1[0]\n    value = l1[1]\n    return {key:value}\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def get_max_sum_rec(n):\n        if n == 0:\n            return 0\n        else:\n            return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5), n)\n    \n    return get_max_sum_rec(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n <= 1:\n        return n\n    else:\n        return max(get_max_sum(n//2), get_max_sum(n//3), get_max_sum(n//4), get_max_sum(n//5)) + n\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return max(get_max_sum(n/2) + get_max_sum(n/3) + get_max_sum(n/4) + get_max_sum(n/5), n)\n    \n    \ndef get_max_sum_recursive (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    def get_max_sum_recursive_helper (n, total):\n        if n == 0:\n            return total\n        if n == 1:\n            return total + 1\n        return max(get_max_sum_recursive_helper(n/2, total + 1), get_max_sum_recursive_helper(n/3, total + 1), get_max_sum_recursive_helper(n/4, total + 1), get_max_sum_recursive_helper(n/5, total + 1))\n    \n    return get_max_sum_recursive_helper(n, 0)\n    \n    \ndef get_max_sum_dp (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    # dp = [[0 for i in range(5)] for j in range(n+1)]\n    dp = [[0 for i in range(n+1)] for j in range(5)]\n    \n    # for i in range(n+1):\n    #     for j in range(5):\n    #         if i == 0:\n    #             dp[i][j] = 0\n    #         elif i == 1:\n    #             dp[i][j] = 1\n    #         else:\n    #             if j == 0:\n    #                 dp[i][j] = 0\n    #             elif j == 1:\n    #                 dp[i][j] = 1\n    #             else:\n    #                 if i % 2 == 0:\n    #                     dp[i][j] = dp[i//2][j-1] + dp[i//3][j-1] + dp[i//4][j-1] + dp[i//5][j-1]\n    #                 else:\n    #                     dp[i][j] = dp[i//2][j-1] + dp[i//3][j-1] + dp[i//4][j-1] + dp[i//5][j-1] + 1\n    #                 dp[i][j] = max(dp[i][j], dp[i-1][j])\n    \n    for i in range(n+1):\n        for j in range(5):\n            if i == 0:\n                dp[i][j] = 0\n            elif i == 1:\n                dp[i][j] = 1\n            else:\n                if j == 0:\n                    dp[i][j] = 0\n                elif j == 1:\n                    dp[i][j] = 1\n                else:\n                    if i % 2 == 0:\n                        dp[i][j] = dp[i//2][j-1] + dp[i//3][j-1] + dp[i//4][j-1] + dp[i//5][j-1]\n                    else:\n                        dp[i][j] = dp[i//2][j-1] + dp[i//3][j-1] + dp[i//4][j-1] + dp[i//5][j-1] + 1\n                    dp[i][j] = max(dp[i][j], dp[i-1][j])\n    \n    return dp[n][4]\n    \n    \ndef get_max_sum_dp_helper (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    dp = [[0 for i in range(5)] for j in range(n+1)]\n    \n    for i in range(n+1):\n        for j in range(5):\n            if i == 0:\n                dp[i][j] = 0\n            elif i == 1:\n                dp[i][j] = 1\n            else:\n                if j == 0:\n                    dp[i][j] = 0\n                elif j == 1:\n                    dp[i][j] = 1\n                else:\n                    if i % 2 == 0:\n                        dp[i][j] = dp[i//2][j-1] + dp[i//3][j-1] + dp[i//4][j-1] + dp[i//5][j-1]\n                    else:\n                        dp[i][j] = dp[i//2][j-1] + dp[i//3][j-1] + dp[i//4][j-1] + dp[i//5][j-1] + 1\n                    dp[i][j] = max(dp[i][j], dp[i-1][j])\n    \n    return dp[n][4]\n    \n    \ndef get_max_sum_dp_tab (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    \n    dp = [[0 for i in range(5)] for j in range(n+1)]\n    \n    dp[0][0] = 0\n    dp[0][1] = 1\n    dp[1][0] = 0\n    dp[1][1] = 1\n    dp[2][0] = 0\n    dp[2][1] = 1\n    dp[2][2] = 1\n    dp[3][0] = 0\n    dp[3][1] = 1\n    dp[3][2] = 1\n    dp[3][3] = 1\n    dp[4][0] = 0\n    dp[4][1] = 1\n    dp[4][2] = 1\n    dp[4][3] = 1\n    dp[4][4] = 1\n    \n    for i in range(5, n+1):\n        for j in range(4):\n            if i % 2 == 0:\n                dp[i][j] = dp[i//2][j-1] + dp[i//3][j-1] + dp[i//4][j-1] + dp[i//5][j-1]\n            else:\n                dp[i][j] = dp[i//2][j-1] + dp[i//3][j-1] + dp[i//4][j-1] + dp[i//5][j-1] + 1\n            dp[i][j] = max(dp[i][j], dp[i-1][j])\n    \n    return dp[n][4]\n    \n    \ndef get_max_sum_tab (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n)."
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    def maximum_sum (n):\n        # Your code here\n        if n == 1:\n            return n\n        else:\n            return max(maximum_sum(n/2), maximum_sum(n/3), maximum_sum(n/4), maximum_sum(n/5))\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    '''\n    Time Complexity:\n        O(n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    if(n < 6):\n        return n\n    return max(get_max_sum(n/2), get_max_sum(n/3), get_max_sum(n/4), get_max_sum(n/5), n)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    \n    # base cases\n    if n == 1:\n        return 1\n    if n == 2:\n        return 4\n    if n == 3:\n        return 7\n    if n == 4:\n        return 10\n    if n == 5:\n        return 13\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    #brute force solution \n    ans = 0\n    def fibo(n):\n        if n == 0 or n == 1:\n            return 1\n        return fibo(n-1) + fibo(n-2)\n    def recurse(n):\n        if n <= 1:\n            return n\n        else:\n            return max(fibo(n//3) + fibo(n//2), n)\n    for i in range(n):\n        ans = max(recurse(i), ans)\n    print(ans)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(n)\n    max_sum = 0\n    max_sum = max_sum if max_sum > (get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)) else get_max_sum(n//2) + get_max_sum(n//3) + get_max_sum(n//4) + get_max_sum(n//5)\n"
    },
    {
        "number": 392,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_max_sum (n):\n    '''\n    Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).\n    '''\n    n = int(input())\n    if n == 1:\n        return n\n    m = n / 2\n    k = n / 3\n    l = n / 4\n    b = n / 5\n    return max(f(m), f(k), f(l), f(b))\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = -1\n    max_len_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > max_len:\n            max_len = len(input_list[i])\n            max_len_list.clear()\n            max_len_list.append(input_list[i])\n        elif len(input_list[i]) == max_len:\n            max_len_list.append(input_list[i])\n    return max_len_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    assert type(input_list) == list\n    assert all(type(x) == int for x in input_list)\n    length_list = len(input_list)\n    max_length = -1\n    max_index = None\n    for i in range(length_list):\n        if len(input_list[i]) > max_length:\n            max_length = len(input_list[i])\n            max_index = i\n    return input_list[max_index]\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in input_list:\n        if len(i) > max_length:\n            max_length = len(i)\n    print(max_length)\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    # using the max() function to find the maximum length of the list.\n    max_length = max(len(input_list), len(input_list[0]))\n    # creating a new empty list\n    max_list = []\n    # Appending the values to the list in the same order as the input list.\n    for i in range(max_length):\n        max_list.append(input_list[0][i])\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = 0\n    for i in range(len(input_list)):\n        if max_length < len(input_list[i]):\n            max_length = len(input_list[i])\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max = 0\n    for i in input_list:\n        if len(i) > max:\n            max = len(i)\n    return max\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    length = 0\n    longest_list = []\n    for i in range(len(input_list)):\n        if len(input_list[i]) > length:\n            length = len(input_list[i])\n            longest_list = input_list[i]\n    return longest_list\n    \nprint(max_length_list([[3, 5, 6], [2, 6, 6], [4, 5]]))\nprint(max_length_list([[2, 2], [3, 5, 5], [2, 6], [2, 4, 5]]))\nprint(max_length_list([[5, 4, 3, 2], [2, 6, 4, 2], [2, 4, 3, 6]]))\nprint(max_length_list([[6, 6, 6], [4, 4, 4], [2, 2, 2]]))\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    if input_list == []:\n        return None\n    max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n            max_list = i\n    return max_list\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_length = -1\n    for item in input_list:\n        if len(item) > max_length:\n            max_length = len(item)\n    return max_length\n"
    },
    {
        "number": 393,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_length_list(input_list):\n    '''\n    Write a function to find the list with maximum length.\n    '''\n    max_len = -1\n    temp_max_len = 0\n    for i in input_list:\n        if len(i) > max_len:\n            max_len = len(i)\n    for i in input_list:\n        if len(i) == max_len:\n            temp_max_len += 1\n    return temp_max_len\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_tup = set(test_tup)\n    if len(test_tup) == len(test_tup):\n        print(\"There are no duplicates in the tuple\")\n    else:\n        print(\"There are duplicates in the tuple\")\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    return len(test_tup) == len(set(test_tup))\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    l_tup = list(test_tup)\n    for x in l_tup:\n        if l_tup.count(x) > 1:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    # return not any(test_tup)\n    # temp = set(test_tup)\n    # if len(temp) == len(test_tup):\n    #     return True\n    # else:\n    #     return False\n    for i in range(len(test_tup)):\n        for j in range(i+1, len(test_tup)):\n            if test_tup[i] == test_tup[j]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(test_tup) < len(set(test_tup)):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    tup_dict = {}\n    for i in test_tup:\n        if i in tup_dict:\n            print(\"tup_dict already has {0}\".format(i))\n            return False\n        else:\n            tup_dict[i] = i\n    print(tup_dict)\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    test_list = list(test_tup)\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j]:\n                return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    lst = []\n    for i in range(len(test_tup)):\n        if test_tup[i] not in lst:\n            lst.append(test_tup[i])\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    data = []\n    for val in test_tup:\n        if val not in data:\n            data.append(val)\n    return len(data) == len(test_tup)\n"
    },
    {
        "number": 394,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_distinct(test_tup):\n    '''\n    Write a function to check if given tuple contains no duplicates.\n    '''\n    if len(set(test_tup)) == len(test_tup):\n        print('Yes, there are no duplicate elements')\n    else:\n        print('No, there are duplicate elements')\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # str1 = 'abdabda'\n    # str1 = 'abcdefghi'\n    # str1 = 'abcdeeefg'\n    # str1 = 'aabbccdddddddddd'\n    # str1 = 'aabcdddd'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'aabbccddddddddddddd'\n    # str1 = 'aaaabbbbcc'\n    # str1 = 'aaaabbbbccdd'\n    # str1 = 'aaaabbbbccdddd'\n    # str1 = 'aaaabbbbccddddddddd'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str1 = 'abcdeeefghi'\n    # str"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    #using dictionary as hash map\n    #char_dict = {}\n    #for char in str1:\n    #    if char not in char_dict:\n    #        char_dict[char] = 1\n    #    else:\n    #        char_dict[char] += 1\n    #for key in char_dict:\n    #    if char_dict[key] == 1:\n    #        return key\n    #return '#'\n    #using dictionary as hash map\n    char_dict = {}\n    for char in str1:\n        if char not in char_dict:\n            char_dict[char] = 1\n        else:\n            char_dict[char] += 1\n    for key in char_dict:\n        if char_dict[key] == 1:\n            return key\n    return '#'\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    from collections import defaultdict\n    d = defaultdict(int)\n    for i in str1:\n        d[i] += 1\n    for i in str1:\n        if d[i] == 1:\n            return i\n        else:\n            d[i] -= 1\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    non_repeated = ''\n    for i in str1:\n        if str1.count(i) == 1:\n            non_repeated = i\n            break\n    return non_repeated\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    # l = str1.split()\n    # d = {}\n    # for i in l:\n    #     if i in d:\n    #         d[i] += 1\n    #     else:\n    #         d[i] = 1\n    # for i in d:\n    #     if d[i] == 1:\n    #         return i\n    \n    # Method 2 - using collections.Counter\n    \n    from collections import Counter\n    return Counter(str1).most_common(1)[0][0]\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    string = str1\n    c = str1[0]\n    for i in range(len(str1)):\n        if str1[i]!= c:\n            c = str1[i]\n            break\n    return c\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    list1 = list(str1)\n    for i in range(0, len(list1)):\n        if list1.count(list1[i]) == 1:\n            return list1[i]\n    return \"No such character in this string.\"\n    \ndef last_index_of_an_element(str1, element):\n    '''\n    Write a python function to find the last index of an element in a given string.\n    '''\n    list1 = list(str1)\n    for i in range(0, len(list1)):\n        if list1[i] == element:\n            return i\n    return -1\n    \ndef string_with_repetition(str1):\n    '''\n    Write a python function to find the length of the longest substring which has all characters\n    of same repetition.\n    '''\n    list1 = list(str1)\n    max_length = 0\n    for i in range(0, len(list1)):\n        if list1.count(list1[i]) >= 2:\n            max_length = max(max_length, list1.count(list1[i]))\n            \n    return max_length\n    \ndef length_of_string(str1):\n    '''\n    Write a python function to find the length of the given string.\n    '''\n    return len(str1)\n    \ndef length_of_string_with_spaces(str1):\n    '''\n    Write a python function to find the length of the given string.\n    '''\n    return len(str1.strip())\n    \ndef length_of_string_with_special_characters(str1):\n    '''\n    Write a python function to find the length of the given string.\n    '''\n    list1 = list(str1)\n    return len(list1)\n    \ndef largest_substring_with_k_distinct_characters(str1, k):\n    '''\n    Write a python function to find the largest substring with at least k distinct characters.\n    '''\n    list1 = list(str1)\n    max_length = 0\n    for i in range(0, len(list1)):\n        if list1.count(list1[i]) >= k:\n            max_length = max(max_length, len(list1[i:]))\n            \n    return max_length\n    \ndef string_with_spaces(str1):\n    '''\n    Write a python function to find the length of the given string.\n    '''\n    return str1.strip()\n    \ndef count_distinct_characters(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n            \n    return len(list2)\n    \ndef count_distinct_characters_with_special_characters(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i].isalpha() == False:\n            list2.append(list1[i])\n        \n    return len(list2)\n    \ndef count_distinct_characters_with_special_characters_using_dict(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    dict1 = {}\n    for i in range(0, len(list1)):\n        if list1[i].isalpha() == False:\n            dict1[list1[i]] = dict1.get(list1[i], 0) + 1\n            \n    return len(dict1.keys())\n    \ndef count_distinct_characters_with_spaces(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n            \n    return len(list2)\n    \ndef count_distinct_characters_with_spaces_using_list(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n            \n    return len(list2)\n    \ndef count_distinct_characters_with_spaces_using_dict(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    dict1 = {}\n    for i in range(0, len(list1)):\n        if list1[i] not in dict1:\n            dict1[list1[i]] = 1\n        else:\n            dict1[list1[i]] += 1\n            \n    return len(dict1.keys())\n    \ndef count_distinct_characters_with_spaces_using_set(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n            \n    return len(set(list2))\n    \ndef count_distinct_characters_with_spaces_using_set_comprehension(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    list2 = set(list1)\n    \n    return len(list2)\n    \ndef count_distinct_characters_with_spaces_using_list_comprehension(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n            \n    return len(list2)\n    \ndef count_distinct_characters_with_spaces_using_set_comprehension(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    list2 = set(list1)\n    \n    return len(list2)\n    \ndef count_distinct_characters_with_spaces_using_set_comprehension_list_comprehension(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    list2 = []\n    for i in range(0, len(list1)):\n        if list1[i] not in list2:\n            list2.append(list1[i])\n            \n    return len(list2)\n    \ndef count_distinct_characters_with_spaces_using_set_comprehension_list_comprehension_comprehension(str1):\n    '''\n    Write a python function to find the count of distinct characters in a given string.\n    '''\n    list1 = list(str1)\n    list2 = set(list1)\n    list3 = []\n    for i in range(0, len(list1)):\n        if list1[i] not in list3:\n            list3.append(list1[i])\n            \n    return len(list3)\n    "
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    n = len(str1)\n    if n == 0:\n        return -1\n    for i in range(n):\n        temp = str1[i]\n        if str1.count(temp) == 1:\n            return temp\n    return -1\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    \n    #Iterate over each character in the string.\n    for i in range(len(str1)):\n        \n        # Check if character is not already a repeated character.\n        if str1.count(str1[i]) == 1:\n            \n            # Return the first character encountered, i.e. if str1[i] is unique, i.e. only one occurence\n            return str1[i]\n        \n    #If all characters are repeated, return a blank string.\n    return ''\n"
    },
    {
        "number": 395,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_non_repeating_character(str1):\n    '''\n    Write a python function to find the first non-repeated character in a given string.\n    '''\n    for i in range(len(str1)):\n        if str1.count(str1[i])==1:\n            return str1[i]\n    return None\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if string.startswith('a') and string.endswith('a'):\n        print('String started with the character and ended with the character')\n    else:\n        print('String started with the character and ended with the character')\ndef check_one_at_a_time(string):\n    '''\n    Write a program which can convert a string into a list of words. The words in the list should be separated by a single space.\n    '''\n    words = string.split()\n    print(words)\n    return words\ndef check_number_of_spaces(string):\n    '''\n    Write a program which can count the number of spaces between two words.\n    '''\n    words = string.split()\n    spaces = 0\n    for i in range(len(words)-1):\n        if words[i] == '' and words[i+1]!= '':\n            spaces += 1\n    return spaces\ndef check_number_of_characters(string):\n    '''\n    Write a program which can count the number of characters in a string.\n    '''\n    words = string.split()\n    count = 0\n    for i in range(len(words)-1):\n        count += len(words[i])\n    return count\ndef check_match(string):\n    '''\n    Write a program which can count the number of words in a string.\n    '''\n    words = string.split()\n    count = 0\n    for i in range(len(words)-1):\n        if words[i] == words[i+1]:\n            count += 1\n    return count\ndef check_ascii_code(string):\n    '''\n    Write a program to count the number of ascii characters in a string.\n    '''\n    count = 0\n    for i in string:\n        if ord(i) < 128:\n            count += 1\n    return count\ndef check_capitalized_words(string):\n    '''\n    Write a program to check whether a given string is in title case or not.\n    '''\n    if len(string) < 1:\n        return False\n    string = string.upper()\n    words = string.split()\n    capitalized = 0\n    for word in words:\n        if word[0].isupper():\n            capitalized += 1\n    if capitalized == len(words):\n        print('String is capitalized')\n    else:\n        print('String is not capitalized')\ndef check_roman_numerals(string):\n    '''\n    Write a program to check whether a given string is a roman numeral or not.\n    '''\n    if len(string) < 1:\n        return False\n    roman_dict = {'I':1, 'V':5, 'X':10, 'L':50, 'C':100, 'D':500, 'M':1000}\n    roman_numerals = ['I', 'V', 'X', 'L', 'C', 'D', 'M']\n    for char in string:\n        if char in roman_numerals:\n            if roman_dict[char] >= roman_dict[string[roman_numerals.index(char) - 1]]:\n                continue\n            else:\n                return False\n    return True\ndef check_strong_password(string):\n    '''\n    Write a program to count number of digits, uppercase characters and lowercase characters in a password.\n    '''\n    # count_digits = 0\n    # count_uppercase = 0\n    # count_lowercase = 0\n    # for i in range(len(string)):\n    #     if string[i].isdigit():\n    #         count_digits += 1\n    #     elif string[i].isupper():\n    #         count_uppercase += 1\n    #     elif string[i].islower():\n    #         count_lowercase += 1\n    # print(count_digits, count_uppercase, count_lowercase)\n    count_digits = 0\n    count_lowercase = 0\n    count_uppercase = 0\n    for char in string:\n        if char.isdigit():\n            count_digits += 1\n        elif char.islower():\n            count_lowercase += 1\n        elif char.isupper():\n            count_uppercase += 1\n    print(count_digits, count_uppercase, count_lowercase)\ndef check_characters(string):\n    '''\n    Write a program to check whether a given string contains only a certain set of characters.\n    '''\n    characters = {'a','e','i','o','u'}\n    if characters.issubset(set(string)):\n        print('String contains only letters')\n    else:\n        print('String does not contain letters')\ndef check_missing_characters(string):\n    '''\n    Write a program to find the first appearance of the substring 'not' and 'poor' from a given string, if 'not' follows the 'poor', then replace the whole 'not'...'poor' substring with 'good'. Return the resulting string.\n    '''\n    # string = 'The lyrics is not that poor!'\n    # print(string)\n    not_index = string.find('not')\n    poor_index = string.find('poor')\n    if not_index!= -1 and poor_index > not_index:\n        new_string = string[:not_index] + 'good' + string[poor_index+3:]\n        return new_string\n    else:\n        return string\ndef check_pattern(string):\n    '''\n    Write a program to check whether a given string contains the specified sequence of characters.\n    '''\n    # pattern = {'ab','bc'}\n    # if pattern.issubset(set(string)):\n    #     print('String contains the pattern')\n    # else:\n    #     print('String does not contain the pattern')\n    # print(string)\n    pattern = {'ab','bc'}\n    if pattern.issubset(set(string)):\n        print('String contains the pattern')\n    else:\n        print('String does not contain the pattern')\ndef check_pattern_2(string):\n    '''\n    Write a program to check whether a given string contains only upper case letters.\n    '''\n    pattern = re.compile('[a-zA-Z]')\n    if pattern.search(string):\n        print('String contains only upper case letters')\n    else:\n        print('String does not contain only upper case letters')\ndef check_password(string):\n    '''\n    Write a program to check whether the password is strong or not.\n    Strong password is defined as:\n    At least 8 characters long\n    At least one digit\n    At least one lowercase letter\n    At least one uppercase letter\n    At least one special character (symbol).\n    '''\n    if len(string) >= 8:\n        if re.match('[0-9]', string):\n            if re.match('[A-Z]', string):\n                if re.match('[a-z]', string):\n                    if re.match('[!@#$%^&*()_+=\\{\\}\\[\\]\\\\|;:\\'\",<.>/?]', string):\n                        print('Strong password')\n                    else:\n                        print('Not strong password')\n                else:\n                    print('Not strong password')\n            else:\n                print('Not strong password')\n        else:\n            print('Not strong password')\n    else:\n        print('Not strong password')\ndef check_vowels(string):\n    '''\n    Write a program to find the first vowel in a given string, if the given string contains an even number of vowels, return \"even\"\n    if the given string contains an odd number of vowels, return \"odd\"\n    '''\n    # vowel_count = 0\n    # if string.isalpha():\n    #     for i in range(len(string)):\n    #         if string[i] == 'a' or string[i] == 'e' or string[i] == 'i' or string[i] == 'o' or string[i] == 'u':\n    #             vowel_count += 1\n    #     if vowel_count % 2 == 0:\n    #         print('even')\n    "
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    \n    if len(string) >= 1 and len(string) <= 10:\n        if re.match(regex, string):\n            return True\n        else:\n            return False\n    else:\n        return False\n        \n    \nprint(check_char(\"mango\"))\nprint(check_char(\"BANANA\"))\nprint(check_char(\"BANANA\"))\nprint(check_char(\"BANANANBANAN\"))\nprint(check_char(\"BANANANBANANABANAN\"))\nprint(check_char(\"BANANABANANABANANBANAN\"))\nprint(check_char(\"BANANABANANABANANBANANBANAN\"))\nprint(check_char(\"BANANABANANABANANBANANBANANABANANBANAN\"))\nprint(check_char(\"BANANABANANABANANBANANBANANABANANBANANABANAN\"))\nprint(check_char
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if(string[0] == string[-1]):\n        return True\n    else:\n        return False\ndef check_pos(string):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    if(string == string[::-1]):\n        return True\n    else:\n        return False\ndef solve_equation(equation):\n    '''\n    Write a function to solve the given equation.\n    '''\n    equation = equation.replace(' ','')\n    split_equation = equation.split('=')\n    n = len(split_equation)\n    if(n==1):\n        return equation.replace('=','+')\n    else:\n        first_equation = split_equation[0]\n        second_equation = split_equation[1]\n        first_equation = first_equation.replace('+','*')\n        second_equation = second_equation.replace('-','*')\n        second_equation = second_equation.replace('*','-')\n        second_equation = second_equation.replace('+','-')\n        second_equation = second_equation.replace('*','+')\n        second_equation = second_equation.replace('/','*')\n        second_equation = second_equation.replace('*','/')\n        second_equation = second_equation.replace('-','/')\n        second_equation = second_equation.replace('/','-')\n        second_equation = second_equation.replace('-','+')\n        second_equation = second_equation.replace('/','*')\n        second_equation = second_equation.replace('*','+')\n        second_equation = second_equation.replace('+','*')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('+','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('*','-')\n        second_equation = second_equation.replace('=','-')\n        second_equation = second_equation.replace('+','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('/','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('+','-')\n        second_equation = second_equation.replace('*','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('(','-')\n        second_equation = second_equation.replace(')','-')\n        second_equation = second_equation.replace('*','-')\n        second_equation = second_equation.replace('/','-')\n        second_equation = second_equation.replace('*','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-','-')\n        second_equation = second_equation.replace('-'"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    flag = 0\n    if len(string)<=0:\n        print('No string to check')\n    elif string[0]==string[-1]:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return bool(re.match(regex,string))\nprint(check_char('a'))\nprint(check_char('aa'))\nprint(check_char('ba'))\nprint(check_char('baa'))\nprint(check_char('abc'))\nprint(check_char('abcdefghi'))\nprint(check_char('abcd'))\nprint(check_char('abcd'))\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return re.match(regex, string) \n    \ndef check_string(string): \n    '''\n    Write a function to check whether the given string contains only alphabets. \n    '''\n    if re.match(regex, string): \n        return True\n    return False\n    \ndef check_symbols(string): \n    '''\n    Write a function to check whether the given string contains any special symbols. \n    '''\n    return len(re.findall(r'[@_!#$%^&*()<>?/\\|}{~:;]', string)) == 0\n    \ndef check_between(string, min, max): \n    '''\n    Write a function to check whether the given string is between given min and max characters. \n    '''\n    return len(string) >= min and len(string) <= max\n    \ndef check_unique(string): \n    '''\n    Write a function to check whether the given string contains only unique characters or not. \n    '''\n    s = set(string)\n    if len(s) == len(string): \n        return False\n    return True\n    \ndef is_unique_str(string): \n    '''\n    Write a function to check whether the given string contains only unique characters or not. \n    '''\n    if len(string)!= len(set(string)): \n        return False\n    return True\n    \ndef check_regex(string): \n    '''\n    Write a function to check whether the given string is matched or not. \n    '''\n    if re.match(regex, string): \n        return True\n    return False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    a = re.match(regex,string)\n    if a:\n        print('YES')\n    else:\n        print('NO')\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    return True if re.match(regex, string) else False\n"
    },
    {
        "number": 396,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re  \nregex = r'^[a-z]$|^([a-z]).*\\1$'\ndef check_char(string): \n    '''\n    Write a function to check whether the given string starts and ends with the same character or not.\n    '''\n    if (len(string) >= 1) and (string[0] == string[-1]):\n        return True\n    else:\n        return False\n    "
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    sorted_list = sorted([a,b,c])\n    if(sorted_list[1] == sorted_list[0] or sorted_list[2] == sorted_list[1]):\n        return sorted_list[0]\n    elif(sorted_list[0] == sorted_list[1] or sorted_list[2] == sorted_list[0]):\n        return sorted_list[1]\n    else:\n        return (sorted_list[1] + sorted_list[2]) / 2\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    a,b,c = sorted([a,b,c])\n    return (a+b+c-min(a,b,c)-max(a,b,c))/2\n    \ndef sum_numbers(a,b,c):\n    '''\n    Write a function to find the sum of three numbers.\n    '''\n    return a+b+c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    return (sorted([a,b,c])[1])\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a>b:\n        if a>c:\n            return a\n        else:\n            return c\n    else:\n        if b>c:\n            return b\n        else:\n            return c\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a <= b and a <= c:\n        if b <= c:\n            return b\n        else:\n            return c\n    else:\n        if a <= c:\n            return a\n        else:\n            return c\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list = [a,b,c]\n    list.sort()\n    if len(list) % 2 == 0:\n        median = (list[len(list)//2 - 1] + list[len(list)//2])/2\n    else:\n        median = list[len(list)//2]\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    numbers = [a, b, c]\n    numbers.sort()\n    if numbers[1] == numbers[0] and numbers[2] == numbers[1]:\n        print('Invalid Input')\n    else:\n        return numbers[1]\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    median = (a+b+c) / 2\n    return median\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    if a<=b and b<=c:\n        if a<b:\n            return b\n        else:\n            return a\n    if a<b and b>c:\n        return c\n    if b<a and a<c:\n        return a\n    if b<c and c<a:\n        return c\n    if c<a and a<b:\n        return a\n    return b\n"
    },
    {
        "number": 397,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_numbers(a,b,c):\n    '''\n    Write a function to find the median of three numbers.\n    '''\n    list_of_numbers=[a,b,c]\n    list_of_numbers.sort()\n    print(list_of_numbers[1])\n    print(list_of_numbers[2])\n    print(list_of_numbers[1] + list_of_numbers[2])\n    print(list_of_numbers[1] + list_of_numbers[2] + list_of_numbers[3])\n    return list_of_numbers[1] + list_of_numbers[2] + list_of_numbers[3]\n    \nmedian_numbers(1,2,3)"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum([int(d) for d in str(nums)])\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum = 0\n    for i in range(len(nums)):\n        sum += nums[i]%10\n    return sum\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s = s + math.floor(i)\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_of_digits = []\n    for num in nums:\n        sum_of_digits.append(sum_of_digit(num))\n    return sum_of_digits\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    s = 0\n    for i in nums:\n        s += (i % 10)\n    return s\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    sum_nums = 0\n    for num in nums:\n        sum_nums = sum_nums + len(str(num))\n    return sum_nums\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(map(int,map(str,nums)))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    result = 0\n    for num in nums:\n        result += num % 10\n    return result\n    "
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    return sum(int(digit) for digit in str(nums))\n"
    },
    {
        "number": 398,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_of_digits(nums):\n    '''\n    Write a function to compute the sum of digits of each number of a given list.\n    '''\n    numbers = 0\n    for i in range(len(nums)):\n        numbers += nums[i]\n    return numbers\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    \n    test_tup1_bit_array = []\n    test_tup2_bit_array = []\n    \n    for i in range(len(test_tup1)):\n        bit_str1 = bin(test_tup1[i])\n        bit_str2 = bin(test_tup2[i])\n        \n        test_tup1_bit_array.append(bit_str1[2:])\n        test_tup2_bit_array.append(bit_str2[2:])\n    \n    return ((int(test_tup1_bit_array[0], 2) ^ int(test_tup2_bit_array[0], 2)), (int(test_tup1_bit_array[1], 2) ^ int(test_tup2_bit_array[1], 2)),\n    (int(test_tup1_bit_array[2], 2) ^ int(test_tup2_bit_array[2], 2)), (int(test_tup1_bit_array[3], 2) ^ int(test_tup2_bit_array[3], 2)),\n    (int(test_tup1_bit_array[4], 2) ^ int(test_tup2_bit_array[4], 2)))\n    \n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (test_tup1[0] ^ test_tup2[0], test_tup1[1] ^ test_tup2[1])\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    a, b = test_tup1\n    c, d = test_tup2\n    return (a ^ b, c ^ d)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_tup = ()\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            xor_tup += (1,)\n        else:\n            xor_tup += (0,)\n    return xor_tup\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    result = ()\n    for i in range(len(test_tup1)):\n        result += ((test_tup1[i] ^ test_tup2[i]),)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    x, y = test_tup1\n    z, w = test_tup2\n    return (x ^ y, z ^ w)\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    xor_list = []\n    for i in range(len(test_tup1)):\n        xor_list.append(int(test_tup1[i]) ^ int(test_tup2[i]))\n    return xor_list\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    return (int(x)^int(y) for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    first_bit = ''\n    second_bit = ''\n    result = ()\n    if test_tup1[0]!= test_tup2[0]:\n        first_bit = test_tup1[0]\n        second_bit = test_tup2[0]\n        for num1, num2 in zip(test_tup1[1], test_tup2[1]):\n            if num1!= num2:\n                result = test_tup1[1] + test_tup2[1]\n    elif test_tup1[0] == test_tup2[0]:\n        first_bit = test_tup1[0]\n        second_bit = test_tup2[0]\n        for num1, num2 in zip(test_tup1[1], test_tup2[1]):\n            if num1!= num2:\n                result = test_tup1[1] + test_tup2[1]\n    print('Bitwise XOR Operation: ', result)\n    print('first bit: ', first_bit, ', second_bit: ', second_bit)\n    return result\n"
    },
    {
        "number": 399,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function to perform the mathematical bitwise xor operation across the given tuples.\n    '''\n    bitwise_xor_tup = ()\n    for i in range(len(test_tup1)):\n        bitwise_xor_tup += (test_tup1[i] ^ test_tup2[i], )\n    return bitwise_xor_tup\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # Your code here\n    return len(set(tuple(i) for i in test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    \n    # Sorting the list to remove duplicates and finding the number of items in the list\n    test_list.sort()\n    num_items = len(test_list)\n    \n    # Creating a counter for the number of items in the list\n    count = 0\n    \n    # Iterating over the list\n    for i in range(num_items-1):\n        \n        # Setting the current and previous values\n        current = test_list[i]\n        prev = test_list[i+1]\n        \n        # Checking if the current value is equal to the previous value\n        if current == prev:\n            \n            # Incrementing the counter by 1\n            count += 1\n        \n        else:\n            \n            # Storing the count\n            count_list.append(count)\n            \n            # Setting the current value to the previous value\n            current = prev\n            \n            # Incrementing the counter by 1\n            count = 1\n            \n        # Storing the current value to the next value\n        prev = current\n        \n    # Storing the count of the last item\n    count_list.append(count)\n    \n    # Returning the list of counts\n    return count_list\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    # return len(set(test_list))\n    \n    # without using set\n    return len(test_list)\n    \n    \ndef extract_freq_new(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(test_list)\n    \n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = set(tuple(l) for l in test_list)\n    return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    unique_list = []\n    for i in range(len(test_list)):\n        if test_list[i] in unique_list:\n            continue\n        else:\n            unique_list.append(test_list[i])\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    freq = {}\n    for i in test_list:\n        if i in freq.keys():\n            freq[i] = freq[i] + 1\n        else:\n            freq[i] = 1\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    if not test_list:\n        return 0\n    else:\n        freq = {}\n        for item in test_list:\n            if item in freq:\n                freq[item] += 1\n            else:\n                freq[item] = 1\n        return len(freq)\n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    count = 0\n    freq = {}\n    for i in test_list:\n        if i in freq:\n            freq[i] += 1\n        else:\n            freq[i] = 1\n    for i in freq.values():\n        count += i\n    return count\n    \n"
    },
    {
        "number": 400,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_freq(test_list):\n    '''\n    Write a function to extract the number of unique tuples in the given list.\n    '''\n    return len(set(tuple(test_list)))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    \n    return list(zip(zip(*test_tup1), zip(*test_tup2)))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    list1 = []\n    list2 = []\n    if len(test_tup1) > len(test_tup2):\n        for i in range(len(test_tup2)):\n            list1.append(test_tup1[i])\n            list2.append(test_tup2[i])\n        for i in range(len(test_tup1), len(test_tup1) + len(test_tup2)):\n            list1.append(test_tup2[i])\n    else:\n        for i in range(len(test_tup1)):\n            list1.append(test_tup1[i])\n            list2.append(test_tup2[i])\n        for i in range(len(test_tup1), len(test_tup1) + len(test_tup2)):\n            list1.append(test_tup1[i])\n    return tuple(list1)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append((test_tup1[i] + test_tup2[i],))\n    return new_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    new_tup = []\n    for i in range(len(test_tup1)):\n        new_tup.append(test_tup1[i]+test_tup2[i])\n    print(new_tup)\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    res_tup = []\n    for i in range(len(test_tup1)):\n        res_tup.append(tuple([a + b for a, b in zip(test_tup1[i], test_tup2[i])]))\n    return res_tup\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(a+b for a,b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(x + y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(sum(x) for x in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(tup1 + tup2 for tup1, tup2 in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 401,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_nested_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise addition of tuple elements in the given two nested tuples.\n    '''\n    return tuple(a+b for a, b in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return min(a,b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    return a if a<b else b\n    \n    \nminimum(2,3)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        print(a)\n    else:\n        print(b)\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(1,2)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(1,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        print(a, \"is smaller than\", b)\n    else:\n        print(b, \"is smaller than\", a)\nminimum(2,3)\nprint(\"-------------------------------------------------------------------\")\ndef minimum(a,b):   \n    '''\n    Write a python function to find the minimum o"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    min = a\n    if (a>b):\n        min = b\n    return min\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a>b:\n        return b\n    else:\n        return a\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a < b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 404,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def minimum(a,b):   \n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if a<b:\n        return a\n    else:\n        return b\nprint(minimum(12,4))\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    for x in tuplex:\n        if x == tuple1:\n            return 1\n    return 0\n    \n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuple1 in tuplex):\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    return True if tuple1 in tuplex else False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    count=0\n    for x in tuplex:\n        if x in tuple1:\n            count+=1\n    if count==len(tuplex):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex == tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if (tuplex in tuple1):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    #1st method \n    if tuplex in tuple1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuplex.index(tuple1)!= -1:\n        print(\"Element Found\")\n    else:\n        print(\"Element Not Found\")\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    flag = False\n    if tuplex:\n        for t in tuplex:\n            if t == tuple1:\n                flag = True\n        return flag\n    return flag\n"
    },
    {
        "number": 405,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_tuplex(tuplex,tuple1): \n    '''\n    Write a function to check whether an element exists within a tuple.\n    '''\n    if tuple1 in tuplex:\n        return True\n    else:\n        return False\n    \ntuplex = (1,2,3,4,5)\ntuple1 = (1,2,4)\nresult = check_tuplex(tuplex,tuple1)\nprint(result)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    if x % 2 == 0:\n        return x\n    else:\n        return x + 1\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x % 2\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x%2\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x % 2) \n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    #  your code here\n    return (x&1)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    # If the given number is odd\n    if x % 2 == 0:\n        print(\"The given number is even.\")\n    else:\n        print(\"The given number is odd.\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    parity = 0\n    while x > 0: \n        parity = parity ^ x % 10\n        x = x // 10\n    if parity % 2 == 0:\n        print(\"Parity is 0\")\n    else:\n        print(\"Parity is 1\")\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return (x%2)\n"
    },
    {
        "number": 406,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Parity(x): \n    '''\n    Write a python function to find whether the parity of a given number is odd.\n    '''\n    return x&1\n    \nprint(find_Parity(9))\nprint(find_Parity(11))\nprint(find_Parity(15))\nprint(find_Parity(0))\nprint(find_Parity(2))\nprint(find_Parity(4))\nprint(find_Parity(8))\nprint(find_Parity(10))\nprint(find_Parity(26))\nprint(find_Parity(30))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        b = list(str(n))\n        biggest = 0\n        for i in range(1, len(b)):\n            if int(b[i]) > biggest:\n                biggest = int(b[i])\n        \n        for i in range(len(b)-1, 0, -1):\n            if int(b[i]) < biggest:\n                b[i], b[0] = b[0], b[i]\n                break\n        \n        return int(''.join(b))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = list(str(n))\n    n_new = int(digits[0])\n    for i in range(1, len(digits)):\n        if int(digits[i]) > n_new:\n            n_new = int(digits[i])\n    return n_new\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # one-liner\n    # return \"\".join(sorted(str(n), reverse=True))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    #n = int(n)\n    n = str(n)\n    #print(n)\n    temp = n[-1]\n    #print(temp)\n    new_n = n[:-1]\n    #print(new_n)\n    l = len(new_n)\n    while l > 0:\n        new_n = new_n + temp\n        l -= 1\n    #print(new_n)\n    return int(new_n)\n    \n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = str(n)\n    return int(''.join(sorted(n,reverse=True)))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    digits = str(n)\n    length = len(digits)\n    #print(digits)\n    for i in range(length-1):\n        for j in range(i+1, length):\n            #print(digits[i], digits[j])\n            if int(digits[i]) < int(digits[j]):\n                digits = digits[:i] + digits[j] + digits[i+1:j] + digits[i] + digits[j+1:]\n                break\n            elif int(digits[i]) > int(digits[j]):\n                break\n    return int(digits)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n_str = str(n)\n    result = int(n_str[::-1])\n    return result\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    # Using Sorting\n    num = str(n)\n    l = sorted(num)\n    return int(''.join(l))\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    def next_bigger(n):\n        '''\n        Iterates through number, compares it to the previous one, and keeps track of the order.\n        '''\n        for i in range(len(str(n))-1, -1, -1):\n            for j in range(i-1, -1, -1):\n                if int(str(n)[j]) > int(str(n)[i]):\n                    temp = str(n)[j]\n                    str(n)[j] = str(n)[i]\n                    str(n)[i] = temp\n                    return str(n)\n"
    },
    {
        "number": 407,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rearrange_bigger(n):\n    '''\n    Write a function to create the next bigger number by rearranging the digits of a given number.\n    '''\n    n = list(str(n))\n    n = sorted(n, reverse = True)\n    n = int(''.join(n))\n    return n\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    res = []\n    if not nums1:\n        return res\n    if not nums2:\n        return res\n    if k <= 0:\n        return []\n    if len(nums1) == 0:\n        return []\n    if len(nums2) == 0:\n        return []\n    min_heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(min_heap, (nums1[i] + nums2[0], nums1[i], nums2[0]))\n    res = []\n    for _ in range(k):\n        smallest, a, b = heapq.heappop(min_heap)\n        res.append((a, b))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # both nums1 and nums2 are sorted arrays with size at least 2\n    # the first element of nums1 is always less than the first element of nums2\n    # the first element of nums2 is always less than the first element of nums1\n    # the first element of nums1 and nums2 should never be the same\n    # 0<=k<=min(m,n)\n    m,n = len(nums1), len(nums2)\n    # https://www.geeksforgeeks.org/minimum-number-of-elements-in-two-sorted-arrays/\n    # two pointers\n    i = 0\n    j = 0\n    # nums1[i] < nums2[j]\n    # heap\n    h = []\n    res = []\n    for k in range(k):\n        if i < m and j < n:\n            if nums1[i] < nums2[j]:\n                heapq.heappush(h, nums1[i])\n                i += 1\n            else:\n                heapq.heappush(h, nums2[j])\n                j += 1\n        # the first k elements of nums1, nums2\n        if not h:\n            break\n        # there are at least k elements in h\n        res.append(heapq.heappop(h))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    \n    pairs = []\n    for i in range(len(nums1)):\n        for j in range(len(nums2)):\n            pairs.append([nums1[i], nums2[j]])\n    return heapq.nsmallest(k, pairs, key=lambda x:x[0] + x[1])\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n    if k == 0:\n        return []\n    # create heap\n    heap = []\n    for n1 in nums1:\n        for n2 in nums2:\n            heapq.heappush(heap, (n1 + n2, [n1, n2]))\n    res = []\n    for i in range(k):\n        res.append(heapq.heappop(heap)[1])\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    if len(nums1) == 0 or len(nums2) == 0:\n        return []\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    # use priority queue\n    # -1 to be able to use heapq.heappushpop(minheap, -1) in the last step\n    minheap = [-1] * k\n    heapq.heapify(minheap)\n    heapq.heappush(minheap, -1)\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap, res = [], []\n    for i in range(k):\n        heapq.heappush(heap, (nums1[i] + nums2[i], i, nums1[i], nums2[i]))\n    for _ in range(k):\n        _, i1, x1, y1 = heapq.heappop(heap)\n        res.append((x1, y1))\n        if i1 < len(nums1) - 1:\n            heapq.heappush(heap, (nums1[i1 + 1] + nums2[i1 + 1], i1 + 1, nums1[i1 + 1], nums2[i1 + 1]))\n    return res\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    m, n = len(nums1), len(nums2)\n    if m > n:\n        m, n, nums1, nums2 = n, m, nums2, nums1\n    if m * n <= k:\n        return nums1[:k]\n    # heapq.heapify(nums)\n    # heapq.heappop()\n    minheap = []\n    # build minheap of m+n\n    for i in range(m):\n        heapq.heappush(minheap, (nums1[i], i))\n    # k = m * n, n = k // 2\n    # for j in range(k // 2):\n    #     # pop smallest from heap\n    #     heapq.heappop(minheap)\n    # sort\n    for i in range(k // 2):\n        # heapq.heappop(minheap)\n        a, b = heapq.heappop(minheap)\n        # nums2, nums1 = nums1, nums2\n        if m - i > n:\n            heapq.heappush(minheap, (nums1[i], b))\n        else:\n            heapq.heappush(minheap, (nums2[i], b))\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    pair_count = 0\n    # nums1.sort()\n    # nums2.sort()\n    for i in range(k):\n        if nums1[i] < nums2[0]:\n            pair_count += 1\n            break\n    return pair_count\n"
    },
    {
        "number": 408,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef k_smallest_pairs(nums1, nums2, k):\n    '''\n    Write a function to find k number of smallest pairs which consist of one element from the first array and one element from the second array.\n    '''\n    heap = []\n    result = []\n    if len(nums1) == 0 or len(nums2) == 0 or k > len(nums1) + len(nums2):\n        return result\n    \n    for i in range(k):\n        heapq.heappush(heap, (nums1[i] + nums2[i], i))\n    \n    while k:\n        _, ind = heapq.heappop(heap)\n        result.append((nums1[ind], nums2[ind]))\n        k -= 1\n    \n    return result\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    pairs = []\n    for i in range(len(list1)):\n        pairs.append((list1[i][0], list1[i][1]))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    max_num = list1[0][1]\n    min_num = list1[0][0]\n    for num in list1:\n        if num[1] < max_num:\n            max_num = num[1]\n        if num[0] < min_num:\n            min_num = num[0]\n    return min_num * max_num\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    max_numbers = []\n    for i in range(len(list1)):\n        max_numbers.append(max(list1[i]))\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    l1=[]\n    for i in range(len(list1)):\n        min_product=1\n        for j in range(len(list1)):\n            if(i==j):\n                continue\n            else:\n                if(list1[i][0]<list1[j][0] and list1[i][1]<list1[j][1]):\n                    min_product=list1[i][1]*list1[j][1]\n        l1.append(min_product)\n    return min(l1)\n    \n    \n        \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_product = float('inf')\n    for t in list1:\n        if t[0] == 0 and t[1] == 0:\n            continue\n        if t[0] == 0:\n            x = t[1]\n        else:\n            x = t[0]\n        if t[1] == 0:\n            y = t[0]\n        else:\n            y = t[1]\n        min_product = min(min_product, x * y)\n    return min_product\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    return min(tuple(list1), key = lambda x: x[0] * x[1])\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_num = list1[0]\n    for tup in list1:\n        if tup[0] < min_num[0]:\n            min_num = tup\n    return min_num\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min_num = list1[0]\n    for x in list1:\n        if x[0] < min_num[0] or x[1] < min_num[1]:\n            min_num = x\n    return (min_num[0], min_num[1])\n    \n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    if len(list1) == 0:\n        return None\n"
    },
    {
        "number": 409,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_product_tuple(list1):\n    '''\n    Write a function to find the minimum product from the pairs of tuples within a given list.\n    '''\n    min = list1[0][0] * list1[0][1]\n    for i in range(1, len(list1)):\n        if min > list1[i][0] * list1[i][1]:\n            min = list1[i][0] * list1[i][1]\n    return min\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if len(listval) == 0:\n        return None\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if not listval:\n        return None\n    min_value = listval[0]\n    for i in listval:\n        if min_value > i:\n            min_value = i\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_value = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i]<min_value:\n            min_value = listval[i]\n    return min_value\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    # minimum_value = min(listval)\n    # return minimum_value\n    \n    min_element = min(listval)\n    \n    return min_element\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for i in range(len(listval)):\n        if listval[i] < minval:\n            minval = listval[i]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    if listval == []:\n        print(\"List is empty\")\n        return None\n    min_val = listval[0]\n    for i in range(1,len(listval)):\n        if listval[i] < min_val:\n            min_val = listval[i]\n    return min_val\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    minval = listval[0]\n    for x in range(len(listval)):\n        if(listval[x] < minval):\n            minval = listval[x]\n    return minval\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_num = None\n    for num in listval:\n        if not min_num or min_num > num:\n            min_num = num\n    return min_num\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    \n    #initializing min to the first value of the list\n    min = listval[0]\n"
    },
    {
        "number": 410,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_val(listval):\n    '''\n    Write a function to find the minimum value in a given heterogeneous list.\n    '''\n    min_val=float('inf')\n    for val in listval:\n        if type(val)==str:\n            if len(val)<min_val:\n                min_val=len(val)\n        else:\n            if val<min_val:\n                min_val=val\n    return min_val\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    words = word.split('_')\n    camel = words[0]\n    for i in range(1, len(words)):\n        camel += words[i].title()\n    return camel\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    return \"\".join(map(str.capitalize, word.split(\"_\")))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    returnWord = ''\n    convertWord = word.title()\n    for letter in convertWord:\n        if letter == '_':\n            returnWord = returnWord + letter.lower()\n        else:\n            returnWord = returnWord + letter\n    return returnWord\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    word = word.split('_')\n    for i in range(len(word)):\n        if i == 0:\n            word[i] = word[i].lower()\n        else:\n            word[i] = word[i].capitalize()\n    return ''.join(word)\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new = ''.join([x.capitalize() for x in word.split('_')])\n    return new\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    #your code here\n    if word == \"\":\n        return word\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    # Your code here\n    l=list(word)\n    print(l)\n    k=''\n    for i in range(len(l)):\n        if l[i]=='_':\n            k=k+l[i+1].upper()\n        else:\n            k=k+l[i]\n    return k\nprint(snake_to_camel('hello_world'))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    \n    # Empty string returned if word is empty\n    if len(word) == 0:\n        return word\n    \n    # List of words of the string\n    words = word.split(\"_\")\n    \n    # Creating a new list of words\n    # in which first word starts with lower case\n    # and rest of words are in capital\n    new_words = words[0].lower()\n    new_words += words[1:]\n    \n    # join method is used to join the elements of new_words list\n    # as a string and the first word in new_words is not added as\n    # a first element of new_words\n    return new_words[0] + \"\".join(new_words[1:])\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    result = ''\n    for char in word:\n        if char.isupper():\n            result += char.lower()\n        else:\n            result += char.upper()\n    return result\nprint(snake_to_camel(\"snake_case\"))\n"
    },
    {
        "number": 411,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef snake_to_camel(word):\n    '''\n    Write a function to convert the given snake case string to camel case string.\n    '''\n    new_word = \"\"\n    for i in range(len(word)):\n        if word[i] == '_':\n            new_word += word[i].upper()\n            continue\n        else:\n            new_word += word[i]\n    return new_word\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    new_list = []\n    for i in range(len(l)):\n        if l[i]%2 == 0:\n            new_list.append(l[i])\n    return new_list\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    return (filter(lambda x: x%2 == 0, l))\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd_list = []\n    for i in l:\n        if i % 2!= 0:\n            odd_list.append(i)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for i in l:\n        if i%2==0:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    odd = []\n    for num in l:\n        if num % 2 == 0:\n            odd.append(num)\n    return odd\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    result = []\n    for num in l:\n        if num % 2 == 0:\n            result.append(num)\n    return result\n    \ndef sub_string(l,k):\n    '''\n    Write a python function to find substring with length k.\n    '''\n    result = []\n    for index in range(0,len(l)-k+1):\n        sub_str = l[index:k+index]\n        result.append(sub_str)\n    return result\n    \ndef reverse_substring(l,k):\n    '''\n    Write a python function to reverse substring of length k.\n    '''\n    result = []\n    for index in range(len(l)-k+1):\n        sub_str = l[index:k+index]\n        result.append(sub_str)\n    return result\n    \ndef flip_substring(l,k):\n    '''\n    Write a python function to flip substring of length k.\n    '''\n    result = []\n    for index in range(len(l)-k+1):\n        sub_str = l[index:k+index]\n        result.append(sub_str[::-1])\n    return result\n    \ndef check_palindrome(s):\n    '''\n    Write a python function to check if a string is palindrome.\n    '''\n    result = []\n    for index in range(0,len(s)-1):\n        if s[index] == s[len(s)-1-index]:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n    \ndef find_palindrome(l):\n    '''\n    Write a python function to find the palindrome of a string.\n    '''\n    result = []\n    for index in range(0,len(l)-1):\n        if l[index] == l[len(l)-1-index]:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n    \ndef check_unique(l):\n    '''\n    Write a python function to check if a list contains any duplicate elements.\n    '''\n    result = []\n    for index in range(0,len(l)):\n        if l[index] in l[0:index]:\n            result.append(True)\n        else:\n            result.append(False)\n    return result\n    \ndef find_duplicate(l):\n    '''\n    Write a python function to find duplicate elements in a list.\n    '''\n    result = []\n    for index in range(0,len(l)):\n        if l[index] in l[0:index]:\n            result.append(l[index])\n    return result\n    \ndef find_greater_than_x(l,x):\n    '''\n    Write a python function to find elements greater than a given number in a list.\n    '''\n    result = []\n    for index in range(0,len(l)):\n        if l[index] > x:\n            result.append(l[index])\n    return result\n    \ndef find_less_than_x(l,x):\n    '''\n    Write a python function to find elements less than a given number in a list.\n    '''\n    result = []\n    for index in range(0,len(l)):\n        if l[index] < x:\n            result.append(l[index])\n    return result\n    \ndef find_greater_than_x_and_less_than_x(l,x,y):\n    '''\n    Write a python function to find elements greater than a given number and less than another given number in a list.\n    '''\n    result = []\n    for index in range(0,len(l)):\n        if l[index] > x and l[index] < y:\n            result.append(l[index])\n    return result\n    \ndef find_greater_than_x_or_less_than_y(l,x,y):\n    '''\n    Write a python function to find elements greater than a given number or less than another given number in a list.\n    '''\n    result = []\n    for index in range(0,len(l)):\n        if l[index] > x or l[index] < y:\n            result.append(l[index])\n    return result\n    \ndef find_words_starting_with_vowels(s):\n    '''\n    Write a python function to find words which have vowels as their first character.\n    '''\n    result = []\n    for index in range(0,len(s)):\n        if s[index] in ['a','e','i','o','u','A','E','I','O','U']:\n            result.append(s[index])\n    return result\n    \ndef find_words_ending_with_vowels(s):\n    '''\n    Write a python function to find words which have vowels as their last character.\n    '''\n    result = []\n    for index in range(0,len(s)):\n        if s[index] in ['a','e','i','o','u','A','E','I','O','U']:\n            result.append(s[index])\n    return result\n    \ndef find_words_starting_with_vowels_or_ending_with_vowels(s):\n    '''\n    Write a python function to find words which have vowels as their first or last character.\n    '''\n    result = []\n    for index in range(0,len(s)):\n        if s[index] in ['a','e','i','o','u','A','E','I','O','U']:\n            result.append(s[index])\n    return result\n    \ndef find_words_starting_with_vowels_and_ending_with_vowels(s):\n    '''\n    Write a python function to find words which have vowels as their first or last character.\n    '''\n    result = []\n    for index in range(0,len(s)):\n        if s[index] in ['a','e','i','o','u','A','E','I','O','U']:\n            result.append(s[index])\n    return result\n    \ndef is_year_leap(year):\n    '''\n    Write a python function to check if a year is a leap year or not.\n    '''\n    if year % 4 == 0:\n        if year % 100 == 0:\n            if year % 400 == 0:\n                result = True\n            else:\n                result = False\n        else:\n            result = True\n    else:\n        result = False\n    return result\n    \ndef validate_email_addresses(emails):\n    '''\n    Write a python function to check if a given email address is valid or not.\n    '''\n    result = []\n    for email in emails:\n        if email[-1] == '@' and email[:email.index('@')] and email.index('@') > 0:\n            if email[-1] == '.' and email[:email.index('.')] and email.index('.') > 0:\n                result.append(True)\n            else:\n                result.append(False)\n        else:\n            result.append(False)\n    return result\n    \ndef num_of_words_in_string(s):\n    '''\n    Write a python function to count number of words in a given string.\n    '''\n    word_dict = {}\n    for word in s.split():\n        if word in word_dict:\n            word_dict[word] += 1\n        else:\n            word_dict[word] = 1\n    return word_dict\n    \ndef find_sorted_string(s):\n    '''\n    Write a python function to find sorted string of a given string.\n    '''\n    result = []\n    s = list(s)\n    s = sorted(s)\n    for index in range(0,len(s)):\n        result.append(s[index])\n    return ''.join(result)\n    \ndef sort_string_in_descending_order(s):\n    '''\n    Write a python function to sort a string in descending order.\n    '''\n    result = []\n    s = list(s)\n    s = sorted(s,reverse=True)\n    for index in range(0,len(s)):\n        result.appen"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(odd)\n    return l\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    for i in range(len(l)):\n        if l[i] % 2!= 0:\n            l.remove(l[i])\n    print(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    l.remove(l[0])\n    l.remove(l[1])\n    l.remove(l[2])\n    l.remove(l[3])\n    l.remove(l[4])\n    print(l)\n"
    },
    {
        "number": 412,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(l):\n    '''\n    Write a python function to remove odd numbers from a given list.\n    '''\n    try:\n        return l[::2]\n    except:\n        return 'Invalid List'\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # list1 = []\n    for i in range(0,len(list1)):\n        list1[i] = list1[i][n]\n    return list1\nprint(extract_nth_element([('mango','apple'),('orange','grape'),('apple','banana')],1))\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    l = len(list1)\n    return list1[l - n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    try:\n        list1.remove(tuple([]))\n    except:\n        print(\"No such element in the list\")\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n-1]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    res = []\n    for i in list1:\n        res.append(i[n])\n    return res\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    return list1[n]\n"
    },
    {
        "number": 413,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_nth_element(list1, n):\n    '''\n    Write a function to extract the nth element from a given list of tuples.\n    '''\n    # make a tuple to keep the size of the list\n    if len(list1) >= n:\n        t = tuple(list1)\n    else:\n        print(\"Invalid n. Please give an integer number between 0 and\", len(list1))\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for item in list1:\n        if item in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    res = []\n    for i in list1:\n        for j in list2:\n            if i==j:\n                res.append(i)\n                break\n    if len(res)>0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    x=False\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            x=True\n    if x==False:\n        print('No Value in the Sequence.')\n    else:\n        print('Value Exist in the Sequence.')\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    x = []\n    for i in range(len(list1)):\n        if list1[i] in list2:\n            x.append(True)\n        else:\n            x.append(False)\n    if False in x:\n        return(False)\n    else:\n        return(True)\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for value in list1:\n        if value in list2:\n            return True\n    return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i==j:\n                return True\n    else:\n        return False\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in range(0, len(list1)):\n        for j in range(i, len(list1)):\n            if (list1[i] == list1[j]):\n                print(list1[i], 'and', list1[j], 'are overlapping')\n                return 1\n            else:\n                print(list1[i], 'and', list1[j], 'are not overlapping')\n                return 0\n"
    },
    {
        "number": 414,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def overlapping(list1,list2):  \n    '''\n    Write a python function to check whether any value in a sequence exists in a sequence or not.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort(reverse=True)\n    max_p = arr[0] * arr[1] \n    for i in range(2, len(arr)): \n        if (arr[i] * arr[i - 1] > max_p): \n            max_p = arr[i] * arr[i - 1] \n    return max_p\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    if n<2:\n        return -1\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    i = 0\n    max_product = 0\n    while i < len(arr):\n        if arr[i] > max_product:\n            max_product = arr[i]\n            index = i\n        i += 1\n    return index\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    product = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            product = max(arr[i]*arr[j], product)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = arr[0]\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n                index = (i,j)\n    return index\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    print(arr)\n    for i in range(len(arr)-1):\n        # print(arr[i],arr[i+1])\n        # print(arr[i]*arr[i+1])\n        if(arr[i]*arr[i+1]>arr[i+1]*arr[i]):\n            print(arr[i],arr[i+1])\n            return(arr[i],arr[i+1])\n    return(-1, -1)"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    n = len(arr)\n    max_product = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product \n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    # arr = [-3, 1, -2, 4, -5, 6]\n    res = 1\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i]*arr[j] > res:\n                res = arr[i]*arr[j]\n                max_index = (i, j)\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    def product(x, y):\n        return x*y\n    \n    max_val = max(arr)\n    lst = []\n    lst.append(max_val)\n    for i in range(len(arr)):\n        if(max_val == arr[i]):\n            lst.append(i)\n    return lst\n"
    },
    {
        "number": 415,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_Product(arr): \n    '''\n    Write a python function to find a pair with highest product from a given array of integers.\n    '''\n    arr.sort()\n    if len(arr) == 2:\n        return arr[0] * arr[1]\n    i = 0\n    j = len(arr)-1\n    while i < j:\n        if arr[i]*arr[j] < 0:\n            i += 1\n        else:\n            return arr[i] * arr[j]\n    return arr[j] * arr[i]\n        \n        "
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    common_element = []\n    for i in range(len(Input)):\n        if(Input[i][0] not in common_element):\n            common_element.append(Input[i][0])\n    return common_element\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Input.sort()\n    d = {}\n    for i in range(len(Input)):\n        if Input[i][0] in d:\n            d[Input[i][0]] +=1\n        else:\n            d[Input[i][0]] = 1\n    return d\n    \nInput = [(1,4),(2,3),(4,5),(1,5)]\nprint(group_tuples(Input))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Output = set()\n    for each in Input:\n        Output.add(each[0])\n    return Output\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    answer = {}\n    for i in Input:\n        for j in i:\n            if j not in answer:\n                answer[j] = 1\n            else:\n                answer[j] += 1\n    \n    for i in answer:\n        if answer[i] == 1:\n            return i\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    tup_list=[]\n    for i in range(len(Input)):\n        tup_list.append(Input[i][0])\n    tup_list=list(set(tup_list))\n    return tup_list\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    \n    Input = list(Input)\n    set1 = set(Input)\n    set2 = set(Input[0])\n    print(set1)\n    print(set2)\n    print(set1.intersection(set2))\n    \n    \n    \n    \ngroup_tuples([(1, 2), (2, 2), (3, 3), (4, 3), (4, 2), (5, 3), (5, 2)])\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    Common = []\n    count = 0\n    if len(Input) == 0:\n        return Common\n    for i in range(len(Input)):\n        if len(Common) == 0:\n            Common.append(Input[i][0])\n        else:\n            if Common[0] == Input[i][0]:\n                Common.append(Input[i][1])\n            else:\n                count += 1\n                Common = [Input[i][0]]\n    return count\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    first = []\n    second = []\n    for elem in Input: \n        if elem[0] not in first: \n            first.append(elem[0]) \n        if elem[1] not in second: \n            second.append(elem[1]) \n    common_first = set(first).intersection(second) \n    return common_first \n    \ninput_data = [(1, 2), (2, 3), (4, 5), (1, 3), (2, 4), (5, 6)] \nprint(group_tuples(input_data))\n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    input_list=list(Input)\n    first_elem=[]\n    for i in range(0,len(input_list)):\n        first_elem.append(input_list[i][0])\n    \n    return first_elem \n"
    },
    {
        "number": 417,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def group_tuples(Input): \n    '''\n    Write a function to find common first element in given list of tuple.\n    '''\n    First = tuple(set(i[0] for i in Input))\n    Second = tuple(set(i[1] for i in Input))\n    Third = tuple(set(i[2] for i in Input))\n    return (First, Second, Third)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    n = len(lst)\n    maxi = 0\n    for i in range(n): \n        if (lst[i] > maxi): \n            maxi = lst[i] \n    return maxi \n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for ele in lst:\n        if len(ele) > max:\n            max = len(ele)\n    return max\n    \ndef IsPalindrome(s):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if s == s[::-1]:\n        return True\n    return False\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in range(len(lst)): \n        if(len(lst[i]) > len(max)): \n            max = lst[i] \n    return max \n    \ndef Find_Min(lst):\n    '''\n    Write a python function to find the element of a list having minimum length.\n    '''\n    min = lst[0]\n    for i in range(len(lst)): \n        if(len(lst[i]) < len(min)): \n            min = lst[i] \n    return min\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    n = len(lst)\n    max_val = lst[0]\n    for i in range(1, n):\n        if lst[i] > max_val:\n            max_val = lst[i]\n    return max_val\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = lst[0]\n    for i in lst:\n        if len(i) > len(max):\n            max = i\n    return max\n    \n    \n    \nif __name__ == '__main__':\n    lst = [\"abc\", \"bcd\", \"d\", \"abcd\"]\n    print(Find_Max(lst))\n    lst = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\"]\n    print(Find_Max(lst))\n    lst = [\"1\", \"2\", \"3\", \"4\"]\n    print(Find_Max(lst)"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_val = 0\n    for i in range(len(lst)):\n        if len(lst[i]) > max_val:\n            max_val = len(lst[i])\n    return max_val\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    m = 0\n    for i in lst:\n        if len(i) > m:\n            m = len(i)\n    return m\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max = 0\n    for i in range(len(lst)):\n        if len(lst[i])>max:\n            max = len(lst[i])\n            index = i\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    return max(lst, key=len)\n"
    },
    {
        "number": 418,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max(lst): \n    '''\n    Write a python function to find the element of a list having maximum length.\n    '''\n    max_len = 0\n    for i in lst:\n        if len(i) > max_len:\n            max_len = len(i)\n    return max_len\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #print(round(list1))\n    return round(sum(list1)*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total = 0\n    total = sum(list1)\n    print(total)\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    return total * len(list1)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n    print(sum(list1)*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    #Solution\n    rounded_list = []\n    for i in range(len(list1)):\n        rounded_list.append(round(list1[i]))\n    print(sum(rounded_list) * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    i = 1\n    while i <= len(list1):\n        list1[i - 1] = round(list1[i - 1], 2)\n        i += 1\n    print(sum(list1) * len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    total_sum = 0\n    for i in range(len(list1)):\n        total_sum += round(list1[i])\n    print(total_sum)\n    print(f\"The total sum of all numbers in the list is: {total_sum}.\")\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    rounded_list = list(map(lambda x: round(x,2), list1))\n    total = sum(rounded_list) * len(rounded_list)\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print('original list:', list1)\n    print('rounded and summed:', sum([round(i) for i in list1]), sum([round(i) for i in list1])*len(list1))\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    list1 = [1,2,3,4,5,6,7,8,9,10]\n    total = 0\n    for i in range(len(list1)):\n        list1[i] = round(list1[i])\n        total += list1[i]\n    print(total)\n"
    },
    {
        "number": 419,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def round_and_sum(list1):\n    '''\n    Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.\n    '''\n    print(sum(list1) * len(list1))\nround_and_sum([1,2,3,4,5])\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum=0\n    for i in range(n):\n        sum=sum+pow(i,3)\n    return sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while i <= n:\n        sum += i*i*i\n        i += 1\n    print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    # Logic: \n    # for i in range(n,0,-1): \n    #     cubesum = i*i*i \n    #     print(cubesum)\n    \n    # recursive way:\n    if n<1:\n        print(\"Please enter a positive integer\")\n    else: \n        if n==1:\n            print(n)\n        else:\n            n=n-1\n            cube_Sum(n)\n            n=n+1\n            print(n*n*n)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    Sum = 0\n    for i in range(0, n+1):\n        Sum = Sum + i**3\n    return Sum"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    res = 0\n    if n < 1:\n        return res\n    for i in range(1,n+1):\n        res += i**3\n    return res\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    Sum = 0\n    for i in range(n):\n        Sum += i*i*i\n    print Sum\n    return Sum\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    a = n\n    while (n > 0):\n        sum = 0\n        i = 1\n        while (i <= n):\n            sum = sum + (i**3)\n            i = i + 1\n        n = n - 1\n        print(sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube = 0\n    for i in range(n):\n        cube = cube + i**3\n    return cube\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    cube_sum = 0\n    for i in range(n):\n        cube_sum += (i**3)\n    return(cube_sum)\n"
    },
    {
        "number": 420,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_Sum(n): \n    '''\n    Write a python function to find the cube sum of first n even natural numbers.\n    '''\n    i = 1\n    while i <= n:\n        if i%2==0:\n            print(i**3)\n        i = i + 1\n    \n    print(\"\\n\")\n    #Output:\n    #12\n    #18\n    #27\n    #36\n    #45\n    #54\n    #63\n    #72\n    #81\n    #90\n    #99\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    delimiter = '*'\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return ''.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return delimiter.join(test_tup)\n    \n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # try:\n    #     delimiter = test_tup[0]\n    #     if len(test_tup) == 1:\n    #         return delimiter\n    #     else:\n    #         concatenated_string = delimiter.join(test_tup[1:])\n    #         return concatenated_string\n    # except Exception as e:\n    #     print('Exception occured : {}'.format(e))\n    #     return None\n    try:\n        return ''.join(test_tup)\n    except Exception as e:\n        print('Exception occured : {}'.format(e))\n        return None\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    \n    final_string = ''\n    \n    for i in range(len(test_tup)):\n        if i!= len(test_tup) - 1:\n            final_string += test_tup[i] + ','\n        else:\n            final_string += test_tup[i]\n    return final_string\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    try:\n        result = ''\n        for i in test_tup:\n            result += i\n        return result\n    except:\n        raise ValueError\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    return test_tup[0] + test_tup[1] + test_tup[2] + test_tup[3] + test_tup[4] + test_tup[5] + test_tup[6] + test_tup[7] + test_tup[8] + test_tup[9]\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    # import pdb;pdb.set_trace()\n    return delimiter.join(test_tup)\n"
    },
    {
        "number": 421,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def concatenate_tuple(test_tup):\n    '''\n    Write a function to concatenate each element of tuple by the delimiter.\n    '''\n    concat_tup = \"\"\n    for tup in test_tup:\n        concat_tup += str(tup) + \"-\"\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum_of_cubes = 0\n    for i in range(1, n+1):\n        sum_of_cubes += i**3\n    average = sum_of_cubes / n\n    print(\"Average Of Cubes is\", average)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    a = sum([x**3 for x in range(n)])\n    avg = a/n\n    print(avg)\n    \ndef find_Average_Of_Cube_2(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    avg = (n*(n+1)*(2*n+1))/6\n    print(avg)\n    \ndef find_Sum_Of_First_X_numbers(n):  \n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    print(sum)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    i=1\n    sum=0\n    while i<=n:\n        sum=sum+i**3\n        i=i+1\n    average=sum/n\n    return average\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(n+1):\n        cubes.append(i**3)\n    print('The average of cubes of first',n,'natural numbers is', sum(cubes)/n)\n    \ndef find_all_the_squares(n):\n    '''\n    Write a python function to find all the squares of first n natural numbers.\n    '''\n    cubes = []\n    for i in range(n+1):\n        cubes.append(i**2)\n    print('The all squares of first',n,'natural numbers are',cubes)\n    \ndef get_factors(n):\n    '''\n    Write a python function to find all the factors of first natural number.\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    print('The factors of first natural number are',factors)\n    \ndef find_prime_factors(n):\n    '''\n    Write a python function to find all prime factors of first natural number.\n    '''\n    factors = []\n    while n % 2 == 0:\n        factors.append(2)\n        n = n // 2\n    for i in range(3,int(n**0.5)+1,2):\n        while n % i == 0:\n            factors.append(i)\n            n = n // i\n    if n > 2:\n        factors.append(n)\n    print('The prime factors of first natural number are',factors)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = n*n*n\n    return cube\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    cube = 0\n    for i in range(1,n+1):\n        cube = cube + i**3\n    return cube/n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(1, n + 1):\n        sum += i ** 3\n    return sum / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    print(\"hello world\")\n    total=0\n    for i in range(1,n+1):\n        total=total+i**3\n    print(\"total is: \", total)\n    print(\"average is: \",total/n)\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        total += (i+1)**3\n    return total / n\n"
    },
    {
        "number": 422,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Average_Of_Cube(n):  \n    '''\n    Write a python function to find the average of cubes of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n    \n    return sum/n\n    \n    \ndef find_Average_Of_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    fib_1 = 1\n    fib_2 = 1\n    sum = fib_1+fib_2\n    for i in range(n-1):\n        next_num = fib_1 + fib_2\n        fib_1 = fib_2\n        fib_2 = next_num\n        sum = sum + fib_1+fib_2\n    \n    return sum/n\n    \n    \ndef find_Average_Of_Factorial(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    fac_1 = 1\n    fac_2 = 1\n    sum = fac_1+fac_2\n    for i in range(n-1):\n        next_num = fac_1 + fac_2\n        fac_1 = fac_2\n        fac_2 = next_num\n        sum = sum + fac_1+fac_2\n    \n    return sum/n\n    \n    \ndef find_Sum_Of_Factorial(n):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    sum = 1\n    for i in range(1, n+1):\n        sum = sum * i\n        \n    return sum\n    \n    \ndef find_Average_Of_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    fib_1 = 1\n    fib_2 = 1\n    sum = fib_1+fib_2\n    for i in range(n-1):\n        next_num = fib_1 + fib_2\n        fib_1 = fib_2\n        fib_2 = next_num\n        sum = sum + fib_1+fib_2\n    \n    return sum/n\n    \n    \ndef find_Average_Of_Factorial(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 1\n    for i in range(1, n+1):\n        sum = sum * i\n        \n    return sum\n    \n    \ndef find_Sum_Of_Factorial(n):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    sum = 1\n    for i in range(1, n+1):\n        sum = sum * i\n        \n    return sum\n    \n    \ndef find_Sum_Of_Cube(n):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n        \n    return sum\n    \n    \ndef find_Average_Of_Binary(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2 == 0):\n            sum = sum + i\n        \n    return sum/n\n    \n    \ndef find_Sum_Of_Binary(n):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2 == 0):\n            sum = sum + i\n        \n    return sum\n    \n    \ndef find_Average_Of_Exponential(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 1\n    for i in range(n):\n        sum = sum * i\n        \n    return sum\n    \n    \ndef find_Sum_Of_Exponential(n):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    sum = 1\n    for i in range(n):\n        sum = sum * i\n        \n    return sum\n    \n    \ndef find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n        \n    return sum/n\n    \n    \ndef find_Average_Of_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    fib_1 = 1\n    fib_2 = 1\n    sum = fib_1+fib_2\n    for i in range(n-1):\n        next_num = fib_1 + fib_2\n        fib_1 = fib_2\n        fib_2 = next_num\n        sum = sum + fib_1+fib_2\n        \n    return sum/n\n    \n    \ndef find_Average_Of_Factorial(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 1\n    for i in range(1, n+1):\n        sum = sum * i\n        \n    return sum\n    \n    \ndef find_Sum_Of_Factorial(n):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    sum = 1\n    for i in range(1, n+1):\n        sum = sum * i\n        \n    return sum\n    \n    \ndef find_Sum_Of_Cube(n):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n        \n    return sum\n    \n    \ndef find_Average_Of_Binary(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2 == 0):\n            sum = sum + i\n        \n    return sum/n\n    \n    \ndef find_Sum_Of_Binary(n):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        if(i%2 == 0):\n            sum = sum + i\n        \n    return sum\n    \n    \ndef find_Average_Of_Exponential(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 1\n    for i in range(n):\n        sum = sum * i\n        \n    return sum\n    \n    \ndef find_Sum_Of_Exponential(n):\n    '''\n    Write a python function to find the sum of first n natural numbers.\n    '''\n    sum = 1\n    for i in range(n):\n        sum = sum * i\n        \n    return sum\n    \n    \ndef find_Average_Of_Cube(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(n):\n        sum = sum + i**3\n        \n    return sum/n\n    \n    \ndef find_Average_Of_Fibonacci(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 0\n    fib_1 = 1\n    fib_2 = 1\n    sum = fib_1+fib_2\n    for i in range(n-1):\n        next_num = fib_1 + fib_2\n        fib_1 = fib_2\n        fib_2 = next_num\n        sum = sum + fib_1+fib_2\n        \n    return sum/n\n    \n    \ndef find_Average_Of_Factorial(n):\n    '''\n    Write a python function to find the average of first n natural numbers.\n    '''\n    sum = 1\n    fo"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(map(lambda x: x[-1], test_tuple))\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    test_list=[]\n    for element in test_tuple:\n        test_list.append(element[len(element)-1])\n    return tuple(test_list)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(el[-1] for el in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return (test_tuple[2])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(test_tuple[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for x in test_tuple:\n        rear.append(x[len(x)-1])\n    return rear\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return tuple(tup[-1] for tup in test_tuple)\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    print(f\"REAR INDEX: {test_tuple.index('rear')}\")\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    return(test_tuple[-1])\n"
    },
    {
        "number": 424,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_rear(test_tuple):\n    '''\n    Write a function to extract only the rear index element of each string in the given tuple.\n    '''\n    rear = []\n    for i in range(len(test_tuple)):\n        rear.append(test_tuple[i][-1])\n    return rear\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return 0\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    return len([sublist for sublist in list1 if x in sublist])\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if i == x:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in list1:\n        if x in i:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if list1[i] == x:\n            count += 1\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for i in range(len(list1)):\n        if x in list1[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    count = 0\n    for sublist in list1:\n        if x in sublist:\n            count += 1\n    return count\n"
    },
    {
        "number": 425,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_element_in_list(list1, x): \n    '''\n    Write a function to count the number of sublists containing a particular element.\n    '''\n    counter = 0\n    for i in range(len(list1)):\n        if x == list1[i]:\n            counter = counter + 1\n    return counter\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return list(filter(lambda x: x%2!= 0, nums))\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for num in nums:\n        if num % 2!= 0:\n            odd_numbers.append(num)\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for number in nums:\n        if number % 2!= 0:\n            odd_numbers.append(number)\n    return odd_numbers\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    #return all the even numbers in the given array\n    #even numbers: x for x in nums if x % 2 == 0\n    #return a new array of the even numbers\n    odds = []\n    for x in nums:\n        if x % 2!= 0:\n            odds.append(x)\n    return odds\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return nums[0::2]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    nums = list(nums)\n    odd_nums = []\n    for n in nums:\n        if n % 2!= 0:\n            odd_nums.append(n)\n    return odd_nums\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return [num for num in nums if num % 2!= 0]\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    return filter(lambda x: x%2!= 0, nums)\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odds = []\n"
    },
    {
        "number": 426,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_oddnumbers(nums):\n    '''\n    Write a function to filter odd numbers.\n    '''\n    odd_numbers = []\n    for i in nums:\n        if i % 2!= 0:\n            odd_numbers.append(i)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date = dt.split('-')\n    return date[2] + '-' + date[1] + '-' + date[0]\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    if re.search(r'[A-Za-z0-9]', dt):\n        try:\n            dt = dt.strip()\n            dt = dt.split(\"-\")\n            year = dt[0]\n            month = dt[1]\n            day = dt[2]\n            new_date = day+\"-\"+month+\"-\"+year\n            return new_date\n        except:\n            print('Invalid input')\n            return False\n    else:\n        print('Invalid input')\n        return False\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    date_format = dt.split('-')\n    date_format = ''.join(date_format)\n    date_format = date_format.split(' ')\n    date_format = '-'.join(date_format)\n    date_format = date_format.split('.')\n    date_format = '-'.join(date_format)\n    return date_format\ndef get_minutes(time_str):\n    '''\n    Write a regular expression to get the minutes value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str)\n        minutes = time_str.group()\n        return minutes\n    else:\n        return \"Invalid\"\ndef get_seconds(time_str):\n    '''\n    Write a regular expression to get the seconds value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\", time_str)\n        seconds = time_str.group()\n        return seconds\n    else:\n        return \"Invalid\"\ndef get_hours(time_str):\n    '''\n    Write a regular expression to get the hours value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str)\n        hours = time_str.group()\n        return hours\n    else:\n        return \"Invalid\"\ndef get_days(time_str):\n    '''\n    Write a regular expression to get the days value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str)\n        days = time_str.group()\n        return days\n    else:\n        return \"Invalid\"\ndef get_months(time_str):\n    '''\n    Write a regular expression to get the months value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str)\n        months = time_str.group()\n        return months\n    else:\n        return \"Invalid\"\ndef get_years(time_str):\n    '''\n    Write a regular expression to get the years value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str)\n        years = time_str.group()\n        return years\n    else:\n        return \"Invalid\"\ndef change_time_format(time_str):\n    '''\n    Write a function to convert a time string in yyyy-mm-dd hh:mm:ss format to dd-mm-yyyy hh:mm:ss format.\n    '''\n    time_format = time_str.split(\" \")\n    time_format = ''.join(time_format)\n    time_format = time_format.split(\".\")\n    time_format = '-'.join(time_format)\n    time_format = time_format.split(\":\")\n    time_format = '-'.join(time_format)\n    return time_format\ndef get_minutes_from_time(time_str):\n    '''\n    Write a regular expression to get the minutes value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str)\n        minutes = time_str.group()\n        return minutes\n    else:\n        return \"Invalid\"\ndef get_seconds_from_time(time_str):\n    '''\n    Write a regular expression to get the seconds value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\", time_str)\n        seconds = time_str.group()\n        return seconds\n    else:\n        return \"Invalid\"\ndef get_hours_from_time(time_str):\n    '''\n    Write a regular expression to get the hours value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str)\n        hours = time_str.group()\n        return hours\n    else:\n        return \"Invalid\"\ndef get_days_from_time(time_str):\n    '''\n    Write a regular expression to get the days value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str)\n        days = time_str.group()\n        return days\n    else:\n        return \"Invalid\"\ndef get_months_from_time(time_str):\n    '''\n    Write a regular expression to get the months value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str)\n        months = time_str.group()\n        return months\n    else:\n        return \"Invalid\"\ndef get_years_from_time(time_str):\n    '''\n    Write a regular expression to get the years value from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str)\n        years = time_str.group()\n        return years\n    else:\n        return \"Invalid\"\ndef get_date(time_str):\n    '''\n    Write a regular expression to get the date from a time string.\n    '''\n    if re.search(\"\\d\\d-\\d\\d-\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d-\\d\\d-\\d\\d\", time_str)\n        date = time_str.group()\n        return date\n    else:\n        return \"Invalid\"\ndef get_time(time_str):\n    '''\n    Write a regular expression to get the time from a time string.\n    '''\n    if re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.search(\"\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str)\n        time = time_str.group()\n        return time\n    else:\n        return \"Invalid\"\ndef get_date_and_time(time_str):\n    '''\n    Write a regular expression to get the date and time from a time string.\n    '''\n    if re.search(\"\\d\\d-\\d\\d-\\d\\d\\s\\d\\d:\\d\\d:\\d\\d\\.\\d\\d\", time_str):\n        time_str = re.searc"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    new_dt=dt.replace('-','/')\n    return new_dt\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month = list(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\n    if dt == 'No date':\n        return 'No date'\n    dt_list = re.split(r'-|/', dt)\n    date_final = dt_list[0] + '-' + dt_list[1] + '-' + dt_list[2]\n    month_final = month.index(dt_list[1]) + 1\n    date_final = date_final.replace('Jan', '01')\n    date_final = date_final.replace('Feb', '02')\n    date_final = date_final.replace('Mar', '03')\n    date_final = date_final.replace('Apr', '04')\n    date_final = date_final.replace('May', '05')\n    date_final = date_final.replace('Jun', '06')\n    date_final = date_final.replace('Jul', '07')\n    date_final = date_final.replace('Aug', '08')\n    date_final = date_final.replace('Sep', '09')\n    date_final = date_final.replace('Oct', '10')\n    date_final = date_final.replace('Nov', '11')\n    date_final = date_final.replace('Dec', '12')\n    return date_final\ndef change_date_format_2(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month = list(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\n    if dt == 'No date':\n        return 'No date'\n    dt_list = re.split(r'-|/', dt)\n    date_final = dt_list[0] + '-' + dt_list[1] + '-' + dt_list[2]\n    month_final = month.index(dt_list[1]) + 1\n    date_final = date_final.replace('Jan', '01')\n    date_final = date_final.replace('Feb', '02')\n    date_final = date_final.replace('Mar', '03')\n    date_final = date_final.replace('Apr', '04')\n    date_final = date_final.replace('May', '05')\n    date_final = date_final.replace('Jun', '06')\n    date_final = date_final.replace('Jul', '07')\n    date_final = date_final.replace('Aug', '08')\n    date_final = date_final.replace('Sep', '09')\n    date_final = date_final.replace('Oct', '10')\n    date_final = date_final.replace('Nov', '11')\n    date_final = date_final.replace('Dec', '12')\n    return date_final\ndef change_date_format_3(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month = list(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\n    if dt == 'No date':\n        return 'No date'\n    dt_list = re.split(r'-|/', dt)\n    date_final = dt_list[0] + '-' + dt_list[1] + '-' + dt_list[2]\n    month_final = month.index(dt_list[1]) + 1\n    date_final = date_final.replace('Jan', '01')\n    date_final = date_final.replace('Feb', '02')\n    date_final = date_final.replace('Mar', '03')\n    date_final = date_final.replace('Apr', '04')\n    date_final = date_final.replace('May', '05')\n    date_final = date_final.replace('Jun', '06')\n    date_final = date_final.replace('Jul', '07')\n    date_final = date_final.replace('Aug', '08')\n    date_final = date_final.replace('Sep', '09')\n    date_final = date_final.replace('Oct', '10')\n    date_final = date_final.replace('Nov', '11')\n    date_final = date_final.replace('Dec', '12')\n    return date_final\ndef change_date_format_4(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month = list(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\n    if dt == 'No date':\n        return 'No date'\n    dt_list = re.split(r'-|/', dt)\n    date_final = dt_list[0] + '-' + dt_list[1] + '-' + dt_list[2]\n    month_final = month.index(dt_list[1]) + 1\n    date_final = date_final.replace('Jan', '01')\n    date_final = date_final.replace('Feb', '02')\n    date_final = date_final.replace('Mar', '03')\n    date_final = date_final.replace('Apr', '04')\n    date_final = date_final.replace('May', '05')\n    date_final = date_final.replace('Jun', '06')\n    date_final = date_final.replace('Jul', '07')\n    date_final = date_final.replace('Aug', '08')\n    date_final = date_final.replace('Sep', '09')\n    date_final = date_final.replace('Oct', '10')\n    date_final = date_final.replace('Nov', '11')\n    date_final = date_final.replace('Dec', '12')\n    return date_final\ndef change_date_format_5(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month = list(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\n    if dt == 'No date':\n        return 'No date'\n    dt_list = re.split(r'-|/', dt)\n    date_final = dt_list[0] + '-' + dt_list[1] + '-' + dt_list[2]\n    month_final = month.index(dt_list[1]) + 1\n    date_final = date_final.replace('Jan', '01')\n    date_final = date_final.replace('Feb', '02')\n    date_final = date_final.replace('Mar', '03')\n    date_final = date_final.replace('Apr', '04')\n    date_final = date_final.replace('May', '05')\n    date_final = date_final.replace('Jun', '06')\n    date_final = date_final.replace('Jul', '07')\n    date_final = date_final.replace('Aug', '08')\n    date_final = date_final.replace('Sep', '09')\n    date_final = date_final.replace('Oct', '10')\n    date_final = date_final.replace('Nov', '11')\n    date_final = date_final.replace('Dec', '12')\n    return date_final\ndef change_date_format_6(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    month = list(['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec'])\n    if dt == 'No date':\n        return 'No date'\n    dt_list = re.split(r'-|/', dt)\n    date_final = dt_list[0] + '-' + dt_list[1] + '-' + dt_list[2]\n    month_final = month.index(dt_list"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    d = dt.split('-')\n    dd = d[2]\n    mm = d[1]\n    yy = d[0]\n    return str(dd)+\"-\"+str(mm)+\"-\"+str(yy)\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    if re.match(r'^\\d{4}-\\d{2}-\\d{2}$', dt):\n        month, day, year = dt.split('-')\n        result = f\"{day}.{month}.{year}\"\n        return result\n    else:\n        print(\"Error in date format\")\n        return None\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    # if len(dt) == 10:\n    #     dt = dt.replace('-', '/')\n    # else:\n    #     return dt\n    # dt = dt[:4] + '-' + dt[4:6] + '-' + dt[6:]\n    return dt.replace('-', '/')\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    dt = dt.split('-')\n    dt = ''.join(dt)\n    return dt.split(' ')\n"
    },
    {
        "number": 427,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef change_date_format(dt):\n    '''\n    Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.\n    '''\n    \n    dt = str(dt)\n    new_date = re.sub(r'\\D','',dt)\n    return new_date\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    #your code here\n    #first fill the gap\n    \n    n = len(my_list)\n    gap = n//2\n    while gap > 0:\n        for i in range(gap,n):\n            temp = my_list[i]\n            j = i\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap //= 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublist_count = len(my_list) // 2\n    while sublist_count > 0:\n        for start_position in range(sublist_count):\n            gap_insertion_sort(my_list, start_position, sublist_count)\n        sublist_count = sublist_count // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    # range(n)\n    gap = n // 2\n    while gap:\n        # gap = n - i\n        for i in range(gap, n):\n            j = i\n            # i = (i - gap)\n            while j >= gap and my_list[j] < my_list[j - gap]:\n                my_list[j], my_list[j - gap] = my_list[j - gap], my_list[j]\n                j = j - gap\n        gap = gap // 2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    if n <= 1:\n        return my_list\n    gap = int(n/2)\n    while gap > 0:\n        for i in range(gap, n):\n            j = i\n            temp = my_list[j]\n            while j >= gap and my_list[j-gap] > temp:\n                my_list[j] = my_list[j-gap]\n                j -= gap\n            my_list[j] = temp\n        gap = int(gap/2)\n    return my_list\n    \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    pass"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    sublist_count = len(my_list)//2\n    while sublist_count > 0:\n        for start_index in range(sublist_count):\n            gap_insertion_sort(my_list, start_index, sublist_count)\n        sublist_count = sublist_count // 2\n    return my_list\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    def shell_sort(my_list,n):\n        if n==0:\n            return\n        else:\n            h=1\n            while(h<=n):\n                h=h*3+1\n                \n            for i in range(h,n+1):\n                j=i\n                while(j>0):\n                    if(my_list[j]<my_list[j-h]):\n                        temp=my_list[j]\n                        my_list[j]=my_list[j-h]\n                        my_list[j-h]=temp\n                    j=j-h\n                    \n        return my_list\n        \n        \n        \n    my_list.sort()\n    return my_list\n        \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    n = len(my_list)\n    gap = n//2\n    while gap>0:\n        for i in range(gap,n):\n            for j in range(i,0,-gap):\n                if my_list[j]<my_list[j-gap]:\n                    my_list[j],my_list[j-gap]=my_list[j-gap],my_list[j]\n        gap = gap//2\n"
    },
    {
        "number": 428,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def shell_sort(my_list):\n    '''\n    Write a function to sort the given array by using shell sort.\n    '''\n    N = len(my_list)\n    gap = int(N/2)\n    while gap > 0:\n        for i in range(gap, N):\n            j = i\n            while j >= gap and my_list[j-gap] > my_list[j]:\n                my_list[j-gap], my_list[j] = my_list[j], my_list[j-gap]\n                j -= gap\n        gap = int(gap/2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if (test_tup1[0] == test_tup2[0]) and (test_tup1[1] == test_tup2[1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1[0] and tup2[0], tup1[1] and tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if len(test_tup1) > len(test_tup2):\n        return test_tup1[:len(test_tup2)]\n    else:\n        return test_tup2[:len(test_tup1)]\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    (tup1, tup2) = (test_tup1, test_tup2)\n    a = ()\n    for i in range(len(tup1)):\n        a += (tup1[i] and tup2[i],)\n    return a\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return tuple(a and b for a,b in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (tup1 if tup1[0]>tup2[0] else tup2) and (tup1 if tup1[1]>tup2[1] else tup2)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    lst = []\n    for i in range(len(test_tup1)):\n        lst.append(test_tup1[i] and test_tup2[i])\n    return tuple(lst)\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    # Your code here\n    return (test_tup1[0] and test_tup2[0]), (test_tup1[1] and test_tup2[1])\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    if type(test_tup1)!= type(test_tup2):\n        return False\n    else:\n        tup_lst1 = list(test_tup1)\n        tup_lst2 = list(test_tup2)\n        return tup_lst1, tup_lst2\n"
    },
    {
        "number": 429,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def and_tuples(test_tup1, test_tup2):\n    '''\n    Write a function to extract the elementwise and tuples from the given two tuples.\n    '''\n    return (x for x, y in zip(test_tup1, test_tup2) if x == y)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    d = b**2-4*a*c\n    if d < 0:\n        print('This parabola does not have an directrix.')\n    else:\n        r1 = (-b + sqrt(d))/(2*a)\n        r2 = (-b - sqrt(d))/(2*a)\n        print(f'The directrix is at {r1} and {r2}.')\n        \ndef n_polygon(n, r): \n    '''\n    Write a function to find the area of a polygon with n sides and a \n    given radius r. \n    '''\n    pi = 3.14\n    a = pi * r**2\n    A = n*a\n    print(f'The area of the polygon is {A}.')\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = 0\n    a = float(a)\n    b = float(b)\n    c = float(c)\n    x = (-b+((b**2)-4*a*c))/(2*a)\n    return x\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return -b - ((b ** 2) - (4 * a * c)) ** (1/2)\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x_0 = (-c + math.sqrt(c**2 - 4*a*b))/(2*a)\n    x_1 = (-c - math.sqrt(c**2 - 4*a*b))/(2*a)\n    return x_0, x_1\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    return a * (x**2) + b * x + c\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = np.linspace(-1,1,10)\n    y = a*x**2 + b*x + c\n    return x, y\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    # calculate the values of the coefficients\n    d = -(a*b**2 + 2*a*c)**0.5\n    m = -b/(2*a)\n    # calculate the directrix\n    return [(a*m**2 - d)**0.5, (a*m**2 + d)**0.5]\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    parabola_x_min = -b/2/a\n    parabola_x_max = b/2/a\n    return parabola_x_min, parabola_x_max\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    if a == 0:\n        raise ValueError\n    return b/a\n"
    },
    {
        "number": 430,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def parabola_directrix(a, b, c): \n    '''\n    Write a function to find the directrix of a parabola.\n    '''\n    x = a\n    y = c - b**2\n    z = 2*b*a\n    print(\"{0}x + {1}y + {2}z = 0\".format(x,y,z))\n    \n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    # edge case check if empty list or one element list or both\n    if not list1:\n        return False\n    if not list2:\n        return False\n    # if elements in the same list\n    if len(list1) == len(list2) and len(list1) == 1:\n        return True\n    else:\n        for ele in list1:\n            if ele in list2:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        for j in list2:\n            if i == j:\n                return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for element in list1:\n        if element in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    common_element = None\n    if len(list1) >= len(list2):\n        common_element = set(list1).intersection(set(list2))\n    else:\n        common_element = set(list2).intersection(set(list1))\n    return common_element\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    if len(list1) >= len(list2):\n        new_list = list1\n    else:\n        new_list = list2\n    for i in range(len(new_list)):\n        if new_list[i] in list2 and new_list[i] in list1:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    print(list1)\n    print(list2)\n    common_elements = []\n    for i in list1:\n        for j in list2:\n            if i == j and i not in common_elements:\n                common_elements.append(i)\n    if len(common_elements) > 0:\n        return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    for i in list1:\n        if i in list2:\n            return True\n    return False\n"
    },
    {
        "number": 431,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def common_element(list1, list2):\n    '''\n    Write a function that takes two lists and returns true if they have at least one common element.\n    '''\n    return set(list1).intersection(set(list2))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    if base1 < 0 or base2 < 0 or height < 0:\n        print(\"Invalid input!\")\n        return -1\n    if base1 + base2 > height:\n        print(\"Invalid input!\")\n        return -1\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    \n    result=base1+base2-height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return (base1+base2)/2 + height/2\n    \nmedian_trapezium(3, 4, 5)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    import math\n    # base1 = int(input(\"enter base1 of trapezium: \"))\n    # base2 = int(input(\"enter base2 of trapezium: \"))\n    # height = int(input(\"enter height of trapezium: \"))\n    # height = height * 2\n    if base1 < base2:\n        temp1 = base1\n        base1 = base2\n        base2 = temp1\n    length = ((base1 + base2) / 2)\n    area = length * height\n    if height % 2 == 0:\n        median = (length / 2) - math.sqrt(area / 2)\n    else:\n        median = (length / 2) + math.sqrt(area / 2)\n    return median\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    a = height/2\n    b = base1 + base2\n    return ((a*b)/2)\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    return 0.5*(base1+base2) + 0.5*height\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base1 = float(base1)\n    base2 = float(base2)\n    height = float(height)\n    if (base1 + base2) <= height:\n        print('Height is not big enough for this trapezium.')\n    else:\n        print('Height: {}'.format(height))\n        print('Base 1: {}'.format(base1))\n        print('Base 2: {}'.format(base2))\n        area = (base1 + base2) * height / 2\n        print('Area: {:.2f}'.format(area))\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    base3 = base1 + base2\n    trapezium_length = (base3 * height)/2\n    return trapezium_length\n"
    },
    {
        "number": 432,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def median_trapezium(base1,base2,height):\n    '''\n    Write a function to find the median length of a trapezium.\n    '''\n    #calculate area of trapezium\n    area = base1 + base2 + height\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if (len(arr) == 0) or (number > arr[len(arr)-1]):\n        return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    arr_len = len(arr)\n    for i in range(arr_len):\n        if number > arr[i]:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    # check whether the entered number is greater than the elements of the given array\n    # if the entered number is greater than the elements of the given array\n    # return True, else return False.\n    if arr[-1] < number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    if len(arr) == 0:\n        return False\n    \n    index = 0\n    found = False\n    while index < len(arr) and not found:\n        if arr[index] >= number:\n            found = True\n        else:\n            index += 1\n    return found\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    result = []\n    for i in range(len(arr)):\n        if arr[i] > number:\n            result.append(arr[i])\n    return result\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in arr:\n        if number <= i:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if arr[i] > number:\n            return True\n    return False\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(len(arr)):\n        if number > arr[i]:\n            print(\"Yes, number is greater than the array element\")\n            return\n    print(\"No, number is smaller than the array element\")\n"
    },
    {
        "number": 433,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_greater(arr, number):\n    '''\n    Write a function to check whether the entered number is greater than the elements of the given array.\n    '''\n    for i in range(0, len(arr)):\n        if number > arr[i]:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = re.compile(r'ab+')\n    result = pattern.search(text)\n    if result:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'a+b')\n    match = regex.search(text)\n    return True if match else False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # Check if there are 2 consecutive a's\n    # If there are 2 a's then a*b*c*d*f*g*h*i*j*k*l*m*n*o*p*q*r*s*t*u*v*w*x*y*z\n    if re.search(r'(?=(a[bcdfghjklmnpqrstvwxyz]{2}))',text):\n        # If so, return true\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    def text_match_one(text):\n        pattern = re.compile(r\"([ab]+\\b)\")\n        result = pattern.findall(text)\n        return result\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    # pattern = r\"ab+\"\n    # pattern = re.compile(r\"ab+\")\n    # match = pattern.match(\"ab\")\n    # print(match)\n    # match = pattern.match(\"aab\")\n    # print(match)\n    # match = pattern.match(\"abbbb\")\n    # print(match)\n    # match = pattern.match(\"abbb\")\n    # print(match)\n    # match = pattern.match(\"abbbaaa\")\n    # print(match)\n    # match = pattern.match(\"abbab\")\n    # print(match)\n    # match = pattern.match(\"abbbbab\")\n    # print(match)\n    # match = pattern.match(\"abbbbbb\")\n    # print(match)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    pattern = r'ab+'\n    match = re.search(pattern,text)\n    if match:\n        return match.group()\n    else:\n        return None\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    return re.search(r'ab',text)\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    if re.match(r'^ab.*?b$',text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    regex = re.compile(r'ab')\n    if re.search(regex, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 434,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_one(text):\n    '''\n    Write a function that matches a string that has an a followed by one or more b's.\n    '''\n    match = re.findall('(ab*)',text)\n    return len(match)!= 0\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return int(n%10)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    # return n % 10\n    # return 10 - (n % 10)\n    return (n % 10) * (-1)\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if (n == 0):\n        return 1\n    if (n == 1):\n        return 0\n    if (n > 1):\n        return (n%10)\n    \n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if type(n) is not int:\n        return None\n    if n <= 0 :\n        return None\n    if n % 10 == 0:\n        return 0\n    if n % 10!= 0 :\n        i = n // 10\n        return (last_Digit(i) + 1) % 10\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n <= 0 :\n        return 1\n    else :\n        return int((n%10)+(n//10))\ndef last_Digit_List(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n <= 0 :\n        return 0\n    else :\n        while n > 9 :\n            n = last_Digit(n)\n        return n\ndef reverse(s) :\n    '''\n    Write a python function to reverse a string.\n    '''\n    return s[::-1]\ndef reverse_List(s) :\n    '''\n    Write a python function to reverse a string.\n    '''\n    s_list = list(s)\n    s_list.reverse()\n    return ''.join(s_list)\ndef sum_Strings(s1,s2) :\n    '''\n    Write a python function to find the sum of two strings.\n    '''\n    return s1 + s2\ndef sum_Strings_List(s1,s2) :\n    '''\n    Write a python function to find the sum of two strings.\n    '''\n    s1_list = list(s1)\n    s2_list = list(s2)\n    s1_list.extend(s2_list)\n    return ''.join(s1_list)\ndef sum_Strings_List_Pos(s1,s2) :\n    '''\n    Write a python function to find the sum of two strings.\n    '''\n    s1_list = list(s1)\n    s2_list = list(s2)\n    s1_list.extend(s2_list)\n    s1_list = list(map(int, s1_list))\n    s1_list.extend(list(map(int, s2_list)))\n    return sum(s1_list)\ndef remove_vowels(s) :\n    '''\n    Write a python function to remove vowels from a given string.\n    '''\n    s_list = list(s)\n    for index in range(len(s_list)) :\n        if s_list[index] in ['a','e','i','o','u','A','E','I','O','U'] :\n            s_list[index] = ''\n    return ''.join(s_list)\ndef remove_vowels_List(s) :\n    '''\n    Write a python function to remove vowels from a given string.\n    '''\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    s_list = list(s)\n    for index in range(len(s_list)) :\n        if s_list[index] in vowels :\n            s_list[index] = ''\n    return ''.join(s_list)\ndef missing_Numbers(s) :\n    '''\n    Write a python function to find the missing numbers.\n    '''\n    s_list = list(s)\n    if len(s) == len(set(s_list)) :\n        return '0'\n    else :\n        return ''.join(list(set(s) - set(s_list)))\ndef missing_Numbers_List(s) :\n    '''\n    Write a python function to find the missing numbers.\n    '''\n    s_list = list(s)\n    if len(s) == len(set(s_list)) :\n        return '0'\n    else :\n        return ''.join(list(set(range(len(s_list)))-set(s_list)))\ndef missing_Numbers_List_Pos(s) :\n    '''\n    Write a python function to find the missing numbers.\n    '''\n    s_list = list(s)\n    if len(s) == len(set(s_list)) :\n        return '0'\n    else :\n        return list(set(range(len(s_list)))-set(s_list))\ndef multiply_numbers(s) :\n    '''\n    Write a python function to multiply the numbers of a given string.\n    '''\n    s_list = list(s)\n    if s_list == sorted(s_list) :\n        return '0'\n    else :\n        return sum(list(map(int,s_list)))\ndef multiply_numbers_List(s) :\n    '''\n    Write a python function to multiply the numbers of a given string.\n    '''\n    s_list = list(s)\n    if s_list == sorted(s_list) :\n        return '0'\n    else :\n        return sum(list(map(int,s_list)))\ndef multiply_numbers_List_Pos(s) :\n    '''\n    Write a python function to multiply the numbers of a given string.\n    '''\n    s_list = list(s)\n    if s_list == sorted(s_list) :\n        return '0'\n    else :\n        s_list.sort()\n        return sum(list(map(int,s_list)))\ndef multiply_numbers_List_Pos_Reverse(s) :\n    '''\n    Write a python function to multiply the numbers of a given string.\n    '''\n    s_list = list(s)\n    if s_list == sorted(s_list) :\n        return '0'\n    else :\n        s_list.sort(reverse=True)\n        return sum(list(map(int,s_list)))\ndef prime_numbers(n) :\n    '''\n    Write a python function to find prime numbers from a given number.\n    '''\n    if n < 1 :\n        return []\n    s = []\n    if n == 2 :\n        s.append(2)\n        return s\n    if n == 3 :\n        s.append(3)\n        return s\n    if n > 3 :\n        for i in range(3,n) :\n            if n % i == 0 :\n                break\n        if i == n :\n            s.append(n)\n    return s\ndef prime_numbers_List(n) :\n    '''\n    Write a python function to find prime numbers from a given number.\n    '''\n    if n < 1 :\n        return []\n    s = []\n    if n == 2 :\n        s.append(2)\n        return s\n    if n == 3 :\n        s.append(3)\n        return s\n    if n > 3 :\n        for i in range(3,n) :\n            if n % i == 0 :\n                break\n        if i == n :\n            s.append(n)\n    return s\ndef prime_numbers_List_Pos(n) :\n    '''\n    Write a python function to find prime numbers from a given number.\n    '''\n    if n < 1 :\n        return []\n    s = []\n    if n == 2 :\n        s.append(2)\n        return s\n    if n == 3 :\n        s.append(3)\n        return s\n    if n > 3 :\n        for i in range(3,n) :\n            if n % i == 0 :\n                break\n        if i == n :\n            s.append(n)\n    return s\ndef prime_numbers_List_Pos_Reverse(n) :\n    '''\n    Write a python function to find prime numbers from a given number.\n    '''\n    if n < 1 :\n        return []\n    s = []\n    if n == 2 :\n        s.append(2)\n        return s\n    if n == 3 :\n        s.append(3)\n        return s\n    if n > 3 :\n        for i in range(3,n) :\n            if n % i == 0 :\n                break\n        if i == n :\n            s.append(n)\n    return s\ndef sum_arr_List(arr) :\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr)\ndef sum_arr_List_Pos(arr) :\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr,0)\ndef sum_arr_List_Pos_Reverse(arr) :\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    return sum(arr,0"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if n < 0 :\n        n = -1 * n\n    while n > 0 :\n        n = n - 1\n    return n\n    \ndef find_fibonacci_last_digit(num) :\n    '''\n    Given a number, find the last digit of its fibonacci sum.\n    '''\n    last = 1\n    if num < 0 :\n        last = -1\n    else :\n        last = 0\n    curr_index = 1\n    curr = 1\n    while curr <= num :\n        curr = curr_index + curr_index\n        curr_index += curr\n    return (curr + last) % 10\n    \ndef same_last_two_Digits(a,b) :\n    '''\n    Write a python function to check if two numbers are the same.\n    '''\n    if a < 0 :\n        a = -1 * a\n    if b < 0 :\n        b = -1 * b\n    return a == b\n    \ndef abs_Permutation(n) :\n    '''\n    Write a python function to find the absolute permutation of a given number.\n    '''\n    i = 0\n    result = []\n    while i < len(n) :\n        if n[i] > 0 :\n            result.append(n[i])\n        else :\n            result.append(-1 * n[i])\n        i += 1\n    return result\n    \ndef is_pallindrome(n) :\n    '''\n    Write a python function to check if a given number is a pallindrome.\n    '''\n    string = str(n)\n    return string == string[::-1]\n    \ndef is_anagram(word1, word2) :\n    '''\n    Write a python function to check if two words are anagrams.\n    '''\n    word1 = word1.lower()\n    word2 = word2.lower()\n    if len(word1)!= len(word2) :\n        return False\n    else :\n        word_set = set(word1)\n        if word_set!= set(word2) :\n            return False\n        else :\n            return True\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set))\n    \ndef is_palindrome(word) :\n    '''\n    Write a python function to check if a given word is a palindrome.\n    '''\n    word = word.lower()\n    word_set = set(word)\n    if len(word_set)!= len(word) :\n        return False\n    else :\n        word_set.remove(' ')\n        return word_set == set(reversed(word_set)"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    result = n % 10\n    return result\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    if(n>0) :\n        return int(str(n)[-1])\n    return int(str(n)[0])\n"
    },
    {
        "number": 435,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit(n) :\n    '''\n    Write a python function to find the last digit of a given number.\n    '''\n    return n % 10\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    list1 = [1, -2, 3, -4, 5]\n    return [x * -1 for x in list1]\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    l1 = []\n    for i in list1:\n        l1.append(-1*i)\n    return l1\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i*-1)\n    return new_list\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    result = []\n    for i in list1:\n        result.append(-i)\n    return result\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(-i)\n    return new_list\n    \nlist_input = [-6, -1, 4, -2, -8, -4]\nprint(neg_nos(list_input))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_numbers = []\n    for i in list1:\n        if i < 0:\n            neg_numbers.append(i)\n    return neg_numbers\nprint(neg_nos([-3, -1, -5, 6, -8]))\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    neg_nos = []\n    for num in list1:\n        if num < 0:\n            neg_nos.append(num)\n    return neg_nos\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    count = 0\n    for i in list1:\n        if i < 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    \n    neg_nos_list = []\n    for i in list1:\n        if i < 0:\n            neg_nos_list.append(i)\n"
    },
    {
        "number": 436,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def neg_nos(list1):\n    '''\n    Write a python function to return the negative numbers in a list.\n    '''\n    return list(filter(lambda x:x<0,list1))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_char_list = []\n    for i in range(len(str1)):\n        if str1[i]%2!= 0:\n            odd_char_list.append(str1[i])\n        else:\n            continue\n    return ''.join(odd_char_list)\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i in new_str:\n            continue\n        else:\n            new_str += i\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_list=[]\n    for i in str1:\n        if i not in odd_list:\n            odd_list.append(i)\n    return ''.join(odd_list)\n    \n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    newstr = ''\n    for i in range(len(str1)):\n        if i % 2 == 0:\n            newstr = newstr + str1[i]\n    return newstr\nprint(remove_odd('aabccaaa'))\nprint(remove_odd('aaa'))\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace(\"o\",\"\")\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    return str1.replace('1','')\n    \ndef reduce_number(num):\n    '''\n    Write a function to convert number to words.\n    '''\n    if num>=1 and num<=12:\n        if num==1:\n            return 'one'\n        elif num==2:\n            return 'two'\n        elif num==3:\n            return 'three'\n        elif num==4:\n            return 'four'\n        elif num==5:\n            return 'five'\n        elif num==6:\n            return'six'\n        elif num==7:\n            return'seven'\n        elif num==8:\n            return 'eight'\n        elif num==9:\n            return 'nine'\n        elif num==10:\n            return 'ten'\n        elif num==11:\n            return 'eleven'\n        elif num==12:\n            return 'twelve'\n        else:\n            return 'null'\n    elif num>12 and num<=24:\n        if num==13:\n            return 'thirteen'\n        elif num==14:\n            return 'fourteen'\n        elif num==15:\n            return 'fifteen'\n        elif num==16:\n            return'sixteen'\n        elif num==17:\n            return'seventeen'\n        elif num==18:\n            return 'eighteen'\n        elif num==19:\n            return 'nineteen'\n        elif num==20:\n            return 'twenty'\n        elif num==21:\n            return 'twenty one'\n        elif num==22:\n            return 'twenty two'\n        elif num==23:\n            return 'twenty three'\n        elif num==24:\n            return 'twenty four'\n        else:\n            return 'null'\n    elif num>24 and num<=36:\n        if num==25:\n            return 'twenty five'\n        elif num==26:\n            return 'twenty six'\n        elif num==27:\n            return 'twenty seven'\n        elif num==28:\n            return 'twenty eight'\n        elif num==29:\n            return 'twenty nine'\n        elif num==30:\n            return 'thirty'\n        elif num==31:\n            return 'thirty one'\n        elif num==32:\n            return 'thirty two'\n        elif num==33:\n            return 'thirty three'\n        elif num==34:\n            return 'thirty four'\n        elif num==35:\n            return 'thirty five'\n        elif num==36:\n            return 'thirty six'\n        else:\n            return 'null'\n    elif num>36 and num<=40:\n        if num==37:\n            return 'thirty seven'\n        elif num==38:\n            return 'thirty eight'\n        elif num==39:\n            return 'thirty nine'\n        elif num==40:\n            return 'fourty'\n        elif num==41:\n            return 'fourty one'\n        elif num==42:\n            return 'fourty two'\n        elif num==43:\n            return 'fourty three'\n        elif num==44:\n            return 'fourty four'\n        elif num==45:\n            return 'fourty five'\n        elif num==46:\n            return 'fourty six'\n        elif num==47:\n            return 'fourty seven'\n        elif num==48:\n            return 'fourty eight'\n        elif num==49:\n            return 'fourty nine'\n        else:\n            return 'null'\n    elif num>40 and num<=50:\n        if num==51:\n            return 'fourty nine one'\n        elif num==52:\n            return 'fourty nine two'\n        elif num==53:\n            return 'fourty nine three'\n        elif num==54:\n            return 'fourty nine four'\n        elif num==55:\n            return 'fourty nine five'\n        elif num==56:\n            return 'fourty nine six'\n        elif num==57:\n            return 'fourty nine seven'\n        elif num==58:\n            return 'fourty nine eight'\n        elif num==59:\n            return 'fourty nine nine'\n        elif num==60:\n            return 'fourty ten'\n        elif num==61:\n            return 'fourty eleven'\n        elif num==62:\n            return 'fourty twelve'\n        elif num==63:\n            return 'fourty thirteen'\n        elif num==64:\n            return 'fourty fourteen'\n        elif num==65:\n            return 'fourty fifteen'\n        elif num==66:\n            return 'fourty sixteen'\n        elif num==67:\n            return 'fourty seventeen'\n        elif num==68:\n            return 'fourty eighteen'\n        elif num==69:\n            return 'fourty nineteen'\n        elif num==70:\n            return 'fourty twenty'\n        elif num==71:\n            return 'fourty twenty one'\n        elif num==72:\n            return 'fourty two two'\n        elif num==73:\n            return 'fourty two three'\n        elif num==74:\n            return 'fourty two four'\n        elif num==75:\n            return 'fourty two five'\n        elif num==76:\n            return 'fourty two six'\n        elif num==77:\n            return 'fourty two seven'\n        elif num==78:\n            return 'fourty two eight'\n        elif num==79:\n            return 'fourty two nine'\n        elif num==80:\n            return 'fourty three'\n        elif num==81:\n            return 'fourty three one'\n        elif num==82:\n            return 'fourty three two'\n        elif num==83:\n            return 'fourty three three'\n        elif num==84:\n            return 'fourty three four'\n        elif num==85:\n            return 'fourty three five'\n        elif num==86:\n            return 'fourty three six'\n        elif num==87:\n            return 'fourty three seven'\n        elif num==88:\n            return 'fourty three eight'\n        elif num==89:\n            return 'fourty three nine'\n        elif num==90:\n            return 'fourty four'\n        elif num==91:\n            return 'fourty four one'\n        elif num==92:\n            return 'fourty four two'\n        elif num==93:\n            return 'fourty four three'\n        elif num==94:\n            return 'fourty four four'\n        elif num==95:\n            return 'fourty four five'\n        elif num==96:\n            return 'fourty four six'\n        elif num==97:\n            return 'fourty four seven'\n        elif num==98:\n            return 'fourty four eight'\n        elif num==99:\n            return 'fourty four nine'\n        elif num==100:\n            return 'fourty five'\n        elif num==101:\n            return 'fourty five one'\n        elif num==102:\n            return 'fourty five two'\n        elif num==103:\n            return 'fourty five three'\n        elif num==104:\n            return 'fourty five four'\n        elif num==105:\n            return 'fourty five five'\n        elif num==106:\n            return 'fourty five six'\n        elif num==107:\n            return 'fourty five seven'\n        elif num==108:\n            return 'fourty five eight'\n        elif num==109:\n            return 'fourty five nine'\n        elif num==110:\n            return 'fourty six'\n        elif num==111:\n            return 'fourty six one'\n        elif num==112:\n            return 'fourty six two'\n        elif num==113:\n            return 'fourty six three'\n        elif num==114:\n            return 'fourty six four'\n        elif num==115:\n            return 'fourty six five'\n        elif num==116:\n            return 'fourty six six'\n        elif num==117:\n            return 'fourty six seven'"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_char_list = []\n    for char in str1:\n        if char not in odd_char_list:\n            odd_char_list.append(char)\n    str1 = ''.join(odd_char_list)\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    if len(str1) <= 2:\n        return str1\n    str1 = str1.replace(str1[0], \"\").replace(str1[-1], \"\")\n    return str1\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    new_str = \"\"\n    for i in str1:\n        if i.isdigit():\n            new_str = new_str + i\n    return new_str\n"
    },
    {
        "number": 437,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_odd(str1):\n    '''\n    Write a function to remove odd characters in a string.\n    '''\n    odd_char = str1[::2]\n    return odd_char\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for item1, item2 in zip(test_list, test_list[1:]):\n        if item1 == item2:\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    # your code here\n    count = 0\n    for i in test_list:\n        for j in test_list:\n            if i<j:\n                count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    n = len(test_list)\n    count = 0\n    i = 0\n    while i < n:\n        j = i+1\n        while j < n and test_list[i] == test_list[j]:\n            count += 1\n            j += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    \n    from collections import Counter\n    cnt = 0\n    for i in range(len(test_list)):\n        if test_list[i][0] > test_list[i][1]:\n            cnt += 1\n    return cnt\n    \n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if test_list[i][0] == test_list[j][1] and test_list[j][0] == test_list[i][1]:\n                count += 1\n    print(f'Number of bidirectional tuple pairs: {count}')\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len(set(test_list))\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    return len([x for x in test_list if len(x)==2 and x[0][::-1]==x[1]])\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    count = 0\n    for i in range(len(test_list)):\n        if i == len(test_list)-1:\n            continue\n        elif test_list[i] == (test_list[i+1][1], test_list[i+1][0]):\n            count += 1\n    return count\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    pairs = []\n    for i in range(len(test_list)-1):\n        if test_list[i] + (test_list[i+1],) in pairs:\n            return True\n        else:\n            pairs.append(test_list[i] + (test_list[i+1],))\n    return False\n"
    },
    {
        "number": 438,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_bidirectional(test_list):\n    '''\n    Write a function to count bidirectional tuple pairs.\n    '''\n    assert (len(test_list) == 0 or (len(test_list) % 2 == 1))\n    count = 0\n    for i in range(0, len(test_list), 2):\n        first_element = test_list[i]\n        second_element = test_list[i+1]\n        if first_element == second_element:\n            count += 1\n    return count\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    total = 0\n    for i in L:\n        total += i\n    return total\n    \ndef sum_of_list(L):\n    '''\n    Write a function to return the sum of all the elements in a list.\n    '''\n    total = 0\n    for i in L:\n        total += i\n    return total\n    \ndef reverse_list(L):\n    '''\n    Write a function to reverse the order of the elements in a list.\n    '''\n    L = L[::-1]\n    return L\n    \ndef binary_search(L, item):\n    '''\n    Write a function to find the position of an item in a list using binary search.\n    '''\n    low = 0\n    high = len(L) - 1\n    while low <= high:\n        mid = (high + low) // 2\n        if item == L[mid]:\n            return mid\n        elif item < L[mid]:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n    \ndef sort_list(L):\n    '''\n    Write a function to sort the elements in a list in ascending order.\n    '''\n    new_list = []\n    for item in L:\n        if item not in new_list:\n            new_list.append(item)\n    new_list.sort()\n    return new_list\n    \ndef bubble_sort(L):\n    '''\n    Write a function to sort the elements in a list in ascending order.\n    '''\n    new_list = []\n    for item in L:\n        if item not in new_list:\n            new_list.append(item)\n    for i in range(len(new_list)):\n        for j in range(len(new_list)-1):\n            if new_list[j] > new_list[j+1]:\n                temp = new_list[j]\n                new_list[j] = new_list[j+1]\n                new_list[j+1] = temp\n    return new_list\n    \ndef main():\n    '''\n    Main function\n    '''\n    L = [2, 4, 5, 6, 1, 3, 7, 8, 9, 10, -1, 0, -2]\n    print(f'The list of numbers is {L}')\n    print(f'The minimum element is {min(L)}')\n    print(f'The maximum element is {max(L)}')\n    print(f'The sum of the numbers in the list is {sum_of_list(L)}')\n    print(f'The multiple of the numbers in the list is {multiple_to_single(L)}')\n    print(f'The reverse of the list is {reverse_list(L)}')\n    print(f'The position of the number 7 in the list is {binary_search(L,7)}')\n    print(f'The sorted list is {sort_list(L)}')\n    print(f'The list in ascending order is {bubble_sort(L)}')\n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    for x in L:\n        if type(x) is not int:\n            return 0\n    return sum(L)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    if not L:\n        return None\n    elif len(L) == 1:\n        return L[0]\n    else:\n        L = L[::-1]\n        return int(''.join(map(str, L)))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    s = ''\n    for i in L:\n        s += str(i)\n    return int(s)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(str(L).strip(\"[]\").replace(\",\",\"\"))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    numbers = []\n    for n in range(len(L)):\n        numbers.append(L[n])\n    return sum(numbers)\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_1(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_2(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_3(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_4(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_5(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_6(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_7(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_8(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_9(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_10(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_11(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_12(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_13(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_14(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_15(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_16(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_17(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_18(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_19(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_20(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_21(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_22(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_23(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_24(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_25(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_26(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_27(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_28(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_29(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_30(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_31(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_32(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_33(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join([str(i) for i in L]))\n    \n    \ndef multiple_to_single_34(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int(''.join("
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    #L = [2, 3, 5]\n    single_int = 0\n    for item in L:\n        single_int += item\n    return single_int\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    return int( \"\".join([str(i) for i in L]))\n"
    },
    {
        "number": 439,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiple_to_single(L):\n    '''\n    Write a function to join a list of multiple integers into a single integer.\n    '''\n    def join_str_list(string_list):\n        return str(int(\"\".join(string_list)))\n    \n    def join_list(int_list):\n        int_str = \"\".join([str(i) for i in int_list])\n        return int(int_str)\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_list = ['abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', 'abominably', "
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # Initialize a list to store adverbs\n    adverb = []\n    # Loop through the text \n    for i in range(0,len(text)):\n        # If the current position is an adverb\n        if re.match(r'\\w*[b|B|c|C|d|D|e|E|f|F|g|G|h|H|i|I|j|J|k|K|l|L|m|M|n|N|o|O|p|P|q|Q|r|R|s|S|t|T|u|U|v|V|x|X|y|Y|z|Z]*[aeiou][\\w*]*[b|B|c|C|d|D|e|E|f|F|g|G|h|H|i|I|j|J|k|K|l|L|m|M|n|N|o|O|p|P|q|Q|r|R|s|S|t|T|u|U|v|V|x|X|y|Y|z|Z]*[aeiou]*[\\w*]*[b|B|c|C|d|D|e|E|f|F|g|G|h|H|i|I|j|J|k|K|l|L|m|M|n|N|o|O|p|P|q|Q|r|R|s|S|t|T|u|U|v|V|x|X|y|Y|z|Z]*', text[i]):\n            # Append the current adverb to the list\n            adverb.append(text[i])\n    # Return the list \n    return adverb\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    \n    text = text.lower()\n    adverb_list = [\"about\", \"after\", \"against\", \"along\", \"amid\", \"among\", \"around\", \"as\", \"at\", \"before\", \"behind\", \"below\", \"beneath\", \"beside\", \"between\", \"beyond\", \"but\", \"by\", \"down\", \"during\", \"for\", \"from\", \"in\", \"into\", \"near\", \"of\", \"off\", \"on\", \"onto\", \"out\", \"over\", \"past\", \"per\", \"round\", \"roundabout\", \"since\", \"till\", \"to\", \"toward\", \"towards\", \"under\", \"underneath\", \"until\", \"up\", \"upon\", \"versus\", \"via\", \"with\"]\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    my_list = text.split()\n    res = {}\n    for i in range(len(my_list)):\n        if my_list[i] in ['or', 'and', 'or', 'or', 'or']:\n            if my_list[i] == 'or':\n                res['or'] = i\n            else:\n                res['and'] = i\n            break\n    return res\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def _find_adverb_position(text):\n        # Find first Adverb in sentence\n        adverb_positions = re.finditer(r\"\\bADV\\b\", text)\n        adverb_pos = []\n        for i in adverb_positions:\n            adverb_pos.append(i.start())\n        return adverb_pos\n    adverb_pos = _find_adverb_position(text)\n    return adverb_pos\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    #Find the first adverb\n    result = re.finditer(r'(\\w+)(\\s+)(\\w+)', text)\n    #Check if the result has any objects\n    if result:\n        #If it does, iterate over the result and return the information\n        for result in result:\n            if result.group(3) == 'adv':\n                return result.span()\n            else:\n                return None\n    else:\n        #If it does not, return None\n        return None\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    # YOUR CODE HERE\n    ad_verb_list = []\n    for i in range(len(text)):\n        if text[i] == \"adverb\":\n            ad_verb_list.append(i)\n    return ad_verb_list\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    adverb_pattern = re.compile(\"(.)*(?:(?:^|(?<=\\W))([A-Z]{3,})(?=$|(?<=\\W))|([A-Z]{3,})(?=\\W))\")\n    adverb_position_list = []\n    matches = re.finditer(adverb_pattern,text)\n    for match in matches:\n        adverb_position_list.append((match.group(),match.start(),match.end()))\n    return adverb_position_list\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    def remove_punctuation(text):\n        text = re.sub(r'[^\\w\\s]','',text)\n        return text.lower()\n    def replace_punctuation(text):\n        text = text.lower()\n        text = re.sub(r'[^\\w\\s]','',text)\n        return text\n    text = remove_punctuation(text)\n    text = replace_punctuation(text)\n    def split_sentences(text):\n        text = re.split('\\n|\\.|\\?|!|;|:|,',text)\n        return text\n    text = split_sentences(text)\n    def remove_stop_words(text):\n        from nltk.corpus import stopwords\n        words = text.split()\n        text = \" \".join([word for word in words if word not in stopwords.words()])\n        return text\n    text = remove_stop_words(text)\n    def get_sentence_words(text):\n        words = text.split()\n        return words\n    words = get_sentence_words(text)\n    def get_sentence_pos(words):\n        sentence_pos = []\n        for i in range(len(words)):\n            if words[i] == 'the':\n                if i < len(words) - 1:\n                    if words[i+1] == 'the':\n                        sentence_pos.append(i)\n                        sentence_pos.append(i+1)\n                    elif i > 0:\n                        if words[i-1] == 'the':\n                            sentence_pos.append(i)\n                            sentence_pos.append(i-1)\n            elif words[i] == 'a':\n                if i < len(words) - 1:\n                    if words[i+1] == 'a':\n                        sentence_pos.append(i)\n                        sentence_pos.append(i+1)\n        return sentence_pos\n    sentence_pos = get_sentence_pos(words)\n    def get_adverbs_position(sentence_pos):\n        adverbs_position = []\n        for i in range(len(sentence_pos)):\n            if sentence_pos[i] == 0:\n                if i < len(sentence_pos)-1:\n                    if sentence_pos[i+1] == 1:\n                        adverbs_position.append(i)\n                        adverbs_position.append(i+1)\n                        adverbs_position.append(sentence_pos[i+2])\n                        adverbs_position.append(sentence_pos[i+2]+1)\n            elif sentence_pos[i] == 1:\n                if i < len(sentence_pos)-1:\n                    if sentence_pos[i+1] == 2:\n                        adverbs_position.append(i)\n                        adverbs_position.append(i+1)\n                        adverbs_position.append(sentence_pos[i+2])\n                        adverbs_position.append(sentence_pos[i+2]+1)\n        return adverbs_position\n    adverbs_position = get_adverbs_position(sentence_pos)\n    def find_adverb_word(text):\n        adverb_word = []\n        adverb_word.append(text[0])\n        for i in range(len(adverbs_position)):\n            if adverbs_position[i] == 0:\n                adverb_word.append(text[adverbs_position[i]+1])\n            elif adverbs_position[i] == 1:\n                adverb_word.append(text[adverbs_position[i]-1])\n            elif adverbs_position[i] == 2:\n                adverb_word.append(text[adverbs_position[i]-2])\n        return adverb_word\n    adverb_word = find_adverb_word(text)\n    adverb_word_string = \" \".join(adverb_word)\n    return adverb_word_string\n"
    },
    {
        "number": 440,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverb_position(text):\n    '''\n    Write a function to find the first adverb and their positions in a given sentence.\n    '''\n    pos_list = []\n    for word in text:\n        if word == 'to':\n            pos_list.append(text.index(word))\n    return pos_list\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (6*l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    area = 6*(l**2)\n    return area\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l*l*6.0)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    l=l**2\n    print(l)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*l**2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    s1 = 6*l**2\n    return s1\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6*(l**2)\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return 6 * l ** 2\n"
    },
    {
        "number": 441,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cube(l):\n    '''\n    Write a function to find the surface area of a cube of a given size.\n    '''\n    return (l * l * 6.0)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in nums:\n        if i > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    pos_count = 0\n    for num in nums:\n        if num > 0:\n            pos_count += 1\n    return pos_count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for num in nums:\n        if num > 0:\n            count+=1\n    return count/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return sum(nums)/len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            count += 1\n    return count\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    # if nums == []:\n    #     return 0\n    # else:\n    #     return len([x for x in nums if x > 0]) / len(nums)\n    '''\n    O(1)\n    '''\n    pos = 0\n    for x in nums:\n        if x > 0:\n            pos += 1\n    return pos / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    a = 0\n    for i in range(len(nums)):\n        if nums[i] > 0:\n            a += 1\n    return a\n    # Your code here\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    count = 0\n    for n in nums:\n        if n > 0:\n            count += 1\n    return count / len(nums)\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    n = 0\n    for num in nums:\n        if num >= 0:\n            n += 1\n    print(n / len(nums))\n"
    },
    {
        "number": 442,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from array import array\ndef positive_count(nums):\n    '''\n    Write a function to find the ration of positive numbers in an array of integers.\n    '''\n    return (sum(1 for num in nums if num > 0))/len(nums)\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = 0\n    for i in range(len(list1)):\n        if max_num < list1[i]:\n            max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    list1.sort()\n    return list1[-1]\nprint(largest_neg([-1, -2, -5, -4, -3, -6, -1, -7]))\nprint(largest_neg([]))\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max=-10000\n    for i in range(0, len(list1)):\n        if list1[i]>max:\n            max=list1[i]\n    return max\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -999999\n    for i in list1:\n        if i < 0 and i > largest:\n            largest = i\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_neg = 0\n    for i in range(len(list1)):\n        if list1[i]<0 and max_neg<list1[i]:\n            max_neg = list1[i]\n    return max_neg\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    if not list1:\n        return -1\n    max = -99999999999\n    for x in list1:\n        if x < max:\n            max = x\n    return max\n    \n    # return max(list1)\n    \nlist1 = [-20, -3, 5, -6, 0, -99] \nprint(largest_neg(list1)) \n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg_num = -9999999999999999999\n    for i in range(0, len(list1)):\n        if list1[i] < largest_neg_num:\n            largest_neg_num = list1[i]\n    return largest_neg_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest = -99999999\n    for number in list1:\n        if number < 0 and number > largest:\n            largest = number\n    return largest\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    max_num = -9999999999\n    for i in range(len(list1)):\n        if list1[i] < 0 and list1[i] > max_num:\n            max_num = list1[i]\n    return max_num\n"
    },
    {
        "number": 443,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_neg(list1): \n    '''\n    Write a python function to find the largest negative number from the given list.\n    '''\n    largest_neg = -1\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(K):\n        test_list.pop(0)\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    if len(test_list) <= K:\n        return test_list\n    else:\n        return list(zip(*(tuple(test_list[i:]) for i in range(K))))\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i][:K]\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    i=0\n    while i < len(test_list):\n        j=0\n        while j < len(test_list[i]):\n            if j+K > len(test_list[i]):\n                del test_list[i][j]\n                j=j-1\n            j=j+K\n        i=i+1\n    return test_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Your code here\n    return [t[:K] for t in test_list]\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # Initialize a new list to store the trimmed tuples\n    new_list = []\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    out_list = []\n    for test in test_list:\n        out_list.append(test[:K])\n    return out_list\n"
    },
    {
        "number": 444,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def trim_tuple(test_list, K):\n    '''\n    Write a function to trim each tuple by k in the given tuple list.\n    '''\n    # create a new list to return\n    result = []\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    index_result = []\n    \n    for x, y in zip(test_tup1, test_tup2):\n        index_result.append(x * y)\n    \n    return tuple(index_result)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    i, j = 0, 0\n    len1, len2 = len(test_tup1), len(test_tup2)\n    test_tup3 = []\n    \n    while i < len1 and j < len2:\n        test_tup3.append(test_tup1[i] * test_tup2[j])\n        i += 1\n        j += 1\n        \n    return tuple(test_tup3)\n    \nprint(index_multiplication((1, 2, 3), (2, 5, 6)))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return (test_tup1[i] * test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(x*y for x,y in zip(test_tup1,test_tup2))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    # Write your solution here\n    a = tuple(map(int, test_tup1))\n    b = tuple(map(int, test_tup2))\n    c = tuple(a*b)\n    return c\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    lst1 = []\n    lst2 = []\n    for i in range(len(test_tup1)):\n        lst1.append(test_tup1[i]*test_tup2[i])\n    for j in range(len(test_tup2)):\n        lst2.append(test_tup1[j]*test_tup2[j])\n    final_lst = lst1+lst2\n    return final_lst\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    test_tup1 = tuple(test_tup1)\n    test_tup2 = tuple(test_tup2)\n    print(test_tup1,'multiplied with', test_tup2, 'is', end=' ')\n    print(test_tup1*test_tup2)\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    return tuple(test_tup1[i]*test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    final_tup = ()\n    for i in range(len(test_tup1)):\n        final_tup = final_tup + (test_tup1[i]*test_tup2[i],)\n    return final_tup\n"
    },
    {
        "number": 445,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def index_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function to perform index wise multiplication of tuple elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        result.append(test_tup1[i] * test_tup2[i])\n    return result\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = Counter(lst)\n    for i in count:\n        if count[i] >= tup:\n            print(\"The count of each element is {}\".format(count[i]))\n    \ndef topl_xor(num1, num2):\n    '''\n    Write a python program to find the bitwise XOR of two numbers.\n    '''\n    num1 = num1 ^ num2\n    print(\"The XOR value of two numbers is {}\".format(num1))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    counts = Counter(tup)\n    for i in lst:\n        counts[i] -= 1\n    return counts\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    if not lst:\n        return 0\n    if len(lst) == 1:\n        return len(lst) if lst[0] == tup else 0\n    cnt = 0\n    for i in range(len(lst)-1):\n        if lst[i] == tup:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    for i in tup:\n        if i in lst:\n            lst[i] += 1\n        else:\n            lst[i] = 1\n    print(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    tup_occ = []\n    for i in range(len(lst)):\n        if (lst[i] in tup):\n            tup_occ.append(lst[i])\n    print(\"Occurence of given tuple \",tup,\" and List : \",lst,\" is : \",Counter(tup_occ))\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    count = 0\n    for i in range(len(lst)):\n        if lst[i] in tup:\n            count += 1\n    return count \n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    occ_count = Counter(lst)\n    for i in tup:\n        if i in occ_count:\n            occ_count[i] = occ_count[i] + 1\n    return occ_count\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst).items()\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    return Counter(lst)\n"
    },
    {
        "number": 446,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter \ndef count_Occurrence(tup, lst): \n    '''\n    Write a python function to count the occurence of all elements of list in a tuple.\n    '''\n    # code here\n    count=0\n    for i in range(0,len(lst)):\n        if(lst[i] in tup):\n            count=count+1\n    return count\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    for num in nums:\n        print(num**3)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i]**3)\n    return result\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x ** 3, nums)\n    \ndef three_letter_nums(words):\n    '''\n    Write a function to find three letter words in a list of words.\n    '''\n    return map(lambda x: x[:3], words)\n    \ndef almost_positive(x):\n    '''\n    Write a function that returns True if x is within 0.01 of being positive.\n    '''\n    return abs(x) >= 0.01\n    \ndef get_first_three_chars(s):\n    '''\n    Write a function that takes a string and returns the first 3 characters of the string.\n    '''\n    return s[:3]\n    \ndef digit_sum(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of all of its digits.\n    '''\n    return sum(list(map(int, str(n))))\n    \ndef sum_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the digits of that integer.\n    '''\n    return sum(list(map(int, str(n))))\n    \ndef first_three_chars(s):\n    '''\n    Write a function that returns the first three characters of a string.\n    '''\n    return s[:3]\n    \ndef four_letter_words(words):\n    '''\n    Write a function that returns only the words that have four letters in them.\n    '''\n    return filter(lambda x: len(x) == 4, words)\n    \ndef more_than_two_char(s):\n    '''\n    Write a function that takes a string and returns the number of characters that are\n    in a string, including itself.\n    '''\n    return len(s)\n    \ndef all_lowercase(s):\n    '''\n    Write a function that returns True if all of the characters in a string are lowercase.\n    '''\n    return s.islower()\n    \ndef word_count(s):\n    '''\n    Write a function that returns the number of words in a string.\n    '''\n    return len(s.split())\n    \ndef four_letters_word(s):\n    '''\n    Write a function that returns the word that appears in a string only once.\n    '''\n    return (s.count('the') == 1 and s.count('is') == 1 and s.count('and') == 1 and s.count('a') == 1 and s.count('in') == 1)\n    \ndef boolean_and(a, b):\n    '''\n    Write a function that returns True if both a and b are True.\n    '''\n    return a and b\n    \ndef boolean_or(a, b):\n    '''\n    Write a function that returns True if a or b is True.\n    '''\n    return a or b\n    \ndef boolean_not(a):\n    '''\n    Write a function that returns the not of a boolean.\n    '''\n    return not a\n    \ndef boolean_xor(a, b):\n    '''\n    Write a function that returns True if a XOR b is True.\n    '''\n    return a ^ b\n    \ndef list_product(nums):\n    '''\n    Write a function that takes a list of numbers and returns the product of those numbers.\n    '''\n    return reduce(lambda a,b: a * b, nums)\n    \ndef set_product(nums):\n    '''\n    Write a function that takes a list of numbers and returns the product of those numbers.\n    '''\n    return reduce(lambda a,b: a * b, set(nums))\n    \ndef is_sorted(nums):\n    '''\n    Write a function that takes a list of numbers and returns True if it is sorted in\n    ascending order and False otherwise.\n    '''\n    return nums == sorted(nums)\n    \ndef max_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the maximum value in the\n    list.\n    '''\n    return max(nums)\n    \ndef min_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the minimum value in the\n    list.\n    '''\n    return min(nums)\n    \ndef mean_numbers(nums):\n    '''\n    Write a function that takes a list of numbers and returns the mean value of those\n    numbers.\n    '''\n    return sum(nums) / len(nums)\n    \ndef digit_count(n):\n    '''\n    Write a function that takes a positive integer n and returns the count of the\n    digits in n.\n    '''\n    return sum(list(map(int, str(n))))\n    \ndef find_odd(nums):\n    '''\n    Write a function that takes a list of numbers and returns True if there is an odd\n    number of numbers and False if there is an even number of numbers.\n    '''\n    return len(nums) % 2\n    \ndef max_odd_digit(nums):\n    '''\n    Write a function that takes a list of integers and returns the digit that appears\n    the most in the numbers.\n    '''\n    return max(list(map(int, str(nums))))\n    \ndef palindrome(s):\n    '''\n    Write a function that returns True if a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef is_palindrome(s):\n    '''\n    Write a function that returns True if a string is a palindrome.\n    '''\n    return s == s[::-1]\n    \ndef longest_palindrome(s):\n    '''\n    Write a function that returns the longest possible palindrome.\n    '''\n    return s[::-1] + s[::-1]\n    \ndef all_capitals(s):\n    '''\n    Write a function that returns True if all the letters in a string are capital\n    letters and False otherwise.\n    '''\n    return s.isupper()\n    \ndef all_lowercase(s):\n    '''\n    Write a function that returns True if all the letters in a string are lowercase\n    letters and False otherwise.\n    '''\n    return s.islower()\n    \ndef has_upper_chars(s):\n    '''\n    Write a function that returns True if any of the letters in a string are uppercase\n    letters and False otherwise.\n    '''\n    return s.isupper()\n    \ndef count_evens(nums):\n    '''\n    Write a function that takes a list of integers and returns the count of even numbers\n    in the list.\n    '''\n    return sum(list(filter(lambda x: x % 2 == 0, nums)))\n    \ndef sum_even_digits(n):\n    '''\n    Write a function that takes a number n and returns the sum of all of the even\n    digits in n.\n    '''\n    return sum(list(map(int, str(n))))\n    \ndef sum_odd_digits(n):\n    '''\n    Write a function that takes a number n and returns the sum of all of the odd\n    digits in n.\n    '''\n    return sum(list(filter(lambda x: x % 2 == 1, list(str(n)))))\n    \ndef sum_of_squares(nums):\n    '''\n    Write a function that takes a list of integers and returns the sum of all the\n    square of numbers in the list.\n    '''\n    return sum(list(map(lambda x: x ** 2, nums)))\n    \ndef sum_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the digits\n    in that integer.\n    '''\n    return sum(list(map(int, str(n))))\n    \ndef sum_of_even_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the even\n    digits in the integer.\n    '''\n    return sum(list(filter(lambda x: x % 2 == 0, list(str(n)))))\n    \ndef sum_of_odd_digits(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the odd\n    digits in th"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return map(lambda x: x**3, nums)\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cubes = []\n    for num in nums:\n        cube = num ** 3\n        cubes.append(cube)\n    return cubes\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return list(map(lambda x: x**3, nums))\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    cube_nums = []\n    for num in nums:\n        cube_nums.append(num**3)\n    return cube_nums\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [x**3 for x in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [num**3 for num in nums]\n"
    },
    {
        "number": 447,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cube_nums(nums):\n    '''\n    Write a function to find cubes of individual elements in a list.\n    '''\n    return [n**3 for n in nums]\nprint(cube_nums([1,2,3,4,5]))\nprint()\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum_n = 0\n    i = 1\n    while i <= n:\n        sum_n = sum_n + i\n        i = i + 1\n    return sum_n\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n\n        n -= 1\n    return sum\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    def find_evens(n):\n        return n%2==0\n    def cal_perrin(n):\n        return (n+1)//2\n    def cal_sum(n):\n        return find_evens(cal_perrin(n))\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    for i in range(0, n):\n        sum += 1\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1: \n        return 0\n    return n + cal_sum(n - 1) \n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 0:\n        return 0\n    return n + cal_sum(n-1)\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    perrin_numbers = []\n    for i in range(1,n+1):\n        perrin_numbers.append(i*(i+1)//2)\n    return sum(perrin_numbers)\nprint(cal_sum(10))"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    s = 0\n    for i in range(1, n):\n        s += i\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    total = 0\n    if n <= 0:\n        return 0\n    if n <= 2:\n        total = n * (n + 1) // 2\n    else:\n        total = n * (n + 1) // 2 + cal_sum(n-2)\n    return total\n"
    },
    {
        "number": 448,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cal_sum(n): \n    '''\n    Write a function to calculate the sum of perrin numbers.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n*(n+1))/2\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    res = []\n    i = 0\n    while i < l:\n        s = ''\n        for j in range(0, min(len(str[i]), l-i)):\n            s += str[i][j]\n        res.append(s)\n        i += 1\n    return res\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    a = []\n    for i in range(len(l)):\n        if len(l[i]) >= l:\n            a.append(l[i])\n    return a\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return list(map(lambda x: x[l], str))\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    for i in range(len(str)):\n        if len(str[i]) == l:\n            return str[i]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    output = []\n    for i in range(0, l):\n        output.append(str[i][0:4])\n    return output\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    max_size = int(l[0])\n    size_count = 0\n    for i in range(len(l)):\n        if len(l[i]) > max_size:\n            l[i] = l[i][:max_size]\n        size_count += 1\n        if size_count == max_size:\n            break\n    return l\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    i = 0\n    while i < len(l):\n        if len(l[i]) == l:\n            l.remove(l[i])\n        else:\n            i += 1\n    return l[:l]\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) <= l:\n        return str\n    else:\n        return str[:l]\n    "
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    if len(str) > l:\n        return \"\".join(str[0:l])\n    return \"\".join(str)\n"
    },
    {
        "number": 450,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_string(str, l):\n    '''\n    Write a function to extract specified size of strings from a given list of string values.\n    '''\n    return str.split(' ')[:l]\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.replace(\" \",\"\")\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    result = text1.strip()\n    return result\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    list1 = re.findall(r'\\s',text1)\n    print(list1)\n    for i in list1:\n        text1 = text1.replace(i,\"\")\n    return text1\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    text2 = \"\"\n    for i in text1:\n        if i!='':\n            text2 += i\n    return text2\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    # \n    text1 = text1.strip()\n    return text1\ndef isPhoneNumber(text1):\n    '''\n    Write a function to check if the given string is a valid phone number.\n    '''\n    # \n    phone_regex = re.compile(r'''(\n    (\\d{3}|\\(\\d{3}\\))? #area code\n    (\\s|-|\\.)? #separator\n    (\\d{3}) #first 3 digits\n    (\\s|-|\\.) #separator\n    (\\d{4}) #last 4 digits\n    (\\s*(ext|x|ext.)\\s*(\\d{2,5}))? #extension\n    )''', re.VERBOSE)\n    \n    phone_numbers = phone_regex.findall(text1)\n    if len(phone_numbers) > 0:\n        return True\n    else:\n        return False\ndef isValidEmailAddress(email_address):\n    '''\n    Write a function that takes in a string and returns a boolean indicating whether or not it is a valid email address.\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    final_text = text1.replace(\" \",\"\")\n    print(final_text)\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    return text1.strip()\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    s = re.sub(r'\\s+', \"\", text1)\n    return s\n"
    },
    {
        "number": 451,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_whitespaces(text1):\n    '''\n    Write a function to remove all whitespaces from the given string.\n    '''\n    print(\"Removing Whitespaces from the given string:\", text1)\n    return re.sub('\\s+','', text1)\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return actual_cost - sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return actual_cost-sale_amount\n    else: \n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount:\n        return (actual_cost - sale_amount)\n    else:\n        return (0)\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = 0\n    if actual_cost <= sale_amount:\n        loss = actual_cost - sale_amount\n    return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if(actual_cost > sale_amount):\n        return actual_cost - sale_amount\n    return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost>sale_amount:\n        return 0\n    else:\n        return actual_cost - sale_amount\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    loss = 0\n    if actual_cost < sale_amount:\n        loss = sale_amount - actual_cost\n        return loss\n    else:\n        return loss\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost > sale_amount: \n        return (actual_cost - sale_amount)\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    if actual_cost-sale_amount>0:\n        return actual_cost-sale_amount\n    else:\n        return 0\n"
    },
    {
        "number": 452,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def loss_amount(actual_cost,sale_amount): \n    '''\n    Write a function that gives loss amount on a sale if the given amount has loss else return 0.\n    '''\n    try:\n        loss_amount = actual_cost - sale_amount\n        if loss_amount < 0:\n            return 0\n        else:\n            return loss_amount\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if (n % i) == 0 :\n            if (i % 2) == 0 :\n                sum += i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s = 0\n    for i in range(1,n):\n        if (n % i) == 0:\n            s += i \n    return s \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    i = 1\n    while n % 2 == 0: \n        print(n, \"is divisible by 2 and hence is even\") \n        n = n / 2\n        i = i + 1\n    print(n, \"is not divisible by 2 and hence is odd\") \n    return i \n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    if (n < 1) : \n        return sum\n    else : \n        for i in range(1, n) : \n            if (n % i == 0) : \n                sum = sum + i; \n        return (sum)\n    "
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if (n%i == 0) : \n            if (i%2 == 0) : \n                sum = sum + i\n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    for i in range(1,n+1) : \n        if(n%i==0) : \n            sum = sum + i \n    return sum\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum = 0\n    factors = []\n    \n    # Generating all the factors of n\n    for i in range(1, (n + 1)):\n        if (n % i == 0):\n            factors.append(i)\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    sum_of_factors = 0\n    i = 1\n    while i <= n : \n        if (n % i == 0) : \n            sum_of_factors += i\n            if i % 2 == 0 : \n                sum_of_factors += i\n        i += 1\n    return sum_of_factors\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    result = 0\n    for i in range(2,n) :\n        if(n % i == 0) :\n            result = result + i \n    print(result)\n    return result\n    \ndef sumofFactors2(n) :\n    '''\n    Write a python function to find the sum of odd factors of a number.\n    '''\n    result = 0\n    for i in range(1,n+1) :\n        if(i % 2!= 0) :\n            result = result + i \n    print(result)\n    return result\n"
    },
    {
        "number": 453,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef sumofFactors(n) : \n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s=0\n    while n!=1:\n        s+=n\n        if n%2==0:\n            n=n/2\n        else:\n            n=n-1\n    return s\ndef sumofFactors2(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s=0\n    while n!=1:\n        if n%2==0:\n            s+=n\n        n=n-1\n    return s\ndef sumofFactors3(n) :\n    '''\n    Write a python function to find the sum of even factors of a number.\n    '''\n    s=0\n    while n!=1:\n        if n%2==0:\n            s+=n\n        n=n-1\n    return s\ndef check_prime(n):\n    '''\n    Write a function to check if a number is prime or not\n    '''\n    if n == 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef check_prime2(n):\n    '''\n    Write a function to check if a number is prime or not\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef check_prime3(n):\n    '''\n    Write a function to check if a number is prime or not\n    '''\n    if n == 1:\n        return False\n    for i in range(2,int(math.sqrt(n))+1):\n        if n % i == 0:\n            return False\n    return True\ndef find_factors(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        if n%2==0:\n            n=n/2\n        else:\n            n=n-1\n    return f\ndef find_factors2(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors3(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors4(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors5(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors6(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors7(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors8(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors9(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors10(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors11(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors12(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors13(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors14(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors15(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors16(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors17(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors18(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors19(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors20(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors21(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors22(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors23(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors24(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n)\n        n=n-1\n    return f\ndef find_factors25(n):\n    '''\n    Write a function to print the factors of a number.\n    '''\n    f=[]\n    while n!=1:\n        f.append(n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search('z',text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    if not re.search('z',text):\n        return False\n    else:\n        return True\n        \n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r\"z\",text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    return re.search(r\"z$\", text)\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    pattern = 'z'\n    matched_wordz = re.findall(pattern, text)\n    return matched_wordz\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    patterns = r'\\bz\\w*\\b'\n    return re.findall(patterns, text)\n    \nprint(text_match_wordz('The quick zebra jumps over the lazy fox'))\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.search(r'z',text)\n    if word:\n        print(\"True\")\n    else:\n        print(\"False\")\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    z_pattern = re.compile('z')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_exactly(text):\n    '''\n    Write a function that matches a word containing a regex'regex'.\n    '''\n    z_pattern = re.compile(r'\\bz\\b')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_start(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at the start of the line.\n    '''\n    z_pattern = re.compile(r'^z')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_end(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at the end of the line.\n    '''\n    z_pattern = re.compile(r'z$')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_middle(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at the middle of the line.\n    '''\n    z_pattern = re.compile(r'z.*')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_middle(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all the places in the line.\n    '''\n    z_pattern = re.compile(r'z.*')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_start(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all the places in the line.\n    '''\n    z_pattern = re.compile(r'^z.*')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_end(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all the places in the line.\n    '''\n    z_pattern = re.compile(r'z.*$')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_all_middle(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all the places in the line.\n    '''\n    z_pattern = re.compile(r'z.*')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_all_start(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all the places in the line.\n    '''\n    z_pattern = re.compile(r'^z.*')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_all_end(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all the places in the line.\n    '''\n    z_pattern = re.compile(r'z.*$')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_all_all_middle(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all the places in the line.\n    '''\n    z_pattern = re.compile(r'z.*')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_exactly_2_middle(text):\n    '''\n    Write a function that matches a word containing a regex'regex' exactly two places in the line.\n    '''\n    z_pattern = re.compile(r'z.*z.*')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_exactly_1_middle(text):\n    '''\n    Write a function that matches a word containing a regex'regex' exactly one place in the line.\n    '''\n    z_pattern = re.compile(r'z.*z$')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_exactly_2_start(text):\n    '''\n    Write a function that matches a word containing a regex'regex' exactly two places in the line.\n    '''\n    z_pattern = re.compile(r'z.*z.*$')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_exactly_1_start(text):\n    '''\n    Write a function that matches a word containing a regex'regex' exactly one place in the line.\n    '''\n    z_pattern = re.compile(r'z.*z$')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_exactly_2_end(text):\n    '''\n    Write a function that matches a word containing a regex'regex' exactly two places in the line.\n    '''\n    z_pattern = re.compile(r'z.*z.*z')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_exactly_1_end(text):\n    '''\n    Write a function that matches a word containing a regex'regex' exactly one place in the line.\n    '''\n    z_pattern = re.compile(r'z.*z$')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_2_middle(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all 2 places in the line.\n    '''\n    z_pattern = re.compile(r'z.*z.*z.*')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_1_middle(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all 1 place in the line.\n    '''\n    z_pattern = re.compile(r'z.*z$')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_2_start(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all 2 places in the line.\n    '''\n    z_pattern = re.compile(r'^z.*z.*z$')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_1_start(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all 1 place in the line.\n    '''\n    z_pattern = re.compile(r'^z.*z$')\n    z_matches = z_pattern.finditer(text)\n    return(z_matches)\ndef text_match_regex_at_all_2_end(text):\n    '''\n    Write a function that matches a word containing a regex'regex' at all 2 places in the line.\n    '''\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    text = text.lower()\n    text = re.sub(r\"\\n\", \"\", text)\n    text = re.sub(r\"\\s+\", \" \", text)\n    text = re.sub(r\"\\d+\", \"\", text)\n    wordz = re.findall(r'z', text)\n    return wordz\n"
    },
    {
        "number": 454,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz(text):\n    '''\n    Write a function that matches a word containing 'z'.\n    '''\n    word = re.compile(r'z')\n    m = word.findall(text)\n    return m\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    print(f\"Input month number: {monthnum2}\")\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        if monthnum2 > 0 and monthnum2 <= 31:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    elif monthnum2 == 2:\n        if monthnum2 > 0 and monthnum2 <= 28:\n            print(\"Yes\")\n        else:\n            print(\"No\")\n    else:\n        print(\"Invalid number\")\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 <= 1:\n        return False\n    elif monthnum2 == 2:\n        return True\n    elif monthnum2 % 4 == 0:\n        return 31\n    else:\n        return 30\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        print(\"Jan has 31 days\")\n    elif monthnum2 == 2:\n        print(\"Feb has 28 days\")\n    elif monthnum2 == 3:\n        print(\"Mar has 31 days\")\n    elif monthnum2 == 4:\n        print(\"Apr has 30 days\")\n    elif monthnum2 == 5:\n        print(\"May has 31 days\")\n    elif monthnum2 == 6:\n        print(\"Jun has 30 days\")\n    elif monthnum2 == 7:\n        print(\"Jul has 31 days\")\n    elif monthnum2 == 8:\n        print(\"Aug has 31 days\")\n    elif monthnum2 == 9:\n        print(\"Sep has 30 days\")\n    elif monthnum2 == 10:\n        print(\"Oct has 31 days\")\n    elif monthnum2 == 11:\n        print(\"Nov has 30 days\")\n    elif monthnum2 == 12:\n        print(\"Dec has 31 days\")\n    else:\n        print(\"Wrong month number\")\n    "
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 > 1 and monthnum2 <= 12:\n        return 31\n    elif monthnum2 == 1:\n        return 31\n    elif monthnum2 == 2:\n        return 29\n    elif monthnum2 == 3:\n        return 31\n    elif monthnum2 == 4:\n        return 30\n    elif monthnum2 == 5:\n        return 31\n    elif monthnum2 == 6:\n        return 30\n    elif monthnum2 == 7:\n        return 31\n    elif monthnum2 == 8:\n        return 31\n    elif monthnum2 == 9:\n        return 30\n    elif monthnum2 == 10:\n        return 31\n    elif monthnum2 == 11:\n        return 30\n    elif monthnum2 == 12:\n        return 31\n    else:\n        return 'Invalid'\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if(monthnum2==4 or monthnum2==6 or monthnum2==9 or monthnum2==11):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 in range(1,13):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    return monthnum2 == 1 or monthnum2 == 3 or monthnum2 == 5 or monthnum2 == 7 or monthnum2 == 8 or monthnum2 == 10 or monthnum2 == 12\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    if monthnum2 == 1:\n        return True\n    elif monthnum2 == 3:\n        return True\n    elif monthnum2 == 5:\n        return True\n    elif monthnum2 == 7:\n        return True\n    elif monthnum2 == 8:\n        return True\n    elif monthnum2 == 10:\n        return True\n    elif monthnum2 == 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 455,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumb_number(monthnum2):\n    '''\n    Write a function to check whether the given month number contains 31 days or not.\n    '''\n    assert monthnum2 in range(1, 13), 'Enter month number in range (1-12)'\n    \n    if monthnum2 in (1, 3, 5, 7, 8, 10, 12):\n        print('31 days in month')\n    elif monthnum2 in (4, 6, 9, 11):\n        print('30 days in month')\n    else:\n        print('31 days in month')\n        \n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    reversed_list = []\n    for element in stringlist:\n        reversed_list.append(element[::-1])\n    return reversed_list\n    \ndef reverse_string_list_recursive(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values using recursion.\n    '''\n    if len(stringlist) == 1:\n        return stringlist\n    return [stringlist[-1]] + reverse_string_list_recursive(stringlist[:-1])\n    \ndef reverse_list(alist):\n    '''\n    Write a function to reverse the order of elements in a given list.\n    '''\n    return alist[::-1]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    n = len(stringlist)\n    mid = n // 2\n    for i in range(mid):\n        stringlist[i], stringlist[~i] = stringlist[~i], stringlist[i]\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    stringlist.reverse()\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    #TODO: Write your function here\n    new_string_list = []\n    for i in range(len(stringlist)):\n        new_string_list.append(stringlist[i][::-1])\n    return new_string_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return stringlist.reverse()\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    for i in range(len(stringlist)):\n        stringlist[i] = stringlist[i][::-1]\n    return stringlist\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    result = []\n    for value in stringlist:\n        result.append(value[::-1])\n    return result\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    # create a new list by reversing each element\n    new_list = []\n    for i in stringlist:\n        new_list.append(i[::-1])\n    return new_list\n"
    },
    {
        "number": 456,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_string_list(stringlist):\n    '''\n    Write a function to reverse each string in a given list of string values.\n    '''\n    return_list = []\n    for i in stringlist:\n        return_list.append(i[::-1])\n    return return_list\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_len = len(lst[0])\n    min_idx = 0\n    for i in range(1,len(lst)):\n        if min_len>len(lst[i]):\n            min_len = len(lst[i])\n            min_idx = i\n    return min_idx\n    \ndef main():\n    \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst = [[1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, 16]]\n    \n    # for list in lst:\n    #     print(Find_Min(list))\n    print(Find_Min(lst))\n    \n    \n    \nif __name__ == '__main__':\n    main()"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    n = len(lst)\n    if n == 0:\n        return None\n    min_length = lst[0]\n    min_sublist = lst[0]\n    for i in range(1, n):\n        if len(lst[i]) < min_length:\n            min_length = len(lst[i])\n            min_sublist = lst[i]\n    return min_sublist\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    res = []\n    for i in range(len(lst)):\n        for j in range(i+1,len(lst)):\n            if len(lst[i]) == len(lst[j]):\n                res.append(lst[i])\n                break\n    \n    return min(res)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst1=sorted(lst)\n    count=0\n    for i in range(0,len(lst)):\n        if lst1[i]==lst[0]:\n            count=count+1\n            if lst1[i+1]==lst[0]:\n                count=count+1\n    if count==len(lst):\n        return -1\n    else:\n        return lst1[count]\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    m_lst = []\n    for i in range(len(lst)):\n        for j in range(len(lst)):\n            if j!= i and lst[i]!= 0:\n                m_lst.append(lst[i])\n    return min(m_lst)\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = lst[0]\n    for i in range(1, len(lst)):\n        if lst[i] < min:\n            min = lst[i]\n            index = i\n    return index\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_lst = []\n    for i in range(len(lst)):\n        if min_lst == []:\n            min_lst.append(lst[i])\n            continue\n        if len(lst[i]) < len(min_lst[0]):\n            min_lst.clear()\n            min_lst.append(lst[i])\n            continue\n        if len(lst[i]) == len(min_lst[0]):\n            min_lst.append(lst[i])\n    return min_lst\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min_list = []\n    for i in range(0, len(lst)):\n        for j in range(i+1, len(lst)):\n            if len(lst[i]) < len(lst[j]):\n                min_list = lst[i]\n            else:\n                min_list = lst[j]\n    return min_list\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    min = len(lst[0])\n    min_sub = []\n    for i in range(len(lst)):\n        if len(lst[i]) < min:\n            min = len(lst[i])\n            min_sub = lst[i]\n    return min_sub\n"
    },
    {
        "number": 457,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Min(lst): \n    '''\n    Write a python function to find the sublist having minimum length.\n    '''\n    lst.sort()\n    min_length=lst[0]\n    for i in lst:\n        if i==min_length:\n            return min_length\n    return min_length\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    area = l*b\n    print('Area of rectangle:',area)\n    return area\n    \ndef rectangle_perimeter(l,b):\n    '''\n    Write a function to find the perimeter of a rectangle.\n    '''\n    perimeter = 2*(l+b)\n    print('Perimeter of rectangle:',perimeter)\n    return perimeter\n    \ndef rectangle_diagonals(l,b):\n    '''\n    Write a function to find the diagonals of a rectangle.\n    '''\n    diagonal = l*b\n    print('Diagonals of rectangle:',diagonal)\n    return diagonal\n    \ndef triangle_area(b,h):\n    '''\n    Write a function to find the area of a triangle.\n    '''\n    area = 1/2*b*h\n    print('Area of triangle:',area)\n    return area\n    \ndef triangle_perimeter(b,h):\n    '''\n    Write a function to find the perimeter of a triangle.\n    '''\n    perimeter = 3*b\n    print('Perimeter of triangle:',perimeter)\n    return perimeter\n    \ndef triangle_diagonals(b,h):\n    '''\n    Write a function to find the diagonals of a triangle.\n    '''\n    diagonal = b+h\n    print('Diagonals of triangle:',diagonal)\n    return diagonal\n    \ndef circle_area(r):\n    '''\n    Write a function to find the area of a circle.\n    '''\n    area = math.pi*r*r\n    print('Area of circle:',area)\n    return area\n    \ndef circle_perimeter(r):\n    '''\n    Write a function to find the perimeter of a circle.\n    '''\n    perimeter = 2*math.pi*r\n    print('Perimeter of circle:',perimeter)\n    return perimeter\n    \ndef circle_circumference(r):\n    '''\n    Write a function to find the circumference of a circle.\n    '''\n    circumference = 2*math.pi*r\n    print('Circumference of circle:',circumference)\n    return circumference\n    \ndef parallelogram_area(h,b):\n    '''\n    Write a function to find the area of a parallelogram.\n    '''\n    area = h*b\n    print('Area of parallelogram:',area)\n    return area\n    \ndef parallelogram_perimeter(h,b):\n    '''\n    Write a function to find the perimeter of a parallelogram.\n    '''\n    perimeter = 2*(h+b)\n    print('Perimeter of parallelogram:',perimeter)\n    return perimeter\n    \ndef parallelogram_diagonals(h,b):\n    '''\n    Write a function to find the diagonals of a parallelogram.\n    '''\n    diagonal = math.sqrt((h**2)+(b**2))\n    print('Diagonals of parallelogram:',diagonal)\n    return diagonal\n    \ndef square_area(l):\n    '''\n    Write a function to find the area of a square.\n    '''\n    area = l*l\n    print('Area of square:',area)\n    return area\n    \ndef square_perimeter(l):\n    '''\n    Write a function to find the perimeter of a square.\n    '''\n    perimeter = 4*l\n    print('Perimeter of square:',perimeter)\n    return perimeter\n    \ndef square_diagonals(l):\n    '''\n    Write a function to find the diagonals of a square.\n    '''\n    diagonal = math.sqrt(2*(l**2))\n    print('Diagonals of square:',diagonal)\n    return diagonal\n    \ndef circle_radius(r):\n    '''\n    Write a function to find the radius of a circle.\n    '''\n    radius = math.sqrt((math.pi*r**2))\n    print('Radius of circle:',radius)\n    return radius\n    \ndef sphere_area(r):\n    '''\n    Write a function to find the area of a sphere.\n    '''\n    area = 4*math.pi*r**3\n    print('Area of sphere:',area)\n    return area\n    \ndef sphere_volume(r):\n    '''\n    Write a function to find the volume of a sphere.\n    '''\n    volume = (4/3)*math.pi*r**3\n    print('Volume of sphere:',volume)\n    return volume\n    \ndef cone_area(r,h):\n    '''\n    Write a function to find the area of a cone.\n    '''\n    area = 1/3*math.pi*r*h\n    print('Area of cone:',area)\n    return area\n    \ndef cone_volume(r,h):\n    '''\n    Write a function to find the volume of a cone.\n    '''\n    volume = math.pi*r*(r+h)\n    print('Volume of cone:',volume)\n    return volume\n    \ndef cylinder_area(r,h):\n    '''\n    Write a function to find the area of a cylinder.\n    '''\n    area = 1/3*math.pi*r*h\n    print('Area of cylinder:',area)\n    return area\n    \ndef cylinder_volume(r,h):\n    '''\n    Write a function to find the volume of a cylinder.\n    '''\n    volume = math.pi*r*(r+h)\n    print('Volume of cylinder:',volume)\n    return volume\n    \ndef cone_parallel_area(r,h,angle):\n    '''\n    Write a function to find the area of a cone with angle parallel to x-axis.\n    '''\n    area = 1/3*math.pi*r*h\n    print('Area of cone:',area)\n    return area\n    \ndef cone_parallel_volume(r,h,angle):\n    '''\n    Write a function to find the volume of a cone with angle parallel to x-axis.\n    '''\n    volume = math.pi*r*(r+h)\n    print('Volume of cone:',volume)\n    return volume\n    \ndef cone_parallel_parallel_area(r,h,angle):\n    '''\n    Write a function to find the area of a cone with angle parallel to both x-axes.\n    '''\n    area = 1/3*math.pi*r*h\n    print('Area of cone:',area)\n    return area\n    \ndef cone_parallel_parallel_volume(r,h,angle):\n    '''\n    Write a function to find the volume of a cone with angle parallel to both x-axes.\n    '''\n    volume = math.pi*r*(r+h)\n    print('Volume of cone:',volume)\n    return volume\n    \ndef cone_parallel_perpendicular_area(r,h,angle):\n    '''\n    Write a function to find the area of a cone with angle perpendicular to both x-axes.\n    '''\n    area = 1/3*math.pi*r*h\n    print('Area of cone:',area)\n    return area\n    \ndef cone_parallel_perpendicular_volume(r,h,angle):\n    '''\n    Write a function to find the volume of a cone with angle perpendicular to both x-axes.\n    '''\n    volume = math.pi*r*(r+h)\n    print('Volume of cone:',volume)\n    return volume\n    \ndef cone_perpendicular_area(r,h,angle):\n    '''\n    Write a function to find the area of a cone with angle perpendicular to x-axis.\n    '''\n    area = 1/3*math.pi*r*h\n    print('Area of cone:',area)\n    return area\n    \ndef cone_perpendicular_volume(r,h,angle):\n    '''\n    Write a function to find the volume of a cone with angle perpendicular to x-axis.\n    '''\n    volume = math.pi*r*(r+h)\n    print('Volume of cone:',volume)\n    return volume\n    \ndef cone_perpendicular_perpendicular_area(r,h,angle):\n    '''\n    Write a function to find the area of a cone with angle perpendicular to both axes.\n    '''\n    area = 1"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 458,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rectangle_area(l,b):\n    '''\n    Write a function to find the area of a rectangle.\n    '''\n    return l*b\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    print(re.sub('[A-Z]','',str1))\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    s = re.sub(r'[A-Z]+', '', str1)\n    return s\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return re.sub('[A-Z]', '', str1)\n    \ndef remove_uppercase_recursive(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string using recursion.\n    '''\n    \n    if len(str1) == 1:\n        return str1\n    return remove_uppercase_recursive(str1[1:]) + str1[0]\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    def is_uppercase(str2):\n        for char in str2:\n            if char.isupper():\n                return True\n        return False\n    \n    result = \"\"\n    for char in str1:\n        if not is_uppercase(char):\n            result = result + char\n    return result\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    list_char=re.findall('[A-Z][a-z]*',str1)\n    return \"\".join(list_char)\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    new_str = ''\n    new_str = str1[:].lower()\n    return new_str\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 459,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    return str1.lower()\n    \ndef remove_odd_chars(str1):\n    '''\n    Write a function to remove odd characters from a given string.\n    '''\n    str2 = \"\"\n    for i in str1:\n        if i.isalnum():\n            str2+=i\n    return str2\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [i[0] for i in lst]\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    ans = [i[0] for i in lst]\n    return ans\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    lst2 = []\n    for i in lst:\n        lst2.append(i[0])\n    return lst2\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    ans=[]\n    for i in range(0,len(lst)):\n        ans.append(lst[i][0])\n    return(ans)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    return [lst[0]]\nprint(Extract([]))\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i][0]\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    print(lst)\n    for i in lst:\n        print(i[0])\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i]=lst[i][0]\n    return lst\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    res = map(lambda a: a[0], lst)\n    print(list(res))\n    return list(res)\n"
    },
    {
        "number": 460,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Extract(lst): \n    '''\n    Write a python function to get the first element of each sublist.\n    '''\n    for i in range(len(lst)):\n        lst[i] = lst[i][0]\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    counter = 0\n    for i in str:\n        if i.isupper():\n            counter += 1\n    return counter\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return sum(i.isupper() for i in str)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    upper = 0\n    for i in str:\n        if i.isupper():\n            upper = upper + 1\n    return upper\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isupper():\n            count = count + 1\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    print(count)\n    \n    \ndef uppercase(str):\n    '''\n    Write a python function to count the number of upper case characters in a given string.\n    '''\n    count = 0\n    for char in str:\n        if char.isupper():\n            count += 1\n    print(count)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    return(len([i for i in str if i.isupper()]))\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if ord(str[i]) >= 65 and ord(str[i]) <= 90:\n            count = count + 1\n    return count\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for x in str:\n        if x.isupper():\n            cnt += 1\n    print(cnt)\n"
    },
    {
        "number": 461,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def upper_ctr(str):\n    '''\n    Write a python function to count the upper case characters in a given string.\n    '''\n    cnt = 0\n    for ch in str:\n        if ch.isupper():\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # start with an empty list\n    combos = []\n    for i in range(len(list1)):\n        first_item = list1[i]\n        # if first_item is an empty list, we are done\n        if first_item == []:\n            combos.append([])\n            break\n        # copy first_item\n        list2 = first_item\n        # if first_item is not an empty list, go deeper\n        for j in range(len(list1)):\n            if j == i:\n                continue\n            list2 = list2 + list1[j]\n        # we have found a possible combination!\n        combos.append(list2)\n    return combos\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 1:\n        return [[list1[0]]]\n    elif len(list1) == 2:\n        return [[list1[0]], [list1[1]]]\n    else:\n        result = []\n        sub_list = combinations_list(list1[1:])\n        for i in range(len(sub_list)):\n            for j in range(len(sub_list)):\n                result.append(sub_list[i]+[list1[0]])\n        return result\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    # TODO: Write your solution here\n    return [[list1[i],list1[i+1],list1[i+2]] for i in range(len(list1)-2)]\n    \nprint(combinations_list(list1)"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    res = []\n    len_list = len(list1)\n    for i in range(0,len_list):\n        tmp_list = list1.copy()\n        tmp_list.remove(list1[i])\n        if len_list == 1:\n            res.append(list1)\n        else:\n            res += combinations_list(tmp_list)\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==1:\n        return [list1]\n    if len(list1)==2:\n        return [list1, list1[::-1]]\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    list1.sort()\n    for i in range(len(list1)):\n        if i==0:\n            continue\n        for j in range(i):\n            print(\"({}, {})\".format(list1[j], list1[i]), end=\" \")\n    print(\"\")\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1)==0:\n        return []\n    if len(list1)==1:\n        return [[list1[0]]]\n    res=[]\n    for i in range(0,len(list1)):\n        temp=list1[:i]+list1[i+1:]\n        for j in combinations_list(temp):\n            res.append([list1[i]]+j)\n    return res\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [list1]\n    first_item = list1[0]\n    combinations = []\n    combinations_list = combinations_list(list1[1:])\n    for new_item in combinations_list:\n        for i in range(len(new_item)+1):\n            combinations.append([first_item] + new_item[0:i] + new_item[i:])\n    return combinations\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combo_list = []\n    for i in range(0,len(list1)):\n        for j in range(i+1,len(list1)):\n            combo_list.append([list1[i],list1[j]])\n    return combo_list\n"
    },
    {
        "number": 462,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def combinations_list(list1):\n    '''\n    Write a function to find all possible combinations of the elements of a given list.\n    '''\n    combinations_list = []\n    for i in range(0, len(list1) + 1):\n        if i > 0:\n            for combination in combinations_list:\n                combination.insert(0, list1[i-1])\n            combinations_list.extend(combinations_list)\n        else:\n            combinations_list.append([list1[i]])\n    return combinations_list\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_product = -1\n    for i in range(len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] * arr[j] > max_product:\n                max_product = arr[i] * arr[j]\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = arr[0]\n    min_prod = arr[0]\n    curr_prod = arr[0]\n    for i in range(1, len(arr)):\n        curr_prod = curr_prod * arr[i]\n        if curr_prod > max_prod:\n            max_prod = curr_prod\n        if curr_prod < min_prod:\n            min_prod = curr_prod\n        curr_prod = max(curr_prod, arr[i])\n        curr_prod = min(curr_prod, arr[i])\n    return max_prod, min_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    # Edge case\n    if(len(arr) == 0):\n        return 0\n    \n    # Preprocessing:\n    # - Find max product of left subarray\n    # - Find max product of right subarray\n    # - Find max product of current subarray\n    # - If current subarray contains all zeros, return 0.\n    \n    max_left_product = arr[0]\n    max_right_product = arr[0]\n    max_product = arr[0]\n    \n    for i in range(1, len(arr)):\n        if(max_left_product > 0):\n            max_left_product = max(max_left_product, arr[i])\n        else:\n            max_left_product = arr[i]\n            \n        if(max_right_product > 0):\n            max_right_product = max(max_right_product, arr[i])\n        else:\n            max_right_product = arr[i]\n            \n        max_product = max(max_left_product * max_right_product, max_product)\n    \n    return max_product\n    \n    \ndef max_subarray_product_brute_force(arr):\n    '''\n    Brute force approach to find maximum product subarray.\n    '''\n    # Edge case\n    if(len(arr) == 0):\n        return 0\n    \n    # Find max product\n    max_product = arr[0]\n    for i in range(1, len(arr)):\n        max_product = max(max_product * arr[i], arr[i])\n    \n    return max_product\n    \n    "
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    def max_subarray_product_recursive(arr,start,end):\n        if start==end:\n            return arr[start]\n        elif start==end-1:\n            return max(arr[start],arr[end])\n        else:\n            res=max(max_subarray_product_recursive(arr,start,start+1),max_subarray_product_recursive(arr,start+1,end))\n            return res\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    size = len(arr)\n    max_product = -sys.maxsize\n    current_product = 0\n    start = 0\n    end = 0\n    while end < size:\n        if (current_product < 0):\n            current_product = arr[end]\n        else:\n            current_product *= arr[end]\n        if current_product > max_product:\n            max_product = current_product\n            start = end\n        end += 1\n    current_product = 0\n    end = start\n    while end < size:\n        if (current_product < 0):\n            current_product = arr[end]\n        else:\n            current_product *= arr[end]\n        if current_product > max_product:\n            max_product = current_product\n        end += 1\n    return max_product\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    '''\n    Idea: We have an array of 1 or more numbers, and we can assume that all the elements are greater than 0.\n    So, the first thing we need to do is just to find the maximum product subarray.\n    '''\n    '''\n    Solution 1: \n    Using DP (Dynamic Programming). Time complexity is O(N^2) and space complexity is O(N).\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    result = arr[0]\n    #base case\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    \n    #recursion\n    for i in range(1, len(arr)):\n        #result\n        result = max(result, arr[i] * arr[i-1], arr[i] * arr[i-2], arr[i-1] * arr[i])\n    \n    return result\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_result = -(math.inf)\n    for i in range(len(arr)):\n        if arr[i] < 0:\n            continue\n        for j in range(i, len(arr)):\n            current_result = arr[i] * arr[j]\n            max_result = max(current_result, max_result)\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    max_prod = -999999\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if(i == j):\n                continue\n            else:\n                temp_prod = arr[i] * arr[j]\n                if(temp_prod > max_prod):\n                    max_prod = temp_prod\n    return max_prod\n"
    },
    {
        "number": 463,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_subarray_product(arr):\n    '''\n    Write a function to find the maximum product subarray of the given array.\n    '''\n    curr_max = max = arr[0]\n    for i in range(1,len(arr)):\n        curr_max = max(arr[i],max*arr[i])\n        max = curr_max\n    return max\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        print(\"True\")\n        return True\n    else:\n        print(\"False\")\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(dict.values()) == 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if dict is None:\n        return False\n    for item in dict:\n        if dict[item]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if n == 0:\n        return True\n    return len(dict.keys()) == 1 and list(dict.keys())[0] == n\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict) > 1:\n        if dict[list(dict.keys())[0]]!= dict[list(dict.keys())[1]]:\n            return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    return len(set(dict.values())) <= 1\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if len(dict[i])!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    for i in dict:\n        if dict[i]!= n:\n            return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(dict)!= len(set(dict.values())):\n        return False\n    return True\n"
    },
    {
        "number": 464,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_value(dict, n):\n    '''\n    Write a function to check if all values are same in a dictionary.\n    '''\n    if len(set(dict.values())) == 1:\n        return True\n    return False\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    for key, value in dict1.items():\n        if value == '':\n            del dict1[key]\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if len(dict1) == 0:\n        print(\"The empty dictionary has been deleted.\")\n    else:\n        print(\"The empty dictionary is not deleted.\")\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {i:dict1[i] for i in dict1 if i!= ''}\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for k,v in dict1.items():\n        if v:\n            dict2[k] = v\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    dict2 = {}\n    for i in dict1:\n        if dict1[i] == '':\n            continue\n        else:\n            dict2[i] = dict1[i]\n    return dict2\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    while True:\n        for key in list(dict1.keys()):\n            if dict1[key] == '' or dict1[key] == []:\n                del dict1[key]\n                break\n        else:\n            break\n    return dict1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    d1 = {}\n    for key,value in dict1.items():\n        if value:\n            d1.update({key:value})\n    return d1\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    try:\n        return dict1\n    except:\n        pass\n"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    empty = []\n    for key, value in dict1.items():\n        if not value:\n            empty.append(key)\n    for item in empty:\n        del dict1[item]\n    return dict1\n    \ndef drop_empty2(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    return {key:value for key,value in dict1.items() if value}\n    \ndef create_dictionary(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return dict(zip(args[0], args[1]))\n    \ndef create_dictionary2(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {i: j for i,j in zip(args[0], args[1])}\n    \ndef create_dictionary3(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {i: j for i,j in zip(args[0], args[1])}\n    \ndef create_dictionary4(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary5(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary6(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args if v}\n    \ndef create_dictionary7(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args if v}\n    \ndef create_dictionary8(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args if v}\n    \ndef create_dictionary9(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args if v}\n    \ndef create_dictionary10(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args if v}\n    \ndef create_dictionary11(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary12(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary13(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary14(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary15(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary16(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary17(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary18(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary19(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary20(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary21(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary22(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary23(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary24(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary25(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary26(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary27(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary28(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary29(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary30(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary31(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary32(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary33(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary34(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v for k,v in args}\n    \ndef create_dictionary35(*args):\n    '''\n    Write a function to create a dictionary from a list of keys and a list of values.\n    '''\n    return {k: v fo"
    },
    {
        "number": 465,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def drop_empty(dict1):\n    '''\n    Write a function to drop empty items from a given dictionary.\n    '''\n    if dict1.items():\n        return dict1\n    else:\n        return {}\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    result = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            if arr[i] < arr[j]:\n                temp = arr[i] * arr[j]\n                if temp > result:\n                    result = temp\n    return result\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    if len(arr) == 0:\n        return 0\n    if len(arr) == 1:\n        return arr[0]\n    if len(arr) == 2:\n        return max(arr[0], arr[1])\n    \n    if arr[0] < arr[1]:\n        arr.pop(0)\n    else:\n        arr.pop(1)\n    \n    arr.pop(0)\n    \n    max_prod = arr[0] * arr[1]\n    max_prod = max(max_prod, max_product(arr))\n    \n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    \n    # if the length of the array is 0, it means there is no increasing subsequence\n    if len(arr) == 0:\n        return -1\n    # if the length of the array is 1, it means there is only one element in the array\n    if len(arr) == 1:\n        return arr[0]\n    \n    # to store the maximum product\n    max_product = 0\n    # to store the index of the current maximum product\n    max_product_index = 0\n    # to store the current maximum product\n    current_max = 0\n    # to store the current index of the minimum product\n    min_product_index = 0\n    # to store the current minimum product\n    current_min = 0\n    \n    # iterate through the array\n    for i in range(0, len(arr)):\n        # if the current element is the minimum product, the current product should be the max product\n        if current_min == 0:\n            current_max = arr[i]\n            current_min = arr[i]\n            max_product_index = i\n        else:\n            # otherwise\n            current_max = max(current_max * arr[i], arr[i])\n            if current_max > max_product:\n                # if the maximum product is bigger than the previous maximum product, update the index\n                max_product_index = i\n                # and update the maximum product\n                max_product = current_max\n            \n            current_min = min(current_min * arr[i], arr[i])\n            if current_min < min_product:\n                min_product_index = i\n                # and update the minimum product\n                min_product = current_min\n    \n    return max_product, max_product_index, min_product, min_product_index\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_prod = 0\n    cur_prod = 1\n    for i in arr:\n        cur_prod *= i\n        if cur_prod > max_prod:\n            max_prod = cur_prod\n        elif cur_prod < 0:\n            cur_prod = 1\n    return max_prod\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    curr_max = 0\n    max_product = 0\n    for num in arr:\n        curr_max = max(curr_max * num, num)\n        max_product = max(max_product, curr_max)\n    return max_product\n    \n    "
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max = 0\n    for i in range(1, len(arr)):\n        if arr[i] > 0:\n            arr[i] = arr[i] * arr[i-1]\n        if arr[i] > max:\n            max = arr[i]\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_product = 0\n    max_product_start = 0\n    for i in range(1, len(arr)):\n        if arr[i-1]*arr[i] > max_product:\n            max_product = arr[i-1]*arr[i]\n            max_product_start = i-1\n    return max_product, max_product_start\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    max_mult = 1\n    if len(arr) == 0:\n        return None\n    for i in range(len(arr)):\n        mult = 1\n        for j in range(i+1,len(arr)):\n            mult = mult*arr[j]\n            if mult > max_mult:\n                max_mult = mult\n    return max_mult\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    dp = [1]*len(arr)\n    \n    for i in range(1,len(arr)):\n        for j in range(i):\n            if arr[j] < arr[i]:\n                dp[i] = max(dp[i],dp[j]*arr[i])\n    return max(dp)\n"
    },
    {
        "number": 468,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_product(arr):   \n    '''\n    Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.\n    '''\n    if not arr or len(arr) == 0:\n        return 0\n    \n    max_product = arr[0]\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]*arr[j] > max_product:\n                max_product = arr[i]*arr[j]\n    \n    return max_product\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    tup = test_tup\n    tup = (tup[0], tup[1] + tup[0], tup[2] - tup[1])\n    print(tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    print(test_tup)\n    \n    test_tup_lst = list(test_tup)\n    \n    for i in range(0,len(test_tup_lst)-1):\n        test_tup_lst[i] += test_tup_lst[i+1]\n        \n    test_tup = tuple(test_tup_lst)\n    print(test_tup)\n    \nadd_pairwise((1,2,3,4))\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    max_sum = test_tup[0]\n    min_sum = test_tup[0]\n    max_sum_arr = []\n    min_sum_arr = []\n    for i in range(len(test_tup)-1):\n        max_sum = max(max_sum, test_tup[i] + test_tup[i+1])\n        min_sum = min(min_sum, test_tup[i] + test_tup[i+1])\n        max_sum_arr.append(max_sum)\n        min_sum_arr.append(min_sum)\n    print(max_sum_arr)\n    print(min_sum_arr)\n    return max_sum_arr, min_sum_arr\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return test_tup[0] + test_tup[1], test_tup[1] + test_tup[0]\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    #return sum([a+b for a,b in zip(test_tup[0:-1],test_tup[1:])])\n    return sum([a+b for a,b in zip(test_tup[0::2],test_tup[1::2])])\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    test_tup_tuple = test_tup\n    print(test_tup_tuple[0] + test_tup_tuple[1])\n    print(test_tup_tuple[0] + test_tup_tuple[2])\n    print(test_tup_tuple[1] + test_tup_tuple[2])\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple([test_tup[0] + test_tup[1], test_tup[0] + test_tup[2], test_tup[1] + test_tup[2]])\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    for tup in test_tup:\n        if tup[0]>tup[1]:\n            temp = tup[0]\n            tup[0] = tup[1]\n            tup[1] = temp\n    print(test_tup)\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return (test_tup[0] + test_tup[1], test_tup[1] + test_tup[2])\n"
    },
    {
        "number": 470,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_pairwise(test_tup):\n    '''\n    Write a function to find the pairwise addition of the neighboring elements of the given tuple.\n    '''\n    return tuple(sum(a, b) for a, b in zip(test_tup, test_tup[1:]))\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod = (prod*i)%n\n    return prod\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    s = 1\n    for i in arr:\n        s = s * i % n\n        \n    return s\n    \nprint(find_remainder([2, 2, 3], 3)) # 6\nprint(find_remainder([2, 3, 2], 3)) # 8\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    \n    product = 1\n    for i in arr:\n        product *= i\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, n):\n        product *= arr[i]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    if(n==1):\n        return arr[0]\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    def mul(a, b):\n        return a*b\n    p = 1\n    for i in range(len(arr)):\n        p = mul(p, arr[i])\n    return p%n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    product = 1\n    for i in range(0, n):\n        product = product * arr[i]\n    return product % n\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    # multiply the array by itself\n    total = 1\n    for i in range(0, n):\n        total = total * arr[i]\n        \n    # divide by the product of array elements\n    result = total\n    for i in range(0, n):\n        result = result % arr[i]\n    return result\n"
    },
    {
        "number": 471,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_remainder(arr, n): \n    '''\n    Write a python function to find the product of the array multiplication modulo n.\n    '''\n    import numpy as np \n    import math\n    if n == 1:\n        return 1\n    arr_len = len(arr)\n    arr_n = np.array(arr)\n    total = np.sum(arr_n*arr_n)\n    if total >= n:\n        raise ValueError('Total of products exceeds total of the array, so no remainder is possible')\n    arr_mod = total%n\n    arr_mod = arr_mod if arr_mod == 0 else math.ceil(arr_mod/n)\n    return arr_mod\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    # code here\n    if len(l)==0:\n        return 0\n    flag = 1\n    for i in range(len(l)):\n        if i<len(l)-1:\n            if l[i]==l[i+1]:\n                flag=0\n                break\n    return flag"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    num = l[0]\n    for i in range(1,len(l)):\n        if num == l[i]:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    if len(l) == len(set(l)):\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    a = []\n    n = 0\n    for i in l:\n        if i == n:\n            a.append(i)\n            n += 1\n        elif i!= n:\n            a.append(n)\n            a.append(i)\n            n = i\n    return a\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    \n    prev = None\n    for x in l:\n        if prev is None:\n            prev = x\n        elif x == prev + 1:\n            prev = x\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    result = True\n    for i in range(len(l)):\n        if i + 1!= len(l):\n            if l[i] == l[i + 1]:\n                result = False\n                break\n    return result\n"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    is_consecutive = False\n    if len(l) == 0:\n        return is_consecutive\n    else:\n        for i in range(len(l) - 1):\n            if l[i] + 1!= l[i + 1]:\n                is_consecutive = False\n                break\n            else:\n                is_consecutive = True\n    return is_consecutive\n    \n    \nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8])) # True\nprint(check_Consecutive([0, 1, 2, 3, 4, 5, 6, 7, 8])) # False\nprint(check_Consecutive([])) # True\nprint(check_Consecutive(['a', 'b', 'c'])) # False\nprint(check_Consecutive([2, 3, 4, 5, 6, 7, 8, 9])) # False\nprint(check_Consecutive([2, 3, 4, 5, 6, 7, 8, 9, 10])) # True\nprint(check_Consecutive([10, 1, 2, 3, 4, 5, 6, 7, 8])) # False\nprint(check_Consecutive([10, 11, 12, 13, 14, 15, 16, 17, 18])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11])) # False\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12])) # False\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17])) # False\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18])) # False\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21])) # False\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24])) # False\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25])) # False\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29])) # False\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31])) # False\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34])) # False\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37])) # True\nprint(check_Consecutive([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 2"
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            pass\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive2(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive3(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive4(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive5(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive6(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive7(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive8(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive9(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive10(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive11(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive12(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive13(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive14(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n        print(l[-1], \"is not consecutive number\")\n    \ndef check_Consecutive15(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if(l[i+1] == l[i] + 1):\n            print(l[i], \"and \", l[i+1], \"are consecutive numbers\")\n        else:\n            print(l[i], \"and \", l[i+1], \"are not consecutive numbers\")\n    else:\n    "
    },
    {
        "number": 472,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_Consecutive(l): \n    '''\n    Write a python function to check whether the given list contains consecutive numbers or not.\n    '''\n    for i in range(len(l)-1):\n        if l[i] == l[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    if len(test_list1) == 0 and len(test_list2) == 0:\n        return []\n    elif len(test_list1) == 0:\n        return test_list2\n    elif len(test_list2) == 0:\n        return test_list1\n    else:\n        t1 = []\n        t2 = []\n        for ele1 in test_list1:\n            for ele2 in test_list2:\n                if ele1 == ele2:\n                    t1.append(ele1)\n                    t2.append(ele2)\n        return t1, t2\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    # s = list(set(test_list1).intersection(set(test_list2)))\n    # print(s)\n    return list(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    new_list = []\n    for x in test_list1:\n        if x in test_list2:\n            new_list.append(x)\n    return tuple(new_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    test_list1 = sorted(test_list1)\n    test_list2 = sorted(test_list2)\n    return tuple(set(test_list1).intersection(set(test_list2)))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output = set(test_list1).intersection(set(test_list2))\n    return output\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    tuple_intersection_list = []\n    for item in test_list1:\n        if item in test_list2:\n            tuple_intersection_list.append(item)\n    return tuple_intersection_list\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    output_list = []\n    for i in range(0, len(test_list1)):\n        if test_list1[i] in test_list2:\n            output_list.append(test_list1[i])\n    return tuple(output_list)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    return list(set(test_list1) & set(test_list2))\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    i = 0\n    j = 0\n    lst = []\n    while i<len(test_list1) and j<len(test_list2):\n        if test_list1[i]==test_list2[j]:\n            lst.append(test_list1[i])\n        if test_list1[i] < test_list2[j]:\n            i+=1\n        else:\n            j+=1\n    return tuple(lst)\n"
    },
    {
        "number": 473,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_intersection(test_list1, test_list2):\n    '''\n    Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.\n    '''\n    res = set(test_list1) & set(test_list2)\n    return res\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    newstr=str1\n    newstr=newstr.replace(ch,newch)\n    return newstr\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    return str1.replace(ch,newch)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2 = str1\n    for i in range(len(str2)):\n        if str2[i] == ch:\n            str2 = str2[:i] + newch + str2[i+1:]\n    return str2\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str2=\"\"\n    for i in str1:\n        if i!=ch:\n            str2=str2+i\n        else:\n            str2=str2+newch\n    return str2\nstr1=\"I am a student\"\nstr2=replace_char(str1,\"s\",\"$\")\nprint(str2)\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    str1 = str1.replace(ch,newch)\n    return str1\n"
    },
    {
        "number": 474,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_char(str1,ch,newch):\n    '''\n    Write a function to replace characters in a string.\n    '''\n    temp_str = \"\"\n    if(ch == '$'):\n        temp_str = temp_str + newch\n        return temp_str\n    else:\n        for ch in str1:\n            if(ch == ch):\n                temp_str = temp_str + newch\n            else:\n                temp_str = temp_str + ch\n        return temp_str\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    counter = dict(dict1)\n    sort = sorted(counter.items(), key=lambda x: x[1])\n    return sort\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    new_dict = {}\n    sorted_dict = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    for k, v in sorted_dict:\n        new_dict[k] = v\n    return new_dict\n    \nif __name__ == \"__main__\":\n    a = {\"key1\": 10, \"key2\": 2, \"key3\": 30}\n    print(sort_counter(a))"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #sorting the dictionary based on the values\n    dict1 = sorted(dict1.items(), key = lambda x: x[1], reverse = True)\n    #returning the sorted dictionary\n    return dict1\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    dict2 = {}\n    for key, value in sorted(dict1.items(), key=lambda item: item[1], reverse=True):\n        dict2[key] = value\n    return dict2\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    #return sorted(dict1.items(), key=lambda kv: kv[1], reverse=True)\n    #return sorted(dict1.items(), key=lambda kv: (-kv[1], kv[0]))\n    return dict(sorted(dict1.items(), key=lambda kv: (-kv[1], kv[0])))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x:x[1], reverse=True)\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key = lambda kv:(kv[1], kv[0]))\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    lst=[]\n    for x in sorted(dict1.values(), reverse=True):\n        for key,value in dict1.items():\n            if x==value:\n                lst.append(key)\n    return lst\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    return sorted(dict1.items(), key=lambda x: x[1])\n"
    },
    {
        "number": 475,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import Counter\ndef sort_counter(dict1):\n    '''\n    Write a function to sort a dictionary by value.\n    '''\n    sorted_by_value = sorted(dict1.items(), key=lambda x: x[1], reverse=True)\n    return sorted_by_value\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = nums[0]\n    smallest = nums[0]\n    for i in range(1, len(nums)):\n        if nums[i] < smallest:\n            smallest = nums[i]\n        if nums[i] > largest:\n            largest = nums[i]\n    print(\"The sum of the largest and smallest value in the array is:\", largest + smallest)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    max = nums[0]\n    min = nums[0]\n    for i in range(len(nums)):\n        if nums[i] > max:\n            max = nums[i]\n        if nums[i] < min:\n            min = nums[i]\n    return (max + min)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    nums.sort()\n    return nums[-1] + nums[0]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    big = -999999\n    small = 9999999\n    for i in range(len(nums)):\n        if big < nums[i]:\n            big = nums[i]\n        if small > nums[i]:\n            small = nums[i]\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    print(\"The sum of the largest value and the smallest value in the given array is: \",sum(sorted(nums)[-2:]))\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = None\n    smallest = None\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    largest = max(nums)\n    smallest = min(nums)\n    print(largest + smallest)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    if len(nums) == 0:\n        return (0, 0)\n"
    },
    {
        "number": 476,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_sum(nums):\n    '''\n    Write a python function to find the sum of the largest and smallest value in a given array.\n    '''\n    return max(nums) + min(nums)\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    #Convert string to lowercase using the builtin string method\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    \n    # lowercase = []\n    # for char in string:\n    #     lowercase.append(char.lower())\n    # return \"\".join(lowercase)\n    \n    # return string.lower()\n    \n    # return string.swapcase()\n    \n    # return string.upper()\n    \n    return string.swapcase()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    lower_case = string.lower()\n    print(lower_case)\nis_lower(\"abc\""
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    new_string = \"\"\n    for character in string:\n        if character.islower():\n            new_string += character.lower()\n        else:\n            new_string += character.upper()\n    return new_string\n    \nif __name__ == '__main__':\n    string = 'Hello'\n    print(\"The input is\",string)\n    print(\"The output is\",is_lower(string))\n    \n    string = 'HELLO'\n    print(\"The input is\",string)\n    print(\"The output is\",is_lower(string))\n    \n    string = 'hello'\n    print(\"The input is\",string)\n    print(\"The output is\",is_lower(string))\n    \n    string = 'HELLO'\n    print(\"The input is\",string)\n    print(\"The output is\",is_lower(string)"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n    \ndef is_number(string):\n    '''\n    Write a python function to determine if a given string contains only numerical characters.\n    '''\n    return string.isnumeric()\n"
    },
    {
        "number": 477,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_lower(string):\n    '''\n    Write a python function to convert the given string to lower case.\n    '''\n    return string.lower()\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2=re.sub('[a-z]+','',str1)\n    return str2\ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    str2=re.sub('[A-Z]+','',str1)\n    return str2\ndef remove_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    str2=re.sub(' +','',str1)\n    return str2\ndef remove_quotes(str1):\n    '''\n    Write a function to remove single quotes from a given string.\n    '''\n    str2=re.sub('\\'+','',str1)\n    return str2\ndef remove_parenthesis(str1):\n    '''\n    Write a function to remove square brackets (and their contents) from a given string.\n    '''\n    str2=re.sub('\\([^()]*\\)','',str1)\n    return str2\ndef remove_dollar_sign(str1):\n    '''\n    Write a function to remove dollar signs from a given string.\n    '''\n    str2=re.sub('\\$+','',str1)\n    return str2\ndef remove_ampersand(str1):\n    '''\n    Write a function to remove ampersands from a given string.\n    '''\n    str2=re.sub('&+','',str1)\n    return str2\ndef remove_apostrophe(str1):\n    '''\n    Write a function to remove single quotes from a given string.\n    '''\n    str2=re.sub('\\''+'','',str1)\n    return str2\ndef remove_slash(str1):\n    '''\n    Write a function to remove single quotes from a given string.\n    '''\n    str2=re.sub('\\/+','',str1)\n    return str2\ndef remove_dot(str1):\n    '''\n    Write a function to remove dots from a given string.\n    '''\n    str2=re.sub('\\.','',str1)\n    return str2\ndef remove_and(str1):\n    '''\n    Write a function to remove ands from a given string.\n    '''\n    str2=re.sub('&+','',str1)\n    return str2\ndef remove_percent(str1):\n    '''\n    Write a function to remove percent signs from a given string.\n    '''\n    str2=re.sub('%+','',str1)\n    return str2\ndef remove_exclamation(str1):\n    '''\n    Write a function to remove exclamations from a given string.\n    '''\n    str2=re.sub('!+','',str1)\n    return str2\ndef remove_at_sign(str1):\n    '''\n    Write a function to remove @ signs from a given string.\n    '''\n    str2=re.sub('@+','',str1)\n    return str2\ndef remove_hash(str1):\n    '''\n    Write a function to remove hashes from a given string.\n    '''\n    str2=re.sub('#+','',str1)\n    return str2\ndef remove_dollar_sign(str1):\n    '''\n    Write a function to remove dollar signs from a given string.\n    '''\n    str2=re.sub('\\$+','',str1)\n    return str2\ndef remove_colon(str1):\n    '''\n    Write a function to remove colons from a given string.\n    '''\n    str2=re.sub(':+','',str1)\n    return str2\ndef remove_plus(str1):\n    '''\n    Write a function to remove plus signs from a given string.\n    '''\n    str2=re.sub('\\++','',str1)\n    return str2\ndef remove_question_mark(str1):\n    '''\n    Write a function to remove questions marks from a given string.\n    '''\n    str2=re.sub('\\?+','',str1)\n    return str2\ndef remove_ampersand(str1):\n    '''\n    Write a function to remove ampersands from a given string.\n    '''\n    str2=re.sub('&+','',str1)\n    return str2\ndef remove_percent(str1):\n    '''\n    Write a function to remove percent signs from a given string.\n    '''\n    str2=re.sub('%+','',str1)\n    return str2\ndef remove_colon(str1):\n    '''\n    Write a function to remove colons from a given string.\n    '''\n    str2=re.sub(':+','',str1)\n    return str2\ndef remove_bracket(str1):\n    '''\n    Write a function to remove square brackets (and their contents) from a given string.\n    '''\n    str2=re.sub('\\([^()]*\\)','',str1)\n    return str2\ndef remove_question_mark(str1):\n    '''\n    Write a function to remove questions marks from a given string.\n    '''\n    str2=re.sub('\\?+','',str1)\n    return str2\ndef remove_brackets(str1):\n    '''\n    Write a function to remove square brackets (and their contents) from a given string.\n    '''\n    str2=re.sub('\\[+','',str1)\n    return str2\ndef remove_ampersand(str1):\n    '''\n    Write a function to remove ampersands from a given string.\n    '''\n    str2=re.sub('&+','',str1)\n    return str2\ndef remove_percent(str1):\n    '''\n    Write a function to remove percent signs from a given string.\n    '''\n    str2=re.sub('%+','',str1)\n    return str2\ndef remove_question_mark(str1):\n    '''\n    Write a function to remove questions marks from a given string.\n    '''\n    str2=re.sub('\\?+','',str1)\n    return str2\ndef remove_dollar_sign(str1):\n    '''\n    Write a function to remove dollar signs from a given string.\n    '''\n    str2=re.sub('\\$+','',str1)\n    return str2\ndef remove_colon(str1):\n    '''\n    Write a function to remove colons from a given string.\n    '''\n    str2=re.sub(':+','',str1)\n    return str2\ndef remove_pound(str1):\n    '''\n    Write a function to remove pound signs from a given string.\n    '''\n    str2=re.sub('\u00a3+','',str1)\n    return str2\ndef remove_parenth(str1):\n    '''\n    Write a function to remove square brackets (and their contents) from a given string.\n    '''\n    str2=re.sub('\\([^()]*\\)','',str1)\n    return str2\ndef remove_dollar(str1):\n    '''\n    Write a function to remove dollars from a given string.\n    '''\n    str2=re.sub('\\$+','',str1)\n    return str2\ndef remove_percent(str1):\n    '''\n    Write a function to remove percent signs from a given string.\n    '''\n    str2=re.sub('%+','',str1)\n    return str2\ndef remove_ampersand(str1):\n    '''\n    Write a function to remove ampersands from a given string.\n    '''\n    str2=re.sub('&+','',str1)\n    return str2\ndef remove_question_mark(str1):\n    '''\n    Write a function to remove questions marks from a given string.\n    '''\n    str2=re.sub('\\?+','',str1)\n    return str2\ndef remove_question_mark(str1):\n    '''\n    Write a function to remove questions marks from a given string.\n    '''\n    str2=re.sub('\\?+','',str1)\n    return str2\ndef remove_dollar_sign(str1):\n    '''\n    Write a functio"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.upper().replace(\"i\", \"\")\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    #myStr = \"This is a book\"\n    #pattern = \"book\"\n    #myStr = \"This is a book\"\n    #pattern = \"is\"\n    #myStr = \"The bird is the word\"\n    #pattern = \"the\"\n    #myStr = \"The quick brown fox jumps over the lazy dog\"\n    #pattern = \"fox\"\n    #myStr = \"The quick brown fox jumps over the lazy dog\"\n    #pattern = \"fox\"\n    myStr = str1\n    pattern = str1[0]\n    #print(pattern)\n    myList = list(myStr)\n    #print(myList)\n    str1 = myStr.replace(pattern, '')\n    #print(str1)\n    #str1 = \"\".join(myList)\n    #print(str1)\n    str1 = re.sub(pattern, '', myStr)\n    #print(str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    result = str1.lower()\n    return result\n    \n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return re.sub('[a-z]', '', str1)\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str2 = \"\"\n    str1 = str1.replace(\"a\",\"\")\n    str1 = str1.replace(\"A\",\"\")\n    str1 = str1.replace(\"e\",\"\")\n    str1 = str1.replace(\"E\",\"\")\n    str1 = str1.replace(\"i\",\"\")\n    str1 = str1.replace(\"I\",\"\")\n    str1 = str1.replace(\"o\",\"\")\n    str1 = str1.replace(\"O\",\"\")\n    str1 = str1.replace(\"u\",\"\")\n    str1 = str1.replace(\"U\",\"\")\n    return str1\n    \ndef remove_numbers(str1):\n    '''\n    Write a function to remove all numbers from a given string.\n    '''\n    str2 = \"\"\n    \n    str1 = str1.replace(\"0\",\"\")\n    str1 = str1.replace(\"1\",\"\")\n    str1 = str1.replace(\"2\",\"\")\n    str1 = str1.replace(\"3\",\"\")\n    str1 = str1.replace(\"4\",\"\")\n    str1 = str1.replace(\"5\",\"\")\n    str1 = str1.replace(\"6\",\"\")\n    str1 = str1.replace(\"7\",\"\")\n    str1 = str1.replace(\"8\",\"\")\n    str1 = str1.replace(\"9\",\"\")\n    return str1\n    \ndef remove_punctuation(str1):\n    '''\n    Write a function to remove all punctuation from a given string.\n    '''\n    str2 = \"\"\n    for i in range(len(str1)):\n        if str1[i] not in \"!\\\"#$%&'()*+,-./:;<=>?@[\\]^_`{|}~\":\n            str2 = str2 + str1[i]\n    return str2\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1=str1.lower()\n    regex = re.compile(r'[a-z]')\n    str1 = regex.sub('', str1)\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    str1 = str1.lower()\n    str1 = str1.replace('a','')\n    str1 = str1.replace('b','')\n    str1 = str1.replace('c','')\n    str1 = str1.replace('d','')\n    str1 = str1.replace('e','')\n    str1 = str1.replace('f','')\n    str1 = str1.replace('g','')\n    str1 = str1.replace('h','')\n    str1 = str1.replace('i','')\n    str1 = str1.replace('j','')\n    str1 = str1.replace('k','')\n    str1 = str1.replace('l','')\n    str1 = str1.replace('m','')\n    str1 = str1.replace('n','')\n    str1 = str1.replace('o','')\n    str1 = str1.replace('p','')\n    str1 = str1.replace('q','')\n    str1 = str1.replace('r','')\n    str1 = str1.replace('s','')\n    str1 = str1.replace('t','')\n    str1 = str1.replace('u','')\n    str1 = str1.replace('v','')\n    str1 = str1.replace('w','')\n    str1 = str1.replace('x','')\n    str1 = str1.replace('y','')\n    str1 = str1.replace('z','')\n    str1 = str1.replace(' ','')\n    return str1\n"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'ABC'\n    \n    # code\n    str1 = str1.replace('a','')\n    str1 = str1.replace('b','')\n    str1 = str1.replace('c','')\n    \n    return str1\n    \ndef remove_uppercase(str1):\n    '''\n    Write a function to remove uppercase substrings from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'ABC'\n    \n    # code\n    str1 = str1.lower()\n    \n    return str1\n    \ndef remove_numeric(str1):\n    '''\n    Write a function to remove numeric substrings from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'ABC'\n    \n    # code\n    \n    str1 = re.sub('\\d', '', str1)\n    \n    return str1\n    \ndef remove_whitespaces(str1):\n    '''\n    Write a function to remove whitespaces from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'ABC'\n    \n    # code\n    \n    str1 = str1.replace(' ', '')\n    \n    return str1\n    \ndef remove_duplicates(str1):\n    '''\n    Write a function to remove duplicate substrings from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'ABC'\n    \n    # code\n    \n    str1 = list(set(str1))\n    \n    return str1\n    \ndef remove_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'ABC'\n    \n    # code\n    \n    str1 = str1.translate({ord(i):None for i in '!#$%^&*()_+{}|:\\\"<>?[,]-'})\n    \n    return str1\n    \ndef is_palindrome(str1):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    \n    # my_function('abc') returns True\n    # my_function('ABC') returns True\n    # my_function('abc1ABC') returns False\n    \n    # code\n    \n    str1 = str1.replace(' ', '')\n    \n    if str1 == str1[::-1]:\n        return True\n    else:\n        return False\n    \ndef remove_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'ABC'\n    \n    # code\n    \n    str1 = re.sub('[^A-Za-z0-9]+', '', str1)\n    \n    return str1\n    \ndef no_vowels(str1):\n    '''\n    Write a function to remove vowels from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'c1BC'\n    \n    # code\n    \n    str1 = re.sub('[aeiou]', '', str1)\n    \n    return str1\n    \ndef no_special_characters(str1):\n    '''\n    Write a function to remove special characters from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'ABC'\n    \n    # code\n    \n    str1 = re.sub('[^A-Za-z0-9]+', '', str1)\n    \n    return str1\n    \ndef no_punctuations(str1):\n    '''\n    Write a function to remove punctuations from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'ABC'\n    \n    # code\n    \n    str1 = re.sub('[^A-Za-z0-9]+', '', str1)\n    \n    return str1\n    \ndef no_digits(str1):\n    '''\n    Write a function to remove digits from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'ABC'\n    \n    # code\n    \n    str1 = re.sub('[0-9]+', '', str1)\n    \n    return str1\n    \ndef no_spaces(str1):\n    '''\n    Write a function to remove spaces from a given string.\n    '''\n    \n    # my_function('abc') returns 'abc'\n    # my_function('ABC') returns 'ABC'\n    # my_function('abc1ABC') returns 'ABC'\n    \n    # code\n    \n    str1 = re.sub(' +', '', str1)\n    \n    return str1\n    \ndef no_words_in_silly(str1):\n    '''\n    Write a function to remove words in a given string which consist of only one upper or lowercase letter.\n    '''\n    \n    # my_function('abctest') returns 't'\n    # my_function('abcABC') returns 'ABC'\n    \n    # code\n    \n    str1 = re.sub(' +', '', str1)\n    \n    return str1\n    \ndef no_words_in_words(str1):\n    '''\n    Write a function to remove words in a given string which are contained in a word in the form of a sequence of two upper or lowercase letters.\n    '''\n    \n    # my_function('abcdEFGHi') returns 'h'\n    # my_function('aabCDdEFGHi') returns 'h'\n    \n    # code\n    \n    str1 = re.sub(' +', '', str1)\n    \n    return str1\n    \ndef no_letters_in_silly(str1):\n    '''\n    Write a function to remove letters in a given string which consist of only one upper or lowercase letter.\n    '''\n    \n    # my_function('abctest') returns 't'\n    # my_function('ABCABC') returns 'ABC'\n    \n    # code\n    \n    str1 = re.sub(' +', '', str1)\n    \n    return str1\n    \ndef no_letters_in_words(str1):\n    '''\n    Write a function to remove letters in a given string which are contained in a word in the form of a sequence of two upper or lowercase letters.\n    '''\n    \n    # my_function('abcdEFGHi') returns 'Hi'\n    # my_function('aabCDdEFGHi') returns 'Hi'\n    \n    # code\n    \n    str1 = re.sub(' +', '', str1)\n    \n    return str1\n    \ndef no_alpha_in_silly(str1):\n    '''\n    Write a function to remove alphabetic characters in a given string which consist of only one upper or lowercase letter.\n    '''\n    \n    # my_function('abctest') returns 't'"
    },
    {
        "number": 478,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_lowercase(str1):\n    '''\n    Write a function to remove lowercase substrings from a given string.\n    '''\n    return str1.lower()\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    \n    firstDigit=0\n    while (n>0):\n        firstDigit=n%10\n        n=n//10\n    return firstDigit\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n//10\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        if isinstance(n,int):\n            return n%10\n        else:\n            print('Invalid input')\n    except Exception as e:\n        print(e)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try :\n        n = int(n)\n    except :\n        return None\n    else :\n        return int(n%10)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    return n[0]\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    try:\n        n = int(n)\n        if n > 9999:\n            raise ValueError\n        if n < 10:\n            return n\n        else:\n            n = str(n)\n            return int(n[0])\n    except ValueError:\n        print(\"Please enter a valid number\")\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    d = 0\n    if n < 10 :\n        d = n\n    else:\n        while n > 0 :\n            n = n // 10\n            d = n\n    return d\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    if (n < 10) :  \n        return n\n    else :  \n        return first_Digit(n//10)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    i = n\n    while (i) :\n        i = i // 10\n    return (i)\n"
    },
    {
        "number": 479,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_Digit(n) :  \n    '''\n    Write a python function to find the first digit of a given number.\n    '''\n    s=str(n)\n    x=s[0]\n    return x\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd=[]\n    for i in list:\n        if i%2==0:\n            odd.append(i)\n    return odd\nlist=[1,2,3,4,5,6,7,8,9,10]\nprint(Split(list))\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2!= 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in range(len(list)):\n        if list[i] % 2 == 1:\n            odd.append(list[i])\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            odd.append(i)\n    return odd\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    list = map(int,list)\n    list = filter(lambda x: x % 2!= 0,list)\n    list = list(list)\n    return list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    #pass\n    odd_numbers = []\n    for i in list:\n        if i%2!=0:\n            odd_numbers.append(i)\n    return odd_numbers\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list = []\n    for item in list:\n        if item % 2!= 0:\n            odd_list.append(item)\n    return odd_list\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    odd_list=[]\n    for i in range(len(list)):\n        if list[i]%2==1:\n            odd_list.append(list[i])\n    return odd_list\nprint(Split([1,2,3,4,5,6,7,8,9,10]))\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    for i in range(len(list)):\n        if(list[i]%2==0):\n            del list[i]\n"
    },
    {
        "number": 554,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns the odd ones.\n    '''\n    n = len(list)\n    return([x for x in list if x % 2!= 0])\n    \n    \n    \ndef Strip(list): \n    '''\n    Write a python function which takes a list of integers and only returns the even ones.\n    '''\n    n = len(list)\n    return([x for x in list if x % 2 == 0])\n    \n    \n    \ndef Substitute(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers that are\n    divisible by 5.\n    '''\n    return([x for x in list if x % 5 == 0])\n    \n    \n    \ndef Reverse(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers that are\n    greater than their index.\n    '''\n    return([x for x in list if x > list[list.index(x)]])\n    \n    \ndef Split(list): \n    '''\n    Write a python function which takes a list of integers and only returns a list of all the\n    integers which are greater than the last element.\n    '''\n    l = len(list)\n    return([x for x in list if x > list[l-1]])\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers that are\n    greater than their index.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Filter(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return([x for x in list if x % 5 == 0])\n    \n    \n    \ndef Even(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return([x for x in list if x % 5 == 0])\n    \n    \n    \ndef Filter(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return([x for x in list if x % 5 == 0])\n    \n    \n    \ndef Even(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return([x for x in list if x % 5 == 0])\n    \n    \n    \ndef Filter(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return([x for x in list if x % 5 == 0])\n    \n    \n    \ndef Even(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return([x for x in list if x % 5 == 0])\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Reverse(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list, reverse = True))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5.\n    '''\n    return(sorted(list))\n    \n    \n    \ndef Sort(list): \n    '''\n    Write a python function which takes a list of integers and only returns the integers which\n    are divisible by 5."
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum_cube_sum = sum(i**3 for i in range(1,n+1))\n    sum_nums_sum = sum(i for i in range(1,n+1))\n    return sum_nums_sum - sum_cube_sum\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def sum_of_squares_of_first_n(n) :\n        s = 0\n        for i in range(1,n+1) :\n            s += i**2\n        return s\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def diffsum(n) :\n        '''\n        Write a python function to find the difference between the sum of the cubes of the first n natural numbers and the sum of the cubes of the first n natural numbers.\n        '''\n        def sumofcubes(n) :\n            '''\n            Write a python function to find the sum of the cubes of the first n natural numbers.\n            '''\n            def cubearray(n) :\n                '''\n                Write a python function to find the cubes of the first n natural numbers.\n                '''\n                def cubebinning(n) :\n                    '''\n                    Write a python function to find the cubes of the first n natural numbers.\n                    '''\n                    def cubecube(n) :\n                        '''\n                        Write a python function to find the cubes of the first n natural numbers.\n                        '''\n                        def sumofcubes(n) :\n                            '''\n                            Write a python function to find the sum of the cubes of the first n natural numbers.\n                            '''\n                            def sumofcubearray(n) :\n                                '''\n                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                '''\n                                def sumofcubebinning(n) :\n                                    '''\n                                    Write a python function to find the sum of the cubes of the first n natural numbers.\n                                    '''\n                                    def sumofcubecube(n) :\n                                        '''\n                                        Write a python function to find the sum of the cubes of the first n natural numbers.\n                                        '''\n                                        def sumofcubefirst(n) :\n                                            '''\n                                            Write a python function to find the sum of the cubes of the first n natural numbers.\n                                            '''\n                                            def sumofcubesfirst(n) :\n                                                '''\n                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                '''\n                                                def sumofcubefirst(n) :\n                                                    '''\n                                                    Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                    '''\n                                                    def sumofcubesfirst(n) :\n                                                        '''\n                                                        Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                        '''\n                                                        def sumofcubesfirst(n) :\n                                                            '''\n                                                            Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                            '''\n                                                            def sumofcubesfirst(n) :\n                                                                '''\n                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                '''\n                                                                def sumofcubesfirst(n) :\n                                                                    '''\n                                                                    Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                    '''\n                                                                    def sumofcubesfirst(n) :\n                                                                        '''\n                                                                        Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                        '''\n                                                                    def sumofcubesfirst(n) :\n                                                                        '''\n                                                                        Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                        '''\n                                                                        def sumofcubesfirst(n) :\n                                                                            '''\n                                                                            Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                            '''\n                                                                            def sumofcubesfirst(n) :\n                                                                                '''\n                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                '''\n                                                                                def sumofcubesfirst(n) :\n                                                                                    '''\n                                                                                    Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                    '''\n                                                                                    def sumofcubesfirst(n) :\n                                                                                        '''\n                                                                                        Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                        '''\n                                                                                        def sumofcubesfirst(n) :\n                                                                                            '''\n                                                                                            Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                            '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                                '''\n                                                                                            def sumofcubesfirst(n) :\n                                                                                                '''\n                                                                                                Write a python function to find the sum of the cubes of the first n natural numbers.\n                                                                                "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # num_list = list(range(1,n+1))\n    # sum_num = sum(num_list)\n    # sum_cube = 0\n    # for i in num_list :\n    #     sum_cube = sum_cube + i**3\n    # return sum_cube - sum_num\n    return(sum(i**3 for i in range(1,n+1)) - sum(i**3 for i in range(1,n+1)))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n == 0 :\n        return 0\n    return (sum([x**3 for x in range(n)]) - sum([x**3 for x in range(n)]))\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    # An alternative solution\n    # total_sum = 0\n    # for i in range(n+1):\n    #     total_sum += i**3\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the average of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i\n    for i in range(n):\n        sum1=sum1+i\n    print(sum1/n)\n    '''\n    Write a python function to find the difference between the sum of squares of the first n natural numbers and the square of the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**2\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1**2\n    '''\n    Write a python function to find the average of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i\n    for i in range(n):\n        sum1=sum1+i\n    print(sum1/n)\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the square of the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1**2\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    summ=0\n    sum1=0\n    for i in range(n):\n        summ=summ+i**3\n    for i in range(n):\n        sum1=sum1+i\n    return summ-sum1\n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    sum"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    def calc_cube_sum(n):\n        s = 0\n        for i in range(1, n+1):\n            s += i**3\n        return s\n"
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    n = int(input())\n    if n < 0 :\n        return \n    else :\n        sum = 0\n        sum1 = 0\n        for i in range(0,n+1) :\n            sum += i**3\n        for i in range(0,n+1) :\n            sum1 += i\n        print(sum - sum1)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n       "
    },
    {
        "number": 555,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def difference(n) :  \n    '''\n    Write a python function to find the difference between the sum of cubes of the first n natural numbers and the sum of the first n natural numbers.\n    '''\n    if n <= 1 :\n        return n\n    return difference(n-1) + pow(n, 3) - pow(n, 2)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    odd_pair = 0\n    for i in range(N) :\n        for j in range(i+1,N) :\n            if(A[i] ^ A[j] == 1) :\n                odd_pair += 1\n                break\n    return odd_pair\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N-1):\n        for j in range(i+1,N):\n            if (A[i]!= A[j]) and ((A[i] ^ A[j]) % 2!= 0):\n                count = count+1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    if len(A)<2 :\n        return -1\n    n = len(A)\n    dp_arr = [[0]*n for _ in range(n)]\n    #Base cases\n    for i in range(n) :\n        dp_arr[i][i] = 1\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_1(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_2(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_3(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_4(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_5(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_6(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_7(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_8(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_9(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_10(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_11(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_12(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_13(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_14(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_15(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_16(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_17(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count\n    \ndef find_Odd_Pair_18(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0,N) :\n        for j in range(i+1,N) :\n            if ((A[i]^A[j])%2 == 1) :\n                count = count + 1\n    return count"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(N):\n        for j in range(i+1, N):\n            if A[i] ^ A[j] == 0:\n                count += 1\n                break\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(0, N) : \n        for j in range(i + 1, N) : \n            if ((A[i] ^ A[j]) & 1) :\n                count += 1\n    print(count)\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    num_odd = 0\n    for i in range(0,N) : \n        if ((A[i] ^ A[i+1])%2)==1 : \n            num_odd+=1\n    return num_odd\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    \n    #code here\n    count = 0\n    for i in range(N):\n        if A[i]%2==1:\n            count+=1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    count = 0\n    for i in range(1,N) :\n        if (A[i] == A[i-1]) :\n            continue\n        else :\n            if ((A[i] ^ A[i-1]) % 2 == 1) :\n                count += 1\n    return count\n"
    },
    {
        "number": 556,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_Odd_Pair(A,N) : \n    '''\n    Write a python function to count the number of pairs whose xor value is odd.\n    '''\n    pair = 0\n    for i in range(N) : \n        for j in range(N) : \n            if (A[i] & A[j]) == 0 : \n                pair = pair + 1\n    return pair \n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    res = ''\n    for c in string:\n        res = res + c.lower() if c.islower() else res + c.upper()\n    return res\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string == '':\n        return string\n    else:\n        return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    if string.islower():\n        return string.upper()\n    else:\n        return string.lower()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 557,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def toggle_string(string):\n    '''\n    Write a function to toggle the case of all characters in a string.\n    '''\n    return string.swapcase()\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    num1 = str(n1)\n    num2 = str(n2)\n    digit_diff = 0\n    if len(num1) == len(num2):\n        for i in range(0, len(num1)):\n            if num1[i]!= num2[i]:\n                diff = int(num1[i]) - int(num2[i])\n                digit_diff += diff\n    return digit_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    s = 0\n    if n1 < n2:\n        n1, n2 = n2, n1\n    for i in range(len(str(n1))):\n        s += abs(n1 // 10 ** i - n2 // 10 ** i)\n    return s\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1 = int(n1)\n    n2 = int(n2)\n    res = 0\n    while n1 > 0 or n2 > 0:\n        res += abs(n1 % 10 - n2 % 10)\n        n1 = int(n1 / 10)\n        n2 = int(n2 / 10)\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_distance = 0\n    # Convert integers to decimal\n    n1_str = str(n1)\n    n2_str = str(n2)\n    # Create a list of the numbers in the decimal number and sort them\n    decimal_num = list(n1_str + n2_str)\n    decimal_num.sort()\n    # Add the difference of the per-digit distance\n    for i in range(len(decimal_num)):\n        sum_distance += int(decimal_num[i]) - int(decimal_num[i - 1])\n    return sum_distance\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    def distance(x1, x2):\n        if x1 == x2:\n            return 0\n        else:\n            return x1-x2\n    if n1 == n2:\n        return 0\n    return (sum([distance(n1, n2) for n1, n2 in zip(str(n1), str(n2))]))\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    n1_list = list(str(n1))\n    n2_list = list(str(n2))\n    n1_list.sort()\n    n2_list.sort()\n    if n1_list == n2_list:\n        return 0\n    else:\n        a = len(n1_list)-1\n        b = len(n2_list)-1\n        i = 0\n        sum_dif = 0\n        while i <= b:\n            if n1_list[a]!= n2_list[i]:\n                sum_dif += int(n1_list[a]) - int(n2_list[i])\n            a -= 1\n            i += 1\n        return sum_dif\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    # Calculate the difference of each digit from both numbers and sum those differences\n    # There is a subtlety here, since the difference between an integer and itself is zero\n    diff = abs(n1 - n2)\n    sum_of_diff = 0\n    while diff > 0:\n        sum_of_diff += diff % 10\n        diff = diff // 10\n    return sum_of_diff\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum = 0\n    n1 = str(n1)\n    n2 = str(n2)\n    for i in range(len(n1)):\n        sum += abs(int(n1[i]) - int(n2[i]))\n    return sum\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    distance = 0\n    digits = {}\n    for i in range(len(str(n1))):\n        digits[str(i)] = n1 % (10 ** i)\n    for i in range(len(str(n2))):\n        distance += abs(digits[str(i)] - n2 % (10 ** i))\n    return distance\n"
    },
    {
        "number": 558,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def digit_distance_nums(n1, n2):\n    '''\n    Write a python function to find the sum of the per-digit difference between two integers.\n    '''\n    sum_of_distances = 0\n    for i in range(len(str(n1))):\n        sum_of_distances += abs(n1[i] - n2[i])\n    return sum_of_distances\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    for i in range(0, size-1):\n        if a[i] > max_sum:\n            max_sum = a[i]\n        for j in range(i+1, size):\n            if a[j] + max_sum > a[j]:\n                max_sum = a[j] + max_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = -float('inf')\n    cur_sum = 0\n    for i in range(size):\n        cur_sum += a[i]\n        if cur_sum > max_sum:\n            max_sum = cur_sum\n    return max_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    if size == 0:\n        return 0\n    largest_sub_sum = float('-inf')\n    for i in range(0, size):\n        sub_sum = 0\n        for j in range(0, size):\n            sub_sum += a[j]\n            if sub_sum > largest_sub_sum:\n                largest_sub_sum = sub_sum\n    return largest_sub_sum\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_so_far = a[0]\n    max_ending_here = a[0]\n    for i in range(1, size):\n        max_ending_here = max(a[i], max_ending_here + a[i])\n        max_so_far = max(max_so_far, max_ending_here)\n    return max_so_far\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    sum_list = []\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    # NOTE: You must have at least one element in the input list.\n    #\n    # NOTE: You must use the max() function to compare.\n    #\n    # Example:\n    #\n    # Input: [1, -1, -2, -3, -4]\n    # Output: 6\n    # Explanation: \n    # The subarray with the largest sum is obtained after starting from and ending at indices (1, 3), (1, 4), and (2, 4).\n    #\n    # NOTE: The input list could be in any order.\n    #\n    # NOTE: The subarray could be one element long.\n    \n    '''\n    keeps track of the max sum so far and the max length\n    '''\n    max_sum = -1\n    max_len = 0\n    \n    for i in range(size):\n        sum_so_far = 0\n        '''\n        keeps track of the sum of the subarray from the index i onwards\n        '''\n        for j in range(i, size):\n            sum_so_far += a[j]\n            '''\n            keeps track of the max sum and the max length\n            '''\n            if sum_so_far > max_sum:\n                max_sum = sum_so_far\n                max_len = j - i + 1\n    \n    return max_sum, max_len\n    \nprint(max_sub_array_sum([1, -1, -2, -3, -4], 5))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 3))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([], 1))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([1], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 5))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 3))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([], 1))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([1], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 5))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 3))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([], 1))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([1], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 5))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 3))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([], 1))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([1], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 5))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 3))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([], 1))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([1], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 5))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 3))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([], 1))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([1], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 5))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 3))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([], 1))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([1], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 5))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 3))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([], 1))\nprint(max_sub_array_sum([1], 1))\nprint(max_sub_array_sum([1], 2))\nprint(max_sub_array_sum([1], 3))\nprint(max_sub_array_sum([1], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 5))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 4))\nprint(max_sub_array_sum([1, -1, -2, -3, -4], 3)"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = 0\n    start = 0\n    curr_sum = 0\n    for i in range(size):\n        curr_sum = curr_sum + a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            start = i\n        elif curr_sum < 0:\n            curr_sum = 0\n    print(\"Largest contiguous sub-list sum is \", max_sum)\n    print(\"Starting index: \", start)\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    max_sum = a[0]\n    curr_sum = 0\n    max_len = 0\n    for i in range(size):\n        curr_sum += a[i]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n            max_len = 1\n        elif curr_sum == max_sum:\n            max_len += 1\n    return max_sum, max_len\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    ans = 0\n    for i in range(size):\n        ans = max(ans, a[i] + max_sub_array_sum(a, size))\n"
    },
    {
        "number": 559,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sub_array_sum(a, size):\n    '''\n    Write a function to find the sum of the largest contiguous sublist in the given list.\n    '''\n    s = sum(a)\n    if s < 0:\n        return -1\n    else:\n        return max([s - sum(a[i:i+n]) for i in range(0,size-1)])\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_tup = []\n    union_tup.extend(test_tup1)\n    union_tup.extend(test_tup2)\n    union_tup.sort()\n    return union_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_tup1 = sorted(set(test_tup1))\n    test_tup2 = sorted(set(test_tup2))\n    return test_tup1 + test_tup2\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    test_list = []\n    for num in range(len(test_tup1)):\n        test_list.append(test_tup1[num])\n    for num in range(len(test_tup2)):\n        if test_list.count(test_tup2[num]) == 0:\n            test_list.append(test_tup2[num])\n    return sorted(test_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    new_tup = []\n    for i in test_tup1:\n        new_tup.append(i)\n    for j in test_tup2:\n        if j not in new_tup:\n            new_tup.append(j)\n    new_tup.sort()\n    return new_tup\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    set1 = set(test_tup1)\n    set2 = set(test_tup2)\n    print(set1)\n    print(set2)\n    set3 = set1 | set2\n    print(set3)\n    sorted_list = list(set3)\n    sorted_list.sort()\n    print(sorted_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    tup1 = set(test_tup1)\n    tup2 = set(test_tup2)\n    union_tup = tup1.union(tup2)\n    union_tup = sorted(union_tup)\n    print(union_tup)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union = []\n    for val in test_tup1:\n        if val not in union:\n            union.append(val)\n    for val in test_tup2:\n        if val not in union:\n            union.append(val)\n    union.sort()\n    return union\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return tuple(sorted(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    union_list = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i] not in union_list and test_tup2[i] not in union_list:\n            union_list.append(test_tup1[i])\n            union_list.append(test_tup2[i])\n    return tuple(union_list)\n"
    },
    {
        "number": 560,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def union_elements(test_tup1, test_tup2):\n    '''\n    Write a function to find the union of the elements of two given tuples and output them in sorted order.\n    '''\n    return sorted(list(set(test_tup1) | set(test_tup2)))\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    if len(lst)==0:\n        return 0\n    else:\n        return 1 + Find_Max_Length(lst[1:])\nlst = list(map(int,input().split()))\nprint(Find_Max_Length(lst))"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    maximum=0\n    max_length=0\n    for i in range(len(lst)):\n        if lst[i]==max(lst):\n            maximum+=1\n            if maximum>max_length:\n                max_length=maximum\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    a=0\n    b=0\n    for i in range(len(lst)):\n        if lst[i]%2==0:\n            a=a+1\n        else:\n            b=b+1\n    if a>b:\n        return a\n    else:\n        return b\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    \n    #picks the first element in the list as the max length\n    longest = len(lst[0])\n    \n    #sets the max length to the value of the first element\n    max_len = len(lst[0])\n    \n    #loops through the elements in the list\n    for i in range(1,len(lst)):\n        #if the element is longer, updates the max length\n        if len(lst[i]) > max_len:\n            max_len = len(lst[i])\n        \n        #if the element is shorter, updates the longest length\n        if len(lst[i]) < longest:\n            longest = len(lst[i])\n        \n    return max_len\n        \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_len = 0\n    count = 1\n    for i in range(len(lst)):\n        if i == 0:\n            length = lst[i]\n        else:\n            if lst[i] > length:\n                length = lst[i]\n                count += 1\n            else:\n                count = 1\n        if count > max_len:\n            max_len = count\n    return max_len\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for item in lst:\n        if len(item) > max_length:\n            max_length = len(item)\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    # your code here\n    return max_length\n    \n    \n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    sorted_lst = sorted(lst, key=len, reverse=True)\n    sorted_lst = sorted_lst[:10]\n    \n    max_len = max([len(i) for i in sorted_lst])\n    return max_len\n    \nif __name__ == \"__main__\":\n    # Driver Code\n    lst = [10, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    print(Find_Max_Length(lst))\n    \n    lst1 = [[10, 1], [2, 3, 4], [5, 6, 7], [8, 9]]\n    print(Find_Max_Length(lst1))\n    \n    lst2 = [[10, 1], [2, 3, 4], [5, 6, 7], [8, 9, 10, 1]]\n    print(Find_Max_Length(lst2))\n    \n    lst3 = [[10, 1], [2, 3, 4], [5, 6, 7], [8, 9], 10]\n    print(Find_Max_Length(lst3))"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    max_length = 0\n    for num in range(len(lst)):\n        length = 0\n        for i in range(num+1,len(lst)):\n            if lst[i] > lst[num]:\n                length += 1\n            else:\n                break\n        if length > max_length:\n            max_length = length\n    return max_length\n"
    },
    {
        "number": 562,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Find_Max_Length(lst):  \n    '''\n    Write a python function to find the length of the longest sublists.\n    '''\n    dic={}\n    for i in range(len(lst)):\n        temp=[]\n        for j in range(i,len(lst)):\n            temp.append(lst[j])\n            if j == len(lst)-1:\n                break\n            if lst[j] in dic:\n                dic[lst[j]] = dic.get(lst[j]) + 1\n            else:\n                dic[lst[j]] = 1\n    max_count = max(dic.values())\n    return max_count\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    #list = re.findall('\"([^\"]*)\"', text)\n    list = re.findall('\"\\w+\"', text)\n    print(list)\n    \ndef remove_quotes(text):\n    '''\n    Write a function to remove all quotation marks (single or double) from a string.\n    '''\n    #list = re.findall(\"\\w+\", text)\n    #print(list)\n    list = re.sub(\"'\", '', text)\n    print(list)\n    \ndef extract_numbers(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    #list = re.findall(\"[0-9]+\", text)\n    #print(list)\n    list = re.findall(\"\\d+\", text)\n    print(list)\n    \ndef check_symbol(text):\n    '''\n    Write a function to check for symbols in a string.\n    '''\n    #list = re.findall(\"[a-zA-Z]+\", text)\n    #print(list)\n    list = re.findall(\"[^\\w]+\", text)\n    print(list)\n    \ndef check_special(text):\n    '''\n    Write a function to check for special characters in a string.\n    '''\n    #list = re.findall(\"[^a-zA-Z0-9]+\", text)\n    #print(list)\n    list = re.findall(\"[^\\s]+\", text)\n    print(list)\n    \ndef check_vowels(text):\n    '''\n    Write a function to check for vowels in a string.\n    '''\n    #list = re.findall(\"[aeiou]\", text)\n    #print(list)\n    list = re.findall(\"[aeiouAEIOU]\", text)\n    print(list)\n    \ndef check_consonants(text):\n    '''\n    Write a function to check for consonants in a string.\n    '''\n    #list = re.findall(\"[^aeiouAEIOU]\", text)\n    #print(list)\n    list = re.findall(\"[^aeiouAEIOU]\", text)\n    print(list)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r\"[\\\"](.*?)[\\\"]\",text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    values = re.findall(r'\"[^\"]*\"', text)\n    values = [value.replace('\"', '') for value in values]\n    return values\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    return re.findall(r'\\w+', text)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    if(len(text) > 0):\n        start_marker = 0\n        end_marker = 0\n        text_length = len(text)\n        while(start_marker!= text_length and end_marker!= text_length):\n            start_marker = text.find('\"', start_marker)\n            if(start_marker == -1):\n                start_marker = text_length\n            end_marker = text.find('\"', start_marker + 1)\n            if(end_marker!= -1):\n                if(start_marker < end_marker):\n                    return text[start_marker+1:end_marker]\n        return text\n    else:\n        return \"\"\ndef extract_numbers(text):\n    '''\n    Write a function to extract numbers from a string.\n    '''\n    if(len(text) > 0):\n        start_marker = 0\n        end_marker = 0\n        text_length = len(text)\n        while(start_marker!= text_length and end_marker!= text_length):\n            start_marker = text.find('0', start_marker)\n            if(start_marker == -1):\n                start_marker = text_length\n            end_marker = text.find('0', start_marker + 1)\n            if(end_marker!= -1):\n                if(start_marker < end_marker):\n                    return text[start_marker+1:end_marker]\n        return text\n    else:\n        return \"\"\ndef extract_amount(text):\n    '''\n    Write a function to extract amount from a string.\n    '''\n    if(len(text) > 0):\n        start_marker = 0\n        end_marker = 0\n        text_length = len(text)\n        while(start_marker!= text_length and end_marker!= text_length):\n            start_marker = text.find('$', start_marker)\n            if(start_marker == -1):\n                start_marker = text_length\n            end_marker = text.find('$', start_marker + 1)\n            if(end_marker!= -1):\n                if(start_marker < end_marker):\n                    return text[start_marker+1:end_marker]\n        return text\n    else:\n        return \"\"\ndef extract_name(text):\n    '''\n    Write a function to extract name from a string.\n    '''\n    if(len(text) > 0):\n        start_marker = 0\n        end_marker = 0\n        text_length = len(text)\n        while(start_marker!= text_length and end_marker!= text_length):\n            start_marker = text.find('\"', start_marker)\n            if(start_marker == -1):\n                start_marker = text_length\n            end_marker = text.find('\"', start_marker + 1)\n            if(end_marker!= -1):\n                if(start_marker < end_marker):\n                    return text[start_marker+1:end_marker]\n        return text\n    else:\n        return \"\"\ndef extract_duration(text):\n    '''\n    Write a function to extract duration from a string.\n    '''\n    if(len(text) > 0):\n        start_marker = 0\n        end_marker = 0\n        text_length = len(text)\n        while(start_marker!= text_length and end_marker!= text_length):\n            start_marker = text.find('\"', start_marker)\n            if(start_marker == -1):\n                start_marker = text_length\n            end_marker = text.find('\"', start_marker + 1)\n            if(end_marker!= -1):\n                if(start_marker < end_marker):\n                    return text[start_marker+1:end_marker]\n        return text\n    else:\n        return \"\"\ndef extract_date(text):\n    '''\n    Write a function to extract date from a string.\n    '''\n    if(len(text) > 0):\n        start_marker = 0\n        end_marker = 0\n        text_length = len(text)\n        while(start_marker!= text_length and end_marker!= text_length):\n            start_marker = text.find('\"', start_marker)\n            if(start_marker == -1):\n                start_marker = text_length\n            end_marker = text.find('\"', start_marker + 1)\n            if(end_marker!= -1):\n                if(start_marker < end_marker):\n                    return text[start_marker+1:end_marker]\n        return text\n    else:\n        return \"\"\ndef extract_address(text):\n    '''\n    Write a function to extract address from a string.\n    '''\n    if(len(text) > 0):\n        start_marker = 0\n        end_marker = 0\n        text_length = len(text)\n        while(start_marker!= text_length and end_marker!= text_length):\n            start_marker = text.find('\"', start_marker)\n            if(start_marker == -1):\n                start_marker = text_length\n            end_marker = text.find('\"', start_marker + 1)\n            if(end_marker!= -1):\n                if(start_marker < end_marker):\n                    return text[start_marker+1:end_marker]\n        return text\n    else:\n        return \"\"\ndef extract_email(text):\n    '''\n    Write a function to extract email from a string.\n    '''\n    if(len(text) > 0):\n        start_marker = 0\n        end_marker = 0\n        text_length = len(text)\n        while(start_marker!= text_length and end_marker!= text_length):\n            start_marker = text.find('\"', start_marker)\n            if(start_marker == -1):\n                start_marker = text_length\n            end_marker = text.find('\"', start_marker + 1)\n            if(end_marker!= -1):\n                if(start_marker < end_marker):\n                    return text[start_marker+1:end_marker]\n        return text\n    else:\n        return \"\"\ndef extract_phone(text):\n    '''\n    Write a function to extract phone number from a string.\n    '''\n    if(len(text) > 0):\n        start_marker = 0\n        end_marker = 0\n        text_length = len(text)\n        while(start_marker!= text_length and end_marker!= text_length):\n            start_marker = text.find('\"', start_marker)\n            if(start_marker == -1):\n                start_marker = text_length\n            end_marker = text.find('\"', start_marker + 1)\n            if(end_marker!= -1):\n                if(start_marker < end_marker):\n                    return text[start_marker+1:end_marker]\n        return text\n    else:\n        return \"\"\ndef extract_text(text):\n    '''\n    Write a function to extract text from a string.\n    '''\n    if(len(text) > 0):\n        start_marker = 0\n        end_marker = 0\n        text_length = len(text)\n        while(start_marker!= text_length and end_marker!= text_length):\n            start_marker = text.find('\"', start_marker)\n            if(start_marker == -1):\n                start_marker = text_length\n            end_marker = text.find('\"', start_marker + 1)\n            if(end_marker!= -1):\n                if(start_marker < end_marker):\n                    return text[start_marker+1:end_marker]\n        return text\n    else:\n        return \"\"\ndef extract_name_number(text):\n    '''\n    Write a function to extrac"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    new_text = text.strip()\n    if new_text[0] == '\"' and new_text[-1] == '\"':\n        return text[1:-1]\n    elif new_text[0] == \"\\\"\" and new_text[-1] == \"\\\"\":\n        return text[1:-1]\n    else:\n        return None\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    extracted_values = re.findall('\"|\\'.*?\\'', text)\n    return ''.join(extracted_values)\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    v = re.findall('\"[^\"]+\"', text)\n    return v\n    \nprint(extract_values(\"Hi, this is a very long string that I'm splitting up into smaller strings and joining them back up. Let's see how it works\"))\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    val = re.search(r'\\\".*\\\"', text)\n    if val:\n        return val.group()\n"
    },
    {
        "number": 563,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_values(text):\n    '''\n    Write a function to extract values between quotation marks from a string.\n    '''\n    text = text.replace(\"'\", \"\")\n    regex_pattern = r'\"(.*?)\"'\n    match = re.findall(regex_pattern, text)\n    return match\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    res = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i] == arr[j]:\n                res+=1\n    return res\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if len(arr)<2:\n        return 0\n    count=0\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]>arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                count += 1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        for j in range(i+1,len(arr)):\n            if(arr[i]!= arr[j]):\n                count = count+1\n                \n    return count\nprint(count_Pairs([1,1,2,2],4))\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    counter=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                counter+=1\n    return counter\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    count=0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            if arr[i]==arr[j]:\n                count+=1\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n==1:\n        return 0\n    if n==2:\n        return 2\n    dp = [[0 for i in range(n)] for j in range(n)]\n    for i in range(1,n):\n        dp[0][i] = 1\n    for i in range(1,n):\n        dp[i][0] = 1\n    for i in range(1,n):\n        for j in range(1,n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    return dp[n-1][n-1]"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    if n==0:\n        return 0\n    if n==1:\n        return 1\n    count=0\n    for i in range(n-1):\n        for j in range(i+1,n):\n            count+=count_Pairs_Util(arr,i,j,n)\n    return count\n"
    },
    {
        "number": 564,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_Pairs(arr,n): \n    '''\n    Write a python function which takes a list of integers and counts the number of possible unordered pairs where both elements are unequal.\n    '''\n    m = {}\n    for i in range(n):\n        if arr[i] in m:\n            m[arr[i]] += 1\n        else:\n            m[arr[i]] = 1\n    count = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i]!= arr[j]:\n                if arr[i] in m and arr[j] in m:\n                    if m[arr[i]] and m[arr[j]] > 0:\n                        count += 1\n                        m[arr[i]] -= 1\n                        m[arr[j]] -= 1\n    return count\n    \nif __name__ == \"__main__\":\n    arr = [1,2,3,4,5,6,7,8,9]\n    print(count_Pairs(arr,9)"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split()\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word) \n    \ndef max_min(arr): \n    '''\n    Write a python function to find the max and min value of an array.\n    '''\n    min = arr[0] \n    max = arr[0] \n    \n    for i in range(1, len(arr)): \n        if arr[i] < min: \n            min = arr[i] \n        if arr[i] > max: \n            max = arr[i] \n        \n    return min, max \n    \ndef has_duplicates(arr): \n    '''\n    Write a python function to check whether a list contains any duplicates.\n    '''\n    return len(arr)!= len(set(arr)) \n    \ndef swap(arr, x, y): \n    '''\n    Write a python function to swap a given value with the element in given position.\n    '''\n    temp = arr[x] \n    arr[x] = arr[y] \n    arr[y] = temp \n    \ndef is_monotonic(arr): \n    '''\n    Write a python function to check whether a given array is monotonic or not.\n    '''\n    x = -1 \n    for i in range(1, len(arr)): \n        if arr[i-1] < arr[i]: \n            x = i \n            \n    return x == len(arr) - 1 \n    \ndef is_prime(num): \n    '''\n    Write a python function to check whether a given number is prime or not.\n    '''\n    if num > 1: \n        for i in range(2, num): \n            if (num % i) == 0: \n                print(num, \"is not a prime number.\") \n                break \n        else: \n            print(num, \"is a prime number.\") \n    else: \n        print(num, \"is not a prime number.\") \n        \ndef is_palindrome(string): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(string) == 0: \n        return True \n    if len(string) == 1: \n        return True \n    if len(string) == 2: \n        return True \n    \n    if string[0]!= string[-1]: \n        return False \n    else: \n        return is_palindrome(string[1:-1]) \n        \ndef is_palindrome_v2(string): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(string) == 0: \n        return True \n    if len(string) == 1: \n        return True \n    if len(string) == 2: \n        return True \n    \n    if string[0]!= string[-1]: \n        return False \n    else: \n        return is_palindrome(string[1:-1]) \n        \ndef count_substring(string, sub_string): \n    '''\n    Write a python function to count the occurrences of a substring in a given string.\n    '''\n    count = 0 \n    for i in range(len(string)): \n        if string[i:].startswith(sub_string): \n            count = count + 1 \n    return count \n    \ndef count_substring_v2(string, sub_string): \n    '''\n    Write a python function to count the occurrences of a substring in a given string.\n    '''\n    count = 0 \n    \n    start = 0 \n    end = 0 \n    \n    while end < len(string): \n        if string[end:].startswith(sub_string): \n            count = count + 1 \n            end = end + len(sub_string) \n        else: \n            start = end \n            end = end + 1 \n    return count \n    \ndef is_substring(string, sub_string): \n    '''\n    Write a python function to check whether a given string is a substring or not.\n    '''\n    if sub_string in string: \n        return True \n    else: \n        return False \n    \ndef is_substring_v2(string, sub_string): \n    '''\n    Write a python function to check whether a given string is a substring or not.\n    '''\n    if sub_string in string: \n        return True \n    else: \n        return False \n        \ndef is_palindrome_v3(string): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(string) == 0: \n        return True \n    if len(string) == 1: \n        return True \n    if len(string) == 2: \n        return True \n    \n    if string[0]!= string[-1]: \n        return False \n    else: \n        return is_palindrome_v3(string[1:-1]) \n        \ndef is_palindrome_v4(string): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    if len(string) == 0: \n        return True \n    if len(string) == 1: \n        return True \n    if len(string) == 2: \n        return True \n    \n    if string[0]!= string[-1]: \n        return False \n    else: \n        return is_palindrome_v4(string[1:-1]) \n    \ndef is_palindrome_v5(string): \n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    def is_palindrome(string): \n        if len(string) == 0: \n            return True \n        if len(string) == 1: \n            return True \n        if len(string) == 2: \n            return True \n        \n        if string[0]!= string[-1]: \n            return False \n        else: \n            return is_palindrome(string[1:-1]) \n    \n    if string[0]!= string[-1]: \n        return False \n    else: \n        return is_palindrome(string[1:-1]) \n    \ndef reverse(string): \n    '''\n    Write a python function to reverse a string.\n    '''\n    return string[::-1] \n    \ndef reverse_v2(string): \n    '''\n    Write a python function to reverse a string.\n    '''\n    if len(string) == 1: \n        return string \n    return reverse(string[1:]) + string[0] \n    \ndef odd_even(string): \n    '''\n    Write a python function to count the occurrence of each character in a string.\n    '''\n    occ = {} \n    for i in string: \n        if i not in occ: \n            occ[i] = 1 \n        else: \n            occ[i] = occ[i] + 1 \n    for i in occ: \n        if occ[i] % 2!= 0: \n            return False \n    return True \n    \ndef odd_even_v2(string): \n    '''\n    Write a python function to count the occurrence of each character in a string.\n    '''\n    occ = {} \n    for i in string: \n        if i not in occ: \n            occ[i] = 1 \n        else: \n            occ[i] = occ[i] + 1 \n    for i in occ: \n        if occ[i] % 2!= 0: \n            return False \n    return True \n    \ndef is_valid_parenthese(string): \n    '''\n    Write a python function to check whether a given string is valid or not.\n    '''\n    stack = [] \n    if string == \"\": \n        return True \n    for i in string: \n        if i == \"(\" or i == \"{\" or i == \"[\": \n            stack.append(i) \n        elif i == \")\": \n            if len(stack) == 0"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word.split() \n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word[1:] + word[:1]\n    \ndef half_split(word):\n    '''\n    Write a python function to split a string into characters.\n    '''\n    return word[:len(word)//2] + word[len(word)//2+1:]\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    return list(word)\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    print(word)\n    return word\n"
    },
    {
        "number": 565,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split(word): \n    '''\n    Write a python function to split a string into characters.\n    '''\n    s1 = []\n    for i in word:\n        s1.append(i)\n    print(''.join(s1))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert n >= 0\n    res = 0\n    while n:\n        res += n % 10\n        n //= 10\n    return res\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    \n    # Convert the non-negative integer into a list of integers\n    # and sum them up\n    l = list(map(int, list(str(n))))\n    sum_of_n = sum(l)\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    num_str = str(n)\n    return sum([int(x) for x in num_str])\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    assert type(n) == int and n > 0, 'Argument must be a positive integer.'\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return sum(int(i) for i in str(n))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    #sum_digits(9) # 4\n    #sum_digits(42) # 18\n    #sum_digits(47) # 13\n    #sum_digits(67) # 28\n    #sum_digits(0) # 0\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    return int(str(n).lstrip('-').replace('-', ''))\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    sum = 0\n    while n > 0:\n        sum += n % 10\n        n = n // 10\n    return sum\n"
    },
    {
        "number": 566,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_digits(n):\n    '''\n    Write a function to get the sum of the digits of a non-negative integer.\n    '''\n    # Method 1: Loop through n\n    # Time: O(n) | Space: O(1)\n    total = 0\n    while n > 0:\n        total += n % 10\n        n = n // 10\n    return total\n    \n    # Method 2: Convert to string\n    # Time: O(n) | Space: O(n)\n    '''\n    total = 0\n    str_num = str(n)\n    for char in str_num:\n        total += int(char)\n    return total\n    '''\n    \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    # for i in range(0,len(list1)-1):\n    #     if list1[i+1] < list1[i]:\n    #         return False\n    #     else:\n    #         continue\n    # return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return True if list1 == sorted(list1) else False\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for i in range(len(list1)-1):\n        if list1[i] > list1[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    return list1 == sorted(list1)\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    \n    return sorted(list1) == list1\n    \n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    if len(list1) == 1:\n        return True\n    prev = list1[0]\n    for item in list1[1:]:\n        if item < prev:\n            return False\n        prev = item\n    return True\n"
    },
    {
        "number": 567,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def issort_list(list1):\n    '''\n    Write a function to check whether a specified list is sorted or not.\n    '''\n    for index in range(1, len(list1)):\n        if list1[index] < list1[index-1]:\n            return False\n    return True\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for _ in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list_empty = []\n    for i in range(length):\n        list_empty.append({})\n    return list_empty\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    d = {}\n    l = []\n    for i in range(length):\n        d[i] = {}\n        l.append(d[i])\n    return l\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    new_list = []\n    for i in range(length):\n        new_list.append({\"first_name\": \"\", \"last_name\": \"\", \"email\": \"\"})\n    return new_list\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    return [{} for i in range(length)]\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    list = []\n    for i in range(length):\n        list.append({})\n    return list\n    \ndef no_duplicates(list):\n    '''\n    Write a function to remove all duplicate items from a list.\n    '''\n    return set(list)\n"
    },
    {
        "number": 568,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def empty_list(length):\n    '''\n    Write a function to create a list of N empty dictionaries.\n    '''\n    result = []\n    for i in range(length):\n        result.append({})\n    return result\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1 = sorted(list1)\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    for i in range(len(list1)):\n        list1[i] = sorted(list1[i])\n    return list1\n    \ndef split_lists(list1):\n    '''\n    Write a function to split a list of lists into a list of lists of\n    lists.\n    '''\n    new_list = []\n    for i in list1:\n        new_list.append(i)\n    return new_list\n    \ndef calc_list(list1):\n    '''\n    Write a function to calculate the mean of the numbers in a list of lists.\n    '''\n    for i in list1:\n        total = 0\n        for j in i:\n            total = total + j\n        avg = total/len(i)\n        print(avg)\n    return list1\n    \ndef invert_dict(dict1):\n    '''\n    Write a function to invert a dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        new_dict[dict1[key]] = key\n    return new_dict\n    \ndef find_path(dict1, origin, destination):\n    '''\n    Write a function to find a path from one node to another node in a\n    dictionary.\n    '''\n    path = []\n    queue = deque()\n    queue.append(origin)\n    visited = set()\n    while queue:\n        node = queue.popleft()\n        if node == destination:\n            while node!= origin:\n                path.append(node)\n                node = path[-1]\n            path.append(node)\n            return path[::-1]\n        if node not in visited:\n            visited.add(node)\n            for neighbor in dict1[node]:\n                queue.append(neighbor)\n    return path\n    \ndef flatten_list(list1):\n    '''\n    Write a function to flatten a given list of lists.\n    '''\n    new_list = []\n    for i in list1:\n        for j in i:\n            new_list.append(j)\n    return new_list\n    \ndef remove_empty(list1):\n    '''\n    Write a function to remove empty elements from a list of lists.\n    '''\n    new_list = []\n    for i in list1:\n        if i!= []:\n            new_list.append(i)\n    return new_list\n    \ndef dictionary_sum(dict1):\n    '''\n    Write a function to sum up a dictionary.\n    '''\n    total = 0\n    for i in dict1:\n        total = total + dict1[i]\n    return total\n    \ndef get_values(dict1):\n    '''\n    Write a function to return the values of a dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        new_dict[key] = dict1[key]\n    return new_dict\n    \ndef get_keys(dict1):\n    '''\n    Write a function to return the keys of a dictionary.\n    '''\n    new_dict = {}\n    for key in dict1:\n        new_dict[key] = key\n    return new_dict\n    \ndef intersection(list1, list2):\n    '''\n    Write a function to find the intersection of two lists.\n    '''\n    new_list = []\n    for i in list1:\n        if i in list2:\n            new_list.append(i)\n    return new_list\n    \ndef union(list1, list2):\n    '''\n    Write a function to find the union of two lists.\n    '''\n    new_list = []\n    for i in list1:\n        if i not in list2:\n            new_list.append(i)\n    for i in list2:\n        if i not in list1:\n            new_list.append(i)\n    return new_list\n    \ndef set_intersection(set1, set2):\n    '''\n    Write a function to find the intersection of two sets.\n    '''\n    return set1 & set2\n    \ndef set_union(set1, set2):\n    '''\n    Write a function to find the union of two sets.\n    '''\n    return set1 | set2\n    \ndef set_difference(set1, set2):\n    '''\n    Write a function to find the difference of two sets.\n    '''\n    return set1 - set2\n    \ndef dict_intersection(dict1, dict2):\n    '''\n    Write a function to find the intersection of two dictionaries.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i in dict2:\n            new_dict[i] = dict1[i]\n    return new_dict\n    \ndef dict_union(dict1, dict2):\n    '''\n    Write a function to find the union of two dictionaries.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i not in dict2:\n            new_dict[i] = dict1[i]\n    for i in dict2:\n        if i not in dict1:\n            new_dict[i] = dict2[i]\n    return new_dict\n    \ndef dict_difference(dict1, dict2):\n    '''\n    Write a function to find the difference of two dictionaries.\n    '''\n    new_dict = {}\n    for i in dict1:\n        if i not in dict2:\n            new_dict[i] = dict1[i]\n    for i in dict2:\n        if i not in dict1:\n            new_dict[i] = dict2[i]\n    return new_dict\n    \ndef dict_find_key(dict1, key):\n    '''\n    Write a function to find the key of a dictionary that has the value\n    key.\n    '''\n    for i in dict1:\n        if dict1[i] == key:\n            return i\n    return None\n    \ndef dict_find_value(dict1, value):\n    '''\n    Write a function to find the value of a dictionary that has the key\n    key.\n    '''\n    for i in dict1:\n        if dict1[i] == value:\n            return i\n    return None\n    \ndef dict_find_max(dict1):\n    '''\n    Write a function to find the maximum key of a dictionary.\n    '''\n    max_key = None\n    for i in dict1:\n        if max_key == None:\n            max_key = i\n        elif dict1[i] > dict1[max_key]:\n            max_key = i\n    return max_key\n    \ndef dict_find_min(dict1):\n    '''\n    Write a function to find the minimum key of a dictionary.\n    '''\n    min_key = None\n    for i in dict1:\n        if min_key == None:\n            min_key = i\n        elif dict1[i] < dict1[min_key]:\n            min_key = i\n    return min_key\n    \ndef dict_find_max_key_value(dict1):\n    '''\n    Write a function to find the maximum value of a dictionary.\n    '''\n    max_value = None\n    for i in dict1:\n        if max_value == None:\n            max_value = i\n        elif dict1[i] > dict1[max_value]:\n            max_value = i\n    return max_value\n    \ndef dict_find_min_key_value(dict1):\n    '''\n    Write a function to find the minimum value of a dictionary.\n    '''\n    min_value = None\n    for i in dict1:\n        if min_value == None:\n            min_value = i\n        elif dict1[i] < dict1[min_value]:\n            min_value = i\n    return min_value\n    \ndef dict_get_sum(dict1):\n    '''\n    Write a function to get the sum of the keys and values of a dictionary.\n    '''\n    total = 0\n    for i in dict1:\n        total = total + dict1[i]\n    return total\n    \ndef dict_get_average(dict1):\n    '''\n    Write a function to get the average of the keys and values of a dictionary.\n    '''\n    total "
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    def sort_sublist(list1):\n        for i in range(len(list1)):\n            list1[i] = sorted(list1[i])\n        return list1\n    return sort_sublist(list1)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    size = len(list1)\n    for i in range(0, size):\n        for j in range(0, size - 1):\n            if list1[j][1] > list1[j+1][1]:\n                temp = list1[j]\n                list1[j] = list1[j+1]\n                list1[j+1] = temp\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        list2 += sorted(list1[i])\n    return list2\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    return sorted(list1, key=len)\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list_of_lists = []\n    for sublist in list1:\n        if type(sublist) is list:\n            list_of_lists.append(sort_sublists(sublist))\n        else:\n            list_of_lists.append(sublist)\n    for i in range(len(list_of_lists) - 1):\n        if list_of_lists[i] > list_of_lists[i + 1]:\n            list_of_lists[i], list_of_lists[i + 1] = list_of_lists[i + 1], list_of_lists[i]\n    return list_of_lists\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    list1.sort()\n    for i in list1:\n        i.sort()\n    return list1\n"
    },
    {
        "number": 569,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_sublists(list1):\n    '''\n    Write a function to sort each sublist of strings in a given list of lists.\n    '''\n    \n    res = []\n    for x in list1:\n        # print('x: ', x)\n        res += sorted(x)\n        # print('res: ', res)\n    return res\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    \n    result = []\n    for num in nums:\n        if num not in result:\n            result.append(num)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    result = []\n    seen = set()\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            result.append(num)\n    return result\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # Write your code here\n    nums_dict = {}\n    for num in nums:\n        nums_dict[num] = nums_dict.get(num,0) + 1\n    nums_list = list(nums_dict.keys())\n    #print(nums_dict)\n    unique_list = []\n    for num in nums_list:\n        if nums_dict[num] == 1:\n            unique_list.append(num)\n    return unique_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    # if there is no duplicate number in the list\n    if len(nums) < 2:\n        return nums\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    num_list = []\n    for x in nums:\n        if x not in num_list:\n            num_list.append(x)\n    return num_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    pass\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    import collections\n    \n    c = collections.Counter(nums)\n    \n    a = []\n    for item in c:\n        if c[item] == 1:\n            a.append(item)\n    \n    return a\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    unique_list = []\n    for i in range(len(nums)):\n        if nums[i] not in unique_list:\n            unique_list.append(nums[i])\n    return unique_list\n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    seen = set()\n    final = []\n    for num in nums:\n        if num not in seen:\n            seen.add(num)\n            final.append(num)\n    return final\n    \n"
    },
    {
        "number": 572,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def two_unique_nums(nums):\n    '''\n    Write a python function to remove duplicate numbers from a given number of lists.\n    '''\n    return len(set(nums)) == len(nums)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    return len(set(list_data))\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    unique_list = []\n    result = 1\n    for i in list_data:\n        if i not in unique_list:\n            unique_list.append(i)\n    for i in unique_list:\n        result *= i\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    l_output = []\n    for i in list_data:\n        if i not in l_output:\n            l_output.append(i)\n    product = 1\n    for i in l_output:\n        product = product * i\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product = 1\n    for i in range(0,len(list_data)):\n        if(list_data[i] not in list_data[i+1:]):\n            product = product*list_data[i]\n    return product\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    # your code here\n    unique_numbers = []\n    for num in list_data:\n        if num not in unique_numbers:\n            unique_numbers.append(num)\n    return 1\n    \ndef rotate_digits(list_data, n):\n    '''\n    Write a python function to rotate digits in a list to the right n places.\n    '''\n    # your code here\n    new_list = []\n    for num in list_data:\n        new_list.append(num)\n        for i in range(n):\n            new_list.append(num)\n    return new_list\n    \ndef reverse_list(list_data):\n    '''\n    Write a python function to reverse a given list.\n    '''\n    # your code here\n    for i in range(len(list_data)//2):\n        list_data[i], list_data[len(list_data)-1-i] = list_data[len(list_data)-1-i], list_data[i]\n    return list_data\n    \ndef find_max(list_data):\n    '''\n    Write a python function to find and return the maximum element in a given list.\n    '''\n    # your code here\n    max = list_data[0]\n    for i in list_data:\n        if i > max:\n            max = i\n    return max\n    \ndef find_min(list_data):\n    '''\n    Write a python function to find and return the minimum element in a given list.\n    '''\n    # your code here\n    min = list_data[0]\n    for i in list_data:\n        if i < min:\n            min = i\n    return min\n    \ndef sum_of_even_numbers(list_data):\n    '''\n    Write a python function to find and return the sum of even numbers in a given list.\n    '''\n    # your code here\n    sum = 0\n    for i in list_data:\n        if i%2 == 0:\n            sum = sum + i\n    return sum\n    \ndef sum_of_odd_numbers(list_data):\n    '''\n    Write a python function to find and return the sum of odd numbers in a given list.\n    '''\n    # your code here\n    sum = 0\n    for i in list_data:\n        if i%2 == 1:\n            sum = sum + i\n    return sum\n    \ndef sum_of_numbers(list_data):\n    '''\n    Write a python function to find and return the sum of all numbers in a given list.\n    '''\n    # your code here\n    sum = 0\n    for i in list_data:\n        sum = sum + i\n    return sum\n    \ndef count_lower_case(list_data):\n    '''\n    Write a python function to find and return the number of lower case letters in a given list.\n    '''\n    # your code here\n    count = 0\n    for i in list_data:\n        if i.islower():\n            count = count + 1\n    return count\n    \ndef count_upper_case(list_data):\n    '''\n    Write a python function to find and return the number of upper case letters in a given list.\n    '''\n    # your code here\n    count = 0\n    for i in list_data:\n        if i.isupper():\n            count = count + 1\n    return count\n    \ndef count_numbers(list_data):\n    '''\n    Write a python function to find and return the number of numbers in a given list.\n    '''\n    # your code here\n    count = 0\n    for i in list_data:\n        if i.isnumeric():\n            count = count + 1\n    return count\n    \ndef count_special_characters(list_data):\n    '''\n    Write a python function to find and return the number of special characters in a given list.\n    '''\n    # your code here\n    count = 0\n    for i in list_data:\n        if i.isspace() or i.isalpha() or i.isalnum():\n            count = count + 1\n    return count\n    \ndef count_words(list_data):\n    '''\n    Write a python function to find and return the number of words in a given list.\n    '''\n    # your code here\n    count = 0\n    for i in list_data:\n        if i.isspace() == False and i.isalpha() == False and i.isalnum() == False:\n            count = count + 1\n    return count\n    \ndef count_unique_words(list_data):\n    '''\n    Write a python function to find and return the number of unique words in a given list.\n    '''\n    # your code here\n    count = 0\n    unique = []\n    for i in list_data:\n        if i.isspace() == False and i.isalpha() == False and i.isalnum() == False:\n            if i not in unique:\n                unique.append(i)\n                count = count + 1\n    return count\n    \ndef count_vowels(list_data):\n    '''\n    Write a python function to find and return the number of vowels in a given list.\n    '''\n    # your code here\n    vowels = ['a','e','i','o','u','A','E','I','O','U']\n    count = 0\n    for i in list_data:\n        if i in vowels:\n            count = count + 1\n    return count\n    \ndef count_consonants(list_data):\n    '''\n    Write a python function to find and return the number of consonants in a given list.\n    '''\n    # your code here\n    consonants = ['b','c','d','f','g','h','j','k','l','m','n','p','q','r','s','t','v','w','x','y','z']\n    count = 0\n    for i in list_data:\n        if i in consonants:\n            count = count + 1\n    return count\n    \ndef count_special_characters_in_sentence(list_data):\n    '''\n    Write a python function to find and return the number of special characters in a given sentence.\n    '''\n    # your code here\n    count = 0\n    special_characters = ['<','>','@','#','%','$','\\',','\\\\','|','*','.','\\n']\n    for i in list_data:\n        for j in special_characters:\n            if j in i:\n                count = count + 1\n    return count\n    \ndef count_special_characters_in_word(list_data):\n    '''\n    Write a python function to find and return the number of special characters in a given word.\n    '''\n    # your code here\n    count = 0\n    special_characters = ['<','>','@','#','%','$','\\',','\\\\','|','*','.','\\n']\n    for i in list_data:\n        for j in i:\n            for k in special_characters:\n                if j == k:\n                    count = count + 1\n    return count\n    \ndef count_special_characters_in_sentence_by_words(list_data):\n    '''\n    Write a python function to find and return the number of special characters in a given sentence by words.\n    '''\n    # your code here\n    count = 0\n    special_characters = ['<','>','@','#','%','$','\\',','\\\\','|','*','.','\\n']\n    for i in list_data:\n        for j in i.split(' '):\n            for k in special_characters:\n                if k in j:\n                    count = count + 1\n    return count\n    \ndef count_words_starting_with_n(list_data):\n    '''\n    Write a python function to find and return the number of words starting with 'n' in a given list.\n    '''\n    # your code here\n    count = 0\n    for i in list_data:\n        if i.startswith('n'):\n            count = count + 1\n    return count\n    \ndef count_words_starting_with_e(list_data):\n    '''\n    Write a python function to find and return the number of words starting with 'e' in a given list.\n    '''\n    # your code here\n    count "
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    product_of_unique_numbers = 1\n    for i in range(len(list_data)):\n        if list_data[i] not in list_data[i+1:]:\n            product_of_unique_numbers *= list_data[i]\n    return product_of_unique_numbers\nprint(unique_product([0, 1, 2, 2, 3, 4, 5, 6])) # 60\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    \n    list_data = sorted(list_data)\n    product = 1\n    for element in list_data:\n        if product == 1:\n            product = product * element\n        else:\n            product = product * element\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    set_data = set(list_data)\n    for i in set_data:\n        result = result * i\n    print(result)\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    result = 1\n    # write your logic here\n    unique_num = set(list_data)\n    for num in unique_num:\n        result = result*(num)\n    return result\n"
    },
    {
        "number": 573,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_product(list_data):\n    '''\n    Write a python function to calculate the product of the unique numbers in a given list.\n    '''\n    total = 1\n    for i in list_data:\n        total = total * i\n    return total\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14159\n    return 2 * pi * (r * r) + 2 * pi * (r * h)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2 * pi * (r * h)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    pi = 3.14\n    surface_area = 2*pi*r*h\n    return surface_area\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea_cylinder = pi * r**2 + 2 * pi * r * h\n    return surfacearea_cylinder\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    a = 2*math.pi*r*r + 2*math.pi*h*h\n    s = 2*math.pi*r*h\n    return a,s\nr = 10\nh = 5\na,s = surfacearea_cylinder(r,h)\nprint('The surface area of the cylinder is ',a)\nprint('The surface area of the cylinder is ',s)\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    sa = 2 * math.pi * r * h + 2 * math.pi * r**2\n    return sa\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    surfacearea = 2*pi*r*h + pi*r**2\n    return surfacearea\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    from math import pi\n    return 2*pi*r*h\n    \ndef sum_positive_numbers(n):\n    '''\n    Write a function to sum all the numbers from 1 to n,\n    where n is a parameter.\n    '''\n    sum = 0\n    for i in range(1,n+1):\n        sum += i\n    return sum\n    \ndef is_prime_number(n):\n    '''\n    Write a function to check if a number is prime or not.\n    '''\n    if n==1:\n        return False\n    elif n==2:\n        return True\n    else:\n        for i in range(2,n):\n            if n % i == 0:\n                return False\n        return True\n    \ndef insert_item_after(L, item):\n    '''\n    Write a function to insert a new item after a specified item in a list.\n    '''\n    L.insert(L.index(item), item)\n    return L\n    \ndef is_subset(L1, L2):\n    '''\n    Write a function to check whether L1 is a subset of L2.\n    '''\n    L1_sub = set(L1)\n    for i in L1:\n        if i not in L1_sub:\n            return False\n    return True\n    \ndef is_subset_from(L1, L2):\n    '''\n    Write a function to check whether L1 is a subset of L2.\n    '''\n    L1_sub = set(L1)\n    for i in L2:\n        if i not in L1_sub:\n            return False\n    return True\n    \ndef set_intersection(L1, L2):\n    '''\n    Write a function to find the intersection of two lists\n    '''\n    L1_sub = set(L1)\n    L2_sub = set(L2)\n    intersection = list(L1_sub.intersection(L2_sub))\n    return intersection\n    \ndef remove_duplicates(L):\n    '''\n    Write a function to remove duplicates from list L.\n    '''\n    L = list(set(L))\n    return L\n    \ndef remove_nth_index(L, n):\n    '''\n    Write a function to remove the nth index of the list.\n    '''\n    L.pop(n)\n    return L\n    \ndef sort_list(L):\n    '''\n    Write a function to sort the elements of the list.\n    '''\n    L.sort()\n    return L\n    \ndef is_palindrome(string):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    return string == string[::-1]\n    \ndef is_palindrome_from(string):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    return string == string[::-1]\n    \ndef is_palindrome_iterative(string):\n    '''\n    Write a function to check if a string is a palindrome or not.\n    '''\n    string = string.replace(\" \",\"\")\n    string = string.lower()\n    L = list(string)\n    i = 0\n    j = len(L)-1\n    while i < j:\n        if L[i] == L[j]:\n            i += 1\n            j -= 1\n        else:\n            return False\n    return True\n    \ndef first_word(sentence):\n    '''\n    Write a function to extract the first word of a sentence.\n    '''\n    return sentence.split(\" \")[0]\n    \ndef first_word_from(sentence):\n    '''\n    Write a function to extract the first word of a sentence.\n    '''\n    return sentence.split(\" \")[0]\n    \ndef sum_list_numbers(L):\n    '''\n    Write a function to find the sum of all the numbers of a list.\n    '''\n    sum = 0\n    for i in range(len(L)):\n        sum += L[i]\n    return sum\n    \ndef sum_list_numbers_from(L):\n    '''\n    Write a function to find the sum of all the numbers of a list.\n    '''\n    sum = 0\n    for i in range(len(L)):\n        sum += L[i]\n    return sum\n    \ndef sum_list_numbers_from_map(L):\n    '''\n    Write a function to find the sum of all the numbers of a list.\n    '''\n    return sum(L)\n    \ndef sum_list_numbers_while(L):\n    '''\n    Write a function to find the sum of all the numbers of a list.\n    '''\n    sum = 0\n    while L:\n        sum += L.pop()\n    return sum\n    \ndef sum_list_numbers_while_from(L):\n    '''\n    Write a function to find the sum of all the numbers of a list.\n    '''\n    sum = 0\n    while L:\n        sum += L.pop(0)\n    return sum\n    \ndef sum_list_numbers_while_from_map(L):\n    '''\n    Write a function to find the sum of all the numbers of a list.\n    '''\n    sum = 0\n    while L:\n        sum += L.pop(0)\n    return sum\n    \ndef sum_list_strings(L):\n    '''\n    Write a function to find the sum of all the strings of a list.\n    '''\n    sum = 0\n    for i in range(len(L)):\n        sum += len(L[i])\n    return sum\n    \ndef sum_list_strings_from(L):\n    '''\n    Write a function to find the sum of all the strings of a list.\n    '''\n    sum = 0\n    for i in range(len(L)):\n        sum += len(L[i])\n    return sum\n    \ndef sum_list_strings_from_map(L):\n    '''\n    Write a function to find the sum of all the strings of a list.\n    '''\n    return sum(map(len,L))\n    \ndef sum_list_strings_while(L):\n    '''\n    Write a function to find the sum of all the strings of a list.\n    '''\n    sum = 0\n    while L:\n        sum += len(L.pop(0))\n    return sum\n    \ndef sum_list_strings_while_from(L):\n    '''\n    Write a function to find the sum of all the strings of a list.\n    '''\n    sum = 0\n    while L:\n        sum += len(L.pop(0))\n    return sum\n    \ndef sum_list_strings_while_from_map(L):\n    '''\n    Write a function to find the sum of all the strings of a list.\n    '''\n    return sum(map(len,L))\n    \ndef sum_list_strings_while_from_map(L):\n    '''\n    Write a function to find the sum of all the strings of a list.\n    '''\n    return sum(map(len,L))\n    \ndef reverse_list(L):\n    '''\n    Write a function to reverse the elements of a list.\n    '''\n    L.reverse()\n    return L\n    \ndef reverse_list_from(L):\n    '''\n    Write a function to reverse the elements of a list.\n    '''\n    L.reverse()\n    return L\n    \ndef reverse_list_from_map(L):\n    '''\n    Write a function to reverse the elements of a list.\n    '''\n    return reversed(L)\n    \ndef sum_two_lists(L1, L2):\n    '''\n    Write a function to sum two lists.\n    '''\n    L1.extend(L2)\n    return L1\n    \ndef sum_two_lists_from(L1, L2):\n    '''\n    Write a function to sum two lists.\n    '''\n    L1.extend(L2)\n    return L1\n    \ndef sum_two_list"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    return 2*pi*r*h+2*pi*r**2\n"
    },
    {
        "number": 574,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surfacearea_cylinder(r,h):\n    '''\n    Write a function to find the surface area of a cylinder.\n    '''\n    import math\n    sa = math.pi*r*r*(h/2)\n    return sa\n    \n    \nprint(surfacearea_cylinder(10,20)) #410.271875\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(0,len(B)):\n        for j in range(0,len(B)):\n            if A[i] == B[j]:\n                return True\n    return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    return sorted(A)==sorted(B) or sorted(B)==sorted(A)\n    \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n=len(B)\n    for i in range(0,n):\n        flag=0\n        for j in range(0,n):\n            if A[i]==B[j] and i!=j:\n                flag=1\n                break\n        if flag==0:\n            return True\n    return False\n    \n        \ndef is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    n=len(B)\n    for i in range(0,n):\n        flag=0\n        for j in range(0,n):\n            if A[i]==B[j] and i!=j:\n                flag=1\n                break\n        if flag==0:\n            return True\n    return False\n    \n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    print(\"Function: \",is_Sub_Array.__doc__)\n    for i in range(len(A)):\n        if A[i] not in B:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    index=0\n    index_B=0\n    for i in A:\n        if i == B[index]:\n            index+=1\n    \n    if index == len(A):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    for i in range(len(B)-1):\n        if sum(A[i:i+2])==B[i]:\n            return True\n    return False"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    if len(A)<len(B):\n        smaller=A\n        bigger=B\n    else:\n        smaller=B\n        bigger=A\n    for i in range(len(smaller)):\n        if smaller[i] in bigger:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A_list=sorted(A)\n    B_list=sorted(B)\n    for i in range(len(A_list)):\n        if A_list[i]!=B_list[i]:\n            return False\n    return True\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    A = sorted(A)\n    B = sorted(B)\n    if len(A) > len(B): \n        return False\n    elif len(A) == len(B): \n        if A == B:\n            return True\n        else:\n            return False\n    else:\n        return False\n"
    },
    {
        "number": 576,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Sub_Array(A,B): \n    '''\n    Write a python function to check whether a list is sublist of another or not.\n    '''\n    B.sort()\n    for i in A:\n        if i in B:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    return (n % 9)\ndef last_Digit_Factorial_1(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n == 1):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_1(n - 1))\ndef last_Digit_Factorial_2(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * (last_Digit_Factorial_2(n - 1) - 1))\ndef last_Digit_Factorial_3(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_3(n - 1) - 1)\ndef last_Digit_Factorial_4(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_4(n - 1))\ndef last_Digit_Factorial_5(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_5(n - 1) - 1)\ndef last_Digit_Factorial_6(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_6(n - 1) - 1)\ndef last_Digit_Factorial_7(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_7(n - 1) - 1)\ndef last_Digit_Factorial_8(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_8(n - 1) - 1)\ndef last_Digit_Factorial_9(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_9(n - 1) - 1)\ndef last_Digit_Factorial_10(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_10(n - 1) - 1)\ndef last_Digit_Factorial_11(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_11(n - 1) - 1)\ndef last_Digit_Factorial_12(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_12(n - 1) - 1)\ndef last_Digit_Factorial_13(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_13(n - 1) - 1)\ndef last_Digit_Factorial_14(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_14(n - 1) - 1)\ndef last_Digit_Factorial_15(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_15(n - 1) - 1)\ndef last_Digit_Factorial_16(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_16(n - 1) - 1)\ndef last_Digit_Factorial_17(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_17(n - 1) - 1)\ndef last_Digit_Factorial_18(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_18(n - 1) - 1)\ndef last_Digit_Factorial_19(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_19(n - 1) - 1)\ndef last_Digit_Factorial_20(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_20(n - 1) - 1)\ndef last_Digit_Factorial_21(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_21(n - 1) - 1)\ndef last_Digit_Factorial_22(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_22(n - 1) - 1)\ndef last_Digit_Factorial_23(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_23(n - 1) - 1)\ndef last_Digit_Factorial_24(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n <= 9):\n        return n\n    else:\n        return (9 * last_Digit_Factorial_24(n - 1) - 1)\ndef last_Digit_Factorial_25(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if (n < 10):\n        return n\n    else:\n        return "
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    return n % 10 * last_Digit_Factorial(int(n / 10))\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    #uncomment the below line to take input from the user\n    #n = int(input(\"enter a number:\")) \n    if n < 0: \n        print(\"factorial of negative numbers is not defined\")\n    else: \n        factorial = 1\n        while (n > 0): \n            factorial = factorial * n\n            n = n - 1\n        print(\"factorial of\", n,\"is\", factorial) \n        return factorial\n    # if __name__ == '__main__': \n    #     last_Digit_Factorial(2) \n    #     last_Digit_Factorial(4) \n    #     last_Digit_Factorial(6) \n    #     last_Digit_Factorial(100) \n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    sum = 0\n    n_minus = n\n    while n_minus>0:\n        sum = sum + (n_minus % 10) * (n_minus % 10) * (n_minus % 10)\n        n_minus = n_minus//10\n    return sum%10\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    x = 1\n    fact = 1\n    while x <= n:\n        fact = fact * x\n        x = x + 1\n    return fact\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n<0:\n        print(\"factorial does not exist for negative numbers\")\n    elif n == 0:\n        return 1\n    else:\n        return n%10 * last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if(n==1):\n        return n\n    else:\n        return n%10*last_Digit_Factorial(n//10)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n == 0:\n        return 1\n    else:\n        return n * last_Digit_Factorial(n - 1)\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    # your code here\n    # rev_n=n\n    rev_n=n\n    while(n>0):\n        rev_n=rev_n*n\n        n=n-1\n    \n    if (rev_n<0):\n        rev_n=rev_n+2\n    else:\n        rev_n=rev_n-2\n    \n    return rev_n\n"
    },
    {
        "number": 577,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last_Digit_Factorial(n): \n    '''\n    Write a python function to find the last digit in factorial of a given number.\n    '''\n    if n < 0:\n        n = n * -1\n    \n    res = 1\n    while n!= 0:\n        res *= n % 10\n        n = n // 10\n    \n    return int(res)\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    #create an empty list\n    list_inter = []\n    #iterate through each list\n    for i in range(len(list1)):\n        #add each item from list1 into list_inter\n        list_inter.append(list1[i])\n        #add each item from list2 into list_inter\n        list_inter.append(list2[i])\n        #add each item from list3 into list_inter\n        list_inter.append(list3[i])\n    #return the flattened list\n    return list_inter\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list_to_return = []\n    for _ in range(len(list1)):\n        list_to_return.append(list1[_])\n        list_to_return.append(list2[_])\n        list_to_return.append(list3[_])\n    return list_to_return\n    \n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    output = []\n    for i in range(len(list1)):\n        output.extend([list1[i]])\n        output.extend([list2[i]])\n        output.extend([list3[i]])\n    return output\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    for i in range(len(list1)):\n        result.append(list1[i])\n        result.append(list2[i])\n        result.append(list3[i])\n    return result\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    assert len(list1) == len(list2) and len(list1) == len(list3)\n    assert len(list1) > 0\n    for i in range(len(list1)):\n        assert list1[i] == list2[i] and list1[i] == list3[i]\n    interleave_list = list(zip(list1,list2,list3))\n    return interleave_list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return list1 + list2 + list3\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    list = []\n    for i in range(len(list1)):\n        list.extend([list1[i],list2[i],list3[i]])\n    return list\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    return [list1[i]+list2[i]+list3[i] for i in range(len(list1))]\n"
    },
    {
        "number": 578,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def interleave_lists(list1,list2,list3):\n    '''\n    Write a function to interleave 3 lists of the same length into a single flat list.\n    '''\n    result = []\n    index = 0\n    while index < len(list1) and index < len(list2) and index < len(list3):\n        result.append(list1[index])\n        result.append(list2[index])\n        result.append(list3[index])\n        index += 1\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return set(test_tup1) - set(test_tup2)\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_el = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar_el.append(test_tup1[i])\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    #test_tup1 = (1,2,4,3,5,6,7,8)\n    #test_tup2 = (1,2,3,4,6,7,8,9,5)\n    #print(test_tup1)\n    #print(test_tup2)\n    #print()\n    #sorted(test_tup1)\n    #print()\n    #print(test_tup1)\n    #print(test_tup2)\n    #print()\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    # Complete the function by filling in the missing parts\n    # return tuple(set(test_tup1) - set(test_tup2))\n    \n    temp = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            temp.append(test_tup1[i])\n    return tuple(temp)\n    \n    \n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            dissimilar.append(i)\n    return dissimilar\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1) ^ set(test_tup2))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    return list(set(test_tup1).symmetric_difference(set(test_tup2)))\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    dissimilar_elements = set()\n    for element in test_tup1:\n        if element not in test_tup2:\n            dissimilar_elements.add(element)\n    return dissimilar_elements\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    result = []\n    for i in range(len(test_tup1)):\n        if test_tup1[i]!= test_tup2[i]:\n            result.append(test_tup1[i])\n    return result\n"
    },
    {
        "number": 579,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_dissimilar(test_tup1, test_tup2):\n    '''\n    Write a function to find the dissimilar elements in the given two tuples.\n    '''\n    if len(test_tup1)!= len(test_tup2):\n        return False\n    else:\n        for i in range(len(test_tup1)):\n            if test_tup1[i] == test_tup2[i]:\n                continue\n            else:\n                return False\n        return True\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    if isinstance(test_tuple, tuple):\n        print(even_fnc(test_tuple))\n    else:\n        print('It is not a tuple')\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    test_tuple = test_tuple\n    even_fnc = even_fnc\n    for i in range(len(test_tuple)):\n        if type(test_tuple[i]) is not tuple:\n            pass\n        elif type(test_tuple[i][0]) is not tuple:\n            test_tuple[i] = even_fnc(test_tuple[i])\n        elif type(test_tuple[i][0][0]) is not tuple:\n            test_tuple[i] = even_fnc(test_tuple[i])\n        elif type(test_tuple[i][0][0][0]) is not tuple:\n            test_tuple[i] = even_fnc(test_tuple[i])\n        else:\n            test_tuple[i] = even_fnc(test_tuple[i])\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    for i in test_tuple:\n        if isinstance(i,tuple) or isinstance(i,list):\n            even_ele(i,even_fnc)\n        else:\n            if i%2==0 and even_fnc == True:\n                test_tuple.remove(i)\n            elif i%2!=0 and even_fnc == False:\n                test_tuple.remove(i)\n    return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    temp = ()\n    for i in test_tuple:\n        if isinstance(i, tuple):\n            temp = even_ele(i, even_fnc)\n        elif even_fnc(i):\n            temp += i,\n    return temp\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    \n    even_tuple = ()\n    for i in range(len(test_tuple)):\n        if even_fnc(test_tuple[i]):\n            even_tuple += (test_tuple[i], )\n    return even_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = ()\n    if isinstance(test_tuple,tuple):\n        for i in test_tuple:\n            if isinstance(i,tuple):\n                new_tuple += even_ele(i, even_fnc)\n            else:\n                if even_fnc(i):\n                    new_tuple += (i,)\n        return new_tuple\n    else:\n        return test_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(even_fnc, test_tuple))\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    new_tuple = tuple()\n    for element in test_tuple:\n        if even_fnc(element) == True:\n            new_tuple += (element,)\n    return new_tuple\n"
    },
    {
        "number": 580,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_ele(test_tuple, even_fnc): \n    '''\n    Write a function to remove uneven elements in the nested mixed tuple.\n    '''\n    return tuple(filter(lambda x: even_fnc(x),test_tuple))\n    \nprint(even_ele((1,2,3,4,5,6,7,8,9,10,11,12), lambda x: x%2==0))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # The surface of a pyramid is the area of the pyramid\n    # Calculate the surface area\n    s_area = s * s * 0.5\n    #print(f'Surface Area of a pyramid: {s_area}')\n    return s_area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    \n    area = (1/3)*b*s\n    print(round(area,2))\n    \n    \n    \n    \ndef function1():\n    '''\n    Write a python function to find the sum of the first n natural numbers.\n    '''\n    \n    def sumNatural(n):\n        if n == 1:\n            return n\n        else:\n            return n + sumNatural(n-1)\n        \n    \n    print(sumNatural(5))\n    \n    \n    \n    \ndef function2():\n    '''\n    Write a python function to find the factorial of a number.\n    '''\n    \n    def factorial(n):\n        if n == 0:\n            return 1\n        else:\n            return n * factorial(n-1)\n        \n    \n    print(factorial(5))\n    \n    \n    \n    \ndef function3():\n    '''\n    Write a python function to find the nth term in the fibonacci sequence.\n    '''\n    \n    def fibonacci(n):\n        if n == 0:\n            return 0\n        if n == 1:\n            return 1\n        else:\n            return fibonacci(n-1) + fibonacci(n-2)\n        \n    \n    print(fibonacci(5))\n    \n    \n    \n    \ndef function4():\n    '''\n    Write a python function to find the sum of all elements in a list.\n    '''\n    \n    def sum_list(l):\n        if len(l) == 0:\n            return 0\n        else:\n            return l[0] + sum_list(l[1:])\n        \n    \n    print(sum_list([1,2,3,4,5]))\n    \n    \n    \n    \ndef function5():\n    '''\n    Write a python function to find the number of even numbers in a given list.\n    '''\n    \n    def count_even(l):\n        if len(l) == 0:\n            return 0\n        else:\n            if l[0] % 2 == 0:\n                return 1 + count_even(l[1:])\n            else:\n                return count_even(l[1:])\n        \n    \n    print(count_even([1,2,3,4,5,6]))\n    \n    \n    \n    \ndef function6():\n    '''\n    Write a python function to find the smallest element in a list.\n    '''\n    \n    def min_element(l):\n        if len(l) == 0:\n            return -1\n        elif l[0] < l[1]:\n            return min_element(l[1:])\n        else:\n            return l[0]\n        \n    \n    print(min_element([1,2,3,4,5]))\n    \n    \n    \n    \ndef function7():\n    '''\n    Write a python function to find the maximum element in a given list.\n    '''\n    \n    def max_element(l):\n        if len(l) == 0:\n            return -1\n        elif l[0] > l[1]:\n            return max_element(l[1:])\n        else:\n            return l[0]\n        \n    \n    print(max_element([1,2,3,4,5]))\n    \n    \n    \n    \ndef function8():\n    '''\n    Write a python function to check whether a list contains a particular element or not.\n    '''\n    \n    def check_element(l, element):\n        if len(l) == 0:\n            return False\n        elif element == l[0]:\n            return True\n        else:\n            return check_element(l[1:], element)\n        \n    \n    print(check_element([1,2,3,4,5], 3))\n    \n    \n    \n    \ndef function9():\n    '''\n    Write a python function to check whether a list contains a particular element or not.\n    '''\n    \n    def check_element(l, element):\n        if len(l) == 0:\n            return False\n        elif element == l[0]:\n            return True\n        else:\n            return check_element(l[1:], element)\n        \n    \n    print(check_element([1,2,3,4,5], 3))\n    \n    \n    \n    \ndef function10():\n    '''\n    Write a python function to find the smallest element in a given list.\n    '''\n    \n    def min_element(l):\n        if len(l) == 0:\n            return -1\n        elif l[0] < l[1]:\n            return min_element(l[1:])\n        else:\n            return l[0]\n        \n    \n    print(min_element([1,2,3,4,5]))\n    \n    \n    \n    \ndef function11():\n    '''\n    Write a python function to find the smallest element in a given list.\n    '''\n    \n    def min_element(l):\n        if len(l) == 0:\n            return -1\n        elif l[0] < l[1]:\n            return min_element(l[1:])\n        else:\n            return l[0]\n        \n    \n    print(min_element([1,2,3,4,5]))\n    \n    \n    \n    \ndef function12():\n    '''\n    Write a python function to check whether a list contains a particular element or not.\n    '''\n    \n    def check_element(l, element):\n        if len(l) == 0:\n            return False\n        elif element == l[0]:\n            return True\n        else:\n            return check_element(l[1:], element)\n        \n    \n    print(check_element([1,2,3,4,5], 3))\n    \n    \n    \n    \ndef function13():\n    '''\n    Write a python function to find the smallest element in a given list.\n    '''\n    \n    def min_element(l):\n        if len(l) == 0:\n            return -1\n        elif l[0] < l[1]:\n            return min_element(l[1:])\n        else:\n            return l[0]\n        \n    \n    print(min_element([1,2,3,4,5]))\n    \n    \n    \n    \ndef function14():\n    '''\n    Write a python function to find the smallest element in a given list.\n    '''\n    \n    def min_element(l):\n        if len(l) == 0:\n            return -1\n        elif l[0] < l[1]:\n            return min_element(l[1:])\n        else:\n            return l[0]\n        \n    \n    print(min_element([1,2,3,4,5]))\n    \n    \n    \n    \ndef function15():\n    '''\n    Write a python function to find the smallest element in a given list.\n    '''\n    \n    def min_element(l):\n        if len(l) == 0:\n            return -1\n        elif l[0] < l[1]:\n            return min_element(l[1:])\n        else:\n            return l[0]\n        \n    \n    print(min_element([1,2,3,4,5]))\n    \n    \n    \n    \ndef function16():\n    '''\n    Write a python function to find the smallest element in a given list.\n    '''\n    \n    def min_element(l):\n        if len(l) == 0:\n            return -1\n        elif l[0] < l[1]:\n            return min_element(l[1:])\n        else:\n            return l[0]\n        \n    \n    print(min_element([1,2,3,4,5]))\n    \n    \n    \n    \ndef function17():\n    '''\n    Write a python function to find the smallest element in a given list.\n    '''\n    \n    def min_element(l):\n        if len(l) == 0:\n            return -1\n        elif l[0] < l[1]:\n            return min_element(l[1:])\n        else:\n            return l[0]\n        \n    \n    print(min_element([1,"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    S = (b*s*0.5)+(b*s)*0.5\n    return S\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    if b < 0 or s <= 0:\n        print(\"The input values are not valid.\")\n    else:\n        return(b*s*2)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    surface = 1/4*(s*s)*b\n    return surface\nprint(surface_Area(3,5))\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    h=b*2+s\n    s=0.5*(h*s)\n    print('The surface area of pyramid is',s)\n    \ndef find_greater_numbers(num1, num2, num3):\n    '''\n    Write a python function that finds greater numbers from 3 given numbers.\n    '''\n    greater_num=num1 if num1>num2 else num2 if num2>num3 else num3\n    print('The greater number between',num1,'and',num2,'and',num3,'is',greater_num)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    # compute surface area\n    area = (1/2)*(b*b)*s\n    return area\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    s = s * s \n    return b * s\n    \n    \n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return(0.5*b*s*s)\n    \ndef pyramid(base, height):\n    '''\n    Write a python function to find the volume of a pyramid with a given base edge and height.\n    '''\n    if height<0 or base<0:\n        print(\"Invalid input\")\n        return\n    return(base*height)\n"
    },
    {
        "number": 581,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def surface_Area(b,s): \n    '''\n    Write a python function to find the surface area of a square pyramid with a given base edge and height.\n    '''\n    return (b*s)*2\n    \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if not dict1:\n        print(\"Dictionary is empty\")\n    else:\n        print(\"Dictionary is not empty\")\nmy_dict({1:2})\nmy_dict({1:2,3:4})\nmy_dict({1:2,3:4,5:6})\nmy_dict(None)\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n    # for key in dict1:\n    #     return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if len(dict1) == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1=={}:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if(dict1.keys()==[]):\n        print('Empty Dictionary')\n    else:\n        print('Not Empty Dictionary')\n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    if dict1 == {}:\n        return True\n    else:\n        return False\n    \n"
    },
    {
        "number": 582,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def my_dict(dict1):\n    '''\n    Write a function to check if a dictionary is empty\n    '''\n    print(bool(dict1))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    ans = 0\n    for i in range(num):\n        ans = ans + (fact(2 * i + 1) / fact(2 * i))\n    return ans\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    table = [0]*(num+1)\n    table[0] = 1\n    for i in range(1,num+1):\n        for j in range(0,i):\n            table[i] = table[i] + table[j]*(2*i-j-1)/(j+1)\n    return table[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    total = 0\n    for i in range(num):\n        total += catalan_number_recursive(i)\n    return total\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    dp=[0]*(num+1)\n    dp[0]=1\n    dp[1]=1\n    for i in range(2,num+1):\n        for j in range(i,num+1):\n            dp[j]=0\n            for k in range(1,j):\n                dp[j]+=dp[j-k]*dp[k-1]\n    return dp[-1]\nprint(catalan_number(4))\nprint(catalan_number(5))\nprint(catalan_number(6))\nprint(catalan_number(7))\nprint(catalan_number(8))\nprint(catalan_number(9))\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    res = [1]\n    for i in range(1,num):\n        res.append(0)\n    for i in range(1,num+1):\n        if i%2 == 0:\n            res[i] = res[i-1]\n        else:\n            temp = 0\n            for j in range(i-1,i):\n                temp += res[j]\n            res[i] = 2*temp\n    return res[num]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def factorial(n):\n        result = 1\n        for i in range(1,n+1):\n            result = result * i\n        return result\n    catalan_list = [1,1]\n    for i in range(2,num):\n        catalan_list.append(0)\n        for j in range(i):\n            catalan_list[i] += factorial(i-1)*catalan_list[j]*catalan_list[i-j-1]\n    return catalan_list[num-1]\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    def catalan_nth_number(num):\n        if num == 0:\n            return 1\n        result = 0\n        for i in range(0, num):\n            result += catalan_nth_number(i) * catalan_nth_number(num - i - 1)\n        return result\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0:\n        return 1\n    result = 0\n    for i in range(1,num+1):\n        result += (catalan_number(num-i)*(2*i-1))\n    return result\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 0 or num == 1:\n        return 1\n    catalan_nums = [0]\n    for i in range(num):\n        catalan_nums.append(0)\n        for j in range(i):\n            catalan_nums[i] += catalan_nums[j] * catalan_nums[i-j-1]\n    return catalan_nums[num]\n    \ndef catalan_numbers(n):\n    '''\n    Write a function which returns list of catalan numbers\n    '''\n    catalan_nums = [1]\n    for i in range(n):\n        catalan_nums.append(0)\n        for j in range(i):\n            catalan_nums[i] += catalan_nums[j] * catalan_nums[i-j-1]\n    return catalan_nums\n"
    },
    {
        "number": 583,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def catalan_number(num):\n    '''\n    Write a function which returns nth catalan number.\n    '''\n    if num == 1 or num == 2:\n        return 1\n    res = 0\n    for i in range(3, num + 1):\n        res = sum_2_catalan_number(i - 1, i) + sum_1_catalan_number(i - 2)\n    return res\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    \n    start_index=0\n    end_index=0\n    \n    for i in range(len(text)):\n        if text[i] == 'ly':\n            if text[i+1] =='s':\n                start_index = i\n                for j in range(i+2,len(text)):\n                    if text[j] == 't':\n                        end_index = j\n                        return start_index,end_index\n                    if text[j] =='':\n                        break\n            else:\n                start_index = i\n                for j in range(i+1,len(text)):\n                    if text[j] == 't':\n                        end_index = j\n                        return start_index,end_index\n                    if text[j] =='':\n                        break\n    return None\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_regex = re.compile(r'ly(?!es)')\n    adverbs = []\n    for match in ly_regex.finditer(text):\n        start = match.span()[0]\n        end = match.span()[1]\n        adverbs.append((start, end, 'ly'))\n    return adverbs\n    \ndef find_conjunctions(text):\n    '''\n    Write a function to find all the conjunctions ending with a hyphen and their positions in a given string.\n    '''\n    conj = ['to', 'in', 'on']\n    conj_regex = re.compile(r'-'.join(conj))\n    conjs = []\n    for match in conj_regex.finditer(text):\n        start = match.span()[0]\n        end = match.span()[1]\n        conjs.append((start, end, '-'))\n    return conjs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = []\n    flag = 0\n    for i in range(len(text)-1):\n        if text[i].endswith('ly') and flag == 0:\n            adverbs.append(i)\n            flag = 1\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    #vowels = set('aeiou')\n    #pattern = re.compile('ly')\n    #return re.findall(pattern,text)\n    return [m.start() for m in re.finditer(r'(ly)$', text)]\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverbs = [\"ly\",\"am\",\"are\",\"was\",\"were\"]\n    for i in range(len(text)-1,-1,-1):\n        word = text[i]\n        if word.endswith(adverbs) and len(word)>=5 and \"ly\" in word:\n            return word, i\n    return \"\", -1\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    def contains(word):\n        return word[-2:] == 'ly'\n    adverbs = []\n    for i, word in enumerate(text.split()):\n        if contains(word):\n            adverbs.append(i)\n    return adverbs\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    def find_adverb(text):\n        text = text.lower()\n        regex = r'\\b[tuvxz]ly\\b'\n        result = re.findall(regex, text)\n        if len(result) > 0:\n            return result[0], len(result[0])\n        else:\n            return \"None\", 0\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    adverb_positions = re.finditer(r'\\w+ly', text)\n    adverb_positions = map(lambda x: x.span(), adverb_positions)\n    return adverb_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    ly_positions = []\n    for index, word in enumerate(text.split()):\n        if word[-2:] == 'ly':\n            ly_positions.append(index)\n    return ly_positions\n"
    },
    {
        "number": 584,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef find_adverbs(text):\n    '''\n    Write a function to find the first adverb ending with ly and its positions in a given string.\n    '''\n    regex = re.compile(r\"ly\")\n    match = regex.search(text)\n    if match:\n        print(match.group())\n        print(match.span())\n    else:\n        print(\"no match\")\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1])\n    i = 0\n    while i < n:\n        item = items.pop()\n        i += 1\n        yield item\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if n > len(items):\n        return []\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #n = 2\n    # Output: {'spoon': 1, 'pen': 1}\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    \n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1],reverse=True)\n    #print(items)\n    heapq.heapify(items)\n    #print(items)\n    \n    result = {}\n    while len(result) < n:\n        result[heapq.heappop(items)[0]] = heapq.heappop(items)[1]\n    return result\n    #Output: {'spoon': 1, 'pen': 1}\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1], reverse=True)[:n]}\n    \ndef expensive_items_w_priority(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1],reverse=True)\n    heapq.heapify(items)\n    #print(items)\n    \n    result = {}\n    while len(result) < n:\n        result[heapq.heappop(items)[0]] = heapq.heappop(items)[1]\n    return result\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1], reverse=True)[:n]}\n    \ndef cheapest_items(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1])\n    heapq.heapify(items)\n    #print(items)\n    \n    result = {}\n    while len(result) < n:\n        result[heapq.heappop(items)[0]] = heapq.heappop(items)[1]\n    return result\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1])[:n]}\n    \ndef cheapest_items_w_priority(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1])\n    heapq.heapify(items)\n    #print(items)\n    \n    result = {}\n    while len(result) < n:\n        result[heapq.heappop(items)[0]] = heapq.heappop(items)[1]\n    return result\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1])[:n]}\n    \ndef expensive_items_with_key(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #n = 2\n    # Output: {'spoon': 1, 'pen': 1}\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1],reverse=True)\n    #print(items)\n    \n    result = {}\n    for i in range(n):\n        result[i] = heapq.heappop(items)[0]\n    return result\n    # Output: {0:'spoon', 1: 'pen', 2: 'laptop'}\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1], reverse=True)[:n]}\n    \ndef expensive_items_with_key_w_priority(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    #items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #n = 2\n    # Output: {'spoon': 1, 'pen': 1}\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1],reverse=True)\n    #print(items)\n    \n    result = {}\n    for i in range(n):\n        result[i] = heapq.heappop(items)[0]\n    return result\n    # Output: {0:'spoon', 1: 'pen', 2: 'laptop'}\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1], reverse=True)[:n]}\n    \ndef cheapest_items_with_key(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    #items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #n = 2\n    # Output: {'spoon': 1, 'pen': 1}\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1])\n    #print(items)\n    \n    result = {}\n    for i in range(n):\n        result[i] = heapq.heappop(items)[0]\n    return result\n    # Output: {0:'spoon', 1: 'pen', 2: 'laptop'}\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda x: x[1])[:n]}\n    \ndef cheapest_items_with_key_w_priority(items,n):\n    '''\n    Write a function to find the n cheapest items in a given dataset.\n    '''\n    #items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #n = 2\n    # Output: {'spoon': 1, 'pen': 1}\n    items = {'phone': 2, 'laptop': 2,'spoon': 1, 'book': 3, 'pen': 1, 'laptop': 1}\n    #sorting items in a dictionary by value\n    items = sorted(items.items(),key=lambda x:x[1],reverse=True)\n    #print(items)\n    \n    result = {}\n    for i in range(n):\n        result[i] = heapq.heappop(items)[0]\n    return result\n    # Output: {0:'spoon', 1: 'pen', 2: 'laptop'}\n    \n    # return {k: v for k, v in sorted(items.items(), key=lambda "
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    result = []\n    result.append(items[0])\n    count = 1\n    for i in range(1,n):\n        if(result[0] > items[i]):\n            result.append(items[i])\n            count = 1\n        elif(result[0] == items[i]):\n            count += 1\n    if(count < n):\n        result.append(items[n])\n    return result\nprint(expensive_items([1,4,2,8,4,10,40,6,8],3))\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    if items == None or len(items) == 0:\n        return None\n    heap = []\n    for item in items:\n        heapq.heappush(heap, (item[1], item[0]))\n        if len(heap)>n:\n            heapq.heappop(heap)\n    return [x[0] for x in heap]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    \n    pq = []\n    \n    # add to pq by item number\n    # heapq.heappush(pq,(2,'A'))\n    for i in items:\n        heapq.heappush(pq,(i[1],i[0]))\n    \n    for _ in range(n):\n        heapq.heappop(pq)\n    \n    while pq:\n        heapq.heappop(pq)\n    \n    return map(lambda x: x[1], pq)\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = sorted(items,key=lambda x: x[1])\n    i = 0\n    heapq.heapify(items)\n    while i<n:\n        n_expensive = heapq.heappop(items)\n        i += 1\n    return n_expensive\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items.sort(key=lambda x: x[1],reverse=True)\n    print(items[:n])\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    items = {k:v for k,v in items.items()}\n    items_n = items.copy()\n    for key in items.keys():\n        items_n[key] = -items[key]\n    heap = []\n    for key in items.keys():\n        heapq.heappush(heap,(items_n[key],key))\n    return heap[:n]\n"
    },
    {
        "number": 585,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq\ndef expensive_items(items,n):\n    '''\n    Write a function to find the n most expensive items in a given dataset.\n    '''\n    maxheap = []\n    for item in items:\n        heapq.heappush(maxheap,(-item[1], item[0]))\n        if len(maxheap) > n:\n            heapq.heappop(maxheap)\n    result = []\n    for item in maxheap:\n        result.append(item[1])\n    return result\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l)<n:\n        return []\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    s = l[:n]\n    return s + l[n:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if(n == 0):\n        return []\n    if(len(l) == 1):\n        return [[l[0]], [l[0]]]\n    if(n == len(l)):\n        return [[l[n - 1]], l[:n - 1]]\n    else:\n        return [[l[n - 1]], l[:n - 1]] + split_Arr(l[n:], n)\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    l2 = []\n    for i in range(len(l)):\n        if i == n:\n            l2.append(l[i])\n        else:\n            l2.append(l[i])\n    return l2\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) == 1:\n        return l\n    else:\n        return l[:n]+l[n+1:]\nprint(\"enter list:\")\nl=list(map(int,input().split()))\nprint(\"enter n:\")\nn=int(input())\nprint(\"sliced list:\",split_Arr(l,n))\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n:].append(l[:n])\n    \n    \ndef longestPalindrome(s):\n    '''\n    Write a program that takes a string as input and returns the length of the longest palindromic substring in the string.\n    '''\n    if len(s) == 1:\n        return 1\n    else:\n        def expand(l, r):\n            while l >= 0 and r < len(s) and s[l] == s[r]:\n                l -= 1\n                r += 1\n            return s[l+1:r]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) <= 1:\n        return l\n    if n > len(l):\n        return l\n    if n == len(l):\n        return l[0:]\n    return l[0:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    if len(l) == 0:\n        return []\n    if n > len(l):\n        return l\n    if n == len(l):\n        return l[1:]\n    return l[:n] + l[n+1:]\n"
    },
    {
        "number": 586,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def split_Arr(l, n):\n    '''\n    Write a python function to split a list at the nth eelment and add the first part to the end.\n    '''\n    x = l.copy()\n    x = x[n:] + x[:n]\n    return x\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    #return listx.pop(), listx.pop(), listx.pop()\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    l = listx\n    return tuple(l)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n    \ndef list_set(listx):\n    '''\n    Write a function to convert a list to a set.\n    '''\n    return set(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    new_list = []\n    for element in listx:\n        new_list.append(element)\n    new_list = tuple(new_list)\n    print(new_list)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    return tuple(listx)\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    x=tuple(listx)\n    return x\n"
    },
    {
        "number": 587,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def list_tuple(listx):\n    '''\n    Write a function to convert a list to a tuple.\n    '''\n    tuple1 = ()\n    for i in listx:\n        tuple1 += i,\n    return tuple1\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min_el = nums[0]\n    max_el = nums[0]\n    min_el_id = 0\n    max_el_id = 0\n    for i in range(1, len(nums)):\n        if nums[i] < min_el:\n            min_el = nums[i]\n            min_el_id = i\n        elif nums[i] > max_el:\n            max_el = nums[i]\n            max_el_id = i\n    return max_el - min_el\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    return max(nums) - min(nums)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    lst = nums\n    lst = sorted(lst)\n    big_val = lst[-1] - lst[0]\n    return big_val\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    if len(nums) == 1:\n        return 0\n    max = nums[0]\n    min = nums[0]\n    for num in nums[1:]:\n        if num > max:\n            max = num\n        if num < min:\n            min = num\n    return max - min\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    x = max(nums) - min(nums)\n    return x\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    print(\"\\nIn Big Difference: \", nums)\n    nums.sort()\n    print(\"Out of Big Difference: \", nums)\n    return nums[-1] - nums[0]\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    lst = sorted(nums)\n    return max(lst) - min(lst)\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    l=len(nums)\n    if l<2:\n        return 0\n    maxi=nums[0]\n    mini=nums[0]\n    for i in range(l):\n        if maxi<nums[i]:\n            maxi=nums[i]\n        if mini>nums[i]:\n            mini=nums[i]\n    return maxi-mini\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    m=min(nums)\n    M=max(nums)\n    return M-m\n"
    },
    {
        "number": 588,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def big_diff(nums):\n    '''\n    Write a python function to find the difference between largest and smallest value in a given list.\n    '''\n    min = nums[0]\n    max = nums[0]\n    for i in nums:\n        if i > max:\n            max = i\n        if i < min:\n            min = i\n    return max-min\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    i = a\n    j = b\n    list_perfect_squares = []\n    while i <= j:\n        if i*i == i:\n            list_perfect_squares.append(i)\n        i += 1\n    return list_perfect_squares\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a < b:\n        a, b = b, a\n    low, high = a, b\n    while low < high:\n        mid = (low + high) // 2\n        if mid * mid == low:\n            return mid\n        elif mid * mid < low:\n            high = mid\n        else:\n            low = mid + 1\n    return low - 1"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return [x**2 for x in range(a,b+1) if x**2 == x**2]\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a == 0 or b == 0:\n        return 0\n    \n    if a >= b:\n        return perfect_squares(a - b, b)\n    else:\n        return perfect_squares(a, a - b)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    if a >= b:\n        return []\n    if a < 0 or b < 0:\n        return None\n    i = a\n    j = b\n    count = 0\n    while i <= j:\n        if i * i == i:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    from math import sqrt\n    if a > b:\n        a, b = b, a\n    x = sqrt(a)\n    while x >= b:\n        if int(x)**2 == x:\n            return True\n        x -= 1\n    return False\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    sqr_list = []\n    if a < b:\n        for i in range(a+1, b):\n            if i**2 == i:\n                sqr_list.append(i)\n        print(sqr_list)\n    else:\n        for i in range(a-1, b):\n            if i**2 == i:\n                sqr_list.append(i)\n        print(sqr_list)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    for i in range(a,b+1):\n        if i == int(math.sqrt(i)):\n            print(i)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    assert a < b, 'Wrong arguments, please try again.'\n    for num in range(a, b+1):\n        if is_perfect_square(num):\n            print(num)\n"
    },
    {
        "number": 589,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def perfect_squares(a, b):\n    '''\n    Write a function to find perfect squares between two given numbers.\n    '''\n    return(list(range(a, b + 1)))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r=x*x+y*y\n    if r<1:\n        r=1\n    return abs(y*2/r), abs(x*2/r)\ndef check_polar_rect(r1,r2):\n    '''\n    Write a function to check if a rectangle is contained in a circle or not.\n    '''\n    if r2-r1<0.1 and r2-r1>=0:\n        return True\n    else:\n        return False\ndef rect_circle(r1,r2):\n    '''\n    Write a function to check if a rectangle is contained in a circle or not.\n    '''\n    if r2-r1<0.1:\n        return True\n    else:\n        return False\ndef check_rect_circle(r1,r2,r):\n    '''\n    Write a function to check if a rectangle is contained in a circle or not.\n    '''\n    if r2-r1<0.1 and r2-r1>=0 and (r-r1)**2+(r-r2)**2<=r**2:\n        return True\n    else:\n        return False\ndef rect_rect(r1,r2,r3):\n    '''\n    Write a function to check if a rectangle is contained in another rectangle or not.\n    '''\n    if r1+r2>r3 and r1+r2<=r3:\n        return True\n    else:\n        return False\ndef check_rect_rect(r1,r2,r3):\n    '''\n    Write a function to check if a rectangle is contained in another rectangle or not.\n    '''\n    if r1+r2>r3 and r1+r2<=r3 and (r1**2+r2**2)+(r3**2-r1**2-r2**2)>=0:\n        return True\n    else:\n        return False\ndef rect_rec(r1,r2,r3):\n    '''\n    Write a function to check if a rectangle is contained in another rectangle or not.\n    '''\n    if (r1*r2)<(r3*r2) and (r1*r2)>=(r3*r2)-(r3**2-r1**2):\n        return True\n    else:\n        return False\ndef check_rect_rec(r1,r2,r3):\n    '''\n    Write a function to check if a rectangle is contained in another rectangle or not.\n    '''\n    if (r1*r2)<(r3*r2) and (r1*r2)>=(r3*r2)-(r3**2-r1**2) and (r1**2+r2**2)+(r3**2-r1**2-r2**2)>=0:\n        return True\n    else:\n        return False\ndef rec_rect(r1,r2,r3):\n    '''\n    Write a function to check if a rectangle is contained in another rectangle or not.\n    '''\n    if r1>=0 and r2>=0 and r3>=0 and r1+r2>=r3 and r1+r2<=r3:\n        return True\n    else:\n        return False\ndef check_rec_rect(r1,r2,r3):\n    '''\n    Write a function to check if a rectangle is contained in another rectangle or not.\n    '''\n    if r1>=0 and r2>=0 and r3>=0 and r1+r2>=r3 and r1+r2<=r3:\n        return True\n    else:\n        return False\ndef rec_rec(r1,r2,r3):\n    '''\n    Write a function to check if a rectangle is contained in another rectangle or not.\n    '''\n    if r1>=0 and r2>=0 and r3>=0 and r1+r2>r3 and r1+r2<=r3:\n        return True\n    else:\n        return False\ndef check_rec_rec(r1,r2,r3):\n    '''\n    Write a function to check if a rectangle is contained in another rectangle or not.\n    '''\n    if r1>=0 and r2>=0 and r3>=0 and r1+r2>r3 and r1+r2<=r3:\n        return True\n    else:\n        return False\ndef rec_rec(r1,r2,r3):\n    '''\n    Write a function to check if a rectangle is contained in another rectangle or not.\n    '''\n    if r1>=0 and r2>=0 and r3>=0 and r1+r2>r3 and r1+r2<=r3:\n        return True\n    else:\n        return False\ndef check_rec_rec(r1,r2,r3):\n    '''\n    Write a function to check if a rectangle is contained in another rectangle or not.\n    '''\n    if r1>=0 and r2>=0 and r3>=0 and r1+r2>r3 and r1+r2<=r3:\n        return True\n    else:\n        return False\ndef is_valid_triangle(a,b,c):\n    '''\n    Write a function to check if a triangle is valid.\n    '''\n    if a<b+c and a>=b and a>=c:\n        if b<a+c and b>=a and b>=c:\n            if c<a+b and c>=a and c>=b:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef is_valid_triangle(a,b,c):\n    '''\n    Write a function to check if a triangle is valid.\n    '''\n    if a<b+c and a>=b and a>=c:\n        if b<a+c and b>=a and b>=c:\n            if c<a+b and c>=a and c>=b:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef is_valid_triangle(a,b,c):\n    '''\n    Write a function to check if a triangle is valid.\n    '''\n    if a<b+c and a>=b and a>=c:\n        if b<a+c and b>=a and b>=c:\n            if c<a+b and c>=a and c>=b:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef is_valid_triangle(a,b,c):\n    '''\n    Write a function to check if a triangle is valid.\n    '''\n    if a<b+c and a>=b and a>=c:\n        if b<a+c and b>=a and b>=c:\n            if c<a+b and c>=a and c>=b:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef is_valid_triangle(a,b,c):\n    '''\n    Write a function to check if a triangle is valid.\n    '''\n    if a<b+c and a>=b and a>=c:\n        if b<a+c and b>=a and b>=c:\n            if c<a+b and c>=a and c>=b:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef is_valid_triangle(a,b,c):\n    '''\n    Write a function to check if a triangle is valid.\n    '''\n    if a<b+c and a>=b and a>=c:\n        if b<a+c and b>=a and b>=c:\n            if c<a+b and c>=a and c>=b:\n                return True\n            else:\n                return False\n        else:\n            return False\n    else:\n        return False\ndef is_valid_triangle(a,b,c):\n    '''\n    Write a function to check if a triangle is vali"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*x + y*y)**(1/2), 2*x*y/((x*x + y*y)**(1/2))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    theta = cmath.phase(x)\n    r = cmath.polar(x)[0]\n    return(r*math.cos(theta),r*math.sin(theta))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = x**2+y**2\n    t = 2*cmath.atan2(y,x)\n    return(int(r),int(t))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    a = math.sqrt(x**2 + y**2)\n    if a == 0:\n        return '0'\n    else:\n        t = cmath.atan(y/x)\n        return a,t\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    if x==0:\n        if y>=0:\n            return (x,x)\n        if y<0:\n            return (0,y)\n    if x>0:\n        if y<0:\n            return (x,y)\n        if y>=0:\n            return (x,0)\n    if x<0:\n        if y<0:\n            return (y,0)\n        if y>=0:\n            return (y,x)\n    if x==0:\n        if y>0:\n            return (0,0)\n        if y<0:\n            return (0,-y)\n    if y==0:\n        if x>0:\n            return (0,x)\n        if x<0:\n            return (y,0)\n    if x==0 and y==0:\n        return (0,0)\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    # NOTE: Here we are assuming that the angle is always between 0 and pi\n    if x == 0 and y == 0:\n        return 0, 0\n    rad = cmath.sqrt(x**2 + y**2)\n    #print(rad)\n    if rad.real < 0:\n        #print(rad)\n        rad = abs(rad)\n        x = -x\n        #print(rad)\n    if y < 0:\n        y = -y\n    angle = cmath.phase(x)\n    #print(angle)\n    x = int(x * 10000)\n    y = int(y * 10000)\n    #print(x,y)\n    x = x - 10000*int(x / 10000)\n    y = y - 10000*int(y / 10000)\n    #print(x,y)\n    if y < 0:\n        y = abs(y)\n        x = -x\n    angle = angle - cmath.pi/2\n    angle = angle*(180/cmath.pi)\n    x = x * (180/cmath.pi)\n    y = y * (180/cmath.pi)\n    return x,y\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    phi = cmath.atan(y/x)\n    return r,phi\ndef rect_polar(x,y):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    r = cmath.sqrt(x**2+y**2)\n    phi = cmath.atan(y/x)\n    return r,phi\ndef polar_rect_rotation(r,phi,angle):\n    '''\n    Write a function to rotate polar coordinates around the origin.\n    '''\n    angle = cmath.pi/2 - angle\n    return polar_rect(r*cmath.cos(angle),r*cmath.sin(angle))\ndef rect_polar_rotation(r,phi,angle):\n    '''\n    Write a function to rotate rectangular coordinates around the origin.\n    '''\n    angle = cmath.pi/2 - angle\n    return rect_polar(r*cmath.cos(angle),r*cmath.sin(angle))\ndef rect_polar_conversion(x,y,angle):\n    '''\n    Write a function to convert rectangular coordinates to polar coordinates.\n    '''\n    angle = cmath.pi/2 - angle\n    return rect_polar(x*cmath.cos(angle),y*cmath.sin(angle))\ndef polar_rect_conversion(r,phi,angle):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    angle = cmath.pi/2 - angle\n    return polar_rect(r*cmath.cos(angle),r*cmath.sin(angle))\n"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return (x*2*cmath.pi), (y*2*cmath.pi)\n    \ndef complex_rect(z, r):\n    '''\n    Write a function to convert rectangular coordinates to complex numbers.\n    '''\n    return (z+r*cmath.cos(z-cmath.pi/2)), (r*cmath.sin(z-cmath.pi/2))\n    \ndef hypot(x, y):\n    '''\n    Write a function to compute the hypotenuse of a right-angle triangle\n    with legs of length x and y.\n    '''\n    return (cmath.sqrt(x*x + y*y))\n    \ndef csqrt(x):\n    '''\n    Write a function to compute the square root of a number\n    '''\n    return cmath.sqrt(x)\n    \ndef mod(x):\n    '''\n    Write a function to compute the modulus of a number\n    '''\n    return x%(2*cmath.pi)\n    \ndef arg(x):\n    '''\n    Write a function to compute the argument of a number\n    '''\n    return x%(2*cmath.pi)\n    \ndef cos_sin(x):\n    '''\n    Write a function to compute cos(x) and sin(x)\n    '''\n    return x*cmath.cos(x), x*cmath.sin(x)\n    \ndef factorial(x):\n    '''\n    Write a function to compute the factorial of a number\n    '''\n    if(x==0):\n        return 1\n    else:\n        return x*factorial(x-1)\n        \ndef cos_inverse(x):\n    '''\n    Write a function to compute cos(x)^-1\n    '''\n    return (x)/(x*x + 1)\n    \ndef exp_complex(x, y):\n    '''\n    Write a function to compute complex exponential.\n    '''\n    return x*x + y*y\n    \ndef euler_inverse(x):\n    '''\n    Write a function to compute euler's inverse\n    '''\n    return (x-1)/x\n    \ndef ln(x):\n    '''\n    Write a function to compute ln(x)\n    '''\n    return cmath.log(x)\n    \ndef euler_series(x):\n    '''\n    Write a function to compute euler's series.\n    '''\n    return x + ((x-1)/(x*(x+1)))\n    \ndef harmonic_series(x):\n    '''\n    Write a function to compute harmonic series.\n    '''\n    return x + (x*((x-1)/(x*(x+1))) + (x-1)/(x*(x+1)))\n    \ndef cosine(x):\n    '''\n    Write a function to compute cosine of x\n    '''\n    return x*cmath.cos(x)\n    \ndef sine(x):\n    '''\n    Write a function to compute sine of x\n    '''\n    return x*cmath.sin(x)\n    \ndef mean(x):\n    '''\n    Write a function to compute mean of the given list of integers\n    '''\n    return sum(x)/len(x)\n    \ndef median(x):\n    '''\n    Write a function to compute median of the given list of integers\n    '''\n    if(len(x)%2!= 0):\n        return x[len(x)/2]\n    else:\n        return (x[len(x)/2] + x[(len(x)/2)-1])/2\n    \ndef mode(x):\n    '''\n    Write a function to compute mode of the given list of integers\n    '''\n    count = 0\n    dic = {}\n    for i in x:\n        if(i in dic):\n            dic[i] += 1\n        else:\n            dic[i] = 1\n    keys = dic.keys()\n    values = dic.values()\n    max_value = max(values)\n    for i in keys:\n        if(dic[i] == max_value):\n            return i\n    return -1\n    \ndef median_two_sorted_arrays(a, b):\n    '''\n    Write a function to compute median of two sorted lists of integers.\n    '''\n    a.sort()\n    b.sort()\n    if(len(a)<len(b)):\n        return a[len(a)/2]\n    else:\n        return a[len(a)/2]\n        \ndef median_of_three_sorted_arrays(a, b, c):\n    '''\n    Write a function to compute median of three sorted lists of integers.\n    '''\n    a.sort()\n    b.sort()\n    c.sort()\n    mid = len(a)//2\n    if(len(a) == len(b) == len(c)):\n        return (a[mid]+b[mid]+c[mid])/3\n    elif(len(a) == len(b)):\n        return a[mid]\n    elif(len(a) == len(c)):\n        return a[mid]\n    else:\n        return b[mid]\n    \ndef sum_of_digits(x):\n    '''\n    Write a function to compute sum of digits of a number\n    '''\n    if(x == 0):\n        return 0\n    else:\n        return x%10 + sum_of_digits(x//10)\n    \ndef sum_of_digits_2(x):\n    '''\n    Write a function to compute sum of digits of a number\n    '''\n    if(x == 0):\n        return 0\n    else:\n        return x%10 + sum_of_digits_2(x//10)\n    \ndef sum_of_digits_3(x):\n    '''\n    Write a function to compute sum of digits of a number\n    '''\n    if(x == 0):\n        return 0\n    else:\n        if(x%10 == 0):\n            return x\n        else:\n            return x%10 + sum_of_digits_3(x//10)\n    \ndef fibonacci(x):\n    '''\n    Write a function to compute Fibonacci numbers\n    '''\n    if(x == 0):\n        return 0\n    elif(x == 1):\n        return 1\n    else:\n        return fibonacci(x-1) + fibonacci(x-2)\n    \ndef factorial_2(x):\n    '''\n    Write a function to compute factorial of a number\n    '''\n    if(x==1):\n        return 1\n    else:\n        return x*factorial_2(x-1)\n    \ndef factorial_3(x):\n    '''\n    Write a function to compute factorial of a number\n    '''\n    if(x == 1):\n        return 1\n    else:\n        return x*factorial_3(x-1)\n    \ndef power_n(x,n):\n    '''\n    Write a function to compute x to the power of n\n    '''\n    if(n == 0):\n        return 1\n    elif(n == 1):\n        return x\n    else:\n        return x*power_n(x,n-1)\n    \ndef cube_root(x):\n    '''\n    Write a function to compute cube root of a number\n    '''\n    if(x == 0):\n        return 0\n    else:\n        return power_n(x,(1/3))\n    \ndef fibonacci_recursive(x):\n    '''\n    Write a function to compute Fibonacci numbers using recursion\n    '''\n    if(x == 0 or x == 1):\n        return x\n    else:\n        return fibonacci_recursive(x-1) + fibonacci_recursive(x-2)\n        \ndef fibonacci_dynamic(x):\n    '''\n    Write a function to compute Fibonacci numbers using dynamic programming\n    '''\n    if(x == 0 or x == 1):\n        return x\n    elif(x == 2):\n        return 1\n    else:\n        fib = [0,1,1]\n        for i in range(3,x+1)"
    },
    {
        "number": 590,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import cmath\ndef polar_rect(x,y):\n    '''\n    Write a function to convert polar coordinates to rectangular coordinates.\n    '''\n    return x*x,y*y\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList[0], newList[-1] = newList[-1], newList[0]\n    return newList\n    \ndef reverse_List(newList): \n    '''\n    Write a python function to reverse the list.\n    '''\n    return newList[::-1]\n    \ndef reverse_List(newList): \n    '''\n    Write a python function to reverse the list.\n    '''\n    return newList[::-1]\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove_duplicate_List(newList): \n    '''\n    Write a python function to remove the duplicate elements from a list.\n    '''\n    newList = list(dict.fromkeys(newList))\n    return newList\n    \ndef remove"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    size = len(newList)\n    newList[size - 1], newList[0] = newList[0], newList[size - 1]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first = newList[0]\n    last = newList[len(newList)-1]\n    newList[0] = last\n    newList[len(newList)-1] = first\n    return newList\n    \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    newList = newList[1:len(newList)] + newList[0:1]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    return newList[-1:]+newList[1:-1]+newList[:1]\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    # Your code here\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    list_length = len(newList)\n    newList[0], newList[list_length - 1] = newList[list_length - 1], newList[0]\n    return newList\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    first=newList[0]\n    last=newList[-1]\n    newList[0]=last\n    newList[-1]=first\n    print(newList)\nswap_List([1,2,3,4,5])\n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    mid = len(newList)//2\n    newList[0], newList[-1] = newList[-1], newList[0] \n    newList = newList[0:mid] + [newList[-1]] + newList[mid:-1]\n    return newList \n"
    },
    {
        "number": 591,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last elements in a list.\n    '''\n    temp = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = temp\n    return newList\n    \n    \ndef rotate_Matrix(matrix): \n    '''\n    Write a python function to rotate a matrix by 90 degrees in anti-clockwise direction.\n    '''\n    temp = matrix[len(matrix)-1]\n    for i in range(0, len(matrix)):\n        matrix[i] = matrix[i][len(matrix)-1]\n        \n    matrix[len(matrix)-1] = temp\n    for i in range(len(matrix)-1, 0, -1):\n        for j in range(i):\n            temp = matrix[j]\n            matrix[j] = matrix[j+1]\n            matrix[j+1] = temp\n    return matrix\n    \n    \ndef flip_Matrix(matrix): \n    '''\n    Write a python function to reverse a matrix.\n    '''\n    for i in range(len(matrix)//2):\n        temp = matrix[i]\n        matrix[i] = matrix[len(matrix)-i-1]\n        matrix[len(matrix)-i-1] = temp\n    return matrix\n    \n    \ndef minimum_Depth(root): \n    '''\n    Write a python function to find the minimum depth of a given binary tree.\n    '''\n    if root == None:\n        return 0\n    if root.left == None and root.right == None:\n        return 1\n    if root.left == None:\n        return 1 + minimum_Depth(root.right)\n    if root.right == None:\n        return 1 + minimum_Depth(root.left)\n    return 1 + min(minimum_Depth(root.left), minimum_Depth(root.right))\n    \n    \ndef find_leaves_in_binary_tree(root): \n    '''\n    Write a python function to find the leaf nodes in a binary tree.\n    '''\n    if root == None:\n        return []\n    if root.left == None and root.right == None:\n        return [[root.data]]\n    left_leaves = find_leaves_in_binary_tree(root.left)\n    right_leaves = find_leaves_in_binary_tree(root.right)\n    if len(left_leaves) == 0:\n        return left_leaves + right_leaves\n    elif len(right_leaves) == 0:\n        return left_leaves + right_leaves\n    else:\n        return left_leaves + right_leaves\n    \n    \ndef twoSum_Less_than_K(arr, k): \n    '''\n    Write a python function to find the two numbers such that the sum is less than k, if there are multiple solutions return the numbers in a sorted order.\n    '''\n    arr.sort()\n    required_sum = 0\n    left = 0\n    right = len(arr) - 1\n    while left < right:\n        if arr[left] + arr[right] > k:\n            right -= 1\n        elif arr[left] + arr[right] < k:\n            left += 1\n        else:\n            required_sum = arr[left] + arr[right]\n            return required_sum, arr[left], arr[right]\n            \n    \ndef find_rotation_point(head): \n    '''\n    Write a python function to find the rotation point in a linked list.\n    '''\n    slow_ptr = head\n    fast_ptr = head\n    while fast_ptr and fast_ptr.next:\n        slow_ptr = slow_ptr.next\n        fast_ptr = fast_ptr.next.next\n    return slow_ptr\n    \n    \ndef is_Number_palindrome(num): \n    '''\n    Write a python function to check whether a number is a palindrome or not.\n    '''\n    num = str(num)\n    length = len(num)\n    start_index = 0\n    end_index = length - 1\n    while start_index < end_index:\n        if num[start_index] == num[end_index]:\n            start_index += 1\n            end_index -= 1\n        else:\n            return False\n    return True\n    \n    \ndef post_order_traversal(root): \n    '''\n    Write a python function to print the post order traversal of a given binary tree.\n    '''\n    if root == None:\n        return\n    print(root.data)\n    post_order_traversal(root.left)\n    post_order_traversal(root.right)\n    \n    \ndef post_order_traversal_iterative(root): \n    '''\n    Write a python function to print the post order traversal of a given binary tree.\n    '''\n    stack = []\n    if root == None:\n        return\n    while root or stack:\n        while root:\n            stack.append(root)\n            root = root.left\n        root = stack.pop()\n        print(root.data)\n        root = root.right\n        \n    \ndef sum_of_nth_node(root, n): \n    '''\n    Write a python function to find the sum of the nth node in a given binary tree.\n    '''\n    if root == None:\n        return 0\n    if n == 1:\n        return root.data\n    left_sum = sum_of_nth_node(root.left, n-1)\n    right_sum = sum_of_nth_node(root.right, n-1)\n    return left_sum + right_sum + root.data\n    \n    \ndef path_Sum(root, sum): \n    '''\n    Write a python function to find the path with sum equal to a given number.\n    '''\n    if root == None:\n        return 0\n    if root.left == None and root.right == None and root.data == sum:\n        return 1\n    if root.left == None:\n        return path_Sum(root.right, sum - root.data)\n    if root.right == None:\n        return path_Sum(root.left, sum - root.data)\n    left_path = path_Sum(root.left, sum - root.data)\n    right_path = path_Sum(root.right, sum - root.data)\n    return left_path + right_path\n    \n    \ndef find_maximum_path_sum(root): \n    '''\n    Write a python function to find the maximum path sum of a given binary tree.\n    '''\n    if root == None:\n        return 0\n    if root.left == None and root.right == None:\n        return root.data\n    left_max = find_maximum_path_sum(root.left)\n    right_max = find_maximum_path_sum(root.right)\n    return max(left_max + root.data, right_max + root.data, root.data)\n    \n    \ndef check_binary_search_tree_(root): \n    '''\n    Write a python function to check whether a given binary tree is a binary search tree or not.\n    '''\n    if root == None:\n        return True\n    if root.left == None and root.right == None:\n        return True\n    if root.left and root.right:\n        return (check_binary_search_tree_(root.left) and check_binary_search_tree_(root.right)) and root.data >= min(root.left.data, root.right.data)\n    return False\n    \n    \ndef find_minimum_element(arr, n): \n    '''\n    Write a python function to find the minimum element in an array.\n    '''\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if arr[mid] > arr[right]:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return arr[left]\n    \n    \ndef find_smallest_element(arr, n): \n    '''\n    Write a python function to find the smallest element in an array.\n    '''\n    if n == 0:\n        return\n    left = 0\n    right = len(arr) - 1\n    while left <= right:\n        mid = (left + right) /"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n==1 or k==0:\n        return 1\n    else:\n        return binomial_Coeff(n-1,k)+binomial_Coeff(n-1,k-1)\nn = 5\nk = 5\nprint(binomial_Coeff(n,k))"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    c = 1\n    for i in range(1, k+1):\n        c = c * (n-i+1) / i\n    return c\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    summation = 0\n    for j in range(0,k+1):\n        summation += (1/j)\n    for i in range(0,n-k):\n        summation -= (1/i)\n    return summation\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # Code here\n    \n    if k<0 or k>n:\n        return 0\n    return (factorial(n)*factorial(k)*factorial(n-k))//(factorial(k)*factorial(n-k-1))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    k1=k\n    n1=n\n    c=0\n    while k1>0:\n        c=c+(n1**k1)\n        k1-=1\n        n1-=1\n    return(c)\n    \nprint(binomial_Coeff(4,2))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(k == 0 or n == k): \n        return 1\n    elif(n>k): \n        return binomial_Coeff(n-1,k)+binomial_Coeff(n-1,k-1)*2\n    else: \n        return 0\n    \ndef binomial_Coeff_sum(n): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if(n==0): \n        return 0\n    else: \n        return n*(n+1)*binomial_Coeff(n-1,n-2)\n    \nprint(\"\")\nprint(\"The Sum of the product of consecutive binomial co-efficients is \")\nprint(\"sum of the product of consecutive binomial co-efficients is \", binomial_Coeff_sum(3))\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if (n == 0) or (k == 0): \n        return 1\n    return ((factorial(n) // (factorial(k) * factorial(n - k))) * binomial_Coeff(n - 1, k - 1))\n    \ndef sum_of_binomial_coeff(n, k):\n    '''\n    Write a python function that takes in the two integer variables n and k and returns the sum of the successive binomial coefficients.\n    '''\n    return int(binomial_Coeff(n,k) / factorial(k))\n    \ndef binomial_coeff(n, k, d):\n    '''\n    Write a python function to find the binomial coefficient.\n    '''\n    if (n == 0) or (k == 0): \n        return 1\n    return ((factorial(n) // (factorial(k) * factorial(n - k))) * binomial_coeff(n - 1, k - 1, d))\n    \ndef binomial_coeff_dict(n, k, d):\n    '''\n    Write a python function that takes in the three integer variables n, k and d and returns the binomial coefficient.\n    '''\n    if (n == 0) or (k == 0): \n        return 1\n    if (n == 1): \n        return binomial_coeff(n, k, d)\n    else:\n        return ((factorial(n) // (factorial(k) * factorial(n - k))) * binomial_coeff_dict(n - 1, k - 1, d))\n    \ndef all_trials(n, k):\n    '''\n    Write a python function that calculates all the possible triplets in a particular set of numbers.\n    '''\n    if (n == 0) or (k == 0): \n        return\n    if (n == 1): \n        if (k == 1): \n            return [[1, 1, 1]]\n        else:\n            return [[1, 1]]\n    else:\n        if (k == 1): \n            return [[n, n, n]]\n        else:\n            if (k == 2): \n                return [[n, n], [n, n, n]]\n            else:\n                s = all_trials(n - 1, k)\n                s = [[n, n]] + s\n                return s\n            \ndef all_trials_dict(n, k, d):\n    '''\n    Write a python function that calculates all the possible triplets in a particular set of numbers.\n    '''\n    if (n == 0) or (k == 0): \n        return\n    if (n == 1): \n        if (k == 1): \n            return [[1, 1, 1]]\n        else:\n            return [[1, 1]]\n    else:\n        if (k == 1): \n            return [[n, n, n]]\n        else:\n            if (k == 2): \n                return [[n, n], [n, n, n]]\n            else:\n                s = all_trials_dict(n - 1, k, d)\n                s = [[n, n]] + s\n                return s\n    \ndef triplets_in_range(low, high):\n    '''\n    Write a python function that finds all the triplets such that 1<=a<=n, a<=b<=m, a<=c<=n. \n    '''\n    if (low == 0): \n        return [[1, 1]]\n    if (low == 1): \n        return [[1, 1, 1]]\n    else:\n        if (low == 2): \n            return [[1, 1, 1, 1], [1, 1, 2], [1, 2, 1], [2, 1, 1]]\n        else:\n            if (low == 3): \n                return [[1, 1, 1, 1, 1], [1, 1, 2, 1], [1, 2, 1, 1], [1, 2, 2], \n                    [1, 3, 1], [1, 3, 2], [1, 3, 3], \n                    [2, 1, 1, 1], [2, 1, 2, 1], \n                    [2, 2, 1, 1], \n                    [2, 2, 2], \n                    [2, 3, 1], \n                    [2, 3, 2], \n                    [2, 3, 3], \n                    [3, 1, 1], \n                    [3, 1, 2], \n                    [3, 2, 1], \n                    [3, 2, 2], \n                    [3, 3, 1], \n                    [3, 3, 2], \n                    [3, 3, 3]]\n            else:\n                s = triplets_in_range(low - 1, high)\n                s1 = triplets_in_range(low, high - 2)\n                s = [[1, 1]] + s + s1\n                return s\n    \ndef subset_sum(arr, n, sum_of_arr):\n    '''\n    Write a python function that returns a boolean for whether or not a subset of arr is equal to sum_of_arr.\n    '''\n    if (sum_of_arr == 0):\n        return True\n    if (sum_of_arr < 0):\n        return False\n    if (n == 0):\n        return False\n    if (arr[n - 1] > sum_of_arr):\n        return subset_sum(arr, n - 1, sum_of_arr)\n    return subset_sum(arr, n - 1, sum_of_arr) or subset_sum(arr, n - 1, sum_of_arr - arr[n - 1])\n    \ndef subset_sum_dict(arr, n, sum_of_arr):\n    '''\n    Write a python function that returns a dictionary for whether or not a subset of arr is equal to sum_of_arr.\n    '''\n    if (sum_of_arr == 0):\n        return True\n    if (sum_of_arr < 0):\n        return False\n    if (n == 0):\n        return False\n    if (arr[n - 1] > sum_of_arr):\n        return subset_sum_dict(arr, n - 1, sum_of_arr)\n    return subset_sum_dict(arr, n - 1, sum_of_arr) or subset_sum_dict(arr, n - 1, sum_of_arr - arr[n - 1])\n    \ndef all_subsets(arr):\n    '''\n    Write a python function that computes all subsets of arr.\n    '''\n    s = []\n    if (len(arr) == 0):\n        return [[]]\n    s += [[arr[0]]]\n    for i in range(1, len(arr)):\n        s1 = []\n        s1 = s + [[arr[i]]]\n        s += s1\n    return s\n    \ndef all_subsets_dict(arr):\n    '''\n    Write a python function that computes all subsets of arr.\n    '''\n    s = []\n    if (len(arr) == 0):\n        return [[]]\n    s += [[arr[0]]]\n    for i in range(1, len(arr)):\n        s1 = []\n        s1 = s + [[arr[i]]]\n        s += s1\n    return s\n    \ndef subsets(arr):\n    '''\n    Write a python function that computes all subsets of arr.\n    '''\n    s = []\n    if (len(arr) == 0):\n        return [[]]\n    s += [[arr[0]]]\n    for i in range(1, len(arr)):\n        s1 = []\n        for j in range(len(s)):\n            s1 += [[arr[i]]]\n        s += s1\n    return s\n    \ndef subsets_dict(arr):\n    '''\n    Write a python function that computes all subsets of arr.\n    '''\n    s = []\n    if (len(arr) == 0):\n        return [[]]\n    s += [[arr[0]]]\n    for i in range(1, len(arr)):\n        s1 = []\n        for j in range(len(s)):\n            s1 += [[arr[i]]]\n        s += s1\n    return s\n    \ndef subsets_with_duplicates(arr):\n    '''\n    Write a python function that compute"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    sum = 1\n    for i in range(1,n+1):\n        sum += (i*i)\n    print(sum)\n    return sum\ndef co_binomial_Coeff(n):\n    '''\n    Write a python function to find the sum of the product of consecutive co-binomial co-efficients.\n    '''\n    sum = 1\n    for i in range(1,n+1):\n        sum += (i*i*i)\n    print(sum)\n    return sum\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    if n <= 1:\n        return 1\n    else:\n        return n*binomial_Coeff(n-1,k) + binomial_Coeff(n-2,k)\n"
    },
    {
        "number": 592,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def binomial_Coeff(n,k): \n    '''\n    Write a python function to find the sum of the product of consecutive binomial co-efficients.\n    '''\n    # first, take n as input\n    # from 1 to n, take the number of ways to choose k elements from the set of size n\n    # the expression for the number of ways to choose k elements from the set of size n is C(n,k) = (n + 1)! / ((n - k)!* k!)\n    # (for the number of ways to choose k elements from the set of size n)\n    # find the binomial coefficient by taking the first two terms and the product of the next n-k terms\n    # because the coefficients are cumulative, we need to use the binomial coefficient formula for the first two terms\n    # C(n,k) = (C(n,k-1)*C(n-1,k-1))\n    # we can solve it using the formula C(n,k) = (n-1)! / ((n-k)!* k!)\n    # we can then find the value of the coefficient by multiplying the first two terms and the product of the remaining terms\n    # C(n,k) = n-1! / ((n-k)!* k!) * (n-1)! / ((n-k)!* k!)\n    # to find the coefficient of the binomial coefficient, we need to find the value of the first two terms.\n    # C(n,k) = n-1! / ((n-k)!* k!)\n    # so to find the value of the coefficient, we need to take the formula for n terms\n    # C(n,k) = (n-1)! / ((n-k)!* k!)\n    # so to find the coefficient, we need to multiply the first two terms and the product of the remaining terms\n    # so, we can use the formula below.\n    # C(n,k) = (n-1)! / ((n-k)!* k!)\n    # we can use the formula for the coefficients of an ordinary binomial coefficient to find the coefficients.\n    # this formula can be found at: https://en.wikipedia.org/wiki/Binomial_coefficient\n    # the formula for the binomial coefficient is found at https://math.stackexchange.com/questions/141202/formula-for-the-binomial-coefficient-generalized-to-generalized-to-negative-numbers\n    # the formula for the binomial coefficient is found at https://math.stackexchange.com/questions/547817/formula-for-the-binomial-coefficient-generalized-to-generalized-to-negative-numbers\n    # we can see that the formula for the binomial coefficient is the same for the coefficients of ordinary binomial coefficients as well.\n    # so the binomial coefficient formula is:\n    # C(n,k) = (n-1)! / ((n-k)!* k!)\n    # the formula for the coefficients of the binomial coefficients is found at: https://math.stackexchange.com/questions/547817/formula-for-the-binomial-coefficient-generalized-to-generalized-to-negative-numbers\n    # so we can see that the coefficients of binomial coefficients are the same as the coefficients of ordinary binomial coefficients.\n    # the binomial coefficient formula is:\n    # C(n,k) = (n-1)! / ((n-k)!* k!)\n    # so the binomial coefficient formula becomes:\n    # C(n,k) = (n-k)! / ((n-k)!* k!)\n    # now we can use the formula above to find the value of the coefficient.\n    # we can see that the value of the coefficient of the binomial coefficient is given by:\n    # C(n,k) = (n-k)! / ((n-k)!* k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / ((n-k)!* k!)\n    # we can see that it is same as the coefficients of the ordinary binomial coefficients.\n    # let's look at the formula for the coefficient of the ordinary binomial coefficients:\n    # C(n,k) = (n-k)! / ((n-k)!* k!)\n    # so the formula becomes:\n    # C(n,k) = n!/((n-k)!* k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (k!* k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n * k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / ((n-k)!* k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / ((n-k)!* k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)! / (n*k!)\n    # so the formula becomes:\n    # C(n,k) = (n-k)"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if(ip.find('.')>0):\n        ip=ip.split('.')\n        ip=list(map(lambda x: str(x).lstrip('0'), ip))\n        ip='.'.join(ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    return \"\".join([x for x in ip.split('.') if int(x)!= 0])\ndef removezero_asn(asn):\n    '''\n    Write a function to remove leading zeroes from an ASN.\n    '''\n    return re.sub('^0+', '', asn)\ndef remove_extra_zeros(ip):\n    '''\n    Write a function to remove any extra leading zeroes from an IP address.\n    '''\n    ip = str(ip)\n    if len(ip) == 8:\n        return ip\n    if len(ip) == 10:\n        return ip[0:8]\n    return ip\ndef remove_extra_zeros(ip):\n    '''\n    Write a function to remove any extra leading zeroes from an IP address.\n    '''\n    ip = str(ip)\n    if len(ip) == 8:\n        return ip\n    if len(ip) == 10:\n        return ip[0:8]\n    return ip\ndef no_prefix_length(ip):\n    '''\n    Write a function that returns true if the input IP address is an IP address with no prefix length.\n    '''\n    ip = str(ip)\n    ip = ip.split('.')\n    if len(ip) == 4:\n        return True\n    else:\n        return False\ndef ipv4(ip):\n    '''\n    Write a function that returns true if the input IP address is an IPv4 address.\n    '''\n    ip = str(ip)\n    regex = r'^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    return re.match(regex, ip) is not None\ndef ipv6(ip):\n    '''\n    Write a function that returns true if the input IP address is an IPv6 address.\n    '''\n    ip = str(ip)\n    regex = r'^(([0-9a-f]{1,4}:){7}[0-9a-f]{1,4}|[0-9a-f]{1,4}:){1,7}:((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$'\n    return re.match(regex, ip) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n    Write a function that returns true if the input MAC address is a valid MAC address.\n    '''\n    regex = r'^([0-9a-f]{2}[:-]){5}([0-9a-f]{2})$'\n    return re.match(regex, mac) is not None\ndef valid_mac_address(mac):\n    '''\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    x = []\n    for i in range(len(ip)):\n        if int(ip[i]) == 0:\n            continue\n        else:\n            x.append(ip[i])\n    return '.'.join(x)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = ip.split('.')\n    i = 0\n    while i < len(ip):\n        if len(ip[i]) == 0:\n            ip.remove(ip[i])\n        else:\n            i += 1\n    return '.'.join(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    new_ip = re.sub('0+', '', ip)\n    return new_ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip_re = re.compile('^0')\n    if ip_re.match(ip):\n        return ip[1:]\n    else:\n        return ip\n    \ndef removezero_subnet(subnet):\n    '''\n    Write a function to remove leading zeroes from a subnet mask.\n    '''\n    subnet_re = re.compile('^0')\n    if subnet_re.match(subnet):\n        return subnet[1:]\n    else:\n        return subnet\n    \ndef combine_ip_and_subnet(ip, subnet):\n    '''\n    Write a function to combine an ip address and a subnet mask into a single string.\n    '''\n    ip = removezero_ip(ip)\n    subnet = removezero_subnet(subnet)\n    return ip +'/'+ subnet\n    \ndef combine_ip_and_address(ip, address):\n    '''\n    Write a function to combine an ip address and an address into a single string.\n    '''\n    ip = removezero_ip(ip)\n    address_re = re.compile('.*?(\\/.*?$)')\n    if address_re.match(address):\n        address = address.strip('/')\n        if ip == address:\n            return 'IP Address and Address are the same'\n        else:\n            return combine_ip_and_subnet(ip, address)\n    else:\n        return combine_ip_and_subnet(ip, address)\n        \ndef combine_ip_and_network(ip, network):\n    '''\n    Write a function to combine an ip address and a network mask into a single string.\n    '''\n    ip = removezero_ip(ip)\n    network_re = re.compile('.*?(\\/.*?$)')\n    if network_re.match(network):\n        network = network.strip('/')\n        if ip == network:\n            return 'IP Address and Network are the same'\n        else:\n            return combine_ip_and_subnet(ip, network)\n    else:\n        return combine_ip_and_subnet(ip, network)\n        \ndef combine_subnet_and_address(subnet, address):\n    '''\n    Write a function to combine a subnet and an address into a single string.\n    '''\n    subnet = removezero_subnet(subnet)\n    address_re = re.compile('.*?(\\/.*?$)')\n    if address_re.match(address):\n        address = address.strip('/')\n        if subnet == address:\n            return 'Subnet and Address are the same'\n        else:\n            return combine_ip_and_subnet(subnet, address)\n    else:\n        return combine_ip_and_subnet(subnet, address)\n    \ndef combine_subnet_and_network(subnet, network):\n    '''\n    Write a function to combine a subnet and a network mask into a single string.\n    '''\n    subnet = removezero_subnet(subnet)\n    network_re = re.compile('.*?(\\/.*?$)')\n    if network_re.match(network):\n        network = network.strip('/')\n        if subnet == network:\n            return 'Subnet and Network are the same'\n        else:\n            return combine_ip_and_subnet(subnet, network)\n    else:\n        return combine_ip_and_subnet(subnet, network)\n    \ndef combine_address_and_network(address, network):\n    '''\n    Write a function to combine an address and a network mask into a single string.\n    '''\n    address_re = re.compile('.*?(\\/.*?$)')\n    if address_re.match(address):\n        address = address.strip('/')\n        if network == address:\n            return 'Network and Address are the same'\n        else:\n            return combine_ip_and_network(address, network)\n    else:\n        return combine_ip_and_network(address, network)\n    \ndef combine_address_and_subnet(address, subnet):\n    '''\n    Write a function to combine an address and a subnet mask into a single string.\n    '''\n    address_re = re.compile('.*?(\\/.*?$)')\n    if address_re.match(address):\n        address = address.strip('/')\n        if subnet == address:\n            return 'Network and Subnet are the same'\n        else:\n            return combine_ip_and_subnet(address, subnet)\n    else:\n        return combine_ip_and_subnet(address, subnet)\n    \ndef combine_network_and_address(network, address):\n    '''\n    Write a function to combine a network and an address into a single string.\n    '''\n    network_re = re.compile('.*?(\\/.*?$)')\n    if network_re.match(network):\n        network = network.strip('/')\n        if address == network:\n            return 'IP Address and Network are the same'\n        else:\n            return combine_ip_and_network(network, address)\n    else:\n        return combine_ip_and_network(network, address)\n    \ndef combine_network_and_subnet(network, subnet):\n    '''\n    Write a function to combine a network and a subnet mask into a single string.\n    '''\n    network_re = re.compile('.*?(\\/.*?$)')\n    if network_re.match(network):\n        network = network.strip('/')\n        if subnet == network:\n            return 'IP Address and Network are the same'\n        else:\n            return combine_ip_and_subnet(network, subnet)\n    else:\n        return combine_ip_and_subnet(network, subnet)\n    \ndef combine_subnet_and_network(subnet, network):\n    '''\n    Write a function to combine a subnet and a network mask into a single string.\n    '''\n    subnet_re = re.compile('.*?(\\/.*?$)')\n    if subnet_re.match(subnet):\n        subnet = subnet.strip('/')\n        if network == subnet:\n            return 'IP Address and Subnet are the same'\n        else:\n            return combine_ip_and_subnet(subnet, network)\n    else:\n        return combine_ip_and_subnet(subnet, network)\n    \ndef combine_subnet_and_address(subnet, address):\n    '''\n    Write a function to combine a subnet and an address into a single string.\n    '''\n    subnet_re = re.compile('.*?(\\/.*?$)')\n    if subnet_re.match(subnet):\n        subnet = subnet.strip('/')\n        if address == subnet:\n            return 'IP Address and Subnet are the same'\n        else:\n            return combine_ip_and_subnet(subnet, address)\n    else:\n        return combine_ip_and_subnet(subnet, address)\n    \ndef combine_address_and_subnet(address, subnet):\n    '''\n    Write a function to combine an address and a subnet mask into a single string.\n    '''\n    address_re = re.compile('.*?(\\/.*?$)')\n    if address_re.match(address):\n        address = address.strip('/')\n        if subnet == address:\n            return 'IP Address and Subnet are the same'\n        else:\n            return combine_ip_and_subnet(address, subnet)\n    else:\n        return combine_ip_and_subnet(address, subnet)\n        \ndef combine_address_and_network(address, network):\n    '''\n    Write a function to combine an address and a network mask into a single string.\n    '''\n    address_re = re.compile('.*?(\\/.*?$)')\n    if address_re.match(address):\n        address = address.strip('/')\n        if network == address:\n            return 'IP Address and Network are the same'\n        else:\n            return combine_ip_and_network(address, network)\n    else:\n        return combine_ip_and_network"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    if ip == \"0.0.0.0\":\n        return 0\n    elif ip == \"0.0.0.1\":\n        return \"0.0.0.1\"\n    elif ip == \"0.0.0.254\":\n        return \"0.0.0.254\"\n    else:\n        return int(ip)\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip = list(ip.split('.'))\n    ip.pop()\n    ip = '.'.join(ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    \n    ip = ip.split('.')\n    ip[0] = ip[0].lstrip('0')\n    for i in range(1, len(ip)):\n        ip[i] = ip[i].lstrip('0')\n    ip = '.'.join(ip)\n    return ip\n"
    },
    {
        "number": 593,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef removezero_ip(ip):\n    '''\n    Write a function to remove leading zeroes from an ip address.\n    '''\n    ip=str(ip)\n    while ip[0]=='0':\n        ip=ip[1:]\n    return ip\ndef remove_spaces(ip):\n    '''\n    Write a function to remove spaces from an ip address.\n    '''\n    ip=str(ip)\n    if ip.count(' ')>0:\n        ip=ip.replace(' ','')\n    return ip\ndef ip_parser(input):\n    '''\n    Write a function that parses an ip address and returns an integer representing the bits.\n    '''\n    input=remove_spaces(input)\n    input=removezero_ip(input)\n    #print(input)\n    #print('remove zero',input)\n    #input=input.replace('.','')\n    #print(input)\n    #input=input.split('.')\n    ip=re.findall('[0-9]+(?:\\.[0-9]+){3}',input)\n    #print(ip)\n    ip_int=0\n    for i in range(len(ip)):\n        ip_int=ip_int<<8\n        ip_int=ip_int+int(ip[i])\n    return ip_int\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = -1\n    odd = -1\n    for num in list1:\n        if num%2 == 0:\n            even = num\n        else:\n            odd = num\n    return even - odd\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_number = []\n    odd_number = []\n    for i in range(len(list1)):\n        if list1[i]%2==0:\n            even_number.append(list1[i])\n        else:\n            odd_number.append(list1[i])\n    print(f\"The difference of first even and first odd number of a given list is {sum(even_number)-sum(odd_number)}\")\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_list=[]\n    odd_list=[]\n    for i in list1:\n        if i%2==0:\n            even_list.append(i)\n        else:\n            odd_list.append(i)\n    return abs(even_list[0]-odd_list[0])\n    \ndef word_break(str, dic):\n    '''\n    Write a function to check if the given string can be segmented into a space-separated sequence of one or more dictionary words.\n    '''\n    if str=='':\n        return True\n    if str in dic:\n        return True\n    for i in range(1,len(str)+1):\n        if str[:i] in dic and word_break(str[i:],dic):\n            return True\n    return False\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even = list1[0::2]\n    odd = list1[1::2]\n    return even[0] - odd[0]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_odd = list()\n    for i in range(0,len(list1)):\n        if(list1[i]%2==0):\n            even_odd.append(list1[i])\n        else:\n            even_odd.append(list1[i])\n    return(sum(even_odd)-sum(list1))\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) < 2:\n        return \"List is too small\"\n    i = 0\n    i = i + 1\n    while i < len(list1):\n        if list1[i] % 2 == 0:\n            break\n        i = i + 1\n    if i == 0:\n        return \"First even number is not found\"\n    j = 0\n    j = j + 1\n    while j < len(list1):\n        if list1[j] % 2 == 1:\n            break\n        j = j + 1\n    return list1[i] - list1[j]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return -1\n    else:\n        i=0\n        while i < len(list1) and list1[i]%2 == 0:\n            i=i+1\n        if i==0:\n            return -1\n        else:\n            return list1[0]-list1[i-1]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1) <= 1:\n        return list1[0]\n    else:\n        return list1[0] - list1[1]\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    if len(list1)==0:\n        return 0\n    even=list1[0]\n    odd=list1[1]\n    for i in range(2,len(list1)):\n        if list1[i]%2==0:\n            even=list1[i]\n        else:\n            odd=list1[i]\n    return even-odd\n"
    },
    {
        "number": 594,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def diff_even_odd(list1):\n    '''\n    Write a function to find the difference of the first even and first odd number of a given list.\n    '''\n    even_nums = []\n    odd_nums = []\n    for i in range(len(list1)):\n        if list1[i] % 2 == 0:\n            even_nums.append(list1[i])\n        else:\n            odd_nums.append(list1[i])\n    return abs(even_nums[0] - odd_nums[0])\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    if str1==str2 : return 0\n    min_swaps = 0\n    for i in range(len(str2)) : \n        if str1[i]!= str2[i] :\n            min_swaps += 1\n            swap(str1, str2, i)\n    return min_swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    m = len(str2)\n    count = 0\n    if n!=m : return -1\n    for i in range(n) : \n        if str1[i]!= str2[i] : \n            if str1[i]=='0' : str1=str1[:i]+'1'+str1[i+1:]\n            else : str1=str1[:i]+'0'+str1[i+1:]\n            count+=1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    str1 = str1.replace('0','').replace('1','')\n    str2 = str2.replace('0','').replace('1','')\n    if str1 == str2 : return 0\n    n = len(str1)\n    j = 0\n    while j < n and str1[j] == str2[j] : \n        j += 1\n    if j == n : return 0\n    i = n - 1\n    swaps = 0\n    while i >= j : \n        if str1[i] == '0' and str2[i] == '1' : \n            swaps += 1\n            i -= 1\n        if str1[i] == '1' and str2[i] == '0' : \n            swaps += 1\n            i -= 1\n        if str1[i] == '1' and str2[i] == '1' : \n            i -= 1\n        if str1[i] == '0' and str2[i] == '0' : \n            i -= 1\n    return swaps\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    result = 0\n    if len(str1)!= len(str2):\n        return -1\n    for i in range(len(str1)):\n        if str1[i] == str2[i]:\n            continue\n        temp = str1[i]\n        str1 = str1[:i] + str2[i] + str1[i+1:]\n        str2 = str2[:i] + temp + str2[i+1:]\n        result += 1\n    return result\n    \n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    \n    str1_list = list(str1)\n    str2_list = list(str2)\n    str1_list.reverse()\n    str2_list.reverse()\n    print(str1_list)\n    print(str2_list)\n    i=0\n    while i<len(str1_list) and str1_list[i]==str2_list[i] :\n        i+=1\n    return i\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swap_cnt = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            tmp = str1[i]\n            str1 = str1[:i] + str2[i] + str1[i+1:]\n            str2 = str2[:i] + tmp + str2[i+1:]\n            swap_cnt += 1\n    return swap_cnt\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    x = [int(d) for d in str1]\n    y = [int(d) for d in str2]\n    x.sort()\n    y.sort()\n    n = len(x)\n    count = 0\n    for i in range(n) :\n        if x[i]!= y[i] :\n            x_index = x.index(x[i])\n            y_index = y.index(y[i])\n            x[x_index] = y[y_index]\n            y[y_index] = x[x_index]\n            count += 1\n    print(count)\nmin_Swaps(\"101\",\"100\")\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    n = len(str1)\n    count = 0\n    for i in range(0,n) : \n        if str1[i]!= str2[i] : \n            count = count + 1\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    # Get the size of both string\n    str1_len = len(str1)\n    str2_len = len(str2)\n    \n    # If lengths of str1 and str2 are not same, then they cannot be converted\n    if str1_len!= str2_len :\n        print('String must be same length')\n        return -1\n    \n    # Create a temporary array to store str1\n    temp = str1.copy()\n    \n    # Initialize count as 0\n    count = 0\n    \n    # Compare str1 and str2\n    for i in range(str1_len) :\n        # If str1 char is not equal to str2, then we need to swap them\n        if temp[i]!= str2[i] :\n            # Swap the characters\n            temp[i], temp[str2.index(str1[i])] = str2[str2.index(str1[i])], temp[i]\n            \n            # Increment count\n            count += 1\n    \n    # Print the number of swaps\n    print('Swap required : ',count)\n    return count\n"
    },
    {
        "number": 595,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Swaps(str1,str2) : \n    '''\n    Write a python function to count minimum number of swaps required to convert one binary number represented as a string to another.\n    '''\n    swaps = 0\n    for i in range(len(str1)) :\n        if str1[i]!= str2[i] :\n            swaps+=1\n            str1_ = str1[i+1:]+str1[:i+1]\n            str2_ = str2[i+1:]+str2[:i+1]\n            for j in range(len(str1_)) :\n                if str1_[j]!= str2_[j] :\n                    str1 = str1_[:j]+str1_[j+1:]\n                    str2 = str2_[:j]+str2_[j+1:]\n                    swaps+=1\n                    break\n                elif j == len(str1_)-1 :\n                    str1 = str1_\n                    str2 = str2_\n                    swaps+=1\n                    break\n    return swaps"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    a = 0\n    for i in range(0,len(tuple_list)):\n        a += sys.getsizeof(tuple_list[i])\n    return a\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    a = len(tuple_list)\n    b = a*4\n    return b\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    size_bytes = 0\n    for _ in tuple_list:\n        size_bytes += sys.getsizeof(_)\n    return size_bytes\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    for tuple in tuple_list:\n        # print(sys.getsizeof(tuple))\n        return sys.getsizeof(tuple)\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #check if the type of tuple is int or string\n    if type(tuple_list[0])!= tuple:\n        #convert the given tuple into a tuple\n        tuple_list = tuple(tuple_list)\n    \n    #return the total size in bytes of the given tuple\n    return sum((sys.getsizeof(x) for x in tuple_list))\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    #pass\n    l = len(tuple_list)\n    size = l * 8\n    return size\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    if len(tuple_list) == 1:\n        return sys.getsizeof(tuple_list)\n    else:\n        return sys.getsizeof(tuple_list) + tuple_size(tuple_list[1:])\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    b = 0\n    for i in tuple_list:\n        b += sys.getsizeof(i)\n    return b\n"
    },
    {
        "number": 596,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import sys \ndef tuple_size(tuple_list):\n    '''\n    Write a function to find the size in bytes of the given tuple.\n    '''\n    return sys.getsizeof(tuple_list)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    length_arr1 = len(arr1)\n    length_arr2 = len(arr2)\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # make the length of the smaller array as len(arr1)\n    arr1 = arr1 + arr2\n    arr1.sort()\n    print(arr1)\n    # if the length of array is less than k\n    # then return the number at the kth position of the larger array\n    if len(arr1) < k:\n        return arr1[k]\n    # if the length of array is greater than k\n    # then return the number at the kth position of the smaller array\n    return arr1[k - 1]\n    \narr1 = [3, 5, 9, 10, 15, 22]\narr2 = [1, 6, 10, 16, 19, 21]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 or len(arr2) == 0:\n        if k == 0:\n            return arr1[0]\n        else:\n            return arr2[0]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    arr1 = [x for x in arr1]\n    arr2 = [x for x in arr2]\n    arr1.sort()\n    arr2.sort()\n    len1 = len(arr1)\n    len2 = len(arr2)\n    if len1 > len2:\n        return find_kth(arr2, arr1, k)\n    if len1 == 0:\n        return arr2[k-1]\n    if k <= 1:\n        return min(arr1[0], arr2[0])\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    a = 0\n    b = 0\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    # get the kth element from both the arrays\n    k1 = arr1[k-1]\n    k2 = arr2[k-1]\n    # to find the kth element\n    # we will start comparing elements from the second array\n    # and we will keep comparing till we have a larger element\n    # and we will keep doing this till we have a smaller element\n    # and we will return the kth element in the end\n    while True:\n        if k1 < k2:\n            # move k1 to the left\n            k1 = arr1[k1]\n        else:\n            k2 = arr2[k2]\n        if k1 > k2:\n            break\n    return k1\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    sorted_array = merge_sorted_arrays(arr1, arr2)\n    return sorted_array[k-1]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    if len(arr1) == 0 and len(arr2) == 0:\n        return\n    elif len(arr1) == 0 and len(arr2) > 0:\n        return arr2[k-1]\n    elif len(arr2) == 0 and len(arr1) > 0:\n        return arr1[k-1]\n    else:\n        if arr1[0] < arr2[0]:\n            return find_kth(arr1[1:], arr2, k)\n        elif arr1[0] > arr2[0]:\n            return find_kth(arr1, arr2[1:], k)\n        else:\n            return arr1[0]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    while True:\n        if len(arr1) == 0 or len(arr2) == 0:\n            return -1\n        if arr1[0] < arr2[0]:\n            if k == 0:\n                return arr1[0]\n            else:\n                k -= 1\n                arr1 = arr1[1:]\n        else:\n            if k == 0:\n                return arr2[0]\n            else:\n                k -= 1\n                arr2 = arr2[1:]\n"
    },
    {
        "number": 597,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_kth(arr1, arr2, k):\n    '''\n    Write a function to find kth element from the given two sorted arrays.\n    '''\n    n1 = len(arr1)\n    n2 = len(arr2)\n    if n1 < k or n2 < k:\n        return -1\n    start = 0\n    end = n1\n    while start <= end:\n        #print(start, end)\n        mid = (start + end) // 2\n        if arr1[mid] == arr2[mid]:\n            #print(mid)\n            if mid == k-1:\n                return arr1[mid]\n            elif mid == k:\n                return arr2[mid]\n            else:\n                if arr1[mid-1] < arr2[mid]:\n                    start = mid + 1\n                else:\n                    end = mid - 1\n        elif arr1[mid] < arr2[mid]:\n            start = mid + 1\n        else:\n            end = mid - 1\n    return -1\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    temp = number\n    result = 0\n    while temp > 0:\n        remainder = temp % 10\n        result += pow(remainder, 3)\n        temp = temp // 10\n    if number == result:\n        print(\"Armstrong number\")\n    else:\n        print(\"Not an armstrong number\")\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    sum = 0\n    for i in number:\n        sum = sum + int(i)**3\n    if number == str(sum):\n        return True\n    else:\n        return False\n    \ndef palindrome(string):\n    '''\n    Write a function to check whether the given string is a palindrome or not.\n    '''\n    string = str(string)\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n        \ndef is_prime(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    if number > 1:\n        for i in range(2,number):\n            if (number % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef perfect(number):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    number = int(number)\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum = sum + i\n    if sum == number:\n        return True\n    else:\n        return False\n        \ndef armstrong_num_list(number_list):\n    '''\n    Write a function to check whether a given list contains armstrong numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if armstrong_number(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef palindrome_list(string_list):\n    '''\n    Write a function to check whether a given list contains palindrome strings or not.\n    '''\n    list_no = []\n    for i in string_list:\n        if palindrome(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef prime_list(number_list):\n    '''\n    Write a function to check whether a given list contains prime numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if is_prime(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef perfect_list(number_list):\n    '''\n    Write a function to check whether a given list contains perfect numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if perfect(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef armstrong_num_str(string_num):\n    '''\n    Write a function to check whether a given string contains armstrong numbers or not.\n    '''\n    sum = 0\n    for i in string_num:\n        sum = sum + int(i)**3\n    if str(sum) == string_num:\n        return True\n    else:\n        return False\n        \ndef palindrome_str(string_num):\n    '''\n    Write a function to check whether a given string contains palindrome strings or not.\n    '''\n    if string_num == string_num[::-1]:\n        return True\n    else:\n        return False\n        \ndef prime_str(string_num):\n    '''\n    Write a function to check whether a given string contains prime numbers or not.\n    '''\n    for i in range(1,len(string_num)):\n        if int(string_num[i]) > 1:\n            for j in range(2,int(string_num[i])+1):\n                if (int(string_num[i]) % j) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    \ndef perfect_str(string_num):\n    '''\n    Write a function to check whether a given string contains perfect numbers or not.\n    '''\n    if int(string_num) == sum(list(map(int,list(string_num)))):\n        return True\n    else:\n        return False\n    \ndef armstrong_num(number):\n    '''\n    Write a function to convert a decimal number to its equivalent armstrong number.\n    '''\n    number = str(number)\n    sum = 0\n    for i in number:\n        sum = sum + int(i)**3\n    if number == str(sum):\n        return True\n    else:\n        return False\n        \ndef palindrome(string):\n    '''\n    Write a function to check whether the given string is palindrome or not.\n    '''\n    if string == string[::-1]:\n        return True\n    else:\n        return False\n        \ndef prime(number):\n    '''\n    Write a function to check whether the given number is prime or not.\n    '''\n    number = int(number)\n    if number > 1:\n        for i in range(2,number):\n            if (number % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n        \ndef perfect(number):\n    '''\n    Write a function to check whether the given number is perfect or not.\n    '''\n    number = int(number)\n    sum = 0\n    for i in range(1,number):\n        if number % i == 0:\n            sum = sum + i\n    if sum == number:\n        return True\n    else:\n        return False\n        \ndef armstrong_num_list(number_list):\n    '''\n    Write a function to convert a decimal number to its equivalent armstrong number.\n    '''\n    list_no = []\n    for i in number_list:\n        if armstrong_num(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef palindrome_list(string_list):\n    '''\n    Write a function to check whether a given list contains palindrome strings or not.\n    '''\n    list_no = []\n    for i in string_list:\n        if palindrome(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef prime_list(number_list):\n    '''\n    Write a function to check whether a given list contains prime numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if prime(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef perfect_list(number_list):\n    '''\n    Write a function to check whether a given list contains perfect numbers or not.\n    '''\n    list_no = []\n    for i in number_list:\n        if perfect(i) == True:\n            list_no.append(i)\n    return list_no\n        \ndef armstrong_num_str(string_num):\n    '''\n    Write a function to convert a decimal number to its equivalent armstrong number.\n    '''\n    string_num = str(string_num)\n    sum = 0\n    for i in string_num:\n        sum = sum + int(i)**3\n    if str(sum) == string_num:\n        return True\n    else:\n        return False\n        \ndef palindrome_str(string_num):\n    '''\n    Write a function to check whether a given string contains palindrome strings or not.\n    '''\n    if string_num == string_num[::-1]:\n        return True\n    else:\n        return False\n        \ndef prime_str(string_num):\n    '''\n    Write a function to check whether a given string contains prime numbers or not.\n    '''\n    for i in range(1,len(string_num)):\n        if int(string_num[i]) > 1:\n            for j in range(2,int(string_num[i])+1):\n                if (int(string_num[i]) % j) == 0:\n                    return False\n            else:\n                return True\n        else:\n            return False\n    \ndef perfect_str(string_num):\n    '''\n    Write a function to check whether a given string contains perfect numbers or not.\n    '''\n    string_num = str(string_num)\n    if int(string_num) == sum(list(map(int,list(string_num)))):\n        return True\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    n = str(number)\n    sum_ = 0\n    for i in range(len(n)):\n        sum_ = sum_ + (int(n[i])**len(n))\n    return number == sum_"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    def armstrong(number):\n        if number==0:\n            return \"0 is an Armstrong number\"\n        \n        count = 0\n        temp = number\n        \n        while(temp):\n            count = count + (temp%10)**3\n            temp //= 10\n        \n        if number == count:\n            return \"Yes, the number is Armstrong number\"\n        else:\n            return \"No, it is not Armstrong number\"\n    \n    return armstrong(number)\n    \n    \ndef fizz_buzz_number(number):\n    '''\n    Write a function which prints the numbers divisible by 3 and 5\n    but not by 3 and 5 if they are present in the given number\n    '''\n    \n    def fizzbuzz(number):\n        if number%3 == 0:\n            print(\"Fizz\")\n        if number%5 == 0:\n            print(\"Buzz\")\n        if number%3 == 0 and number%5 == 0:\n            return \"FizzBuzz\"\n        else:\n            return number\n    \n    return fizzbuzz(number)\n    \ndef factorial_number(number):\n    '''\n    Write a function which prints the factorial of a given number\n    '''\n    \n    def fact(number):\n        if number == 0:\n            return 1\n        \n        return number * fact(number - 1)\n    \n    return fact(number)\n    \ndef word_length_number(word):\n    '''\n    Write a function which prints the length of a given string\n    '''\n    \n    def length(word):\n        return len(word)\n    \n    return length(word)\n    \ndef palindrome_number(word):\n    '''\n    Write a function which returns True if the given word is a palindrome\n    '''\n    \n    def palindrome(word):\n        if word[::1] == word[::-1]:\n            return True\n        else:\n            return False\n    \n    return palindrome(word)\n    \ndef bitwise_number(number):\n    '''\n    Write a function which prints the bitwise representation of the given number\n    '''\n    \n    def bitwise(number):\n        if number == 0:\n            return \"0\"\n        \n        temp = \"\"\n        \n        while number:\n            temp = str(number%2) + temp\n            number //= 2\n        \n        return temp\n    \n    return bitwise(number)\n    \ndef pyramid(rows):\n    '''\n    Write a function which prints a pyramid with the given number of rows\n    '''\n    \n    def pyramid(rows):\n        for i in range(rows):\n            for j in range(rows - i):\n                print(\" \", end=\"\")\n            for k in range(i+1):\n                print(\"*\", end=\"\")\n            print()\n    \n    return pyramid(rows)\n    \ndef palindrome_number(number):\n    '''\n    Write a function which returns True if the given number is a palindrome\n    '''\n    \n    def palindrome(number):\n        return str(number) == str(number)[::-1]\n    \n    return palindrome(number)\n    \ndef fibonacci(number):\n    '''\n    Write a function which returns the fibonacci series till a given number\n    '''\n    \n    def fib(number):\n        if number <= 1:\n            return number\n        \n        return fib(number - 1) + fib(number - 2)\n    \n    return fib(number)\n    \ndef largest_number(number):\n    '''\n    Write a function which returns the largest number of the given list\n    '''\n    \n    def largest_number(number):\n        number.sort(reverse = True)\n        return number[0]\n    \n    return largest_number(number)\n    \ndef factorial_number(number):\n    '''\n    Write a function which returns the factorial of the given number\n    '''\n    \n    def fact(number):\n        if number == 0:\n            return 1\n        \n        return number * fact(number - 1)\n    \n    return fact(number)\n    \ndef char_frequency_number(word):\n    '''\n    Write a function which returns the frequency of the characters in the given word\n    '''\n    \n    def char_freq(word):\n        dic = {}\n        for i in word:\n            dic.setdefault(i,0)\n            dic[i] += 1\n        return dic\n    \n    return char_freq(word)\n    \ndef diff_string_number(word1, word2):\n    '''\n    Write a function which returns the difference of the length of the strings\n    '''\n    \n    def diff(word1, word2):\n        return abs(len(word1) - len(word2))\n    \n    return diff(word1, word2)\n    \ndef is_permutation_number(word1, word2):\n    '''\n    Write a function which returns True if the given strings are permutations of each other\n    '''\n    \n    def is_per(word1, word2):\n        if word1 == word2:\n            return True\n        \n        if len(word1)!= len(word2):\n            return False\n        \n        char_freq = char_frequency_number(word1)\n        for char in char_freq:\n            if word2.count(char)!= char_freq[char]:\n                return False\n        \n        return True\n    \n    return is_per(word1, word2)\n    \ndef word_number(word):\n    '''\n    Write a function which returns the count of the number of characters of a given string\n    '''\n    \n    def word_num(word):\n        count = 0\n        for i in word:\n            count += 1\n        return count\n    \n    return word_num(word)\n    \ndef palindrome_number(number):\n    '''\n    Write a function which returns True if the given number is a palindrome\n    '''\n    \n    def palindrome(number):\n        if number == 0:\n            return True\n        \n        if number % 10 == 0:\n            return False\n        \n        return number % 10 == number // 10\n    \n    return palindrome(number)\n    \ndef leap_year_number(year):\n    '''\n    Write a function which returns True if the given year is a leap year\n    '''\n    \n    def leap(year):\n        if year % 4 == 0:\n            return True\n        \n        return False\n    \n    return leap(year)\n    \ndef to_binary(number):\n    '''\n    Write a function which returns the binary representation of the given number\n    '''\n    \n    def to_bin(number):\n        if number == 0:\n            return 0\n        \n        binary = \"\"\n        while number!= 0:\n            binary = str(number%2) + binary\n            number //= 2\n        \n        return binary\n    \n    return to_bin(number)\n    \ndef hanoi(disk, source, destination, auxiliary):\n    '''\n    Write a function which implements the Towers of Hanoi game.\n    '''\n    \n    def hanoi(disk, source, destination, auxiliary):\n        if disk == 1:\n            print(source, \"-->\", destination)\n        else:\n            hanoi(disk - 1, source, auxiliary, destination)\n            hanoi(1, source, destination, auxiliary)\n            hanoi(disk - 1, auxiliary, destination, source)\n    \n    return hanoi(disk, source, destination, auxiliary)\n    \ndef even_or_odd_number(number):\n    '''\n    Write a function which returns True if the given number is even or odd\n    '''\n    \n    def even_odd(number):\n        if number == 0:\n            return True\n        \n        return number % 2 == 0\n    \n    return even_odd(number)\n    \ndef absolute_value_number(number):\n    '''\n    Write a function which returns the absolute value of the given number\n    '''\n    \n    def abs_val(number):\n        if number < 0:\n            return number * (-1)\n        \n        return number\n    \n    return abs_val(number)\n    \ndef song_number(number):\n    '''\n    Write a function which returns the number of letters in a given song\n    '''\n    \n    def song(number):"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    sum = 0\n    num = number\n    while num > 0:\n        rem = num % 10\n        sum += (rem ** 3)\n        num = num // 10\n    if number == sum:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    digit = len(str(number))\n    sum = 0\n    tmp_number = number\n    while tmp_number > 0:\n        sum += (tmp_number % 10) ** digit\n        tmp_number //= 10\n    if number == sum:\n        return True\n    else:\n        return False\n    \ndef valid_parentheses(string):\n    '''\n    Write a function to check whether the given string is a valid parentheses.\n    '''\n    bracket = 0\n    for i in string:\n        if i == '(':\n            bracket += 1\n        elif i == ')':\n            if bracket == 0:\n                return False\n            else:\n                bracket -= 1\n    return bracket == 0\n    \ndef max_integer(arr):\n    '''\n    Write a function to find the max of an integer array\n    '''\n    max_number = -1\n    for i in arr:\n        if i > max_number:\n            max_number = i\n    return max_number\n    \ndef minimum(arr):\n    '''\n    Write a function to find the minimum of an array\n    '''\n    min_number = None\n    for i in arr:\n        if min_number is None:\n            min_number = i\n        elif i < min_number:\n            min_number = i\n    return min_number\n    \ndef maximum(arr):\n    '''\n    Write a function to find the maximum of an array\n    '''\n    max_number = None\n    for i in arr:\n        if max_number is None:\n            max_number = i\n        elif i > max_number:\n            max_number = i\n    return max_number\n    \ndef count_odd(arr):\n    '''\n    Write a function to count the number of odd numbers in an array\n    '''\n    count = 0\n    for i in arr:\n        if i % 2!= 0:\n            count += 1\n    return count\n    \ndef find_majority(arr):\n    '''\n    Write a function to find the majority element in an array\n    '''\n    count_odd_num = count_odd(arr)\n    num_arr = len(arr)\n    if count_odd_num > num_arr / 2:\n        return -1\n    else:\n        for i in arr:\n            if arr.count(i) > num_arr / 2:\n                return i\n            else:\n                return -1\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    if number == 0:\n        return False\n    # x = number\n    sum = 0\n    while number > 0:\n        digit = number % 10\n        sum = sum + digit ** 3\n        number = number // 10\n    if sum == number:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    #to_compute = number\n    #while number > 0:\n    #    sum = number % 10 + (number // 10) % 10 + (number // 100) % 10\n    #    number = number // 10\n    #    if sum!= number:\n    #        return False\n    #    else:\n    #        return True\n    return sum(int(i) ** len(str(number)) for i in str(number)) == number\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    number = str(number)\n    s = 0\n    for i in range(0, len(number)):\n        s += int(number[i]) ** len(number)\n    if s == int(number):\n        return True\n    return False\n"
    },
    {
        "number": 598,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def armstrong_number(number):\n    '''\n    Write a function to check whether the given number is armstrong or not.\n    '''\n    armstrong_number = 0\n    number = str(number)\n    for i in range(len(number)):\n        armstrong_number += int(number[i]) ** len(number)\n    if number == str(armstrong_number):\n        print(\"{} is an Armstrong number.\".format(number))\n    else:\n        print(\"{} is not an Armstrong number.\".format(number))\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    total = 0\n    count = 0\n    while count < number:\n        total += 1\n        count += 1\n    print(total)\n    print(total/count)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    pass\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    return (sum(range(1,number+1)), number / (number + 1))\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    counter = 0\n    while True:\n        if counter == number:\n            break\n        result += counter\n        counter += 1\n    result = result/number\n    return result\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    average = 0\n    n = number\n    \n    if number < 0:\n        return 'Please provide a positive integer.'\n    \n    else:\n        for i in range(n):\n            sum += i\n            average = sum / n\n        return 'The sum is:', sum, 'The average is:', average\n        \nprint(sum_average(-10))\nprint(sum_average(10))\nprint(sum_average(0))\nprint(sum_average(1))\nprint(sum_average(5))\nprint(sum_average(10.2))\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    count = 0\n    total = 0\n    while count < number:\n        total = total + count\n        count += 1\n    print(total)\n    average = total / number\n    print(average)\n    return total, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    n = 1\n    while n <= number:\n        sum = sum + n\n        n = n + 1\n    average = sum / number\n    return sum, average\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    sum = 0\n    for i in range(number):\n        sum = sum + i\n    average = sum / number\n    print('The sum is:', sum)\n    print('The average is:', average)\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    n = number\n"
    },
    {
        "number": 599,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_average(number):\n    '''\n    Write a function to find sum and average of first n natural numbers.\n    '''\n    result = 0\n    for i in range(1, number + 1):\n        result += i\n    print(result, result / number)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2) == 0 : \n        print (n, 'is even') \n    else : \n        print (n, 'is odd') \n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if (n % 2 == 0) :\n        print(\"{} is Even\".format(n))\n    else :\n        print(\"{} is Odd\".format(n))\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if(n%2==0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n % 2 == 0 :\n        print('%d is Even'%n)\n    else :\n        print('%d is Odd'%n)\nis_Even(10)\nis_Even(11)\nis_Even(2)\nis_Even(13)\nis_Even(21)\nis_Even(3)\nis_Even(11)\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    # logic to return the boolean value\n    return (n%2==0)\n    pass\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    if n%2 == 0 : \n        return True\n    else :\n        return False\nprint(is_Even(10))\nprint(is_Even(16))\nprint(is_Even(20))\nprint(is_Even(3))\nprint(is_Even(-1))\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 600,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_Even(n) : \n    '''\n    Write a python function to check whether the given number is even or not.\n    '''\n    return n%2==0\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    s = str1.lower()\n    s = s.replace(\" \", \"\")\n    s = s.replace(\".\", \"\")\n    s = s.replace(\"'\", \"\")\n    s = s.replace(\"\\\"\", \"\")\n    s = s.replace(\",\", \"\")\n    s = s.replace(\":\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\"?\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"-\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"/\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"%\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\":\",\"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\"/\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"%\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\":\",\"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\"/\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"%\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"@\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\";\", \"\")\n    s = s.replace(\":\",\"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"!\", \"\")\n    s = s.replace(\"/\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace(\"+\", \"\")\n    s = s.replace(\"=\", \"\")\n    s = s.replace(\"{\", \"\")\n    s = s.replace(\"}\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"(\", \"\")\n    s = s.replace(\")\", \"\")\n    s = s.replace(\"[\", \"\")\n    s = s.replace(\"]\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"#\", \"\")\n    s = s.replace(\"%\", \"\")\n    s = s.replace(\"$\", \"\")\n    s = s.replace(\"^\", \"\")\n    s = s.replace(\"`\", \"\")\n    s = s.replace(\"~\", \"\")\n    s = s.replace(\"|\", \"\")\n    s = s.replace(\"&\", \"\")\n    s = s.replace(\"*\", \"\")\n    s = s.replace(\"<\", \"\")\n    s = s.replace(\">\", \"\")\n    s = s.replace("
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if len(str1)==0:\n        return -1\n    else:\n        for i in range(len(str1)):\n            if str1[i]==str1[0]:\n                return i\n        else:\n            return -1\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    # loop to iterate over all the characters in the given string.\n    for i in range(0, len(str1)):\n        # if the character is found in the loop and the character\n        # is not first time, return the position and the character\n        if str1[i] in str1[:i] and str1[i] not in str1[:i+1]:\n            return str1[i], str1[i]\n    # return empty if no repetition\n    return \"\"\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    l=len(str1)\n    for i in range(0,l):\n        if str1.count(str1[i])>1:\n            return str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    char_dict = {}\n    for char in str1:\n        char_dict[char] = char_dict.get(char, 0) + 1\n    for char in char_dict:\n        if char_dict[char] > 1:\n            return char\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    d = {}\n    for i in str1:\n        if i in d:\n            return i\n        else:\n            d[i] = 0\n    return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    if str1=='':\n        return None\n    else:\n        list1=list(str1)\n        for i in range(len(list1)):\n            count=0\n            if list1[i]==list1[i-1]:\n                count=count+1\n            if count==2:\n                return list1[i-1]\n        return None\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    lst = []\n    for i in str1:\n        if i in str1[:str1.index(i)] and str1.index(i) < len(str1):\n            lst.append(i)\n    return lst[0]\n    \ndef count_vowels_in_string(str1):\n    '''\n    Write a python function to count vowels in a given string.\n    '''\n    str1 = str1.lower()\n    lst = []\n    for i in str1:\n        if i in ['a','e','i','o','u','y']:\n            lst.append(i)\n    return len(lst)\n    \ndef first_non_repeated_char(str1):\n    '''\n    Write a python function to find the first non repeated character in a given string.\n    '''\n    str1 = str1.lower()\n    for i in range(len(str1)):\n        if str1[i] not in str1[:i]:\n            return str1[i]\n        \ndef find_longest_word(str1):\n    '''\n    Write a python function to find the longest word in a string.\n    '''\n    str1 = str1.split(\" \")\n    max_l = 0\n    for i in str1:\n        if len(i) > max_l:\n            max_l = len(i)\n    for j in range(len(str1)):\n        if max_l == len(str1[j]):\n            return str1[j]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    str1=input(\"Enter the string: \")\n    ch=str1[0]\n    for i in range(1,len(str1)):\n        if ch==str1[i]:\n            return \"First repeated character: \"+ch\n        else:\n            ch=str1[i]\n"
    },
    {
        "number": 602,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_repeated_char(str1):\n    '''\n    Write a python function to find the first repeated character in a given string.\n    '''\n    \n    # first create a dictionary of the characters and their frequencies.\n    char_freq = {}\n    for char in str1:\n        char_freq[char] = char_freq.get(char, 0) + 1\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    #Convert n to a list\n    l = list(str(n))\n    \n    #Initialize a lucidity set\n    luc = set()\n    \n    #Convert each digit to a binary number\n    for i in range(len(l)):\n        luc.add(int(l[i]))\n    \n    #Convert the set to a list\n    luc = list(luc)\n    \n    #Sorting the list and casting it to a list\n    luc.sort(reverse=True)\n    \n    return luc\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for x in range(1, n):\n        sum = 0\n        for y in range(1, x):\n            if x % y == 0:\n                sum += y\n        if sum == x:\n            ludic.append(x)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    res = []\n    if n <= 0:\n        return res\n    for i in range(n+1):\n        if is_lucid(i):\n            res.append(i)\n    return res\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    for i in range(n):\n        l = []\n        for j in range(2,i):\n            if i%j == 0:\n                l.append(j)\n        if len(l) == 0:\n            ludic.append(i)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = list(range(n,0,-1))\n    for i in range(len(l)):\n        if is_lucid(l[i]):\n            l = l[:i]\n            break\n    return l\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    ludic = []\n    lucky = False\n    while not lucky:\n        x = randint(1,n)\n        if str(x) == str(x)[::-1]:\n            lucky = True\n            ludic.append(x)\n    return ludic\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    l = []\n    for i in range(n+1):\n        if 'l' in str(i) and len(str(i)) == 4:\n            l.append(i)\n    return l\nprint(get_ludic(7))\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    \n    lucids = []\n    for x in range(2, n+1):\n        if x == math.sqrt(x) ** 2:\n            continue\n        \n        lucids.append(x)\n        for i in range(2, int(math.sqrt(x))+1):\n            if x % i == 0:\n                break\n        else:\n            lucids.append(x)\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    def is_lucid(n):\n        '''\n        Does the number satisfy the condition of a lucid number?\n        '''\n        is_lucid = False\n        for i in range(2, int(n**0.5)+1):\n            if n % i == 0:\n                is_lucid = True\n                break\n        return is_lucid\n"
    },
    {
        "number": 603,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_ludic(n):\n    '''\n    Write a function to get all lucid numbers smaller than or equal to a given integer.\n    '''\n    return [i for i in range(1, n) if is_lucid(i)]\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words.reverse()\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.split(\" \")\n    s.reverse()\n    return \" \".join(s)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    str_arr = s.split()\n    for i in range(len(str_arr)):\n        str_arr[i] = str_arr[i][::-1]\n    return''.join(str_arr)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    if type(s) is not str:\n        print('Input must be a string')\n        return\n    words = s.split()\n    if len(words) == 0:\n        return ''\n    words = words[::-1]\n    return''.join(words)\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s = s.strip()\n    words = s.split()\n    return''.join(words[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return \" \".join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(s.split()[::-1])\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    return''.join(reversed(s.split()))\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    words = s.split()\n    words = words[::-1]\n    s = \" \".join(words)\n    return s\n"
    },
    {
        "number": 604,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_words(s):\n    '''\n    Write a function to reverse words seperated by spaces in a given string.\n    '''\n    s_words = s.split(' ')\n    new_s =''.join(s_words[::-1])\n    return new_s\nprint(reverse_words(\"the quick brown fox jumps over the lazy dog\"))\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num == 1:\n        return False\n    for i in range(2, int(num**0.5)+1):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n    "
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num<2:\n        return False\n    i = 2\n    while i*i<=num:\n        if num%i==0:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    i=2\n    while num!= 1 and i < num:\n        if num%i == 0:\n            return False\n        i+=1\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                return False\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if num % i == 0:\n                print(\"{} is not a prime number\".format(num))\n                break\n        else:\n            print(\"{} is a prime number\".format(num))\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n    \nprint(prime_num(3))\nprint(prime_num(0))\nprint(prime_num(1))\nprint(prime_num(2))\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num <= 1:\n        return False\n    for i in range(2, num):\n        if num % i == 0:\n            return False\n    return True\n"
    },
    {
        "number": 605,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def prime_num(num):\n    '''\n    Write a function to check if the given integer is a prime number.\n    '''\n    if num > 1:\n        for i in range(2, num):\n            if (num % i) == 0:\n                return False\n                break\n        else:\n            return True\n    else:\n        return False\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    radian = degree * (math.pi / 180)\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_1(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_2(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_3(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_4(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_5(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_6(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_7(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_8(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_9(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_10(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_11(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_12(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_13(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_14(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_15(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_16(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_17(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_18(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_19(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_20(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_21(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_22(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_23(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_24(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_25(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_26(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_27(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_28(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_29(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_30(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_31(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_32(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_33(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_34(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_35(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_36(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_37(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_38(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_39(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_40(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_41(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_42(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_43(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*math.pi/180\ndef radian_degree_scalar_44(degree):\n    '''\n    Write a function to convert degrees to ra"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    # if degree<0:\n    #     degree = degree*-1\n    #     degree = degree%360\n    # else:\n    #     degree = degree%360\n    degree = degree *math.pi/180\n    return degree\ndef degree_radian(radian):\n    '''\n    Write a function to convert radians to degrees.\n    '''\n    # if radian<0:\n    #     radian = radian*-1\n    #     radian = radian%math.pi\n    # else:\n    #     radian = radian%math.pi\n    radian = radian*180/math.pi\n    return radian\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree*(math.pi/180)\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    rad = degree*math.pi/180.0\n    return rad\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180.0\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return degree * math.pi / 180\n"
    },
    {
        "number": 606,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef radian_degree(degree):\n    '''\n    Write a function to convert degrees to radians.\n    '''\n    return math.pi * degree / 180\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    match = re.search(pattern, text)\n    if match:\n        return match.group(), match.start(), match.end()\n    return None, None, None\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    m = re.search(pattern, text)\n    return m.group(0), m.span()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    pattern_regex = re.compile(pattern)\n    match = pattern_regex.search(text)\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    # Your code here\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    str_lit = re.search(pattern,text)\n    return str_lit.group(0), str_lit.start(), str_lit.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #----Example:----\n    # text = 'aefg,jkl;mno'\n    # pattern = r'[a-zA-Z]'\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    #text = '\"GOOG\"'\n    #pattern = \"GOOG\"\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    matches = re.finditer(pattern, text)\n    for match in matches:\n        return match.group(1), match.start(), match.end()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    if not text or not pattern:\n        return None\n    regex = re.compile(pattern)\n    for m in re.finditer(regex, text):\n        return m.group()\n"
    },
    {
        "number": 607,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\n\ndef find_literals(text, pattern):\n    '''\n    Write a function to search a string for a regex pattern. The function should return the matching subtring, a start index and an end index.\n    '''\n    \n    result = re.search(pattern, text)\n    print(result)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    res=1\n    for i in range(2,n+1):\n        res=res*i\n    return res\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n = int(n)\n    sum = 1\n    for i in range(1,n+1):\n        sum = sum * (i + 1)\n    return(sum)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return 0 if n == 0 else 1 + bell_Number(n-1)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    n = n+1\n    if(n == 1): \n        return 1\n    else: \n        return (1 + 2*n*bell_Number(n-2))/n \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n * (n+1)) / 2\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    return ((n*(n+1))/2) \n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if n==0:\n        return 1\n    return (n*(n-1)*bell_Number(n-1))//2\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    \n    # This method is not suitable for large values of n, due to exponential complexity.\n    # See https://www.youtube.com/watch?v=F3_sVtRvCog&ab_channel=LearnPython\n    \n    # Solution 1\n    '''\n    n = 6\n    r = 1\n    bellNumber = 0\n    while r <= n:\n        bellNumber += r * (r+1) // 2\n        r += 1\n    print(bellNumber)\n    '''\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    def bell(n):\n        num = 0\n        for i in range(1,n):\n            num += i\n        return num\n    return bell(n)\n"
    },
    {
        "number": 608,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def bell_Number(n): \n    '''\n    Write a python function to find nth bell number.\n    '''\n    if(n==0):\n        return 1\n    if(n==1):\n        return 2\n    return bell_Number(n-1) + bell_Number(n-2) + bell_Number(n-3)\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    # Write your code here\n    return list1[:k]+list1[k+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2=[]\n    list2.append(list1.pop(L))\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list1.pop(L)\n    return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:L] + list1[L+1:]\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)):\n        if i == L:\n            continue\n        else:\n            list2.append(list1[i])\n    return list2\n    \n    \nlist1 = [1,2,3,4,5,6,7]\nL = 3\nprint(remove_kth_element(list1, L))\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1[:k-1] + list1[k:]\n    \ndef merge_lists(list1, list2):\n    '''\n    Write a python function which takes two sorted lists, merges them into one sorted list.\n    '''\n    merged_list = []\n    i, j = 0, 0\n    while i < len(list1) and j < len(list2):\n        if list1[i] < list2[j]:\n            merged_list.append(list1[i])\n            i += 1\n        else:\n            merged_list.append(list2[j])\n            j += 1\n    while i < len(list1):\n        merged_list.append(list1[i])\n        i += 1\n    while j < len(list2):\n        merged_list.append(list2[j])\n        j += 1\n    return merged_list\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    list2 = []\n    for i in range(len(list1)-1):\n        list2.append(list1[i])\n    return list2\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    if len(list1) < 1:\n        return []\n    else:\n        list1.remove(list1[L])\n        return list1\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    '''\n    Examples:\n    Input:     list1 = [\"a\", \"b\", \"c\", \"d\", \"e\"], k = 3\n    Output:     [\"a\", \"b\", \"c\"]\n    '''\n    '''\n    Explanation:\n    Return the sublist 'k'th element. \n    '''\n    '''\n    [10, 20, 30, 40]\n    k = 2\n    [10, 20, 30]\n    '''\n    # initialize variables\n    start = 0\n    end = L\n    # initialize count to 0\n    count = 0\n    # initialize result\n    result = []\n    # initialize i\n    i = 0\n    # initialize j\n    j = L - 1\n    # initialize while loop condition\n    while i < end:\n        # if the count is 0\n        if count == 0:\n            # swap the start and end\n            temp = start\n            start = end\n            end = temp\n            # increment count\n            count = count + 1\n            # increment i\n            i = i + 1\n        # if the count is greater than 0\n        else:\n            # increment i\n            i = i + 1\n    # initialize end\n    end = j\n    # initialize result\n    result = list1[start:end]\n    # return result\n    return result\n"
    },
    {
        "number": 610,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_kth_element(list1, L):\n    '''\n    Write a python function which takes a list and returns a list with the same elements, but the k'th element removed.\n    '''\n    return list1.pop(L)\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    \n    if N == 1:\n        return max(test_list[0])\n    \n    else:\n        return max_of_nth(transpose(test_list), N-1)\n        \n    \ndef max_of_nth_row(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of then'th row.\n    '''\n    \n    if N == 1:\n        return max(test_list[0])\n    \n    else:\n        return max(test_list[N-1])\n        \n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    #Return the max of then'th column\n    return max([row[N] for row in test_list])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    if type(test_list) is not list or len(test_list)==0:\n        raise ValueError(\"Wrong input\")\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    result = 0\n    for col_index in range(len(test_list)):\n        result = max(result, max(test_list[col_index]))\n    return result\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(map(max, map(list, test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max = 0\n    for i in range(len(test_list)):\n        if max < test_list[i][N]:\n            max = test_list[i][N]\n    return max\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[n][N] for n in range(len(test_list)))\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    return max(test_list[N-1])\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    max_of_column = []\n    for x in range(len(test_list)):\n        max_of_column.append(max(test_list[x]))\n    return max_of_column[N-1]\n"
    },
    {
        "number": 611,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_of_nth(test_list, N):\n    '''\n    Write a function which given a matrix represented as a list of lists returns the max of the n'th column.\n    '''\n    test_matrix = test_list\n    max_index = 0\n    for row in range(0, len(test_matrix)):\n        if max(test_matrix[row]) > test_matrix[row][max_index]:\n            max_index = row\n    nth_column = test_matrix[max_index][:N]\n    return nth_column\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    n = len(lst)\n    for i in range(1,n):\n        low = 0\n        high = i-1\n        while low < high:\n            if lst[low] > lst[high]:\n                temp = lst[low]\n                lst[low] = lst[high]\n                lst[high] = temp\n            low+=1\n            high-=1\n    return lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst)\n    return lst[0], lst[1]\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_lst = []\n    for i in range(len(lst)):\n        new_lst.append([])\n        new_lst[i].append(lst[i][0])\n        new_lst[i].append(lst[i][1])\n    return new_lst\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    result = []\n    i = 0\n    while i < len(lst):\n        result.append([lst[i][0], lst[i][1]])\n        i += 1\n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    return ([a[0] for a in lst], [a[1] for a in lst])\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    # Write a Python program which sorts (ascending and descending) a list of elements using the selection sort algorithm. \n    s = 0\n    e = len(lst)-1\n    while s < e:\n        if lst[s] > lst[e]:\n            temp = lst[s]\n            lst[s] = lst[e]\n            lst[e] = temp\n        s += 1\n        e -= 1\n    return lst\nprint(merge([[1,2],[3,4],[5,6]])"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    lst = sorted(lst, key = lambda x:x[1], reverse = True)\n    merged = []\n    for i in lst:\n        if merged and merged[-1][1] == i[0]:\n            merged[-1].append(i[1])\n        else:\n            merged.append(i)\n    merged.sort(key = lambda x: x[1])\n    return merged\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    \n    # Initialize new list\n    result = []\n    \n    # Sort the sublists in the given list\n    lst.sort()\n    \n    # Iterate over the sorted list\n    for el in lst:\n        result.append(el[0])\n        result.append(el[1])\n        \n    return result\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    new_list = []\n    for i in range(0, len(lst)):\n        new_list.append(lst[i][0])\n        new_list.append(lst[i][1])\n    return new_list\n"
    },
    {
        "number": 612,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def merge(lst):  \n    '''\n    Write a python function which takes a list of lists, where each sublist has two elements, and returns a list of two lists where the first list has the first element of each sublist and the second one has the second.\n    '''\n    res = []\n    for i in range(len(lst)):\n        res.append([lst[i][0], lst[i][1]])\n    return res\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    cummulative_sum = 0\n    for i in range(0,len(test_list)):\n        cummulative_sum += test_list[i]\n    return cummulative_sum\nprint(cummulative_sum((1,2,3,4,5,6,7,8,9,10)))\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = []\n    if len(test_list) > 0:\n        sum_list.append(test_list[0])\n        for i in range(1,len(test_list)):\n            sum_list.append(sum_list[i-1] + test_list[i])\n    return sum_list\nprint(cummulative_sum([1,2,3])"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    sum_list = 0\n    for i in test_list:\n        sum_list += i\n    return sum_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    \n    for i in range(len(test_list)-1):\n        sum = 0\n        if test_list[i+1] >= test_list[i]:\n            sum += test_list[i+1]\n        else:\n            sum += test_list[i]\n        test_list[i] = sum\n    return test_list\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for num in test_list:\n        total += num\n    print(total)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total = 0\n    for i in range(len(test_list)):\n        total += test_list[i]\n    return total\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    total_sum = 0\n    for i in range(len(test_list)):\n        total_sum += test_list[i]\n    return total_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    # Your code here\n    #SOLUTION \n    cum_sum = 0\n    for i in range(len(test_list)):\n        cum_sum += test_list[i]\n    return cum_sum\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    for i in range(1, len(test_list)):\n        test_list[i] += test_list[i - 1]\n    print(test_list)\n"
    },
    {
        "number": 614,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def cummulative_sum(test_list):\n    '''\n    Write a function to find the cumulative sum of all the values that are present in the given tuple list.\n    '''\n    result = 0\n    for x in test_list:\n        result += x\n    return result\n    # your code\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_of_tuple = tuple(tuple(e) for e in nums)\n    return tuple(sum(e) / len(e) for e in tuple_of_tuple)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    x = []\n    for i in nums:\n        x += i\n    return average_tuple_helper(x)\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n    \nprint(average_tuple([(1, 2), (3, 4), (5, 6)]))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return tuple([sum(i)/len(i) for i in nums])\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return (sum(tuple(t))/len(tuple(t)))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_avg = []\n    for i in range(len(nums)):\n        tuple_avg.append(sum(nums[i])/len(nums[i]))\n    return tuple_avg\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    tuple_of_tuples = list(map(lambda x: (tuple(x), sum(x)), nums))\n    average_tuple_of_tuples = list(map(lambda x: x[0][1] / x[1], tuple_of_tuples))\n    return average_tuple_of_tuples\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    return(list(map(lambda t:sum(t)/len(t),nums)))\n"
    },
    {
        "number": 615,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def average_tuple(nums):\n    '''\n    Write a function which takes a tuple of tuples and returns the average value for each tuple as a list.\n    '''\n    #def average_tuple(nums):\n    #return (sum(x) / len(x) for x in nums)\n    return tuple(map(lambda x: sum(x)/len(x), nums))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    #your code here\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda i: i % test_tup2, test_tup1))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    assert len(test_tup1) == len(test_tup2), \"Tuple lengths must be the same\"\n    return tuple(x % y for x, y in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    return tuple(map(lambda x, y: x % y, test_tup1, test_tup2))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    # YOUR CODE HERE\n    tup1 = []\n    tup2 = []\n    for i in range(len(test_tup1)):\n        tup1.append(test_tup1[i] % test_tup2[i])\n    return tup1\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    pass\n    return(tuple(tup1 % tup2 for tup1, tup2 in zip(test_tup1, test_tup2)))\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x%y, test_tup1, test_tup2))\n    \n    \n    \n    \n    \n    \n    \ndef tuple_sum(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise sum.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x+y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_product(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise product.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x*y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_division(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise division.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x/y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_substraction(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise substraction.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x-y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_soustraction(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise substraction.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x-y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_multiplication(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise multiplication.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x*y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_power(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise exponentiation.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x**y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_quotient(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise quotient.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x/y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_remainder(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise remainder.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x%y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_bitwise_or(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise bitwise or.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x|y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_bitwise_and(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise bitwise and.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x&y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_bitwise_xor(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise bitwise xor.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x^y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_logical_and(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise logical and.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x and y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_logical_or(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise logical or.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x or y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_logical_not(test_tup1):\n    '''\n    Write a function which takes a single element tuple and performs the element wise logical not.\n    '''\n    \n    return tuple(map(lambda x: not x, test_tup1))\n    \n    \n    \ndef tuple_negation(test_tup1):\n    '''\n    Write a function which takes a single element tuple and performs the element wise negation.\n    '''\n    \n    return tuple(map(lambda x: -x, test_tup1))\n    \n    \n    \ndef tuple_bitwise_not(test_tup1):\n    '''\n    Write a function which takes a single element tuple and performs the element wise bitwise not.\n    '''\n    \n    return tuple(map(lambda x: ~x, test_tup1))\n    \n    \n    \ndef tuple_invert(test_tup1):\n    '''\n    Write a function which takes a single element tuple and performs the element wise bitwise not.\n    '''\n    \n    return tuple(map(lambda x: ~x, test_tup1))\n    \n    \n    \ndef tuple_comparison_lt(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise comparison less than.\n    '''\n    \n    assert len(test_tup1) == len(test_tup2)\n    \n    return tuple(map(lambda x, y: x<y, test_tup1, test_tup2))\n    \n    \n    \ndef tuple_comparison_gt(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length an"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    out_tup = ()\n    for i in range(0, len(test_tup1)):\n        out_tup = out_tup + (test_tup1[i] % test_tup2[i], )\n    return out_tup\n"
    },
    {
        "number": 616,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_modulo(test_tup1, test_tup2):\n    '''\n    Write a function which takes two tuples of the same length and performs the element wise modulo.\n    '''\n    test_tup3 = test_tup1 % test_tup2\n    return test_tup3\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    count = 0\n    if steps > d:\n        count += 1\n        for i in range(1, d):\n            if steps > i:\n                count += 1\n    elif steps < d:\n        count += 1\n        for i in range(d, steps+1):\n            if steps > i:\n                count += 1\n    return count\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 0:\n        return 0\n    \n    n = len(steps)\n    steps_arr = [0] * n\n    for i in range(n):\n        steps_arr[i] = steps[i]\n    steps_arr.sort()\n    \n    min_steps = []\n    for i in range(n):\n        min_steps.append(steps_arr[i])\n        min_steps.append(steps_arr[i+1])\n    min_steps.sort()\n    \n    count = 0\n    steps_left = 0\n    for i in range(n):\n        if d == min_steps[i]:\n            steps_left = steps_left - 1\n        if steps_left == 0:\n            count = count + 1\n            steps_left = steps_left + 1\n    return count"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps==0 or steps==1: return steps\n    if steps<d: return -1\n    #steps-1 because we are jumping 1 step at a time.\n    return min(min_Jumps(steps-1,d)+1, min_Jumps(steps-2,d))\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    J = 0\n    steps = steps - 1\n    while steps > 0:\n        if steps - 1 >= (d-1):\n            steps = steps - 1\n            J += 1\n        else:\n            steps = steps - 1\n    return J\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def path_to_origin(x, y):\n        if x == 0 and y == 0:\n            return False\n        else:\n            return (x - 1, y) in path_dict or (x, y - 1) in path_dict\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    x_pos = 0\n    jumps = 0\n    while x_pos <= steps:\n        if d <= abs(x_pos - steps):\n            return jumps\n        else:\n            if x_pos == steps:\n                jumps += 1\n            elif x_pos == d:\n                return jumps\n            elif x_pos < d:\n                jumps += 1\n                x_pos += 1\n            else:\n                x_pos = x_pos - d\n                jumps += 1\n                x_pos += 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    # Initialization of value. \n    arr = [[0 for i in range(steps + 1)] for j in range(steps + 1)] \n    for i in range(1, steps + 1): \n        arr[i][1] = 1\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if steps == 1:\n        return True\n    if steps < 0 or steps > d:\n        return False\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    def helper(n, pos):\n        if pos == n:\n            return 1\n        else:\n            count = 0\n            for i in range(pos + 1, n + 1):\n                if abs(d[pos] - d[i]) <= 1:\n                    count += helper(n, i)\n            return count\n    return helper(steps + 1, 0)\n"
    },
    {
        "number": 617,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_Jumps(steps, d): \n    '''\n    Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.\n    '''\n    if(steps == 0):\n        return 0\n    if(steps == 1):\n        return 1\n    jumps = 2\n    if(d > 0):\n        for i in range(1, steps):\n            if(i*d >= steps):\n                jumps += 1\n            else:\n                break\n    else:\n        for i in range(1, steps):\n            if((d*i) >= steps):\n                jumps += 1\n            else:\n                break\n    return jumps\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1)>len(nums2):\n        nums1,nums2=nums2,nums1\n    total=0\n    index=0\n    while index<len(nums1):\n        total=total+nums1[index]*nums2[index]\n        index=index+1\n    return total\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    return [[x / y] for x,y in zip(nums1,nums2)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) < len(nums2):\n        return [i/j for i,j in zip(nums1,nums2)]\n    else:\n        return [i/j for i,j in zip(nums2,nums1)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    x=[]\n    y=[]\n    n=len(nums1)\n    m=len(nums2)\n    if n!=m:\n        print(\"list length does not match\")\n        return\n    else:\n        for i in range(n):\n            x.append(nums1[i]/nums2[i])\n            y.append(nums2[i]/nums2[i])\n        return x,y\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    n1 = len(nums1)\n    n2 = len(nums2)\n    i = 0\n    j = 0\n    k = 0\n    while i<n1 and j<n2:\n        if nums1[i] == nums2[j]:\n            nums1[k] = nums1[i]\n            i += 1\n            j += 1\n            k += 1\n        elif nums1[i] > nums2[j]:\n            j += 1\n        else:\n            i += 1\n    return nums1[:k] + nums2[:j]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    res = []\n    for i in range(len(nums1)):\n        res.append(nums1[i]//nums2[i])\n    return res\n    #return nums1[i] // nums2[i]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    if len(nums1) > len(nums2):\n        long_list = nums1\n        short_list = nums2\n    else:\n        long_list = nums2\n        short_list = nums1\n    return [a/b for a,b in zip(long_list, short_list)]\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    # get length\n    l1 = len(nums1)\n    l2 = len(nums2)\n    #check length\n    if l1 < l2:\n        return nums2,nums1\n    elif l1 > l2:\n        return nums1,nums2\n    else:\n        # first list is shorter\n        new_list = []\n        for i in range(l2):\n            #num1\n            num1 = nums1[i]\n            num2 = nums2[i]\n            #num2\n            if num1 == None:\n                num1 = 0\n            if num2 == None:\n                num2 = 0\n            new_list.append(num1/num2)\n        return new_list\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    result = []\n    for i in range(len(nums1)):\n        result.append(nums1[i]/nums2[i])\n    return result\n"
    },
    {
        "number": 618,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def div_list(nums1,nums2):\n    '''\n    Write a function to divide two lists element wise.\n    '''\n    for i in range(0,len(nums1)):\n        nums1[i]=nums1[i]/nums2[i]\n    return nums1\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # this is a list comprehension\n    test_str_list = [x for x in test_str]\n    # print(test_str_list)\n    for i in range(len(test_str_list)):\n        if str(test_str_list[i]).isnumeric():\n            test_str_list[i], test_str_list[i+1] = test_str_list[i+1], test_str_list[i]\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # Solved using two loops\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    print('move_num')\n    while True:\n        if test_str.find('0') > -1:\n            break\n        if test_str.find('1') > -1:\n            break\n        if test_str.find('2') > -1:\n            break\n        if test_str.find('3') > -1:\n            break\n        if test_str.find('4') > -1:\n            break\n        if test_str.find('5') > -1:\n            break\n        if test_str.find('6') > -1:\n            break\n        if test_str.find('7') > -1:\n            break\n        if test_str.find('8') > -1:\n            break\n        if test_str.find('9') > -1:\n            break\n        if test_str.find('a') > -1:\n            break\n        if test_str.find('b') > -1:\n            break\n        if test_str.find('c') > -1:\n            break\n        if test_str.find('d') > -1:\n            break\n        if test_str.find('e') > -1:\n            break\n        if test_str.find('f') > -1:\n            break\n        if test_str.find('g') > -1:\n            break\n        if test_str.find('h') > -1:\n            break\n        if test_str.find('i') > -1:\n            break\n        if test_str.find('j') > -1:\n            break\n        if test_str.find('k') > -1:\n            break\n        if test_str.find('l') > -1:\n            break\n        if test_str.find('m') > -1:\n            break\n        if test_str.find('n') > -1:\n            break\n        if test_str.find('o') > -1:\n            break\n        if test_str.find('p') > -1:\n            break\n        if test_str.find('q') > -1:\n            break\n        if test_str.find('r') > -1:\n            break\n        if test_str.find('s') > -1:\n            break\n        if test_str.find('t') > -1:\n            break\n        if test_str.find('u') > -1:\n            break\n        if test_str.find('v') > -1:\n            break\n        if test_str.find('w') > -1:\n            break\n        if test_str.find('x') > -1:\n            break\n        if test_str.find('y') > -1:\n            break\n        if test_str.find('z') > -1:\n            break\n        test_str = test_str[1:] + test_str[0]\n    return test_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if not test_str:\n        return test_str\n    i = 0\n    num = ''\n    s = test_str\n    while s[i] not in num:\n        if s[i].isdigit():\n            num += s[i]\n        i += 1\n    while s[i] not in num:\n        num += s[i]\n        i += 1\n    s = s[i:] + s[:i]\n    return s\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    str = test_str.split()\n    for i in range(len(str)):\n        for j in range(i,len(str)):\n            if str[i].isdigit() and str[j].isdigit():\n                str[i],str[j] = str[j],str[i]\n    return''.join(str)\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    l = []\n    for i in test_str:\n        if i.isdigit():\n            l.append(i)\n    while '' in l:\n        l.remove('')\n    return ''.join(l) + test_str[0]\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    # if test_str.isdigit():\n    #     return \" \" + test_str\n    # else:\n    #     return test_str\n    res = \"\"\n    for i in range(len(test_str)):\n        if not test_str[i].isdigit():\n            res = res + test_str[i]\n        else:\n            res = res + test_str[i] * int(test_str[i])\n    return res\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    print(\"\\n\")\n    move_num = \"1,2,3,4,5,6,7,8,9\"\n    a = test_str.split(',')\n    a[:] = a[len(a)-1:] + a[:len(a)-1]\n    res = ','.join(a)\n    print(res)\n    print(\"\\n\")\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    res_str = \"\"\n    for i in range(len(test_str)):\n        if test_str[i].isdigit():\n            res_str += test_str[i]\n    while len(res_str) < len(test_str):\n        res_str += test_str[len(res_str)]\n    return res_str\n"
    },
    {
        "number": 619,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_num(test_str):\n    '''\n    Write a function to move all the numbers to the end of the given string.\n    '''\n    if len(test_str) < 2:\n        return test_str\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    # # Method 1\n    # def largest_subset_m1(a):\n    #     a = sorted(a)\n    #     largest = set(a)\n    #     i = 0\n    #     while i < len(a)-1:\n    #         j = i + 1\n    #         while j < len(a):\n    #             if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n    #                 largest.add(a[j])\n    #             j += 1\n    #         i += 1\n    #     largest = list(largest)\n    #     return len(largest)\n    # # Method 2\n    # def largest_subset_m2(a):\n    #     if len(a) == 1:\n    #         return 1\n    #     a = sorted(a)\n    #     largest = set(a)\n    #     i = 0\n    #     while i < len(a)-1:\n    #         j = i + 1\n    #         while j < len(a):\n    #             if a[i] % a[j] == 0 and a[j] % a[i] == 0:\n    #                 largest.add(a[j])\n    #             j += 1\n    #         i += 1\n    #     largest = list(largest)\n    #     return len(largest)\n    # Method 3\n    def largest_subset_m3(a):\n        a = sorted(a)\n        n = len(a)\n        dp = [[0]*n for i in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = dp[i][j-1] + 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][-1]\n    # Method 4\n    def largest_subset_m4(a):\n        a = sorted(a)\n        n = len(a)\n        dp = [[0]*n for i in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = dp[i][j-1] + 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][-1]\n    # Method 5\n    def largest_subset_m5(a):\n        a = sorted(a)\n        n = len(a)\n        dp = [[0]*n for i in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = dp[i][j-1] + 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][-1]\n    # Method 6\n    def largest_subset_m6(a):\n        a = sorted(a)\n        n = len(a)\n        dp = [[0]*n for i in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = dp[i][j-1] + 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][-1]\n    # Method 7\n    def largest_subset_m7(a):\n        a = sorted(a)\n        n = len(a)\n        dp = [[0]*n for i in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = dp[i][j-1] + 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][-1]\n    # Method 8\n    def largest_subset_m8(a):\n        a = sorted(a)\n        n = len(a)\n        dp = [[0]*n for i in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = dp[i][j-1] + 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][-1]\n    # Method 9\n    def largest_subset_m9(a):\n        a = sorted(a)\n        n = len(a)\n        dp = [[0]*n for i in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = dp[i][j-1] + 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][-1]\n    # Method 10\n    def largest_subset_m10(a):\n        a = sorted(a)\n        n = len(a)\n        dp = [[0]*n for i in range(n)]\n        for i in range(n):\n            dp[i][i] = 1\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = dp[i][j-1] + 1\n        for i in range(n-1, -1, -1):\n            for j in range(i+1, n):\n                if a[i] % a[j] == 0:\n                    dp[i][j] = max(dp[i+1][j], dp[i][j-1])\n        return dp[0][-1]\n    # Method 11\n    def largest_subset_m11(a):\n        a = sorted(a)\n        n = len(a)\n        dp = [[0]*n for i i"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    if len(a) == 0:\n        return 0\n    else:\n        #1. sort the input array\n        sorted_list = sorted(a)\n        #2. create a set of the numbers and get the length\n        unique_set = set(sorted_list)\n        length = len(unique_set)\n        #3. if length is odd: return the number\n        if length % 2 == 1:\n            return length\n        else:\n            #4. if length is even: return the number\n            return length // 2\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a = sorted(a)\n    n = len(a)\n    curr_len = 1\n    best_len = 1\n    index = 1\n    while index < n:\n        if a[index] % a[index - 1] == 0:\n            curr_len += 1\n        else:\n            curr_len = 1\n        if curr_len > best_len:\n            best_len = curr_len\n        index += 1\n    return best_len\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    N = len(a)\n    largest_subset = 0\n    table = [[0 for x in range(N)] for y in range(N)]\n    for i in range(N):\n        for j in range(i+1,N):\n            if(a[i]%a[j]==0):\n                table[i][j] = 1\n                table[j][i] = 1\n    for i in range(N):\n        if table[i][i] == 1:\n            largest_subset = max(largest_subset,i+1)\n    return largest_subset\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort()\n    d = {}\n    d[0] = 0\n    largest_subset = 0\n    largest_subset_size = 0\n    i = 0\n    while i < len(a):\n        if a[i] in d.keys():\n            d[a[i]] += 1\n        else:\n            d[a[i]] = 1\n        i += 1\n        if d[a[i]] == 1:\n            largest_subset = a[i]\n            largest_subset_size = d[a[i]]\n        if d[a[i]] > largest_subset_size:\n            largest_subset = a[i]\n            largest_subset_size = d[a[i]]\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    n = len(a)\n    dp = [[False for _ in range(n)] for _ in range(n)]\n    if n == 0 or a == None:\n        return 0\n    max_len = 1\n    for i in range(n):\n        dp[i][i] = True\n        if a[i] == 0:\n            max_len = 1\n    for i in range(n):\n        for j in range(i):\n            if (a[j] % a[i] == 0 and dp[i][j] == False):\n                dp[i][j] = True\n                max_len = max(max_len, 2)\n    return max_len\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    a.sort(reverse=True)\n    for i in range(len(a)):\n        if i == 0:\n            print(a[:i+1])\n        else:\n            if a[i] % a[i-1] == 0:\n                print(a[i-1:i+1])\n                return\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    \n    # Write your code below\n    \n    if len(a) == 1:\n        return a\n    \n    else:\n        max = 0\n        \n        for i in range(len(a)):\n            for j in range(i+1, len(a)):\n                if (j - i) % a[i] == 0 and (j - i) % a[j] == 0:\n                    if (j - i) > max:\n                        max = (j - i)\n        \n        return max\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    from fractions import gcd\n    n = len(a)\n    a.sort()\n    start = 0\n    end = n-1\n    s = 0\n    def largest_subset_util(start, end, s):\n        if end < start:\n            return 0\n        if start == end:\n            return 1\n        if s == 1:\n            return 1\n        res = 0\n        for i in range(start, end+1):\n            temp = gcd(a[start], a[i])\n            if temp > 1:\n                res = max(res, largest_subset_util(start, i-1, s-1) + largest_subset_util(i+1, end, s))\n        if res == 0:\n            res = largest_subset_util(start, end-1, s)\n        return res\n    return largest_subset_util(start, end, s)\n"
    },
    {
        "number": 620,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def largest_subset(a):\n    '''\n    Write a function to find the size of the largest subset of a list of numbers so that every pair is divisible.\n    '''\n    import heapq\n    subsets = []\n    heapq.heapify(a)\n    while len(a) > 1:\n        first, second = heapq.heappop(a), heapq.heappop(a)\n        new_set = set()\n        new_set.add(first)\n        new_set.add(second)\n        for i in range(first, second + 1):\n            heapq.heappush(a, i)\n        subsets.append(new_set)\n    return subsets\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr1 = sorted(arr1)\n    arr2 = sorted(arr2)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    l = len(arr1)\n    if l == 1:\n        return arr1[0]\n    elif l == 2:\n        return (arr1[0] + arr1[1])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = []\n    for i in range(n):\n        arr.append(arr1[i] + arr2[i])\n    arr.sort()\n    return (arr[n//2])\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    len_list1 = len(arr1)\n    len_list2 = len(arr2)\n    if len_list1 == len_list2:\n        return get_median_of_two_sorted_arrays(arr1, arr2, len_list1)\n    else:\n        raise Exception(\"length of lists not the same\")\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    if n == 0:\n        return\n    a = arr1\n    b = arr2\n    s = 0\n    e = n-1\n    if (n & 1) == 0:\n        e = n//2\n    else:\n        e = (n-1)//2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    print('arr1:', arr1)\n    print('arr2:', arr2)\n    print('n:', n)\n    if n == 1:\n        if len(arr1) > len(arr2):\n            return arr1[0]\n        else:\n            return arr2[0]\n    m = n // 2\n    if len(arr1) > len(arr2):\n        return get_median(arr1[0:m], arr2, m)\n    elif len(arr2) > len(arr1):\n        return get_median(arr1, arr2[0:m], m)\n    else:\n        if arr1[m] < arr2[m]:\n            return get_median(arr1[0:m], arr2, m)\n        else:\n            return get_median(arr1, arr2[0:m], m)\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    arr = arr1 + arr2\n    arr.sort()\n    return arr[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    med = 0\n    i = 0\n    j = 0\n    while i <= n//2 and j <= n//2:\n        if arr1[i] <= arr2[j]:\n            med += 1\n            i += 1\n        else:\n            j += 1\n    return arr1[i] if med == 0 else (arr1[i]+arr2[j])/2\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    new_arr = arr1 + arr2\n    new_arr.sort()\n    if n % 2 == 0:\n        return (new_arr[n//2] + new_arr[n//2 - 1]) / 2\n    return new_arr[n//2]\n"
    },
    {
        "number": 622,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_median(arr1, arr2, n):\n    '''\n    Write a function to find the median of two sorted lists of same size.\n    '''\n    return sorted(arr1 + arr2)[n // 2]\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    for i in range(n):\n        nums *= nums\n    return nums\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    def power(num):\n        return num ** n\n    return map(power,nums)\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for i in range(len(nums)):\n        res.append(n**i)\n    return res\n    "
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    nums_power = []\n    for i in range(len(nums)):\n        nums_power.append(n**i)\n    return nums_power\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    return list(map(lambda x: x**n, nums))\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    if n==0:\n        return []\n    if n==1:\n        return nums\n    return list(map(lambda x:x**n,nums))\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    x = 1\n    for i in range(n):\n        x *= nums[i]\n    return x\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    res = []\n    for num in nums:\n        res.append(num**n)\n    return res\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    result = []\n    for i in range(len(nums)):\n        result.append(nums[i] ** n)\n    return result\n"
    },
    {
        "number": 623,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def nth_nums(nums,n):\n    '''\n    Write a function to compute the n-th power of each number in a list.\n    '''\n    #n_pow_nums = []\n    #for i in range(len(nums)):\n    #    n_pow_nums.append(nums[i]**n)\n    #return n_pow_nums\n    return [num**n for num in nums]\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = ''\n    for character in string:\n        if character == character.upper():\n            new_string += character\n        else:\n            new_string += character.upper()\n    return new_string\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    # Concatenating 2 strings\n    # string = \"Hello\" + \"World\"\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = ''\n    for char in string:\n        if char.isupper():\n            new_string += char.upper()\n        else:\n            new_string += char\n    return new_string\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    new_string = ''\n    for i in string:\n        if i =='':\n            new_string +=''\n        elif i.isupper():\n            new_string += i.upper()\n        else:\n            new_string += i\n    return new_string\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    upper = string.upper()\n    print(upper)\n    return upper\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    return string.upper()\n"
    },
    {
        "number": 624,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_upper(string):\n    '''\n    Write a python function to convert a given string to uppercase.\n    '''\n    if not string:\n        return \"\"\n    return string.upper()\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    a = newList[0]\n    newList[0] = newList[len(newList)-1]\n    newList[len(newList)-1] = a\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if len(newList)<2:\n        return newList\n    else:\n        newList[0],newList[len(newList)-1]=newList[len(newList)-1],newList[0]\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    list1 = newList\n    list1[0], list1[len(newList)-1] = list1[len(newList)-1], list1[0]\n    return list1\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length = len(newList)\n    last = newList[length-1]\n    newList.remove(last)\n    newList.insert(0,last)\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    return newList[-1:] + newList[1: -1]\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    mid = len(newList) // 2\n    newList[0], newList[mid] = newList[mid], newList[0]\n    return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    length=len(newList)\n    newList[length-1],newList[0]=newList[0],newList[length-1]\n    print(\"the new list after interchange is\")\n    for i in newList:\n        print(i)\ndef swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list."
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    if not newList:\n        print(\"List is empty\")\n        return\n    else:\n        newList[0], newList[-1] = newList[-1], newList[0]\n        return newList\n"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList[0],newList[-1] = newList[-1],newList[0]\n    return newList\n    \n    \n    \n    \ndef fizzBuzz(n):\n    '''\n    Write a python function to print the numbers from 1 to n in the form of FizzBuzz.\n    '''\n    for i in range(1,n+1):\n        if i%3==0 and i%5==0:\n            print('FizzBuzz')\n        elif i%3==0:\n            print('Fizz')\n        elif i%5==0:\n            print('Buzz')\n        else:\n            print(i)\n            \n            \n    \ndef find_max(num1,num2):\n    '''\n    Write a python function to find the maximum of two numbers.\n    '''\n    if num1>num2:\n        return num1\n    else:\n        return num2\n    \n    \n    \n    \ndef find_min(num1,num2):\n    '''\n    Write a python function to find the minimum of two numbers.\n    '''\n    if num1<num2:\n        return num1\n    else:\n        return num2\n    \n    \n    \ndef sum_List(numList):\n    '''\n    Write a python function to calculate the sum of all the numbers in a given list.\n    '''\n    total = 0\n    for i in numList:\n        total+=i\n    return total\n    \n    \n    \n    \ndef insertionSort(numList):\n    '''\n    Write a python function to sort the numbers in a given list in ascending order.\n    '''\n    for i in range(1,len(numList)):\n        key = numList[i]\n        j = i-1\n        while j>=0 and numList[j]>key:\n            numList[j+1] = numList[j]\n            j-=1\n        numList[j+1] = key\n    return numList\n    \n    \n    \n    \ndef max_min(numList):\n    '''\n    Write a python function to find the minimum and maximum element in a given list.\n    '''\n    min_num = numList[0]\n    max_num = numList[0]\n    for i in numList:\n        if i<min_num:\n            min_num = i\n        elif i>max_num:\n            max_num = i\n    return max_num,min_num\n    \n    \n    \n    \ndef freq_char(sentence):\n    '''\n    Write a python function to find the frequency of characters in a given sentence.\n    '''\n    char_freq = {}\n    for i in sentence:\n        if i in char_freq:\n            char_freq[i]+=1\n        else:\n            char_freq[i]=1\n    return char_freq\n    \n    \n    \n    \ndef swap_String(str1,str2):\n    '''\n    Write a python function to swap the characters in a string.\n    '''\n    newStr = ''\n    for i in range(len(str1)):\n        newStr = newStr + str2[i]\n        for j in range(len(str2)):\n            if newStr == str1:\n                return newStr\n            else:\n                return newStr\n        \n    \n    \ndef mergeSort(numList):\n    '''\n    Write a python function to sort the given list in ascending order using mergeSort.\n    '''\n    if len(numList)>1:\n        mid = int(len(numList)/2)\n        left = numList[:mid]\n        right = numList[mid:]\n        \n        mergeSort(left)\n        mergeSort(right)\n        \n        i=0\n        j=0\n        k=0\n        while i<len(left) and j<len(right):\n            if left[i]<right[j]:\n                numList[k] = left[i]\n                i+=1\n            else:\n                numList[k] = right[j]\n                j+=1\n            k+=1\n        while i<len(left):\n            numList[k] = left[i]\n            i+=1\n            k+=1\n        while j<len(right):\n            numList[k] = right[j]\n            j+=1\n            k+=1\n    return numList\n    \n    \n    \n    \ndef selectionSort(numList):\n    '''\n    Write a python function to sort the given list in ascending order using selectionSort.\n    '''\n    for i in range(len(numList)):\n        min_pos = i\n        for j in range(i+1,len(numList)):\n            if numList[j]<numList[min_pos]:\n                min_pos = j\n        if min_pos!= i:\n            numList[min_pos],numList[i] = numList[i],numList[min_pos]\n    return numList\n    \n    \n    \n    \n    \n    \n    \n    \ndef isMonotonic(numList):\n    '''\n    Write a python function to check if a given list is monotonic or not.\n    '''\n    if numList == sorted(numList):\n        return True\n    else:\n        return False\n    \n    \n    \n    \n    \ndef removeDuplicates(numList):\n    '''\n    Write a python function to remove all the duplicate elements in a given list.\n    '''\n    for i in range(1,len(numList)):\n        if numList[i]==numList[i-1]:\n            numList.pop(i)\n    return numList\n    \n    \n    \n    \ndef capitalize(sentence):\n    '''\n    Write a python function to capitalize the first character of a string.\n    '''\n    return sentence[0].upper()+sentence[1:]\n    \n    \n    \n    \ndef count_words(sentence):\n    '''\n    Write a python function to count the number of words in a given sentence.\n    '''\n    word_freq = {}\n    for i in sentence.split():\n        if i in word_freq:\n            word_freq[i]+=1\n        else:\n            word_freq[i]=1\n    return word_freq\n    \n    \n    \n    \ndef count_letters(sentence):\n    '''\n    Write a python function to count the number of letters in a given sentence.\n    '''\n    word_freq = {}\n    for i in sentence:\n        if i in word_freq:\n            word_freq[i]+=1\n        else:\n            word_freq[i]=1\n    return word_freq\n    \n    \n    \n    \ndef is_palindrome(sentence):\n    '''\n    Write a python function to check if a given sentence is a palindrome or not.\n    '''\n    palindrome = True\n    for i in range(len(sentence)//2):\n        if sentence[i]==sentence[len(sentence)-i-1]:\n            pass\n        else:\n            palindrome = False\n            break\n    return palindrome\n    \n    \n    \n    \ndef longestWord(sentence):\n    '''\n    Write a python function to find the longest word in a given sentence.\n    '''\n    word_len = {}\n    for i in sentence.split():\n        if i in word_len:\n            word_len[i]+=1\n        else:\n            word_len[i]=1\n    max_word = ''\n    max_length = 0\n    for i in word_len:\n        if word_len[i]>=max_length:\n            max_length = word_len[i]\n            max_word = i\n    return max_word\n    \n    \n    \n    \ndef rotate_Matrix(mat):\n    '''\n    Write a python function to rotate a given matrix by 90 degrees.\n    '''\n    new_mat = [[0]*len(mat[0]) for i in range(len(mat))]\n    for i in range(len(mat)):\n        for j in range(len(mat[0])):\n            new_mat[j][len(mat)-i-1]=mat[i][j]\n    return new_mat\n    \n    \n    \n    \ndef submatrix"
    },
    {
        "number": 625,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def swap_List(newList): \n    '''\n    Write a python function to interchange the first and last element in a given list.\n    '''\n    newList = newList[1:] + newList[:1]\n    return newList\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    #a function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius\n    def area(r) :\n        #return the area of the largest triangle that can be inscribed in a semicircle with a given radius\n        theta = math.pi / 4.0\n        a = (math.sin(theta) * r)**2\n        b = (math.cos(theta) * r)**2\n        c = (a + b)**0.5\n        return c\n    #a function to find the largest triangle that can be inscribed in a semicircle with a given radius\n    def largest_triangle(r) :\n        #return the largest triangle that can be inscribed in a semicircle with a given radius\n        area_l = 0.0\n        for i in range(0,2) :\n            area_l = area_l + area(r)\n        return area_l\n    #a function to find the largest triangle with the largest area that can be inscribed in a semicircle with a given radius\n    def largest_triangle_with_area(r) :\n        #return the largest triangle with the largest area that can be inscribed in a semicircle with a given radius\n        area_l = 0.0\n        for i in range(0,2) :\n            area_l = area_l + area(r)\n        if area_l < largest_triangle(r) :\n            largest_triangle = largest_triangle_with_area(r)\n        else :\n            largest_triangle = largest_triangle(r)\n        return largest_triangle\n    #a function to find the area of the largest triangle that can be inscribed in a triangle with 3 vertices with a given radius\n    def area_of_triangle(r) :\n        #return the area of the largest triangle that can be inscribed in a triangle with 3 vertices with a given radius\n        a = math.sqrt(3.0) * r**2.0\n        b = 2.0 * r**2.0\n        c = a - b\n        theta = math.pi / 4.0\n        #calculation\n        a1 = math.sin(theta) * a\n        b1 = math.cos(theta) * a\n        c1 = a - a1\n        a2 = math.sin(theta) * b\n        b2 = math.cos(theta) * b\n        c2 = b - b2\n        a3 = math.sin(theta) * c\n        b3 = math.cos(theta) * c\n        c3 = c - c3\n        #condition checking\n        if a1 == 0.0 or b1 == 0.0 or c1 == 0.0 :\n            if a1 == 0.0 :\n                area = math.sqrt(b2**2.0 + c3**2.0)\n            elif b1 == 0.0 :\n                area = math.sqrt(a2**2.0 + c3**2.0)\n            else :\n                area = math.sqrt(a2**2.0 + b2**2.0)\n        else :\n            area = 0.5 * (a1 * b2 + a2 * b1 + a3 * b2 - a2 * b3 - a3 * b2 - a3 * b1 - a1 * b3)\n        return area\n    #a function to find the largest area of the largest triangle that can be inscribed in a triangle with 3 vertices with a given radius\n    def largest_area_of_triangle(r) :\n        #return the largest area of the largest triangle that can be inscribed in a triangle with 3 vertices with a given radius\n        area_l = 0.0\n        for i in range(0,2) :\n            area_l = area_l + area_of_triangle(r)\n        return area_l\n    #a function to find the largest area of the largest triangle with the largest area that can be inscribed in a triangle with 3 vertices with a given radius\n    def largest_area_of_triangle_with_area(r) :\n        #return the largest area of the largest triangle with the largest area that can be inscribed in a triangle with 3 vertices with a given radius\n        area_l = 0.0\n        for i in range(0,2) :\n            area_l = area_l + area_of_triangle(r)\n        if area_l < largest_area_of_triangle(r) :\n            largest_area_of_triangle = largest_area_of_triangle_with_area(r)\n        else :\n            largest_area_of_triangle = largest_area_of_triangle(r)\n        return largest_area_of_triangle\n    #a function to find the area of the largest triangle that can be inscribed in a square with a given radius\n    def area_of_square(r) :\n        #return the area of the largest triangle that can be inscribed in a square with a given radius\n        area_l = 0.0\n        for i in range(0,4) :\n            area_l = area_l + math.sqrt(3.0) * r**2.0\n        return area_l\n    #a function to find the largest area of the largest triangle that can be inscribed in a square with a given radius\n    def largest_area_of_square(r) :\n        #return the largest area of the largest triangle that can be inscribed in a square with a given radius\n        area_l = 0.0\n        for i in range(0,4) :\n            area_l = area_l + math.sqrt(3.0) * r**2.0\n        if area_l < area_of_square(r) :\n            largest_area_of_square = largest_area_of_square(r)\n        else :\n            largest_area_of_square = area_of_square(r)\n        return largest_area_of_square\n    #a function to find the largest area of the largest triangle with the largest area that can be inscribed in a square with a given radius\n    def largest_area_of_square_with_area(r) :\n        #return the largest area of the largest triangle with the largest area that can be inscribed in a square with a given radius\n        area_l = 0.0\n        for i in range(0,4) :\n            area_l = area_l + math.sqrt(3.0) * r**2.0\n        if area_l < largest_area_of_square(r) :\n            largest_area_of_square = largest_area_of_square_with_area(r)\n        else :\n            largest_area_of_square = largest_area_of_square(r)\n        return largest_area_of_square\n    #a function to find the area of the largest triangle that can be inscribed in a triangle with 3 vertices with a given radius\n    def area_of_triangle(r) :\n        #return the area of the largest triangle that can be inscribed in a triangle with 3 vertices with a given radius\n        a = math.sqrt(3.0) * r**2.0\n        b = 2.0 * r**2.0\n        c = a - b\n        theta = math.pi / 4.0\n        #condition checking\n        a1 = math.sin(theta) * a\n        b1 = math.cos(theta) * a\n        c1 = a - a1\n        a2 = math.sin(theta) * b\n        b2 = math.cos(theta) * b\n        c2 = b - b2\n        a3 = math.sin(theta) * c\n        b3 = math.cos(theta) * c\n        c3 = c - c3\n        #condition checking\n        if a1 == 0.0 or b1 == 0.0 or c1 == 0.0 :\n            if a1 == 0.0 :\n                area = math.sqrt(b2**2.0 + c3**2.0)\n            elif b1 == 0.0 :\n                area = math.sqrt(a2**2.0 + c3**2.0)\n            else :\n                area = math.sqrt(a2**2.0 + b2**2.0)\n        else :\n            area = 0.5 * (a1 * b2 + a2 * b1 + a3 * b2 - a2 * b3 - a3 * b2 - a3 * b1 - a1 * b3"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = 2 * (r*r * math.sin(math.pi*r/2))\n    return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a = r * r * math.sqrt(3) / 2\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    # input\n    r = int(r)\n    # output\n    area = 0\n    if(r < 1):\n        return \"Enter a value greater than zero\"\n    else:\n        for i in range(1, r + 1):\n            area += 1 / 2 * i\n        return area\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    def radius_check(x,y) :\n        '''\n        Check the radius.\n        '''\n        if x<=0 :\n            return True\n        else :\n            return False\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    \n    def sqrt(x) :\n        '''\n        Write a python function to find the square root of a given number.\n        '''\n        \n        return x**(0.5)\n        \n    def intersection(a, b, c) :\n        '''\n        Write a python function to find the intersection of a triangle and a circle.\n        '''\n        \n        p = (a + b + c) / 2\n        area = sqrt(p * (p - a) * (p - b) * (p - c))\n        return area\n        \n    def circum_radius(a, b, c) :\n        '''\n        Write a python function to find the circum radius of a triangle.\n        '''\n        \n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n        \n    def circumference(a, b, c) :\n        '''\n        Write a python function to find the circumference of a triangle.\n        '''\n        \n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return 2 * area\n        \n    def semi_perimeter(a, b, c) :\n        '''\n        Write a python function to find the semi-perimeter of a triangle.\n        '''\n        \n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return a + b + c - area\n        \n    def area(a, b, c) :\n        '''\n        Write a python function to find the area of a triangle.\n        '''\n        \n        s = (a + b + c) / 2\n        area = sqrt(s * (s - a) * (s - b) * (s - c))\n        return area\n        \n    def __init__(self,a,b,c) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        self.a = a\n        self.b = b\n        self.c = c\n        \n        if self.a + self.b > self.c and self.a + self.c > self.b and self.c + self.b > self.a :\n            p = (self.a + self.b + self.c) / 2\n            area = sqrt(p * (p - self.a) * (p - self.b) * (p - self.c))\n            self.area = area\n        else :\n            self.area = 'Invalid input'\n        \n        \n    def __repr__(self) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        return '{} {} {}'.format(self.a, self.b, self.c)\n        \n    def __lt__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        if self.a > other.a and self.b > other.b and self.c > other.c :\n            return True\n        else :\n            return False\n        \n        \n    def __gt__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        if self.a > other.a and self.b > other.b and self.c > other.c :\n            return False\n        else :\n            return True\n        \n        \n    def __eq__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        if self.a == other.a and self.b == other.b and self.c == other.c :\n            return True\n        else :\n            return False\n        \n        \n    def __ne__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        if self.a!= other.a and self.b!= other.b and self.c!= other.c :\n            return True\n        else :\n            return False\n        \n        \n    def __le__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        if self.a <= other.a and self.b <= other.b and self.c <= other.c :\n            return True\n        else :\n            return False\n        \n        \n    def __ge__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        if self.a >= other.a and self.b >= other.b and self.c >= other.c :\n            return False\n        else :\n            return True\n        \n        \n    def __add__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        return '{} {} {}'.format(self.a, self.b, self.c)\n        \n        \n    def __iadd__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        self.a += other.a\n        self.b += other.b\n        self.c += other.c\n        \n        return self\n        \n        \n    def __sub__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        return '{} {} {}'.format(self.a, self.b, self.c)\n        \n        \n    def __isub__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        self.a -= other.a\n        self.b -= other.b\n        self.c -= other.c\n        \n        return self\n        \n        \n    def __mul__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        return '{} {} {}'.format(self.a, self.b, self.c)\n        \n        \n    def __imul__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        self.a *= other.a\n        self.b *= other.b\n        self.c *= other.c\n        \n        return self\n        \n        \n    def __truediv__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        return '{} {} {}'.format(self.a, self.b, self.c)\n        \n        \n    def __itruediv__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        self.a /= other.a\n        self.b /= other.b\n        self.c /= other.c\n        \n        return self\n        \n        \n    def __floordiv__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        return '{} {} {}'.format(self.a, self.b, self.c)\n        \n        \n    def __ifloordiv__(self,other) :\n        '''\n        Write a python function to find the area of a triangle with a given three sides.\n        '''\n        \n        self.a //= other.a\n        self.b //= other.b\n        self.c //= other.c\n        \n        return self\n        \n        \n    def __mod__(self,other) :\n        '''\n        Write a python function to find th"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    #2*(radius)^2\n    # (radius)^2 - (radius)^2 = radius^2\n    # 2*radius^2 = radius^2 - radius^2\n    # 2*radius^2 = radius^2 - radius^2\n    return 2*radius*radius - radius*radius\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    a=0\n    i=1\n    area = 0\n    while(area<r and i<=r) :\n        a=r*r\n        area=(a*(i*i))/(2*i+1)\n        i+=1\n    return a\n"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    area = (1.0/3.0)*3.14*r*r\n    print(area)\ntriangle_area(5"
    },
    {
        "number": 626,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def triangle_area(r) :  \n    '''\n    Write a python function to find the area of the largest triangle that can be inscribed in a semicircle with a given radius.\n    '''\n    import math\n    area = 0\n    if r<=0:\n        print(\"Incorrect input\")\n    else:\n        for i in range(1,r//2+1):\n            if (r*r - i*i)/(2*i) >0:\n                area = area + (r*r - i*i)/(2*i)\n        area = math.sqrt(area)\n        return area\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start == end:\n        return start\n    else:\n        middle = (start+end)//2\n        if array[middle] == middle:\n            return middle\n        if array[middle] < middle:\n            return find_First_Missing(array,middle+1,end)\n        if array[middle] > middle:\n            return find_First_Missing(array,start,middle-1)\n    \nif __name__ == '__main__':\n    print(find_First_Missing([1,2,3,4])) #1\n    print(find_First_Missing([1,2,3,4,5])) #2\n    print(find_First_Missing([1,2,3,4,6])) #5\n    print(find_First_Missing([0,1,2,3,4])) #4\n    print(find_First_Missing([0,1,2,4,5])) #3\n    print(find_First_Missing([5,2,3,4,1])) "
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)-1\n    if start>end:\n        print(\"Invalid input.\")\n    elif array[start]!=start+1:\n        print(\"Missing number is \",start+1)\n    else:\n        for i in range(start+1,end+1):\n            if array[i]!=i+1:\n                print(\"Missing number is \",i+1)\n                break\n            \n    \n    \n        \n        \ndef merge_Sort(arr):\n    if len(arr)>1:\n        mid=len(arr)//2\n        L=arr[:mid]\n        R=arr[mid:]\n        merge_Sort(L)\n        merge_Sort(R)\n        i=j=k=0\n        while i<len(L) and j<len(R):\n            if L[i]<R[j]:\n                arr[k]=L[i]\n                i+=1\n            else:\n                arr[k]=R[j]\n                j+=1\n            k+=1\n        while i<len(L):\n            arr[k]=L[i]\n            i+=1\n            k+=1\n        while j<len(R):\n            arr[k]=R[j]\n            j+=1\n            k+=1\n        print(arr)\n        \n            \n            \n        \n        \n        \n    \n    \n    \n        \ndef is_Subsequence(str1,str2):\n    '''\n    Write a function to check whether the given string is a subsequence of the given string.\n    '''\n    index_arr=[]\n    for i in str2:\n        index_arr.append(str1.find(i))\n        if index_arr[-1]==-1:\n            return False\n    return True\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)-1\n    if end<start:\n        return -1\n    if start>end:\n        return -1\n    if array[start]==array[end]:\n        return find_First_Missing(array,start+1,end-1)\n    else:\n        pivot=array[start]\n        low=start+1\n        high=end\n        while low<high:\n            while low<=high and array[low]<pivot:\n                low+=1\n            while low<=high and array[high]>=pivot:\n                high-=1\n            if low<high:\n                array[low],array[high]=array[high],array[low]\n        array[start],array[high]=array[high],array[start]\n        if array[start]==pivot:\n            return find_First_Missing(array,start+1,high-1)\n        else:\n            return find_First_Missing(array,low,end-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end=len(array)\n    if start >= end:\n        return start\n    elif array[start] < 0 or array[start] > end:\n        return start\n    elif array[end] < 0 or array[end] > end:\n        return end\n    elif array[start] < array[end]:\n        return find_First_Missing(array,start,end-1)\n    else:\n        return find_First_Missing(array,start+1,end-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)-1\n    if start > end:\n        print(f'{array[start]} is the first missing number.')\n        return\n    print(f'{array[start]} is the first missing number.')\n    for i in range(start+1,end+1):\n        if array[i] == start+1:\n            continue\n        if array[i]!= array[start] and array[i]!= array[start]+1:\n            print(f'{array[i]} is the next number.')\n            return\n    print(f'{array[start]} is the next number.')\n    return\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end = len(array)\n    for i in range(start,end):\n        if i!= array[i]:\n            return i\n    return end+1"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end == None:\n        end = len(array)\n    for i in range(start,end):\n        if array[i]!= i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    if end<=start:\n        return end+1\n    elif start==end:\n        return start+1\n    mid = int((start+end)/2)\n    if array[mid] == mid:\n        return find_First_Missing(array,start,mid-1)\n    else:\n        return find_First_Missing(array,mid+1,end)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end==None:\n        end=len(array)\n    if start>end:\n        return None\n    if start==end:\n        return start\n    middle=(start+end)//2\n    if array[middle]==middle:\n        return middle\n    if array[middle]<middle:\n        return find_First_Missing(array,middle+1,end)\n    if array[middle]>middle:\n        return find_First_Missing(array,start,middle-1)\n"
    },
    {
        "number": 627,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_First_Missing(array,start=0,end=None):\n    '''\n    Write a python function to find the smallest missing number from a sorted list of natural numbers.\n    '''\n    if end is None:\n        end = len(array)-1\n    for i in range(start,end+1):\n        if array[i]!= i+1:\n            return i+1\n    return end+1\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    lst=[]\n    for i in string.split():\n        lst.append(i.replace(' ','%20'))\n    return ''.join(lst)\n    \ndef replace_spaces_and_split(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20' and split the string at that point.\n    '''\n    string=replace_spaces(string)\n    new_string=string.split()\n    return new_string\n    \ndef replace_spaces_and_split_with_re(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20' and split the string at that point.\n    '''\n    import re\n    return re.sub(r'\\s','%20',string)\n    \ndef remove_repeating_spaces(string):\n    '''\n    Write a function to remove repeating spaces from the given string.\n    '''\n    return string.replace(' ','')\n    \ndef remove_repeating_spaces_with_re(string):\n    '''\n    Write a function to remove repeating spaces from the given string.\n    '''\n    return re.sub(r'\\s','',string)\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    if not string:\n        return string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(\" \", \"%20\")\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    string = string.replace(' ', '%20')\n    return string\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(\" \", \"%20\")\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    print(\"\\nString with spaces: \",string)\n    return string.replace(' ','%20')\n"
    },
    {
        "number": 628,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(string):\n    '''\n    Write a function to replace all spaces in the given string with '%20'.\n    '''\n    return string.replace(' ', '%20')\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    list = list\n    even = []\n    odd = []\n    for i in list:\n        if i%2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even,odd \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    count = 0\n    temp = []\n    for i in list:\n        if (i%2==0):\n            temp.append(i)\n    return temp\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    #Initialize an empty list to store even numbers.\n    EvenNumbers = []\n    \n    #Iterate over the list to find even numbers.\n    for num in list:\n        if num % 2 == 0:\n            EvenNumbers.append(num)\n    \n    #Return the even numbers in the list.\n    return EvenNumbers\n    \ndef SplitEvenOdd(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    #Initialize an empty list to store even numbers.\n    EvenNumbers = []\n    \n    #Iterate over the list to find even numbers.\n    for num in list:\n        if num % 2 == 0:\n            EvenNumbers.append(num)\n    \n    #Return the even numbers in the list.\n    return EvenNumbers\n    \ndef SplitEvenOddWithKey(list,key): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    #Initialize an empty list to store even numbers.\n    EvenNumbers = []\n    \n    #Iterate over the list to find even numbers.\n    for num in list:\n        if num % key == 0:\n            EvenNumbers.append(num)\n    \n    #Return the even numbers in the list.\n    return EvenNumbers\n    "
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    #return all numbers that are divisible by 2\n    even_numbers = []\n    for num in list:\n        if num % 2 == 0:\n            even_numbers.append(num)\n    return even_numbers\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = [] \n    odd_list = [] \n    for i in list: \n        if i % 2 == 0: \n            even_list.append(i) \n        else: \n            odd_list.append(i) \n    print(even_list) \n    print(odd_list) \n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for i in list:\n        if i%2==0:\n            even_list.append(i)\n    return even_list\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even = []\n    odd = []\n    for i in list:\n        if i % 2 == 0:\n            even.append(i)\n        else:\n            odd.append(i)\n    return even, odd\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    l =[]\n    for i in range(len(list)):\n        if list[i]%2==0:\n            l.append(list[i])\n    return l\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    even_list = []\n    for n in list:\n        if n % 2 == 0:\n            even_list.append(n)\n"
    },
    {
        "number": 629,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Split(list): \n    '''\n    Write a python function to find even numbers from a list of numbers.\n    '''\n    evens = []\n    odds = []\n    for i in list:\n        if i%2 == 0:\n            evens.append(i)\n        else:\n            odds.append(i)\n    print('Even numbers in the list: ', evens)\n    print('Odd numbers in the list: ', odds)\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub.append(tuple(ele))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele == (0,0): return [(0,1), (0,-1), (1,0), (-1,0), (1,1), (-1,-1), (1,-1), (-1,1)]\n    if ele == (0,7): return [(0,6), (1,6), (1,5), (1,4), (1,3), (1,2), (1,1), (0,1)]\n    if ele == (7,0): return [(6,0), (5,0), (4,0), (3,0), (2,0), (1,0), (0,-1), (-1,0)]\n    if ele == (7,7): return [(6,6), (5,6), (4,6), (3,6), (2,6), (1,6), (0,6), (-1,6)]\n    if ele == (6,0): return [(5,0), (4,0), (3,0), (2,0), (1,0), (0,-1), (-1,0), (0,1)]\n    if ele == (6,7): return [(5,6), (4,6), (3,6), (2,6), (1,6), (0,6), (-1,6), (0,5)]\n    if ele == (5,0): return [(4,0), (3,0), (2,0), (1,0), (0,-1), (-1,0), (0,1), (1,0)]\n    if ele == (5,7): return [(4,6), (3,6), (2,6), (1,6), (0,6), (-1,6), (0,5), (1,5)]\n    if ele == (4,0): return [(3,0), (2,0), (1,0), (0,-1), (-1,0), (0,1), (1,0), (0,-1)]\n    if ele == (4,7): return [(3,6), (2,6), (1,6), (0,6), (-1,6), (0,5), (1,5), (0,4)]\n    if ele == (3,0): return [(2,0), (1,0), (0,-1), (-1,0), (0,1), (1,0), (0,-1), (1,0)]\n    if ele == (3,7): return [(2,6), (1,6), (0,6), (-1,6), (0,5), (1,5), (0,4), (1,4)]\n    if ele == (2,0): return [(1,0), (0,-1), (-1,0), (0,1), (1,0), (0,-1), (1,0), (0,1)]\n    if ele == (2,7): return [(1,6), (0,6), (-1,6), (0,5), (1,5), (0,4), (1,4), (0,3)]\n    if ele == (1,0): return [(0,1), (0,-1), (1,0), (0,1), (0,-1), (1,0), (0,1), (0,-1)]\n    if ele == (1,7): return [(0,6), (1,6), (0,5), (1,5), (0,4), (1,4), (0,3), (1,3)]\n    if ele == (0,0): return [(1,1), (1,-1), (0,1), (0,-1), (1,1), (1,-1), (0,1), (0,-1)]\n    if ele == (0,7): return [(1,6), (1,-1), (0,6), (0,5), (1,5), (1,-1), (0,4), (0,-1)]\n    if ele == (7,0): return [(6,0), (5,0), (4,0), (3,0), (2,0), (1,0), (0,1), (0,-1)]\n    if ele == (7,7): return [(6,6), (5,6), (4,6), (3,6), (2,6), (1,6), (0,6), (-1,6)]\n    if ele == (6,0): return [(5,0), (4,0), (3,0), (2,0), (1,0), (0,-1), (-1,0), (0,1)]\n    if ele == (6,7): return [(5,6), (4,6), (3,6), (2,6), (1,6), (0,6), (-1,6), (0,5)]\n    if ele == (5,0): return [(4,0), (3,0), (2,0), (1,0), (0,-1), (-1,0), (0,1), (1,0)]\n    if ele == (5,7): return [(4,6), (3,6), (2,6), (1,6), (0,6), (-1,6), (0,5), (1,5)]\n    if ele == (4,0): return [(3,0), (2,0), (1,0), (0,-1), (-1,0), (0,1), (1,0), (0,-1)]\n    if ele == (4,7): return [(3,6), (2,6), (1,6), (0,6), (-1,6), (0,5), (1,5), (0,4)]\n    if ele == (3,0): return [(2,0), (1,0), (0,-1), (-1,0), (0,1), (1,0), (0,-1), (1,0)]\n    if ele == (3,7): return [(2,6), (1,6), (0,6), (-1,6), (0,5), (1,5), (0,4), (1,4)]\n    if ele == (2,0): return [(1,0), (0,-1), (1,0), (0,1), (1,0), (0,-1), (1,0), (0,1)]\n    if ele == (2,7): return [(1,6), (0,6), (1,5), (0,5), (1,4), (0,4), (1,3), (0,3)]\n    if ele == (1,0): return [(0,1), (0,-1), (1,0), (0,1), (0,-1), (1,0), (0,1), (0,-1)]\n    if ele == (1,7): return [(0,6), (1,6), (0,5), (1,5), (0,4), (1,4), (0,3), (1,3)]\n    if ele == (0,0): return [(1,1), (1,-1), (0,1), (0,-1), (1,1), (1,-1), (0,1), (0,-1)]\n    if ele == (0,7): return [(1,6), (1,-1), (0,6), (0,5), (1,5), (1,-1), (0,4), (0,-1)]\n    if ele == (7,0): return [(6,0), (5,0), (4,0), (3,0), (2,0), (1,0), (0,-1), (-1,0)]\n    if ele == (7,7): return [(6,6), (5,6), (4,6), (3,6), (2,6), (1,6), (0,6), (-1,6)]\n    if ele == (6,0): return [(5,0), (4,0), (3,0), (2,0), (1,0), (0,-1), (-1,0), (0,1)]\n    if ele == (6,7): return [(5,6), (4,6), (3,6), (2,6), (1,6), (0,6), (-1,6), (0,5)]\n    if ele == (5,0): return [(4,0), (3,0), (2,0), (1,0), (0,-1), (-1,0), (0,1), (1,0)]\n    if ele == (5,7): return [(4,6), (3,6), ("
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if len(sub) == 0:\n        sub.append(ele)\n        return sub\n    for val in ele:\n        if val == ele[0]:\n            sub.append(val)\n        else:\n            break\n    if len(sub)!= 0:\n        return adjac(sub, sub[1:])\n    else:\n        return []\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    global pos_dict\n    sub.append(ele)\n    for co in pos_dict[ele]:\n        if co not in sub:\n            adjac(co, sub)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in range(len(ele)):\n        if i == 0:\n            adj_1 = (ele[0]+1, ele[1])\n            adj_2 = (ele[0]-1, ele[1])\n            adj_3 = (ele[0], ele[1]+1)\n            adj_4 = (ele[0], ele[1]-1)\n            sub.append(adj_1)\n            sub.append(adj_2)\n            sub.append(adj_3)\n            sub.append(adj_4)\n        elif i == 1:\n            adj_1 = (ele[0], ele[1]+1)\n            adj_2 = (ele[0], ele[1]-1)\n            adj_3 = (ele[0]+1, ele[1])\n            adj_4 = (ele[0]-1, ele[1])\n            sub.append(adj_1)\n            sub.append(adj_2)\n            sub.append(adj_3)\n            sub.append(adj_4)\n        else:\n            adj_1 = (ele[0]-1, ele[1])\n            adj_2 = (ele[0]+1, ele[1])\n            adj_3 = (ele[0], ele[1]-1)\n            adj_4 = (ele[0], ele[1]+1)\n            sub.append(adj_1)\n            sub.append(adj_2)\n            sub.append(adj_3)\n            sub.append(adj_4)\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] < 0 or ele[1] < 0 or ele[0] > 7 or ele[1] > 7:\n        print(\"Invalid coordinates\")\n        return\n    sub.append((ele[0]-1, ele[1]))\n    sub.append((ele[0], ele[1]-1))\n    sub.append((ele[0]+1, ele[1]))\n    sub.append((ele[0], ele[1]+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    for i in ele:\n        if i < 0 or i > n-1:\n            continue\n        else:\n            sub.append((i+1, i-1, i-n+1, i+n-1))\n    return sub\n    \ndef adjac1(ele): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    sub = []\n    for i in range(0, n):\n        if i < 0 or i > n-1:\n            continue\n        else:\n            sub.append((i+1, i-1, i-n+1, i+n-1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    if ele[0] - 1 >= 0:\n        sub.append((ele[0] - 1, ele[1]))\n    if ele[0] + 1 <= 7:\n        sub.append((ele[0] + 1, ele[1]))\n    if ele[1] - 1 >= 0:\n        sub.append((ele[0], ele[1] - 1))\n    if ele[1] + 1 <= 7:\n        sub.append((ele[0], ele[1] + 1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    if x > 0:\n        sub.append((x-1,y))\n    if x < len(matrix)-1:\n        sub.append((x+1,y))\n    if y > 0:\n        sub.append((x,y-1))\n    if y < len(matrix[0])-1:\n        sub.append((x,y+1))\n    return sub\n"
    },
    {
        "number": 630,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def adjac(ele, sub = []): \n    '''\n    Write a function to extract all the adjacent coordinates of the given coordinate tuple.\n    '''\n    x,y = ele\n    adj = [(x,y-1),(x,y+1),(x-1,y),(x+1,y)]\n    if ele in sub:\n        adj.remove(ele)\n    return adj\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    lista = text.split(' ')\n    for i in range(len(lista)):\n        if lista[i]!= '':\n            lista[i] = lista[i].replace(' ', '_')\n        else:\n            pass\n    return ''.join(lista)\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    new_text = text.replace(' ', '_')\n    return new_text.replace('_','')\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')\n    \n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    for i in range(len(text)):\n        if (text[i] ==''):\n            text = text[:i] + '_' + text[i+1:]\n    return text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    result = []\n    #if not text:\n    #    return result\n    for word in text.split():\n        if word.startswith(' '):\n            result.append('_')\n        elif word.endswith(' '):\n            result.append('_')\n        else:\n            result.append(word)\n    return \" \".join(result)\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    \n    text_no_space = text.replace(' ', '_')\n    text_no_underscore = text_no_space.replace('_','')\n    return text_no_underscore\n    \n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    str_list = text.split(' ')\n    new_string = \"\".join(str_list).replace(' ','_')\n    print(new_string)\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    if text == None or text == \"\":\n        return text\n"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ', '_').replace('_','')"
    },
    {
        "number": 631,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def replace_spaces(text):\n    '''\n    Write a function to replace whitespaces with an underscore and vice versa in a given string.\n    '''\n    return text.replace(' ','_').replace('_','')\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    # set a flag\n    count_zero = 0\n    # iterate\n    for i in range(0,len(num_list)):\n        # increment count of non-zero\n        if num_list[i]!= 0:\n            count_zero += 1\n        # move non-zero to end\n        else:\n            # move number to zero position\n            num_list.append(0)\n            # remove non-zero\n            num_list.pop(i)\n            # move non-zero to end\n            while num_list[0] == 0:\n                num_list.pop(0)\n                num_list.append(0)\n    # count zero\n    print(count_zero)\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        for j in range(i+1,len(num_list)):\n            if num_list[i] == 0:\n                break\n            num_list[i],num_list[j] = num_list[j],num_list[i]\n    return num_list\n    \nprint(move_zero([0,2,7,8,1,3,4]))"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(0, len(num_list)-1):\n        if num_list[i] == 0:\n            continue\n        for j in range(i, len(num_list)-1):\n            if num_list[j] == 0:\n                num_list.pop(i)\n                num_list.append(0)\n                break\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    n = len(num_list)\n    while i < n:\n        if num_list[i] == 0:\n            num_list.pop(i)\n            num_list.append(0)\n            n = n - 1\n        else:\n            i = i + 1\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    z = 0\n    for num in num_list:\n        if num!= 0:\n            z = z + 1\n            if z == 1:\n                num_list[num_list.index(num)] = 0\n                num_list.append(0)\n            else:\n                num_list.append(0)\n                num_list.pop(num_list.index(num))\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    n = len(num_list)\n    if n==0:\n        return num_list\n    for i in range(n):\n        if num_list[i]!=0:\n            j=i\n            while(j<n and num_list[j]==0):\n                num_list[j],num_list[i]=num_list[i],num_list[j]\n                j+=1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    count = 0\n    for i in range(len(num_list)):\n        if num_list[i]!=0:\n            num_list[count],num_list[i]=num_list[i],num_list[count]\n            count+=1\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    i = 0\n    while i < len(num_list):\n        if num_list[i] == 0:\n            del num_list[i]\n            num_list.append(0)\n            i -= 1\n        i += 1\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    for i in range(len(num_list)):\n        if num_list[i] == 0:\n            while num_list[i] == 0:\n                del num_list[i]\n                num_list.append(0)\n    return num_list\n"
    },
    {
        "number": 632,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def move_zero(num_list):\n    '''\n    Write a python function to move all zeroes to the end of the given list.\n    '''\n    pos = 0\n    for i in range(len(num_list)-1):\n        if num_list[i]!= 0:\n            num_list[i], num_list[pos] = num_list[pos], num_list[i]\n            pos += 1\n    return num_list\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            sum = arr[i] ^ arr[j]\n            print(f\"{sum}\")\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(0,n):\n        for j in range(i+1,n):\n            s = s + (arr[i] ^ arr[j])\n    print(s)\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    res = 0\n    for i in range(n):\n        for j in range(i+1,n):\n            res += arr[i] ^ arr[j]\n    return res\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] + arr[j] == 0 : \n                return True\n            else : \n                return False\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    arr1 = arr\n    arr1.sort()\n    sum = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            sum = arr1[i] ^ arr1[j]\n    print(sum)\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    if n == 0:\n        return\n    if n==1:\n        return arr[0]^arr[1]\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    s = 0\n    for i in range(0,n-1):\n        for j in range(i+1,n):\n            s = s + arr[i] ^ arr[j]\n    return s\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    sum = 0\n    for i in range(n) :\n        for j in range(i+1,n) :\n            sum = sum + (arr[i] ^ arr[j])\n    return sum\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    x = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            x = x ^ arr[i] ^ arr[j]\n    return x\n"
    },
    {
        "number": 633,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_xor_Sum(arr,n) : \n    '''\n    Write a python function to find the sum of xor of all pairs of numbers in the given list.\n    '''\n    # code here\n    if n < 2:\n        return 0\n    sum_pairs = 0\n    for i in range(n):\n        for j in range(n):\n            if i!=j:\n                sum_pairs += arr[i] ^ arr[j]\n    return sum_pairs\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    sorted_iterable = []\n    while iterable:\n        sorted_iterable.append(hq.heappop(iterable))\n    return sorted_iterable\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq = []\n    for item in iterable:\n        hq.append(item)\n    while len(hq) > 1:\n        hq.append(hq.pop(-1))\n        hq.append(hq.pop(-1))\n    return hq\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    hq.heapify(iterable)\n    return sorted(iterable)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    heap = []\n    for i in range(len(iterable)):\n        hq.heappush(heap, iterable[i])\n    return heap\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    # heapsort = [(0, 0, 'root'), (1, 1, 'root'), (2, 2, 'root')]\n    # heap = [('left', 'parent', 'right'), (2, 2, 2), (1, 1, 1), (0, 0, 0)]\n    # heapq.heapify(heap)\n    # print(heap)\n    # hq.heapify(heapsort)\n    # print(heapsort)\n    # hq.heappush(heapsort, (4, 4, 4))\n    # print(heapsort)\n    # hq.heappop(heapsort)\n    # print(heapsort)\n    # hq.heappop(heapsort)\n    # print(heapsort)\n    # hq.heappop(heapsort)\n    # print(heapsort)\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    result = []\n    heap = []\n    for item in iterable:\n        hq.heappush(heap, item)\n    for _ in range(len(iterable)):\n        result.append(hq.heappop(heap))\n    return result\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h, i)\n    return [i for i in h]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for x in iterable:\n        h.append(x)\n    hq.heapify(h)\n    print(h)\n    ans = []\n    while len(h)!= 0:\n        ans.append(hq.heappop(h))\n    return ans\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    h = []\n    for i in iterable:\n        hq.heappush(h,i)\n    return [hq.heappop(h) for i in range(len(h))]\n"
    },
    {
        "number": 635,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import heapq as hq\ndef heap_sort(iterable):\n    '''\n    Write a function to sort the given list.\n    '''\n    return sorted(iterable, reverse = True)\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    \n    if actual_cost-sale_amount > 0:\n        return \"No Profit and No Loss\"\n    elif actual_cost-sale_amount == 0:\n        return \"Profit and Loss\"\n    else:\n        return \"No Profit and Loss\"\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    profit = 0\n    loss = 0\n    if actual_cost < sale_amount:\n        print(\"NO LOSS\")\n    else:\n        profit = actual_cost - sale_amount\n        if profit < 0:\n            print(\"NO PROFIT\")\n        else:\n            loss = sale_amount - actual_cost\n            if loss < 0:\n                print(\"NO LOSS\")\n            else:\n                print(\"PROFIT\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost==sale_amount:\n        print(\"No Profit\")\n    elif actual_cost>sale_amount:\n        print(\"No Loss\")\n    else:\n        print(\"Profit\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost <= sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        print(\"No Profit or Loss\")\n    else:\n        print(\"Profit or Loss\")\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    print(\"{:<20} {:<20} {:<20}\".format(\"Actual Cost\",\"Sale Amount\",\"Net Profit/Loss?\"))\n    print(\"{:<20} {:<20} {:<20}\".format(\"---------------------------\",\"---------------------------\",\"--------------\"))\n    if actual_cost<sale_amount:\n        print(\"{:<20} {:<20} {:<20}\".format(actual_cost,sale_amount,0))\n    elif actual_cost>sale_amount:\n        print(\"{:<20} {:<20} {:<20}\".format(actual_cost,sale_amount,1))\n    else:\n        print(\"{:<20} {:<20} {:<20}\".format(actual_cost,sale_amount,1))\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    #actual_cost = np.array(actual_cost)\n    #sale_amount = np.array(sale_amount)\n    actual_cost_reversed = np.flip(actual_cost)\n    sale_amount_reversed = np.flip(sale_amount)\n    profit = 0\n    for i in range(len(actual_cost)):\n        profit += actual_cost_reversed[i] - sale_amount_reversed[i]\n    return profit\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    return actual_cost == sale_amount\n"
    },
    {
        "number": 637,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def noprofit_noloss(actual_cost,sale_amount): \n    '''\n    Write a function to check whether the given amount has no profit and no loss\n    '''\n    if actual_cost == sale_amount:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    #t = (t - 32) * 5/9\n    v = v * 1.609\n    wind_chill = 13.12 + (0.6215 * t) - (11.37 * (v ** 0.16)) + (0.3965 * t * (v ** 0.16))\n    return round(wind_chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 35.74\n    b = 0.6215\n    c = 35.75\n    d = 0.4275\n    e = 0.05\n    f = 0.12\n    u = ((a * t) - (b * (v ** 0.16))) * math.exp( (d * (t - c)) / (t - f))\n    return u\nprint(wind_chill(10,32))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    v = v * 1.6\n    t_in = t + 459.67\n    t_in = t_in / (273.16 + t_in)\n    v_in = v * 1.6\n    v_in = v_in / (273.16 + v_in)\n    #print(v,t)\n    #print(t_in,v_in)\n    #print((v_in * 1.1)**0.16)\n    return int(v_in * 1.1 ** 0.16 * (t_in ** 0.16))\ndef get_formatted_name(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    formatted_name = first + \" \" + last\n    return formatted_name.title()\ndef get_formatted_name_v2(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.title()} {last.title()}\"\ndef get_formatted_name_v3(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    formatted_name = f\"{first.title()} {last.title()}\"\n    return formatted_name\ndef get_formatted_name_v4(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    formatted_name = \"{} {}\".format(first.title(),last.title())\n    return formatted_name\ndef get_formatted_name_v5(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    formatted_name = f\"{first.title()} {last.title()}\"\n    return formatted_name\ndef get_formatted_name_v6(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first[0].upper()}.{last[0].upper()}\"\ndef get_formatted_name_v7(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first[0].upper()}.{last[0].upper()}\"\ndef get_formatted_name_v8(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first} {last}\"\ndef get_formatted_name_v9(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last}, {first}\"\ndef get_formatted_name_v10(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last}, {first.upper()}\"\ndef get_formatted_name_v11(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.lower()} {last.lower()}\"\ndef get_formatted_name_v12(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.lower()} {last.lower()}\"\ndef get_formatted_name_v13(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last}, {first.lower()}\"\ndef get_formatted_name_v14(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.title()} {last.title()}\"\ndef get_formatted_name_v15(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.title()} {last.title()}\"\ndef get_formatted_name_v16(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.title()}, {first.title()}\"\ndef get_formatted_name_v17(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.title()}, {first.title()}\"\ndef get_formatted_name_v18(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.upper()} {last.upper()}\"\ndef get_formatted_name_v19(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.upper()} {last.upper()}\"\ndef get_formatted_name_v20(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.lower()}, {first.lower()}\"\ndef get_formatted_name_v21(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.lower()}, {first.lower()}\"\ndef get_formatted_name_v22(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.title()}, {first.title()}\"\ndef get_formatted_name_v23(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.lower()} {last.lower()}\"\ndef get_formatted_name_v24(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first[0].upper()}.{last[0].upper()}\"\ndef get_formatted_name_v25(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first[0].upper()}.{last[0].upper()}\"\ndef get_formatted_name_v26(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{first.capitalize()}, {last.capitalize()}\"\ndef get_formatted_name_v27(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":\n        return \"ERROR\"\n    return f\"{last.capitalize()}, {first.capitalize()}\"\ndef get_formatted_name_v28(first,last):\n    \"\"\"\n    Return a full name, neatly formatted.\n    \"\"\"\n    if first == \"\" or last == \"\":"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    C = t+273.15\n    v = v*1.8\n    B = 35.74 + 0.6215*C + 35.75*(v**0.16)*math.exp(-0.6215*C*(v**0.16))\n    return round(B)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    k = 1.8 #Constant for Wind Chill\n    temperature = t\n    wind_speed = v\n    wind_chill = 35.74 + (0.6215 * temperature) - (35.75 * (wind_speed ** 0.16)) + (0.4275 * temperature * (wind_speed ** 0.16))\n    return round(wind_chill)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    t = t + 273.15\n    v = v * 0.6214 #Convert mph to km/h\n    wci = 35.74 + 0.6215*t - 35.75*math.pow(v, 0.16)\n    return round(wci)\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wci = 35.74 + (0.6215*t) - (35.75 * math.pow((v * 0.1), 0.16)) + (0.4275 * math.pow(t, 0.16))\n    wci = round(wci)\n    return wci\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    wind_chill_index = -42.379 + 2.04901523*t + 10.14333127*math.pow(v,0.16) - 4.948e-5*t*math.pow(v,0.16)\n    return int(round(wind_chill_index))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    return 35.74 + (0.6215*t) + (0.4275*v**0.16) - (35.75*(v**0.16))\n"
    },
    {
        "number": 638,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef wind_chill(v,t):\n    '''\n    Write a function to calculate the wind chill index rounded to the next integer given the wind velocity in km/h and a temperature in celsius.\n    '''\n    a = 0.6215\n    b = 237.7\n    c = 13.12\n    d = -0.2242\n    e = 0.0065\n    f = 0.0009\n    g = -0.0009\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    \n    return [x for x in sample_names if x[0] == x[0].upper()]\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for i in sample_names:\n        if i[0].islower():\n            count += 1\n    return count\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Initialize sum\n    sum = 0\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for i in range(len(sample_names)):\n        if sample_names[i][0].islower():\n            continue\n        sum += len(sample_names[i])\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    # Your code here\n    print(sum(len(x) for x in sample_names if x[0].isupper()))\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    sum = 0\n    for name in sample_names:\n        if not name[0].isalpha():\n            sum += len(name)\n    return sum\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    no_of_names = len(sample_names)\n    print(no_of_names)\n    sum_name = 0\n    for names in sample_names:\n        if names.startswith(\" \"):\n            sum_name += len(names)\n        else:\n            sum_name += len(names[1:])\n    print(\"Sum of name is : \" + str(sum_name))\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    result = 0\n    for i in sample_names:\n        if (i!= i.lower()):\n            result = result + len(i)\n    return result\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    import re\n    dictionary = {}\n    for i in sample_names:\n        new_string = re.sub('[a-z]', '', i)\n        if new_string not in dictionary:\n            dictionary[new_string] = len(new_string)\n    return sum(dictionary.values())\n"
    },
    {
        "number": 639,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sample_nam(sample_names):\n    '''\n    Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.\n    '''\n    count = 0\n    for item in sample_names:\n        if len(item) > 1 and item[0].islower():\n            count = count + 1\n    return count\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.replace('(','').replace(')','')\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.findall('\\(.*?\\)', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    i = 0\n    while i < len(items)-1:\n        if items[i] == '(' and items[i+1] == ')':\n            items = items[0:i] + items[i+2:]\n        i += 1\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    def parenthesis_remove(a):\n        # find = re.search(r'\\(.*\\)', a).group()\n        # print(find)\n        find = re.search(r'\\((.*)\\)', a).group(1)\n        # print(find)\n        # return find\n        return find\n    \n    for i in items:\n        items[items.index(i)] = parenthesis_remove(i)\n    return items\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return_items = []\n    for item in items:\n        if item[0]!= '(':\n            if item[-1]!= ')':\n                return_items.append(item)\n            else:\n                return_items.append(item[1:-1])\n        else:\n            return_items.append(item[1:-1])\n    return return_items\n    #return items[1:-1]\n    \n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    item = items.split(\"(\")\n    item = item[1].split(\")\")\n    return item[0]\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return items.split('(')[0]\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    result = re.sub(r'[\\(].*?[\\)]', '', items)\n    return result\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    return re.sub('\\([^()]+\\)', '', items)\n"
    },
    {
        "number": 640,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_parenthesis(items):\n    '''\n    Write a function to remove the parenthesis and what is inbetween them from a string.\n    '''\n    regex = re.compile(r'[\\(\\)]')\n    items = regex.sub('', items)\n    return items\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n < 1:\n        return 0\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    for i in range(n):\n        n = n * (n+1) // 2\n    return n\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return (n*(n+1))//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    num_cols = 0\n    while num_cols * (num_cols + 1) < n:\n        num_cols += 1\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    if n == 1: \n        return 1\n    else: \n        return (n*(n+1))//2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return ((n * (n + 1)) // 2)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return n*(n+1)/2\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    return 1 + 3*(n-1) + 4*(n-2) + 5*(n-3)\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    # Base case\n    if n == 1:\n        return 3\n    # General case\n    else:\n        return n*(n+1)*(2*n-1)//6\n"
    },
    {
        "number": 641,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_nonagonal(n): \n    '''\n    Write a function to find the nth nonagonal number.\n    '''\n    n = n - 1\n    return int((1 - (1/n))*n)\nprint(is_nonagonal(5))\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    middle_part = re.sub(r'z','',text)\n    if middle_part[0:1] == 'z' and middle_part[-1:] == 'z':\n        return True\n    return False\nprint(text_match_wordz_middle('zzzzzzzzzzzzzzzz'))\nprint(text_match_wordz_middle('zzzzzzzzzzzzzzzz'))\nprint(text_match_wordz_middle('zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    # Your code here\n    if re.match(r\"^z[\\w\\W]*z[\\w\\W]*z$\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    middle = []\n    for i in text:\n        if i!='' and i!= '\\n' and i!= ',':\n            middle.append(i)\n    return \" \".join(middle)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pattern = r\"z\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n    \ndef text_match_wordz_end(text):\n    '''\n    Write a function that checks if a strings contains 'z' at the end of a word.\n    '''\n    pattern = r\"z$\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.match(r'^z(.)z$', text):\n        return True\n    return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    pass\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('^z',text) or re.search('z$',text) or re.search('z',text[0:2]) or re.search('z',text[-2:]) or re.search('z',text[1:-1]) or re.search('z',text[-1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    result = re.findall('[z][^z]*',text)\n    return result\ndef text_match_wordz_middle_regex(text):\n    return re.findall(r'[z][^z]*',text)\ndef text_match_wordz_middle_regex_all_caps(text):\n    return re.findall(r'[z][^z]*',text,flags=re.I)\ndef text_match_wordz_middle_regex_non_caps(text):\n    return re.findall(r'[z][^z]*',text,flags=re.I)\ndef text_match_wordz_middle_regex_case(text):\n    return re.findall(r'[z][^z]*',text)\ndef text_match_wordz_middle_regex_case_non_caps(text):\n    return re.findall(r'[z][^z]*',text,flags=re.I)\ndef text_match_wordz_middle_regex_case_non_caps_all_caps(text):\n    return re.findall(r'[z][^z]*',text,flags=re.I)\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    text = re.sub(r\"\\b(?<=z) \", \" \", text, flags=re.I)\n    text = re.sub(r\"\\b(?=z)\", \" \", text, flags=re.I)\n    return text\n"
    },
    {
        "number": 643,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_wordz_middle(text):\n    '''\n    Write a function that checks if a strings contains 'z', except at the start and end of the word.\n    '''\n    if re.search('^z', text) is None:\n        return False\n    if re.search('z$', text) is None:\n        return False\n    return True\n    \ndef test_text_match_wordz_middle():\n    print(\"Testing text_match_wordz_middle...\")\n    assert(text_match_wordz_middle(\"z\") == False)\n    assert(text_match_wordz_middle(\"zzz\") == True)\n    assert(text_match_wordz_middle(\"hello z\") == False)\n    assert(text_match_wordz_middle(\"zzzzzzzzz\") == True)\n    assert(text_match_wordz_middle(\"zzz\") == True)\n    assert(text_match_wordz_middle(\"\") == False)\n    assert(text_match_wordz_middle(\"zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # code here\n    n = len(input)\n    i = n-1\n    j = k\n    while i >= j:\n        input[i], input[j] = input[j], input[i]\n        i = i-1\n        j = j-1\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    list1 = input\n    k = k - 1\n    while(k):\n        temp = list1[0]\n        list1[0] = list1[k]\n        list1[k] = temp\n        k = k - 1\n    return list1\n        \n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    n = len(input)\n    for i in range(n//2):\n        input[i], input[n-i-1] = input[n-i-1], input[i]\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    temp=[]\n    ans=[]\n    \n    for i in range(len(input)):\n        if i < k:\n            ans.append(input[i])\n            \n        else:\n            temp=input[i:k+1]\n            temp.reverse()\n            \n            for j in range(len(temp)):\n                ans.append(temp[j])\n    return ans\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input.copy()\n    n = len(arr)\n    reverse_arr(arr,0,n-1)\n    if k==n:\n        return arr\n    else:\n        return reverse_arr(arr,0,k-1)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    reverse_arr = []\n    for i in range(len(input)):\n        if i <= k:\n            reverse_arr.append(input[i])\n    print(reverse_arr)\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    arr = input\n    for i in range(len(arr)):\n        if (i+1) == k:\n            break\n        else:\n            arr[i], arr[i+1] = arr[i+1], arr[i]\n    return arr\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    # check if the number of elements in the array is smaller than k\n    if k<len(input):\n        # copy all elements from 0 upto k in to a new array \n        for i in range(0,k):\n            reverse_Array_Upto_K(input, i)\n            reverse_Array_Upto_K(input, i+1)\n        # copy the remaining elements in the array to the new array\n        for i in range(k, len(input)):\n            reverse_Array_Upto_K(input, i+1)\n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    if k < len(input):\n        temp = input[k]\n        input[k] = input[len(input)-1]\n        input[len(input)-1] = temp\n        reverse_Array_Upto_K(input, k-1)\n    \n    return input\n"
    },
    {
        "number": 644,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def reverse_Array_Upto_K(input, k): \n    '''\n    Write a python function to reverse an array upto a given position.\n    '''\n    a = input[0:k]\n    print(\"Reverse Array upto K:\",a)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_tup[3], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    test_tup = test_tup + (test_dict,)\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1], test_tup[2], test_dict)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return tuple(test_tup) + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    for key, val in test_dict.items():\n        test_tup += (val, )\n    return test_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1].update(test_dict))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return (test_tup[0], test_tup[1].update(test_dict))\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    return test_tup + (test_dict,)\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    new_tup = test_tup + (test_dict,)\n    return new_tup\n"
    },
    {
        "number": 720,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_dict_to_tuple(test_tup, test_dict):\n    '''\n    Write a function to add a dictionary to the tuple. The output should be a tuple.\n    '''\n    tup_to_add = test_tup + (test_dict,)\n    return tup_to_add\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    n = len(cost)\n    \n    if n == 1:\n        return cost[0][0]\n    \n    prev = []\n    avg = 0\n    \n    for i in range(n):\n        prev.append([-1]*n)\n    \n    for i in range(n):\n        for j in range(n):\n            if i == 0 and j == 0:\n                avg = cost[i][j]\n            elif i == 0 and j!= 0:\n                avg = prev[i][j-1] + cost[i][j]\n                prev[i][j] = avg\n            elif i!= 0 and j == 0:\n                avg = prev[i-1][j] + cost[i][j]\n                prev[i][j] = avg\n            else:\n                avg = prev[i-1][j] + cost[i][j]\n                prev[i][j] = avg\n            avg = int(avg/2)\n    \n    return avg\n    \n    \nif __name__ == '__main__':\n    cost = [[1, 2, 3],\n            [4, 5, 6],\n            [7, 8, 9]]\n    \n    print(\"Maximum average = \",maxAverageOfPath(cost))"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # If the matrix is empty, return -1\n    if len(cost) == 0:\n        return -1\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    rows = len(cost)\n    cols = len(cost[0])\n    result = 0\n    dp = [[0 for i in range(cols)] for j in range(rows)]\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    max_avg = 0\n    cells = set()\n    \n    # Since the cost array is a square, so we need to traverse in the same direction \n    # i.e. top-left-down-bottom-right\n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if (i, j) not in cells:\n                cells.add((i, j))\n                max_avg = max(max_avg, compute_avg_helper(i, j, cost))\n                \n    return max_avg\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # Maintain a Dict to store the path\n    # O(n*m)\n    path = {}\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if len(cost) == 0:\n        return 0\n    if len(cost) == 1:\n        return sum(cost[0]) / len(cost[0])\n    \n    dp = [[0 for i in range(len(cost[0]))] for j in range(len(cost))]\n    \n    for i in range(len(cost)):\n        for j in range(len(cost[0])):\n            if i == 0 and j == 0:\n                dp[i][j] = cost[i][j]\n                continue\n            if i == 0:\n                dp[i][j] = dp[i][j-1] + cost[i][j]\n                continue\n            if j == 0:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n                continue\n            if dp[i-1][j] > dp[i][j-1]:\n                dp[i][j] = dp[i-1][j] + cost[i][j]\n                continue\n            dp[i][j] = dp[i][j-1] + cost[i][j]\n    return (sum(dp[-1]) / len(dp[-1]))\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    if not cost:\n        return 0\n    N = len(cost)\n    visited = set()\n    avg = 0\n    for i in range(N):\n        for j in range(N):\n            if cost[i][j] == 0:\n                continue\n            if (i,j) in visited:\n                continue\n            avg = avg + cost[i][j]\n            visited.add((i,j))\n            path = pathFrom(i,j,visited,cost)\n            avg = avg - cost[i][j]\n            visited.remove((i,j))\n            avg = avg + cost[i][j]\n            visited = visited.union(path)\n    return avg // len(visited)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    # # check if cost is not null\n    # if (len(cost)==0 or len(cost[0])==0):\n    #     return None\n    # # check if its a square matrix\n    # n = len(cost)\n    # # there are n * n rows in the matrix\n    # # there are n * n columns in the matrix\n    # # check if each row and each column has same number of elements\n    # # print(n)\n    # # print(n*n)\n    # for i in range(n):\n    #     # check if each row has same number of elements\n    #     if len(cost[i])!= n:\n    #         return None\n    #     # check if each column has same number of elements\n    #     for j in range(n):\n    #         # print(cost[i][j])\n    #         if len(cost[i][j])!= n:\n    #             return None\n    # # check if every row has same number of elements\n    # for i in range(n):\n    #     if len(cost[i])!= n:\n    #         return None\n    # # check if every column has same number of elements\n    # for i in range(n):\n    #     if len(cost[i])!= n:\n    #         return None\n    # print(n)\n    # print(n*n)\n    # return None\n    \n    # row = len(cost)\n    # col = len(cost[0])\n    # dp = [[0 for i in range(col)] for j in range(row)]\n    # for i in range(row):\n    #     for j in range(col):\n    #         if i == 0 or j == 0:\n    #             dp[i][j] = cost[i][j]\n    #         else:\n    #             dp[i][j] = cost[i][j] + min(dp[i - 1][j], dp[i][j - 1])\n    # max_val = 0\n    # for i in range(row):\n    #     for j in range(col):\n    #         if dp[i][j] > max_val:\n    #             max_val = dp[i][j]\n    # return max_val / (row*col)\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    \n    # The base case is if the first and last cells are not visited in the path, return 0.\n    if (not cost) or (len(cost) == 0):\n        return 0\n"
    },
    {
        "number": 721,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def maxAverageOfPath(cost):\n    '''\n    Given a square matrix of size N*N given as a list of lists, where each cell is associated with a specific cost. A path is defined as a specific sequence of cells that starts from the top-left cell move only right or down and ends on bottom right cell. We want to find a path with the maximum average over all existing paths. Average is computed as total cost divided by the number of cells visited in the path.\n    '''\n    n = len(cost)\n    dp = [[0]*n for i in range(n)]\n    for i in range(n):\n        for j in range(n):\n            dp[i][j] = cost[i][j]\n    \n    for i in range(1, n):\n        for j in range(1, n):\n            if i == j:\n                dp[i][j] = 0\n            else:\n                dp[i][j] = max(dp[i-1][j], dp[i][j-1]) + cost[i][j]\n    \n    return dp[n-1][n-1] / (n * (n - 1) / 2)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    dictionary = dict(students)\n    filter = {}\n    for k, v in dictionary.items():\n        if (v[0] > h and v[1] > w):\n            filter[k] = v\n    return filter\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_filtered = {}\n    for student, student_data in students.items():\n        if student_data[0] >= h and student_data[1] >= w:\n            students_filtered[student] = student_data\n    return students_filtered\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students = list(students.items())\n    for i,(key,value) in enumerate(students):\n        if h>value[0] and w>value[1]:\n            students.pop(i)\n    return students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    # students = {'Arshu': (160, 75), 'Vishal': (170, 75), 'Pritam': (165, 75), 'Hari': (190, 80), 'Chetan': (171, 70)}\n    students_list = []\n    for student,data in students.items():\n        if data[0] >= h and data[1] >= w:\n            students_list.append(student)\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    data=[]\n    for i in range(len(students)):\n        if students[i][1][0]<h or students[i][1][1]<w:\n            data.append(students[i])\n    return data\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    student_list=list(students.values())\n    filtered_students = filter(lambda student: student[0]>h or student[1]>w, student_list)\n    filtered_students=list(filtered_students)\n    return filtered_students\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    filter_data = {}\n    for student_name, student_info in students.items():\n        if student_info[0] >= h and student_info[1] >= w:\n            filter_data[student_name] = student_info\n    return filter_data\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    students_height = dict((k, v[0]) for k, v in students.items())\n    students_weight = dict((k, v[1]) for k, v in students.items())\n    students_height_above_height = dict((k, v) for k, v in students_height.items() if v > h)\n    students_weight_above_weight = dict((k, v) for k, v in students_weight.items() if v > w)\n    return students_height_above_height,students_weight_above_weight\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    result = []\n    for name,data in students.items():\n        if data[0] >= h and data[1] >= w:\n            result.append(name)\n    return result\n"
    },
    {
        "number": 722,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def filter_data(students,h,w):\n    '''\n    The input is given as - a dictionary with a student name as a key and a tuple of float (student_height, student_weight) as a value, - minimal height, - minimal weight. Write a function to filter students that have height and weight above the minimum.\n    '''\n    new_students = []\n    for student in students:\n        height, weight = student\n        if h<height<w and w<weight<h:\n            new_students.append(student)\n    return new_students\nprint(filter_data({'John', (1.68, 74.20), 'Yogi', (1.78, 81.20), 'Pankaj' : (1.71, 70.20), 'Aakash' : (1.71, 70.20), 'Aakash1' : (1.71, 70.20)}, 1.65, 1.45))\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    if len(nums1)!= len(nums2):\n        return 0\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            return True\n    return False\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    dic = {}\n    for i in range(len(nums1)):\n        if nums1[i] in dic:\n            dic[nums1[i]] += 1\n        else:\n            dic[nums1[i]] = 1\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    cnt = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            cnt += 1\n    return cnt\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    # Your code here\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    i = 0\n    while i < len(nums1):\n        if nums1[i] == nums2[i]:\n            count += 1\n        i += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    c = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            c += 1\n    return c\n"
    },
    {
        "number": 723,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from operator import eq\ndef count_same_pair(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    count = 0\n    for i in range(len(nums1)):\n        if nums1[i] == nums2[i]:\n            count += 1\n    return count\ndef count_same_pair_solution(nums1, nums2):\n    '''\n    The input is defined as two lists of the same length. Write a function to count indices where the lists have the same values.\n    '''\n    return sum([nums1.count(i) for i in nums2])\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    for i in range(power):\n        sum += int(base)\n        base = int(base) // 10\n    return sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    assert base >= 0\n    assert power >= 0\n    digits = '0123456789'\n    total = 0\n    while power!= 0:\n        if power % 10 == 0:\n            total += base\n            power = int(power/10)\n        else:\n            total += digits.index(str(power % 10))\n            power = int(power / 10)\n    return total\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    # base_sum = 0\n    # for i in range(power):\n    #     base_sum = base_sum + base\n    # return base_sum\n    return sum(map(int, str(base**power)))\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    sum = 0\n    base_string = str(base)\n    power_string = str(power)\n    for i in range(len(base_string)):\n        sum += int(base_string[i]) ** int(power_string[i])\n    return sum\n    \n    # base = int(input('Please enter the base: '))\n    # power = int(input('Please enter the power: '))\n    # return sum(str(base)) ** power\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    return sum([int(i) for i in str(base)])**power\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(1, power + 1):\n        result += int(base) ** i\n    return result\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    temp = base\n    while temp > 0:\n        result += temp % 10\n        temp = temp // 10\n    return result * (pow(base, power))\n    \n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    base_sum = 0\n    if power == 0:\n        return 1\n    for i in range(1,power+1):\n        base_sum += int(base)**i\n    return base_sum\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    if power == 1:\n        return base\n    else:\n        return (power * base) + power_base_sum(base, power - 1)\n"
    },
    {
        "number": 724,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def power_base_sum(base, power):\n    '''\n    Write a function that takes base and power as arguments and calculate the sum of all digits of the base to the specified power.\n    '''\n    result = 0\n    for i in range(power):\n        result += int(base)\n    return result\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text = text1\n    if (text.find('\"') > -1):\n        text_list = text.split('\"')\n        first_part = text_list[0]\n        second_part = text_list[1]\n        return second_part\n    else:\n        return text\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    quotations = re.findall('\"', text1)\n    return quotations\n    \n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    output = re.findall(r\"\\\"(.*?)\\\"\", text1)\n    return output\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    start = end = 0\n    text = text1\n    match = re.search(\"[\\\"](.*)[\\\"]\",text)\n    while(match):\n        start = match.start()\n        end = match.end()\n        match = re.search(\"[\\\"](.*)[\\\"]\",text[start+1:end-1])\n    return text[start:end+1]\n    \n    \ndef extract_quotation_2(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    pattern = re.compile(\"[\\\"](.*)[\\\"]\")\n    match = pattern.search(text1)\n    while match:\n        start = match.start()\n        end = match.end()\n        text1 = text1[:start] + text1[end+1:]\n        match = pattern.search(text1)\n    return text1\n    \ndef extract_quotation_3(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    match = re.search(\"[\\\"](.*)[\\\"]\",text1)\n    if match:\n        start = match.start()\n        end = match.end()\n        text1 = text1[:start] + text1[end+1:]\n    return text1\n    \ndef count_characters(text1):\n    '''\n    Write a function to count characters in a string.\n    '''\n    count = 0\n    for i in text1:\n        count += 1\n    return count\n    \ndef count_characters_2(text1):\n    '''\n    Write a function to count characters in a string.\n    '''\n    pattern = re.compile(\"[a-zA-Z]\")\n    match = pattern.finditer(text1)\n    count = 0\n    for i in match:\n        count += 1\n    return count\n    \ndef count_characters_3(text1):\n    '''\n    Write a function to count characters in a string.\n    '''\n    pattern = re.compile(\"[a-zA-Z]\")\n    match = pattern.finditer(text1)\n    count = 0\n    for i in match:\n        count += 1\n    return count\n    \ndef count_characters_4(text1):\n    '''\n    Write a function to count characters in a string.\n    '''\n    pattern = re.compile(\"[a-zA-Z]\")\n    match = pattern.finditer(text1)\n    count = 0\n    for i in match:\n        count += 1\n    return count\n    \ndef count_characters_5(text1):\n    '''\n    Write a function to count characters in a string.\n    '''\n    pattern = re.compile(\"[a-zA-Z]\")\n    match = pattern.finditer(text1)\n    count = 0\n    for i in match:\n        count += 1\n    return count\n    \ndef count_characters_6(text1):\n    '''\n    Write a function to count characters in a string.\n    '''\n    pattern = re.compile(\"[a-zA-Z]\")\n    match = pattern.finditer(text1)\n    count = 0\n    for i in match:\n        count += 1\n    return count\n    \ndef extract_emails(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    match = re.finditer(\"\\w+@\\w+\\.\\w+\",text1)\n    emails = []\n    for i in match:\n        emails.append(i.group(0))\n    return emails\n    \ndef extract_emails_2(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    pattern = re.compile(\"\\w+@\\w+\\.\\w+\")\n    emails = []\n    match = pattern.finditer(text1)\n    for i in match:\n        emails.append(i.group(0))\n    return emails\n    \ndef extract_emails_3(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    match = re.search(\"\\w+@\\w+\\.\\w+\",text1)\n    emails = []\n    if match:\n        emails.append(match.group(0))\n    return emails\n    \ndef extract_emails_4(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    pattern = re.compile(\"\\w+@\\w+\\.\\w+\")\n    match = pattern.search(text1)\n    if match:\n        emails = []\n        emails.append(match.group(0))\n    return emails\n    \ndef extract_emails_5(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    pattern = re.compile(\"\\w+@\\w+\\.\\w+\")\n    match = pattern.search(text1)\n    emails = []\n    if match:\n        emails.append(match.group(0))\n    return emails\n    \ndef extract_emails_6(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    pattern = re.compile(\"\\w+@\\w+\\.\\w+\")\n    match = pattern.findall(text1)\n    emails = []\n    for i in match:\n        emails.append(i)\n    return emails\n    \ndef extract_html(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    pattern = re.compile(\"<.*>\")\n    match = pattern.finditer(text1)\n    emails = []\n    for i in match:\n        emails.append(i.group(0))\n    return emails\n    \ndef extract_html_2(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    pattern = re.compile(\"<.*>\")\n    match = pattern.search(text1)\n    if match:\n        emails = []\n        emails.append(match.group(0))\n    return emails\n    \ndef extract_html_3(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    pattern = re.compile(\"<.*>\")\n    match = pattern.search(text1)\n    emails = []\n    if match:\n        emails.append(match.group(0))\n    return emails\n    \ndef extract_html_4(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    pattern = re.compile(\"<.*>\")\n    match = pattern.findall(text1)\n    emails = []\n    for i in match:\n        emails.append(i)\n    return emails\n    \ndef extract_html_5(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    pattern = re.compile(\"<.*>\")\n    match = pattern.finditer(text1)\n    emails = []\n    for i in match:\n        emails.append(i.group(0))\n    return emails\n    \ndef extract_html_6(text1):\n    '''\n    Write a regex to match emails.\n    '''\n    pattern = re.compile(\"<.*>\")\n    match = pattern.findall(text1)\n    emails = []\n    for i in match:\n        emails.append(i)\n    return emails\n    \ndef extract_all_words(text1):\n    '''\n    Write a regex to match words.\n    '''\n    pattern = re.compile(\"[A-Za-z]*[A-Za-z]+[A-Za-z]*|[A-Za-z]*[A-Za-z]+[A-Za-z]*[A-Za-z]+[A-Za-z]*|[A-Za-z]*[A-Za-z]+[A-Za-z]*[A-Za-z]+[A-Za-z]*[A-Za-z]+[A-Za-z]*|[A-Za-z]*[A-Za"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #split the given text on quotation marks \" \"\n    #the spaces in the quotes should be removed\n    #we need to use compile method of re package to remove spaces from the text1\n    #.+ is the the group of chars which need to be removed\n    #re.search(r\"\\w+(\\.|,|!|\\?|\\:|;|\\>|<|\\[|\\]|\\{|\\}|\\(|\\)|:|\\\"|\\'|\\$|\\_|\\~|\\&|\\+|\\=|\\*|\\-|\\n)\", text1)\n    \n    \n    text1=text1.strip()\n    text1=re.sub(r\"\\s+\", \" \", text1)\n    \n    return re.search(r\"\\w+(\\.|,|!|\\?|\\:|;|\\>|<|\\[|\\]|\\{|\\}|\\(|\\)|:|\\\"|\\'|\\$|\\_|\\~|\\&|\\+|\\=|\\*|\\-|\\n)\", text1).group()\n    \n    \n    \n    \ndef parse_class(text1):\n    '''\n    Write a function to extract the class names in the string.\n    '''\n    #create a function that will handle all the class names in the string\n    #use re.findall method of re package to get all the class names\n    #.group() is the group of chars in the match\n    #re.search(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \n    \n    text1=text1.strip()\n    text1=re.sub(r\"\\s+\", \" \", text1)\n    \n    return re.findall(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \ndef parse_class_name(text1):\n    '''\n    Write a function to extract the class names in the string.\n    '''\n    #create a function that will handle all the class names in the string\n    #use re.findall method of re package to get all the class names\n    #.group() is the group of chars in the match\n    #re.search(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \n    \n    text1=text1.strip()\n    text1=re.sub(r\"\\s+\", \" \", text1)\n    \n    return re.findall(r\"\\w+\", text1)\n    \n    \ndef parse_func(text1):\n    '''\n    Write a function to extract the function names in the string.\n    '''\n    #create a function that will handle all the function names in the string\n    #use re.findall method of re package to get all the function names\n    #.group() is the group of chars in the match\n    #re.search(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \n    \n    text1=text1.strip()\n    text1=re.sub(r\"\\s+\", \" \", text1)\n    \n    return re.findall(r\"\\w+\\(\\)\", text1)\n    \n    \ndef parse_func_name(text1):\n    '''\n    Write a function to extract the function names in the string.\n    '''\n    #create a function that will handle all the function names in the string\n    #use re.findall method of re package to get all the function names\n    #.group() is the group of chars in the match\n    #re.search(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \n    \n    text1=text1.strip()\n    text1=re.sub(r\"\\s+\", \" \", text1)\n    \n    return re.findall(r\"\\w+\", text1)\n    \n    \ndef parse_variable(text1):\n    '''\n    Write a function to extract the variable names in the string.\n    '''\n    #create a function that will handle all the variable names in the string\n    #use re.findall method of re package to get all the variable names\n    #.group() is the group of chars in the match\n    #re.search(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \n    \n    text1=text1.strip()\n    text1=re.sub(r\"\\s+\", \" \", text1)\n    \n    return re.findall(r\"\\w+\", text1)\n    \n    \ndef parse_variable_name(text1):\n    '''\n    Write a function to extract the variable names in the string.\n    '''\n    #create a function that will handle all the variable names in the string\n    #use re.findall method of re package to get all the variable names\n    #.group() is the group of chars in the match\n    #re.search(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \n    \n    text1=text1.strip()\n    text1=re.sub(r\"\\s+\", \" \", text1)\n    \n    return re.findall(r\"\\w+\", text1)\n    \n    \ndef parse_number(text1):\n    '''\n    Write a function to extract the number values in the string.\n    '''\n    #create a function that will handle all the number values in the string\n    #use re.findall method of re package to get all the number values\n    #.group() is the group of chars in the match\n    #re.search(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \n    \n    text1=text1.strip()\n    text1=re.sub(r\"\\s+\", \" \", text1)\n    \n    return re.findall(r\"\\d+\", text1)\n    \n    \ndef parse_number_value(text1):\n    '''\n    Write a function to extract the number values in the string.\n    '''\n    #create a function that will handle all the number values in the string\n    #use re.findall method of re package to get all the number values\n    #.group() is the group of chars in the match\n    #re.search(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \n    \n    text1=text1.strip()\n    text1=re.sub(r\"\\s+\", \" \", text1)\n    \n    return re.findall(r\"\\d+\", text1)\n    \n    \ndef parse_operation(text1):\n    '''\n    Write a function to extract the operation types in the string.\n    '''\n    #create a function that will handle all the operation types in the string\n    #use re.findall method of re package to get all the operation types\n    #.group() is the group of chars in the match\n    #re.search(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \n    \n    text1=text1.strip()\n    text1=re.sub(r\"\\s+\", \" \", text1)\n    \n    return re.findall(r\"\\w+\", text1)\n    \n    \ndef parse_operation_type(text1):\n    '''\n    Write a function to extract the operation types in the string.\n    '''\n    #create a function that will handle all the operation types in the string\n    #use re.findall method of re package to get all the operation types\n    #.group() is the group of chars in the match\n    #re.search(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \n    \n    text1=text1.strip()\n    text1=re.sub(r\"\\s+\", \" \", text1)\n    \n    return re.findall(r\"\\w+\", text1)\n    \n    \ndef parse_value(text1):\n    '''\n    Write a function to extract the value values in the string.\n    '''\n    #create a function that will handle all the value values in the string\n    #use re.findall method of re package to get all the value values\n    #.group() is the group of chars in the match\n    #re.search(r\"(\\w+)\\((\\w+)\\)\", text1)\n    \n    \n    \n    text1=text1.strip()\n    text"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text_list = text1.split(' ')\n    for i in range(len(text_list)):\n        if '\"' in text_list[i]:\n            start = text_list[i].index('\"')\n            # print(start)\n            end = text_list[i].index('\"', start + 1)\n            # print(end)\n            # print(text_list[i][start+1:end])\n            text_list[i] = text_list[i][start+1:end]\n            text_list[i] = text_list[i].strip()\n    # print(text_list)\n    return text_list\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    text1 = text1.lower()\n    matches = re.findall(r'\\\"(.*?)\\\"',text1)\n    print(matches)\n    return matches\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    def extract_quotation(text):\n        list_text=re.findall(r'[\\'\\\"]',text)\n        #print(list_text)\n        for i in list_text:\n            text1=text1.replace(i,\"\")\n        return text1\n    return extract_quotation(text1)\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    #print(\"\\n\")\n    #print(\"Function \" + str(extract_quotation))\n"
    },
    {
        "number": 725,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef extract_quotation(text1):\n    '''\n    Write a function to extract values between quotation marks \" \" of the given string.\n    '''\n    lst = text1.split('\"')\n    result = []\n    for i in lst:\n        if(i!=\"\"):\n            result.append(i)\n    return \" \".join(result)\n    \ndef extract_urls(text1):\n    '''\n    Write a function to extract URLs from the given text.\n    '''\n    lst = []\n    for i in text1.split():\n        if i[:4] == 'http':\n            lst.append(i)\n    return \" \".join(lst)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    temp_tup = tuple(test_tup)\n    tup_len = len(temp_tup)\n    new_tup = []\n    for i in range(tup_len):\n        new_tup.append(temp_tup[i] * (tup_len - i))\n    return tuple(new_tup)\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    N = len(test_tup) - 1\n    result = ()\n    for i in range(N):\n        result += (test_tup[i] * test_tup[i+1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    # initialize new tuple\n    new_tup = ()\n    # loop through the elements of the original tuple\n    for i in range(len(test_tup)):\n        # the new tuple should have length 1 less than the original tuple\n        new_tup = new_tup + (test_tup[i] * (i + 1), )\n        \n    return new_tup\n    \n    \n    \n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    return tuple(map(lambda x, y: x * y, *test_tup))\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    result = ()\n    for i in range(len(test_tup) - 1):\n        result += (test_tup[i] * test_tup[i + 1],)\n    return result\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    output_tuple = []\n    for i in range(len(test_tup)):\n        output_tuple.append(test_tup[i] * (i+1))\n    return output_tuple\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    \n    def multiply(t):\n        m = 1\n        new_t = []\n        for i in range(len(t)-1):\n            m = m * t[i]\n        new_t.append(m)\n        return new_t\n    \n    new_t = multiply(test_tup)\n    return new_t\n    \ntest = multiply_elements((5,2,6,7,3,4,8,5,8,4,2,1))\nprint(test"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    res = ()\n    for i in range(len(test_tup)-1):\n        res += (test_tup[i]*test_tup[i+1], )\n    return res\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    pass\n"
    },
    {
        "number": 726,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def multiply_elements(test_tup):\n    '''\n    Write a function that takes as input a tuple of numbers (t_1,...,t_{N+1}) and returns a tuple of length N where the i-th element of the tuple is equal to t_i * t_{i+1}.\n    '''\n    multiply_by_two = lambda x: (x * 2, )\n    return tuple(map(multiply_by_two, test_tup))\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    #write your code here\n    sum_list=[]\n    for i in range(len(lst1)):\n        sum_list.append(lst1[i]+lst2[i])\n    return sum_list\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return lst1+lst2\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i] + lst2[i])\n    return lst3\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return [a + b for a,b in zip(lst1,lst2)]\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    res = []\n    for i in range(len(lst1)):\n        res.append(lst1[i] + lst2[i])\n    return res\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_lst = []\n    for i in range(len(lst1)):\n        new_lst.append(lst1[i] + lst2[i])\n    return new_lst\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    \n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i]+lst2[i])\n    return new_list\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    return(lst1 + lst2)\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    new_list = []\n    for i in range(len(lst1)):\n        new_list.append(lst1[i]+lst2[i])\n    return new_list\n"
    },
    {
        "number": 728,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_list(lst1,lst2):\n    '''\n    Write a function takes as input two lists [a_1,...,a_n], [b_1,...,b_n] and returns [a_1+b_1,...,a_n+b_n].\n    '''\n    lst3 = []\n    for i in range(len(lst1)):\n        lst3.append(lst1[i]+lst2[i])\n    return lst3\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if len(nums) == 0:\n        return []\n    if len(nums) == 1:\n        return nums\n    \n    # step 1\n    dict1 = {}\n    dict1.setdefault(nums[0],0)\n    for i in range(1,len(nums)):\n        if nums[i]!= nums[i-1]:\n            dict1[nums[i]] = 1\n            if i+1 < len(nums):\n                dict1.setdefault(nums[i+1],0)\n    \n    # step 2\n    return [x for x, _ in groupby(sorted(dict1.keys()))]\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums: return nums\n    if not nums: return nums\n    d = {x:0 for x in nums}\n    for k in d.keys():\n        d[k] += 1\n    ret = []\n    for k, v in d.items():\n        if v > 1:\n            ret.append(k)\n    return ret\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    if not nums:\n        return []\n    st = []\n    l = len(nums)\n    for i in range(l):\n        if i == 0 or nums[i-1]!= nums[i]:\n            st.append(nums[i])\n    return st\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    new_nums = []\n    for k, g in groupby(nums):\n        new_nums.append(list(g))\n    print(new_nums)\n    return new_nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    x = []\n    for i in nums:\n        if i in x:\n            nums.remove(i)\n            x.append(i)\n        else:\n            x.append(i)\n    return nums\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    try:\n        list.sort(nums)\n        result = nums[0]\n        for i in range(1, len(nums)):\n            if nums[i]!= nums[i-1]:\n                result = nums[i-1]\n                if nums[i] == nums[i-1]:\n                    break\n        return result\n    except Exception as e:\n        print(\"Error: \", e)\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    prev = -1\n    for index, num in enumerate(nums):\n        if num == prev:\n            continue\n        prev = num\n        yield num\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    res = []\n    if nums == []:\n        return []\n    else:\n        for k, g in groupby(nums):\n            res.append(next(g))\n        return res\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    seen = set()\n    for num in nums:\n        if num in seen:\n            continue\n        seen.add(num)\n    return seen\n"
    },
    {
        "number": 730,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef consecutive_duplicates(nums):\n    '''\n    Write a function to remove consecutive duplicates of a given list.\n    '''\n    nums.sort()\n    # print(nums)\n    if len(nums) == 0:\n        return\n    if len(nums) == 1:\n        return nums\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*math.pow(r,2)*h\nprint(lateralsurface_cone(1.5,5))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return (math.pi * r**2) * (1/2) * ((h/2)**2 - ((h/2)**2) - (math.sin(math.radians(60)) * math.sin(math.radians(60)) * r**2 * math.cos(math.radians(60))))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = 2*pi*r**2*(1+h/r)\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return math.pi*r*r*h*0.5\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    return r**2*(math.sin(h/r)+math.cos(h/r))\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    # Base Cases\n    if (r == 0):\n        return 0\n    elif (r == 1):\n        return math.pi * h\n    elif (r >= 2):\n        if (r**2 - 1) == 0:\n            return math.pi * h * 2\n        else:\n            return 2 * (r**2 - 1) * (math.sqrt(r**2 - 1) * h) / 2\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s=r*math.pi*(1+1/(1+math.tan(math.radians(h)))**2)\n    print(s)\nlateralsurface_cone(5,30)\ndef lateralsurface_sphere(r):\n    '''\n    Write a function to find the lateral surface area of a sphere given radius r.\n    '''\n    s=4*math.pi*math.pow(r,2)\n    print(s)\nlateralsurface_sphere(1)\ndef lateralsurface_cylinder(h,r):\n    '''\n    Write a function to find the lateral surface area of a cylinder given height h and radius r.\n    '''\n    s=math.pi*h*math.pow(r,2)\n    print(s)\nlateralsurface_cylinder(10,2)\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    area = math.pi * r**2 * h/3\n    return area\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    s = r * h\n    return s\n"
    },
    {
        "number": 731,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef lateralsurface_cone(r,h):\n    '''\n    Write a function to find the lateral surface area of a cone given radius r and the height h.\n    '''\n    pi = math.pi\n    surf = pi*((r**2) + (h**2))\n    return surf\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    str = re.sub(r'[ \\,\\;\\.]', ':', text)\n    return str\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'[ ]',':', text)\n    text = re.sub(r'[ ]',':', text)\n    text = re.sub(r'[ ]',':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub(r\"[,.]\", \":\", text)\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\" \",\":\")\n    text = text.replace(\",\",\":\")\n    text = text.replace(\".\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return text.replace(' ', ':')\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    # text = \"This:is:a.com\"\n    # text = \"This:is:a.com,is:this.a.com\"\n    # text = \"This:is:a.com;is:this.a.com\"\n    # text = \"this:is:a.com,this:is:a.com,this:is:a.com,this:is:a.com,is:this.a.com\"\n    # text = \"this:is:a.com:is:a.com,is:this.a.com\"\n    # text = \"this::is:a.com,this::is:a.com\"\n    # text = \"this:is:a.com;is:this.a.com\"\n    # text = \"this:is:a.com\"\n    # text = \"this:is:a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com\"\n    # text = \"this:is:a.com;is:this.a.com;is:this.a.com"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    a = re.sub(r'[\\W_]+', '', text)\n    return a\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = text.replace(\",\",\":\")\n    text = text.replace(\" \",\":\")\n    text = text.replace(\".\",\":\")\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    text = re.sub(r'\\s', ':', text)\n    return text\n"
    },
    {
        "number": 732,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef replace_specialchar(text):\n    '''\n    Write a function to replace all occurrences of spaces, commas, or dots with a colon.\n    '''\n    return re.sub('[^0-9a-zA-Z., ]+', '', text)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    start = 0\n    end = len(A) - 1\n    mid = 0\n    while start <= end:\n        mid = (start + end) // 2\n        if A[mid] == x:\n            return mid\n        elif x < A[mid]:\n            end = mid - 1\n        else:\n            start = mid + 1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    return binary_search(A, x, 0, len(A)-1)\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low = 0\n    high = len(A)-1\n    \n    while low <= high:\n        mid = (low+high)//2\n        if A[mid] == x:\n            return mid\n        elif x > A[mid]:\n            low = mid+1\n        elif x < A[mid]:\n            high = mid-1\n    return -1\n    "
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if not A or A[0] > x:\n        return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if x == A[0]:\n        return 0\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    l = 0\n    r = len(A) - 1\n    while l <= r:\n        mid = l + (r-l)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] < x:\n            l = mid + 1\n        else:\n            r = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    \n    lower_bound = 0\n    upper_bound = len(A) - 1\n    \n    while lower_bound <= upper_bound:\n        middle = (upper_bound - lower_bound) // 2 + lower_bound\n        if A[middle] == x:\n            return middle\n        elif A[middle] < x:\n            lower_bound = middle + 1\n        else:\n            upper_bound = middle - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    left, right = 0, len(A)-1\n    while left <= right:\n        middle = (left + right) // 2\n        if A[middle] == x:\n            return middle\n        elif A[middle] < x:\n            left = middle + 1\n        else:\n            right = middle - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    if len(A) == 0:\n        return -1\n    low, high = 0, len(A) - 1\n    while low <= high:\n        mid = low + (high - low) // 2\n        if A[mid] == x:\n            return mid\n        if A[mid] < x:\n            low = mid + 1\n        else:\n            high = mid - 1\n    return -1\n"
    },
    {
        "number": 733,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_first_occurrence(A, x):\n    '''\n    Write a function to find the index of the first occurrence of a given number in a sorted array.\n    '''\n    low, high = 0, len(A)-1\n    while low <= high:\n        mid = (low + high)//2\n        if A[mid] == x:\n            return mid\n        elif A[mid] > x:\n            high = mid - 1\n        else:\n            low = mid + 1\n    return -1\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #code here\n    res = []\n    l = len(arr)\n    for i in range(l):\n        for j in range(i,l):\n            s = 1\n            for k in range(i,j+1):\n                s = s * arr[k]\n            res.append(s)\n    return sum(res)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if not arr:\n        return 0\n    \n    num_elements = len(arr)\n    \n    current_prod = 1\n    total_prod = 0\n    sub_array_prod = 0\n    \n    for i in range(num_elements):\n        sub_array_prod = 1\n        for j in range(i, num_elements):\n            sub_array_prod *= arr[j]\n            current_prod *= arr[j]\n            if j == i:\n                total_prod += sub_array_prod\n            else:\n                total_prod += current_prod * sub_array_prod\n                current_prod *= arr[j]\n                \n    return total_prod\n    "
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    #code here\n    return 0\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def is_Subarray(arr):\n        size = len(arr)\n        if size <= 1:\n            return False\n        for i in range(size):\n            for j in range(i+1, size):\n                if (arr[i] * arr[j]) in arr:\n                    return True\n        return False\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    if len(arr) == 1:\n        return arr[0]\n    \n    n = len(arr)\n    \n    # Following steps to get summation\n    # (1) we need to find the maximum\n    #    number of sublists and find the\n    #    corresponding summation\n    # (2) recursively calculate the sums\n    #    of sublists starting with arr[0]\n    #    and with the sum in the sublist\n    #    plus the sum of products of all\n    #    sublists ending with arr[n-1]\n    #    plus the summation of products of\n    #    all sublists ending with arr[n-1]\n    \n    max_len = (1 + max([0] + map(len, itertools.combinations(arr, 2)))) // 2\n    \n    # Calculate product of sublist\n    def product(arr):\n        ans = 1\n        for num in arr:\n            ans *= num\n        return ans\n    \n    # Calculate the product of sublist\n    def prod(arr, len_sublist):\n        if len_sublist == 1:\n            return arr[0]\n        return arr[0] * prod(arr, len_sublist - 1)\n    \n    # Find the summation of sublists\n    def summation(arr, len_sublist):\n        return sum(product(arr[:i]) * product(arr[i + 1 :])\n                    for i in range(len_sublist))\n    \n    # Call summation with maximum length\n    summation_with_max_len = summation(arr, max_len)\n    \n    # Calculate product of sublist\n    def prod_summation(arr, len_sublist):\n        if len_sublist == 1:\n            return arr[0]\n        return arr[0] * prod_summation(arr, len_sublist - 1)\n    \n    # Calculate the product of sublist\n    def prod_summation_prod(arr, len_sublist):\n        return summation_with_max_len - sum(product(arr[:i]) * product(arr[i + 1 :])\n                                            for i in range(len_sublist))\n    \n    return summation_with_max_len + prod_summation_prod(arr, max_len)\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    result = 0\n    n = len(arr)\n    for i in range(n):\n        for j in range(i,n):\n            result += arr[i]*arr[j]\n    return result\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    sub_prod = []\n    for i in range(0,len(arr)):\n        for j in range(i,len(arr)):\n            sub_prod.append(arr[i] * arr[j])\n    return(sum(sub_prod))\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # code here\n    #global list\n    #list = []\n    if len(arr) == 0:\n        return 0\n    sum = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            sub_arr = arr[i:j+1]\n            sum = sum + (sub_arr[0] * sub_arr[-1])\n    return sum\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    def get_sum_of_sublist(arr):\n        sum_of_sublist = 0\n        for i in range(len(arr)):\n            for j in range(i, len(arr)):\n                sum_of_sublist += arr[i]*arr[j]\n                if (j == len(arr)-1):\n                    break\n        return sum_of_sublist\n"
    },
    {
        "number": 734,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_Of_Subarray_Prod(arr):\n    '''\n    Write a python function to find sum of products of all possible sublists of a given list. https://www.geeksforgeeks.org/sum-of-products-of-all-possible-subarrays/\n    '''\n    # output = []\n    # def _sum_Of_Prod(arr, n, sum):\n    #     if n == 0:\n    #         return sum\n    #     if n == 1:\n    #         return arr[0]\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return n ^ (n & -n)\n    \nif __name__ == '__main__':\n    n = 0b00000010100101000001111010011100\n    n = 0b11000100000010000010100011110\n    print(set_middle_bits(n))"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & ~(n-1)  \n    return n \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    return ((n | (1 << (len(bin(n)) - 2)) - 1) & (1 << (len(bin(n)) - 2)) - 1)\n    \ndef set_middle_bits2(n):\n    return n ^ ((1 << (len(bin(n)) - 2)) - 1)\n    \nprint(set_middle_bits(121))\nprint(set_middle_bits2(121)"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    a = 0\n    for i in range(32):\n        a = (n >> i) & 1\n        if i < 5:\n            a = a ^ 1\n    return a\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & (2 ** n.bit_length() - 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    b = n\n    while (b > 0):\n        b = (b & (b - 1))\n    return (b)\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    # to toggle the first bit\n    temp = n >> 1 \n    temp = temp ^ n \n    n = temp \n    # to toggle the last bit \n    n = n << 1 \n    n = n ^ n \n    return n \n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    num = 0b10011111\n    n = n | (1 << num.bit_length() - 1)\n    return n\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    m=n\n    while(n>0):\n        # First remove the least significant bit\n        n=n>>1\n        # Now remove the second least significant bit\n        n=n>>1\n        # Now remove the third least significant bit\n        n=n>>1\n        # Now remove the fourth least significant bit\n        n=n>>1\n        # Now remove the last least significant bit\n        n=n>>1\n    print(\"After setting middle bits: \",m)\n    return m\n"
    },
    {
        "number": 735,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def set_middle_bits(n):  \n    '''\n    Write a python function to toggle bits of the number except the first and the last bit. https://www.geeksforgeeks.org/toggle-bits-number-expect-first-last-bits/\n    '''\n    n = n & (2**(n.bit_length())-1)\n    return n\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    if x >= a[-1]:\n        return len(a)\n    else:\n        return bisect.bisect_left(a, x, 0, len(a)-1)\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if len(a) == 0:\n        return 0\n    if x <= a[0]:\n        return len(a)\n    else:\n        return bisect.bisect_right(a, x, 0, len(a)-1)\ndef left_insertion_x(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return a.index(x) if x in a else -1\ndef right_insertion_x(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return len(a) if x not in a else a.index(x)\ndef left_insertion_y(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while i < len(a) and x >= a[i]:\n        i += 1\n    return i\ndef right_insertion_y(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = len(a) - 1\n    while i >= 0 and x <= a[i]:\n        i -= 1\n    return i\ndef bsearch(a, x):\n    '''\n    Write a function to search a value in a sorted list. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    while i < len(a):\n        if x == a[i]:\n            return i\n        if x < a[i]:\n            break\n        i += 1\n    return -1\ndef binary_search(a, x):\n    '''\n    Write a function to search a value in a sorted list. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    j = len(a) - 1\n    while i <= j:\n        m = (i + j) // 2\n        if a[m] == x:\n            return m\n        elif a[m] < x:\n            i = m + 1\n        else:\n            j = m - 1\n    return -1\ndef multi_bsearch(a, x, c):\n    '''\n    Write a function to search a value in a sorted list. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = 0\n    j = len(a) - 1\n    while i <= j:\n        m = (i + j) // 2\n        if a[m] == x:\n            return m\n        elif a[m] < x:\n            i = m + 1\n        else:\n            j = m - 1\n    while i <= j:\n        m = (i + j) // 2\n        if a[m] == x:\n            return m\n        elif a[m] > x:\n            j = m - 1\n        else:\n            i = m + 1\n    return -1\ndef num_to_letter(n):\n    '''\n    Write a function to find the character of a given digit. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    d = {0:\"zero\", 1:\"one\", 2:\"two\", 3:\"three\", 4:\"four\", 5:\"five\", 6:\"six\", 7:\"seven\", 8:\"eight\", 9:\"nine\"}\n    return d[n]\ndef letter_to_num(s):\n    '''\n    Write a function to find the digit of a given character. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    d = {\"zero\":\"0\", \"one\":\"1\", \"two\":\"2\", \"three\":\"3\", \"four\":\"4\", \"five\":\"5\", \"six\":\"6\", \"seven\":\"7\", \"eight\":\"8\", \"nine\":\"9\"}\n    return d[s]\ndef test_mult_bsearch():\n    '''\n    Write a function to test the multi_bsearch function. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a = list(range(1,11))\n    b = []\n    print(multi_bsearch(a, 1, b))\n    print(multi_bsearch(a, 1, b))\n    print(multi_bsearch(a, 10, b))\n    print(multi_bsearch(a, 3, b))\n    print(multi_bsearch(a, -1, b))\n    print(multi_bsearch(a, 8, b))\n    print(multi_bsearch(a, 8, b))\n    print(multi_bsearch(a, 8, b))\n    print(multi_bsearch(a, 8, b))\n    print(multi_bsearch(a, 8, b))\n    print(multi_bsearch(a, 8, b))\n    print(multi_bsearch(a, 8, b))\n    print(multi_bsearch(a, 8, b))\ndef test_binary_search():\n    '''\n    Write a function to test the binary_search function. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    a = list(range(1,11))\n    b = []\n    print(binary_search(a, 1))\n    print(binary_search(a, 1))\n    print(binary_search(a, 10))\n    print(binary_search(a, 3))\n    print(binary_search(a, -1))\n    print(binary_search(a, 8))\n    print(binary_search(a, 8))\n    print(binary_search(a, 8))\n    print(binary_search(a, 8))\n    print(binary_search(a, 8))\n    print(binary_search(a, 8))\n    print(binary_search(a, 8))\n    print(binary_search(a, 8))\n    print(binary_search(a, 8))\n    print(binary_search(a, 8))\n    print(binary_search(a, 8))\ndef test_bsearch():\n    '''\n    Write a function to test the bsearch function. https://www.w3resource.com/python-exercises/data-structures-and-a"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    return -1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return 0\n    elif a[i-1] == x:\n        return i\n    else:\n        return i-1\n    \ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == len(a):\n        return i\n    elif a[i] == x:\n        return i\n    else:\n        return i+1\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    if a==[]:\n        a.append(x)\n        return 0\n    i = 0\n    while i<len(a):\n        if x<a[i]:\n            break\n        i+=1\n    a.insert(i,x)\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == 0:\n        return a.index(x)\n    else:\n        return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    elif x < a[i]:\n        return i\n    else:\n        return i + 1\n    \n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    # Your code here\n    if x < a[0]:\n        return 0\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    n = len(a)\n    if n == 0:\n        return 0\n    i = bisect.bisect_left(a, x)\n    if i == n:\n        return n\n    return i\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    return bisect.bisect_left(a, x)\n"
    },
    {
        "number": 736,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef left_insertion(a, x):\n    '''\n    Write a function to locate the left insertion point for a specified value in sorted order. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-data-structure-exercise-24.php\n    '''\n    i = bisect.bisect_left(a, x)\n    if i == len(a):\n        return len(a)\n    else:\n        return i\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    string = \"Anshu\"\n    if re.match(regex, string): \n        print(\"Given string is starting with vowel\") \n    else: \n        print(\"Given string is not starting with vowel\") \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    \n    if re.match(regex,string) is not None:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex, string) is not None: \n        return True\n    else: \n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    return re.match(regex,string) is not None\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    match = re.match(regex, string)\n    if match:\n        return True\n    return False\n    "
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.match(regex,string):\n        return True\n    else:\n        return False\n        \ndef check_str1(string): \n    '''\n    Write a function to check whether the given string is ending with a vowel or not using regex.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n        \ndef check_str2(string): \n    '''\n    Write a function to check whether the given string is at least two characters long using regex.\n    '''\n    if re.search(regex,string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        print(True) \n    else: \n        print(False) \n    \n    \n    \n    \ndef check_str_2(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if re.search(regex, string): \n        print(True) \n    else: \n        print(False) \n    \n    \n    \n    \n    \nif __name__ == \"__main__\":\n    string = \"Hello\"\n    check_str(string) \n    \n    string = \"Aquileus\"\n    check_str(string)\n    \n    string = \"1a2\"\n    check_str(string) \n    \n    string = \"Camel\"\n    check_str_2(string) \n    \n    string = \"gUye\"\n    check_str_2(string) \n    \n    string = \"Camel\"\n    check_str_2(string) \n    \n    string = \"yax\"\n    check_str_2(string) \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    if(re.search(regex,string)): \n        return True\n    else: \n        return False\nprint(check_str(\"a\"))\nprint(check_str(\"hello\"))\nprint(check_str(\"Quiz\"))\nprint(check_str(\"HOWDY\"))\nprint(check_str(\"af\"))\nprint(check_str(\"Quiz\"))\nprint(check_str(\"ad\"))\n"
    },
    {
        "number": 737,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re \nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\ndef check_str(string): \n    '''\n    Write a function to check whether the given string is starting with a vowel or not using regex.\n    '''\n    try: \n        test = re.search(regex, string) \n        if test: \n            return 1\n    except TypeError: \n        return 0\n    \n    \n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n < 1:\n        return 0\n    else:\n        return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return (n*(n-1))/2\n    \ndef geometric_sum_iterative(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    sum = 1\n    while n > 1:\n        sum = sum * (n-1)\n        n -= 1\n    return sum\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return n\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 0:\n        return 1\n    return n * geometric_sum(n - 1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return 1 / (1 + n)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    return n*(n-1)/2\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n*(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n==0:\n        return 1\n    else:\n        return n*geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    return n + geometric_sum(n-1)\n"
    },
    {
        "number": 738,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def geometric_sum(n):\n    '''\n    Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/python-exercises/data-structures-and-algorithms/python-recursion-exercise-9.php\n    '''\n    if n == 1:\n        return 1\n    else:\n        return n * geometric_sum(n-1)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # edge case: if n is equal to 2, then return 1\n    if n==2:\n        return 1\n    # 2nd smallest triangular number\n    t=3*(n+1)-2\n    # for loop runs till t because the loop is inclusive \n    for i in range(1,t):\n        # nth triangular number \n        nthTNum=i*(i+1)//2 \n        # if nthTNum is equal to t, then return i \n        if nthTNum==t:\n            return i\n    # if tthTNum was not equal to t, return -1 \n    return -1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # x is the max possible value for the number\n    x = (pow(10, n) - 1)// 2\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    if n == 1:\n        return 1\n    if n == 2:\n        return 2\n    if n == 3:\n        return 3\n    if n == 4:\n        return 4\n    for i in range(1,n):\n        \n        if n == 2 and i == 1:\n            return 1\n        if n == 2 and i == 2:\n            return 2\n        if n == 3 and i == 1:\n            return 1\n        if n == 3 and i == 2:\n            return 2\n        if n == 4 and i == 1:\n            return 1\n        if n == 4 and i == 2:\n            return 2\n        if n == 4 and i == 3:\n            return 3\n        if n == 5 and i == 1:\n            return 1\n        if n == 5 and i == 2:\n            return 2\n        if n == 5 and i == 3:\n            return 3\n        if n == 6 and i == 1:\n            return 1\n        if n == 6 and i == 2:\n            return 2\n        if n == 6 and i == 3:\n            return 3\n        if n == 7 and i == 1:\n            return 1\n        if n == 7 and i == 2:\n            return 2\n        if n == 7 and i == 3:\n            return 3\n        if n == 8 and i == 1:\n            return 1\n        if n == 8 and i == 2:\n            return 2\n        if n == 8 and i == 3:\n            return 3\n        if n == 9 and i == 1:\n            return 1\n        if n == 9 and i == 2:\n            return 2\n        if n == 9 and i == 3:\n            return 3\n        if n == 10 and i == 1:\n            return 1\n        if n == 10 and i == 2:\n            return 2\n        if n == 10 and i == 3:\n            return 3\n        if n == 11 and i == 1:\n            return 1\n        if n == 11 and i == 2:\n            return 2\n        if n == 11 and i == 3:\n            return 3\n        if n == 12 and i == 1:\n            return 1\n        if n == 12 and i == 2:\n            return 2\n        if n == 12 and i == 3:\n            return 3\n        if n == 13 and i == 1:\n            return 1\n        if n == 13 and i == 2:\n            return 2\n        if n == 13 and i == 3:\n            return 3\n        if n == 14 and i == 1:\n            return 1\n        if n == 14 and i == 2:\n            return 2\n        if n == 14 and i == 3:\n            return 3\n        if n == 15 and i == 1:\n            return 1\n        if n == 15 and i == 2:\n            return 2\n        if n == 15 and i == 3:\n            return 3\n        if n == 16 and i == 1:\n            return 1\n        if n == 16 and i == 2:\n            return 2\n        if n == 16 and i == 3:\n            return 3\n        if n == 17 and i == 1:\n            return 1\n        if n == 17 and i == 2:\n            return 2\n        if n == 17 and i == 3:\n            return 3\n        if n == 18 and i == 1:\n            return 1\n        if n == 18 and i == 2:\n            return 2\n        if n == 18 and i == 3:\n            return 3\n        if n == 19 and i == 1:\n            return 1\n        if n == 19 and i == 2:\n            return 2\n        if n == 19 and i == 3:\n            return 3\n        if n == 20 and i == 1:\n            return 1\n        if n == 20 and i == 2:\n            return 2\n        if n == 20 and i == 3:\n            return 3\n        if n == 21 and i == 1:\n            return 1\n        if n == 21 and i == 2:\n            return 2\n        if n == 21 and i == 3:\n            return 3\n        if n == 22 and i == 1:\n            return 1\n        if n == 22 and i == 2:\n            return 2\n        if n == 22 and i == 3:\n            return 3\n        if n == 23 and i == 1:\n            return 1\n        if n == 23 and i == 2:\n            return 2\n        if n == 23 and i == 3:\n            return 3\n        if n == 24 and i == 1:\n            return 1\n        if n == 24 and i == 2:\n            return 2\n        if n == 24 and i == 3:\n            return 3\n        if n == 25 and i == 1:\n            return 1\n        if n == 25 and i == 2:\n            return 2\n        if n == 25 and i == 3:\n            return 3\n        if n == 26 and i == 1:\n            return 1\n        if n == 26 and i == 2:\n            return 2\n        if n == 26 and i == 3:\n            return 3\n        if n == 27 and i == 1:\n            return 1\n        if n == 27 and i == 2:\n            return 2\n        if n == 27 and i == 3:\n            return 3\n        if n == 28 and i == 1:\n            return 1\n        if n == 28 and i == 2:\n            return 2\n        if n == 28 and i == 3:\n            return 3\n        if n == 29 and i == 1:\n            return 1\n        if n == 29 and i == 2:\n            return 2\n        if n == 29 and i == 3:\n            return 3\n        if n == 30 and i == 1:\n            return 1\n        if n == 30 and i == 2:\n            return 2\n        if n == 30 and i == 3:\n            return 3\n        if n == 31 and i == 1:\n            return 1\n        if n == 31 and i == 2:\n            return 2\n        if n == 31 and i == 3:\n            return 3\n        if n == 32 and i == 1:\n            return 1\n        if n == 32 and i == 2:\n            return 2\n        if n == 32 and i == 3:\n            return 3\n        if n == 33 and i == 1:\n            return 1\n        if n == 33 and i == 2:\n            return 2\n        if n == 33 and i == 3:\n            return 3\n        if n == 34 and i == 1:\n            return 1\n        if n == 34 and i == 2:\n            return 2\n        if n == 34 and i == 3:\n            return 3\n        if n == 35 and i == 1:\n            return 1\n        if n == 35 and i == 2:\n            return 2\n        if n == 35 and i == 3:\n            return 3\n        if n == 36 and i == 1:\n            return 1\n        if n == 36 and i == 2:\n            return 2\n        if n == 36 and i == 3:\n            return 3\n        if n == 37 and i == 1:\n            return 1\n        if n == 37 and i == 2:\n            return 2\n        if n == 37 and i == 3:\n            return 3\n        if n == 38 and i == 1:\n            return 1\n        if n == 38 and i == 2:\n            return 2\n        if n == 38 and i == 3:\n            return 3\n        if n == 39 and i == 1:\n            return 1\n        if n == 39 and i == 2:\n            return 2\n        if n == 39 and i == 3:\n            return 3\n        if n == 40 and i == 1:\n            return 1\n        if n == 40 and i == 2:\n            return 2\n        if n == 40 and i == 3:\n            return 3\n        if n == 41 and i == 1:\n            return 1\n        if n == 41 and i == 2:\n            return 2\n        if n == 41 and i == 3:\n            return 3\n        if n == 42 and i == 1:\n            return 1\n        if n == 42 and i == 2:\n            return 2\n        if n == 42 and i == 3:\n            return 3\n        if n == 43 and i == 1:\n            return 1\n        if n == 43 and i == 2:\n            return 2\n        if n == 43 and i == 3:\n            return 3\n        if n == 44 and i == 1:\n            return 1\n        if n == 44 and i == 2:\n            return 2\n        if n == 44 and i == 3:\n            return 3\n        if n == 45 and i == 1:\n            return 1\n        i"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = n\n    while True:\n        i -= 1\n        if i * (i + 1) // 2 == n:\n            return i \n        elif i * (i + 1) // 2 > n:\n            return i \ndef find_Index_Quick(n):\n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while i * (i + 1) // 2 <= n:\n        i += 1\n    return i - 1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    i = 1\n    while True:\n        if n == 2*i**2:\n            return i-1\n        elif n == (2*i**2) + i**2:\n            return i-1\n        elif n == (2*i**2) + 2*i:\n            return i-1\n        elif n == (2*i**2) + 3*i:\n            return i-1\n        elif n == (2*i**2) + 4*i:\n            return i-1\n        elif n == (2*i**2) + 5*i:\n            return i-1\n        elif n == (2*i**2) + 6*i:\n            return i-1\n        elif n == (2*i**2) + 7*i:\n            return i-1\n        elif n == (2*i**2) + 8*i:\n            return i-1\n        elif n == (2*i**2) + 9*i:\n            return i-1\n        i = i + 1\n    \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # To find the smallest index of a triangular number with n digits \n    # 1) Check for the given number of digits n \n    # 2) Check whether n is even or odd \n    # 3) Check for the minimum number of steps required to reach the required index \n    # 4) Set the smallest index number as 0 \n    # 5) Start the loop from 1. \n    # 6) Check whether n is odd or even, \n    # and add 1 to the smallest number \n    # 7) If the required index is found, return the index \n    # 8) If not, decrement the number of steps required \n    # and go back to step 6. \n    # 9) If you reach the end of the array, return -1 \n    n = n - 1\n    a = 0 \n    b = 0 \n    while (True): \n        if (n % 2 == 0): \n            n = n / 2 \n            if (n == 0): \n                print(0) \n                return 0\n            else: \n                a = (a + 1) * 2 \n        else: \n            n = (n - 1) / 2 \n            if (n == 1): \n                print(1) \n                return 1\n            else: \n                a = (a + 1) * 2 \n        if (a == b): \n            print(-1) \n            return -1\n        b = a \n    \n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    # recursion \n    if n < 3: \n        return -1\n    # recursion end \n    k = int(math.sqrt(n))\n    t = 1\n    while k > 0:\n        k -= 1\n        t += 1\n        if t == n:\n            return (t-1)\n        t = t-k\n    # code here \n    t = t-2\n    return(t)\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        j = int(math.sqrt(i))\n        if j*(j+1) == i:\n            break\n    return i, j+1\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    res = 0\n    if n == 1:\n        res = 1\n    else:\n        res = n+1\n        for i in range(n-1):\n            res += 2*(n-i)\n        res -= (n+1)\n    return res\n"
    },
    {
        "number": 739,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef find_Index(n): \n    '''\n    Write a python function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\n    '''\n    for i in range(1,n+1):\n        i=i**2\n    for j in range(n+1,n**2):\n        j=j**2\n    for k in range(n+1,n**2):\n        k=k**2\n    for l in range(n+1,n**2):\n        l=l**2\n    if(i>=n):\n        return i\n    if(j>=n):\n        return j\n    if(k>=n):\n        return k\n    if(l>=n):\n        return l\n    return 0\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i, el in enumerate(test_tup):\n        if i == 0:\n            d[el] = 1\n        else:\n            d[el] = d[el - 1] + 1\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    tup_dict = {}\n    for i in range(0,len(test_tup),2):\n        tup_dict[test_tup[i]] = test_tup[i+1]\n    return tup_dict\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    #tuple_to_dict(test_tup)\n    if not test_tup:\n        return None\n    \n    ret = {}\n    ret[test_tup[0]] = test_tup[1]\n    for i in range(2, len(test_tup)):\n        ret[test_tup[i-1]] = test_tup[i]\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    # for i in range(len(test_tup)):\n    #     dct[test_tup[i]] = test_tup[i + 1]\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    pass\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(len(test_tup)):\n        key = test_tup[i]\n        value = test_tup[(i + 1) % len(test_tup)]\n        d[key] = value\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    d = {}\n    for i in range(0, len(test_tup) - 1, 2):\n        d[test_tup[i]] = test_tup[i + 1]\n    return d\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    dict_tup = {}\n    for i in range(len(test_tup)):\n        dict_tup[test_tup[i]] = test_tup[i+1]\n    return dict_tup\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    out_dict = {}\n    for ind,val in enumerate(test_tup):\n        out_dict[test_tup[ind]] = test_tup[ind+1]\n"
    },
    {
        "number": 740,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_to_dict(test_tup):\n    '''\n    Write a function to convert the given tuple to a key-value dictionary using adjacent elements. https://www.geeksforgeeks.org/python-convert-tuple-to-adjacent-pair-dictionary/\n    '''\n    test_dict = dict(zip(test_tup[::2], test_tup[1::2]))\n    return test_dict\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    import re\n    if re.search('[^0-9]', s) :\n        return False\n    elif len(s) < 2 :\n        return True\n    else :\n        return True if s[0] == s[1] else False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    for i in range(0,len(s)-1) :\n        if s[i]!= s[i+1]:\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0 or len(s) == 1:\n        return True\n    \n    char = s[0]\n    for i in range(1, len(s)):\n        if char!= s[i]:\n            return False\n        \n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == 0:\n        return False\n    else:\n        return s[0] == s[0]\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) < 1 :\n        return False\n    return True\n    \ndef only_uppercase(s) :\n    '''\n    Write a python function to check whether all the characters are only uppercase or not.\n    '''\n    if len(s) < 1 :\n        return False\n    for i in s:\n        if i.islower() == True :\n            return False\n    return True\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    s1 = s[0]\n    if s[0] == s[1] == s[2] :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    a = \"aa\"\n    b = \"a\"\n    c = \"abc\"\n    d = \"abcabc\"\n    e = \"aa\"\n    f = \"a\"\n    g = \"aa\"\n    h = \"a\"\n    i = \"a\"\n    j = \"ab\"\n    k = \"abababababababababab\"\n    l = \"ab\"\n    m = \"ab\"\n    n = \"a\"\n    o = \"aa\"\n    p = \"a\"\n    q = \"a\"\n    r = \"aa\"\n    s = \"a\"\n    t = \"a\"\n    u = \"a\"\n    v = \"a\"\n    w = \"a\"\n    x = \"a\"\n    y = \"a\"\n    z = \"a\"\n    \n    if a!= b:\n        print(\"a!= b\")\n    if a!= c:\n        print(\"a!= c\")\n    if a!= d:\n        print(\"a!= d\")\n    if a!= e:\n        print(\"a!= e\")\n    if a!= f:\n        print(\"a!= f\")\n    if a!= g:\n        print(\"a!= g\")\n    if a!= h:\n        print(\"a!= h\")\n    if a!= i:\n        print(\"a!= i\")\n    if a!= j:\n        print(\"a!= j\")\n    if a!= k:\n        print(\"a!= k\")\n    if a!= l:\n        print(\"a!= l\")\n    if a!= m:\n        print(\"a!= m\")\n    if a!= n:\n        print(\"a!= n\")\n    if a!= o:\n        print(\"a!= o\")\n    if a!= p:\n        print(\"a!= p\")\n    if a!= q:\n        print(\"a!= q\")\n    if a!= r:\n        print(\"a!= r\")\n    if a!= s:\n        print(\"a!= s\")\n    if a!= t:\n        print(\"a!= t\")\n    if a!= u:\n        print(\"a!= u\")\n    if a!= v:\n        print(\"a!= v\")\n    if a!= w:\n        print(\"a!= w\")\n    if a!= x:\n        print(\"a!= x\")\n    if a!= y:\n        print(\"a!= y\")\n    if a!= z:\n        print(\"a!= z\")\n    if b!= a:\n        print(\"b!= a\")\n    if b!= c:\n        print(\"b!= c\")\n    if b!= d:\n        print(\"b!= d\")\n    if b!= e:\n        print(\"b!= e\")\n    if b!= f:\n        print(\"b!= f\")\n    if b!= g:\n        print(\"b!= g\")\n    if b!= h:\n        print(\"b!= h\")\n    if b!= i:\n        print(\"b!= i\")\n    if b!= j:\n        print(\"b!= j\")\n    if b!= k:\n        print(\"b!= k\")\n    if b!= l:\n        print(\"b!= l\")\n    if b!= m:\n        print(\"b!= m\")\n    if b!= n:\n        print(\"b!= n\")\n    if b!= o:\n        print(\"b!= o\")\n    if b!= p:\n        print(\"b!= p\")\n    if b!= q:\n        print(\"b!= q\")\n    if b!= r:\n        print(\"b!= r\")\n    if b!= s:\n        print(\"b!= s\")\n    if b!= t:\n        print(\"b!= t\")\n    if b!= u:\n        print(\"b!= u\")\n    if b!= v:\n        print(\"b!= v\")\n    if b!= w:\n        print(\"b!= w\")\n    if b!= x:\n        print(\"b!= x\")\n    if b!= y:\n        print(\"b!= y\")\n    if b!= z:\n        print(\"b!= z\")\n    if c!= a:\n        print(\"c!= a\")\n    if c!= b:\n        print(\"c!= b\")\n    if c!= d:\n        print(\"c!= d\")\n    if c!= e:\n        print(\"c!= e\")\n    if c!= f:\n        print(\"c!= f\")\n    if c!= g:\n        print(\"c!= g\")\n    if c!= h:\n        print(\"c!= h\")\n    if c!= i:\n        print(\"c!= i\")\n    if c!= j:\n        print(\"c!= j\")\n    if c!= k:\n        print(\"c!= k\")\n    if c!= l:\n        print(\"c!= l\")\n    if c!= m:\n        print(\"c!= m\")\n    if c!= n:\n        print(\"c!= n\")\n    if c!= o:\n        print(\"c!= o\")\n    if c!= p:\n        print(\"c!= p\")\n    if c!= q:\n        print(\"c!= q\")\n    if c!= r:\n        print(\"c!= r\")\n    if c!= s:\n        print(\"c!= s\")\n    if c!= t:\n        print(\"c!= t\")\n    if c!= u:\n        print(\"c!= u\")\n    if c!= v:\n        print(\"c!= v\")\n    if c!= w:\n        print(\"c!= w\")\n    if c!= x:\n        print(\"c!= x\")\n    if c!= y:\n        print(\"c!= y\")\n    if c!= z:\n        print(\"c!= z\")\n    if d!= a:\n        print(\"d!= a\")\n    if d!= b:\n        print(\"d!= b\")\n    if d!= c:\n        print(\"d!= c\")\n    if d!= e:\n        print(\"d!= e\")\n    if d!= f:\n        print(\"d!= f\")\n    if d!= g:\n        print(\"d!= g\")\n    if d!= h:\n        print(\"d!= h\")\n    if d!= i:\n        print(\"d!= i\")\n    if d!= j:\n        print(\"d!= j\")\n    if d!= k:\n        print(\"d!= k\")\n    if d!= l:\n        print(\"d!= l\")\n    if d!= m:\n        print(\"d!= m\")\n    if d!= n:\n        print(\"d!= n\")\n    if d!= o:\n        print(\"d!= o\")\n    if d!= p:\n        print(\"d!= p\")\n    if d!= q:\n        print(\"d!= q\")\n    if d!= r:\n        print(\"d!= r\")\n    if d!= s:\n        print(\"d!= s\")\n    if d!= t:\n        print(\"d!= t\")\n    if d!= u:\n        print(\"d!= u\")\n    if d!= v:\n        print(\"d!= v\")\n    if d!= w:\n        print(\"d!= w\")\n    if d!= x:\n        print(\"d!= x\")\n    if d!= y:\n        print(\"d!= y\")\n    if d!= z:\n        print(\"d!= z\")\n    if e!= a:\n        print(\"e!= a\")\n    if e!= b:\n        print(\"e!= b\")\n    if e!= c:\n        print(\"e!= c\")\n    if e!= d:\n        print(\"e!= d\")\n    if e!= f:\n        print(\"e!= f\")\n    if e!= g:\n        print(\"e!= g\")\n    if e!= h:\n        print(\"e!= h\")\n    if e!= i:\n        print(\"e!= i\")\n    if e!= j:\n        print(\"e!= j\")\n    if e!= k:\n        print(\"e!= k\")\n    if e!= l:\n        print(\"e!= l\")\n    if e!= m:\n        print(\"e!= m\")\n    if e!= n:\n        print(\"e!= n\")\n    if e!= o:\n        print(\"e!= o\")\n    if e!= p:\n        print(\"e!= p\")\n    if e!= q:\n        print(\"e!= q\")\n    if e!= r:\n        print(\"e!= r\")\n    if e!= s:\n        print(\"e!= s\")\n    if e!= t:\n        print(\"e!= t\")\n    if e!= u:\n        print(\"e!= u\")\n    if e!= v:\n        print(\"e!= v\")\n    if "
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if s is None or len(s) == 0 :\n        return False\n    else :\n        return set(s).pop() == s[0]\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    if len(s) == len(set(s)) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 741,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def all_Characters_Same(s) :\n    '''\n    Write a python function to check whether all the characters are same or not.\n    '''\n    c = len(s)\n    if c == 0 :\n        return False\n    c = 1\n    while (c<=len(s)) :\n        if (s[c-1]!= s[0]) :\n            return False\n        c += 1\n    return True\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return ((1/6)*(side**2)*((3+(2*math.sqrt(3)))/4))\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = side**2\n    b = (side**2)/4\n    c = (side**2)*2/3\n    return a+b+c\ndef area_prism(side1, side2, side3):\n    '''\n    Write a function to caluclate the area of a prism.\n    '''\n    s = (side1+side2+side3)/2\n    a = s*(side1+side2+side3)\n    b = s*(side1+side2)\n    c = s*(side1+side3)\n    d = s*(side2+side3)\n    return (a,b,c,d)\ndef volume_tetrahedron(length, width, height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    a = length*width*height\n    b = length*width/2\n    c = length/2*width*height\n    d = length/2*width/2\n    e = length/2*width/2\n    f = length/2*width/2\n    g = length/2*width/2\n    return a+b+c+d+e+f+g\ndef volume_prism(side1, side2, side3):\n    '''\n    Write a function to caluclate the volume of a prism.\n    '''\n    s = (side1+side2+side3)/2\n    a = s*(side1+side2+side3)\n    b = s*(side1+side2)\n    c = s*(side1+side3)\n    d = s*(side2+side3)\n    return a+b+c+d\ndef vol_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylindre.\n    '''\n    a = math.pi*radius**2*height\n    b = math.pi*radius**2\n    c = 2*math.pi*radius*height\n    return a+b+c\ndef vol_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    a = math.pi*radius**2*height\n    b = 2*math.pi*radius*height\n    return a+b\ndef vol_cyl_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylindre and cone.\n    '''\n    a = math.pi*radius**2*height\n    b = math.pi*radius**2\n    c = 2*math.pi*radius*height\n    d = math.pi*radius\n    return a+b+c\ndef vol_cylinder_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder and cone.\n    '''\n    a = math.pi*radius**2*height\n    b = 2*math.pi*radius*height\n    return a+b\ndef vol_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    a = 4/3*math.pi*radius**3\n    b = 4*math.pi*radius**3\n    c = 4*math.pi*radius**3\n    return a+b+c\ndef vol_sphere_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a sphere and cone.\n    '''\n    a = math.pi*radius**3*height\n    b = math.pi*radius**2*height\n    c = math.pi*radius**3\n    return a+b+c\ndef volume_cone(height, radius):\n    '''\n    Write a function to caluclate the volume of a cone.\n    '''\n    a = math.pi*radius**2*height\n    b = math.pi*radius**2\n    c = math.pi*radius\n    return a+b+c\ndef volume_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder.\n    '''\n    a = math.pi*radius**2*height\n    b = 2*math.pi*radius*height\n    return a+b\ndef volume_cylinder_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder and cone.\n    '''\n    a = math.pi*radius**2*height\n    b = 2*math.pi*radius*height\n    return a+b\ndef volume_sphere(radius):\n    '''\n    Write a function to caluclate the volume of a sphere.\n    '''\n    a = 4/3*math.pi*radius**3\n    b = 4*math.pi*radius**3\n    c = 4*math.pi*radius**3\n    return a+b+c\ndef volume_sphere_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a sphere and cone.\n    '''\n    a = math.pi*radius**3*height\n    b = math.pi*radius**2*height\n    c = math.pi*radius**3\n    return a+b+c\ndef volume_cone_sphere(radius, height):\n    '''\n    Write a function to caluclate the volume of a cone and sphere.\n    '''\n    a = math.pi*radius**2*height\n    b = math.pi*radius**2\n    c = math.pi*radius\n    return a+b+c\ndef volume_cylinder_sphere(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder and sphere.\n    '''\n    a = math.pi*radius**2*height\n    b = 2*math.pi*radius*height\n    return a+b\ndef volume_cylinder_cone_sphere(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder and cone and sphere.\n    '''\n    a = math.pi*radius**2*height\n    b = 2*math.pi*radius*height\n    return a+b\ndef volume_sphere_cone_cylinder(radius, height):\n    '''\n    Write a function to caluclate the volume of a sphere and cone and cylinder.\n    '''\n    a = math.pi*radius**3*height\n    b = math.pi*radius**2*height\n    c = math.pi*radius**3\n    return a+b+c\ndef volume_sphere_cylinder_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a sphere and cone and cylinder.\n    '''\n    a = math.pi*radius**3*height\n    b = 2*math.pi*radius*height\n    c = math.pi*radius**3\n    return a+b+c\ndef volume_cylinder_sphere_cone(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder and cone and sphere.\n    '''\n    a = math.pi*radius**2*height\n    b = 2*math.pi*radius*height\n    c = math.pi*radius**3\n    return a+b+c\ndef volume_cylinder_cone_sphere(radius, height):\n    '''\n    Write a function to caluclate the volume of a cylinder and cone and sphere.\n    '''\n    a = math.pi*radius**2*height\n    b = 2*math.pi*radius*height\n    c = math.pi*radius**2\n    return a+b+c\ndef volume_cylinder_cylinder_cone(radius1, radius2, radius3, height):\n    '''\n    Write a function to caluclate the volume of a cylinder, cone and sphere and cylinder and cone.\n    '''\n    a = math.pi*radius1**2*height\n    b = 2*math.pi*radius1*radius2*height\n    c = math.pi*radius1**2*radius3*height\n    d = 2*math.pi*radius1*radius3*height\n    e = math.pi*radius1**2*height\n    f = 2*math.pi*radius1*height\n    g = math.pi*radius1**2\n    h = math.pi*radius2**2\n    i = "
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    area_tetrahedron = (1/2)*side*side*side\n    return area_tetrahedron\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*(math.sqrt(3)/3)*side**2\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    side = side\n    a = (1/2)*(side**2)\n    print('The area of the tetrahedron is ',a)\n    \ndef area_rectangle(length,breadth):\n    '''\n    Write a function to caluclate the area of a rectangle.\n    '''\n    length = length\n    breadth = breadth\n    a = length*breadth\n    print('The area of the rectangle is ',a)\n    \ndef area_circle(radius):\n    '''\n    Write a function to caluclate the area of a circle.\n    '''\n    radius = radius\n    a = 3.14*radius*radius\n    print('The area of the circle is ',a)\n    \ndef area_triangle(base,height):\n    '''\n    Write a function to caluclate the area of a triangle.\n    '''\n    base = base\n    height = height\n    a = (0.5)*base*height\n    print('The area of the triangle is ',a)\n    \ndef area_parallelogram(base,height):\n    '''\n    Write a function to caluclate the area of a parallelogram.\n    '''\n    base = base\n    height = height\n    a = (base*height)\n    print('The area of the parallelogram is ',a)\n    \ndef area_trapezium(base,height):\n    '''\n    Write a function to caluclate the area of a trapezium.\n    '''\n    base = base\n    height = height\n    a = (1/2)*(base+height)\n    print('The area of the trapezium is ',a)\n    \ndef area_rhombus(length,breadth):\n    '''\n    Write a function to caluclate the area of a rhombus.\n    '''\n    length = length\n    breadth = breadth\n    a = length*breadth\n    print('The area of the rhombus is ',a)\n    \ndef area_hexagon(side):\n    '''\n    Write a function to caluclate the area of a hexagon.\n    '''\n    side = side\n    a = 6*side\n    print('The area of the hexagon is ',a)\n    \ndef area_heptagon(side):\n    '''\n    Write a function to caluclate the area of a heptagon.\n    '''\n    side = side\n    a = side*math.sqrt(3)\n    print('The area of the heptagon is ',a)\n    \ndef area_octagon(side):\n    '''\n    Write a function to caluclate the area of a octagon.\n    '''\n    side = side\n    a = 4*side*math.sqrt(3)\n    print('The area of the octagon is ',a)\n    \ndef area_octagon_triangle(side,height):\n    '''\n    Write a function to caluclate the area of a triangle inscribed in an octagon.\n    '''\n    side = side\n    height = height\n    a = (height**2)/(2*height)\n    print('The area of the triangle inscribed in the octagon is ',a)\n    \ndef area_square(length,breadth):\n    '''\n    Write a function to caluclate the area of a square.\n    '''\n    length = length\n    breadth = breadth\n    a = length*breadth\n    print('The area of the square is ',a)\n    \ndef area_trapezium_square(base,height,length):\n    '''\n    Write a function to caluclate the area of a trapezium and square.\n    '''\n    base = base\n    height = height\n    length = length\n    a = (base+height)/2\n    print('The area of the square inscribed in the trapezium is ',a)\n    \ndef area_parallelogram_square(base,height,length):\n    '''\n    Write a function to caluclate the area of a parallelogram and square.\n    '''\n    base = base\n    height = height\n    length = length\n    a = base*height\n    print('The area of the square inscribed in the parallelogram is ',a)\n    \ndef area_cube(side):\n    '''\n    Write a function to caluclate the area of a cube.\n    '''\n    side = side\n    a = 6*side**2\n    print('The area of the cube is ',a)\n    \ndef area_triangle_sphere(radius):\n    '''\n    Write a function to caluclate the area of a triangle inscribed in a sphere.\n    '''\n    radius = radius\n    a = (radius**2)*math.pi\n    print('The area of the triangle inscribed in the sphere is ',a)\n    \ndef area_trapezium_sphere(base,height,radius):\n    '''\n    Write a function to caluclate the area of a trapezium and sphere.\n    '''\n    base = base\n    height = height\n    radius = radius\n    a = (base*radius*height)/2\n    print('The area of the trapezium is ',a)\n    \ndef area_parallelogram_sphere(base,height,radius):\n    '''\n    Write a function to caluclate the area of a parallelogram and sphere.\n    '''\n    base = base\n    height = height\n    radius = radius\n    a = base*height\n    print('The area of the parallelogram is ',a)\n    \ndef area_square_sphere(side,radius):\n    '''\n    Write a function to caluclate the area of a square and sphere.\n    '''\n    side = side\n    radius = radius\n    a = 4*side*math.pi*radius**2\n    print('The area of the square is ',a)\n    \ndef area_heptagon_sphere(side,radius):\n    '''\n    Write a function to caluclate the area of a heptagon and sphere.\n    '''\n    side = side\n    radius = radius\n    a = side*radius*math.sqrt(3)\n    print('The area of the heptagon is ',a)\n    \ndef area_heptagon_triangle_sphere(side,height,radius):\n    '''\n    Write a function to caluclate the area of the triangle inscribed in a heptagon and sphere.\n    '''\n    side = side\n    height = height\n    radius = radius\n    a = (radius**2)*(height**2)/(6*math.sqrt(3))\n    print('The area of the triangle inscribed in the sphere is ',a)\n    \ndef area_heptagon_trapezium_sphere(side,height,radius):\n    '''\n    Write a function to caluclate the area of the trapezium and sphere.\n    '''\n    side = side\n    height = height\n    radius = radius\n    a = (side*radius*height)/2\n    print('The area of the trapezium is ',a)\n    \ndef area_cube_sphere(side,radius):\n    '''\n    Write a function to caluclate the area of a cube and sphere.\n    '''\n    side = side\n    radius = radius\n    a = side**2*math.pi*radius**2\n    print('The area of the cube is ',a)\n    \ndef area_rectangle_square_sphere(length,breadth,radius):\n    '''\n    Write a function to caluclate the area of a rectangle and square and sphere.\n    '''\n    length = length\n    breadth = breadth\n    radius = radius\n    a = length*breadth*math.pi*radius**2\n    print('The area of the rectangle is ',a)\n    \ndef area_triangle_circle_sphere(side,radius):\n    '''\n    Write a function to caluclate the area of a triangle and sphere.\n    '''\n    side = side\n    radius = radius\n    a = (side**2)*math.pi*radius**2\n    print('The area of the triangle is ',a)\n    \ndef area_trapezium_square_sphere(base,height,radius):\n    '''\n    Write a function to caluclate the area of a trapezium and square and sphere.\n    '''\n    base = base\n    height = height\n    radius = radius\n    a = (base*radius*height)/2\n    print('The area of the trapezium is ',a)\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    print(f'Area of a tetrahedron of side: {side} is {area_tetrahedron(side)}\\n')\n    \n    \ndef area_paraboloid(side):\n    '''\n    Write a function to caluclate the area of a paraboloid.\n    '''\n    print(f'Area of a paraboloid of side: {side} is {area_paraboloid(side)}\\n')\n    \n    \ndef area_ellipsoid(side1,side2):\n    '''\n    Write a function to caluclate the area of an ellipsoid.\n    '''\n    print(f'Area of a ellipsoid of side 1: {side1} and side 2: {side2} is {area_ellipsoid(side1,side2)}\\n')\n    \n    \ndef area_cuboid(side1,side2,side3):\n    '''\n    Write a function to caluclate the area of a cuboid.\n    '''\n    print(f'Area of a cuboid of side 1: {side1} and side 2: {side2} and side 3: {side3} is {area_cuboid(side1,side2,side3)}\\n')\n    \n    \ndef volume_tetrahedron(side,height):\n    '''\n    Write a function to caluclate the volume of a tetrahedron.\n    '''\n    print(f'Volume of a tetrahedron of side: {side} and height: {height} is {volume_tetrahedron(side,height)}\\n')\n    \n    \ndef volume_paraboloid(side,height):\n    '''\n    Write a function to caluclate the volume of a paraboloid.\n    '''\n    print(f'Volume of a paraboloid of side: {side} and height: {height} is {volume_paraboloid(side,height)}\\n')\n    \n    \ndef volume_ellipsoid(side1,side2,height):\n    '''\n    Write a function to caluclate the volume of an ellipsoid.\n    '''\n    print(f'Volume of an ellipsoid of side 1: {side1} and side 2: {side2} and height: {height} is {volume_ellipsoid(side1,side2,height)}\\n')\n    \n    \ndef volume_cuboid(side1,side2,side3,height):\n    '''\n    Write a function to caluclate the volume of a cuboid.\n    '''\n    print(f'Volume of a cuboid of side 1: {side1} and side 2: {side2} and side 3: {side3} and height: {height} is {volume_cuboid(side1,side2,side3,height)}\\n')\n    \n    \ndef radius_of_sphere(radius):\n    '''\n    Write a function to caluclate the radius of a sphere.\n    '''\n    print(f'Radius of a sphere with radius: {radius} is {radius_of_sphere(radius)}\\n')\n    \n    \ndef radius_of_cylinder(radius,height):\n    '''\n    Write a function to caluclate the radius of a cylinder.\n    '''\n    print(f'Radius of a cylinder with radius: {radius} and height: {height} is {radius_of_cylinder(radius,height)}\\n')\n    \n    \ndef radius_of_cone(radius1,radius2,height):\n    '''\n    Write a function to caluclate the radius of a cone.\n    '''\n    print(f'Radius of a cone with radius: {radius1} and radius: {radius2} and height: {height} is {radius_of_cone(radius1,radius2,height)}\\n')\n    \n    \ndef circumference_of_circular_semi_circle(radius):\n    '''\n    Write a function to caluclate the circumference of a circular semi-circle.\n    '''\n    print(f'The circumference of a circular semi-circle with radius: {radius} is {circumference_of_circular_semi_circle(radius)}\\n')\n    \n    \ndef circumference_of_circular_semi_ellipse(radius1,radius2):\n    '''\n    Write a function to caluclate the circumference of a circular semi-ellipse.\n    '''\n    print(f'The circumference of a circular semi-ellipse with radius: {radius1} and radius: {radius2} is {circumference_of_circular_semi_ellipse(radius1,radius2)}\\n')\n    \n    \ndef circumference_of_elliptical_semi_circle(radius1,radius2):\n    '''\n    Write a function to caluclate the circumference of a elliptical semi-circle.\n    '''\n    print(f'The circumference of a elliptical semi-circle with radius: {radius1} and radius: {radius2} is {circumference_of_elliptical_semi_circle(radius1,radius2)}\\n')\n    \n    \ndef circumference_of_elliptical_semi_ellipse(radius1,radius2,angle):\n    '''\n    Write a function to caluclate the circumference of an elliptical semi-ellipse.\n    '''\n    print(f'The circumference of an elliptical semi-ellipse with radius: {radius1} and radius: {radius2} and angle: {angle} is {circumference_of_elliptical_semi_ellipse(radius1,radius2,angle)}\\n')\n    \n    \ndef circumference_of_circular_ellipse(radius1,radius2):\n    '''\n    Write a function to caluclate the circumference of a circular ellipse.\n    '''\n    print(f'The circumference of a circular ellipse with radius: {radius1} and radius: {radius2} is {circumference_of_circular_ellipse(radius1,radius2)}\\n')\n    \n    \ndef circumference_of_elliptical_ellipse(radius1,radius2,angle):\n    '''\n    Write a function to caluclate the circumference of an elliptical ellipse.\n    '''\n    print(f'The circumference of an elliptical ellipse with radius: {radius1} and radius: {radius2} and angle: {angle} is {circumference_of_elliptical_ellipse(radius1,radius2,angle)}\\n')\n    \n    \ndef circumference_of_elliptical_semi_ellipse(radius1,radius2,angle):\n    '''\n    Write a function to caluclate the circumference of an elliptical semi-ellipse.\n    '''\n    print(f'The circumference of an elliptical semi-ellipse with radius: {radius1} and radius: {radius2} and angle: {angle} is {circumference_of_elliptical_semi_ellipse(radius1,radius2,angle)}\\n')\n    \n    \ndef circumference_of_parabolic_semi_ellipse(radius1,radius2):\n    '''\n    Write a function to caluclate the circumference of a parabolic semi-ellipse.\n    '''\n    print(f'The circumference of a parabolic semi-ellipse with radius: {radius1} and radius: {radius2} is {circumference_of_parabolic_semi_ellipse(radius1,radius2)}\\n')\n    \n    \ndef circumference_of_parabolic_semi_circle(radius):\n    '''\n    Write a function to caluclate the circumference of a parabolic semi-circle.\n    '''\n    print(f'The circumference of a parabolic semi-circle with radius: {radius} is {circumference_of_parabolic_semi_circle(radius)}\\n')\n    \n    \ndef circumference_of_parabolic_semi_ellipse(radius1,radius2):\n    '''\n    Write a function to caluclate the circumference of a parabolic semi-ellipse.\n    '''\n    print(f'The circumference of a parabolic semi-ellipse with radius: {radius1} and radius: {radius2} is {circumference_of_parabolic_semi_ellipse(radius1,radius2)}\\n')\n    \n    \ndef circumferenc"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (side ** 2) / 6\n    \n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return (4*(side**2))/3\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    a = (side**2)/6\n    area = (a)**(1/2)\n    return area\n"
    },
    {
        "number": 742,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef area_tetrahedron(side):\n    '''\n    Write a function to caluclate the area of a tetrahedron.\n    '''\n    return 4*math.sqrt(2)/3*side**3\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        list.append(list.pop(0))\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    for i in range(m):\n        # it will rotate list to the left by 1\n        list.append(list.pop(0))\n    return list\n    \n    \nif __name__ == '__main__':\n    list_ = [1, 2, 3, 4, 5, 6, 7]\n    rotate_right(list_, 3)\n    print(list_"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    # initialize variable\n    l = list\n    i = 0\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    result = []\n    for _ in range(m):\n        result.append(list.pop())\n    for _ in range(m):\n        result.append(list.pop(0))\n    return result\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    #rotate_right_list(list, 1)\n    # rotate_right_list(list, 2)\n    # rotate_right_list(list, 3)\n    # rotate_right_list(list, 4)\n    # rotate_right_list(list, 5)\n    # rotate_right_list(list, 6)\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if len(list) > m:\n        for i in range(m):\n            if i == m-1:\n                list.append(list.pop(0))\n            else:\n                list.append(list.pop(0))\n    else:\n        for i in range(len(list)-1):\n            if i == len(list)-m-1:\n                list.insert(0,list.pop(len(list)-1))\n            else:\n                list.insert(0,list.pop(0))\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    left = 0\n    right = m-1\n    while left<right:\n        list[left], list[right] = list[right], list[left]\n        left += 1\n        right -= 1\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    m = m % len(list)\n    return list[-m:] + list[:-m]\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if not list or len(list) < m:\n        return list\n    for i in range(m):\n        list.append(list[0])\n        del list[0]\n    return list\n"
    },
    {
        "number": 743,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rotate_right(list, m):\n    '''\n    Write a function to rotate a given list by specified number of items to the right direction. https://www.geeksforgeeks.org/python-program-right-rotate-list-n/\n    '''\n    if m >= len(list):\n        return list\n    else:\n        temp = list[-1]\n        for i in range(len(list)-1, -1, -1):\n            list[i] = list[i-1]\n        list[0] = temp\n        return list\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if any(elem is None for elem in test_tup):\n        return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    no_none = True\n    for e in test_tup:\n        if e == None:\n            no_none = False\n            break\n    return no_none\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for value in test_tup:\n        if value is None:\n            return True\n    return False\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    return all(x is not None for x in test_tup)\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    if None in test_tup:\n        print('True')\n    else:\n        print('False')\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for i in test_tup:\n        if i == None:\n            none_count += 1\n    return none_count\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    \n    try:\n        if len(test_tup)>0:\n            if test_tup[0] == None:\n                print(f'{test_tup} has {len(test_tup)} elements')\n            else:\n                print(f'{test_tup} has {len(test_tup)} elements')\n        else:\n            print(f'{test_tup} has 0 elements')\n    except:\n        print(f'{test_tup} has 0 elements')\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    none_count = 0\n    for i in test_tup:\n        if i == None:\n            none_count += 1\n    if none_count == 0:\n        print(\"YES\")\n    else:\n        print(\"NO\")\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    for i in test_tup:\n        if i == None:\n            return False\n    return True\n"
    },
    {
        "number": 744,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_none(test_tup):\n    '''\n    Write a function to check if the given tuple has any none value or not.\n    '''\n    result = 0\n    for i in test_tup:\n        if i is None:\n            result = result+1\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: not (int(startnum)%int(x)),list(map(lambda y: list(map(lambda z: int(y)/int(z),[z for z in range(startnum,endnum)])),[str(startnum) for startnum in range(startnum,endnum) if startnum!=0]))))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [str(num) for num in range(startnum, endnum+1) if all(lambda x: x%num == 0 for x in list(str(num)))]\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    a = []\n    for i in range(startnum, endnum):\n        if is_divisible(i):\n            a.append(i)\n    return a\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return list(filter(lambda x: x % int(startnum) == 0 and x % int(endnum) == 0, range(int(startnum), int(endnum)+1)))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    numbers = range(startnum, endnum)\n    result = []\n    for num in numbers:\n        s = str(num)\n        if all(num % i == 0 for i in map(int, s)):\n            result.append(num)\n    return result\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    if not startnum < endnum:\n        print(\"Error, start value must be lower than end value\")\n        return None\n    else:\n        return set([i for i in range(startnum, endnum + 1) if int(str(i)[::-1]) % int(str(i)[0]) == 0])\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    num = []\n    for i in range(startnum, endnum+1):\n        string = str(i)\n        string_list = []\n        for j in string:\n            string_list.append(int(j))\n        if len(string_list) == len(set(string_list)):\n            num.append(i)\n    return num\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    for x in range(startnum,endnum+1):\n        if all(x % d == 0 for d in map(int,str(x))):\n            print(x, end=\" \")\n    \n    \n    \n    \ndef is_divisible_by_4(number):\n    '''\n    Write a function to check whether a given number is divisible by 4.\n    '''\n    if number % 4 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return filter(lambda x: all(map(lambda y: x % int(y) == 0, str(x))), range(startnum, endnum+1))\n"
    },
    {
        "number": 745,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def divisible_by_digits(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where every number is divisible by every digit it contains. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-24.php\n    '''\n    return [i for i in range(startnum, endnum+1) if all(i%x == 0 for x in range(1, len(str(i))+1))]\n    \n    \ndef no_numbers(startnum, endnum):\n    '''\n    Write a function to find numbers within a given range from startnum ti endnum where each number contains no digits. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-25.php\n    '''\n    return [i for i in range(startnum, endnum+1) if not any(i%x == 0 for x in range(1, len(str(i))+1))]\n    \n    \ndef len_longest_word(input_string):\n    '''\n    Write a function to return the length of the longest word in a sentence. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-26.php\n    '''\n    return max(len(i) for i in input_string.split(\" \"))\n    \n    \ndef get_vowels(input_string):\n    '''\n    Write a function to count the number of vowels in the sentence. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-27.php\n    '''\n    return sum(1 for i in input_string if i in ['a','e','i','o','u','A','E','I','O','U'])\n    \n    \ndef remove_duplicates(my_list):\n    '''\n    Write a function to remove duplicates in the list. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-28.php\n    '''\n    return list(set(my_list))\n    \n    \ndef remove_special_characters(input_string):\n    '''\n    Write a function to return the input string without special characters. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-29.php\n    '''\n    return re.sub(r\"[^a-zA-Z0-9.]+\", \"\", input_string)\n    \n    \ndef find_greater_than_average(input_list):\n    '''\n    Write a function to return the index of a number that is greater than the average of all other numbers. https://www.w3resource.com/python-exercises/lambda/python-lambda-exercise-30.php\n    '''\n    return input_list.index(sum(input_list)/len(input_list))\n    \n    \ndef fibonacci(num):\n    '''\n    Write a function that takes a positive integer as input and returns the Nth Fibonacci number.\n    '''\n    return (num-1) + (num-2) if num >= 3 else 1\n    \n    \ndef get_multiples_of_3(input_list):\n    '''\n    Write a function that takes a list and returns a list with all elements of the input list multiplied by 3.\n    '''\n    return list(map(lambda x: x*3, input_list))\n    \n    \ndef check_for_palindrome(input_string):\n    '''\n    Write a function to check whether a given string is a palindrome or not.\n    '''\n    return input_string == input_string[::-1]\n    \n    \ndef sum_of_squares(n):\n    '''\n    Write a function that takes a positive integer and returns the sum of the squares of all positive integers up to and including the integer.\n    '''\n    return sum([x*x for x in range(1, n+1)])\n    \n    \ndef list_nested_lists():\n    '''\n    Write a function to return the sums of the cubes of the numbers in a nested list.\n    '''\n    return sum([sum([i**3 for i in x]) for x in [[i for i in range(1, j+1)]]])\n    \n    \ndef min_max_length(input_list):\n    '''\n    Write a function to return the length of the minimum and maximum elements in the given list.\n    '''\n    return (min([len(x) for x in input_list]), max([len(x) for x in input_list]))\n    \n    \ndef list_nested_lists_2():\n    '''\n    Write a function to return the number of occurrences of each number in a nested list.\n    '''\n    return [(len(x), x) for x in [[1,2,3], [4,5,6]]]\n    \n    \ndef list_nested_lists_3():\n    '''\n    Write a function to return the product of each number in a nested list.\n    '''\n    return [(x*y) for x in [[1,2,3], [4,5,6]] for y in [[1,2,3], [4,5,6]]]\n    \n    \ndef make_list_from_string(input_string):\n    '''\n    Write a function to return a list of numbers from a string. The string consists of digits, hyphens and spaces.\n    '''\n    return list(map(int, input_string.split()))\n    \n    \ndef get_largest_and_smallest_number(input_list):\n    '''\n    Write a function to return the largest and smallest numbers in a list.\n    '''\n    return (max(input_list), min(input_list))\n    \n    \ndef get_largest_and_smallest_number_2(input_list):\n    '''\n    Write a function to return the largest and smallest numbers in a list.\n    '''\n    return (max(input_list), min(input_list))\n    \n    \ndef even_odd_numbers(input_list):\n    '''\n    Write a function to return a list with the numbers from input_list in the even positions and the odd positions.\n    '''\n    return input_list[::2], input_list[1::2]\n    \n    \ndef sort_list_of_strings(input_list):\n    '''\n    Write a function to return the input list sorted in alphabetical order.\n    '''\n    return sorted(input_list)\n    \n    \ndef word_break(input_string):\n    '''\n    Write a function to return true if input_string can be segmented into a list of words.\n    '''\n    words = [\"I\", \"am\", \"god\", \"all\", \"Geeks\", \"for\", \"Geeks\"]\n    words_upper = [\"I\", \"am\", \"GOD\", \"all\", \"Geeks\", \"for\", \"Geeks\"]\n    words_uppercase = [\"I\", \"am\", \"GOD\", \"all\", \"Geeks\", \"for\", \"Geeks\"]\n    return any([i in input_string.split() for i in words])\n    \n    \ndef join_strings(input_list):\n    '''\n    Write a function to join the words in a list.\n    '''\n    return \" \".join(input_list)\n    \n    \ndef join_strings_2(input_list):\n    '''\n    Write a function to join the words in a list.\n    '''\n    return \",\".join(input_list)\n    \n    \ndef is_prime_number(num):\n    '''\n    Write a function to return true if the given number is prime.\n    '''\n    return num > 1 and all([num % i!= 0 for i in range(2, num)])\n    \n    \ndef is_prime_number_2(num):\n    '''\n    Write a function to return true if the given number is prime.\n    '''\n    return num > 1 and all([num % i!= 0 for i in range(2, int(sqrt(num))+1)])\n    \n    \ndef prime_factorization(num):\n    '''\n    Write a function to return a list of prime factors of a given number.\n    '''\n    return prime_factorization_recursive(num)\n    \n    \ndef prime_factorization_recursive(num):\n    '''\n    Write a function to return a list of prime factors o"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    # the angle in radians\n    theta = math.radians(a)\n    # the radius\n    r = math.radians(r)\n    # calculate the area\n    area = math.pi*(r**2)*(math.sin(theta)/2)\n    return area\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    angle = math.radians(a)\n    return math.pi*r*(r**2 - r*math.cos(angle))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>=360:\n        return None\n    return (r**2)*math.sin(a/2)\nprint(\"Tests for sector_area function:\")\nassert sector_area(1,0) == 1\nassert sector_area(1,45) == 1\nassert sector_area(1,90) == 1\nassert sector_area(1,180) == 1\nassert sector_area(1,360) == 1\nassert sector_area(1,360+45) == 1\nassert sector_area(1,360+90) == 1\nassert sector_area(1,360+180) == 1\nassert sector_area(1,360+360) == 1\nassert sector_area(1,360+360+45) == 1\nassert sector_area(1,360+360+90) == 1\nassert sector_area(1,360+360+180) == 1\nassert sector_area(1,360+360+360) == 1\nassert sector_area(1,360+360+360+45) == 1\nassert sector_area(1,360+360+360+90) == 1\nassert sector_area(1,360+360+360+180) == 1\nassert sector_area(1,360+360+360+360) == 1\nassert sector_area(1,360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360) == 1\nassert sector_area(1,360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360) == 1\nassert sector_area(1,360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360) == 1\nassert sector_area(1,360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+180) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+45) == 1\nassert sector_area(1,360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+360+90) == 1\nassert secto"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a>360:\n        return None\n    else:\n        return (math.pi*r**2) * a/360\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (a>360):\n        print('Wrong input. Area of the sector is not defined.')\n    else:\n        a=math.radians(a)\n        h=math.sin(a/2)\n        #print(h)\n        a=r*r*math.sin(a/2)\n        #print(a)\n        return a\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if (r == None or a == None):\n        return None\n    if a > 360:\n        return None\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    return math.pi*(r**2)*(a/360)\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if(a>360):\n        return None\n    else:\n        return(math.pi*r*r*a/360)\n        \nprint(sector_area(10,45))\n"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    if a<0 or a>360:\n        return None\n    else:\n        area=math.pi*(r**2)*(a/360)\n        return area\n    # your code here\n    \ndef cuboid_volume(b,h,l):\n    '''\n    Write a function to find volume of a cuboid. The function takes the length, breadth and height of cuboid as inputs. Function should return None if the length, breadth or height is less than 0.\n    '''\n    if l<0 or b<0 or h<0:\n        return None\n    else:\n        volume=b*h*l\n        return volume\n    # your code here\n    \ndef cal_area(r,n):\n    '''\n    Write a function to find area of a regular polygon with n sides.\n    '''\n    area=1/2*math.pi*r*(r+1)\n    if n<2:\n        return None\n    else:\n        return area\n    # your code here\n    \ndef dist(x1,y1,x2,y2):\n    '''\n    Write a function to find distance between two points.\n    '''\n    dist=math.sqrt(((x2-x1)**2)+((y2-y1)**2))\n    return dist\n    # your code here\n    \ndef minimum(a,b,c):\n    '''\n    Write a function to find minimum of three numbers.\n    '''\n    if a<b and a<c:\n        minimum=a\n    elif b<a and b<c:\n        minimum=b\n    elif c<a and c<b:\n        minimum=c\n    else:\n        return None\n    # your code here\n    \ndef get_new_name(name):\n    '''\n    Write a function to get the new name from an old name.\n    '''\n    name=name.replace('a','@')\n    name=name.replace('A','@')\n    name=name.replace('b','$')\n    name=name.replace('B','$')\n    name=name.replace('c','^')\n    name=name.replace('C','^')\n    name=name.replace('d','&')\n    name=name.replace('D','&')\n    name=name.replace('e','*')\n    name=name.replace('E','*')\n    name=name.replace('f','#')\n    name=name.replace('F','#')\n    name=name.replace('g','.')\n    name=name.replace('G','.')\n    name=name.replace('h','(')\n    name=name.replace('H','(')\n    name=name.replace('i','_')\n    name=name.replace('I','_')\n    name=name.replace('j','+')\n    name=name.replace('J','+')\n    name=name.replace('k','=')\n    name=name.replace('K','=')\n    name=name.replace('l','9')\n    name=name.replace('L','9')\n    name=name.replace('m','#')\n    name=name.replace('M','#')\n    name=name.replace('n','-')\n    name=name.replace('N','-')\n    name=name.replace('o','0')\n    name=name.replace('O','0')\n    name=name.replace('p','&')\n    name=name.replace('P','&')\n    name=name.replace('q','W')\n    name=name.replace('Q','W')\n    name=name.replace('r','5')\n    name=name.replace('R','5')\n    name=name.replace('s','@')\n    name=name.replace('S','@')\n    name=name.replace('t','9')\n    name=name.replace('T','9')\n    name=name.replace('u','Y')\n    name=name.replace('U','Y')\n    name=name.replace('v','^')\n    name=name.replace('V','^')\n    name=name.replace('w','(')\n    name=name.replace('W','(')\n    name=name.replace('x','$')\n    name=name.replace('X','$')\n    name=name.replace('y','.')\n    name=name.replace('Y','.')\n    name=name.replace('z','#')\n    name=name.replace('Z','#')\n    return name\n    # your code here\n    \ndef is_prime(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num==1:\n        return False\n    for i in range(2,int(num/2)+1):\n        if num%i==0:\n            return False\n    return True\n    # your code here\n    \ndef is_prime_2(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num==1:\n        return False\n    for i in range(2,int(math.sqrt(num))+1):\n        if num%i==0:\n            return False\n    return True\n    # your code here\n    \ndef is_prime_3(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,int(math.sqrt(num))+1):\n        if num%i==0:\n            return False\n    return True\n    # your code here\n    \ndef is_prime_4(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,int(math.sqrt(num))+1):\n        if num%i==0:\n            return False\n    return True\n    # your code here\n    \ndef main():\n    '''\n    Write a main function.\n    '''\n    # your code here\n    \nif __name__=='__main__':\n    main()\n    \ndef is_prime_5(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,int(math.sqrt(num))+1):\n        if num%i==0:\n            return False\n    return True\n    # your code here\n    \ndef is_prime_6(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,int(math.sqrt(num))+1):\n        if num%i==0:\n            return False\n    return True\n    # your code here\n    \ndef is_prime_7(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,int(math.sqrt(num))+1):\n        if num%i==0:\n            return False\n    return True\n    # your code here\n    \ndef is_prime_8(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,int(math.sqrt(num))+1):\n        if num%i==0:\n            return False\n    return True\n    # your code here\n    \ndef is_prime_9(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,int(math.sqrt(num))+1):\n        if num%i==0:\n            return False\n    return True\n    # your code here\n    \ndef is_prime_10(num):\n    '''\n    Write a function to find whether a number is prime or not.\n    '''\n    if num<2:\n        return False\n    for i in range(2,int(math.sqrt(num))+"
    },
    {
        "number": 746,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math\ndef sector_area(r,a):\n    '''\n    Write a function to find area of a sector. The function takes the radius and angle as inputs. Function should return None if the angle is larger than 360 degrees.\n    '''\n    \n    sector_area = 2*math.pi*r**2\n    if sector_area > 4*math.pi:\n        return None\n    else:\n        return sector_area\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    n = len(X) \n    m = len(Y) \n    k = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    if len(X) == 0 or len(Y) == 0 or len(Z) == 0:\n        return 0\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    len_X, len_Y, len_Z = len(X), len(Y), len(Z)\n    dp = [[[0 for _ in range(len_Z + 1)] for _ in range(len_Y + 1)] for _ in range(len_X + 1)]\n    \n    for i in range(1, len_X + 1):\n        for j in range(1, len_Y + 1):\n            for k in range(1, len_Z + 1):\n                if X[i - 1] == Y[j - 1] == Z[k - 1]:\n                    dp[i][j][k] = 1 + dp[i - 1][j - 1][k - 1]\n                else:\n                    dp[i][j][k] = max(dp[i][j][k], dp[i - 1][j][k], dp[i][j - 1][k])\n    \n    lcs = \"\"\n    for i in range(len_X, -1, -1):\n        for j in range(len_Y, -1, -1):\n            for k in range(len_Z, -1, -1):\n                if dp[i][j][k] > 0:\n                    lcs = X[i - 1] + lcs\n    return lcs\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    def lcs_recursive(X, Y, Z):\n        \n        M = len(X)\n        N = len(Y)\n        \n        # make a table to store lengths of\n        # longest common subsequences of subproblems\n        L = [[0 for x in range(N+1)] for x in range(M+1)]\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    \n    if X == None or Y == None or Z == None:\n        return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    k = len(Z) \n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    lcs_string = \"\"\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    \n    # create a table to store lengths of strings \n    # initialized to 0 in all rows \n    l = [[0 for i in range(o)] for i in range(n + 1)] \n    \n    # To store the length of lcs for each \n    # starting point in t1[] and t2[] \n    for i in range(n + 1): \n        for j in range(o): \n            if (i == 0 or j == 0): \n                l[i][j] = 0\n            elif (X[i - 1] == Y[j - 1]): \n                l[i][j] = 1 + l[i - 1][j - 1] \n            else: \n                l[i][j] = max(l[i - 1][j], l[i][j - 1]) \n    \n    # This function returns the length of longest \n    # common subsequence. \n    def lcs_length(X, Y): \n        '''\n        Given two strings X and Y, find the length of \n        the longest common subsequence between them. \n        '''\n        if (len(X) == 0 or len(Y) == 0): \n            return 0\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X) \n    n = len(Y) \n    o = len(Z) \n    L = [[None]*(n+1) for i in range(m+1)] \n    P = [[None]*(n+1) for i in range(m+1)] \n    for i in range(m+1): \n        for j in range(n+1): \n            for k in range(o+1): \n                if i == 0 or j == 0 or k == 0: \n                    L[i][j] = 0\n                elif X[i-1] == Y[j-1] == Z[k-1]: \n                    L[i][j] = L[i-1][j-1] + 1\n                    P[i][j] = 'diag'\n                elif L[i-1][j] >= L[i][j-1]: \n                    L[i][j] = L[i-1][j]\n                    P[i][j] = 'up'\n                else: \n                    L[i][j] = L[i][j-1]\n                    P[i][j] = 'left'\n    return L, P\n"
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    m = len(X)\n    n = len(Y)\n    o = len(Z)\n    M = [[[0 for i in range(o+1)] for j in range(n+1)] for k in range(m+1)]\n    \n    for i in range(m+1):\n        for j in range(n+1):\n            for k in range(o+1):\n                if i == 0 or j == 0 or k == 0:\n                    M[i][j][k] = 0\n                elif X[i-1] == Y[j-1] and X[i-1] == Z[k-1]:\n                    M[i][j][k] = M[i-1][j-1][k-1] + 1\n                else:\n                    M[i][j][k] = max(M[i-1][j][k], M[i][j-1][k], M[i][j][k-1])\n    return M[m][n][o]\n    "
    },
    {
        "number": 747,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def lcs_of_three(X, Y, Z): \n    '''\n    Write a function to find the longest common subsequence for the given three string sequence. https://www.geeksforgeeks.org/lcs-longest-common-subsequence-three-strings/\n    '''\n    # base case: if only one string is empty then its the lcs of the other two.\n    if len(X)==0: \n        return len(Y)\n    if len(Y)==0: \n        return len(X)\n    if len(Z)==0: \n        return len(X)\n    if X[-1] == Y[-1]: \n        return lcs_of_three(X[:-1], Y[:-1], Z) + 1\n    if X[-1] == Z[-1]: \n        return lcs_of_three(X, Y[:-1], Z[:-1]) + 1\n    if Y[-1] == Z[-1]: \n        return lcs_of_three(X[:-1], Y, Z[:-1]) + 1\n    else:\n        return max(lcs_of_three(X, Y, Z[:-1]), lcs_of_three(X[:-1], Y, Z), lcs_of_three(X, Y, Z[:-1])) \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word = re.split(r\"\\s+\", str1)\n    result = \" \".join(word)\n    print(result)\n    return result\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return str1.title()\nprint(capital_words_spaces(\"Hello world\"))\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.replace(\" \",\"\")\n    str1 = str1.replace(\"  \",\" \")\n    str1 = str1.split()\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str1[i] = str1[i].capitalize()\n    str1 =''.join(str1)\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word = str1.split()\n    for i in word:\n        if i[0].isupper():\n            yield''.join([i.title(),])\n        else:\n            yield i\n        \ndef my_capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    word = re.split(r'([\\W_]+)',str1)\n    print(word)\n    for i in word:\n        if i.isupper():\n            yield''.join([i.title(),])\n        else:\n            yield i\n        \n    \n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1=str1.split(\" \")\n    str2=\"\"\n    for i in range(len(str1)):\n        if re.search(\"[A-Z]\",str1[i]):\n            str2=str2+str1[i]+\" \"\n        else:\n            str2=str2+str1[i]\n    return str2\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    str1 = str1.split()\n    for i in range(len(str1)):\n        if str1[i].isupper():\n            str1[i] = \" \"+str1[i]\n    return str1\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    string_no_space = re.sub(r'(?<=[a-zA-Z])([A-Z])', r' \\1', str1)\n    return string_no_space\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    #first pass:\n    str1=str1.split(' ')\n    str1=' '.join([x.capitalize() for x in str1])\n    #second pass:\n    str1=str1.replace(' ','')\n    str1=str1.capitalize()\n    return str1\n    #prints:\n    #'Welcome to this wonderful world!'\n    #'welcme to ths wrld!'\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    return''.join(word for word in str1.split() if word[0].isupper())\n"
    },
    {
        "number": 748,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef capital_words_spaces(str1):\n    '''\n    Write a function to put spaces between words starting with capital letters in a given string.\n    '''\n    words = re.findall('\\w+', str1)\n    words = list(filter(lambda x: x.istitle(), words))\n    str2 =''.join(words)\n    return str2\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    \n    nums_str.sort(key=lambda x: float(x))\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    for i in range(len(nums_str)):\n        try:\n            nums_str[i] = int(nums_str[i])\n        except:\n            continue\n    nums_str.sort()\n    return nums_str\n    \n    \ndef create_multiplicity_dict(str_array):\n    '''\n    Write a function to create a dictionary with keys as the multiplicity of each string in the array.\n    '''\n    str_dict = {}\n    for item in str_array:\n        if str_dict.get(len(item)):\n            str_dict[len(item)] += 1\n        else:\n            str_dict[len(item)] = 1\n    return str_dict\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    import re\n    \n    # parsing numbers\n    pattern = re.compile(r'(\\d+)')\n    parsed_nums = [m.group() for m in pattern.finditer(nums_str)]\n    \n    # sorting\n    for i in range(len(parsed_nums)-1):\n        for j in range(len(parsed_nums)-i-1):\n            if int(parsed_nums[j]) > int(parsed_nums[j+1]):\n                parsed_nums[j], parsed_nums[j+1] = parsed_nums[j+1], parsed_nums[j]\n    return parsed_nums\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    # try:\n    #     nums_str = sorted(nums_str, key=lambda x: int(x), reverse=True)\n    # except ValueError as e:\n    #     print(str(e))\n    # else:\n    #     print(nums_str)\n    return sorted(nums_str, key=lambda x: int(x), reverse=True)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = list(nums_str)\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return nums_str\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums_str = nums_str.split(',')\n    for i in range(len(nums_str)):\n        nums_str[i] = int(nums_str[i])\n    nums_str = sorted(nums_str, key=lambda x: int(x))\n    return str(nums_str)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = []\n    for i in nums_str:\n        nums.append(i)\n    return sorted(nums)\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    nums = [x.split('.') for x in nums_str]\n    nums = sorted(nums, key = lambda x: (x[0], x[1]))\n    \n    return ['.'.join(x) for x in nums]\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    from operator import itemgetter\n"
    },
    {
        "number": 749,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sort_numeric_strings(nums_str):\n    '''\n    Write a function to sort a given list of strings of numbers numerically. https://www.geeksforgeeks.org/python-sort-numeric-strings-in-a-list/\n    '''\n    if not nums_str:\n        return nums_str\n    return sorted(nums_str, key=lambda x:int(x))\n    \nnums_str = ['0', '10', '-4', '20']\nprint(sort_numeric_strings(nums_str)"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n    return test_list\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    for i in range(len(test_list)):\n        test_list[i] = test_list[i] + test_tup\n        # print(test_list[i])\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(tuple(test_tup))\n    print(test_list)\n    return\n"
    },
    {
        "number": 750,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def add_tuple(test_list, test_tup):\n    '''\n    Write a function to add the given tuple to the given list.\n    '''\n    test_list.append(test_tup)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr) == 1:\n        return False\n    left = 2*i + 1\n    right = 2*i + 2\n    if left > len(arr) - 1 or right > len(arr) - 1:\n        return False\n    while left <= len(arr) - 1:\n        if arr[left] < arr[i]:\n            return False\n        left = left + 1\n    while right <= len(arr) - 1:\n        if arr[right] < arr[i]:\n            return False\n        right = right + 1\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    def check_and_return(arr, i):\n        '''\n        If current element is greater than its parent. Then current node is not a heap node.\n        Return: True or False.\n        '''\n        if arr[i] > arr[(i-1)//2]:\n            return False\n        else:\n            return True\n    '''\n    Else, if current element is less than its child. Then current node is not a heap node.\n    Return: True or False.\n    '''\n    if i * 2 + 1 >= len(arr):\n        return True\n    elif i * 2 + 1 <= len(arr) and check_and_return(arr, i * 2 + 1):\n        return True\n    else:\n        if check_and_return(arr, i):\n            return True\n        elif check_and_return(arr, i * 2 + 1):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    length = len(arr)\n    if (length < 2):\n        return False\n    # Allocate the first parent and first child\n    parent = (i-1)//2\n    left = (i-1) * 2 + 1\n    right = (i-1) * 2 + 2\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i == 0:\n        return True\n    if arr[i] < arr[2 * i + 1] and arr[i] < arr[2 * i + 2]:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if we have a root node, we are not in the min heap\n    if i > 0:\n        if arr[i] > arr[i//2]:\n            return False\n        else:\n            # recur to get left and right child\n            return check_min_heap_helper(arr, 2*i) and check_min_heap_helper(arr, 2*i+1)\n    return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if i > len(arr) - 1:\n        return True\n    if arr[i] > arr[2 * i + 1] and arr[i] > arr[2 * i + 2]:\n        return True\n    elif arr[i] < arr[2 * i + 1] and arr[i] < arr[2 * i + 2]:\n        return False\n    else:\n        return check_min_heap_helper(arr, i + 1)\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if arr[i] < arr[i * 2] or arr[i] < arr[i * 2 + 1]:\n        return False\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    if len(arr)==0:\n        return True\n    if len(arr)<=2:\n        return True\n    return (arr[i]<=arr[2*i+1] and arr[i]<=arr[2*i+2] and check_min_heap_helper(arr[:i] + arr[i+1:], i+1))\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # base case\n    if i == len(arr) - 1:\n        return True\n"
    },
    {
        "number": 751,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_min_heap_helper(arr, i):\n    '''\n    Write a function to check if the given array represents min heap or not. https://www.geeksforgeeks.org/how-to-check-if-a-given-array-represents-a-binary-heap/\n    '''\n    # if array contains only 1 element then the heap is complete\n    if len(arr) == 1:\n        return True\n    \n    # if parent is less than left child then heap is not complete\n    if arr[i] > arr[2 * i + 1] and arr[i] > arr[2 * i + 2]:\n        return False\n    else:\n        return True\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    x = 0\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            x = ((2*x + 1) / (2*i - 1))\n        return x\n    \ndef jacobsthal_gen(n): \n    '''\n    Write a generator to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731,...\n    '''\n    x = 0\n    if n == 0:\n        return 1\n    elif n == 1:\n        return 1\n    else:\n        for i in range(2, n+1):\n            x = ((2*x + 1) / (2*i - 1))\n        yield x\n        \ndef gcd(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    while b > 0:\n        (a, b) = (b, a % b)\n    return a\n    \ndef gcd2(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if a == 0:\n        return b\n    return gcd2(b % a, a)\n    \ndef gcd3(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    while b > 0:\n        (a, b) = (b, a % b)\n    return a\n    \ndef gcd4(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if a == 0:\n        return b\n    return gcd4(b % a, a)\n    \ndef gcd5(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if a == 0:\n        return b\n    return gcd5(b % a, a)\n    \ndef gcd6(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if b > a:\n        (a, b) = (b, a)\n    if b % a == 0:\n        return a\n    else:\n        return gcd6(b % a, a)\n    \ndef gcd7(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    if a > b:\n        (a, b) = (b, a)\n    while b!= 0:\n        (a, b) = (b, a % b)\n    return a\n    \ndef gcd8(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    while a!= 0:\n        (a, b) = (b % a, a)\n    return b\n    \ndef gcd9(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    while b!= 0:\n        (a, b) = (b % a, a)\n    return a\n    \ndef gcd10(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if b > a:\n        (a, b) = (b, a)\n    while b!= 0:\n        (a, b) = (b, a % b)\n    return a\n    \ndef gcd11(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    while b!= 0:\n        (a, b) = (b, a % b)\n    return a\n    \ndef gcd12(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    while a!= 0:\n        (a, b) = (b % a, a)\n    return b\n    \ndef gcd13(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    while b!= 0:\n        (a, b) = (b % a, a)\n    return a\n    \ndef gcd14(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if a == 0:\n        return b\n    if b == 0:\n        return a\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    while b!= 0:\n        (a, b) = (b % a, a)\n    return a\n    \ndef gcd15(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    while b!= 0:\n        (a, b) = (b % a, a)\n    return a\n    \ndef gcd16(a, b):\n    '''\n    Write a function to compute the GCD of two numbers.\n    '''\n    if b == 0:\n        return a\n    if a == 0:\n        return b\n    if a > b:\n        (a, b) = (b, a)\n    if a > b:\n        (a, b) = (b, a)\n    while b!= 0:\n        (a, b) = (b % a, a)\n    return a\n    \ndef gcd17(a, b):\n    '''\n    Write a function to compute the GCD of two numbers."
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    jacobsthal_l = 1\n    jacobsthal_l2 = 1\n    while jacobsthal_l < n:\n        jacobsthal_l2 = jacobsthal_l * (3 * jacobsthal_l - 1) // 2\n        jacobsthal_l = jacobsthal_l2\n    return jacobsthal_l2\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    s = 0\n    for i in range(n): \n        s += i*(i+1)//2\n    return s\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return n + (n - 1) * jacobsthal_num(n - 2)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    if n<0: \n        return 0\n    if n==0:\n        return 1\n    elif n==1:\n        return 1\n    else:\n        return (2*n -1)*jacobsthal_num(n-1)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    n += 1\n    for i in range(2, n):\n        if i % 2 == 0:\n            n = n * (n - 1) / i\n        else:\n            n = n * (n + 1) / i\n    return n\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    a=1\n    b=2\n    result=a\n    while n>1:\n        result=a+b\n        a=b\n        b=result\n        n-=1\n    return result\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    def jacobsthal_helper(n):\n        if n == 1:\n            return 1\n        if n == 2:\n            return 2\n        else:\n            return jacobsthal_helper(n - 1) + jacobsthal_helper(n - 2)\n    return jacobsthal_helper(n)\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    return ((1 + n**(1/2))/2)**n\n"
    },
    {
        "number": 752,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def jacobsthal_num(n): \n    '''\n    Write a function to find the nth jacobsthal number. https://www.geeksforgeeks.org/jacobsthal-and-jacobsthal-lucas-numbers/ 0, 1, 1, 3, 5, 11, 21, 43, 85, 171, 341, 683, 1365, 2731, ...\n    '''\n    fib = 1\n    for i in range(1, n):\n        fib = (fib+1)%2\n    return fib\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Consider tuples as 2-D arrays\n    # Convert list to 2-D array\n    array = np.array(test_list)\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    import heapq\n    #import heapq\n    \n    # creating min heap of tuple pairs:\n    \n    min_heap = []\n    #min_heap = []\n    \n    # adding tuples to min heap, heapq.heappush() - returns tuple with (value, key)\n    # key = element index, value = element\n    #heapq.heappush(min_heap, (5, 'a'))\n    #heapq.heappush(min_heap, (9, 'c'))\n    #heapq.heappush(min_heap, (10, 'b'))\n    \n    # poping values from min heap \n    #heapq.heappop(min_heap)\n    #print(min_heap)\n    \n    for i in test_list:\n        \n        #adding pairs to min heap - heapq.heappush()\n        heapq.heappush(min_heap, (i[0], i[1]))\n        \n        #pushing all tuples of min heap to a new list\n        #new_list = []\n        #while min_heap:\n        #    new_list.append(heapq.heappop(min_heap))\n        \n        #print(new_list)\n        \n        #print(min_heap)\n        \n        #poping all values of min heap \n        #while min_heap:\n        #    print(heapq.heappop(min_heap))\n        \n        #poping only 2nd value (only element)\n        #print(heapq.heappop(min_heap)[1])\n        \n        # popping 2nd element - also first element\n        #print(heapq.heappop(min_heap)[1])\n        \n        # popping 2nd element - also first element\n        #print(heapq.heappop(min_heap)[1])\n        \n        # popping 1st element - also last element\n        #print(heapq.heappop(min_heap)[1])\n        \n        # popping only first element\n        #print(heapq.heappop(min_heap)[0])\n        \n        # popping only first element\n        #print(heapq.heappop(min_heap)[1])\n        \n        # poping last element\n        #print(heapq.heappop(min_heap)[1])\n        \n        # poping all elements\n        #print(heapq.heappop(min_heap))\n        \n        # poping all tuples of min heap \n        #new_list = []\n        #while min_heap:\n        #    new_list.append(heapq.heappop(min_heap))\n        \n        #print(new_list)\n    \n    return min_heap\n    #return new_list\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if len(test_list) <= K:\n        return test_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    minimum = K\n    for i in range(len(test_list)):\n        if len(test_list[i]) < minimum:\n            minimum = len(test_list[i])\n    return minimum\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    def min_k(test_list, K):\n        tuple_list = sorted(test_list, key=lambda x: x[0])\n        for i in range(len(tuple_list)):\n            if K > 0:\n                K -= 1\n            else:\n                return tuple_list[:i]\n        return tuple_list\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    K = K + 1\n    n = len(test_list)\n    i = 0\n    while (i < n):\n        j = i + 1\n        while (j < n and test_list[j][1] < test_list[i][1]):\n            j = j + 1\n        if j - i <= K:\n            i = j\n        else:\n            if (i == 0):\n                i = 1\n            else:\n                i = i - 1\n    return i\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    min_k = test_list[:K]\n    min_k_sorted = sorted(min_k)\n    for i in range(len(min_k_sorted)):\n        for j in range(len(min_k_sorted)):\n            if min_k_sorted[i][1] > min_k_sorted[j][1]:\n                min_k_sorted[i], min_k_sorted[j] = min_k_sorted[j], min_k_sorted[i]\n    for i in min_k_sorted:\n        print(i)\n    return min_k_sorted\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    # Set up a max heap and insert the first K records\n    max_heap = []\n    for i in range(K):\n        heapq.heappush(max_heap, test_list[i])\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    if K < 0 or K > len(test_list):\n        return -1\n"
    },
    {
        "number": 753,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def min_k(test_list, K):\n    '''\n    Write a function to find minimum k records from tuple list. https://www.geeksforgeeks.org/python-find-minimum-k-records-from-tuple-list/ - in this case a verbatim copy of test cases\n    '''\n    _k = []\n    for _tuple in test_list:\n        _k.append(_tuple[K])\n    min_value = min(_k)\n    min_count = _k.count(min_value)\n    return min_value, min_count\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    result_list = []\n    for index in range(len(l1)):\n        if l1[index] == l2[index] == l3[index]:\n            result_list.append(l1[index])\n    return result_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    common_index_list = []\n    for i in range(len(l1)):\n        if l1[i] == l2[i] and l1[i] == l3[i]:\n            common_index_list.append(i)\n    return common_index_list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    index_list_1 = []\n    index_list_2 = []\n    index_list_3 = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            index_list_1.append(i)\n    for i in range(len(l2)):\n        if l2[i] in l1 and l2[i] in l3:\n            index_list_2.append(i)\n    for i in range(len(l3)):\n        if l3[i] in l1 and l3[i] in l2:\n            index_list_3.append(i)\n    return index_list_1 + index_list_2 + index_list_3\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    list = []\n    for i in range(len(l1)):\n        if l1[i] in l2 and l1[i] in l3:\n            list.append(l1[i])\n    return list\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1.sort()\n    l2.sort()\n    l3.sort()\n    l = []\n    for i in range(len(l1)):\n        if l1[i] not in l:\n            l.append(l1[i])\n        if l2[i] not in l:\n            l.append(l2[i])\n        if l3[i] not in l:\n            l.append(l3[i])\n    return l\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1_index_list = []\n    l2_index_list = []\n    l3_index_list = []\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    #l1 = [1, 2, 3]\n    #l2 = [3, 4, 5]\n    #l3 = [6, 7, 8]\n    #l1 = ['a', 'b', 'c']\n    #l2 = ['a', 'c', 'd']\n    #l3 = ['a', 'b', 'd']\n    #l1 = [-4, 5, 3, -1]\n    #l2 = [5, -4, 3]\n    #l3 = [-4, 5, -4]\n    #l1 = [1, 4, 5]\n    #l2 = [2, 5, 6]\n    #l3 = [3, 5, 6]\n    #l1 = [0, 2, 3]\n    #l2 = [1, 2, 3]\n    #l3 = [0, 2, 3]\n    #l1 = [0, 2, 3]\n    #l2 = [0, 2, 3]\n    #l3 = [0, 2, 3]\n    #l1 = [0, 2, 3, 4]\n    #l2 = [0, 2, 3, 4]\n    #l3 = [0, 2, 3, 4]\n    #l1 = [-2, 3, -1, 5]\n    #l2 = [-2, 3, -1, 4]\n    #l3 = [-2, 3, -1, 5]\n    #l1 = [-2, 3, -1, 5]\n    #l2 = [-2, 3, -1, 4]\n    #l3 = [-2, 3, -1, 5]\n    #l1 = [-2, 3, -1, 5]\n    #l2 = [-2, 3, -1, 4]\n    #l3 = [-2, 3, -1, 5]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3, -1, 4, 6]\n    #l3 = [-2, 3, -1, 5, 6]\n    #l1 = [-2, 3, -1, 5, 6]\n    #l2 = [-2, 3"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    out = []\n    for index in range(0, min(len(l1), len(l2), len(l3))):\n        if l1[index] == l2[index] == l3[index]:\n            out.append(l1[index])\n    return out\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    i = 0\n    index_list = []\n    while i < len(l1):\n        if l1[i]!= l2[i] and l1[i]!= l3[i]:\n            index_list.append(i)\n            i += 1\n        else:\n            i += 1\n    return index_list\nprint(extract_index_list([1,3,5,5],[1,3,5,6],[3,5,6,6]))\n"
    },
    {
        "number": 754,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def extract_index_list(l1, l2, l3):\n    '''\n    We say that an element is common for lists l1, l2, l3 if it appears in all three lists under the same index. Write a function to find common elements from three lists. The function should return a list.\n    '''\n    l1 = sorted(l1)\n    l2 = sorted(l2)\n    l3 = sorted(l3)\n    l1_index = {}\n    l2_index = {}\n    l3_index = {}\n    for i in l1:\n        l1_index[i] = 0\n    for i in l2:\n        l2_index[i] = 0\n    for i in l3:\n        l3_index[i] = 0\n    common = []\n    for i in range(len(l1)):\n        if (l1_index.get(l1[i]) == None and l2_index.get(l2[i]) == None and l3_index.get(l3[i]) == None):\n            common.append(l1[i])\n            l1_index[l1[i]] = i\n            l2_index[l2[i]] = i\n            l3_index[l3[i]] = i\n        elif l1_index.get(l1[i])!= None and l2_index.get(l2[i])!= None and l3_index.get(l3[i])!= None:\n            if l1_index[l1[i]] == i and l2_index[l2[i]] == i and l3_index[l3[i]] == i:\n                common.append(l1[i])\n    return common\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    numbers.sort()\n    return numbers[0]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    smallest = float('inf')\n    second_smallest = float('inf')\n    for number in numbers:\n        if number < smallest:\n            second_smallest = smallest\n            smallest = number\n        elif number < second_smallest and number!= smallest:\n            second_smallest = number\n    return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    pass\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    n = 0\n    for i in range(1, len(numbers)):\n        if numbers[i] < numbers[n]:\n            n = i\n    return numbers[n+1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return min(numbers, key=lambda x: numbers.count(x))\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    if len(numbers) == 0:\n        return None\n    else:\n        numbers.sort()\n        second_smallest = numbers[1]\n        return second_smallest\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    \n    numbers.sort()\n    return numbers[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    return sorted(numbers)[1]\n"
    },
    {
        "number": 755,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def second_smallest(numbers):\n    '''\n    Write a function to find the second smallest number in a list.\n    '''\n    # Initializing the list and creating a new variable for the sorted list\n    second_smallest_list = []\n    \n    # Sorting the list in ascending order\n    numbers.sort()\n    \n    # Creating a variable to store the smallest value in the list\n    smallest_value = numbers[0]\n    \n    # Creating a variable to store the second smallest value in the list\n    second_smallest_value = numbers[1]\n    \n    # Creating a variable to store the value for the second smallest in the list\n    second_smallest_list.append(second_smallest_value)\n    \n    # Checking if the second smallest value in the list is the smallest value\n    # If it is, then return it\n    if second_smallest_value == smallest_value:\n        return second_smallest_value\n    \n    # Loop through the list to find the second smallest value\n    for i in numbers:\n        if i!= second_smallest_value and i!= smallest_value:\n            second_smallest_value = i\n            second_smallest_list.append(second_smallest_value)\n            return second_smallest_value\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a.+b'\n    if re.match(pattern,text):\n        return 'Match'\n    else:\n        return 'No Match'\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r'a'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r\"(a){1,}b\")\n    result = pattern.search(text)\n    if result is None:\n        return 0\n    else:\n        return 1\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    return re.match(r'^a.*(b*).*', text)\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = re.compile(r'a(b)')\n    match = pattern.search(text)\n    if match:\n        print('It Matched!')\n    else:\n        print('It Didn\\'t Match!')\n    \n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    # expression = re.compile(r'a.*b')\n    # match = expression.search(text)\n    # return match.group()\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    pattern = r\"a[b]*\"\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    regex = 'a+b+'\n    string = text\n    if re.search(regex, string):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    if re.search(\"a[ab]*\",text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 756,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_zero_one(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by one or more 'b's. https://www.w3resource.com/python-exercises/re/python-re-exercise-3.php\n    '''\n    text_match_zero_one = re.match(r'a.+b', text)\n    if text_match_zero_one:\n        print('Matches : ', text_match_zero_one.group())\n    else:\n        print('Does not match')\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = test_list.split(' ')\n    return len([x for x in test_list if x == x[::-1]])\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    #return (test_list, lambda x, y: x+y)\n    #return (test_list, lambda x, y: (x, y))\n    #return (test_list, lambda x, y: (y, x))\n    #return (test_list, lambda x, y: (x, y, z))\n    #return (test_list, lambda x, y: x)\n    #return (test_list, lambda x, y: y)\n    #return (test_list, lambda x, y: (x, y))\n    #return (test_list, lambda x, y: (x, z))\n    #return (test_list, lambda x, y: (y, x))\n    return (test_list, lambda x, y: (x, y))\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # add your code here\n    test_list.sort(reverse=True)\n    i = 0\n    while i < len(test_list):\n        if i == len(test_list) - 1:\n            break\n        if test_list[i]!= test_list[i + 1]:\n            i = i + 2\n        else:\n            del test_list[i]\n            i = i - 1\n    return len(test_list)\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    rev_strs_map = {}\n    \n    for s in test_list:\n        \n        rev_strs = []\n        rev_strs.append(s[::-1])\n        \n        # Reverse the string\n        rev_strs.append(s[-1::-1])\n        \n        # if the string is already present in the dictionary, increment the count by 1\n        if s in rev_strs_map:\n            rev_strs_map[s] += 1\n        # else add it to the dictionary with count 1\n        else:\n            rev_strs_map[s] = 1\n    \n    return rev_strs_map\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    def reverse(s):\n        return s[::-1]\n    return len([reverse(str1) for str1 in test_list if reverse(str1) in test_list])\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    \n    count = 0\n    for i in range(len(test_list)-1):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                count+=1\n    return count\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    # res = 0\n    # for i in range(len(test_list)):\n    #     for j in range(i, len(test_list)):\n    #         if test_list[i] == test_list[j][::-1]:\n    #             res += 1\n    #             print(i, j, test_list[i], test_list[j][::-1], test_list[i] == test_list[j][::-1])\n    # return res\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    res = 0\n    for i in range(len(test_list)):\n        for j in range(i+1,len(test_list)):\n            if test_list[i] == test_list[j][::-1]:\n                res += 1\n    return res\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    reverse_count = 0\n    for i in range(len(test_list)):\n        for j in range(len(test_list)):\n            if i!= j and test_list[i] == test_list[j][::-1]:\n                reverse_count += 1\n"
    },
    {
        "number": 757,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_reverse_pairs(test_list):\n    '''\n    Write a function to count the pairs of reverse strings in the given string list. https://www.geeksforgeeks.org/python-program-to-count-the-pairs-of-reverse-strings/\n    '''\n    test_list = list(test_list)\n    res = 0\n    for i in range(len(test_list)-1, -1, -1):\n        for j in range(i-1, -1, -1):\n            if test_list[i] == test_list[j]:\n                res = res + 1\n                break\n    print(res)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    new = {}\n    for i in list1:\n        if isinstance(i, list):\n            new[i] = len(i)\n    return new\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if list1 == []:\n        return {}\n    else:\n        dict1 = {list1[0]:1}\n        return unique_sublists_rec(list1[1:],dict1)\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    if len(list1) == 0:\n        return {}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    for i in list1:\n        if i in result:\n            result[i] += 1\n        else:\n            result[i] = 1\n    return result\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    d = dict()\n    for i in range(len(list1)):\n        t = (tuple(list1[i]))\n        d[t] = d.get(t,0) + 1\n    return d\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    return {tuple(i):i.count(i) for i in list1}\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    #OR\n    #RETURN {'sublist1': count,'sublist2': count,'sublist3': count}\n    #return {tuple(list1): count}\n    counts = {}\n    for list_num in list1:\n        if tuple(list_num) in counts:\n            counts[tuple(list_num)] += 1\n        else:\n            counts[tuple(list_num)] = 1\n    return counts\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    num_of_occurances = {}\n    for element in list1:\n        if element not in num_of_occurances:\n            num_of_occurances[element] = 1\n        else:\n            num_of_occurances[element] += 1\n    return num_of_occurances\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    result = {}\n    if len(list1) > 1:\n        sublist = list(set(tuple(x) for x in list1))\n        for i in sublist:\n            result[i] = list1.count(i)\n        return result\n    else:\n        return result\n"
    },
    {
        "number": 758,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count lists within a list. The function should return a dictionary where every list is converted to a tuple and the value of such tuple is the number of its occurencies in the original list.\n    '''\n    \n    #Initialize a dictionary.\n    dict_count = {}\n    #Iterate through every list.\n    for item in list1:\n        #Convert the list to a tuple.\n        item = tuple(item)\n        #If the tuple is in the dictionary, add 1 to its value, else add the tuple to the dictionary.\n        if item in dict_count:\n            dict_count[item] += 1\n        else:\n            dict_count[item] = 1\n    return dict_count\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if num.count('.') == 1 and num.count('e') == 0:\n        digits = num.split('.')\n        for x in digits:\n            if x.isdigit():\n                return True\n        return False\n    elif num.count('.') == 1 and num.count('e') == 1:\n        digits = num.split('.')\n        for x in digits:\n            if x.isdigit():\n                return True\n        return False\n    else:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    from decimal import Decimal\n    try:\n        Decimal(num)\n        return True\n    except:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return isinstance(num, str)\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    num_as_str = str(num)\n    if num_as_str[-1]!= '.':\n        return False\n    for i in range(len(num_as_str)-1):\n        if not num_as_str[i] in '0123456789.':\n            return False\n    return True\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    return True if '.' in num else False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    #step1: convert number to a string\n    num_as_string = str(num)\n    #step2: loop over the string until '.' and 'e' are found\n    for i in range(0, len(num_as_string)):\n        if num_as_string[i] == '.':\n            #step3: get rid of the dot\n            num_as_string = num_as_string[:i]\n        if num_as_string[i] == 'e':\n            #step4: get rid of the exponent\n            num_as_string = num_as_string[:i]\n            break\n    #step5: check if the string is a float\n    try:\n        num = float(num_as_string)\n    except ValueError:\n        return False\n    #step6: check if the number has a decimal\n    return round(num,2) == num\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    decimal = True\n    try:\n        float(num)\n    except ValueError:\n        decimal = False\n    return decimal\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    try:\n        float(num)\n        return True\n    except ValueError:\n        return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if str(num).find('.') == -1:\n        return False\n    else:\n        num = str(num).replace('.','')\n        num = num.split('.')\n        if len(num) == 2:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 759,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_decimal(num):\n    '''\n    Write a function to check whether a given string is a decimal number with a precision of 2.\n    '''\n    if len(num) == 0: return False\n    decimal_digits = num[-1]\n    precision = 1 if num[-1] == '.' else 0\n    if not num[-1].isdigit() or not num[-2].isdigit(): return False\n    num = num[:-2]\n    #print(num)\n    if num == '': return False\n    while len(num) > 1 and precision!= 1:\n        num = num[:-1]\n        if not num.isdigit(): return False\n        decimal_digits = decimal_digits + num[-1]\n        precision = 1 if num[-1] == '.' else 0\n    return len(num) == 1 and precision == 1 and num[-1] == decimal_digits\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    l = []\n    for i in range(len(arr)):\n        if arr[i] in l:\n            return False\n        else:\n            l.append(arr[i])\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    d = {}\n    for i in arr:\n        if i in d.keys():\n            print(\"Duplicate: \",i)\n            return False\n        else:\n            d[i] = 1\n    return True\n    # Use dict.get(key, default=None), this is a way to check whether a key exists and return its value if exists, else return default.\n    # key should be unique\n    # This is also useful when you are passing a dictionary to a function, \n    # and want to check whether the dictionary contains a particular key or not.\n    #You can check whether a key exists in a dictionary by using \"key in dictionary\"\n    #or by checking whether a key is present in a dictionary, by using \"key in dictionary\"\n    #In this case, \"key\" is the key in the dictionary.\n    #Return True if it's true, else return False.\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    set_arr = set(arr)\n    if len(set_arr) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = arr.count(arr[0])\n    if n == len(arr):\n        print(\"yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    if n == 0:\n        return False\n    s = set(arr)\n    if len(s) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    # if there are more than one same element then it is not possible\n    if len(set(arr)) == 1:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    hash_table = dict()\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    n = len(arr)\n    seen = set()\n    for i in range(n):\n        if arr[i] in seen:\n            return False\n        else:\n            seen.add(arr[i])\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    \n    for i in range(len(arr)):\n        \n        for j in range(i+1,len(arr)):\n            if arr[i]==arr[j]:\n                return False\n    return True\n"
    },
    {
        "number": 760,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_Element(arr):\n    '''\n    Write a python function to check whether a list of numbers contains only one distinct element or not.\n    '''\n    #arr = [1, 1, 1, 2, 2, 2, 3, 3]\n    arr.sort()\n    if arr.count(arr[0]) == len(arr):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 >= 1 and monthnum3 <= 3:\n        return True\n    elif monthnum3 >= 4 and monthnum3 <= 6:\n        return True\n    elif monthnum3 >= 7 and monthnum3 <= 9:\n        return True\n    elif monthnum3 >= 10 and monthnum3 <= 12:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 12 == 0 or monthnum3 % 12 == 6 or monthnum3 % 12 == 9 or monthnum3 % 12 == 11:\n        return 'It is not 30 day month'\n    else:\n        return 'It is 30 day month'\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 % 2 == 0:\n        print(\"Month contains 30 days\")\n    else:\n        print(\"Month contains 28 days\")\n        \n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    monthnumber = int(monthnum3)\n    if(monthnumber%2 == 0):\n        if(monthnumber>=1 and monthnumber<=2):\n            if(monthnumber==1):\n                return True\n            else:\n                return False\n        elif(monthnumber==3 or monthnumber==4 or monthnumber==5):\n            return True\n        elif(monthnumber==6 or monthnumber==7 or monthnumber==8):\n            return True\n        elif(monthnumber==9 or monthnumber==10 or monthnumber==11):\n            return True\n        else:\n            return False\n    elif(monthnumber%2!= 0):\n        if(monthnumber>=1 and monthnumber<=3):\n            return True\n        elif(monthnumber==4 or monthnumber==5 or monthnumber==6):\n            return True\n        elif(monthnumber==7 or monthnumber==8 or monthnumber==9):\n            return True\n        elif(monthnumber==10 or monthnumber==11 or monthnumber==12):\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if (monthnum3 <= 0 or monthnum3 > 12):\n        return False\n    elif (monthnum3 <= 2):\n        return True\n    elif (monthnum3 >= 3 and monthnum3 <= 5):\n        return False\n    elif (monthnum3 >= 6 and monthnum3 <= 8):\n        return True\n    elif (monthnum3 >= 9 and monthnum3 <= 11):\n        return False\n    elif (monthnum3 == 12):\n        return True\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    month_30_days = 30\n    month_30_days_flag = 0\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 == 12 or monthnum3 == 1:\n        print(\"true\")\n    else:\n        print(\"false\")\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    for month in range(1,13):\n        if monthnum3 == month:\n            return True\n        else:\n            return False\n"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    if monthnum3 > 0 and monthnum3 < 13:\n        if (monthnum3 % 2) == 0:\n            print(f\"{monthnum3} is a even month number.\")\n        else:\n            print(f\"{monthnum3} is a odd month number.\")\n    else:\n        print(\"Month number should be between 1 and 12.\")\n    \n    \n    \ndef check_yearnumber_number(yearnum1):\n    '''\n    Write a function to check whether the given year number is a leap year or not. Leap year is a year, which has 366 days, where the first day of the year is a Sunday.\n    '''\n    if yearnum1 > 0 and yearnum1 < 20:\n        if yearnum1 % 4 == 0:\n            if yearnum1 % 100!= 0:\n                if yearnum1 % 400 == 0:\n                    print(f\"{yearnum1} is a leap year.\")\n                else:\n                    print(f\"{yearnum1} is not a leap year.\")\n            else:\n                print(f\"{yearnum1} is a leap year.\")\n        else:\n            print(f\"{yearnum1} is not a leap year.\")\n    else:\n        print(\"Year number should be between 1 and 20.\")\n    \n    \n    \ndef check_name_words_length(name):\n    '''\n    Write a function to check whether the given name is of a valid length or not.\n    '''\n    if len(name) >= 4 and len(name) <= 16:\n        print(f\"{name} is a valid name.\")\n    else:\n        print(f\"{name} is not a valid name.\")\n    \n    \n    \ndef check_name_words_character(name):\n    '''\n    Write a function to check whether the given name contains only letters and spaces.\n    '''\n    if name.isalpha():\n        print(f\"{name} is a valid name.\")\n    else:\n        print(f\"{name} is not a valid name.\")\n    \n    \n    \ndef check_name_number(name1):\n    '''\n    Write a function to check whether the given name contains only numbers or not.\n    '''\n    if name1.isnumeric():\n        print(f\"{name1} is a valid name.\")\n    else:\n        print(f\"{name1} is not a valid name.\")\n    \n    \n    \ndef check_email_address(email):\n    '''\n    Write a function to check whether the given email address is valid or not.\n    '''\n    at_index = email.find('@')\n    dot_index = email.find('.')\n    if at_index > 0 and dot_index > 0:\n        if dot_index < at_index:\n            print(f\"{email} is a valid email address.\")\n        else:\n            print(f\"{email} is not a valid email address.\")\n    else:\n        print(f\"{email} is not a valid email address.\")\n    \n    \n    \ndef check_phone_number(phone):\n    '''\n    Write a function to check whether the given phone number is valid or not.\n    '''\n    if len(phone) == 11 and phone.find('-') > -1:\n        if phone.isdigit():\n            print(f\"{phone} is a valid phone number.\")\n        else:\n            print(f\"{phone} is not a valid phone number.\")\n    else:\n        print(f\"{phone} is not a valid phone number.\")\n    \n    \n    \ndef check_name_length(name1):\n    '''\n    Write a function to check whether the given name is valid or not.\n    '''\n    if len(name1) >= 4 and len(name1) <= 16:\n        print(f\"{name1} is a valid name.\")\n    else:\n        print(f\"{name1} is not a valid name.\")\n    \n    \n    \ndef check_name_symbols(name1):\n    '''\n    Write a function to check whether the given name contains only symbols or not.\n    '''\n    if name1.isalpha():\n        print(f\"{name1} is a valid name.\")\n    else:\n        print(f\"{name1} is not a valid name.\")\n    \n    \n    \ndef check_password_length(password):\n    '''\n    Write a function to check whether the given password is valid or not.\n    '''\n    if len(password) >= 6 and len(password) <= 16:\n        print(f\"{password} is a valid password.\")\n    else:\n        print(f\"{password} is not a valid password.\")\n    \n    \n    \ndef check_password_digit(password):\n    '''\n    Write a function to check whether the given password contains digit or not.\n    '''\n    if password.isdigit():\n        print(f\"{password} is a valid password.\")\n    else:\n        print(f\"{password} is not a valid password.\")\n    \n    \n    \ndef check_password_lowercase(password):\n    '''\n    Write a function to check whether the given password contains lowercase or not.\n    '''\n    if password.islower():\n        print(f\"{password} is a valid password.\")\n    else:\n        print(f\"{password} is not a valid password.\")\n    \n    \n    \ndef check_password_uppercase(password):\n    '''\n    Write a function to check whether the given password contains uppercase or not.\n    '''\n    if password.isupper():\n        print(f\"{password} is a valid password.\")\n    else:\n        print(f\"{password} is not a valid password.\")\n    \n    \n    \ndef check_password_symbols(password):\n    '''\n    Write a function to check whether the given password contains symbols or not.\n    '''\n    if password.isalpha() or password.isdigit() or password.islower() or password.isupper():\n        print(f\"{password} is a valid password.\")\n    else:\n        print(f\"{password} is not a valid password.\")\n    \n    \n    \ndef check_phone_number_validity(phone):\n    '''\n    Write a function to check whether the given phone number is valid or not.\n    '''\n    if len(phone) == 11 and phone.find('-') > -1:\n        if phone.isdigit():\n            print(f\"{phone} is a valid phone number.\")\n        else:\n            print(f\"{phone} is not a valid phone number.\")\n    else:\n        print(f\"{phone} is not a valid phone number.\")\n    \n    \n    \ndef check_email_address_validity(email):\n    '''\n    Write a function to check whether the given email address is valid or not.\n    '''\n    if email.count('@') == 1 and email.count('.') == 1:\n        print(f\"{email} is a valid email address.\")\n    else:\n        print(f\"{email} is not a valid email address.\")\n    \n    \n    \ndef check_validity_of_password_for_user(password):\n    '''\n    Write a function to check whether the given password is valid or not.\n    '''\n    if len(password) >= 6 and len(password) <= 16:\n        if password.isdigit():\n            print(f\"{password} is a valid password.\")\n        else:\n            print(f\"{password} is not a valid password.\")\n    else:\n        print(f\"{password} is not a valid password.\")\n    \n    \n    \ndef check_date_validity(date):\n    '''\n    Write a function to check whether the given date is valid or not.\n    '''\n    date_format = \"%Y-%m-%d\"\n    if len(date) == 10 and date.count('-') == 2:\n        if date.isalpha():\n            print(f\"{date} is not a valid date.\")\n        else:\n            if datetime.strptime(date, date_format):\n                print(f\"{date} is a valid date.\")\n            else:\n                print(f\"{date} is not a valid date.\")\n    else:\n        print(f\"{date} is not a valid date.\")\n    \n    \n    \ndef check_phone_number_validity_for_user"
    },
    {
        "number": 762,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_monthnumber_number(monthnum3):\n    '''\n    Write a function to check whether the given month number contains 30 days or not. Months are given as number from 1 to 12.\n    '''\n    # Solution\n    # First we define the function with the parameter monthnum3, which will be integer from 1 to 12\n    # For each iteration, we take the value of the month and the value of the month number and compare them.\n    # If they match, we add one to the value of the month number. If they don't match, we return -1.\n    # Return the month number if the value of month number is 30.\n    # If the month number is not 30, return -1\n    for i in range(1,13):\n        if monthnum3 == i:\n            monthnumber_number = i+1\n            if monthnumber_number == 30:\n                return monthnumber_number\n            else:\n                return -1\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n    for i in range(n-1):\n        diff = arr[i+1] - arr[i]\n        if diff < min_diff:\n            min_diff = diff\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if not arr:\n        return -1\n    \n    arr.sort()\n    \n    min_diff = arr[1]-arr[0]\n    for i in range(1,len(arr)-1):\n        if arr[i+1]-arr[i] < min_diff:\n            min_diff = arr[i+1]-arr[i]\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = float(\"inf\")\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if abs(arr[i] - arr[j]) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff=float('inf')\n    for i in range(n-1):\n        for j in range(i+1,n):\n            min_diff=min(min_diff,arr[i]-arr[j])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float(\"inf\")\n    for i in range(0,len(arr)-1):\n        min_diff = min(min_diff, arr[i+1]-arr[i])\n    return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 10**12\n    arr = sorted(arr)\n    for i in range(n):\n        for j in range(i+1,n):\n            if arr[i] + arr[j] == min_diff:\n                return min_diff\n            else:\n                min_diff = min(min_diff,arr[i]+arr[j])\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    import math\n    arr.sort()\n    l = len(arr)\n    if(l<2):\n        return 0\n    else:\n        min_diff = float('inf')\n        for i in range(l-1):\n            if(abs(arr[i+1]-arr[i])<min_diff):\n                min_diff = abs(arr[i+1]-arr[i])\n        return min_diff\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    min_diff = 1\n    for i in range(n-1):\n        for j in range(i+1,n):\n            if (abs(arr[i] - arr[j])) < min_diff:\n                min_diff = abs(arr[i] - arr[j])\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    arr.sort()\n    min_diff = float('inf')\n"
    },
    {
        "number": 763,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_min_diff(arr,n): \n    '''\n    Write a python function to find the minimum difference between any two elements in a given array. https://www.geeksforgeeks.org/find-minimum-difference-pair/\n    '''\n    if n<=1:\n        return None\n    arr.sort()\n    res = arr[1]-arr[0]\n    for i in range(2,n):\n        res = min(res,arr[i]-arr[i-1])\n    return res\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l = list(str)\n    count = 0\n    for i in l:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if (i.isdigit()):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in range(len(str)):\n        if str[i] in \"0123456789\":\n            count+=1\n    print(count)\nnumber_ctr(\"The quick brown fox jumps over the lazy dog\")\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    number = 0\n    for s in str:\n        if s.isdigit():\n            number += 1\n    return number\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count += 1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    \n    count = 0\n    for i in str:\n        if i.isalpha():\n            count += 1\n    print(count)\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    count = 0\n    for i in str:\n        if i.isdigit():\n            count+=1\n    return count\ndef first_n_char(str,n):\n    '''\n    Write a python function to count number of characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if count == n:\n            break\n        count+=1\n    return count\ndef last_n_char(str,n):\n    '''\n    Write a python function to count number of characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if count == n:\n            break\n        count+=1\n    return count\ndef first_n_char_lower(str,n):\n    '''\n    Write a python function to count number of characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if count == n:\n            break\n        count+=1\n        if i.islower():\n            return i\ndef count_unique(str):\n    '''\n    Write a python function to count number of unique characters in a given string.\n    '''\n    count = 0\n    for i in str:\n        if str.count(i) == 1:\n            count+=1\n    return count\ndef is_palindrome(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    rev = str[::-1]\n    if str == rev:\n        return True\n    else:\n        return False\ndef is_palindrome_alternative(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    rev = str[::-1]\n    if str == rev:\n        return True\n    else:\n        return False\ndef is_palindrome_optimized(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    rev = str[::-1]\n    if str == rev:\n        return True\n    else:\n        return False\ndef is_palindrome_fast(str):\n    '''\n    Write a python function to check whether a given string is a palindrome or not.\n    '''\n    import collections\n    str_counter = collections.Counter(str)\n    odd_count = 0\n    for i in str_counter:\n        if str_counter[i]%2!= 0:\n            odd_count += 1\n    if odd_count <= 1:\n        return True\n    else:\n        return False\ndef count_vowels(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    count = 0\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    for i in str:\n        if i in vowel:\n            count+=1\n    return count\ndef count_vowels_optimized(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    count = 0\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    for i in str:\n        if i in vowel:\n            count+=1\n    return count\ndef count_vowels_with_duplicates_optimized(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    count = 0\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    for i in str:\n        if i in vowel:\n            count+=1\n    return count\ndef count_vowels_with_duplicates_fast(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in vowel:\n        if i in str:\n            count += str.count(i)\n    return count\ndef count_vowels_with_duplicates_fast_optimized(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in vowel:\n        if i in str:\n            count += str.count(i)\n    return count\ndef count_vowels_with_duplicates_fast_optimized2(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    return len([i for i in vowel if i in str])\ndef count_vowels_with_duplicates_fast3(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    return sum(str.count(i) for i in vowel)\ndef count_vowels_with_duplicates_fast4(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    return sum(1 for i in vowel if i in str)\ndef count_vowels_with_duplicates_fast5(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    return sum(str.count(i) for i in vowel)\ndef count_vowels_with_duplicates_fast6(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    return sum(str.count(i) for i in vowel)\ndef count_vowels_with_duplicates_fast7(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in vowel:\n        count += str.count(i)\n    return count\ndef count_vowels_with_duplicates_fast8(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in vowel:\n        if str.count(i) > 1:\n            count += 1\n    return count\ndef count_vowels_with_duplicates_fast9(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in vowel:\n        if str.count(i) > 1:\n            count += 1\n    return count\ndef count_vowels_with_duplicates_fast10(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in vowel:\n        count += str.count(i)\n    return count\ndef count_vowels_with_duplicates_fast11(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a', 'e', 'i', 'o', 'u']\n    count = 0\n    for i in vowel:\n        count += str.count(i)\n    return count\ndef count_vowels_with_duplicates_fast12(str):\n    '''\n    Write a python function to count number of vowels in a given string.\n    '''\n    vowel = ['a'"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    print(str[-1].isdigit())\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    l=len(str)\n    count=0\n    for i in range(l):\n        if str[i].isdigit():\n            count+=1\n    return count\n"
    },
    {
        "number": 764,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def number_ctr(str):\n    '''\n    Write a python function to count number of digits in a given string.\n    '''\n    num=0\n    for i in str:\n        if i.isdigit():\n            num=num+1\n    print(\"Number of digits in the given string:\",num)\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    def gcd(a,b): \n        if a == 0: \n            return b; \n        return gcd(b % a, a); \n    ans = 0\n    if n == 1:\n        return 1\n    for i in range(2,n): \n        if n % i == 0: \n            g = gcd(i, n/i) \n            if g == 1: \n                ans += 1\n            elif g > 1: \n                ans += 2\n    return ans \n        \ndef commonChild(s1, s2):\n    '''\n    Write a function to count the number of common characters between two strings.\n    geeksforgeeks.org/common-characters-in-two-strings/\n    '''\n    m = len(s1)\n    n = len(s2)\n    # Create a table to store results of subproblems\n    dp = [[0 for x in range(n+1)] for x in range(m+1)]\n    # Fill d[][] in bottom up manner\n    for i in range(m + 1):\n        for j in range(n + 1):\n            if i == 0 or j == 0:\n                dp[i][j] = 0\n            elif s1[i-1] == s2[j-1]:\n                dp[i][j] = dp[i-1][j-1] + 1\n            else:\n                dp[i][j] = max(dp[i][j-1], dp[i-1][j])\n    # Get the maximum of all values in d[][]\n    return dp[m][n]\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    s = str(n)\n    if n % 2 == 0: \n        return int(s)\n    else: \n        return int(s[1:len(s)]) \n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k = n\n    for i in range(1,21):\n        if k==1:\n            return k\n        elif k%2==0:\n            k = k/2\n        else:\n            k = 3*k + 1\n    return k\n    \ndef nth_polite(n):\n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    k = n\n    for i in range(1,21):\n        if k==1:\n            return k\n        elif k%2==0:\n            k = k/2\n        else:\n            k = 3*k + 1\n    return k\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # takes a number and returns the next polite number \n    if n == 1:\n        return 1\n    else:\n        # returns the nth polite number \n        return n*(n+1)//2\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    # nums = {2, 4, 8, 10, 12, 14, 16, 18, 20, 24, 28, 30, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 80, 84, 88, 92, 96, 100} \n    # # print(nums)\n    # # print(sum(nums))\n    # if(sum(nums) == 0): \n    #     return 1\n    # else: \n    #     return math.ceil(sum(nums) / len(nums)) \n    # nums = {2, 4, 8, 10, 12, 14, 16, 18, 20, 24, 28, 30, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 80, 84, 88, 92, 96, 100} \n    # nums = list(nums) \n    # # print(nums)\n    # nums.sort() \n    # print(nums)\n    # nums.append(sum(nums)) \n    # print(nums)\n    # if(n == sum(nums)):\n    #     return 1\n    # else:\n    #     return -1\n    \n    # n = 0\n    # sum = 0\n    # i = 0\n    # nums = {2, 4, 8, 10, 12, 14, 16, 18, 20, 24, 28, 30, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 80, 84, 88, 92, 96, 100} \n    # nums = list(nums)\n    # nums.sort()\n    # print(nums)\n    # nums.append(sum(nums))\n    # print(nums)\n    # print(nums[-1])\n    \n    # if(n == nums[-1]):\n    #     return 1\n    # else:\n    #     return -1\n    \n    n = 0\n    sum = 0\n    i = 0\n    nums = {2, 4, 8, 10, 12, 14, 16, 18, 20, 24, 28, 30, 32, 36, 40, 44, 48, 52, 56, 60, 64, 68, 72, 80, 84, 88, 92, 96, 100} \n    nums = list(nums)\n    nums.sort()\n    print(nums)\n    nums.append(sum(nums))\n    print(nums)\n    print(nums[-1])\n    print(nums[-2])\n    \n    if(n == nums[-1]):\n        return 1\n    elif(n == nums[-2]):\n        return 2\n    else:\n        return -1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = n - 1\n    temp = 1\n    for i in range(1, n + 1):\n        temp = temp * 2\n    return temp\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n==1):\n        return 1\n    if(n==2):\n        return 2\n    i=3\n    while(True):\n        if(is_polite(i)):\n            return i\n        else:\n            i+=1\n        \ndef is_polite_rec(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    if(n==1):\n        return 1\n    if(n==2):\n        return 2\n    i=3\n    while(True):\n        if(is_polite_rec(i)):\n            return i\n        else:\n            i+=1\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    # if n == 1: \n    #     return 1\n    # if n == 2: \n    #     return 2\n    # if n == 3: \n    #     return 3\n    # if n == 4: \n    #     return 4\n    # i = 5\n    # polite = 5\n    # while i <= n:\n    #     polite = polite * 5 + 1\n    #     i += 1\n    # return polite\n    if n == 1: \n        return 1\n    if n == 2: \n        return 2\n    if n == 3: \n        return 3\n    if n == 4: \n        return 4\n    i = 5\n    polite = 5\n    while i <= n:\n        polite = polite * 5 + 1\n        i += 1\n    return polite\n"
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    \n    def nth_polite(n): \n        i, x = 1, 2\n        while i <= n: \n            x += 2\n            i += 1\n        return x - 2\n    \n    return nth_polite(n)\n    "
    },
    {
        "number": 765,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef is_polite(n): \n    '''\n    Write a function to find nth polite number. geeksforgeeks.org/n-th-polite-number/\n    '''\n    n = int(n)\n    n1 = 1\n    i = 2\n    while i <= n:\n        n1 += 2*i\n        i += 1\n    if n1 == n:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1 = sorted(l1)\n    l1_len = len(l1)\n    \n    for i in range(l1_len):\n        if i+1 >= l1_len:\n            break\n        if l1[i+1] - l1[i] == 1:\n            yield l1[i], l1[i+1]\n    \n    # Method 2:\n    '''\n    for i in range(len(l1)-1):\n        for j in range(i+1, len(l1)):\n            if l1[i]!= l1[j]:\n                yield l1[i], l1[j]\n    '''\n    \n    \n    \ndef remove_duplicates(l1):\n    '''\n    Write a function to return a new list which contains only the unique elements from the \n    old list.\n    '''\n    return list(set(l1))\n    \ndef remove_duplicates_2(l1):\n    '''\n    Write a function to return a new list which contains only the unique elements from the \n    old list.\n    '''\n    # Using hash table\n    hash_table = {}\n    \n    for i in l1:\n        if i in hash_table:\n            hash_table[i] += 1\n        else:\n            hash_table[i] = 1\n    \n    for i in hash_table:\n        if hash_table[i] > 1:\n            l1.remove(i)\n    \n    return l1\n    \n    \ndef length_of_longest_substring(s):\n    '''\n    Write a function to find the length of the longest substring without repeating characters.\n    '''\n    # Method 1:\n    '''\n    count = 0\n    current_string = ''\n    for i in s:\n        if i not in current_string:\n            current_string += i\n            count += 1\n        else:\n            current_string = current_string[current_string.index(i) + 1:] + i\n    return count\n    '''\n    \n    # Method 2:\n    '''\n    return max([len(x) for x in set(s)])\n    '''\n    \n    # Method 3:\n    '''\n    start, end = 0, 0\n    m, n = len(s), len(s)\n    longest = 0\n    substr_start = 0\n    \n    while end < m:\n        if s[end] not in s[start:end]:\n            longest = max(longest, end - start)\n            substr_start = end + 1\n        end += 1\n    return max(longest, end - start)\n    '''\n    \n    # Method 4:\n    '''\n    i, j, longest = 0, 0, 0\n    hash_table = {}\n    \n    while j < m:\n        if s[j] not in hash_table:\n            hash_table[s[j]] = 1\n        else:\n            hash_table[s[j]] += 1\n        \n        if j - i + 1 > longest:\n            longest = j - i + 1\n            substr_start = i\n        \n        if hash_table[s[j]] == 1:\n            del hash_table[s[j]]\n        else:\n            hash_table[s[j]] -= 1\n        \n        j += 1\n        \n    return longest, substr_start\n    '''\n    \n    # Method 5:\n    '''\n    start, longest = 0, 0\n    substr_start = 0\n    \n    for i in range(m):\n        if s[i] not in s[start:i]:\n            longest = max(longest, i - start + 1)\n            substr_start = i\n        \n        start = i + 1\n    return longest, substr_start\n    '''\n    \n    # Method 6:\n    '''\n    # Initialize left and right pointers\n    left, right = 0, 0\n    max_length = 0\n    \n    # Initialize Hash Map\n    hash_map = {}\n    \n    # Traverse the given string\n    while right < len(s):\n        # If character at right is not in hash map, add it\n        if s[right] not in hash_map:\n            hash_map[s[right]] = 1\n        \n        # If we have seen the character before, move the left pointer to the left\n        else:\n            hash_map[s[right]] += 1\n        \n        # Keep updating the right pointer\n        right += 1\n        \n        # If we come across a duplicate character\n        while (right - left) > max_length and left < len(s):\n            # If the character is not present in hash map\n            if s[left] not in hash_map:\n                left += 1\n            \n            # If we come across another duplicate character\n            else:\n                hash_map[s[left]] -= 1\n                \n                # Since we have seen the character before, move the left pointer to the left\n                if hash_map[s[left]] == 0:\n                    del hash_map[s[left]]\n                \n                # Keep updating the left pointer\n                left += 1\n                \n        # If we come across a new maximum length and the maximum length is already\n        # greater than the length of longest subarray, update the maximum\n        if right - left > max_length:\n            max_length = right - left\n    \n    # Return the length of the longest substring\n    return max_length\n    '''\n    \n    \ndef number_of_inversions(l1, l2):\n    '''\n    Write a function to count the number of inversions of an array.\n    Inversion is the number of elements in the array which are\n    out of place. In other words, a smaller element appears after a \n    greater element if the array is not sorted.\n    '''\n    inversions = 0\n    \n    if len(l1) < len(l2):\n        l1, l2 = l2, l1\n    \n    for i in range(len(l1)):\n        for j in range(i + 1, len(l2)):\n            if l1[i] > l2[j]:\n                inversions += 1\n                \n    return inversions\n    \ndef number_of_inversions_recursive(l1, l2, start_index1, start_index2):\n    '''\n    Write a function to count the number of inversions of an array.\n    Inversion is the number of elements in the array which are\n    out of place. In other words, a smaller element appears after a \n    greater element if the array is not sorted.\n    '''\n    if start_index1 >= len(l1) or start_index2 >= len(l2):\n        return 0\n    \n    if l1[start_index1] > l2[start_index2]:\n        return 1 + number_of_inversions_recursive(l1, l2, start_index1 + 1, start_index2)\n    \n    else:\n        return 1 + number_of_inversions_recursive(l1, l2, start_index1, start_index2 + 1)\n    \n    \n    \ndef main():\n    # l1 = [3, 4, 1, 7, 6, 2, 8]\n    # l2 = [2, 4, 1, 7, 6, 8]\n    \n    # l1 = [-1, 4, 2, -5]\n    # l2 = [2, 4, 1, 7, 6, -5]\n    \n    # l1 = [7, 8, 3, 4, 1, 6]\n    # l2 = [4, 3, 8, 1, 7, 6]\n    \n    l1 = [-1, -2, -3]\n    l2 = [-2, -1, -3]\n    \n    print(pair_wise(l1))\n    print(pair_wise(l2))\n    \n    print(remove_duplicates(l1))\n    print(remove_duplicates(l2))\n    \n    print(length_of_longest_substring(s))\n    \n    print(length_of_longest_substring_2(s))\n    \n    print(remove_duplicates_2(l1))\n    print(remove_duplicates_2(l2))\n    \n    print(number_of_inversions(l1, l2))\n    \n    prin"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) <= 1:\n        return l1\n    l2 = []\n    for i in range(len(l1)):\n        if i + 1 < len(l1):\n            l2.append(l1[i+1] - l1[i])\n        else:\n            l2.append(l1[i])\n    return l2\n    \ndef is_valid(l1):\n    '''\n    Write a function to check if a list is palindrome or not.\n    '''\n    if len(l1) == 0:\n        return False\n    if len(l1) == 1:\n        return True\n    i = 0\n    j = len(l1)-1\n    while (i < j):\n        if l1[i]!= l1[j]:\n            return False\n        i += 1\n        j -= 1\n    return True\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    if len(l1) == 1:\n        return []\n    pairs = []\n    for i in range(0, len(l1) - 1):\n        pairs.append([l1[i], l1[i + 1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pairs = []\n    for i in range(len(l1)-1):\n        pairs.append([l1[i],l1[i+1]])\n    return pairs\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2=[]\n    for i in range(len(l1)):\n        if i==0:\n            continue\n        if i!=len(l1)-1:\n            l2.append((l1[i],l1[i+1]))\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l2 = []\n    for i in range(len(l1)):\n        l2.append([l1[i], l1[i+1]])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1=list(l1)\n    l2=[]\n    for i in range(len(l1)):\n        l2.append(l1[i:i+2])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    l1_copy = l1.copy()\n    l2 = []\n    for i in range(len(l1)):\n        if i == len(l1) - 1:\n            l2.append(l1_copy[i])\n        else:\n            l2.append(l1_copy[i:i + 2])\n    return l2\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    return [(x,y) for x,y in zip(l1, l1[1:])]\n"
    },
    {
        "number": 766,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def pair_wise(l1):\n    '''\n    Write a function to return a list of all pairs of consecutive items in a given list.\n    '''\n    pair_list = []\n    for i in range(len(l1)-1):\n        pair_list.append((l1[i],l1[i+1]))\n    return pair_list\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    cnt = 0\n    for i in range(len(arr)):\n        for j in range(i+1, len(arr)):\n            if(arr[i]+arr[j] == sum):\n                cnt += 1\n    return cnt\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    '''\n    def get_pairs_count(arr, sum):\n    def get_pairs_count(arr, sum):\n        def get_pairs_count(arr, sum):\n        def get_pairs_count(arr, sum):\n        def get_pairs_count(arr, sum):\n        def get_pairs_count(arr, sum):\n        def get_pairs_count(arr, sum):\n    '''\n    # create a dictionary\n    # keys are numbers and values are the frequencies of each number in the array\n    count = {}\n    for num in arr:\n        count[num] = count.get(num, 0) + 1\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    from itertools import combinations\n    count = 0\n    for i in range(1,len(arr)):\n        for j in range(0,i):\n            c = list(combinations(arr,2))\n            for x in c:\n                if sum == x[0]+x[1]:\n                    count +=1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(len(arr)):\n        for j in range(len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i+1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count = count + 1\n    return count\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    d = {}\n    for i in range(0, len(arr)):\n        if arr[i] in d:\n            d[arr[i]] = d[arr[i]] + 1\n        else:\n            d[arr[i]] = 1\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    cnt = 0\n    i = 0\n    arr.sort()\n    while i < len(arr):\n        j = i + 1\n        while j < len(arr):\n            if arr[i] + arr[j] == sum:\n                cnt += 1\n            j += 1\n        i += 1\n    return cnt\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    count = 0\n    for i in range(0, len(arr)):\n        for j in range(i + 1, len(arr)):\n            if arr[i] + arr[j] == sum:\n                count += 1\n    print(count)\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    '''\n    count = 0\n    if len(arr) == 0:\n        return count\n    for i in range(len(arr)):\n        for j in range(i+1,len(arr)):\n            if arr[i]+arr[j] == sum:\n                count+=1\n    return count\n    '''\n"
    },
    {
        "number": 767,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def get_pairs_count(arr, sum):\n    '''\n    Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019. The funtion gets as input a list of numbers and the sum,\n    '''\n    n = len(arr)\n    count = 0\n    for i in range(n):\n        for j in range(i+1, n):\n            if (arr[i] + arr[j] == sum):\n                count += 1\n    return count\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = []\n    for i in li2:\n        if i not in li1:\n            li3.append(i)\n    return li3\n    \n    \nif __name__ == \"__main__\":\n    li1 = [1,2,3,4]\n    li2 = [2,1,3]\n    print(Diff(li1,li2))\n    \n    # Output\n    # [3,4]"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    result=[]\n    for i in li1:\n        if not i in li2:\n            result.append(i)\n    return result\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li_diff = []\n    li1.sort()\n    li2.sort()\n    li_diff = list(set(li1) - set(li2))\n    return li_diff\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    if(len(li1) > len(li2)):\n        diff = li1[len(li2):]\n    else:\n        diff = li2[len(li1):]\n    return diff\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    #li1 = [1,5,10,5,3]\n    #li2 = [4,7,9]\n    \n    li1.sort()\n    li2.sort()\n    \n    index = 0\n    li3 = []\n    while index < len(li1):\n        if li1[index]!= li2[index]:\n            li3.append(li1[index])\n        index += 1\n    return li3\n    \n    \n    #li3 = []\n    #for i in li1:\n    #    if i not in li2:\n    #        li3.append(i)\n    #return li3\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    return [i for i in li1 if i not in li2]\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    a=[]\n    li2.extend(li1)\n    for i in li2:\n        if i not in li1:\n            a.append(i)\n    return a\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    \n    return list(set(li1)-set(li2))\n    \n    \ndef StrToInt(li):\n    '''\n    Write a python function to convert a list of strings to integers.\n    '''\n    \n    return list(map(int,li))\n    \n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    # li1 = input(\"Enter the list: \")\n    # li2 = input(\"Enter the list: \")\n"
    },
    {
        "number": 769,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def Diff(li1,li2):\n    '''\n    Write a python function to get the difference between two lists.\n    '''\n    li3 = list(set(li1)-set(li2))\n    print(li3)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_num_list = []\n    odd_num_list = list(range(1,n+1))\n    odd_num_list = list(filter(lambda x: x%2!=0, odd_num_list))\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    i = 1\n    sum = 0\n    while i <= n :\n        if i % 2!= 0 :\n            sum = sum + i**4\n        i += 1\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0 \n    for i in range(1, n+1) :\n        if i % 2!= 0 :\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    i = 1\n    while (i <= n) :\n        if (i % 2) == 1 :\n            sum = sum + i ** 4\n        i = i + 1\n    print (sum)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    odd_nums = []\n    for i in range(n) : \n        if i % 2 == 1 : \n            odd_nums.append(i)\n    odd_nums_squared = []\n    for i in odd_nums : \n        odd_nums_squared.append(i**2)\n    return sum(odd_nums_squared)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    if n == 0 : \n        print(\"Cannot find the sum of 0th and 1st odd natural numbers\")\n    elif n < 0 :\n        print(\"Enter a valid natural number\")\n    else :\n        sum_odd = 0\n        for i in range(1,n+1,1):\n            if i%2!= 0:\n                sum_odd += i**4\n        print(\"Sum of the fourth power of first n odd natural numbers is :\", sum_odd)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    total = 0\n    for i in range(n):\n        if i % 2!= 0:\n            total += i**3\n    print(total)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    count=0\n    s=0\n    for i in range(1,n+1) :\n        if (i%2!=0) : \n            count+=i**2\n    print(count)\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum = 0\n    for i in range(1,n+1) :\n        if(i%2 == 1) :\n            sum += i**4\n    return sum\n"
    },
    {
        "number": 770,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_num_sum(n) : \n    '''\n    Write a python function to find the sum of fourth power of first n odd natural numbers.\n    '''\n    sum=0\n    for i in range(1,n+1) :\n        if(i%2!=0) :\n            sum=sum+i**2\n    return sum\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = []\n    pare = {')':'(', ']':'[', '}':'{'}\n    for s in exp:\n        if s in '([{':\n            stack.append(s)\n        else:\n            if not stack:\n                return False\n            if pare[s]!= stack[-1]:\n                return False\n            stack.pop()\n    return False if stack else True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    left = \"({[\"\n    right = \"}])\"\n    \n    stack = []\n    for i in exp:\n        if i in left:\n            stack.append(i)\n        elif i in right:\n            if len(stack) == 0:\n                return False\n            elif right.index(i)!= left.index(stack[-1]):\n                return False\n            else:\n                stack.pop()\n    return len(stack) == 0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack=[]\n    for ch in exp:\n        if ch==\"(\":\n            stack.append(ch)\n        elif ch==\")\":\n            if len(stack)==0:\n                return False\n            else:\n                stack.pop()\n    return len(stack)==0\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    \n    if len(exp)%2!= 0:\n        return False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp)%2!= 0:\n        return False\n    else:\n        for i in range(0,len(exp),2):\n            if len(exp[i+1]) > 0:\n                return False\n        return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if not exp:\n        return True\n    stack = deque()\n    brackets = {'(':')', '{':'}', '[':']'}\n    for i in exp:\n        if i in brackets.values():\n            stack.append(i)\n        elif i in brackets.keys():\n            if stack and stack[-1] == brackets[i]:\n                stack.pop()\n            else:\n                return False\n    return True if len(stack) == 0 else False\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    stack = deque()\n    symbols = set(['(', ')', '{', '}', '[', ']', ';', ','])\n    pairs = set([('(', ')'), ('[', ']'), ('{', '}'), ('{', '}'), ('[', ']'), ('(', ')'), ('(', ')'), ('{', '}'), ('{', '}')])\n    valid_index = 0\n    if len(exp) % 2!= 0:\n        return False\n    for index, val in enumerate(exp):\n        if val in symbols:\n            stack.append(val)\n            if val == ';':\n                if stack[0] == ';':\n                    return False\n                if stack[0] == '{' and stack[-1] == '}':\n                    stack.pop()\n                    stack.pop()\n                    valid_index = index + 1\n                elif stack[0] == '[' and stack[-1] == ']':\n                    stack.pop()\n                    stack.pop()\n                    valid_index = index + 1\n                elif stack[0] == '(' and stack[-1] == ')':\n                    stack.pop()\n                    stack.pop()\n                    valid_index = index + 1\n                elif stack[0] == '{' and stack[-1] == '}':\n                    stack.pop()\n                    stack.pop()\n                    valid_index = index + 1\n                elif stack[0] == '[' and stack[-1] == ']':\n                    stack.pop()\n                    stack.pop()\n                    valid_index = index + 1\n            elif val == ')':\n                if stack[0] == '(':\n                    stack.pop()\n                    valid_index = index + 1\n                else:\n                    return False\n            elif val == '}':\n                if stack[0] == '{':\n                    stack.pop()\n                    valid_index = index + 1\n                else:\n                    return False\n            elif val == ']':\n                if stack[0] == '[':\n                    stack.pop()\n                    valid_index = index + 1\n                else:\n                    return False\n        if len(stack) == 0 and index!= valid_index:\n            return False\n    if len(stack)!= 0:\n        return False\n    return True\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    op_stack = deque()\n    i=0\n    while i<len(exp):\n        if exp[i]=='(':\n            op_stack.append('(')\n            i+=1\n        elif exp[i]==')':\n            if op_stack:\n                op_stack.pop()\n            else:\n                return False\n            i+=1\n        elif exp[i]=='[':\n            op_stack.append('[')\n            i+=1\n        elif exp[i]==']':\n            if op_stack:\n                op_stack.pop()\n            else:\n                return False\n            i+=1\n        elif exp[i]=='+' or exp[i]=='-' or exp[i]=='*' or exp[i]=='/' or exp[i]=='%' or exp[i]=='=':\n            op_stack.append(exp[i])\n            i+=1\n        elif exp[i]=='<' or exp[i]=='>' or exp[i]=='<=' or exp[i]=='>=' or exp[i]=='==' or exp[i]=='!=' or exp[i]=='=<' or exp[i]=='>=' or exp[i]=='!':\n            op_stack.append(exp[i])\n            i+=1\n        else:\n            return False\n    if len(op_stack)==0:\n        return True\n    else:\n        return False"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    brackets = deque([('(', ')')])\n    for char in exp:\n        if char == '(':\n            brackets.append(('(', ')'))\n        elif char == ')':\n            if not brackets or brackets.pop()!= ('(', ')'):\n                return False\n    return not brackets\n"
    },
    {
        "number": 771,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from collections import deque\ndef check_expression(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    q = deque([])\n    q.append(exp[0])\n    if exp[0] == ')':\n        while q:\n            a = q.popleft()\n            if a == '(':\n                break\n            elif a == ')':\n                return False\n            elif a == '*':\n                q.append('*')\n                q.append('(')\n                q.append(')')\n                q.append('*')\n            elif a == '+':\n                q.append('+')\n                q.append('(')\n                q.append(')')\n                q.append('+')\n            elif a == '-':\n                q.append('-')\n                q.append('(')\n                q.append(')')\n                q.append('-')\n    elif exp[0] == '(':\n        while q:\n            a = q.popleft()\n            if a == ')':\n                break\n            elif a == ')':\n                return False\n            elif a == '*':\n                q.append('*')\n                q.append('(')\n                q.append(')')\n                q.append('*')\n            elif a == '+':\n                q.append('+')\n                q.append('(')\n                q.append(')')\n                q.append('+')\n            elif a == '-':\n                q.append('-')\n                q.append('(')\n                q.append(')')\n                q.append('-')\n    elif exp[0] == '*':\n        while q:\n            a = q.popleft()\n            if a == ')':\n                break\n            elif a == ')':\n                return False\n            elif a == '*':\n                q.append('*')\n                q.append('(')\n                q.append(')')\n                q.append('*')\n            elif a == '+':\n                q.append('+')\n                q.append('(')\n                q.append(')')\n                q.append('+')\n            elif a == '-':\n                q.append('-')\n                q.append('(')\n                q.append(')')\n                q.append('-')\n    else:\n        return False\n    if len(q)!= 0:\n        return False\n    return True\ndef check_parenthesis(exp):\n    '''\n    Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\n    '''\n    if len(exp) == 0:\n        return True\n    if exp[0] == '(':\n        stack = deque()\n        stack.append(exp[0])\n        for i in range(1, len(exp)):\n            if exp[i] == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n            elif exp[i] == '(':\n                stack.append(exp[i])\n    elif exp[0] == ')':\n        stack = deque()\n        stack.append(exp[0])\n        for i in range(1, len(exp)):\n            if exp[i] == '(':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n            elif exp[i] == ')':\n                stack.append(exp[i])\n    elif exp[0] == '*':\n        stack = deque()\n        stack.append(exp[0])\n        for i in range(1, len(exp)):\n            if exp[i] == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n            elif exp[i] == '*':\n                stack.append(exp[i])\n            elif exp[i] == '+':\n                stack.append(exp[i])\n            elif exp[i] == '-':\n                stack.append(exp[i])\n    elif exp[0] == '+':\n        stack = deque()\n        stack.append(exp[0])\n        for i in range(1, len(exp)):\n            if exp[i] == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n            elif exp[i] == '+':\n                stack.append(exp[i])\n            elif exp[i] == '-':\n                stack.append(exp[i])\n    elif exp[0] == '-':\n        stack = deque()\n        stack.append(exp[0])\n        for i in range(1, len(exp)):\n            if exp[i] == ')':\n                if stack:\n                    stack.pop()\n                else:\n                    return False\n            elif exp[i] == '-':\n                stack.append(exp[i])\n            elif exp[i] == '+':\n                stack.append(exp[i])\n    else:\n        return False\n    if len(stack)!= 0:\n        return False\n    return True\ndef longest_str_chain(str_list):\n    '''\n    Write a function to find the longest string chain.\n    '''\n    def get_str_chain(str_list, n):\n        if n == 0:\n            return 1\n        max_len = 0\n        for i in range(len(str_list)):\n            if check_expression(str_list[i]) and check_parenthesis(str_list[i]):\n                max_len = max(max_len, get_str_chain(str_list[i+1:], n-1))\n        return max_len + 1\n    max_len = 0\n    for i in range(len(str_list)):\n        if check_expression(str_list[i]) and check_parenthesis(str_list[i]):\n            max_len = max(max_len, get_str_chain(str_list[i+1:], len(str_list)-i-1))\n    return max_len\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    # Solution 1\n    result = \"\"\n    for s in test_str.split(\" \"):\n        if len(s)!= K:\n            result += s + \" \"\n    return result.strip()\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    lst = []\n    for i in range(len(test_str)):\n        if len(test_str[i:]) == K:\n            lst.append(test_str[i:])\n    return lst\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    return \" \".join(filter(lambda x: len(x)!= K, test_str.split()))\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    result = \"\"\n    for i in range(len(words)):\n        if len(words[i])!= K:\n            result += words[i] + \" \"\n    return result.rstrip()\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    new_str = ''\n    while len(test_str) > 0:\n        if len(test_str) < K:\n            new_str += test_str[0]\n            test_str = test_str[1:]\n        else:\n            new_str += test_str[:K]\n            test_str = test_str[K:]\n    return new_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    length = len(test_str)\n    new_string = test_str\n    for i in range(length):\n        if len(new_string[i:]) == K:\n            new_string = new_string.replace(new_string[i:],'')\n    return new_string\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    if test_str == \"\":\n        return \"\"\n    for i in range(len(test_str)):\n        if len(test_str) - i < K:\n            test_str = test_str[:i] + test_str[i+1:]\n    return test_str\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    list_of_str = test_str.split(\" \")\n    while True:\n        try:\n            if list_of_str[-1] == \"\":\n                del list_of_str[-1]\n        except IndexError:\n            break\n    for i in list_of_str:\n        if len(i) == K:\n            list_of_str.remove(i)\n    \n    return \" \".join(list_of_str)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    words = test_str.split()\n    lengths = list()\n    for word in words:\n        if len(word) not in lengths:\n            lengths.append(len(word))\n    \n    remove_words = []\n    for word in words:\n        if len(word)!= K:\n            remove_words.append(word)\n    \n    return''.join(remove_words)\n"
    },
    {
        "number": 772,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_length(test_str, K):\n    '''\n    Write a function to remove all the words with k length in the given string.\n    '''\n    result = []\n    i = 0\n    while i < len(test_str):\n        i = test_str.index(test_str[i], i)\n        length = len(test_str[i])\n        if length <= K:\n            result.append(test_str[i])\n            i += 1\n        else:\n            i += 1\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    match = re.findall(pattern,text)\n    if len(match) == 0:\n        return None\n    else:\n        return (match[0],len(match[0]),\"occurance_substring\")\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if len(text) < len(pattern):\n        return None\n    for i in range(len(text) - len(pattern) + 1):\n        if text[i] == pattern[0]:\n            j = 1\n            while j < len(pattern) and text[i + j] == pattern[j]:\n                j += 1\n            if j == len(pattern):\n                return i\n    return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    result = []\n    for i in range(len(text)-len(pattern)+1):\n        if re.search(pattern,text[i:len(pattern)+i]):\n            result.append(text[i:len(pattern)+i])\n    return result\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    for i in range(0,len(text)):\n        if re.search(pattern,text[i:i+len(pattern)]):\n            return re.search(pattern,text[i:i+len(pattern)])\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if re.findall(pattern,text):\n        return re.findall(pattern,text)\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pos = -1\n    occ = 0\n    text_size = len(text)\n    pattern_size = len(pattern)\n    pattern_search = re.compile(pattern)\n    for i in range(text_size):\n        if pattern_search.search(text[i:i+pattern_size]):\n            pos = i + pattern_search.search(text[i:i+pattern_size]).span()[0]\n            occ += 1\n        else:\n            if occ!= 0:\n                return(pos,occ)\n            else:\n                return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    text = text.lower()\n    pattern = pattern.lower()\n    result = re.findall(pattern,text)\n    if len(result)>0:\n        return result\n    else:\n        return None\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    pattern_pos = []\n    for i in range(len(text)-len(pattern)+1):\n        if text[i:i+len(pattern)] == pattern:\n            pattern_pos.append(i)\n    if pattern_pos == []:\n        return None\n    return pattern_pos\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if not re.search(pattern,text):\n        return None\n    else:\n        return re.search(pattern,text)\n"
    },
    {
        "number": 773,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef occurance_substring(text,pattern):\n    '''\n    Write a function to find the occurrence and position of the substrings within a string. Return None if there is no match.\n    '''\n    if(not isinstance(text,str) or not isinstance(pattern,str)):\n        raise Exception(\"Input should be strings\")\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0, len(nums)):\n        if i % 2!= 0:\n            if nums[i] % 2!= 0:\n                print(\"No\")\n                return\n    print(\"Yes\")\n    return\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i%2!= 0:\n            if nums[i]%2!=0:\n                return True\n    return False\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odds = []\n    if len(nums) == 0:\n        return odds\n    else:\n        for i in range(len(nums)):\n            if i % 2!= 0:\n                odds.append(nums[i])\n        return odds\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1, len(nums), 2):\n        if nums[i] % 2 == 0:\n            return False\n    return True\n    \nif __name__ == '__main__':\n    nums = [1, 2, 3, 4, 5, 6, 7]\n    print(odd_position(nums)"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if (i%2!=0):\n            if nums[i]%2==0:\n                return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 0:\n            continue\n        else:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    odds = []\n    for i in range(len(nums)):\n        if i % 2 == 0:\n            continue\n        else:\n            odds.append(nums[i])\n    return odds\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(1,len(nums)-1,2):\n        if nums[i]%2!= 1:\n            return 'No'\n    return 'Yes'\n"
    },
    {
        "number": 775,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_position(nums):\n    '''\n    Write a python function to check whether every odd index contains odd numbers of a given list.\n    '''\n    for i in range(len(nums)):\n        if i % 2 == 0 and nums[i] % 2 == 0:\n            return False\n    return True\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = {'a', 'e', 'i', 'o', 'u'}\n    counter = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i] == test_str[i + 1] == test_str[i + 2] == test_str[i + 3]:\n                counter += 1\n    return counter\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    str_len = len(test_str)\n    for i in range(str_len):\n        if test_str[i] in 'aeiouAEIOU':\n            count += 1\n        if test_str[i] in 'aeiou':\n            if test_str[i-1] in 'aeiou':\n                count += 1\n        if test_str[i] in 'AEIOU':\n            if test_str[i-1] in 'AEIOU':\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"AEIOU\"\n    vowels_dic = {}\n    count = 0\n    for i in vowels:\n        vowels_dic[i] = 0\n    for j in test_str:\n        if j in vowels_dic:\n            vowels_dic[j] += 1\n    for key in vowels_dic:\n        count += vowels_dic[key]\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = \"aeiou\"\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in vowels:\n            if test_str[i+1] in vowels:\n                count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] in ('a','e','i','o','u','A','E','I','O','U'):\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    return sum([1 for i in test_str if test_str.count(i) == 1])\n    \ndef count_vowels2(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str:\n        return sum([1 if test_str[i] in 'aeiou' and test_str[i-1] in 'aeiou' else 0 for i in range(1,len(test_str))])\n    else:\n        return 0\n        \ndef count_vowels3(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    if test_str:\n        return sum([1 if test_str[i] in 'aeiou' and test_str[i-1] in 'aeiou' else 0 for i in range(1,len(test_str))])\n    else:\n        return 0\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # Time O(n) | Space O(1)\n    count = 0\n    vowels = {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n    for i in range(len(test_str) - 1):\n        if test_str[i] in vowels and test_str[i + 1] in vowels:\n            count += 1\n    return count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    vowels = 'aeiou'\n    string = test_str\n    output = 0\n    for i in range(len(string)):\n        if string[i] in vowels:\n            output += 1\n        if string[i+1] in vowels:\n            output += 1\n        if string[i+2] in vowels:\n            output += 1\n        if string[i+3] in vowels:\n            output += 1\n        if string[i+4] in vowels:\n            output += 1\n        if string[i+5] in vowels:\n            output += 1\n    return output\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    # first_count = test_str.count('a')\n    # second_count = test_str.count('e')\n    # third_count = test_str.count('i')\n    # fourth_count = test_str.count('o')\n    # fifth_count = test_str.count('u')\n    #\n    # return first_count + second_count + third_count + fourth_count + fifth_count\n"
    },
    {
        "number": 776,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_vowels(test_str):\n    '''\n    Write a function to count those characters which have vowels as their neighbors in the given string.\n    '''\n    count = 0\n    for i in range(len(test_str)-1):\n        if test_str[i] in 'aeiou' and test_str[i+1] in 'aeiou':\n            count += 1\n    return count\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    n=len(arr)\n    temp=0\n    count=0\n    #initialize temp and count\n    for i in range(0,n):\n        temp+=arr[i]\n        count+=1\n        if temp not in arr:\n            temp=0\n            count=0\n    return temp,count\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    if len(arr) == 0:\n        return 0\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    res = 0\n    \n    for i in arr:\n        if arr.count(i) == 1:\n            res += i\n            \n    return res\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    # Loop through the list to find the non-repeated number and return the sum\n    result = 0\n    for element in arr:\n        if element not in arr[:element]:\n            result += element\n    return result\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    from collections import Counter\n    sum = 0\n    for i in range(len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    result = []\n    for i in arr:\n        if i not in result:\n            result.append(i)\n    sum = 0\n    for i in result:\n        sum += i\n    return sum\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    from itertools import permutations as perm\n    return sum(set(perm(arr,2)))\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    sum = 0\n    for x in arr:\n        if x not in arr:\n            sum += x\n    return sum\n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # The code below contains the Python function definition\n    # we want you to copy and paste this code into the function below\n    # def find_sum(arr):\n    #     sum = 0\n    #     for i in range(0, len(arr)):\n    #         if (i!= arr[i]):\n    #             sum = sum + arr[i]\n    #     return sum\n    # # End of Python function definition\n    \n    # # Test the function\n    # arr = [1, 1, 2, 3, 5, 3, 2, 2, 2]\n    # print(find_sum(arr))\n    \n    \n    \n    # OR\n    \n    # Python program to find sum of distinct elements\n    # in a given array\n    # changes made :\n    # Added a new function to get_distinct_sum(arr)\n    # In the find_sum() function, added a else statement \n    # to handle when the value to be searched is not present in the arr\n    \n    # Function to get distinct sum of the array\n    # in O(1) time\n    def get_distinct_sum(arr):\n        distinct_sum = 0\n        for num in arr:\n            if (num not in distinct_sum):\n                distinct_sum = distinct_sum + num\n        return distinct_sum\n    \n    \n    # Function to find sum of non-repeated elements\n    def find_sum(arr):\n        # Code here\n        return get_distinct_sum(arr)\n    \n    \n    # Driver program to test above functions\n    arr = [1, 2, 1, 1]\n    print(find_sum(arr))\n    \n    # Output: 2\n    \n    # Change the values of arr[] and test your program\n    arr = [1, 1, 2, 3, 5, 3, 2, 2, 2]\n    print(find_sum(arr))\n    \n    # Output: 10\n    \n    \n    # Change the values of arr[] and test your program\n    arr = [1, 3, 1, 3, 5, 3, 2, 2, 2]\n    print(find_sum(arr))\n    \n    # Output: 7\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n"
    },
    {
        "number": 777,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def find_sum(arr): \n    '''\n    Write a python function to find the sum of non-repeated elements in a given list.\n    '''\n    \n    # initialize an empty list \n    temp_list = [] \n    for i in range(len(arr)): \n        if arr[i] not in temp_list: \n            temp_list.append(arr[i]) \n        else: \n            continue\n    return sum(temp_list) \n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key,group in groupby(list1):\n        result.append([k for k in group])\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    dict_consecutive_duplicates = {}\n    i = 1\n    for i in range(1, len(list1)):\n        if (list1[i-1] == list1[i]):\n            if (i not in dict_consecutive_duplicates):\n                dict_consecutive_duplicates[i] = []\n                dict_consecutive_duplicates[i].append(list1[i-1])\n            else:\n                dict_consecutive_duplicates[i].append(list1[i-1])\n        else:\n            if (i in dict_consecutive_duplicates):\n                dict_consecutive_duplicates[i].append(list1[i-1])\n            else:\n                dict_consecutive_duplicates[i] = []\n                dict_consecutive_duplicates[i].append(list1[i-1])\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list1 = sorted(list1)\n    i = 0\n    j = 0\n    n = len(list1)\n    while i < n:\n        if list1[i] == list1[i+1]:\n            j += 1\n        else:\n            if j:\n                lst = []\n                lst.append(list1[i])\n                lst.append(j)\n                i += j + 1\n                j = 0\n            else:\n                i += 1\n    return lst\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    new_list = []\n    for k, g in groupby(list1):\n        new_list.append(list(g))\n    return new_list\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    result = []\n    for key, group in groupby(list1):\n        result.append((key, list(group)))\n    return result\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    def pack_consecutive_duplicates(list1):\n        if not list1:\n            return []\n        return list(groupby(list1))\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    # Your Code here\n    s = set(list1)\n    r = []\n    for elem, group in groupby(s):\n        r.append(list(group))\n    return r\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    list2 = []\n    for key, group in groupby(list1):\n        list2.append([item for item in group])\n    return list2\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    return [list(i) for i, _ in groupby(list1)]\n"
    },
    {
        "number": 778,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import groupby\ndef pack_consecutive_duplicates(list1):\n    '''\n    Write a function to pack consecutive duplicates of a given list elements into sublists.\n    '''\n    if len(list1) == 0:\n        return []\n    if len(list1) == 1:\n        return [[list1[0]]]\n    list1.sort()\n    list2 = []\n    list3 = []\n    for key, group in groupby(list1):\n        list2.append(key)\n    for j in range(len(list1)):\n        if j == 0:\n            list3.append(list2[j])\n        elif list2[j] == list2[j-1] and j!= len(list1)-1:\n            list3.append(list2[j])\n        else:\n            list3.append(list2[j])\n            list3.append(list2[j])\n    return list3\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    # Your code here\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    count = dict()\n    for num in list1:\n        if num not in count:\n            count[num] = 1\n        else:\n            count[num] += 1\n    return count\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    dict_of_sublists = {}\n    \n    for sublist in list1:\n        if sublist in dict_of_sublists:\n            dict_of_sublists[sublist] += 1\n        else:\n            dict_of_sublists[sublist] = 1\n    \n    return dict_of_sublists\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    dic = {}\n    for i in range(len(list1)):\n        if tuple(list1[i]) in dic:\n            dic[tuple(list1[i])] += 1\n        else:\n            dic[tuple(list1[i])] = 1\n    return dic\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    \n    d = {}\n    \n    for i in list1:\n        if i not in d:\n            d[i] = 1\n        else:\n            d[i] += 1\n    \n    return d\n    \nprint(unique_sublists([1,2,2,3,4,4,4,4,5,5,5]))\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    import collections\n    \n    unique_sublist = collections.defaultdict(int)\n    \n    for each_list in list1:\n        unique_sublist[tuple(each_list)] += 1\n        \n    return unique_sublist\n    \n    \n    "
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    ans = {}\n    for i in range(len(list1)):\n        list1[i] = (list1[i],)\n    for i in range(len(list1)):\n        for j in range(i+1, len(list1)):\n            if list1[i] == list1[j]:\n                ans[list1[i]] = ans.get(list1[i], 0) + 1\n    return ans\n    \n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    dic = {}\n    for i in range(len(list1)):\n        if list1[i] in dic:\n            dic[list1[i]] += 1\n        else:\n            dic[list1[i]] = 1\n    return dic\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    res = {}\n    for l in list1:\n        if tuple(l) not in res:\n            res[tuple(l)] = 1\n        else:\n            res[tuple(l)] += 1\n    return res\n"
    },
    {
        "number": 779,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def unique_sublists(list1):\n    '''\n    Write a function to count the number of lists within a list. The function should return a dictionary, where every list is turned to a tuple, and the value of the tuple is the number of its occurrences.\n    '''\n    uniques_list = set()\n    counter = 0\n    for i in range(len(list1)):\n        for j in range(len(list1)):\n            if list1[i] == list1[j]:\n                counter += 1\n        uniques_list.add((list1[i], counter))\n        counter = 0\n    return {k:v for k,v in uniques_list}\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # all combinations\n    # for i in combinations(test_list, 3):\n    #     print(i)\n    #     print(i)\n    #     print(i)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in combinations(test_list, len(test_list)):\n        if sum(i) == 0:\n            print(i)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    result = set()\n    for n in test_list:\n        for i in combinations(n,2):\n            sum = 0\n            for j in i:\n                sum += j\n            result.add(sum)\n    return result\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    for i in combinations(test_list, 2):\n        print(i)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    # This function takes a list of tuples and finds all the combinations of elements in a set\n    test_list_combinations = combinations(test_list, 2)\n    return(list(test_list_combinations))\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    n=int(len(test_list))\n    for i in range(1,n+1):\n        yield from combinations(test_list,i)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations = []\n    for i in range(0, len(test_list)):\n        for j in range(i+1, len(test_list)):\n            if sum([test_list[i], test_list[j]]) == sum(test_list):\n                combinations.append((test_list[i], test_list[j]))\n    print(combinations)\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combs = set()\n    for i in range(len(test_list)):\n        combs |= {x for x in combinations(test_list[i], 2) if sum(x) == test_list[i][i]}\n    return combs\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    com_list = []\n    for i in range(0,len(test_list)):\n        com_list.append(tuple(combs(test_list,i)))\n    return com_list\n"
    },
    {
        "number": 780,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "from itertools import combinations \ndef find_combinations(test_list):\n    '''\n    Write a function to find the combinations of sums with tuples in the given tuple list. https://www.geeksforgeeks.org/python-combinations-of-sum-with-tuples-in-tuple-list/\n    '''\n    combinations = []\n    for i in range(len(test_list)):\n        for j in range(i+1, len(test_list)):\n            for k in range(j+1, len(test_list)):\n                combinations.append(test_list[i] + test_list[j] + test_list[k])\n    return combinations\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_of_divisors = 0\n    for i in range(1, int(math.sqrt(n))+1):\n        if n%i == 0:\n            count_of_divisors += 2\n    return count_of_divisors \n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    div_count = 1\n    for i in range(2, int(math.sqrt(n)) + 1) :\n        if n % i == 0 :\n            div_count += 1\n            if i == math.sqrt(n) :\n                div_count += 1\n    if div_count % 2!= 0 :\n        return False\n    return True\nprint(count_divisors(4))\nprint(count_divisors(8))\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    if n == 1:\n        return False\n    else:\n        div = int(math.sqrt(n)) + 1\n        for i in range(2, div):\n            if n % i == 0:\n                return False\n    return True\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count_divisors = 0\n    for i in range(1, n + 1) :\n        if n % i == 0 :\n            count_divisors = count_divisors + 1\n    print(\"The count of divisors is:\", count_divisors)\n    \ncount_divisors(13)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count=0\n    for i in range(1,n) :\n        if(n%i==0) :\n            count=count+1\n    if(count%2==0) :\n        return count\n    else :\n        return count+1\ndef is_prime(n) :\n    '''\n    Write a python function to check whether a given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-2-exercise-10.php\n    '''\n    import math\n    if (n <= 1) :\n        return False\n    if (n <= 3) :\n        return True\n    if (n % 2 == 0 or n % 3 == 0) :\n        return False\n    i = 5\n    while(i * i <= n) :\n        if (n % i == 0 or n % (i + 2) == 0) :\n            return False\n        i = i + 6\n    return True\ndef is_palindrome(n) :\n    '''\n    Write a python function to check whether a given number is palindrome or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-25.php\n    '''\n    s = str(n)\n    if (len(s)<2) :\n        return True\n    for i in range(int(len(s)/2)):\n        if (s[i]!= s[len(s)-1-i]) :\n            return False\n    return True\ndef fibonacci(n) :\n    '''\n    Write a python function to compute the fibonacci series for a given number. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-26.php\n    '''\n    a=0\n    b=1\n    count=0\n    while(count<n):\n        c=a+b\n        count=count+1\n        a=b\n        b=c\n    return c\ndef gcd(x,y) :\n    '''\n    Write a python function to compute the Greatest Common Divisor (GCD) of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-27.php\n    '''\n    if (x==0) :\n        return y\n    return gcd(y%x,x)\ndef lcm(x,y) :\n    '''\n    Write a python function to compute the least common multiple (LCM) of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-28.php\n    '''\n    return x*y//gcd(x,y)\ndef first_common_divisor(a,b) :\n    '''\n    Write a python function to compute the first common divisor (GCD) of two numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-29.php\n    '''\n    if (a==0) :\n        return b\n    return first_common_divisor(b%a,a)\ndef reverse(str1) :\n    '''\n    Write a python function to reverse a given string. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-30.php\n    '''\n    l=len(str1)\n    st1=''\n    for i in range(l):\n        st1=st1+str1[l-i-1]\n    return st1\ndef is_perfect(n) :\n    '''\n    Write a python function to check whether a given number is perfect or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-31.php\n    '''\n    if (n<=0) :\n        return False\n    sum=0\n    temp=n\n    while(temp>0) :\n        sum=sum+temp%10\n        temp=temp//10\n    return sum==n\ndef swap(x,y) :\n    '''\n    Write a python function to swap the values of two given numbers. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-32.php\n    '''\n    x,y=y,x\n    return x,y\ndef roman_to_int(s) :\n    '''\n    Write a python function to convert a given Roman numeral to an integer. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-33.php\n    '''\n    roman_d={\n        'I':1,\n        'V':5,\n        'X':10,\n        'L':50,\n        'C':100,\n        'D':500,\n        'M':1000\n    }\n    num=0\n    for i in range(len(s)) :\n        if (i==0 and s[i] not in roman_d) :\n            return 0\n        if (s[i-1]=='I' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='I' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='V' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='V' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='X' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='X' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='L' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='L' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='C' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='C' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='D' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='D' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n        elif (s[i-1]=='M' and s[i] in roman_d) :\n            num=num+roman_d[s[i]]-roman_d[s[i-1]]\n        elif (s[i-1]=='M' and s[i] not in roman_d) :\n            num=num+roman_d[s[i]]\n    return num\ndef is_prime_even(n) :\n    '''\n    Write a python function to check whether a given number is prime or not. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-34.php\n    '''\n    if (n==0 or n==1) :\n        return False\n    if (n%"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    return n % 2 == 0\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    print(n)\n    div = 1\n    while (n % 2 == 0):\n        div = div + 1\n        n = n / 2\n    return div\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 0\n    for i in range(1, int(math.sqrt(n)) + 1): \n        if n % i == 0: \n            count += 2\n    if n % 2 == 0: \n        count -= 1\n    return count\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    count = 1\n    for i in range(1,n+1) : \n        if (n % i == 0) : \n            count = count + 1\n    if (count % 2!= 0) : \n        print(\"True\") \n    else : \n        print(\"False\")\n    \ndef longest_word_of_string(string) : \n    '''\n    Write a python function to find the longest word in a string. \n    '''\n    string = string.lower()\n    string = string.split(\" \")\n    max_length = len(string[0])\n    for i in range(1,len(string)) : \n        if (len(string[i]) > max_length) : \n            max_length = len(string[i])\n    print(max_length)\n"
    },
    {
        "number": 781,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import math \ndef count_divisors(n) : \n    '''\n    Write a python function to check whether the count of divisors is even. https://www.w3resource.com/python-exercises/basic/python-basic-1-exercise-24.php\n    '''\n    sum = 0\n    for i in range(1, n) :\n        if (n % i == 0) :\n            sum += 1\n    if (sum%2==0) :\n        return True\n    else :\n        return False\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    N = len(arr)\n    sum_odd_length = 0\n    for i in range(1,N):\n        for j in range(i,N):\n            if (j-i)%2 == 1:\n                sum_odd_length += sum(arr[i:j+1])\n    return sum_odd_length\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    length = len(arr)\n    i,j = 0,0\n    sum = 0\n    while(j < length):\n        if(j%2 == 0):\n            sum += arr[i]\n        i += 1\n        j += 1\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    odd_sum = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    odd_sum = 0\n    for i in range(len(arr)):\n        for j in range(i, len(arr)):\n            odd_sum += arr[j]\n    return odd_sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        for j in range(i+1,len(arr)):\n            sum += arr[i:j]\n    return sum\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    size = len(arr)\n    sum = 0\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    result = []\n    for i in range(len(arr)):\n        if i%2!= 0:\n            result.append(arr[i])\n    return sum(result)\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    \n    count = 0\n    for i in range(len(arr)):\n        if arr[i] % 2!= 0:\n            count = count + arr[i]\n    print(count)\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    n = len(arr)\n    print(\"Sum of odd length subarray are\")\n    for i in range(1,n,2):\n        print(arr[i-1:i+1])\n"
    },
    {
        "number": 782,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def odd_length_sum(arr):\n    '''\n    Write a python function to find the sum of all odd length subarrays. https://www.geeksforgeeks.org/sum-of-all-odd-length-subarrays/\n    '''\n    sum = 0\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r / 255.0, g / 255.0, b / 255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    if v == 0:\n        return 0, 0, 0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # - hue: angle from red in hsv\n    # - saturation: saturation of color\n    # - value: value of color\n    # - max_value: maximum value of color\n    max_value = 255\n    h, s, v = 0, 0, 0\n    r, g, b = r/max_value, g/max_value, b/max_value\n    if r == g and g == b:\n        h = 0\n        s = 0 if r == 0 else ((max_value-r)/max_value)*100\n        v = max_value if r == max_value else max_value-r\n    elif r == g:\n        h = 60*((g-b)/max_value)\n        s = (max_value-r)/max_value*100\n        v = max_value if g == max_value else max_value-g\n    elif r == b:\n        h = 60*((b-g)/max_value)\n        s = ((max_value-b)/max_value)*100\n        v = max_value if b == max_value else max_value-b\n    elif g == b:\n        h = 120 + ((b-r)/max_value)*60\n        s = ((max_value-r)/max_value)*100\n        v = max_value if b == max_value else max_value-b\n    elif g < b:\n        h = ((b-r)/max_value)*60 + 120\n        s = ((max_value-b)/max_value)*100\n        v = max_value if g == max_value else max_value-g\n    else:\n        h = ((r-g)/max_value)*60 + 240\n        s = ((max_value-r)/max_value)*100\n        v = max_value if b == max_value else max_value-b\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == g and g == b:\n        return (0, 0, 255)\n    if not (r > g and r > b):\n        if not (g > b):\n            return (0, 255, r)\n        return (360 * (1.0 - g / b), 255, r)\n    if not (r > g and r > b):\n        if not (b > g):\n            return (360 * (1.0 - r / b), 255, g)\n        return (360 * (1.0 - b / g), 255, g)\n    if not (g > r and g > b):\n        if not (b > r):\n            return (360 * (1.0 - g / b), 0, 255)\n        return (360 * (1.0 - b / r), 0, 255)\n    if not (g > r and g > b):\n        if not (r > b):\n            return (360 * (1.0 - r / b), 0, b)\n        return (360 * (1.0 - r / g), 0, b)\n    if not (b > r and b > g):\n        if not (r > g):\n            return (360 * (1.0 - b / g), 0, 0)\n        return (360 * (1.0 - r / g), 0, 0)\n    if not (r > g and r > b):\n        if not (g > b):\n            return (360 * (1.0 - r / b), 255, 0)\n        return (360 * (1.0 - g / b), 255, 0)\n    if not (r > g and r > b):\n        if not (b > g):\n            return (360 * (1.0 - r / b), 255, 255)\n        return (360 * (1.0 - b / g), 255, 255)\n    if not (g > r and g > b):\n        if not (b > r):\n            return (360 * (1.0 - g / b), 255, 0)\n        return (360 * (1.0 - b / g), 255, 0)\n    if not (g > r and g > b):\n        if not (r > b):\n            return (360 * (1.0 - g / b), 0, 255)\n        return (360 * (1.0 - r / b), 0, 255)\n    if not (g > r and g > b):\n        if not (b > r):\n            return (360 * (1.0 - g / b), 0, 255)\n        return (360 * (1.0 - b / g), 0, 255)\n    if not (b > r and b > g):\n        if not (r > g):\n            return (360 * (1.0 - b / g), 0, 255)\n        return (360 * (1.0 - r / g), 0, 255)\n    if not (b > r and b > g):\n        if not (r > g):\n            return (360 * (1.0 - r / g), 0, 255)\n        return (360 * (1.0 - b / g), 0, 255)\n    if not (r > g and r > b):\n        return (0, 0, 0)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r==0 and g==0 and b==0:\n        return 0, 0, 0\n    \n    max_c = max(r, g, b)\n    min_c = min(r, g, b)\n    delta = max_c - min_c\n    \n    if max_c == r:\n        h = 0\n        s = ((g-b)/delta)*60\n        v = (b-min_c)*255/delta\n    \n    elif max_c == g:\n        h = ((r-b)/delta)*60\n        s = 0\n        v = ((r-g)/delta)*255\n    \n    elif max_c == b:\n        h = ((g-r)/delta)*60\n        s = ((r-g)/delta)*255\n        v = 0\n    \n    if h < 0:\n        h = h + 360\n    if s < 0:\n        s = s + 100\n    if v < 0:\n        v = v + 100\n    \n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    if r == g and g == b:\n        h = 0\n    else:\n        if r == g:\n            h = 60 * (((g - r) / (max(r, g, b) + 1e-7)) % 6)\n        elif g == b:\n            h = 60 * (((b - r) / (max(r, g, b) + 1e-7)) % 6)\n        else:\n            h = 60 * (((r - g) / (max(r, g, b) + 1e-7)) % 6)\n    if h < 0:\n        h += 360\n    s = (max(r, g, b) + 1e-7) / 255.0\n    v = (max(r, g, b) + 1e-7) / 255.0\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = float(r)/255, float(g)/255, float(b)/255\n    maximum = max(r, g, b)\n    minimum = min(r, g, b)\n    diff = maximum - minimum\n    if maximum == minimum:\n        return 0, 0, 0\n    elif maximum == r:\n        h = (60 * ((g - b)/diff) + 360) % 360\n    elif maximum == g:\n        h = (60 * ((b - r)/diff) + 120) % 360\n    elif maximum == b:\n        h = (60 * ((r - g)/diff) + 240) % 360\n    if maximum == 0:\n        s = 0\n    else:\n        s = diff/maximum\n    v = maximum\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return (h, s, v)\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255.0, g/255.0, b/255.0\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx-mn\n    if mx == mn:\n        h = 0\n    elif mx == r:\n        h = (60 * ((g-b)/df) + 360) % 360\n    elif mx == g:\n        h = (60 * ((b-r)/df) + 120) % 360\n    elif mx == b:\n        h = (60 * ((r-g)/df) + 240) % 360\n    if mx == 0:\n        s = 0\n    else:\n        s = df/mx\n    v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    r, g, b = r/255, g/255, b/255\n    mx = max(r, g, b)\n    mn = min(r, g, b)\n    df = mx - mn\n    if mx == mn:\n        h = 0\n        s = 0\n        v = mx\n    elif mx == r:\n        h = 60 * (((g - b)/df) % 6)\n        s = (df/r) + mn\n        v = mx\n    elif mx == g:\n        h = 60 * (((b - r)/df) + 2)\n        s = (df/g) + mn\n        v = mx\n    else:\n        h = 60 * (((r - g)/df) + 4)\n        s = (df/b) + mn\n        v = mx\n    return h, s, v\n"
    },
    {
        "number": 783,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def rgb_to_hsv(r, g, b):\n    '''\n    Write a function to convert rgb color to hsv color. https://www.geeksforgeeks.org/program-change-rgb-color-model-hsv-color-model/\n    '''\n    # definition of hsv color spaces\n    h = (0.0 + r) / 255.0\n    s = (0.0 + g) / 255.0\n    v = (0.0 + b) / 255.0\n    # conversion\n    h = h * 6.0\n    s = 0.0 if s == 0.0 else s * 100.0\n    s = 0.0 if s == 0.0 else (s * 100.0 / 255.0)\n    s = s * 100.0 if s > 0.0 and s <= 100.0 else 0.0\n    h = h * 360.0\n    if h >= 360.0:\n        h = h - 360.0\n    v = 100.0 if v > 0.0 and v <= 100.0 else 0.0\n    return h,s,v\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = 0\n    odd_num = 0\n    for i in range(len(list1)):\n        if list1[i]%2 == 0:\n            even_num = even_num * list1[i]\n        else:\n            odd_num = odd_num * list1[i]\n    print(\"Product of first even number and first odd number is:\",even_num*odd_num)\n    \n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = []\n    for num in list1:\n        if num%2 == 0:\n            result.append(num*list1.count(num))\n        elif num%2!= 0:\n            result.append(num*list1.count(num))\n    return result\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = []\n    odd = []\n    for i in range(len(list1)):\n        if i % 2 == 0:\n            even.append(list1[i])\n        else:\n            odd.append(list1[i])\n    print(\"The product of even number of the list is: \",end=\"\")\n    for i in range(len(even)):\n        print(even[i],end=\" \")\n    print(\"\\nThe product of odd number of the list is: \",end=\"\")\n    for i in range(len(odd)):\n        print(odd[i],end=\" \")\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even, odd = 0, 0\n    for i in list1:\n        if i%2 == 0:\n            even += i\n        else:\n            odd += i\n    return even, odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even_num = []\n    odd_num = []\n    for i in list1:\n        if i%2==0:\n            even_num.append(i)\n        else:\n            odd_num.append(i)\n    return even_num[0]*odd_num[0]\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    if len(list1) == 0:\n        return None\n    elif len(list1) == 1:\n        return list1[0]\n    else:\n        even = list1[::2]\n        odd = list1[1::2]\n        return even[0]*odd[0]\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    product = 1\n    for i in range(len(list1)):\n        if i%2 ==0:\n            product = product * list1[i]\n    print(product)\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    even = 0\n    odd = 0\n    for i in list1:\n        if i%2==0:\n            even += i\n        else:\n            odd += i\n    return even,odd\n"
    },
    {
        "number": 784,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def mul_even_odd(list1):\n    '''\n    Write a function to find the product of first even and odd number of a given list.\n    '''\n    result = 1\n    for num in list1:\n        if num % 2 == 0:\n            result *= num\n    for num in list1:\n        if num % 2!= 0:\n            result *= num\n    return result\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return int(test_str)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    test_str = test_str.split(\",\")\n    test_str = tuple(int(i) for i in test_str)\n    return test_str\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    #return test_str.split(',')\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    tuple_list = []\n    for i in test_str:\n        if not i.isdigit():\n            tuple_list.append(i)\n    tuple_list = tuple(tuple_list)\n    return tuple(map(int, tuple_list))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if len(test_str) == 0:\n        return ()\n    if len(test_str) == 1 and (test_str[0] == ')' or test_str[0] == ']' or test_str[0] == '}'):\n        return ()\n    test_list = []\n    for i in range(len(test_str)):\n        if test_str[i] in ['(', '[', '{']:\n            test_list.append(test_str[i])\n            continue\n        if test_str[i] == ')':\n            if len(test_list) == 0:\n                return ()\n            else:\n                test_list.pop()\n                continue\n        if test_str[i] == ']':\n            if len(test_list) == 0:\n                return ()\n            else:\n                test_list.pop()\n                continue\n        if test_str[i] == '}':\n            if len(test_list) == 0:\n                return ()\n            else:\n                test_list.pop()\n                continue\n        test_list.append(test_str[i])\n    if len(test_list)!= 0:\n        return ()\n    return tuple(test_list)\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    for x in test_str:\n        try:\n            int(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(int(x) for x in test_str)\n    \ndef tuple_int_str(test_int):\n    '''\n    Write a function to convert tuple integer to string tuple.\n    '''\n    for x in test_int:\n        try:\n            str(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(str(x) for x in test_int)\n    \ndef tuple_float_str(test_float):\n    '''\n    Write a function to convert tuple float to string tuple.\n    '''\n    for x in test_float:\n        try:\n            str(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(str(x) for x in test_float)\n    \ndef tuple_str_float(test_str):\n    '''\n    Write a function to convert tuple string to float tuple.\n    '''\n    for x in test_str:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(float(x) for x in test_str)\n    \ndef tuple_float_int(test_float):\n    '''\n    Write a function to convert tuple float to integer tuple.\n    '''\n    for x in test_float:\n        try:\n            int(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(int(x) for x in test_float)\n    \ndef tuple_int_float(test_int):\n    '''\n    Write a function to convert tuple integer to float tuple.\n    '''\n    for x in test_int:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(float(x) for x in test_int)\n    \ndef tuple_float_float(test_float):\n    '''\n    Write a function to convert tuple float to float tuple.\n    '''\n    for x in test_float:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(float(x) for x in test_float)\n    \ndef tuple_int_int(test_int):\n    '''\n    Write a function to convert tuple integer to integer tuple.\n    '''\n    for x in test_int:\n        try:\n            int(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(int(x) for x in test_int)\n    \ndef tuple_float_float(test_float):\n    '''\n    Write a function to convert tuple float to float tuple.\n    '''\n    for x in test_float:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(float(x) for x in test_float)\n    \ndef tuple_int_int(test_int):\n    '''\n    Write a function to convert tuple integer to integer tuple.\n    '''\n    for x in test_int:\n        try:\n            int(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(int(x) for x in test_int)\n    \ndef tuple_int_float(test_int):\n    '''\n    Write a function to convert tuple integer to float tuple.\n    '''\n    for x in test_int:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(float(x) for x in test_int)\n    \ndef tuple_float_float(test_float):\n    '''\n    Write a function to convert tuple float to float tuple.\n    '''\n    for x in test_float:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(float(x) for x in test_float)\n    \ndef tuple_float_float(test_float):\n    '''\n    Write a function to convert tuple float to float tuple.\n    '''\n    for x in test_float:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return tuple(float(x) for x in test_float)\n    \ndef list_str_int(test_str):\n    '''\n    Write a function to convert list string to integer list.\n    '''\n    for x in test_str:\n        try:\n            int(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return list(int(x) for x in test_str)\n    \ndef list_int_str(test_int):\n    '''\n    Write a function to convert list integer to string list.\n    '''\n    for x in test_int:\n        try:\n            str(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return list(str(x) for x in test_int)\n    \ndef list_float_str(test_float):\n    '''\n    Write a function to convert list float to string list.\n    '''\n    for x in test_float:\n        try:\n            str(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return list(str(x) for x in test_float)\n    \ndef list_str_float(test_str):\n    '''\n    Write a function to convert list string to float list.\n    '''\n    for x in test_str:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return list(float(x) for x in test_str)\n    \ndef list_float_int(test_float):\n    '''\n    Write a function to convert list float to integer list.\n    '''\n    for x in test_float:\n        try:\n            int(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return list(int(x) for x in test_float)\n    \ndef list_int_float(test_int):\n    '''\n    Write a function to convert list integer to float list.\n    '''\n    for x in test_int:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return list(float(x) for x in test_int)\n    \ndef list_float_float(test_float):\n    '''\n    Write a function to convert list float to float list.\n    '''\n    for x in test_float:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return list(float(x) for x in test_float)\n    \ndef list_int_int(test_int):\n    '''\n    Write a function to convert list integer to integer list.\n    '''\n    for x in test_int:\n        try:\n            int(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return list(int(x) for x in test_int)\n    \ndef list_float_float(test_float):\n    '''\n    Write a function to convert list float to float list.\n    '''\n    for x in test_float:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return list(float(x) for x in test_float)\n    \ndef list_int_int(test_int):\n    '''\n    Write a function to convert list integer to integer list.\n    '''\n    for x in test_int:\n        try:\n            int(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return list(int(x) for x in test_int)\n    \ndef list_float_float(test_float):\n    '''\n    Write a function to convert list float to float list.\n    '''\n    for x in test_float:\n        try:\n            float(x)\n        except ValueError:\n            raise ValueError('Value Error')\n    return list(float(x) for x in test_float)\n    \ndef list_int_int(tes"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    return tuple(map(int, test_str.split(',')))\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    # Using eval and tuple builtin function.\n    # it will give me integer value for int and float value for float.\n    # This function should be generalized to any number of values.\n"
    },
    {
        "number": 785,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def tuple_str_int(test_str):\n    '''\n    Write a function to convert tuple string to integer tuple.\n    '''\n    if type(test_str) == str and test_str.isdigit():\n        return int(test_str)\n    elif type(test_str) == str:\n        return tuple(int(item) for item in test_str.split(','))\n    else:\n        raise TypeError\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if len(a) == 0:\n        return 0\n    l = 0\n    h = len(a) - 1\n    while l <= h:\n        mid = (l + h)//2\n        if a[mid] == x:\n            return mid\n        if a[mid] < x:\n            l = mid + 1\n        else:\n            h = mid - 1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i!= len(a) and a[i] == x:\n        return i\n    else:\n        return i + 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect(a, x)\n    return l if l < len(a) and a[l] == x else l - 1\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = bisect.bisect_left(a, x)\n    if l == len(a):\n        return l\n    if a[l] == x:\n        return l\n    if a[l] < x:\n        return l+1\n    i = l\n    while i < len(a) and a[i] == x:\n        i += 1\n    return i\na = [0,1,2,2,3,4,5,6,7,8,9]\na = sorted(a)\nx = 2\nprint(right_insertion(a,x))\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    l = len(a)\n    left, right = 0, l - 1\n    while left <= right:\n        mid = (left + right) // 2\n        if a[mid] < x:\n            left = mid + 1\n        else:\n            right = mid - 1\n    return left\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    i = bisect.bisect_right(a, x)\n    if i == 0:\n        return 0\n    if i == len(a):\n        return len(a)\n    return i\na = list(map(int, input().split()))\nx = int(input())\nprint(right_insertion(a, x))"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # binary search\n    lo = 0\n    hi = len(a)-1\n    while lo <= hi:\n        mid = lo + (hi-lo)//2\n        if a[mid] < x:\n            lo = mid + 1\n        else:\n            hi = mid - 1\n    return lo\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    # bisect_right\n    l=0\n    r=len(a)-1\n    while l<=r:\n        m=(l+r)//2\n        if x<a[m]:\n            r=m-1\n        else:\n            l=m+1\n    return l\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    insert_index = bisect.bisect_left(a, x)\n    return insert_index\n"
    },
    {
        "number": 786,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import bisect\ndef right_insertion(a, x):\n    '''\n    Write a function to locate the right insertion point for a specified value in sorted order.\n    '''\n    if x>a[-1]:\n        return len(a)\n    else:\n        if x<a[0]:\n            return 0\n        else:\n            idx = bisect.bisect_left(a, x)\n            if idx==0:\n                if x<a[0]:\n                    a.insert(0, x)\n                    return 0\n                else:\n                    return 1\n            else:\n                if x<a[idx-1]:\n                    a.insert(idx, x)\n                    return idx\n                else:\n                    return idx+1\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \n    \ndef text_match_four(text):\n    '''\n    Write a function that matches a string that has an a followed by four 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_five(text):\n    '''\n    Write a function that matches a string that has an a followed by five 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_six(text):\n    '''\n    Write a function that matches a string that has an a followed by six 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_seven(text):\n    '''\n    Write a function that matches a string that has an a followed by seven 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_eight(text):\n    '''\n    Write a function that matches a string that has an a followed by eight 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_nine(text):\n    '''\n    Write a function that matches a string that has an a followed by nine 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_ten(text):\n    '''\n    Write a function that matches a string that has an a followed by ten 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_eleven(text):\n    '''\n    Write a function that matches a string that has an a followed by eleven 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_twelve(text):\n    '''\n    Write a function that matches a string that has an a followed by twelve 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_thirteen(text):\n    '''\n    Write a function that matches a string that has an a followed by thirteen 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_fourteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fourteen 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_fifteen(text):\n    '''\n    Write a function that matches a string that has an a followed by fifteen 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_sixteen(text):\n    '''\n    Write a function that matches a string that has an a followed by sixteen 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_seventeen(text):\n    '''\n    Write a function that matches a string that has an a followed by seventeen 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_eighteen(text):\n    '''\n    Write a function that matches a string that has an a followed by eighteen 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_nineteen(text):\n    '''\n    Write a function that matches a string that has an a followed by nineteen 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text)\n    if result:\n        return True\n    else:\n        return False\n    \ndef text_match_twenty(text):\n    '''\n    Write a function that matches a string that has an a followed by twenty 'b'.\n    '''\n    #matching_pattern = r'ab+b'\n    #result = re.match(matching_pattern, text)\n    matching_pattern = r'ab+b'\n    result = re.search(matching_pattern, text"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.search('ab*b', text):\n        print(True)\n    else:\n        print(False)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    a=re.search(r'\\bab\\b',text)\n    if a is not None:\n        return True\n    else:\n        return False\n    # Write your function here\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r'ab{3}b')\n    print(pattern.findall(text))\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = re.compile(r\"ab+\")\n    result = pattern.findall(text)\n    if result:\n        return result[0]\n    else:\n        return None\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # YOUR CODE HERE\n    \n    pattern = r'ab[abab]b'\n    return re.search(pattern, text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    return re.findall(r'a+b+',text)\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    pattern = r'ab{3}'\n    if re.search(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    if re.match(r\"^a*bbbbb$\", text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 787,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_match_three(text):\n    '''\n    Write a function that matches a string that has an a followed by three 'b'.\n    '''\n    # First, remove the excess\n    text_to_search = text.replace('abb','')\n    # print(text_to_search)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    # solution to above\n    new_tuple = tuple(test_list)\n    new_tuple += (test_str, )\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str) + tuple(test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_str, test_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    new_tuple = ()\n    for item in test_list:\n        new_tuple += (item,)\n    for item in test_str:\n        new_tuple += (item,)\n    return new_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    pass\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    test_tuple = (test_str, ) + test_list\n    return test_tuple\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    if test_list == [] or type(test_list) == type(None):\n        test_list = []\n        test_list.append(test_str)\n        tuple_list = tuple(test_list)\n        return tuple_list\n    elif type(test_list) == type('') or type(test_list) == type(1):\n        test_list.append(test_str)\n        tuple_list = tuple(test_list)\n        return tuple_list\n    else:\n        for i in range(len(test_list)):\n            if type(test_list[i]) == type(test_list) == type(1):\n                test_list[i] = test_list[i] + test_str\n                tuple_list = tuple(test_list)\n                return tuple_list\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + list(test_str))\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    tuple_from_list = tuple(test_list)\n    # print(tuple_from_list)\n    tuple_from_string = tuple(test_str)\n    # print(tuple_from_string)\n    return (tuple_from_string, tuple_from_list)\n"
    },
    {
        "number": 788,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def new_tuple(test_list, test_str):\n    '''\n    Write a function to create a new tuple from the given string and list.\n    '''\n    return tuple(test_list + test_str)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    n = nums\n    for i in range(len(n)):\n        if i % 2 == 0 and n[i] % 2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(nums[i] % 2 == 0 for i in range(len(nums)) if i % 2 == 0)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(is_even(nums[i]) for i in range(0, len(nums), 2))\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    nums = list(map(int, nums))\n    if nums == None:\n        return None\n    if len(nums) < 1:\n        return False\n    return all(i%2 == 0 for i in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    try:\n        evens = []\n        for x in range(len(nums)):\n            if x % 2 == 0:\n                evens.append(nums[x])\n        print(\"There are\", len(evens), \"even numbers.\")\n        return evens\n    except IndexError:\n        print(\"Index error\")\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    if nums == []:\n        return False\n    even_list = []\n    for i in range(0,len(nums)):\n        if nums[i]%2 == 0:\n            even_list.append(nums[i])\n    if len(even_list) == len(nums):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if i%2 == 0 and nums[i]%2!= 0:\n            return False\n    return True\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0,len(nums)):\n        if nums[i]%2 == 0:\n            return True\n    return False\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    return all(i % 2 == 0 for i in nums)\n"
    },
    {
        "number": 790,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def even_position(nums):\n    '''\n    Write a python function to check whether every even index contains even numbers of a given list.\n    '''\n    for i in range(0, len(nums), 2):\n        if(nums[i] % 2 == 0):\n            return False\n    return True\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    def remove_nested(test_tup):\n        '''\n        Write a function to remove tuples from the given tuple.\n        '''\n        if isinstance(test_tup, tuple):\n            for i in test_tup:\n                if isinstance(i, tuple):\n                    remove_nested(i)\n                else:\n                    return\n        else:\n            return\n    remove_nested((1, (2, (3, 4))))\n    "
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    l=list(test_tup)\n    l.pop(0)\n    l.pop(0)\n    l.pop(0)\n    return tuple(l)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    #remove tuples\n    temp = list(test_tup)\n    for i in range(len(temp)):\n        for j in range(i+1,len(temp)):\n            if temp[i] == temp[j]:\n                temp.pop(i)\n                temp.pop(j-1)\n    return tuple(temp)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if type(test_tup)!= tuple:\n        return test_tup\n    \n    return test_tup[0]\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if test_tup is None:\n        return None\n    \n    if len(test_tup) == 1:\n        return test_tup[0]\n    \n    return test_tup[0], remove_nested(test_tup[1:])\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_tup = list(test_tup)\n    if test_tup[0] == tuple:\n        test_tup.remove(test_tup[0])\n    return tuple(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    if test_tup:\n        for x in range(len(test_tup)):\n            if type(test_tup[x]) == tuple:\n                test_tup.remove(test_tup[x])\n    else:\n        return False\n    return test_tup\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    test_list = []\n    for i in test_tup:\n        if i not in test_list:\n            test_list.append(i)\n    return tuple(test_list)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    return list(test_tup)\n"
    },
    {
        "number": 791,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def remove_nested(test_tup):\n    '''\n    Write a function to remove tuples from the given tuple.\n    '''\n    for x in range(0,len(test_tup)):\n        for y in range(x+1,len(test_tup)):\n            if test_tup[x]==test_tup[y]:\n                test_tup.pop(y)\n                return test_tup\n    return test_tup\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count = count + 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    number_of_lists = 0\n    while input_list!= []:\n        if type(input_list[0]) == list:\n            number_of_lists += 1\n        input_list.pop(0)\n    return number_of_lists\n    \nprint(count_list([1,2,[3,4],5,[[6,7],8],9,10,11,12,13,14,15,[16,17,18],19,20,[21,22,23,24]]))"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) is list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if type(i) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0 \n    for x in input_list:\n        if type(x) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for item in input_list:\n        if type(item) == list:\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in input_list:\n        if isinstance(i, list):\n            count += 1\n    return count\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    for i in range(len(input_list)):\n        if isinstance(input_list[i], list):\n            return (len(input_list))\n    return 0\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    count = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            count += 1\n    return count\n    \nif __name__ == '__main__': \n    input_list = [[[0, 1], 2],'string', 2, [[], -1], 1.5]\n    print(count_list(input_list))\n"
    },
    {
        "number": 792,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_list(input_list): \n    '''\n    Write a python function to count the number of lists in a given number of lists.\n    '''\n    # Your Code Here\n    c = 0\n    for i in range(len(input_list)):\n        if type(input_list[i]) == list:\n            c += 1\n    return c\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    \n    arr = np.array(arr)\n    l = len(arr)\n    if l==0:\n        return None\n    if l==1:\n        if arr[0]==x:\n            return 0\n        else:\n            return None\n    \n    i=0\n    j=l-1\n    while i<j:\n        mid = (i+j)//2\n        if arr[mid]==x:\n            j = mid\n        elif arr[mid]<x:\n            i = mid\n        else:\n            j = mid-1\n    \n    if arr[j]==x:\n        return j\n    else:\n        return None\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr)==0:\n        return -1\n    if arr[len(arr)-1]==x:\n        return len(arr)-1\n    return(last(arr[:-1],x))\n    \nprint(last([1,2,3,4,5],2))\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    length = len(arr)\n    left, right = 0, length-1\n    while left <= right:\n        mid = (left+right)//2\n        if arr[mid] > x:\n            right = mid-1\n        elif arr[mid] < x:\n            left = mid+1\n        else:\n            if mid == length-1 or arr[mid+1]!= x:\n                return mid\n            else:\n                right = mid-1\n    return -1\n    \n    \n    \nif __name__ == '__main__':\n    arr = [10, 12, 13, 16, 18, 19, 21, 23, 25, 26, 27, 29, 30, 32, 33, 34, 35, 36, 37]\n    x = 29\n    print('Last position of x is {}.'.format(last(arr,x))"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    last_pos = -1\n    for i in range(len(arr)):\n        if x == arr[i]:\n            last_pos = i\n    return last_pos\n    \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    if len(arr) == 0:\n        return -1\n    else:\n        index = 0\n        while index < len(arr):\n            if arr[index]!= x:\n                break\n            else:\n                index = index + 1\n        return index-1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    i=0\n    while i<len(arr):\n        if arr[i]==x:\n            return i\n        i=i+1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    for i in range(len(arr)-1):\n        if x < arr[i]:\n            return i\n    return len(arr)-1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    print(arr.index(x))\n    \n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    l = 0\n    r = len(arr)-1\n    while l <= r:\n        mid = l + (r-l)//2\n        if arr[mid] == x:\n            if mid == r:\n                return r\n            else:\n                return mid\n        elif x < arr[mid]:\n            r = mid - 1\n        else:\n            l = mid + 1\n    return -1\n"
    },
    {
        "number": 793,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def last(arr,x):\n    '''\n    Write a python function to find the last position of an element in a sorted array.\n    '''\n    lo=0\n    hi=len(arr)-1\n    while lo<hi:\n        mid=(lo+hi)//2\n        if arr[mid]==x:\n            if mid==lo or arr[mid-1]!=x:\n                return mid\n            else:\n                hi=mid-1\n        elif arr[mid]<x:\n            lo=mid+1\n        else:\n            hi=mid-1\n    return -1"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = 'a.*b'\n    #pattern = '^a.*b$'\n    #pattern = 'a.*?b'\n    result = re.match(pattern, text)\n    if result:\n        print('Match!')\n    else:\n        print('No match!')\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.search(r'a.*b$', text)\n    return result.group()\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r\"ab*\"\n    if re.match(pattern, text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = r'a.*b'\n    result = re.search(pattern, text)\n    return result!= None\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    def starts_end(text):\n        s = re.search(r'(a)+[^b]+b', text)\n        if s:\n            return s.group()\n        return None\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern = re.compile(r\"(^a[^a]*)b\")\n    result = re.findall(pattern, text)\n    print(result)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    # match = re.search(r\"a.+b\", text) # change this to.* for non-greedy\n    # match = re.search(r\"a.+?b\", text) # change this to.* for non-greedy\n    match = re.search(r\"(.+)b\", text)\n    return match.group(1)\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    x = re.findall(r'a(.*?)([a-z])b',text)\n    return x\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    pattern=r'^a.*b$'\n    if re.search(pattern,text):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 794,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef text_starta_endb(text):\n    '''\n    Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.\n    '''\n    result = re.match(r'a*b', text)\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total_sum = 0\n    for key in dict:\n        total_sum += dict[key]\n    return total_sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for i in dict.values():\n        total += i\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for i in dict:\n        sum += dict[i]\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    total = 0\n    for key in dict:\n        total += dict[key]\n    return total\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    \n    count = 0\n    for key in dict:\n        count += dict[key]\n    \n    return count\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n    for value in dict.values():\n        sum += value\n    return sum\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    result = 0\n    for key in dict.keys():\n        result += dict[key]\n    return result\n"
    },
    {
        "number": 796,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def return_sum(dict):\n    '''\n    Write function to find the sum of all items in the given dictionary.\n    '''\n    sum = 0\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    if n == 1:\n        return 0\n    l = 1\n    r = n\n    sum = 0\n    while l <= r:\n        if l % 2 == 1:\n            sum += l\n        l += 1\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([x for x in range(l, r+1) if x % 2 == 1])\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    print(\"Input the lower and upper limit of the range\")\n    l,r=map(int,input().split())\n    n=l\n    count=0\n    while n<=r:\n        if n%2==1:\n            count=count+n\n        n=n+1\n    return count\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum=0\n    for i in range(1,n):\n        if i%2!=0:\n            sum+=i\n    return sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    for i in range(n+1):\n        if i%2 == 1:\n            sum += i\n    return sum\nprint(sum_odd(5)) # Should be 15\nprint(sum_odd(2)) # Should be 3\nprint(sum_odd(10000)) # Should be 250"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    sum = 0\n    if n<=0:\n        print(\"The natural numbers in the range\",n,\"to\",n+1,\"are:\",end=\" \")\n    elif n==1:\n        print(\"The natural numbers in the range\",n,\"to\",n,\"are:\",end=\" \")\n    else:\n        for i in range(1,n+1):\n            if i%2!=0:\n                sum = sum + i\n        print(sum,end=\" \")\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum([x for x in range(n+1) if x%2!= 0])\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    odd_sum = 0\n    for i in range(n+1):\n        if i%2!= 0:\n            odd_sum += i\n    return odd_sum\n"
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    \n    if n < 0:\n        print(\"Error: n should be positive\")\n        return\n    \n    if (n == 0 or n == 1):\n        return n\n    else:\n        return n + sum_odd(n - 2)\n    \n    # Given below is a working example\n    '''\n    def sum_odd(n):\n        if n <= 1:\n            return n\n        else:\n            return sum_odd(n - 2) + n\n    '''\n    \n    # This is the general idea of the question\n    '''\n    we can solve the problem by keeping track of the sum, either by returning the sum at the end or by returning the sum at that node.\n    we can then recursively call the function to get the sum for the children nodes.\n    '''\n    \n    def sum_odd(l, r):\n        if l > r:\n            return 0\n        \n        return l + sum_odd(l + 2, r)\n        \n    # This is the approach using a global variable\n    def sum_odd(l, r):\n        if l > r:\n            return 0\n        global total\n        total = 0\n        \n        # This is the recursive function for the sum_odd function\n        # we can keep track of the total using the global variable\n        def recursive_sum(l, r):\n            if l > r:\n                return 0\n            \n            total += l + recursive_sum(l + 2, r)\n            \n            return total\n        \n        return recursive_sum(l, r)\n        \n    # This is the approach using a local variable\n    def sum_odd(l, r):\n        if l > r:\n            return 0\n        \n        total = 0\n        \n        def recursive_sum(l, r):\n            if l > r:\n                return 0\n            \n            total += l + recursive_sum(l + 2, r)\n            \n            return total\n        \n        return recursive_sum(l, r)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        "
    },
    {
        "number": 797,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def sum_odd(n): \n    '''\n    Write a python function to find the sum of all odd natural numbers within the range l and r.\n    '''\n    return sum(i for i in range(l, r + 1) if i % 2!= 0) \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in range(0,len(arr)):\n        sum += arr[i]\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0;\n    for i in range(len(arr)):\n        sum += arr[i];\n    return sum;\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for x in arr:\n        total = total + x\n    return total\n    \ndef sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    if len(arr) == 0:\n        return 0\n    return _sum(arr)\n    \ndef sum(arr):\n    '''\n    Write a python function to find the sum of an array.\n    '''\n    total = 0\n    for x in arr:\n        total = total + x\n    return total\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    return sum(arr)\n    \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    sum = 0\n    for i in arr:\n        sum += i\n    return sum\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    \n    # return the sum\n    return sum(arr)\n    \n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    n = len(arr)\n    if n==0:\n        return 0\n    arr.sort()\n    res = 0\n    i = 1\n    while i < n:\n        res += arr[i]\n        i += 1\n    return res\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    # code here\n    return sum(arr)\n"
    },
    {
        "number": 798,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def _sum(arr):  \n    '''\n    Write a python function to find the sum of an array.\n    '''\n    arr = [1,4,6,7,8]\n    sum = 0\n    for i in arr:\n        sum = sum + i\n    print(sum)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    tmp=n\n    n=n<<d\n    n=n|(tmp>>(32-d))\n    return n\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    # bit_l = bit_l - d\n    # for i in range(0,32):\n    #     if (bit_l >> i) & 1:\n    #         bit_l = bit_l | 2**i \n    #     else:\n    #         bit_l = bit_l & ~(2**i)\n    # return bit_l\n    bit_l = n & ((2**d)-1)\n    bit_l |= n >> d\n    return bit_l\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> 32 - d)) & 0xFFFFFFFF\n    \ndef main():\n    number = int(sys.argv[1])\n    d = int(sys.argv[2])\n    n = (number << d) | (number >> 32 - d)\n    print(bin(n))\n    print(n)\n    print(left_rotate(n,d))\n    \nmain()"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d)|(n >> (32-d)))\ndef right_rotate(n,d):   \n    '''\n    Write a function to that rotate right bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n >> d)|(n << (32-d)))\ndef modular_multiplicative_inverse(a, b): \n    '''\n    Write a function to find the modular multiplicative inverse of a with respect to b.\n    '''\n    a_bin = bin(a)[2:]\n    b_bin = bin(b)[2:]\n    a_bin = '0'*(32-len(a_bin))+a_bin\n    b_bin = '0'*(32-len(b_bin))+b_bin\n    n = len(a_bin)\n    m = len(b_bin)\n    x = 0\n    x1 = 1\n    for i in range(0, n):\n        x = (x+int(a_bin[-1-i])*x1)%2\n        x1 = x1*2\n    x2 = 1\n    for j in range(0, m):\n        x = (x+int(b_bin[-1-j])*x2)%2\n        x2 = x2*2\n    if x==1:\n        return x\n    else:\n        return 0\ndef find_factors(n):\n    '''\n    Write a function to find all factors of a given number n.\n    '''\n    factors = []\n    for i in range(1,n+1):\n        if n%i == 0:\n            factors.append(i)\n    return factors\ndef is_prime(n):\n    '''\n    Write a function to check if a given number is prime.\n    '''\n    if n <= 1:\n        return False\n    for i in range(2,n):\n        if n % i == 0:\n            return False\n    return True\ndef find_max(arr):\n    '''\n    Write a function to find the maximum of a list of numbers.\n    '''\n    max_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] > max_num:\n            max_num = arr[i]\n    return max_num\ndef find_min(arr):\n    '''\n    Write a function to find the minimum of a list of numbers.\n    '''\n    min_num = arr[0]\n    for i in range(1, len(arr)):\n        if arr[i] < min_num:\n            min_num = arr[i]\n    return min_num\ndef is_power_of_two(n):\n    '''\n    Write a function to check if a given number is a power of 2.\n    '''\n    if n == 0:\n        return False\n    if n == 1:\n        return True\n    else:\n        return (n & n-1)==0\ndef get_number_to_letter(arr):\n    '''\n    Write a function to convert a list of numbers into a list of letters.\n    '''\n    arr = list(map(str,arr))\n    arr = map(lambda x: chr(int(x)), arr)\n    return arr\ndef find_index(arr, num):\n    '''\n    Write a function to find the index of the given number in a list.\n    '''\n    for i in range(0,len(arr)):\n        if num == arr[i]:\n            return i\n    return -1\ndef find_index_or_not(arr, num):\n    '''\n    Write a function to find the index of the given number in a list. If the number is not found in the list, return -1.\n    '''\n    if num in arr:\n        return arr.index(num)\n    else:\n        return -1\ndef is_palindrome(str):\n    '''\n    Write a function that checks if the given string is a palindrome or not.\n    '''\n    return str == str[::-1]\ndef count_occurrences(arr, num):\n    '''\n    Write a function to find the number of occurrences of a given number in a given list.\n    '''\n    return arr.count(num)\ndef reverse_array(arr):\n    '''\n    Write a function that reverses a given array.\n    '''\n    return arr[::-1]\ndef find_index_or_not_with_inversion(arr, num):\n    '''\n    Write a function to find the index of the given number in a given list if the given number is present, else return -1.\n    '''\n    if num in arr:\n        arr_index = arr.index(num)\n        sorted_arr = sorted(arr)\n        if arr_index == len(arr)-1:\n            if arr[arr_index] == sorted_arr[0]:\n                return arr_index\n            return -1\n        if arr[arr_index] == sorted_arr[arr_index+1]:\n            return arr_index\n        return -1\n    else:\n        return -1\ndef find_index_or_not_with_count(arr, num):\n    '''\n    Write a function to find the index of the given number in a given list if the given number is present, else return -1.\n    '''\n    if num in arr:\n        return arr.index(num)\n    else:\n        return -1\ndef find_index_or_not_with_count_or_not(arr, num):\n    '''\n    Write a function to find the index of the given number in a given list if the given number is present, else return -1.\n    '''\n    if num in arr:\n        return arr.index(num)\n    else:\n        return -1\ndef find_index_or_not_with_count_or_not(arr, num):\n    '''\n    Write a function to find the index of the given number in a given list if the given number is present, else return -1.\n    '''\n    if num in arr:\n        return arr.index(num)\n    else:\n        return -1\ndef find_index_or_not_with_count_or_not(arr, num):\n    '''\n    Write a function to find the index of the given number in a given list if the given number is present, else return -1.\n    '''\n    if num in arr:\n        return arr.index(num)\n    else:\n        return -1\ndef find_index_or_not_with_count_or_not(arr, num):\n    '''\n    Write a function to find the index of the given number in a given list if the given number is present, else return -1.\n    '''\n    if num in arr:\n        return arr.index(num)\n    else:\n        return -1\ndef find_index_or_not_with_count_or_not(arr, num):\n    '''\n    Write a function to find the index of the given number in a given list if the given number is present, else return -1.\n    '''\n    if num in arr:\n        return arr.index(num)\n    else:\n        return -1\ndef find_index_or_not_with_count_or_not(arr, num):\n    '''\n    Write a function to find the index of the given number in a given list if the given number is present, else return -1.\n    '''\n    if num in arr:\n        return arr.index(num)\n    else:\n        return -1\ndef find_index_or_not_with_count_or_not(arr, num):\n    '''\n    Write a function to find the index of the given number in a given list if the given number is present, else return -1.\n    '''\n    if num in arr:\n        return arr.index(num)\n    else:\n        return -1\ndef find_index_or_not_with_count_or_not(arr, num):\n    '''\n    Write a function to find the index of the given number in a given list if the given number is present, else return -1.\n    '''\n    if num in arr:\n        return arr.index(num)\n    else:\n        return -1\ndef find_index_or_not_with_count_or_not"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | n >> (32 - d)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return ((n << d) | (n >> (32 - d))) & (2 ** 32 - 1)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | n >> (32 - d)\n    \ndef right_rotate(n,d):\n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n >> d | n << (32 - d)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print(bin(n),bin(d))\n    a,b=n>>d,n&((1<<d)-1)\n    a,b=(a>>1,b>>1)\n    a,b=(a<<1,b<<1)\n    return (a|b)<<(d-1)\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    print(n)\n    r = n << d\n    return r\n"
    },
    {
        "number": 799,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def left_rotate(n,d):   \n    '''\n    Write a function to that rotate left bits by d bits a given number. We assume that the number is 32 bit.\n    '''\n    return n << d | (n >> (32-d))\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(\" \", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    # text = re.sub(r'\\s+', \"\", text)\n    return text.replace(' ','')\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return re.sub(r\"\\s+\", \"\", text)\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split(\" \"))\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \",\"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.strip()\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    text = re.sub(' +','', text)\n    return text\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return text.replace(\" \", \"\")\n"
    },
    {
        "number": 800,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "import re\ndef remove_all_spaces(text):\n    '''\n    Write a function to remove all whitespaces from a string.\n    '''\n    return \"\".join(text.split(\" \"))\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    for i in range(x, y):\n        for j in range(i+1,z):\n            if i == j:\n                count = count + 1\n                \n    print(\"Count of Equal numbers between {} and {} are {}\".format(x,y,count))\n    \n    \ntest_three_equal(3,2,8)\ntest_three_equal(1,2,5)"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    if (x == y) and (x == z):\n        print(f\"{x} is equal to {y} and {z}\")\n    elif (x == y) or (x == z):\n        print(f\"{x} is equal to {y} or {z}\")\n    else:\n        print(f\"{x}, {y}, {z} are not equal\")\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    x = y = z = 0\n    if x == y == z:\n        print(\"Yes\")\n    else:\n        print(\"No\")\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # your code here\n    return 1\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    # your code here\n    x, y, z = x, y, z\n    if x == y and x == z:\n        return 3\n    if x == y and x!= z:\n        return 2\n    if x!= y and x == z:\n        return 2\n    if x!= y and x!= z:\n        return 1\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    s = set()\n    for i in range(3):\n        s.add(x[i])\n    for i in range(3):\n        s.add(y[i])\n    for i in range(3):\n        s.add(z[i])\n    count = 0\n    for i in s:\n        if x.count(i) == y.count(i) == z.count(i):\n            count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    count = 0\n    if x == y == z:\n        count += 1\n    return count\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    counter = 0\n    for i in range(x,y+1):\n        if(i == z):\n            counter += 1\n    print(\"The number of equal numbers from the given range is: \",counter)\n"
    },
    {
        "number": 801,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def test_three_equal(x,y,z):\n    '''\n    Write a python function to count the number of equal numbers from three given integers.\n    '''\n    return x == y == z\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    for i in range(len(arr)):\n        if i == 0 or arr[i] > arr[i-1]:\n            continue\n        else:\n            return i\n    return len(arr)\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    total = 0\n    for i in range(1,len(arr)):\n        if arr[i] < arr[i-1]:\n            total += 1\n    return total\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    # count = 0\n    # count_even = 0\n    # count_odd = 0\n    # for i in range(len(arr)):\n    #     if i == 0:\n    #         count += 1\n    #         continue\n    #     if arr[i] >= arr[i-1]:\n    #         count += 1\n    #         continue\n    #     else:\n    #         count_odd += 1\n    #         if count_odd % 2!= 0:\n    #             count_even += 1\n    #         count += 1\n    # print(count, count_even)\n    # return\n    count = 0\n    count_even = 0\n    count_odd = 0\n    for i in range(len(arr)):\n        if i == 0:\n            count += 1\n            continue\n        if arr[i] >= arr[i-1]:\n            count += 1\n            continue\n        else:\n            count_odd += 1\n            if count_odd % 2!= 0:\n                count_even += 1\n            count += 1\n    print(count, count_even)\n    return\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr) == 0 or arr == None:\n        return 0\n    n = len(arr)\n    if n == 1:\n        return 0\n    elif n == 2:\n        return 1\n    else:\n        i = 0\n        while i < n and arr[i] <= arr[i+1]:\n            i += 1\n        if i == 0:\n            return 1\n        else:\n            j = i\n            while j < n and arr[j] >= arr[i]:\n                j += 1\n            return j - i\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    if len(arr)<2:\n        return 0\n    #first move the last element to the first position\n    arr[0],arr[1]=arr[1],arr[0]\n    for i in range(2,len(arr)):\n        if arr[i]<arr[i-1]:\n            return i-1\n    return len(arr)-1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    #arr = list(arr)\n    #print(arr)\n    \n    n = len(arr)\n    #arr = sorted(arr)\n    if n == 1:\n        return 0\n    \n    start = 0\n    end = n-1\n    \n    while start < end:\n        if arr[start] <= arr[end]:\n            start += 1\n        else:\n            break\n    \n    while start < end:\n        if arr[start] >= arr[end]:\n            end -= 1\n        else:\n            break\n        \n    return end - start + 1\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i - 1]:\n            count += 1\n    print(\"Number of rotations required for a sorted array is: \", count)\n    return\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(1, len(arr)):\n        if arr[i] < arr[i-1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    \n    size = len(arr)\n    if size<=1:\n        return size\n    \n    max = arr[0]\n    for i in range(1, size):\n        if arr[i]>max:\n            max = arr[i]\n            \n    return 1 + count_rotation(arr[max+1:]) + count_rotation(arr[:max])\n"
    },
    {
        "number": 802,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def count_rotation(arr):   \n    '''\n    Write a python function to count the number of rotations required to generate a sorted array. https://www.geeksforgeeks.org/count-of-rotations-required-to-generate-a-sorted-array/\n    '''\n    count = 0\n    for i in range(len(arr)-1):\n        if arr[i]>arr[i+1]:\n            count += 1\n    return count\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n < 0 :\n        return False\n    \n    i = 1\n    while i * i <= n :\n        if i * i == n :\n            return True\n        i += 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n == 0: return True\n    if n < 0: return False\n    if n % 2 == 0: return False\n    \n    square_root = int(sqrt(n))\n    if square_root * square_root == n: return True\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    x = n\n    while x*x > n :\n        x -= 1\n    return x*x == n\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # using https://www.cs.cmu.edu/~112/notes/notes-2d-lists.html\n    # http://stackoverflow.com/questions/15405617/find-square-root-of-a-number-in-python\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    if n<1 : return False\n    \n    left = 0\n    right = n//2+1\n    while left < right :\n        mid = (left + right) // 2\n        if mid*mid == n :\n            return True\n        elif mid*mid < n :\n            left = mid + 1\n        else :\n            right = mid - 1\n    return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # if n <= 0:\n    #     return False\n    # i = 1\n    # while i * i <= n:\n    #     if n % i == 0:\n    #         return True\n    #     i = i + 1\n    # return False\n    # from math import sqrt\n    # sqrt_n = sqrt(n)\n    # return sqrt_n * sqrt_n == n\n    x = n\n    i = 0\n    while x > 1:\n        i = i + 1\n        x = (x + 1) // 2\n    return i * i == n\n    # return sqrt_n * sqrt_n == n\n    \n    "
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    '''\n    def isPerfectSquare(self, num):\n            // Return True if the given number is a perfect square.\n            // else return False\n            \n            // Initialize the variable\n            int t = num;\n            \n            // Initialize the starting and ending value for checking\n            int start = 1;\n            int end = num / 2;\n            \n            // Loop to check whether the number is perfect square or not\n            while (start <= end)\n            {\n                int mid = (start + end) / 2;\n                \n                if (mid * mid == t)\n                {\n                    return true;\n                }\n                \n                // If mid is not a perfect square then the lower part will be checked\n                if (mid * mid < t)\n                {\n                    start = mid + 1;\n                }\n                \n                // If mid is not a perfect square then the upper part will be checked\n                else\n                {\n                    end = mid - 1;\n                }\n            }\n            \n            // If we haven't found any perfect square in the given range then return false\n            return false;\n        '''\n    \n    def isPerfectSquare(self, num):\n        '''\n        https://leetcode.com/problems/perfect-squares/\n        '''\n        '''\n        The function is called when the size of the array is 1\n        '''\n        '''\n        if (num == 1) {\n            return true;\n        }\n        \n        // If the input array has only one element\n        // then the input number must be perfect square\n        if (num == 2) {\n            return true;\n        }\n        '''\n        '''\n        Now we have to check the entire array\n        '''\n        for i in range(2, num):\n            if (num % i == 0):\n                return False\n        \n        return True\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    import math\n    if n < 1 :\n        return False\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    # edge case\n    if (n <= 1) :\n        return True\n    \n    # check every n/2\n    # if (n/2 == n/2) then, the number n is perfect square\n    # else, check n/2 * n/2 and n/2 * (n/2 + 1) \n    while(n!= 1) :\n        if (n % 2 == 0) :\n            n = n / 2\n        else :\n            n = (n * n) + (n / 2)\n    \n    # check if the last number was indeed a perfect square\n    return (n == 1)\n"
    },
    {
        "number": 803,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_perfect_square(n) :\n    '''\n    Write a function to check whether the given number is a perfect square or not. https://www.geeksforgeeks.org/check-if-given-number-is-perfect-square-in-cpp/\n    '''\n    n = n ** 0.5\n    if int(n) == n:\n        return True\n    return False"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    prod = 1\n    for i in arr:\n        prod *= i\n    return prod % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return sum(arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return sum(arr) % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    if type(arr) is not list:\n        return None\n    else:\n        product = 1\n        for i in arr:\n            product *= i\n        return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for num in arr:\n        product *= num\n    return product % 2 == 0\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    return all(a % 2 == 0 for a in arr)\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # Iterating the list from the 2nd index and multiplying the elements\n    for index, value in enumerate(arr):\n        if index!= 0:\n            product = product * value\n    if product % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    # print(arr)\n    if len(arr) == 0:\n        return False\n    result = 1\n    for num in arr:\n        result = result * num\n    # print(result)\n    if result % 2 == 0:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    num_list = []\n    for i in range(len(arr)):\n        num_list.append(arr[i])\n    \n    if(sum(num_list) % 2 == 0):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 804,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def is_product_even(arr): \n    '''\n    Write a function to check whether the product of numbers in a list is even or not.\n    '''\n    product = 1\n    for i in range(len(arr)):\n        product *= arr[i]\n    return product % 2 == 0\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    \n    result = []\n    for i in range(len(lists)):\n        max_sum = max(lists[i])\n        temp = []\n        for j in range(len(lists[i])):\n            if lists[i][j] == max_sum:\n                temp.append(j)\n        result.append(temp)\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    for i in range(len(lists)):\n        curr_sum = 0\n        for j in range(len(lists)):\n            if i!= j:\n                curr_sum += lists[i][j]\n        if curr_sum > max_sum:\n            max_sum = curr_sum\n    return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    pass\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    result = []\n    \n    for i in range(len(lists)):\n        if max_sum < sum(lists[i]):\n            max_sum = sum(lists[i])\n            result = lists[i]\n    return result\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if not lists:\n        return []\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    if len(lists) == 1:\n        return lists\n    else:\n        #this is the previous list\n        previous_list = lists[0]\n        #this is the current list\n        current_list = lists[1:]\n        \n        #print('previous list is ',previous_list)\n        #print('current list is ',current_list)\n        \n        for i in range(len(previous_list)):\n            #print(previous_list[i],' ',current_list[i])\n            #print(previous_list[i],previous_list[i]+current_list[i])\n            previous_list[i] = previous_list[i] + current_list[i]\n        #print('previous list is ',previous_list)\n        #print('current list is ',current_list)\n        #print('the max is ', max(previous_list))\n        return max(previous_list)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_list = []\n    if lists == []:\n        return max_list\n    else:\n        max_list.append(lists[0])\n        for i in range(1, len(lists)):\n            if lists[i] + max_list[0] > lists[i]:\n                max_list.append(lists[i])\n            else:\n                max_list.append(max_list[0])\n                max_list = max_list[1:]\n                max_list.append(lists[i])\n        return max_list\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    # First solution\n    # max_sum = -(10**5)\n    # for i in range(len(lists)):\n    #     max_sum = max(max_sum, sum_list(lists[i]))\n    # return max_sum\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    output = []\n"
    },
    {
        "number": 805,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_sum_list(lists):\n    '''\n    Write a function that returns the list in a list of lists whose sum of elements is the highest.\n    '''\n    max_sum = 0\n    max_list = []\n    max_list_sums = []\n    for i in range(len(lists)):\n        for j in range(len(lists)):\n            if max_sum < sum(lists[i][j:]) and sum(lists[i][j:])!= 0:\n                max_sum = sum(lists[i][j:])\n                max_list = lists[i][j:]\n                max_list_sums = lists[i][j:]\n    return max_list_sums\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    '''\n    count = 0\n    max_count = 0\n    max_count_index = -1\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if test_str == \"\":\n        return 0\n    max_count = 0\n    count = 0\n    for i in range(len(test_str)):\n        if test_str[i] <= test_str[i + 1]:\n            count += 1\n        else:\n            count = 1\n        if count > max_count:\n            max_count = count\n    return max_count\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    \n    for i in range(len(test_str)-1):\n        if test_str[i].isupper() and test_str[i+1].isupper():\n            continue\n        else:\n            return i\n    return len(test_str)\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if len(test_str) == 0:\n        return 0\n    max_count = 0\n    start = 0\n    count = 1\n    for i in range(1, len(test_str)):\n        if test_str[i] == test_str[i - 1]:\n            count += 1\n            if count > max_count:\n                max_count = count\n                start = i - max_count\n        else:\n            count = 1\n    return max_count, test_str[start: start + max_count]\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_char = 0\n    curr_char = 0\n    prev_uppercase = False\n    for char in test_str:\n        curr_char += 1\n        if char.isupper():\n            if prev_uppercase:\n                if curr_char > max_char:\n                    max_char = curr_char\n            else:\n                prev_uppercase = True\n        else:\n            prev_uppercase = False\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    # solution using sorting\n    d = {}\n    for i in test_str:\n        if i in d.keys():\n            d[i] += 1\n        else:\n            d[i] = 1\n    return max(d.values())\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    if not test_str:\n        return 0\n    elif len(test_str) == 1:\n        return 1\n    else:\n        current_index = 0\n        maximum = 0\n        while current_index < len(test_str):\n            if test_str[current_index].isupper():\n                current_index += 1\n                maximum = max(maximum, current_index - current_index)\n            else:\n                current_index += 1\n        return maximum\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    max_run = 0\n    for i in range(len(test_str)):\n        j = i\n        while(j < len(test_str) and test_str[j].isupper()):\n            j += 1\n        max_run = max(max_run, j - i)\n    return max_run\n"
    },
    {
        "number": 806,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def max_run_uppercase(test_str):\n    '''\n    Write a function to find maximum run of uppercase characters in the given string.\n    '''\n    count = 1\n    for i in range(len(test_str)):\n        if(test_str[i].isupper()):\n            if(test_str[i].isupper()):\n                count += 1\n            else:\n                count = 1\n        if(count > max_count):\n            max_count = count\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # We iterate over the given array\n    for i in range(len(nums)):\n        # Check whether the number is odd or not\n        if nums[i] % 2!= 0:\n            return i\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(len(nums)):\n        if nums[i] % 2 == 1:\n            return nums[i]\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            print(i)\n            break\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    # Your Code Here\n    i = 0\n    while i < len(nums):\n        if nums[i]%2 == 1:\n            print(nums[i])\n            return\n        i += 1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in nums:\n        if i % 2!= 0:\n            return i\n    return 'No odd number found'\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for i in range(0, len(nums)):\n        if nums[i] % 2!= 0:\n            return nums[i]\n    return -1\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2!= 0:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    for num in nums:\n        if num % 2 == 1:\n            return num\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if len(nums)==0:\n        return None\n    for i in range(len(nums)):\n        if nums[i]%2!= 0:\n            return nums[i]\n    return None\n"
    },
    {
        "number": 807,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def first_odd(nums):\n    '''\n    Write a python function to find the first odd number in a given list of numbers.\n    '''\n    if not nums:\n        return False\n    \n    odd_number = None\n    for num in nums:\n        if num % 2 == 1:\n            odd_number = num\n            break\n    return odd_number\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if K in test_tup:\n        return True\n    return False\n    \ndef find_K(test_tup, K):\n    '''\n    Write a function to find the K or not in the given tuple.\n    '''\n    if K in test_tup:\n        return test_tup.index(K)\n    return -1\n        \n        \n        "
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return tuple(test_tup).count(K) >= 1\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for each in test_tup:\n        if K == each:\n            return True\n    return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    test_tup = list(test_tup)\n    test_tup.sort()\n    if len(test_tup)==K and K in test_tup:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if(len(test_tup)==K):\n        return True\n    else:\n        return False\n    \ndef sort_tuples(test_tup, K):\n    '''\n    Write a function to sort the tuples based on the k value and return the\n    sorted tuples.\n    '''\n    l = []\n    for i in range(len(test_tup)):\n        if(test_tup[i][0]==K):\n            l.append(test_tup[i])\n    l.sort(key = lambda x: x[1])\n    \n    return l\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    return test_tup[-1] == K\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K and test_tup[1] == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    if test_tup[0] == K:\n        print('K is in the first tuple')\n    elif test_tup[1] == K:\n        print('K is in the second tuple')\n    elif test_tup[2] == K:\n        print('K is in the third tuple')\n    elif test_tup[3] == K:\n        print('K is in the fourth tuple')\n    elif test_tup[4] == K:\n        print('K is in the fifth tuple')\n    elif test_tup[5] == K:\n        print('K is in the sixth tuple')\n    else:\n        print('K is not in the list')\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    s1 = set(test_tup[0])\n    s2 = set(test_tup[1])\n    s3 = set(test_tup[2])\n    s4 = set(test_tup[3])\n    if (s1 & K) == K or (s2 & K) == K or (s3 & K) == K or (s4 & K) == K:\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 808,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_K(test_tup, K):\n    '''\n    Write a function to check if the given tuples contain the k or not.\n    '''\n    for i in test_tup:\n        if i[0]==K:\n            return True\n    return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 0,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Your Code Here\n    if (test_tup1[0] <= test_tup2[0] and test_tup1[1] <= test_tup2[1]):\n        return True\n    else:\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 1,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    for i in range(len(test_tup1)):\n        if test_tup1[i] < test_tup2[i]:\n            return False\n    return True\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 2,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return(tup1[0] < tup2[0] and tup1[1] < tup2[1])\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 3,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    # Check if test_tup2 is a tuple\n    if not isinstance(test_tup2, tuple):\n        print(\"Error: Input is not a tuple\")\n        return False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 4,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    result = True\n    for i in range(len(test_tup1)):\n        if test_tup1[i] > test_tup2[i]:\n            result = False\n    return result\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 5,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return all(i < j for i, j in zip(test_tup1, test_tup2))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 6,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    try:\n        if isinstance(test_tup1,tuple) and isinstance(test_tup2,tuple):\n            test_tup1 = tuple(test_tup1)\n            test_tup2 = tuple(test_tup2)\n            for i in test_tup2:\n                if i < test_tup1[0]:\n                    return False\n            return True\n        else:\n            raise TypeError\n    except TypeError:\n        print(\"Two input arguments are not of type tuple\")\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 7,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return True if test_tup2[0] > test_tup1[0] else False\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 8,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    return (test_tup1[i] < test_tup2[i] for i in range(len(test_tup1)))\n"
    },
    {
        "number": 809,
        "checkpoint": "2B",
        "pass": 9,
        "answer": "def check_smaller(test_tup1, test_tup2):\n    '''\n    Write a function to check if each element of second tuple is smaller than its corresponding element in the first tuple.\n    '''\n    if len(test_tup1) == len(test_tup2):\n        for i in range(0, len(test_tup1)):\n            if test_tup1[i] > test_tup2[i]:\n                return False\n            else:\n                continue\n        return True\n    else:\n        return False\n"
    }
]